// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cesarcipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cesarcipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cesarcipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> cesarcipher::ap_ST_fsm_state1 = "1";
const sc_lv<4> cesarcipher::ap_ST_fsm_state2 = "10";
const sc_lv<4> cesarcipher::ap_ST_fsm_state3 = "100";
const sc_lv<4> cesarcipher::ap_ST_fsm_state4 = "1000";
const sc_lv<32> cesarcipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cesarcipher::ap_const_lv32_2 = "10";
const sc_lv<32> cesarcipher::ap_const_lv32_3 = "11";
const sc_lv<1> cesarcipher::ap_const_lv1_1 = "1";
const sc_lv<5> cesarcipher::ap_const_lv5_1 = "1";
const sc_lv<1> cesarcipher::ap_const_lv1_0 = "0";
const sc_lv<32> cesarcipher::ap_const_lv32_1 = "1";
const sc_lv<5> cesarcipher::ap_const_lv5_1A = "11010";
const sc_lv<8> cesarcipher::ap_const_lv8_0 = "00000000";
const bool cesarcipher::ap_const_boolean_1 = true;

cesarcipher::cesarcipher(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_60_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_60_p2 );

    SC_METHOD(thread_chave_fu_83_p2);
    sensitive << ( chave_0_reg_37 );

    SC_METHOD(thread_i_fu_71_p2);
    sensitive << ( i_0_reg_49 );

    SC_METHOD(thread_icmp_ln11_fu_77_p2);
    sensitive << ( palavra_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln8_fu_60_p2);
    sensitive << ( chave_0_reg_37 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_palavra_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln11_fu_66_p1 );

    SC_METHOD(thread_palavra_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sext_ln11_fu_66_p1);
    sensitive << ( i_0_reg_49 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln11_fu_77_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_60_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cesarcipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, palavra_address0, "(port)palavra_address0");
    sc_trace(mVcdFile, palavra_ce0, "(port)palavra_ce0");
    sc_trace(mVcdFile, palavra_q0, "(port)palavra_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_71_p2, "i_fu_71_p2");
    sc_trace(mVcdFile, i_reg_97, "i_reg_97");
    sc_trace(mVcdFile, chave_fu_83_p2, "chave_fu_83_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln11_fu_77_p2, "icmp_ln11_fu_77_p2");
    sc_trace(mVcdFile, chave_0_reg_37, "chave_0_reg_37");
    sc_trace(mVcdFile, i_0_reg_49, "i_0_reg_49");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln8_fu_60_p2, "icmp_ln8_fu_60_p2");
    sc_trace(mVcdFile, sext_ln11_fu_66_p1, "sext_ln11_fu_66_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cesarcipher.hdltvin.dat");
    mHdltvoutHandle.open("cesarcipher.hdltvout.dat");
}

cesarcipher::~cesarcipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void cesarcipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_77_p2.read(), ap_const_lv1_1))) {
        chave_0_reg_37 = chave_fu_83_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        chave_0_reg_37 = ap_const_lv5_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln8_fu_60_p2.read()))) {
        i_0_reg_49 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln11_fu_77_p2.read(), ap_const_lv1_0))) {
        i_0_reg_49 = i_reg_97.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_97 = i_fu_71_p2.read();
    }
}

void cesarcipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cesarcipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cesarcipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cesarcipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cesarcipher::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln8_fu_60_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cesarcipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cesarcipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln8_fu_60_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cesarcipher::thread_chave_fu_83_p2() {
    chave_fu_83_p2 = (!chave_0_reg_37.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(chave_0_reg_37.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void cesarcipher::thread_i_fu_71_p2() {
    i_fu_71_p2 = (!i_0_reg_49.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_reg_49.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void cesarcipher::thread_icmp_ln11_fu_77_p2() {
    icmp_ln11_fu_77_p2 = (!palavra_q0.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(palavra_q0.read() == ap_const_lv8_0);
}

void cesarcipher::thread_icmp_ln8_fu_60_p2() {
    icmp_ln8_fu_60_p2 = (!chave_0_reg_37.read().is_01() || !ap_const_lv5_1A.is_01())? sc_lv<1>(): sc_lv<1>(chave_0_reg_37.read() == ap_const_lv5_1A);
}

void cesarcipher::thread_palavra_address0() {
    palavra_address0 =  (sc_lv<5>) (sext_ln11_fu_66_p1.read());
}

void cesarcipher::thread_palavra_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        palavra_ce0 = ap_const_logic_1;
    } else {
        palavra_ce0 = ap_const_logic_0;
    }
}

void cesarcipher::thread_sext_ln11_fu_66_p1() {
    sext_ln11_fu_66_p1 = esl_sext<64,32>(i_0_reg_49.read());
}

void cesarcipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln8_fu_60_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_77_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void cesarcipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"palavra_address0\" :  \"" << palavra_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"palavra_ce0\" :  \"" << palavra_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"palavra_q0\" :  \"" << palavra_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

