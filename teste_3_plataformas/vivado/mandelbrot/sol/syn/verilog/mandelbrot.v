// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=39,HLS_SYN_FF=3248,HLS_SYN_LUT=3489,HLS_VERSION=2019_1}" *)

module mandelbrot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        color_address0,
        color_ce0,
        color_we0,
        color_d0,
        color_address1,
        color_ce1,
        color_we1,
        color_d1,
        xmax,
        xmin,
        ymax,
        ymin,
        maxiter,
        xres,
        yres,
        dx,
        dy
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] color_address0;
output   color_ce0;
output   color_we0;
output  [7:0] color_d0;
output  [2:0] color_address1;
output   color_ce1;
output   color_we1;
output  [7:0] color_d1;
input  [31:0] xmax;
input  [31:0] xmin;
input  [31:0] ymax;
input  [31:0] ymin;
input  [31:0] maxiter;
input  [31:0] xres;
input  [31:0] yres;
input  [31:0] dx;
input  [31:0] dy;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] color_address0;
reg color_ce0;
reg color_we0;
reg[7:0] color_d0;
reg[2:0] color_address1;
reg color_ce1;
reg color_we1;
reg[7:0] color_d1;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_271_p2;
reg   [63:0] reg_306;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire   [31:0] add_ln12_fu_312_p2;
reg   [31:0] add_ln12_reg_498;
wire    ap_CS_fsm_state2;
wire   [30:0] j_fu_326_p2;
reg   [30:0] j_reg_506;
wire   [31:0] sub_ln13_fu_332_p2;
reg   [31:0] sub_ln13_reg_511;
wire   [0:0] icmp_ln12_fu_321_p2;
wire   [63:0] grp_fu_303_p1;
reg   [63:0] y_reg_516;
wire    ap_CS_fsm_state6;
wire   [31:0] add_ln14_fu_337_p2;
reg   [31:0] add_ln14_reg_521;
wire    ap_CS_fsm_state7;
wire   [30:0] i_fu_351_p2;
reg   [30:0] i_reg_529;
wire   [31:0] add_ln19_fu_357_p2;
reg   [31:0] add_ln19_reg_534;
wire   [0:0] icmp_ln14_fu_346_p2;
reg   [63:0] x_reg_539;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln21_fu_366_p2;
reg   [0:0] icmp_ln21_reg_544;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln21_1_fu_389_p2;
reg   [0:0] icmp_ln21_1_reg_548;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln21_2_fu_395_p2;
reg   [0:0] icmp_ln21_2_reg_553;
wire   [30:0] add_ln21_fu_411_p2;
reg   [30:0] add_ln21_reg_561;
wire    ap_CS_fsm_state18;
wire   [0:0] and_ln21_fu_405_p2;
reg   [7:0] trunc_ln_reg_566;
wire   [7:0] trunc_ln35_fu_428_p1;
reg   [7:0] trunc_ln35_reg_571;
wire   [63:0] grp_fu_283_p2;
reg   [63:0] tmp_2_reg_576;
reg   [63:0] v_reg_581;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_279_p2;
reg   [63:0] u_reg_588;
wire    ap_CS_fsm_state32;
wire   [63:0] grp_fu_289_p2;
wire   [63:0] grp_fu_293_p2;
reg   [30:0] j_0_reg_167;
reg   [31:0] phi_mul2_reg_178;
reg   [30:0] i_0_reg_189;
wire    ap_CS_fsm_state34;
reg   [31:0] phi_mul_reg_200;
reg   [30:0] k_0_reg_211;
reg   [63:0] phi_ln22_reg_223;
reg   [63:0] v2_0_reg_235;
wire   [63:0] ap_phi_mux_u2_0_phi_fu_251_p4;
reg   [63:0] u2_0_reg_247;
wire   [63:0] ap_phi_mux_v23_0_phi_fu_263_p4;
reg   [63:0] v23_0_reg_259;
wire    ap_CS_fsm_state33;
reg   [63:0] grp_fu_271_p0;
reg   [63:0] grp_fu_271_p1;
wire    ap_CS_fsm_state23;
reg   [63:0] grp_fu_283_p0;
reg   [63:0] grp_fu_283_p1;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_303_p0;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire   [31:0] zext_ln12_fu_317_p1;
wire   [31:0] zext_ln14_fu_342_p1;
wire   [31:0] zext_ln21_fu_362_p1;
wire   [63:0] bitcast_ln21_fu_371_p1;
wire   [10:0] tmp_1_fu_375_p4;
wire   [51:0] trunc_ln21_fu_385_p1;
wire   [0:0] or_ln21_fu_401_p2;
wire   [0:0] grp_fu_298_p2;
reg   [1:0] grp_fu_271_opcode;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_271_p0),
    .din1(grp_fu_271_p1),
    .opcode(grp_fu_271_opcode),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_306),
    .din1(x_reg_539),
    .ce(1'b1),
    .dout(grp_fu_279_p2)
);

mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .din1(grp_fu_283_p1),
    .ce(1'b1),
    .dout(grp_fu_283_p2)
);

mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_reg_581),
    .din1(v_reg_581),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(u_reg_588),
    .din1(64'd4611686018427387904),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

mandelbrot_dcmp_64ns_64ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
mandelbrot_dcmp_64ns_64ns_1_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_306),
    .din1(64'd4616189618054758400),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_298_p2)
);

mandelbrot_sitodp_32ns_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mandelbrot_sitodp_32ns_64_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .ce(1'b1),
    .dout(grp_fu_303_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_0_reg_189 <= i_reg_529;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_189 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_346_p2 == 1'd0))) begin
        j_0_reg_167 <= j_reg_506;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_167 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        k_0_reg_211 <= add_ln21_reg_561;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_0_reg_211 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        phi_ln22_reg_223 <= grp_fu_293_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_ln22_reg_223 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_346_p2 == 1'd0))) begin
        phi_mul2_reg_178 <= add_ln12_reg_498;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        phi_mul_reg_200 <= add_ln14_reg_521;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_200 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        u2_0_reg_247 <= grp_fu_283_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        u2_0_reg_247 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        v23_0_reg_259 <= grp_fu_289_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        v23_0_reg_259 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        v2_0_reg_235 <= v_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        v2_0_reg_235 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln12_reg_498 <= add_ln12_fu_312_p2;
        j_reg_506 <= j_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln14_reg_521 <= add_ln14_fu_337_p2;
        i_reg_529 <= i_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_346_p2 == 1'd1))) begin
        add_ln19_reg_534 <= add_ln19_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == and_ln21_fu_405_p2))) begin
        add_ln21_reg_561 <= add_ln21_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        icmp_ln21_1_reg_548 <= icmp_ln21_1_fu_389_p2;
        icmp_ln21_2_reg_553 <= icmp_ln21_2_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln21_reg_544 <= icmp_ln21_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_306 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_321_p2 == 1'd1))) begin
        sub_ln13_reg_511 <= sub_ln13_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_2_reg_576 <= grp_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln21_fu_405_p2))) begin
        trunc_ln35_reg_571 <= trunc_ln35_fu_428_p1;
        trunc_ln_reg_566 <= {{k_0_reg_211[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        u_reg_588 <= grp_fu_279_p2;
        v_reg_581 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_reg_539 <= grp_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_516 <= grp_fu_303_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_321_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_321_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        color_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        color_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        color_address0 = 64'd0;
    end else begin
        color_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        color_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        color_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        color_address1 = 64'd1;
    end else begin
        color_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state18))) begin
        color_ce0 = 1'b1;
    end else begin
        color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state18))) begin
        color_ce1 = 1'b1;
    end else begin
        color_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34))) begin
        color_d0 = trunc_ln_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        color_d0 = {{k_0_reg_211[15:8]}};
    end else begin
        color_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34))) begin
        color_d1 = trunc_ln35_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        color_d1 = trunc_ln35_fu_428_p1;
    end else begin
        color_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state34) & (icmp_ln21_reg_544 == 1'd1)) | ((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln21_fu_405_p2)))) begin
        color_we0 = 1'b1;
    end else begin
        color_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state34) & (icmp_ln21_reg_544 == 1'd1)) | ((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln21_fu_405_p2)))) begin
        color_we1 = 1'b1;
    end else begin
        color_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == and_ln21_fu_405_p2))) begin
        grp_fu_271_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (icmp_ln21_fu_366_p2 == 1'd1)))) begin
        grp_fu_271_opcode = 2'd0;
    end else begin
        grp_fu_271_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_271_p0 = tmp_2_reg_576;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_271_p0 = u2_0_reg_247;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_271_p0 = ap_phi_mux_u2_0_phi_fu_251_p4;
    end else begin
        grp_fu_271_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_271_p1 = y_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_271_p1 = v23_0_reg_259;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_271_p1 = ap_phi_mux_v23_0_phi_fu_263_p4;
    end else begin
        grp_fu_271_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_283_p0 = u_reg_588;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_283_p0 = phi_ln22_reg_223;
    end else begin
        grp_fu_283_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_283_p1 = u_reg_588;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_283_p1 = v2_0_reg_235;
    end else begin
        grp_fu_283_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_303_p0 = add_ln19_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_303_p0 = sub_ln13_reg_511;
    end else begin
        grp_fu_303_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln12_fu_321_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln14_fu_346_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln21_fu_366_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == and_ln21_fu_405_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_312_p2 = (phi_mul2_reg_178 + dy);

assign add_ln14_fu_337_p2 = (phi_mul_reg_200 + dx);

assign add_ln19_fu_357_p2 = (phi_mul_reg_200 + xmin);

assign add_ln21_fu_411_p2 = (k_0_reg_211 + 31'd1);

assign and_ln21_fu_405_p2 = (or_ln21_fu_401_p2 & grp_fu_298_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_u2_0_phi_fu_251_p4 = u2_0_reg_247;

assign ap_phi_mux_v23_0_phi_fu_263_p4 = v23_0_reg_259;

assign bitcast_ln21_fu_371_p1 = reg_306;

assign i_fu_351_p2 = (i_0_reg_189 + 31'd1);

assign icmp_ln12_fu_321_p2 = (($signed(zext_ln12_fu_317_p1) < $signed(yres)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_346_p2 = (($signed(zext_ln14_fu_342_p1) < $signed(xres)) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_389_p2 = ((tmp_1_fu_375_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_395_p2 = ((trunc_ln21_fu_385_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_366_p2 = (($signed(zext_ln21_fu_362_p1) < $signed(maxiter)) ? 1'b1 : 1'b0);

assign j_fu_326_p2 = (j_0_reg_167 + 31'd1);

assign or_ln21_fu_401_p2 = (icmp_ln21_2_reg_553 | icmp_ln21_1_reg_548);

assign sub_ln13_fu_332_p2 = (ymax - phi_mul2_reg_178);

assign tmp_1_fu_375_p4 = {{bitcast_ln21_fu_371_p1[62:52]}};

assign trunc_ln21_fu_385_p1 = bitcast_ln21_fu_371_p1[51:0];

assign trunc_ln35_fu_428_p1 = k_0_reg_211[7:0];

assign zext_ln12_fu_317_p1 = j_0_reg_167;

assign zext_ln14_fu_342_p1 = i_0_reg_189;

assign zext_ln21_fu_362_p1 = k_0_reg_211;

endmodule //mandelbrot
