// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mandelbrot.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mandelbrot::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mandelbrot::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> mandelbrot::ap_ST_fsm_state1 = "1";
const sc_lv<34> mandelbrot::ap_ST_fsm_state2 = "10";
const sc_lv<34> mandelbrot::ap_ST_fsm_state3 = "100";
const sc_lv<34> mandelbrot::ap_ST_fsm_state4 = "1000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state5 = "10000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state6 = "100000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> mandelbrot::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_F = "1111";
const sc_lv<32> mandelbrot::ap_const_lv32_15 = "10101";
const sc_lv<32> mandelbrot::ap_const_lv32_1 = "1";
const sc_lv<1> mandelbrot::ap_const_lv1_1 = "1";
const sc_lv<32> mandelbrot::ap_const_lv32_5 = "101";
const sc_lv<32> mandelbrot::ap_const_lv32_6 = "110";
const sc_lv<32> mandelbrot::ap_const_lv32_A = "1010";
const sc_lv<32> mandelbrot::ap_const_lv32_B = "1011";
const sc_lv<32> mandelbrot::ap_const_lv32_10 = "10000";
const sc_lv<32> mandelbrot::ap_const_lv32_11 = "10001";
const sc_lv<1> mandelbrot::ap_const_lv1_0 = "0";
const sc_lv<32> mandelbrot::ap_const_lv32_1A = "11010";
const sc_lv<32> mandelbrot::ap_const_lv32_1F = "11111";
const sc_lv<31> mandelbrot::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_21 = "100001";
const sc_lv<31> mandelbrot::ap_const_lv31_1 = "1";
const sc_lv<64> mandelbrot::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandelbrot::ap_const_lv64_1 = "1";
const sc_lv<64> mandelbrot::ap_const_lv64_2 = "10";
const sc_lv<64> mandelbrot::ap_const_lv64_3 = "11";
const sc_lv<64> mandelbrot::ap_const_lv64_4 = "100";
const sc_lv<64> mandelbrot::ap_const_lv64_5 = "101";
const sc_lv<32> mandelbrot::ap_const_lv32_20 = "100000";
const sc_lv<32> mandelbrot::ap_const_lv32_16 = "10110";
const sc_lv<32> mandelbrot::ap_const_lv32_1B = "11011";
const sc_lv<64> mandelbrot::ap_const_lv64_4000000000000000 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandelbrot::ap_const_lv64_4010000000000000 = "100000000010000000000000000000000000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_2 = "10";
const sc_lv<32> mandelbrot::ap_const_lv32_7 = "111";
const sc_lv<32> mandelbrot::ap_const_lv32_34 = "110100";
const sc_lv<32> mandelbrot::ap_const_lv32_3E = "111110";
const sc_lv<11> mandelbrot::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> mandelbrot::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_8 = "1000";
const sc_lv<2> mandelbrot::ap_const_lv2_0 = "00";
const sc_lv<2> mandelbrot::ap_const_lv2_1 = "1";
const sc_lv<5> mandelbrot::ap_const_lv5_4 = "100";
const bool mandelbrot::ap_const_boolean_1 = true;

mandelbrot::mandelbrot(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1 = new mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1<1,5,64,64,64>("mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1");
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->clk(ap_clk);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->reset(ap_rst);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->din0(grp_fu_271_p0);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->din1(grp_fu_271_p1);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->opcode(grp_fu_271_opcode);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->ce(ap_var_for_const0);
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1->dout(grp_fu_271_p2);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2 = new mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1<1,5,64,64,64>("mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2");
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->clk(ap_clk);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->reset(ap_rst);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->din0(reg_306);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->din1(x_reg_539);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->ce(ap_var_for_const0);
    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2->dout(grp_fu_279_p2);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3 = new mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1<1,5,64,64,64>("mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3");
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->clk(ap_clk);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->reset(ap_rst);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->din0(grp_fu_283_p0);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->din1(grp_fu_283_p1);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->ce(ap_var_for_const0);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3->dout(grp_fu_283_p2);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4 = new mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1<1,5,64,64,64>("mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4");
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->clk(ap_clk);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->reset(ap_rst);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->din0(v_reg_581);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->din1(v_reg_581);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->ce(ap_var_for_const0);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4->dout(grp_fu_289_p2);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5 = new mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1<1,5,64,64,64>("mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5");
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->clk(ap_clk);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->reset(ap_rst);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->din0(u_reg_588);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->din1(ap_var_for_const1);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->ce(ap_var_for_const0);
    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5->dout(grp_fu_293_p2);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6 = new mandelbrot_dcmp_64ns_64ns_1_2_1<1,2,64,64,1>("mandelbrot_dcmp_64ns_64ns_1_2_1_U6");
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->clk(ap_clk);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->reset(ap_rst);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->din0(reg_306);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->din1(ap_var_for_const2);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->ce(ap_var_for_const0);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->opcode(ap_var_for_const3);
    mandelbrot_dcmp_64ns_64ns_1_2_1_U6->dout(grp_fu_298_p2);
    mandelbrot_sitodp_32ns_64_4_1_U7 = new mandelbrot_sitodp_32ns_64_4_1<1,4,32,64>("mandelbrot_sitodp_32ns_64_4_1_U7");
    mandelbrot_sitodp_32ns_64_4_1_U7->clk(ap_clk);
    mandelbrot_sitodp_32ns_64_4_1_U7->reset(ap_rst);
    mandelbrot_sitodp_32ns_64_4_1_U7->din0(grp_fu_303_p0);
    mandelbrot_sitodp_32ns_64_4_1_U7->ce(ap_var_for_const0);
    mandelbrot_sitodp_32ns_64_4_1_U7->dout(grp_fu_303_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln12_fu_312_p2);
    sensitive << ( dy );
    sensitive << ( phi_mul2_reg_178 );

    SC_METHOD(thread_add_ln14_fu_337_p2);
    sensitive << ( dx );
    sensitive << ( phi_mul_reg_200 );

    SC_METHOD(thread_add_ln19_fu_357_p2);
    sensitive << ( xmin );
    sensitive << ( phi_mul_reg_200 );

    SC_METHOD(thread_add_ln21_fu_411_p2);
    sensitive << ( k_0_reg_211 );

    SC_METHOD(thread_and_ln21_fu_405_p2);
    sensitive << ( or_ln21_fu_401_p2 );
    sensitive << ( grp_fu_298_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln12_fu_321_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_u2_0_phi_fu_251_p4);
    sensitive << ( u2_0_reg_247 );

    SC_METHOD(thread_ap_phi_mux_v23_0_phi_fu_263_p4);
    sensitive << ( v23_0_reg_259 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln12_fu_321_p2 );

    SC_METHOD(thread_bitcast_ln21_fu_371_p1);
    sensitive << ( reg_306 );

    SC_METHOD(thread_color_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_address1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_ce1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_d0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( trunc_ln_reg_566 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( k_0_reg_211 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_d1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( trunc_ln35_fu_428_p1 );
    sensitive << ( trunc_ln35_reg_571 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_we0);
    sensitive << ( icmp_ln21_reg_544 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( and_ln21_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_color_we1);
    sensitive << ( icmp_ln21_reg_544 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( and_ln21_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_grp_fu_271_opcode);
    sensitive << ( icmp_ln21_fu_366_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( and_ln21_fu_405_p2 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_271_p0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_2_reg_576 );
    sensitive << ( ap_phi_mux_u2_0_phi_fu_251_p4 );
    sensitive << ( u2_0_reg_247 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_271_p1);
    sensitive << ( y_reg_516 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_phi_mux_v23_0_phi_fu_263_p4 );
    sensitive << ( v23_0_reg_259 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_283_p0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( u_reg_588 );
    sensitive << ( phi_ln22_reg_223 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_grp_fu_283_p1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( u_reg_588 );
    sensitive << ( v2_0_reg_235 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_grp_fu_303_p0);
    sensitive << ( sub_ln13_reg_511 );
    sensitive << ( add_ln19_reg_534 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_i_fu_351_p2);
    sensitive << ( i_0_reg_189 );

    SC_METHOD(thread_icmp_ln12_fu_321_p2);
    sensitive << ( yres );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln12_fu_317_p1 );

    SC_METHOD(thread_icmp_ln14_fu_346_p2);
    sensitive << ( xres );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln14_fu_342_p1 );

    SC_METHOD(thread_icmp_ln21_1_fu_389_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_1_fu_375_p4 );

    SC_METHOD(thread_icmp_ln21_2_fu_395_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( trunc_ln21_fu_385_p1 );

    SC_METHOD(thread_icmp_ln21_fu_366_p2);
    sensitive << ( maxiter );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln21_fu_362_p1 );

    SC_METHOD(thread_j_fu_326_p2);
    sensitive << ( j_0_reg_167 );

    SC_METHOD(thread_or_ln21_fu_401_p2);
    sensitive << ( icmp_ln21_1_reg_548 );
    sensitive << ( icmp_ln21_2_reg_553 );

    SC_METHOD(thread_sub_ln13_fu_332_p2);
    sensitive << ( ymax );
    sensitive << ( phi_mul2_reg_178 );

    SC_METHOD(thread_tmp_1_fu_375_p4);
    sensitive << ( bitcast_ln21_fu_371_p1 );

    SC_METHOD(thread_trunc_ln21_fu_385_p1);
    sensitive << ( bitcast_ln21_fu_371_p1 );

    SC_METHOD(thread_trunc_ln35_fu_428_p1);
    sensitive << ( k_0_reg_211 );

    SC_METHOD(thread_zext_ln12_fu_317_p1);
    sensitive << ( j_0_reg_167 );

    SC_METHOD(thread_zext_ln14_fu_342_p1);
    sensitive << ( i_0_reg_189 );

    SC_METHOD(thread_zext_ln21_fu_362_p1);
    sensitive << ( k_0_reg_211 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln12_fu_321_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln14_fu_346_p2 );
    sensitive << ( icmp_ln21_fu_366_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( and_ln21_fu_405_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    ap_CS_fsm = "0000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mandelbrot_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, color_address0, "(port)color_address0");
    sc_trace(mVcdFile, color_ce0, "(port)color_ce0");
    sc_trace(mVcdFile, color_we0, "(port)color_we0");
    sc_trace(mVcdFile, color_d0, "(port)color_d0");
    sc_trace(mVcdFile, color_address1, "(port)color_address1");
    sc_trace(mVcdFile, color_ce1, "(port)color_ce1");
    sc_trace(mVcdFile, color_we1, "(port)color_we1");
    sc_trace(mVcdFile, color_d1, "(port)color_d1");
    sc_trace(mVcdFile, xmax, "(port)xmax");
    sc_trace(mVcdFile, xmin, "(port)xmin");
    sc_trace(mVcdFile, ymax, "(port)ymax");
    sc_trace(mVcdFile, ymin, "(port)ymin");
    sc_trace(mVcdFile, maxiter, "(port)maxiter");
    sc_trace(mVcdFile, xres, "(port)xres");
    sc_trace(mVcdFile, yres, "(port)yres");
    sc_trace(mVcdFile, dx, "(port)dx");
    sc_trace(mVcdFile, dy, "(port)dy");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_271_p2, "grp_fu_271_p2");
    sc_trace(mVcdFile, reg_306, "reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, add_ln12_fu_312_p2, "add_ln12_fu_312_p2");
    sc_trace(mVcdFile, add_ln12_reg_498, "add_ln12_reg_498");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_fu_326_p2, "j_fu_326_p2");
    sc_trace(mVcdFile, j_reg_506, "j_reg_506");
    sc_trace(mVcdFile, sub_ln13_fu_332_p2, "sub_ln13_fu_332_p2");
    sc_trace(mVcdFile, sub_ln13_reg_511, "sub_ln13_reg_511");
    sc_trace(mVcdFile, icmp_ln12_fu_321_p2, "icmp_ln12_fu_321_p2");
    sc_trace(mVcdFile, grp_fu_303_p1, "grp_fu_303_p1");
    sc_trace(mVcdFile, y_reg_516, "y_reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, add_ln14_fu_337_p2, "add_ln14_fu_337_p2");
    sc_trace(mVcdFile, add_ln14_reg_521, "add_ln14_reg_521");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_fu_351_p2, "i_fu_351_p2");
    sc_trace(mVcdFile, i_reg_529, "i_reg_529");
    sc_trace(mVcdFile, add_ln19_fu_357_p2, "add_ln19_fu_357_p2");
    sc_trace(mVcdFile, add_ln19_reg_534, "add_ln19_reg_534");
    sc_trace(mVcdFile, icmp_ln14_fu_346_p2, "icmp_ln14_fu_346_p2");
    sc_trace(mVcdFile, x_reg_539, "x_reg_539");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, icmp_ln21_fu_366_p2, "icmp_ln21_fu_366_p2");
    sc_trace(mVcdFile, icmp_ln21_reg_544, "icmp_ln21_reg_544");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, icmp_ln21_1_fu_389_p2, "icmp_ln21_1_fu_389_p2");
    sc_trace(mVcdFile, icmp_ln21_1_reg_548, "icmp_ln21_1_reg_548");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, icmp_ln21_2_fu_395_p2, "icmp_ln21_2_fu_395_p2");
    sc_trace(mVcdFile, icmp_ln21_2_reg_553, "icmp_ln21_2_reg_553");
    sc_trace(mVcdFile, add_ln21_fu_411_p2, "add_ln21_fu_411_p2");
    sc_trace(mVcdFile, add_ln21_reg_561, "add_ln21_reg_561");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, and_ln21_fu_405_p2, "and_ln21_fu_405_p2");
    sc_trace(mVcdFile, trunc_ln_reg_566, "trunc_ln_reg_566");
    sc_trace(mVcdFile, trunc_ln35_fu_428_p1, "trunc_ln35_fu_428_p1");
    sc_trace(mVcdFile, trunc_ln35_reg_571, "trunc_ln35_reg_571");
    sc_trace(mVcdFile, grp_fu_283_p2, "grp_fu_283_p2");
    sc_trace(mVcdFile, tmp_2_reg_576, "tmp_2_reg_576");
    sc_trace(mVcdFile, v_reg_581, "v_reg_581");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_fu_279_p2, "grp_fu_279_p2");
    sc_trace(mVcdFile, u_reg_588, "u_reg_588");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, grp_fu_289_p2, "grp_fu_289_p2");
    sc_trace(mVcdFile, grp_fu_293_p2, "grp_fu_293_p2");
    sc_trace(mVcdFile, j_0_reg_167, "j_0_reg_167");
    sc_trace(mVcdFile, phi_mul2_reg_178, "phi_mul2_reg_178");
    sc_trace(mVcdFile, i_0_reg_189, "i_0_reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, phi_mul_reg_200, "phi_mul_reg_200");
    sc_trace(mVcdFile, k_0_reg_211, "k_0_reg_211");
    sc_trace(mVcdFile, phi_ln22_reg_223, "phi_ln22_reg_223");
    sc_trace(mVcdFile, v2_0_reg_235, "v2_0_reg_235");
    sc_trace(mVcdFile, ap_phi_mux_u2_0_phi_fu_251_p4, "ap_phi_mux_u2_0_phi_fu_251_p4");
    sc_trace(mVcdFile, u2_0_reg_247, "u2_0_reg_247");
    sc_trace(mVcdFile, ap_phi_mux_v23_0_phi_fu_263_p4, "ap_phi_mux_v23_0_phi_fu_263_p4");
    sc_trace(mVcdFile, v23_0_reg_259, "v23_0_reg_259");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, grp_fu_271_p0, "grp_fu_271_p0");
    sc_trace(mVcdFile, grp_fu_271_p1, "grp_fu_271_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_283_p0, "grp_fu_283_p0");
    sc_trace(mVcdFile, grp_fu_283_p1, "grp_fu_283_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_303_p0, "grp_fu_303_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, zext_ln12_fu_317_p1, "zext_ln12_fu_317_p1");
    sc_trace(mVcdFile, zext_ln14_fu_342_p1, "zext_ln14_fu_342_p1");
    sc_trace(mVcdFile, zext_ln21_fu_362_p1, "zext_ln21_fu_362_p1");
    sc_trace(mVcdFile, bitcast_ln21_fu_371_p1, "bitcast_ln21_fu_371_p1");
    sc_trace(mVcdFile, tmp_1_fu_375_p4, "tmp_1_fu_375_p4");
    sc_trace(mVcdFile, trunc_ln21_fu_385_p1, "trunc_ln21_fu_385_p1");
    sc_trace(mVcdFile, or_ln21_fu_401_p2, "or_ln21_fu_401_p2");
    sc_trace(mVcdFile, grp_fu_298_p2, "grp_fu_298_p2");
    sc_trace(mVcdFile, grp_fu_271_opcode, "grp_fu_271_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mandelbrot.hdltvin.dat");
    mHdltvoutHandle.open("mandelbrot.hdltvout.dat");
}

mandelbrot::~mandelbrot() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1;
    delete mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2;
    delete mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3;
    delete mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4;
    delete mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5;
    delete mandelbrot_dcmp_64ns_64ns_1_2_1_U6;
    delete mandelbrot_sitodp_32ns_64_4_1_U7;
}

void mandelbrot::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mandelbrot::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_4000000000000000;
}

void mandelbrot::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_4010000000000000;
}

void mandelbrot::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv5_4;
}

void mandelbrot::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        i_0_reg_189 = i_reg_529.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_reg_189 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_346_p2.read(), ap_const_lv1_0))) {
        j_0_reg_167 = j_reg_506.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_167 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        k_0_reg_211 = add_ln21_reg_561.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        k_0_reg_211 = ap_const_lv31_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        phi_ln22_reg_223 = grp_fu_293_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        phi_ln22_reg_223 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_346_p2.read(), ap_const_lv1_0))) {
        phi_mul2_reg_178 = add_ln12_reg_498.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul2_reg_178 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        phi_mul_reg_200 = add_ln14_reg_521.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        phi_mul_reg_200 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        u2_0_reg_247 = grp_fu_283_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        u2_0_reg_247 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        v23_0_reg_259 = grp_fu_289_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        v23_0_reg_259 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        v2_0_reg_235 = v_reg_581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        v2_0_reg_235 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln12_reg_498 = add_ln12_fu_312_p2.read();
        j_reg_506 = j_fu_326_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        add_ln14_reg_521 = add_ln14_fu_337_p2.read();
        i_reg_529 = i_fu_351_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_346_p2.read()))) {
        add_ln19_reg_534 = add_ln19_fu_357_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln21_fu_405_p2.read()))) {
        add_ln21_reg_561 = add_ln21_fu_411_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        icmp_ln21_1_reg_548 = icmp_ln21_1_fu_389_p2.read();
        icmp_ln21_2_reg_553 = icmp_ln21_2_fu_395_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        icmp_ln21_reg_544 = icmp_ln21_fu_366_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        reg_306 = grp_fu_271_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_321_p2.read(), ap_const_lv1_1))) {
        sub_ln13_reg_511 = sub_ln13_fu_332_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_2_reg_576 = grp_fu_283_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(and_ln21_fu_405_p2.read(), ap_const_lv1_0))) {
        trunc_ln35_reg_571 = trunc_ln35_fu_428_p1.read();
        trunc_ln_reg_566 = k_0_reg_211.read().range(15, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        u_reg_588 = grp_fu_279_p2.read();
        v_reg_581 = grp_fu_271_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        x_reg_539 = grp_fu_303_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        y_reg_516 = grp_fu_303_p1.read();
    }
}

void mandelbrot::thread_add_ln12_fu_312_p2() {
    add_ln12_fu_312_p2 = (!phi_mul2_reg_178.read().is_01() || !dy.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul2_reg_178.read()) + sc_biguint<32>(dy.read()));
}

void mandelbrot::thread_add_ln14_fu_337_p2() {
    add_ln14_fu_337_p2 = (!phi_mul_reg_200.read().is_01() || !dx.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_200.read()) + sc_biguint<32>(dx.read()));
}

void mandelbrot::thread_add_ln19_fu_357_p2() {
    add_ln19_fu_357_p2 = (!phi_mul_reg_200.read().is_01() || !xmin.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_200.read()) + sc_biguint<32>(xmin.read()));
}

void mandelbrot::thread_add_ln21_fu_411_p2() {
    add_ln21_fu_411_p2 = (!k_0_reg_211.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(k_0_reg_211.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mandelbrot::thread_and_ln21_fu_405_p2() {
    and_ln21_fu_405_p2 = (or_ln21_fu_401_p2.read() & grp_fu_298_p2.read());
}

void mandelbrot::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mandelbrot::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void mandelbrot::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void mandelbrot::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void mandelbrot::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void mandelbrot::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void mandelbrot::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mandelbrot::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void mandelbrot::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void mandelbrot::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void mandelbrot::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void mandelbrot::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mandelbrot::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void mandelbrot::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void mandelbrot::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void mandelbrot::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mandelbrot::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mandelbrot::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mandelbrot::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_321_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mandelbrot::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mandelbrot::thread_ap_phi_mux_u2_0_phi_fu_251_p4() {
    ap_phi_mux_u2_0_phi_fu_251_p4 = u2_0_reg_247.read();
}

void mandelbrot::thread_ap_phi_mux_v23_0_phi_fu_263_p4() {
    ap_phi_mux_v23_0_phi_fu_263_p4 = v23_0_reg_259.read();
}

void mandelbrot::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_321_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mandelbrot::thread_bitcast_ln21_fu_371_p1() {
    bitcast_ln21_fu_371_p1 = reg_306.read();
}

void mandelbrot::thread_color_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        color_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        color_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        color_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        color_address0 = "XXX";
    }
}

void mandelbrot::thread_color_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        color_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        color_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        color_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        color_address1 = "XXX";
    }
}

void mandelbrot::thread_color_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        color_ce0 = ap_const_logic_1;
    } else {
        color_ce0 = ap_const_logic_0;
    }
}

void mandelbrot::thread_color_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        color_ce1 = ap_const_logic_1;
    } else {
        color_ce1 = ap_const_logic_0;
    }
}

void mandelbrot::thread_color_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        color_d0 = trunc_ln_reg_566.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        color_d0 = k_0_reg_211.read().range(15, 8);
    } else {
        color_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void mandelbrot::thread_color_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        color_d1 = trunc_ln35_reg_571.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        color_d1 = trunc_ln35_fu_428_p1.read();
    } else {
        color_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void mandelbrot::thread_color_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(and_ln21_fu_405_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_reg_544.read())))) {
        color_we0 = ap_const_logic_1;
    } else {
        color_we0 = ap_const_logic_0;
    }
}

void mandelbrot::thread_color_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(and_ln21_fu_405_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_reg_544.read())))) {
        color_we1 = ap_const_logic_1;
    } else {
        color_we1 = ap_const_logic_0;
    }
}

void mandelbrot::thread_grp_fu_271_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, and_ln21_fu_405_p2.read()))) {
        grp_fu_271_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_366_p2.read())))) {
        grp_fu_271_opcode = ap_const_lv2_0;
    } else {
        grp_fu_271_opcode =  (sc_lv<2>) ("XX");
    }
}

void mandelbrot::thread_grp_fu_271_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_271_p0 = tmp_2_reg_576.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_271_p0 = u2_0_reg_247.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_271_p0 = ap_phi_mux_u2_0_phi_fu_251_p4.read();
    } else {
        grp_fu_271_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_271_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_271_p1 = y_reg_516.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_271_p1 = v23_0_reg_259.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_271_p1 = ap_phi_mux_v23_0_phi_fu_263_p4.read();
    } else {
        grp_fu_271_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_283_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_283_p0 = u_reg_588.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_283_p0 = phi_ln22_reg_223.read();
    } else {
        grp_fu_283_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_283_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_283_p1 = u_reg_588.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_283_p1 = v2_0_reg_235.read();
    } else {
        grp_fu_283_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_303_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_303_p0 = add_ln19_reg_534.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_303_p0 = sub_ln13_reg_511.read();
    } else {
        grp_fu_303_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_i_fu_351_p2() {
    i_fu_351_p2 = (!i_0_reg_189.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg_189.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mandelbrot::thread_icmp_ln12_fu_321_p2() {
    icmp_ln12_fu_321_p2 = (!zext_ln12_fu_317_p1.read().is_01() || !yres.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln12_fu_317_p1.read()) < sc_bigint<32>(yres.read()));
}

void mandelbrot::thread_icmp_ln14_fu_346_p2() {
    icmp_ln14_fu_346_p2 = (!zext_ln14_fu_342_p1.read().is_01() || !xres.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln14_fu_342_p1.read()) < sc_bigint<32>(xres.read()));
}

void mandelbrot::thread_icmp_ln21_1_fu_389_p2() {
    icmp_ln21_1_fu_389_p2 = (!tmp_1_fu_375_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_375_p4.read() != ap_const_lv11_7FF);
}

void mandelbrot::thread_icmp_ln21_2_fu_395_p2() {
    icmp_ln21_2_fu_395_p2 = (!trunc_ln21_fu_385_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln21_fu_385_p1.read() == ap_const_lv52_0);
}

void mandelbrot::thread_icmp_ln21_fu_366_p2() {
    icmp_ln21_fu_366_p2 = (!zext_ln21_fu_362_p1.read().is_01() || !maxiter.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln21_fu_362_p1.read()) < sc_bigint<32>(maxiter.read()));
}

void mandelbrot::thread_j_fu_326_p2() {
    j_fu_326_p2 = (!j_0_reg_167.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_167.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mandelbrot::thread_or_ln21_fu_401_p2() {
    or_ln21_fu_401_p2 = (icmp_ln21_2_reg_553.read() | icmp_ln21_1_reg_548.read());
}

void mandelbrot::thread_sub_ln13_fu_332_p2() {
    sub_ln13_fu_332_p2 = (!ymax.read().is_01() || !phi_mul2_reg_178.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ymax.read()) - sc_biguint<32>(phi_mul2_reg_178.read()));
}

void mandelbrot::thread_tmp_1_fu_375_p4() {
    tmp_1_fu_375_p4 = bitcast_ln21_fu_371_p1.read().range(62, 52);
}

void mandelbrot::thread_trunc_ln21_fu_385_p1() {
    trunc_ln21_fu_385_p1 = bitcast_ln21_fu_371_p1.read().range(52-1, 0);
}

void mandelbrot::thread_trunc_ln35_fu_428_p1() {
    trunc_ln35_fu_428_p1 = k_0_reg_211.read().range(8-1, 0);
}

void mandelbrot::thread_zext_ln12_fu_317_p1() {
    zext_ln12_fu_317_p1 = esl_zext<32,31>(j_0_reg_167.read());
}

void mandelbrot::thread_zext_ln14_fu_342_p1() {
    zext_ln14_fu_342_p1 = esl_zext<32,31>(i_0_reg_189.read());
}

void mandelbrot::thread_zext_ln21_fu_362_p1() {
    zext_ln21_fu_362_p1 = esl_zext<32,31>(k_0_reg_211.read());
}

void mandelbrot::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_321_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln14_fu_346_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_366_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(and_ln21_fu_405_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state33;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<34>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void mandelbrot::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_address0\" :  \"" << color_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_ce0\" :  \"" << color_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_we0\" :  \"" << color_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_d0\" :  \"" << color_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_address1\" :  \"" << color_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_ce1\" :  \"" << color_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_we1\" :  \"" << color_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"color_d1\" :  \"" << color_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xmax\" :  \"" << xmax.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xmin\" :  \"" << xmin.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ymax\" :  \"" << ymax.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ymin\" :  \"" << ymin.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"maxiter\" :  \"" << maxiter.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xres\" :  \"" << xres.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"yres\" :  \"" << yres.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dx\" :  \"" << dx.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dy\" :  \"" << dy.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

