-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mandelbrot is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    color_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    color_ce0 : OUT STD_LOGIC;
    color_we0 : OUT STD_LOGIC;
    color_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    color_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    color_ce1 : OUT STD_LOGIC;
    color_we1 : OUT STD_LOGIC;
    color_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    xmax : IN STD_LOGIC_VECTOR (31 downto 0);
    xmin : IN STD_LOGIC_VECTOR (31 downto 0);
    ymax : IN STD_LOGIC_VECTOR (31 downto 0);
    ymin : IN STD_LOGIC_VECTOR (31 downto 0);
    maxiter : IN STD_LOGIC_VECTOR (31 downto 0);
    xres : IN STD_LOGIC_VECTOR (31 downto 0);
    yres : IN STD_LOGIC_VECTOR (31 downto 0);
    dx : IN STD_LOGIC_VECTOR (31 downto 0);
    dy : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mandelbrot is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mandelbrot,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=39,HLS_SYN_FF=3248,HLS_SYN_LUT=3489,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln12_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_fu_326_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_506 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln13_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_reg_516 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln14_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_351_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_529 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln19_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln19_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln21_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln21_1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln21_2_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_411_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln21_reg_561 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal and_ln21_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln35_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_576 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_581 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_167 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul2_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_189 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal phi_mul_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_211 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_ln22_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal v2_0_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_u2_0_phi_fu_251_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal u2_0_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_v23_0_phi_fu_263_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal v23_0_reg_259 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln12_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_375_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln21_fu_385_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln21_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_271_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mandelbrot_dcmp_64ns_64ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mandelbrot_sitodp_32ns_64_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1_U1 : component mandelbrot_dadddsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => grp_fu_271_p1,
        opcode => grp_fu_271_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1_U2 : component mandelbrot_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_306,
        din1 => x_reg_539,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U3 : component mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U4 : component mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_reg_581,
        din1 => v_reg_581,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1_U5 : component mandelbrot_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u_reg_588,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    mandelbrot_dcmp_64ns_64ns_1_2_1_U6 : component mandelbrot_dcmp_64ns_64ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_306,
        din1 => ap_const_lv64_4010000000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_298_p2);

    mandelbrot_sitodp_32ns_64_4_1_U7 : component mandelbrot_sitodp_32ns_64_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_0_reg_189 <= i_reg_529;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_189 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln14_fu_346_p2 = ap_const_lv1_0))) then 
                j_0_reg_167 <= j_reg_506;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_167 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                k_0_reg_211 <= add_ln21_reg_561;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_0_reg_211 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    phi_ln22_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                phi_ln22_reg_223 <= grp_fu_293_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_ln22_reg_223 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln14_fu_346_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_178 <= add_ln12_reg_498;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                phi_mul_reg_200 <= add_ln14_reg_521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_200 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    u2_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                u2_0_reg_247 <= grp_fu_283_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                u2_0_reg_247 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v23_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                v23_0_reg_259 <= grp_fu_289_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                v23_0_reg_259 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v2_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                v2_0_reg_235 <= v_reg_581;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                v2_0_reg_235 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln12_reg_498 <= add_ln12_fu_312_p2;
                j_reg_506 <= j_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln14_reg_521 <= add_ln14_fu_337_p2;
                i_reg_529 <= i_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln14_fu_346_p2 = ap_const_lv1_1))) then
                add_ln19_reg_534 <= add_ln19_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = and_ln21_fu_405_p2))) then
                add_ln21_reg_561 <= add_ln21_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                icmp_ln21_1_reg_548 <= icmp_ln21_1_fu_389_p2;
                icmp_ln21_2_reg_553 <= icmp_ln21_2_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln21_reg_544 <= icmp_ln21_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_306 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_321_p2 = ap_const_lv1_1))) then
                sub_ln13_reg_511 <= sub_ln13_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_2_reg_576 <= grp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln21_fu_405_p2))) then
                trunc_ln35_reg_571 <= trunc_ln35_fu_428_p1;
                trunc_ln_reg_566 <= k_0_reg_211(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                u_reg_588 <= grp_fu_279_p2;
                v_reg_581 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                x_reg_539 <= grp_fu_303_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_reg_516 <= grp_fu_303_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_321_p2, ap_CS_fsm_state7, icmp_ln14_fu_346_p2, icmp_ln21_fu_366_p2, ap_CS_fsm_state12, ap_CS_fsm_state18, and_ln21_fu_405_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_321_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln14_fu_346_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_fu_366_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln21_fu_405_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_fu_312_p2 <= std_logic_vector(unsigned(phi_mul2_reg_178) + unsigned(dy));
    add_ln14_fu_337_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(dx));
    add_ln19_fu_357_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(xmin));
    add_ln21_fu_411_p2 <= std_logic_vector(unsigned(k_0_reg_211) + unsigned(ap_const_lv31_1));
    and_ln21_fu_405_p2 <= (or_ln21_fu_401_p2 and grp_fu_298_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_321_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_321_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_u2_0_phi_fu_251_p4 <= u2_0_reg_247;
    ap_phi_mux_v23_0_phi_fu_263_p4 <= v23_0_reg_259;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_321_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_321_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln21_fu_371_p1 <= reg_306;

    color_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            color_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            color_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            color_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            color_address0 <= "XXX";
        end if; 
    end process;


    color_address1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            color_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            color_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            color_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            color_address1 <= "XXX";
        end if; 
    end process;


    color_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            color_ce0 <= ap_const_logic_1;
        else 
            color_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    color_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            color_ce1 <= ap_const_logic_1;
        else 
            color_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    color_d0_assign_proc : process(ap_CS_fsm_state18, trunc_ln_reg_566, ap_CS_fsm_state34, k_0_reg_211, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            color_d0 <= trunc_ln_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            color_d0 <= k_0_reg_211(15 downto 8);
        else 
            color_d0 <= "XXXXXXXX";
        end if; 
    end process;


    color_d1_assign_proc : process(ap_CS_fsm_state18, trunc_ln35_fu_428_p1, trunc_ln35_reg_571, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            color_d1 <= trunc_ln35_reg_571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            color_d1 <= trunc_ln35_fu_428_p1;
        else 
            color_d1 <= "XXXXXXXX";
        end if; 
    end process;


    color_we0_assign_proc : process(icmp_ln21_reg_544, ap_CS_fsm_state18, and_ln21_fu_405_p2, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln21_reg_544 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln21_fu_405_p2)))) then 
            color_we0 <= ap_const_logic_1;
        else 
            color_we0 <= ap_const_logic_0;
        end if; 
    end process;


    color_we1_assign_proc : process(icmp_ln21_reg_544, ap_CS_fsm_state18, and_ln21_fu_405_p2, ap_CS_fsm_state34, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln21_reg_544 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = and_ln21_fu_405_p2)))) then 
            color_we1 <= ap_const_logic_1;
        else 
            color_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_271_opcode_assign_proc : process(icmp_ln21_fu_366_p2, ap_CS_fsm_state12, ap_CS_fsm_state18, and_ln21_fu_405_p2, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = and_ln21_fu_405_p2))) then 
            grp_fu_271_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_fu_366_p2 = ap_const_lv1_1)))) then 
            grp_fu_271_opcode <= ap_const_lv2_0;
        else 
            grp_fu_271_opcode <= "XX";
        end if; 
    end process;


    grp_fu_271_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, tmp_2_reg_576, ap_phi_mux_u2_0_phi_fu_251_p4, u2_0_reg_247, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_271_p0 <= tmp_2_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_271_p0 <= u2_0_reg_247;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_271_p0 <= ap_phi_mux_u2_0_phi_fu_251_p4;
        else 
            grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_271_p1_assign_proc : process(y_reg_516, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_phi_mux_v23_0_phi_fu_263_p4, v23_0_reg_259, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_271_p1 <= y_reg_516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_271_p1 <= v23_0_reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_271_p1 <= ap_phi_mux_v23_0_phi_fu_263_p4;
        else 
            grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p0_assign_proc : process(ap_CS_fsm_state18, u_reg_588, phi_ln22_reg_223, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_283_p0 <= u_reg_588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_283_p0 <= phi_ln22_reg_223;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p1_assign_proc : process(ap_CS_fsm_state18, u_reg_588, v2_0_reg_235, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_283_p1 <= u_reg_588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_283_p1 <= v2_0_reg_235;
        else 
            grp_fu_283_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_303_p0_assign_proc : process(sub_ln13_reg_511, add_ln19_reg_534, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_303_p0 <= add_ln19_reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_303_p0 <= sub_ln13_reg_511;
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_351_p2 <= std_logic_vector(unsigned(i_0_reg_189) + unsigned(ap_const_lv31_1));
    icmp_ln12_fu_321_p2 <= "1" when (signed(zext_ln12_fu_317_p1) < signed(yres)) else "0";
    icmp_ln14_fu_346_p2 <= "1" when (signed(zext_ln14_fu_342_p1) < signed(xres)) else "0";
    icmp_ln21_1_fu_389_p2 <= "0" when (tmp_1_fu_375_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln21_2_fu_395_p2 <= "1" when (trunc_ln21_fu_385_p1 = ap_const_lv52_0) else "0";
    icmp_ln21_fu_366_p2 <= "1" when (signed(zext_ln21_fu_362_p1) < signed(maxiter)) else "0";
    j_fu_326_p2 <= std_logic_vector(unsigned(j_0_reg_167) + unsigned(ap_const_lv31_1));
    or_ln21_fu_401_p2 <= (icmp_ln21_2_reg_553 or icmp_ln21_1_reg_548);
    sub_ln13_fu_332_p2 <= std_logic_vector(unsigned(ymax) - unsigned(phi_mul2_reg_178));
    tmp_1_fu_375_p4 <= bitcast_ln21_fu_371_p1(62 downto 52);
    trunc_ln21_fu_385_p1 <= bitcast_ln21_fu_371_p1(52 - 1 downto 0);
    trunc_ln35_fu_428_p1 <= k_0_reg_211(8 - 1 downto 0);
    zext_ln12_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_167),32));
    zext_ln14_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_189),32));
    zext_ln21_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_211),32));
end behav;
