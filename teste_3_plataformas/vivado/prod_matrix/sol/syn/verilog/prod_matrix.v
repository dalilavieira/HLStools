// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="prod_matrix,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=489,HLS_SYN_LUT=433,HLS_VERSION=2019_1}" *)

module prod_matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_address0,
        v_ce0,
        v_q0,
        v_address1,
        v_ce1,
        v_q1,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        row,
        col
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v_address0;
output   v_ce0;
input  [31:0] v_q0;
output  [13:0] v_address1;
output   v_ce1;
input  [31:0] v_q1;
output  [13:0] r_address0;
output   r_ce0;
output   r_we0;
output  [31:0] r_d0;
input  [31:0] row;
input  [31:0] col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v_ce0;
reg v_ce1;
reg r_ce0;
reg r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] trunc_ln7_fu_138_p1;
reg   [14:0] trunc_ln7_reg_252;
wire    ap_CS_fsm_state2;
wire   [37:0] add_ln7_fu_142_p2;
reg   [37:0] add_ln7_reg_258;
wire   [30:0] i_fu_157_p2;
reg   [30:0] i_reg_266;
wire   [30:0] j_fu_172_p2;
reg   [30:0] j_reg_274;
wire    ap_CS_fsm_state3;
wire   [14:0] trunc_ln10_fu_178_p1;
reg   [14:0] trunc_ln10_reg_279;
wire   [0:0] icmp_ln8_fu_167_p2;
reg   [13:0] r_addr_reg_284;
wire   [31:0] k_fu_201_p2;
reg   [31:0] k_reg_292;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln9_fu_196_p2;
wire   [38:0] add_ln10_3_fu_221_p2;
reg   [38:0] add_ln10_3_reg_302;
reg  signed [31:0] v_load_reg_312;
wire    ap_CS_fsm_state5;
reg  signed [31:0] v_load_1_reg_317;
wire   [31:0] mul_ln10_fu_237_p2;
reg   [31:0] mul_ln10_reg_322;
wire    ap_CS_fsm_state6;
reg   [30:0] i_0_reg_83;
reg   [37:0] phi_mul1_reg_94;
reg   [30:0] j_0_reg_105;
wire   [0:0] icmp_ln7_fu_152_p2;
reg   [31:0] k_0_reg_116;
wire    ap_CS_fsm_state7;
reg   [38:0] phi_mul_reg_127;
wire   [63:0] zext_ln10_fu_187_p1;
wire   [63:0] zext_ln10_1_fu_216_p1;
wire   [63:0] zext_ln10_2_fu_232_p1;
wire   [31:0] zext_ln7_fu_148_p1;
wire   [31:0] zext_ln8_fu_163_p1;
wire   [14:0] add_ln10_fu_182_p2;
wire   [14:0] trunc_ln10_1_fu_207_p1;
wire   [14:0] add_ln10_1_fu_211_p2;
wire   [14:0] trunc_ln9_fu_192_p1;
wire   [14:0] add_ln10_2_fu_227_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_83 <= i_reg_266;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_83 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_105 <= 31'd0;
    end else if (((icmp_ln9_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_105 <= j_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_116 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_0_reg_116 <= k_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_94 <= add_ln7_reg_258;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_94 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_127 <= 39'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_127 <= add_ln10_3_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln10_3_reg_302 <= add_ln10_3_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln7_reg_258 <= add_ln7_fu_142_p2;
        i_reg_266 <= i_fu_157_p2;
        trunc_ln7_reg_252 <= trunc_ln7_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_274 <= j_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_292 <= k_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln10_reg_322 <= mul_ln10_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_addr_reg_284 <= zext_ln10_fu_187_p1;
        trunc_ln10_reg_279 <= trunc_ln10_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_load_1_reg_317 <= v_q1;
        v_load_reg_312 <= v_q0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_ce1 = 1'b1;
    end else begin
        v_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln8_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln9_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_211_p2 = (trunc_ln7_reg_252 + trunc_ln10_1_fu_207_p1);

assign add_ln10_2_fu_227_p2 = (trunc_ln9_fu_192_p1 + trunc_ln10_reg_279);

assign add_ln10_3_fu_221_p2 = (39'd100 + phi_mul_reg_127);

assign add_ln10_fu_182_p2 = (trunc_ln7_reg_252 + trunc_ln10_fu_178_p1);

assign add_ln7_fu_142_p2 = (38'd100 + phi_mul1_reg_94);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_157_p2 = (31'd1 + i_0_reg_83);

assign icmp_ln7_fu_152_p2 = (($signed(zext_ln7_fu_148_p1) < $signed(row)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_167_p2 = (($signed(zext_ln8_fu_163_p1) < $signed(col)) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_196_p2 = ((k_0_reg_116 == row) ? 1'b1 : 1'b0);

assign j_fu_172_p2 = (j_0_reg_105 + 31'd1);

assign k_fu_201_p2 = (32'd1 + k_0_reg_116);

assign mul_ln10_fu_237_p2 = ($signed(v_load_reg_312) * $signed(v_load_1_reg_317));

assign r_address0 = r_addr_reg_284;

assign r_d0 = mul_ln10_reg_322;

assign trunc_ln10_1_fu_207_p1 = k_0_reg_116[14:0];

assign trunc_ln10_fu_178_p1 = j_0_reg_105[14:0];

assign trunc_ln7_fu_138_p1 = phi_mul1_reg_94[14:0];

assign trunc_ln9_fu_192_p1 = phi_mul_reg_127[14:0];

assign v_address0 = zext_ln10_1_fu_216_p1;

assign v_address1 = zext_ln10_2_fu_232_p1;

assign zext_ln10_1_fu_216_p1 = add_ln10_1_fu_211_p2;

assign zext_ln10_2_fu_232_p1 = add_ln10_2_fu_227_p2;

assign zext_ln10_fu_187_p1 = add_ln10_fu_182_p2;

assign zext_ln7_fu_148_p1 = i_0_reg_83;

assign zext_ln8_fu_163_p1 = j_0_reg_105;

endmodule //prod_matrix
