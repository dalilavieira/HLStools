// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "prod_matrix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic prod_matrix::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic prod_matrix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> prod_matrix::ap_ST_fsm_state1 = "1";
const sc_lv<7> prod_matrix::ap_ST_fsm_state2 = "10";
const sc_lv<7> prod_matrix::ap_ST_fsm_state3 = "100";
const sc_lv<7> prod_matrix::ap_ST_fsm_state4 = "1000";
const sc_lv<7> prod_matrix::ap_ST_fsm_state5 = "10000";
const sc_lv<7> prod_matrix::ap_ST_fsm_state6 = "100000";
const sc_lv<7> prod_matrix::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> prod_matrix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> prod_matrix::ap_const_lv32_1 = "1";
const sc_lv<32> prod_matrix::ap_const_lv32_2 = "10";
const sc_lv<1> prod_matrix::ap_const_lv1_1 = "1";
const sc_lv<32> prod_matrix::ap_const_lv32_3 = "11";
const sc_lv<1> prod_matrix::ap_const_lv1_0 = "0";
const sc_lv<32> prod_matrix::ap_const_lv32_4 = "100";
const sc_lv<32> prod_matrix::ap_const_lv32_5 = "101";
const sc_lv<31> prod_matrix::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<38> prod_matrix::ap_const_lv38_0 = "00000000000000000000000000000000000000";
const sc_lv<32> prod_matrix::ap_const_lv32_6 = "110";
const sc_lv<39> prod_matrix::ap_const_lv39_0 = "000000000000000000000000000000000000000";
const sc_lv<38> prod_matrix::ap_const_lv38_64 = "1100100";
const sc_lv<31> prod_matrix::ap_const_lv31_1 = "1";
const sc_lv<39> prod_matrix::ap_const_lv39_64 = "1100100";
const bool prod_matrix::ap_const_boolean_1 = true;

prod_matrix::prod_matrix(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_1_fu_211_p2);
    sensitive << ( trunc_ln7_reg_252 );
    sensitive << ( trunc_ln10_1_fu_207_p1 );

    SC_METHOD(thread_add_ln10_2_fu_227_p2);
    sensitive << ( trunc_ln10_reg_279 );
    sensitive << ( trunc_ln9_fu_192_p1 );

    SC_METHOD(thread_add_ln10_3_fu_221_p2);
    sensitive << ( phi_mul_reg_127 );

    SC_METHOD(thread_add_ln10_fu_182_p2);
    sensitive << ( trunc_ln7_reg_252 );
    sensitive << ( trunc_ln10_fu_178_p1 );

    SC_METHOD(thread_add_ln7_fu_142_p2);
    sensitive << ( phi_mul1_reg_94 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_152_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_152_p2 );

    SC_METHOD(thread_i_fu_157_p2);
    sensitive << ( i_0_reg_83 );

    SC_METHOD(thread_icmp_ln7_fu_152_p2);
    sensitive << ( row );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln7_fu_148_p1 );

    SC_METHOD(thread_icmp_ln8_fu_167_p2);
    sensitive << ( col );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln8_fu_163_p1 );

    SC_METHOD(thread_icmp_ln9_fu_196_p2);
    sensitive << ( row );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_116 );

    SC_METHOD(thread_j_fu_172_p2);
    sensitive << ( j_0_reg_105 );

    SC_METHOD(thread_k_fu_201_p2);
    sensitive << ( k_0_reg_116 );

    SC_METHOD(thread_mul_ln10_fu_237_p2);
    sensitive << ( v_load_reg_312 );
    sensitive << ( v_load_1_reg_317 );

    SC_METHOD(thread_r_address0);
    sensitive << ( r_addr_reg_284 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_d0);
    sensitive << ( mul_ln10_reg_322 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_trunc_ln10_1_fu_207_p1);
    sensitive << ( k_0_reg_116 );

    SC_METHOD(thread_trunc_ln10_fu_178_p1);
    sensitive << ( j_0_reg_105 );

    SC_METHOD(thread_trunc_ln7_fu_138_p1);
    sensitive << ( phi_mul1_reg_94 );

    SC_METHOD(thread_trunc_ln9_fu_192_p1);
    sensitive << ( phi_mul_reg_127 );

    SC_METHOD(thread_v_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln10_1_fu_216_p1 );

    SC_METHOD(thread_v_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln10_2_fu_232_p1 );

    SC_METHOD(thread_v_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_ce1);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln10_1_fu_216_p1);
    sensitive << ( add_ln10_1_fu_211_p2 );

    SC_METHOD(thread_zext_ln10_2_fu_232_p1);
    sensitive << ( add_ln10_2_fu_227_p2 );

    SC_METHOD(thread_zext_ln10_fu_187_p1);
    sensitive << ( add_ln10_fu_182_p2 );

    SC_METHOD(thread_zext_ln7_fu_148_p1);
    sensitive << ( i_0_reg_83 );

    SC_METHOD(thread_zext_ln8_fu_163_p1);
    sensitive << ( j_0_reg_105 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_167_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln9_fu_196_p2 );
    sensitive << ( icmp_ln7_fu_152_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "prod_matrix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, v_address0, "(port)v_address0");
    sc_trace(mVcdFile, v_ce0, "(port)v_ce0");
    sc_trace(mVcdFile, v_q0, "(port)v_q0");
    sc_trace(mVcdFile, v_address1, "(port)v_address1");
    sc_trace(mVcdFile, v_ce1, "(port)v_ce1");
    sc_trace(mVcdFile, v_q1, "(port)v_q1");
    sc_trace(mVcdFile, r_address0, "(port)r_address0");
    sc_trace(mVcdFile, r_ce0, "(port)r_ce0");
    sc_trace(mVcdFile, r_we0, "(port)r_we0");
    sc_trace(mVcdFile, r_d0, "(port)r_d0");
    sc_trace(mVcdFile, row, "(port)row");
    sc_trace(mVcdFile, col, "(port)col");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln7_fu_138_p1, "trunc_ln7_fu_138_p1");
    sc_trace(mVcdFile, trunc_ln7_reg_252, "trunc_ln7_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln7_fu_142_p2, "add_ln7_fu_142_p2");
    sc_trace(mVcdFile, add_ln7_reg_258, "add_ln7_reg_258");
    sc_trace(mVcdFile, i_fu_157_p2, "i_fu_157_p2");
    sc_trace(mVcdFile, i_reg_266, "i_reg_266");
    sc_trace(mVcdFile, j_fu_172_p2, "j_fu_172_p2");
    sc_trace(mVcdFile, j_reg_274, "j_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, trunc_ln10_fu_178_p1, "trunc_ln10_fu_178_p1");
    sc_trace(mVcdFile, trunc_ln10_reg_279, "trunc_ln10_reg_279");
    sc_trace(mVcdFile, icmp_ln8_fu_167_p2, "icmp_ln8_fu_167_p2");
    sc_trace(mVcdFile, r_addr_reg_284, "r_addr_reg_284");
    sc_trace(mVcdFile, k_fu_201_p2, "k_fu_201_p2");
    sc_trace(mVcdFile, k_reg_292, "k_reg_292");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln9_fu_196_p2, "icmp_ln9_fu_196_p2");
    sc_trace(mVcdFile, add_ln10_3_fu_221_p2, "add_ln10_3_fu_221_p2");
    sc_trace(mVcdFile, add_ln10_3_reg_302, "add_ln10_3_reg_302");
    sc_trace(mVcdFile, v_load_reg_312, "v_load_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, v_load_1_reg_317, "v_load_1_reg_317");
    sc_trace(mVcdFile, mul_ln10_fu_237_p2, "mul_ln10_fu_237_p2");
    sc_trace(mVcdFile, mul_ln10_reg_322, "mul_ln10_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_reg_83, "i_0_reg_83");
    sc_trace(mVcdFile, phi_mul1_reg_94, "phi_mul1_reg_94");
    sc_trace(mVcdFile, j_0_reg_105, "j_0_reg_105");
    sc_trace(mVcdFile, icmp_ln7_fu_152_p2, "icmp_ln7_fu_152_p2");
    sc_trace(mVcdFile, k_0_reg_116, "k_0_reg_116");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phi_mul_reg_127, "phi_mul_reg_127");
    sc_trace(mVcdFile, zext_ln10_fu_187_p1, "zext_ln10_fu_187_p1");
    sc_trace(mVcdFile, zext_ln10_1_fu_216_p1, "zext_ln10_1_fu_216_p1");
    sc_trace(mVcdFile, zext_ln10_2_fu_232_p1, "zext_ln10_2_fu_232_p1");
    sc_trace(mVcdFile, zext_ln7_fu_148_p1, "zext_ln7_fu_148_p1");
    sc_trace(mVcdFile, zext_ln8_fu_163_p1, "zext_ln8_fu_163_p1");
    sc_trace(mVcdFile, add_ln10_fu_182_p2, "add_ln10_fu_182_p2");
    sc_trace(mVcdFile, trunc_ln10_1_fu_207_p1, "trunc_ln10_1_fu_207_p1");
    sc_trace(mVcdFile, add_ln10_1_fu_211_p2, "add_ln10_1_fu_211_p2");
    sc_trace(mVcdFile, trunc_ln9_fu_192_p1, "trunc_ln9_fu_192_p1");
    sc_trace(mVcdFile, add_ln10_2_fu_227_p2, "add_ln10_2_fu_227_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("prod_matrix.hdltvin.dat");
    mHdltvoutHandle.open("prod_matrix.hdltvout.dat");
}

prod_matrix::~prod_matrix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void prod_matrix::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_0))) {
        i_0_reg_83 = i_reg_266.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_83 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln7_fu_152_p2.read()))) {
        j_0_reg_105 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln9_fu_196_p2.read()))) {
        j_0_reg_105 = j_reg_274.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_1))) {
        k_0_reg_116 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_0_reg_116 = k_reg_292.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_0))) {
        phi_mul1_reg_94 = add_ln7_reg_258.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_94 = ap_const_lv38_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_127 = ap_const_lv39_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul_reg_127 = add_ln10_3_reg_302.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_196_p2.read(), ap_const_lv1_0))) {
        add_ln10_3_reg_302 = add_ln10_3_fu_221_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln7_reg_258 = add_ln7_fu_142_p2.read();
        i_reg_266 = i_fu_157_p2.read();
        trunc_ln7_reg_252 = trunc_ln7_fu_138_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_274 = j_fu_172_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_292 = k_fu_201_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        mul_ln10_reg_322 = mul_ln10_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_1))) {
        r_addr_reg_284 =  (sc_lv<14>) (zext_ln10_fu_187_p1.read());
        trunc_ln10_reg_279 = trunc_ln10_fu_178_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        v_load_1_reg_317 = v_q1.read();
        v_load_reg_312 = v_q0.read();
    }
}

void prod_matrix::thread_add_ln10_1_fu_211_p2() {
    add_ln10_1_fu_211_p2 = (!trunc_ln7_reg_252.read().is_01() || !trunc_ln10_1_fu_207_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(trunc_ln7_reg_252.read()) + sc_biguint<15>(trunc_ln10_1_fu_207_p1.read()));
}

void prod_matrix::thread_add_ln10_2_fu_227_p2() {
    add_ln10_2_fu_227_p2 = (!trunc_ln9_fu_192_p1.read().is_01() || !trunc_ln10_reg_279.read().is_01())? sc_lv<15>(): (sc_biguint<15>(trunc_ln9_fu_192_p1.read()) + sc_biguint<15>(trunc_ln10_reg_279.read()));
}

void prod_matrix::thread_add_ln10_3_fu_221_p2() {
    add_ln10_3_fu_221_p2 = (!ap_const_lv39_64.is_01() || !phi_mul_reg_127.read().is_01())? sc_lv<39>(): (sc_biguint<39>(ap_const_lv39_64) + sc_biguint<39>(phi_mul_reg_127.read()));
}

void prod_matrix::thread_add_ln10_fu_182_p2() {
    add_ln10_fu_182_p2 = (!trunc_ln7_reg_252.read().is_01() || !trunc_ln10_fu_178_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(trunc_ln7_reg_252.read()) + sc_biguint<15>(trunc_ln10_fu_178_p1.read()));
}

void prod_matrix::thread_add_ln7_fu_142_p2() {
    add_ln7_fu_142_p2 = (!ap_const_lv38_64.is_01() || !phi_mul1_reg_94.read().is_01())? sc_lv<38>(): (sc_biguint<38>(ap_const_lv38_64) + sc_biguint<38>(phi_mul1_reg_94.read()));
}

void prod_matrix::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void prod_matrix::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void prod_matrix::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void prod_matrix::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void prod_matrix::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void prod_matrix::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void prod_matrix::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void prod_matrix::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_152_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void prod_matrix::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void prod_matrix::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_152_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void prod_matrix::thread_i_fu_157_p2() {
    i_fu_157_p2 = (!ap_const_lv31_1.is_01() || !i_0_reg_83.read().is_01())? sc_lv<31>(): (sc_biguint<31>(ap_const_lv31_1) + sc_biguint<31>(i_0_reg_83.read()));
}

void prod_matrix::thread_icmp_ln7_fu_152_p2() {
    icmp_ln7_fu_152_p2 = (!zext_ln7_fu_148_p1.read().is_01() || !row.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln7_fu_148_p1.read()) < sc_bigint<32>(row.read()));
}

void prod_matrix::thread_icmp_ln8_fu_167_p2() {
    icmp_ln8_fu_167_p2 = (!zext_ln8_fu_163_p1.read().is_01() || !col.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln8_fu_163_p1.read()) < sc_bigint<32>(col.read()));
}

void prod_matrix::thread_icmp_ln9_fu_196_p2() {
    icmp_ln9_fu_196_p2 = (!k_0_reg_116.read().is_01() || !row.read().is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_116.read() == row.read());
}

void prod_matrix::thread_j_fu_172_p2() {
    j_fu_172_p2 = (!j_0_reg_105.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_105.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void prod_matrix::thread_k_fu_201_p2() {
    k_fu_201_p2 = (!ap_const_lv32_1.is_01() || !k_0_reg_116.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(k_0_reg_116.read()));
}

void prod_matrix::thread_mul_ln10_fu_237_p2() {
    mul_ln10_fu_237_p2 = (!v_load_reg_312.read().is_01() || !v_load_1_reg_317.read().is_01())? sc_lv<32>(): sc_bigint<32>(v_load_reg_312.read()) * sc_bigint<32>(v_load_1_reg_317.read());
}

void prod_matrix::thread_r_address0() {
    r_address0 = r_addr_reg_284.read();
}

void prod_matrix::thread_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_ce0 = ap_const_logic_1;
    } else {
        r_ce0 = ap_const_logic_0;
    }
}

void prod_matrix::thread_r_d0() {
    r_d0 = mul_ln10_reg_322.read();
}

void prod_matrix::thread_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_we0 = ap_const_logic_1;
    } else {
        r_we0 = ap_const_logic_0;
    }
}

void prod_matrix::thread_trunc_ln10_1_fu_207_p1() {
    trunc_ln10_1_fu_207_p1 = k_0_reg_116.read().range(15-1, 0);
}

void prod_matrix::thread_trunc_ln10_fu_178_p1() {
    trunc_ln10_fu_178_p1 = j_0_reg_105.read().range(15-1, 0);
}

void prod_matrix::thread_trunc_ln7_fu_138_p1() {
    trunc_ln7_fu_138_p1 = phi_mul1_reg_94.read().range(15-1, 0);
}

void prod_matrix::thread_trunc_ln9_fu_192_p1() {
    trunc_ln9_fu_192_p1 = phi_mul_reg_127.read().range(15-1, 0);
}

void prod_matrix::thread_v_address0() {
    v_address0 =  (sc_lv<14>) (zext_ln10_1_fu_216_p1.read());
}

void prod_matrix::thread_v_address1() {
    v_address1 =  (sc_lv<14>) (zext_ln10_2_fu_232_p1.read());
}

void prod_matrix::thread_v_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_ce0 = ap_const_logic_1;
    } else {
        v_ce0 = ap_const_logic_0;
    }
}

void prod_matrix::thread_v_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_ce1 = ap_const_logic_1;
    } else {
        v_ce1 = ap_const_logic_0;
    }
}

void prod_matrix::thread_zext_ln10_1_fu_216_p1() {
    zext_ln10_1_fu_216_p1 = esl_zext<64,15>(add_ln10_1_fu_211_p2.read());
}

void prod_matrix::thread_zext_ln10_2_fu_232_p1() {
    zext_ln10_2_fu_232_p1 = esl_zext<64,15>(add_ln10_2_fu_227_p2.read());
}

void prod_matrix::thread_zext_ln10_fu_187_p1() {
    zext_ln10_fu_187_p1 = esl_zext<64,15>(add_ln10_fu_182_p2.read());
}

void prod_matrix::thread_zext_ln7_fu_148_p1() {
    zext_ln7_fu_148_p1 = esl_zext<32,31>(i_0_reg_83.read());
}

void prod_matrix::thread_zext_ln8_fu_163_p1() {
    zext_ln8_fu_163_p1 = esl_zext<32,31>(j_0_reg_105.read());
}

void prod_matrix::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_152_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_167_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln9_fu_196_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void prod_matrix::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_address0\" :  \"" << v_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_ce0\" :  \"" << v_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"v_q0\" :  \"" << v_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_address1\" :  \"" << v_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_ce1\" :  \"" << v_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"v_q1\" :  \"" << v_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_address0\" :  \"" << r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_ce0\" :  \"" << r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_we0\" :  \"" << r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_d0\" :  \"" << r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"row\" :  \"" << row.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"col\" :  \"" << col.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

