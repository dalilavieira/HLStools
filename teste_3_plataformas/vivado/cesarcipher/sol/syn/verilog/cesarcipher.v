// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cesarcipher,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.649000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=73,HLS_SYN_LUT=121,HLS_VERSION=2019_1}" *)

module cesarcipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        palavra_address0,
        palavra_ce0,
        palavra_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] palavra_address0;
output   palavra_ce0;
input  [7:0] palavra_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg palavra_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [31:0] i_fu_71_p2;
reg   [31:0] i_reg_97;
wire   [4:0] chave_fu_83_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln11_fu_77_p2;
reg   [4:0] chave_0_reg_37;
reg  signed [31:0] i_0_reg_49;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_60_p2;
wire  signed [63:0] sext_ln11_fu_66_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        chave_0_reg_37 <= chave_fu_83_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        chave_0_reg_37 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_49 <= 32'd0;
    end else if (((icmp_ln11_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_49 <= i_reg_97;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_97 <= i_fu_71_p2;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        palavra_ce0 = 1'b1;
    end else begin
        palavra_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln11_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign chave_fu_83_p2 = (chave_0_reg_37 + 5'd1);

assign i_fu_71_p2 = ($signed(i_0_reg_49) + $signed(32'd1));

assign icmp_ln11_fu_77_p2 = ((palavra_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_60_p2 = ((chave_0_reg_37 == 5'd26) ? 1'b1 : 1'b0);

assign palavra_address0 = sext_ln11_fu_66_p1;

assign sext_ln11_fu_66_p1 = i_0_reg_49;

endmodule //cesarcipher
