-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dijkstra is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    graph_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    graph_ce0 : OUT STD_LOGIC;
    graph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dijkstra is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dijkstra,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.210000,HLS_SYN_LAT=467,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=266,HLS_SYN_LUT=561,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_215_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal count_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal count_reg_404 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln18_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v_1_fu_253_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_1_reg_423 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_1_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_1_reg_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal dist_addr_2_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln17_2_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v_fu_341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln63_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln58_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal graph_addr_reg_466 : STD_LOGIC_VECTOR (6 downto 0);
    signal sptSet_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sptSet_load_1_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal graph_load_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln63_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_1_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln63_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln63_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_addr_3_reg_499 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dist_ce0 : STD_LOGIC;
    signal dist_we0 : STD_LOGIC;
    signal dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sptSet_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sptSet_ce0 : STD_LOGIC;
    signal sptSet_we0 : STD_LOGIC;
    signal sptSet_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln42_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_0_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_0_i_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_index_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_0_reg_195 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln43_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln46_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln17_3_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_2_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln55_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln63_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln63_1_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln63_1_fu_275_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln63_cast_fu_279_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln63_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln17_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln17_1_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln63_1_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_2_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component dijkstra_dist IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dijkstra_sptSet IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dist_U : component dijkstra_dist
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dist_address0,
        ce0 => dist_ce0,
        we0 => dist_we0,
        d0 => dist_d0,
        q0 => dist_q0);

    sptSet_U : component dijkstra_sptSet
    generic map (
        DataWidth => 1,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sptSet_address0,
        ce0 => sptSet_ce0,
        we0 => sptSet_we0,
        d0 => sptSet_d0,
        q0 => sptSet_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                count_0_reg_161 <= count_reg_404;
            elsif (((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                count_0_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_150 <= i_fu_215_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_150 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    min_0_i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                min_0_i_reg_172 <= ap_const_lv32_7FFFFFFF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                min_0_i_reg_172 <= select_ln17_2_fu_314_p3;
            end if; 
        end if;
    end process;

    min_index_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                min_index_reg_184 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                min_index_reg_184 <= v_1_reg_423;
            end if; 
        end if;
    end process;

    v_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                v_0_reg_195 <= v_reg_456;
            elsif (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                v_0_reg_195 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln63_1_reg_438 <= add_ln63_1_fu_287_p2;
                dist_addr_2_reg_443 <= sext_ln55_fu_265_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_1_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln63_reg_493 <= add_ln63_fu_378_p2;
                dist_addr_3_reg_499 <= zext_ln63_reg_461(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                count_reg_404 <= count_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                graph_addr_reg_466 <= sext_ln63_fu_361_p1(7 - 1 downto 0);
                    zext_ln63_reg_461(3 downto 0) <= zext_ln63_fu_347_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                graph_load_reg_480 <= graph_q0;
                icmp_ln63_reg_485 <= icmp_ln63_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln63_1_reg_489 <= icmp_ln63_1_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sptSet_load_1_reg_476 <= sptSet_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                u_fu_52 <= select_ln17_3_fu_322_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_1_reg_423 <= v_1_fu_253_p2;
                    zext_ln18_reg_415(3 downto 0) <= zext_ln18_fu_243_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                v_reg_456 <= v_fu_341_p2;
            end if;
        end if;
    end process;
    zext_ln18_reg_415(31 downto 4) <= "0000000000000000000000000000";
    zext_ln63_reg_461(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln16_fu_247_p2, ap_CS_fsm_state6, icmp_ln58_fu_335_p2, sptSet_q0, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln63_fu_366_p2, icmp_ln42_fu_209_p2, icmp_ln49_fu_231_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln49_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln58_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((sptSet_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln63_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln63_1_fu_287_p2 <= std_logic_vector(unsigned(sext_ln63_cast_fu_279_p3) + unsigned(trunc_ln63_fu_271_p1));
    add_ln63_2_fu_356_p2 <= std_logic_vector(unsigned(add_ln63_1_reg_438) + unsigned(zext_ln63_1_fu_352_p1));
    add_ln63_fu_378_p2 <= std_logic_vector(unsigned(dist_q0) + unsigned(graph_load_reg_480));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln49_fu_231_p2)
    begin
        if (((icmp_ln49_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln49_fu_231_p2)
    begin
        if (((icmp_ln49_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_fu_237_p2 <= std_logic_vector(unsigned(count_0_reg_161) + unsigned(ap_const_lv4_1));

    dist_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, dist_addr_2_reg_443, zext_ln63_reg_461, ap_CS_fsm_state8, ap_CS_fsm_state9, dist_addr_3_reg_499, icmp_ln42_fu_209_p2, ap_CS_fsm_state10, zext_ln43_fu_221_p1, sext_ln46_fu_227_p1, zext_ln17_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dist_address0 <= dist_addr_3_reg_499;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dist_address0 <= zext_ln63_reg_461(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dist_address0 <= dist_addr_2_reg_443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dist_address0 <= zext_ln17_fu_259_p1(4 - 1 downto 0);
        elsif (((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dist_address0 <= sext_ln46_fu_227_p1(4 - 1 downto 0);
        elsif (((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dist_address0 <= zext_ln43_fu_221_p1(4 - 1 downto 0);
        else 
            dist_address0 <= "XXXX";
        end if; 
    end process;


    dist_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln42_fu_209_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dist_ce0 <= ap_const_logic_1;
        else 
            dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_d0_assign_proc : process(ap_CS_fsm_state2, add_ln63_reg_493, icmp_ln42_fu_209_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dist_d0 <= add_ln63_reg_493;
        elsif (((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dist_d0 <= ap_const_lv32_0;
        elsif (((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dist_d0 <= ap_const_lv32_7FFFFFFF;
        else 
            dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_we0_assign_proc : process(ap_CS_fsm_state2, sptSet_load_1_reg_476, icmp_ln63_reg_485, icmp_ln63_1_reg_489, icmp_ln42_fu_209_p2, ap_CS_fsm_state10, icmp_ln63_2_fu_383_p2)
    begin
        if ((((icmp_ln42_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln63_2_fu_383_p2 = ap_const_lv1_1) and (icmp_ln63_1_reg_489 = ap_const_lv1_0) and (icmp_ln63_reg_485 = ap_const_lv1_0) and (sptSet_load_1_reg_476 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dist_we0 <= ap_const_logic_1;
        else 
            dist_we0 <= ap_const_logic_0;
        end if; 
    end process;

    graph_address0 <= graph_addr_reg_466;

    graph_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            graph_ce0 <= ap_const_logic_1;
        else 
            graph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_215_p2 <= std_logic_vector(unsigned(i_0_reg_150) + unsigned(ap_const_lv4_1));
    icmp_ln16_fu_247_p2 <= "1" when (min_index_reg_184 = ap_const_lv4_9) else "0";
    icmp_ln17_fu_293_p2 <= "1" when (signed(dist_q0) > signed(min_0_i_reg_172)) else "0";
    icmp_ln42_fu_209_p2 <= "1" when (i_0_reg_150 = ap_const_lv4_9) else "0";
    icmp_ln49_fu_231_p2 <= "1" when (count_0_reg_161 = ap_const_lv4_8) else "0";
    icmp_ln58_fu_335_p2 <= "1" when (v_0_reg_195 = ap_const_lv4_9) else "0";
    icmp_ln63_1_fu_372_p2 <= "1" when (dist_q0 = ap_const_lv32_7FFFFFFF) else "0";
    icmp_ln63_2_fu_383_p2 <= "1" when (signed(add_ln63_reg_493) < signed(dist_q0)) else "0";
    icmp_ln63_fu_366_p2 <= "1" when (graph_q0 = ap_const_lv32_0) else "0";
    select_ln17_1_fu_307_p3 <= 
        u_fu_52 when (icmp_ln17_fu_293_p2(0) = '1') else 
        zext_ln18_reg_415;
    select_ln17_2_fu_314_p3 <= 
        min_0_i_reg_172 when (sptSet_q0(0) = '1') else 
        select_ln17_fu_299_p3;
    select_ln17_3_fu_322_p3 <= 
        u_fu_52 when (sptSet_q0(0) = '1') else 
        select_ln17_1_fu_307_p3;
    select_ln17_fu_299_p3 <= 
        min_0_i_reg_172 when (icmp_ln17_fu_293_p2(0) = '1') else 
        dist_q0;
        sext_ln46_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(src),64));

    sext_ln55_fu_265_p0 <= u_fu_52;
        sext_ln55_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln55_fu_265_p0),64));

    sext_ln63_cast_fu_279_p3 <= (trunc_ln63_1_fu_275_p1 & ap_const_lv3_0);
        sext_ln63_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln63_2_fu_356_p2),64));


    sptSet_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln16_fu_247_p2, ap_CS_fsm_state6, zext_ln63_fu_347_p1, zext_ln43_fu_221_p1, zext_ln17_fu_259_p1, sext_ln55_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sptSet_address0 <= zext_ln63_fu_347_p1(4 - 1 downto 0);
        elsif (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sptSet_address0 <= sext_ln55_fu_265_p1(4 - 1 downto 0);
        elsif (((icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sptSet_address0 <= zext_ln17_fu_259_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sptSet_address0 <= zext_ln43_fu_221_p1(4 - 1 downto 0);
        else 
            sptSet_address0 <= "XXXX";
        end if; 
    end process;


    sptSet_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln16_fu_247_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln16_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sptSet_ce0 <= ap_const_logic_1;
        else 
            sptSet_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sptSet_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln16_fu_247_p2)
    begin
        if (((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sptSet_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sptSet_d0 <= ap_const_lv1_0;
        else 
            sptSet_d0 <= "X";
        end if; 
    end process;


    sptSet_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln16_fu_247_p2, icmp_ln42_fu_209_p2)
    begin
        if ((((icmp_ln16_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln42_fu_209_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sptSet_we0 <= ap_const_logic_1;
        else 
            sptSet_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln63_1_fu_275_p0 <= u_fu_52;
    trunc_ln63_1_fu_275_p1 <= trunc_ln63_1_fu_275_p0(5 - 1 downto 0);
    trunc_ln63_fu_271_p0 <= u_fu_52;
    trunc_ln63_fu_271_p1 <= trunc_ln63_fu_271_p0(8 - 1 downto 0);
    v_1_fu_253_p2 <= std_logic_vector(unsigned(min_index_reg_184) + unsigned(ap_const_lv4_1));
    v_fu_341_p2 <= std_logic_vector(unsigned(v_0_reg_195) + unsigned(ap_const_lv4_1));
    zext_ln17_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_index_reg_184),64));
    zext_ln18_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_index_reg_184),32));
    zext_ln43_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_150),64));
    zext_ln63_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_0_reg_195),8));
    zext_ln63_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_0_reg_195),64));
end behav;
