// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dijkstra.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dijkstra::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dijkstra::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> dijkstra::ap_ST_fsm_state1 = "1";
const sc_lv<10> dijkstra::ap_ST_fsm_state2 = "10";
const sc_lv<10> dijkstra::ap_ST_fsm_state3 = "100";
const sc_lv<10> dijkstra::ap_ST_fsm_state4 = "1000";
const sc_lv<10> dijkstra::ap_ST_fsm_state5 = "10000";
const sc_lv<10> dijkstra::ap_ST_fsm_state6 = "100000";
const sc_lv<10> dijkstra::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> dijkstra::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> dijkstra::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> dijkstra::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> dijkstra::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dijkstra::ap_const_lv32_1 = "1";
const sc_lv<32> dijkstra::ap_const_lv32_2 = "10";
const sc_lv<32> dijkstra::ap_const_lv32_3 = "11";
const sc_lv<1> dijkstra::ap_const_lv1_0 = "0";
const sc_lv<1> dijkstra::ap_const_lv1_1 = "1";
const sc_lv<32> dijkstra::ap_const_lv32_4 = "100";
const sc_lv<32> dijkstra::ap_const_lv32_5 = "101";
const sc_lv<32> dijkstra::ap_const_lv32_6 = "110";
const sc_lv<32> dijkstra::ap_const_lv32_7 = "111";
const sc_lv<32> dijkstra::ap_const_lv32_8 = "1000";
const sc_lv<4> dijkstra::ap_const_lv4_0 = "0000";
const sc_lv<32> dijkstra::ap_const_lv32_7FFFFFFF = "1111111111111111111111111111111";
const sc_lv<32> dijkstra::ap_const_lv32_9 = "1001";
const sc_lv<4> dijkstra::ap_const_lv4_9 = "1001";
const sc_lv<4> dijkstra::ap_const_lv4_1 = "1";
const sc_lv<4> dijkstra::ap_const_lv4_8 = "1000";
const sc_lv<3> dijkstra::ap_const_lv3_0 = "000";
const bool dijkstra::ap_const_boolean_1 = true;

dijkstra::dijkstra(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dist_U = new dijkstra_dist("dist_U");
    dist_U->clk(ap_clk);
    dist_U->reset(ap_rst);
    dist_U->address0(dist_address0);
    dist_U->ce0(dist_ce0);
    dist_U->we0(dist_we0);
    dist_U->d0(dist_d0);
    dist_U->q0(dist_q0);
    sptSet_U = new dijkstra_sptSet("sptSet_U");
    sptSet_U->clk(ap_clk);
    sptSet_U->reset(ap_rst);
    sptSet_U->address0(sptSet_address0);
    sptSet_U->ce0(sptSet_ce0);
    sptSet_U->we0(sptSet_we0);
    sptSet_U->d0(sptSet_d0);
    sptSet_U->q0(sptSet_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln63_1_fu_287_p2);
    sensitive << ( sext_ln63_cast_fu_279_p3 );
    sensitive << ( trunc_ln63_fu_271_p1 );

    SC_METHOD(thread_add_ln63_2_fu_356_p2);
    sensitive << ( add_ln63_1_reg_438 );
    sensitive << ( zext_ln63_1_fu_352_p1 );

    SC_METHOD(thread_add_ln63_fu_378_p2);
    sensitive << ( graph_load_reg_480 );
    sensitive << ( dist_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln49_fu_231_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln49_fu_231_p2 );

    SC_METHOD(thread_count_fu_237_p2);
    sensitive << ( count_0_reg_161 );

    SC_METHOD(thread_dist_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dist_addr_2_reg_443 );
    sensitive << ( zext_ln63_reg_461 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( dist_addr_3_reg_499 );
    sensitive << ( icmp_ln42_fu_209_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln43_fu_221_p1 );
    sensitive << ( sext_ln46_fu_227_p1 );
    sensitive << ( zext_ln17_fu_259_p1 );

    SC_METHOD(thread_dist_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln42_fu_209_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_dist_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( add_ln63_reg_493 );
    sensitive << ( icmp_ln42_fu_209_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_dist_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sptSet_load_1_reg_476 );
    sensitive << ( icmp_ln63_reg_485 );
    sensitive << ( icmp_ln63_1_reg_489 );
    sensitive << ( icmp_ln42_fu_209_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln63_2_fu_383_p2 );

    SC_METHOD(thread_graph_address0);
    sensitive << ( graph_addr_reg_466 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_graph_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_i_fu_215_p2);
    sensitive << ( i_0_reg_150 );

    SC_METHOD(thread_icmp_ln16_fu_247_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( min_index_reg_184 );

    SC_METHOD(thread_icmp_ln17_fu_293_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( dist_q0 );
    sensitive << ( min_0_i_reg_172 );

    SC_METHOD(thread_icmp_ln42_fu_209_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_150 );

    SC_METHOD(thread_icmp_ln49_fu_231_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( count_0_reg_161 );

    SC_METHOD(thread_icmp_ln58_fu_335_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( v_0_reg_195 );

    SC_METHOD(thread_icmp_ln63_1_fu_372_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( dist_q0 );

    SC_METHOD(thread_icmp_ln63_2_fu_383_p2);
    sensitive << ( sptSet_load_1_reg_476 );
    sensitive << ( icmp_ln63_reg_485 );
    sensitive << ( icmp_ln63_1_reg_489 );
    sensitive << ( add_ln63_reg_493 );
    sensitive << ( dist_q0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_icmp_ln63_fu_366_p2);
    sensitive << ( graph_q0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_select_ln17_1_fu_307_p3);
    sensitive << ( zext_ln18_reg_415 );
    sensitive << ( u_fu_52 );
    sensitive << ( icmp_ln17_fu_293_p2 );

    SC_METHOD(thread_select_ln17_2_fu_314_p3);
    sensitive << ( sptSet_q0 );
    sensitive << ( min_0_i_reg_172 );
    sensitive << ( select_ln17_fu_299_p3 );

    SC_METHOD(thread_select_ln17_3_fu_322_p3);
    sensitive << ( sptSet_q0 );
    sensitive << ( u_fu_52 );
    sensitive << ( select_ln17_1_fu_307_p3 );

    SC_METHOD(thread_select_ln17_fu_299_p3);
    sensitive << ( dist_q0 );
    sensitive << ( min_0_i_reg_172 );
    sensitive << ( icmp_ln17_fu_293_p2 );

    SC_METHOD(thread_sext_ln46_fu_227_p1);
    sensitive << ( src );

    SC_METHOD(thread_sext_ln55_fu_265_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( u_fu_52 );

    SC_METHOD(thread_sext_ln55_fu_265_p1);
    sensitive << ( sext_ln55_fu_265_p0 );

    SC_METHOD(thread_sext_ln63_cast_fu_279_p3);
    sensitive << ( trunc_ln63_1_fu_275_p1 );

    SC_METHOD(thread_sext_ln63_fu_361_p1);
    sensitive << ( add_ln63_2_fu_356_p2 );

    SC_METHOD(thread_sptSet_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln16_fu_247_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln63_fu_347_p1 );
    sensitive << ( zext_ln43_fu_221_p1 );
    sensitive << ( zext_ln17_fu_259_p1 );
    sensitive << ( sext_ln55_fu_265_p1 );

    SC_METHOD(thread_sptSet_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln16_fu_247_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sptSet_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln16_fu_247_p2 );

    SC_METHOD(thread_sptSet_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln16_fu_247_p2 );
    sensitive << ( icmp_ln42_fu_209_p2 );

    SC_METHOD(thread_trunc_ln63_1_fu_275_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( u_fu_52 );

    SC_METHOD(thread_trunc_ln63_1_fu_275_p1);
    sensitive << ( trunc_ln63_1_fu_275_p0 );

    SC_METHOD(thread_trunc_ln63_fu_271_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( u_fu_52 );

    SC_METHOD(thread_trunc_ln63_fu_271_p1);
    sensitive << ( trunc_ln63_fu_271_p0 );

    SC_METHOD(thread_v_1_fu_253_p2);
    sensitive << ( min_index_reg_184 );

    SC_METHOD(thread_v_fu_341_p2);
    sensitive << ( v_0_reg_195 );

    SC_METHOD(thread_zext_ln17_fu_259_p1);
    sensitive << ( min_index_reg_184 );

    SC_METHOD(thread_zext_ln18_fu_243_p1);
    sensitive << ( min_index_reg_184 );

    SC_METHOD(thread_zext_ln43_fu_221_p1);
    sensitive << ( i_0_reg_150 );

    SC_METHOD(thread_zext_ln63_1_fu_352_p1);
    sensitive << ( v_0_reg_195 );

    SC_METHOD(thread_zext_ln63_fu_347_p1);
    sensitive << ( v_0_reg_195 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln16_fu_247_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln58_fu_335_p2 );
    sensitive << ( sptSet_q0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln63_fu_366_p2 );
    sensitive << ( icmp_ln42_fu_209_p2 );
    sensitive << ( icmp_ln49_fu_231_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dijkstra_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, graph_address0, "(port)graph_address0");
    sc_trace(mVcdFile, graph_ce0, "(port)graph_ce0");
    sc_trace(mVcdFile, graph_q0, "(port)graph_q0");
    sc_trace(mVcdFile, src, "(port)src");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_215_p2, "i_fu_215_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, count_fu_237_p2, "count_fu_237_p2");
    sc_trace(mVcdFile, count_reg_404, "count_reg_404");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln18_fu_243_p1, "zext_ln18_fu_243_p1");
    sc_trace(mVcdFile, zext_ln18_reg_415, "zext_ln18_reg_415");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, v_1_fu_253_p2, "v_1_fu_253_p2");
    sc_trace(mVcdFile, v_1_reg_423, "v_1_reg_423");
    sc_trace(mVcdFile, icmp_ln16_fu_247_p2, "icmp_ln16_fu_247_p2");
    sc_trace(mVcdFile, add_ln63_1_fu_287_p2, "add_ln63_1_fu_287_p2");
    sc_trace(mVcdFile, add_ln63_1_reg_438, "add_ln63_1_reg_438");
    sc_trace(mVcdFile, dist_addr_2_reg_443, "dist_addr_2_reg_443");
    sc_trace(mVcdFile, select_ln17_2_fu_314_p3, "select_ln17_2_fu_314_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, v_fu_341_p2, "v_fu_341_p2");
    sc_trace(mVcdFile, v_reg_456, "v_reg_456");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln63_fu_347_p1, "zext_ln63_fu_347_p1");
    sc_trace(mVcdFile, zext_ln63_reg_461, "zext_ln63_reg_461");
    sc_trace(mVcdFile, icmp_ln58_fu_335_p2, "icmp_ln58_fu_335_p2");
    sc_trace(mVcdFile, graph_addr_reg_466, "graph_addr_reg_466");
    sc_trace(mVcdFile, sptSet_q0, "sptSet_q0");
    sc_trace(mVcdFile, sptSet_load_1_reg_476, "sptSet_load_1_reg_476");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, graph_load_reg_480, "graph_load_reg_480");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln63_fu_366_p2, "icmp_ln63_fu_366_p2");
    sc_trace(mVcdFile, icmp_ln63_reg_485, "icmp_ln63_reg_485");
    sc_trace(mVcdFile, icmp_ln63_1_fu_372_p2, "icmp_ln63_1_fu_372_p2");
    sc_trace(mVcdFile, icmp_ln63_1_reg_489, "icmp_ln63_1_reg_489");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, add_ln63_fu_378_p2, "add_ln63_fu_378_p2");
    sc_trace(mVcdFile, add_ln63_reg_493, "add_ln63_reg_493");
    sc_trace(mVcdFile, dist_addr_3_reg_499, "dist_addr_3_reg_499");
    sc_trace(mVcdFile, dist_address0, "dist_address0");
    sc_trace(mVcdFile, dist_ce0, "dist_ce0");
    sc_trace(mVcdFile, dist_we0, "dist_we0");
    sc_trace(mVcdFile, dist_d0, "dist_d0");
    sc_trace(mVcdFile, dist_q0, "dist_q0");
    sc_trace(mVcdFile, sptSet_address0, "sptSet_address0");
    sc_trace(mVcdFile, sptSet_ce0, "sptSet_ce0");
    sc_trace(mVcdFile, sptSet_we0, "sptSet_we0");
    sc_trace(mVcdFile, sptSet_d0, "sptSet_d0");
    sc_trace(mVcdFile, i_0_reg_150, "i_0_reg_150");
    sc_trace(mVcdFile, icmp_ln42_fu_209_p2, "icmp_ln42_fu_209_p2");
    sc_trace(mVcdFile, count_0_reg_161, "count_0_reg_161");
    sc_trace(mVcdFile, min_0_i_reg_172, "min_0_i_reg_172");
    sc_trace(mVcdFile, icmp_ln49_fu_231_p2, "icmp_ln49_fu_231_p2");
    sc_trace(mVcdFile, min_index_reg_184, "min_index_reg_184");
    sc_trace(mVcdFile, v_0_reg_195, "v_0_reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln43_fu_221_p1, "zext_ln43_fu_221_p1");
    sc_trace(mVcdFile, sext_ln46_fu_227_p1, "sext_ln46_fu_227_p1");
    sc_trace(mVcdFile, zext_ln17_fu_259_p1, "zext_ln17_fu_259_p1");
    sc_trace(mVcdFile, sext_ln55_fu_265_p1, "sext_ln55_fu_265_p1");
    sc_trace(mVcdFile, sext_ln63_fu_361_p1, "sext_ln63_fu_361_p1");
    sc_trace(mVcdFile, u_fu_52, "u_fu_52");
    sc_trace(mVcdFile, select_ln17_3_fu_322_p3, "select_ln17_3_fu_322_p3");
    sc_trace(mVcdFile, icmp_ln63_2_fu_383_p2, "icmp_ln63_2_fu_383_p2");
    sc_trace(mVcdFile, sext_ln55_fu_265_p0, "sext_ln55_fu_265_p0");
    sc_trace(mVcdFile, trunc_ln63_fu_271_p0, "trunc_ln63_fu_271_p0");
    sc_trace(mVcdFile, trunc_ln63_1_fu_275_p0, "trunc_ln63_1_fu_275_p0");
    sc_trace(mVcdFile, trunc_ln63_1_fu_275_p1, "trunc_ln63_1_fu_275_p1");
    sc_trace(mVcdFile, sext_ln63_cast_fu_279_p3, "sext_ln63_cast_fu_279_p3");
    sc_trace(mVcdFile, trunc_ln63_fu_271_p1, "trunc_ln63_fu_271_p1");
    sc_trace(mVcdFile, icmp_ln17_fu_293_p2, "icmp_ln17_fu_293_p2");
    sc_trace(mVcdFile, select_ln17_fu_299_p3, "select_ln17_fu_299_p3");
    sc_trace(mVcdFile, select_ln17_1_fu_307_p3, "select_ln17_1_fu_307_p3");
    sc_trace(mVcdFile, zext_ln63_1_fu_352_p1, "zext_ln63_1_fu_352_p1");
    sc_trace(mVcdFile, add_ln63_2_fu_356_p2, "add_ln63_2_fu_356_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dijkstra.hdltvin.dat");
    mHdltvoutHandle.open("dijkstra.hdltvout.dat");
}

dijkstra::~dijkstra() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dist_U;
    delete sptSet_U;
}

void dijkstra::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_335_p2.read()))) {
        count_0_reg_161 = count_reg_404.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read()))) {
        count_0_reg_161 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read()))) {
        i_0_reg_150 = i_fu_215_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_150 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_fu_231_p2.read()))) {
        min_0_i_reg_172 = ap_const_lv32_7FFFFFFF;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        min_0_i_reg_172 = select_ln17_2_fu_314_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_fu_231_p2.read()))) {
        min_index_reg_184 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        min_index_reg_184 = v_1_reg_423.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        v_0_reg_195 = v_reg_456.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1))) {
        v_0_reg_195 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1))) {
        add_ln63_1_reg_438 = add_ln63_1_fu_287_p2.read();
        dist_addr_2_reg_443 =  (sc_lv<4>) (sext_ln55_fu_265_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_1_fu_372_p2.read()))) {
        add_ln63_reg_493 = add_ln63_fu_378_p2.read();
        dist_addr_3_reg_499 =  (sc_lv<4>) (zext_ln63_reg_461.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        count_reg_404 = count_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_335_p2.read()))) {
        graph_addr_reg_466 =  (sc_lv<7>) (sext_ln63_fu_361_p1.read());
        zext_ln63_reg_461 = zext_ln63_fu_347_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        graph_load_reg_480 = graph_q0.read();
        icmp_ln63_reg_485 = icmp_ln63_fu_366_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        icmp_ln63_1_reg_489 = icmp_ln63_1_fu_372_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sptSet_load_1_reg_476 = sptSet_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        u_fu_52 = select_ln17_3_fu_322_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_1_reg_423 = v_1_fu_253_p2.read();
        zext_ln18_reg_415 = zext_ln18_fu_243_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        v_reg_456 = v_fu_341_p2.read();
    }
}

void dijkstra::thread_add_ln63_1_fu_287_p2() {
    add_ln63_1_fu_287_p2 = (!sext_ln63_cast_fu_279_p3.read().is_01() || !trunc_ln63_fu_271_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(sext_ln63_cast_fu_279_p3.read()) + sc_biguint<8>(trunc_ln63_fu_271_p1.read()));
}

void dijkstra::thread_add_ln63_2_fu_356_p2() {
    add_ln63_2_fu_356_p2 = (!add_ln63_1_reg_438.read().is_01() || !zext_ln63_1_fu_352_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln63_1_reg_438.read()) + sc_biguint<8>(zext_ln63_1_fu_352_p1.read()));
}

void dijkstra::thread_add_ln63_fu_378_p2() {
    add_ln63_fu_378_p2 = (!dist_q0.read().is_01() || !graph_load_reg_480.read().is_01())? sc_lv<32>(): (sc_biguint<32>(dist_q0.read()) + sc_biguint<32>(graph_load_reg_480.read()));
}

void dijkstra::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dijkstra::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void dijkstra::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dijkstra::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dijkstra::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dijkstra::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dijkstra::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void dijkstra::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void dijkstra::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void dijkstra::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void dijkstra::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_231_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dijkstra::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dijkstra::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_231_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dijkstra::thread_count_fu_237_p2() {
    count_fu_237_p2 = (!count_0_reg_161.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(count_0_reg_161.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dijkstra::thread_dist_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        dist_address0 = dist_addr_3_reg_499.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dist_address0 =  (sc_lv<4>) (zext_ln63_reg_461.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dist_address0 = dist_addr_2_reg_443.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dist_address0 =  (sc_lv<4>) (zext_ln17_fu_259_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read()))) {
        dist_address0 =  (sc_lv<4>) (sext_ln46_fu_227_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read()))) {
        dist_address0 =  (sc_lv<4>) (zext_ln43_fu_221_p1.read());
    } else {
        dist_address0 = "XXXX";
    }
}

void dijkstra::thread_dist_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        dist_ce0 = ap_const_logic_1;
    } else {
        dist_ce0 = ap_const_logic_0;
    }
}

void dijkstra::thread_dist_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        dist_d0 = add_ln63_reg_493.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read()))) {
        dist_d0 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read()))) {
        dist_d0 = ap_const_lv32_7FFFFFFF;
    } else {
        dist_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dijkstra::thread_dist_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sptSet_load_1_reg_476.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_reg_485.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln63_1_reg_489.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_2_fu_383_p2.read())))) {
        dist_we0 = ap_const_logic_1;
    } else {
        dist_we0 = ap_const_logic_0;
    }
}

void dijkstra::thread_graph_address0() {
    graph_address0 = graph_addr_reg_466.read();
}

void dijkstra::thread_graph_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        graph_ce0 = ap_const_logic_1;
    } else {
        graph_ce0 = ap_const_logic_0;
    }
}

void dijkstra::thread_i_fu_215_p2() {
    i_fu_215_p2 = (!i_0_reg_150.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_150.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dijkstra::thread_icmp_ln16_fu_247_p2() {
    icmp_ln16_fu_247_p2 = (!min_index_reg_184.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(min_index_reg_184.read() == ap_const_lv4_9);
}

void dijkstra::thread_icmp_ln17_fu_293_p2() {
    icmp_ln17_fu_293_p2 = (!dist_q0.read().is_01() || !min_0_i_reg_172.read().is_01())? sc_lv<1>(): (sc_bigint<32>(dist_q0.read()) > sc_bigint<32>(min_0_i_reg_172.read()));
}

void dijkstra::thread_icmp_ln42_fu_209_p2() {
    icmp_ln42_fu_209_p2 = (!i_0_reg_150.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_150.read() == ap_const_lv4_9);
}

void dijkstra::thread_icmp_ln49_fu_231_p2() {
    icmp_ln49_fu_231_p2 = (!count_0_reg_161.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(count_0_reg_161.read() == ap_const_lv4_8);
}

void dijkstra::thread_icmp_ln58_fu_335_p2() {
    icmp_ln58_fu_335_p2 = (!v_0_reg_195.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(v_0_reg_195.read() == ap_const_lv4_9);
}

void dijkstra::thread_icmp_ln63_1_fu_372_p2() {
    icmp_ln63_1_fu_372_p2 = (!dist_q0.read().is_01() || !ap_const_lv32_7FFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(dist_q0.read() == ap_const_lv32_7FFFFFFF);
}

void dijkstra::thread_icmp_ln63_2_fu_383_p2() {
    icmp_ln63_2_fu_383_p2 = (!add_ln63_reg_493.read().is_01() || !dist_q0.read().is_01())? sc_lv<1>(): (sc_bigint<32>(add_ln63_reg_493.read()) < sc_bigint<32>(dist_q0.read()));
}

void dijkstra::thread_icmp_ln63_fu_366_p2() {
    icmp_ln63_fu_366_p2 = (!graph_q0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(graph_q0.read() == ap_const_lv32_0);
}

void dijkstra::thread_select_ln17_1_fu_307_p3() {
    select_ln17_1_fu_307_p3 = (!icmp_ln17_fu_293_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln17_fu_293_p2.read()[0].to_bool())? u_fu_52.read(): zext_ln18_reg_415.read());
}

void dijkstra::thread_select_ln17_2_fu_314_p3() {
    select_ln17_2_fu_314_p3 = (!sptSet_q0.read()[0].is_01())? sc_lv<32>(): ((sptSet_q0.read()[0].to_bool())? min_0_i_reg_172.read(): select_ln17_fu_299_p3.read());
}

void dijkstra::thread_select_ln17_3_fu_322_p3() {
    select_ln17_3_fu_322_p3 = (!sptSet_q0.read()[0].is_01())? sc_lv<32>(): ((sptSet_q0.read()[0].to_bool())? u_fu_52.read(): select_ln17_1_fu_307_p3.read());
}

void dijkstra::thread_select_ln17_fu_299_p3() {
    select_ln17_fu_299_p3 = (!icmp_ln17_fu_293_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln17_fu_293_p2.read()[0].to_bool())? min_0_i_reg_172.read(): dist_q0.read());
}

void dijkstra::thread_sext_ln46_fu_227_p1() {
    sext_ln46_fu_227_p1 = esl_sext<64,32>(src.read());
}

void dijkstra::thread_sext_ln55_fu_265_p0() {
    sext_ln55_fu_265_p0 = u_fu_52.read();
}

void dijkstra::thread_sext_ln55_fu_265_p1() {
    sext_ln55_fu_265_p1 = esl_sext<64,32>(sext_ln55_fu_265_p0.read());
}

void dijkstra::thread_sext_ln63_cast_fu_279_p3() {
    sext_ln63_cast_fu_279_p3 = esl_concat<5,3>(trunc_ln63_1_fu_275_p1.read(), ap_const_lv3_0);
}

void dijkstra::thread_sext_ln63_fu_361_p1() {
    sext_ln63_fu_361_p1 = esl_sext<64,8>(add_ln63_2_fu_356_p2.read());
}

void dijkstra::thread_sptSet_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sptSet_address0 =  (sc_lv<4>) (zext_ln63_fu_347_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1))) {
        sptSet_address0 =  (sc_lv<4>) (sext_ln55_fu_265_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_0))) {
        sptSet_address0 =  (sc_lv<4>) (zext_ln17_fu_259_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sptSet_address0 =  (sc_lv<4>) (zext_ln43_fu_221_p1.read());
    } else {
        sptSet_address0 = "XXXX";
    }
}

void dijkstra::thread_sptSet_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        sptSet_ce0 = ap_const_logic_1;
    } else {
        sptSet_ce0 = ap_const_logic_0;
    }
}

void dijkstra::thread_sptSet_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1))) {
        sptSet_d0 = ap_const_lv1_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sptSet_d0 = ap_const_lv1_0;
    } else {
        sptSet_d0 =  (sc_lv<1>) ("X");
    }
}

void dijkstra::thread_sptSet_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_209_p2.read())))) {
        sptSet_we0 = ap_const_logic_1;
    } else {
        sptSet_we0 = ap_const_logic_0;
    }
}

void dijkstra::thread_trunc_ln63_1_fu_275_p0() {
    trunc_ln63_1_fu_275_p0 = u_fu_52.read();
}

void dijkstra::thread_trunc_ln63_1_fu_275_p1() {
    trunc_ln63_1_fu_275_p1 = trunc_ln63_1_fu_275_p0.read().range(5-1, 0);
}

void dijkstra::thread_trunc_ln63_fu_271_p0() {
    trunc_ln63_fu_271_p0 = u_fu_52.read();
}

void dijkstra::thread_trunc_ln63_fu_271_p1() {
    trunc_ln63_fu_271_p1 = trunc_ln63_fu_271_p0.read().range(8-1, 0);
}

void dijkstra::thread_v_1_fu_253_p2() {
    v_1_fu_253_p2 = (!min_index_reg_184.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(min_index_reg_184.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dijkstra::thread_v_fu_341_p2() {
    v_fu_341_p2 = (!v_0_reg_195.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(v_0_reg_195.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dijkstra::thread_zext_ln17_fu_259_p1() {
    zext_ln17_fu_259_p1 = esl_zext<64,4>(min_index_reg_184.read());
}

void dijkstra::thread_zext_ln18_fu_243_p1() {
    zext_ln18_fu_243_p1 = esl_zext<32,4>(min_index_reg_184.read());
}

void dijkstra::thread_zext_ln43_fu_221_p1() {
    zext_ln43_fu_221_p1 = esl_zext<64,4>(i_0_reg_150.read());
}

void dijkstra::thread_zext_ln63_1_fu_352_p1() {
    zext_ln63_1_fu_352_p1 = esl_zext<8,4>(v_0_reg_195.read());
}

void dijkstra::thread_zext_ln63_fu_347_p1() {
    zext_ln63_fu_347_p1 = esl_zext<64,4>(v_0_reg_195.read());
}

void dijkstra::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_209_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_231_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_247_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_335_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, sptSet_q0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln63_fu_366_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void dijkstra::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"graph_address0\" :  \"" << graph_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"graph_ce0\" :  \"" << graph_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"graph_q0\" :  \"" << graph_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src\" :  \"" << src.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

