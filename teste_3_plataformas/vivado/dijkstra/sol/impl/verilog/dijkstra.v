// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dijkstra,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.210000,HLS_SYN_LAT=467,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=266,HLS_SYN_LUT=561,HLS_VERSION=2019_1}" *)

module dijkstra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        graph_address0,
        graph_ce0,
        graph_q0,
        src
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] graph_address0;
output   graph_ce0;
input  [31:0] graph_q0;
input  [31:0] src;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg graph_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_215_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] count_fu_237_p2;
reg   [3:0] count_reg_404;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln18_fu_243_p1;
reg   [31:0] zext_ln18_reg_415;
wire    ap_CS_fsm_state4;
wire   [3:0] v_1_fu_253_p2;
reg   [3:0] v_1_reg_423;
wire   [0:0] icmp_ln16_fu_247_p2;
wire   [7:0] add_ln63_1_fu_287_p2;
reg   [7:0] add_ln63_1_reg_438;
reg   [3:0] dist_addr_2_reg_443;
wire   [31:0] select_ln17_2_fu_314_p3;
wire    ap_CS_fsm_state5;
wire   [3:0] v_fu_341_p2;
reg   [3:0] v_reg_456;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln63_fu_347_p1;
reg   [63:0] zext_ln63_reg_461;
wire   [0:0] icmp_ln58_fu_335_p2;
reg   [6:0] graph_addr_reg_466;
wire   [0:0] sptSet_q0;
reg   [0:0] sptSet_load_1_reg_476;
wire    ap_CS_fsm_state7;
reg   [31:0] graph_load_reg_480;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln63_fu_366_p2;
reg   [0:0] icmp_ln63_reg_485;
wire   [0:0] icmp_ln63_1_fu_372_p2;
reg   [0:0] icmp_ln63_1_reg_489;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln63_fu_378_p2;
reg   [31:0] add_ln63_reg_493;
reg   [3:0] dist_addr_3_reg_499;
reg   [3:0] dist_address0;
reg    dist_ce0;
reg    dist_we0;
reg   [31:0] dist_d0;
wire   [31:0] dist_q0;
reg   [3:0] sptSet_address0;
reg    sptSet_ce0;
reg    sptSet_we0;
reg   [0:0] sptSet_d0;
reg   [3:0] i_0_reg_150;
wire   [0:0] icmp_ln42_fu_209_p2;
reg   [3:0] count_0_reg_161;
reg   [31:0] min_0_i_reg_172;
wire   [0:0] icmp_ln49_fu_231_p2;
reg   [3:0] min_index_reg_184;
reg   [3:0] v_0_reg_195;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln43_fu_221_p1;
wire  signed [63:0] sext_ln46_fu_227_p1;
wire   [63:0] zext_ln17_fu_259_p1;
wire  signed [63:0] sext_ln55_fu_265_p1;
wire  signed [63:0] sext_ln63_fu_361_p1;
reg   [31:0] u_fu_52;
wire   [31:0] select_ln17_3_fu_322_p3;
wire   [0:0] icmp_ln63_2_fu_383_p2;
wire  signed [31:0] sext_ln55_fu_265_p0;
wire  signed [31:0] trunc_ln63_fu_271_p0;
wire  signed [31:0] trunc_ln63_1_fu_275_p0;
wire   [4:0] trunc_ln63_1_fu_275_p1;
wire   [7:0] sext_ln63_cast_fu_279_p3;
wire   [7:0] trunc_ln63_fu_271_p1;
wire   [0:0] icmp_ln17_fu_293_p2;
wire   [31:0] select_ln17_fu_299_p3;
wire   [31:0] select_ln17_1_fu_307_p3;
wire   [7:0] zext_ln63_1_fu_352_p1;
wire   [7:0] add_ln63_2_fu_356_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

dijkstra_dist #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
dist_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dist_address0),
    .ce0(dist_ce0),
    .we0(dist_we0),
    .d0(dist_d0),
    .q0(dist_q0)
);

dijkstra_sptSet #(
    .DataWidth( 1 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sptSet_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sptSet_address0),
    .ce0(sptSet_ce0),
    .we0(sptSet_we0),
    .d0(sptSet_d0),
    .q0(sptSet_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        count_0_reg_161 <= count_reg_404;
    end else if (((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        count_0_reg_161 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_150 <= i_fu_215_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        min_0_i_reg_172 <= 32'd2147483647;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        min_0_i_reg_172 <= select_ln17_2_fu_314_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        min_index_reg_184 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        min_index_reg_184 <= v_1_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v_0_reg_195 <= v_reg_456;
    end else if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        v_0_reg_195 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln63_1_reg_438 <= add_ln63_1_fu_287_p2;
        dist_addr_2_reg_443 <= sext_ln55_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_1_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln63_reg_493 <= add_ln63_fu_378_p2;
        dist_addr_3_reg_499 <= zext_ln63_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        count_reg_404 <= count_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        graph_addr_reg_466 <= sext_ln63_fu_361_p1;
        zext_ln63_reg_461[3 : 0] <= zext_ln63_fu_347_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        graph_load_reg_480 <= graph_q0;
        icmp_ln63_reg_485 <= icmp_ln63_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln63_1_reg_489 <= icmp_ln63_1_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sptSet_load_1_reg_476 <= sptSet_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        u_fu_52 <= select_ln17_3_fu_322_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_1_reg_423 <= v_1_fu_253_p2;
        zext_ln18_reg_415[3 : 0] <= zext_ln18_fu_243_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v_reg_456 <= v_fu_341_p2;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dist_address0 = dist_addr_3_reg_499;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dist_address0 = zext_ln63_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dist_address0 = dist_addr_2_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dist_address0 = zext_ln17_fu_259_p1;
    end else if (((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dist_address0 = sext_ln46_fu_227_p1;
    end else if (((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dist_address0 = zext_ln43_fu_221_p1;
    end else begin
        dist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        dist_ce0 = 1'b1;
    end else begin
        dist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dist_d0 = add_ln63_reg_493;
    end else if (((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dist_d0 = 32'd0;
    end else if (((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dist_d0 = 32'd2147483647;
    end else begin
        dist_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln63_2_fu_383_p2 == 1'd1) & (icmp_ln63_1_reg_489 == 1'd0) & (icmp_ln63_reg_485 == 1'd0) & (sptSet_load_1_reg_476 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        dist_we0 = 1'b1;
    end else begin
        dist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        graph_ce0 = 1'b1;
    end else begin
        graph_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sptSet_address0 = zext_ln63_fu_347_p1;
    end else if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sptSet_address0 = sext_ln55_fu_265_p1;
    end else if (((icmp_ln16_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sptSet_address0 = zext_ln17_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sptSet_address0 = zext_ln43_fu_221_p1;
    end else begin
        sptSet_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln16_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        sptSet_ce0 = 1'b1;
    end else begin
        sptSet_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sptSet_d0 = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sptSet_d0 = 1'd0;
    end else begin
        sptSet_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln42_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        sptSet_we0 = 1'b1;
    end else begin
        sptSet_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln42_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln49_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln58_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((sptSet_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln63_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_1_fu_287_p2 = (sext_ln63_cast_fu_279_p3 + trunc_ln63_fu_271_p1);

assign add_ln63_2_fu_356_p2 = (add_ln63_1_reg_438 + zext_ln63_1_fu_352_p1);

assign add_ln63_fu_378_p2 = (dist_q0 + graph_load_reg_480);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign count_fu_237_p2 = (count_0_reg_161 + 4'd1);

assign graph_address0 = graph_addr_reg_466;

assign i_fu_215_p2 = (i_0_reg_150 + 4'd1);

assign icmp_ln16_fu_247_p2 = ((min_index_reg_184 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_293_p2 = (($signed(dist_q0) > $signed(min_0_i_reg_172)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_209_p2 = ((i_0_reg_150 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_231_p2 = ((count_0_reg_161 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_335_p2 = ((v_0_reg_195 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln63_1_fu_372_p2 = ((dist_q0 == 32'd2147483647) ? 1'b1 : 1'b0);

assign icmp_ln63_2_fu_383_p2 = (($signed(add_ln63_reg_493) < $signed(dist_q0)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_366_p2 = ((graph_q0 == 32'd0) ? 1'b1 : 1'b0);

assign select_ln17_1_fu_307_p3 = ((icmp_ln17_fu_293_p2[0:0] === 1'b1) ? u_fu_52 : zext_ln18_reg_415);

assign select_ln17_2_fu_314_p3 = ((sptSet_q0[0:0] === 1'b1) ? min_0_i_reg_172 : select_ln17_fu_299_p3);

assign select_ln17_3_fu_322_p3 = ((sptSet_q0[0:0] === 1'b1) ? u_fu_52 : select_ln17_1_fu_307_p3);

assign select_ln17_fu_299_p3 = ((icmp_ln17_fu_293_p2[0:0] === 1'b1) ? min_0_i_reg_172 : dist_q0);

assign sext_ln46_fu_227_p1 = $signed(src);

assign sext_ln55_fu_265_p0 = u_fu_52;

assign sext_ln55_fu_265_p1 = sext_ln55_fu_265_p0;

assign sext_ln63_cast_fu_279_p3 = {{trunc_ln63_1_fu_275_p1}, {3'd0}};

assign sext_ln63_fu_361_p1 = $signed(add_ln63_2_fu_356_p2);

assign trunc_ln63_1_fu_275_p0 = u_fu_52;

assign trunc_ln63_1_fu_275_p1 = trunc_ln63_1_fu_275_p0[4:0];

assign trunc_ln63_fu_271_p0 = u_fu_52;

assign trunc_ln63_fu_271_p1 = trunc_ln63_fu_271_p0[7:0];

assign v_1_fu_253_p2 = (min_index_reg_184 + 4'd1);

assign v_fu_341_p2 = (v_0_reg_195 + 4'd1);

assign zext_ln17_fu_259_p1 = min_index_reg_184;

assign zext_ln18_fu_243_p1 = min_index_reg_184;

assign zext_ln43_fu_221_p1 = i_0_reg_150;

assign zext_ln63_1_fu_352_p1 = v_0_reg_195;

assign zext_ln63_fu_347_p1 = v_0_reg_195;

always @ (posedge ap_clk) begin
    zext_ln18_reg_415[31:4] <= 28'b0000000000000000000000000000;
    zext_ln63_reg_461[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dijkstra
