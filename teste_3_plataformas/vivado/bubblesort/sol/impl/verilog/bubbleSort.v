// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bubbleSort,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=161,HLS_VERSION=2019_1}" *)

module bubbleSort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_address0,
        v_ce0,
        v_we0,
        v_d0,
        v_q0,
        v_address1,
        v_ce1,
        v_we1,
        v_d1,
        v_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] v_address0;
output   v_ce0;
output   v_we0;
output  [31:0] v_d0;
input  [31:0] v_q0;
output  [6:0] v_address1;
output   v_ce1;
output   v_we1;
output  [31:0] v_d1;
input  [31:0] v_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v_ce0;
reg v_we0;
reg[6:0] v_address1;
reg v_ce1;
reg v_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln7_fu_72_p1;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_82_p2;
reg   [6:0] i_reg_124;
reg   [6:0] v_addr_reg_129;
wire   [0:0] icmp_ln7_fu_76_p2;
wire  signed [31:0] j_fu_93_p2;
reg  signed [31:0] j_reg_134;
wire    ap_CS_fsm_state3;
reg   [6:0] v_addr_1_reg_142;
wire   [0:0] icmp_ln8_fu_99_p2;
reg   [6:0] i_0_reg_52;
reg   [31:0] j_0_in_reg_63;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln9_fu_88_p1;
wire  signed [63:0] sext_ln9_fu_105_p1;
wire   [0:0] icmp_ln9_fu_110_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_52 <= i_reg_124;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_52 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_in_reg_63 <= zext_ln7_fu_72_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_in_reg_63 <= j_reg_134;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_124 <= i_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_134 <= j_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_addr_1_reg_142 <= sext_ln9_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v_addr_reg_129 <= zext_ln9_fu_88_p1;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_address1 = v_addr_1_reg_142;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_address1 = sext_ln9_fu_105_p1;
    end else begin
        v_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        v_ce1 = 1'b1;
    end else begin
        v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        v_we0 = 1'b1;
    end else begin
        v_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        v_we1 = 1'b1;
    end else begin
        v_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln8_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_82_p2 = (i_0_reg_52 + 7'd1);

assign icmp_ln7_fu_76_p2 = ((i_0_reg_52 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_99_p2 = ((j_0_in_reg_63 == 32'd99) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_110_p2 = (($signed(v_q0) > $signed(v_q1)) ? 1'b1 : 1'b0);

assign j_fu_93_p2 = (j_0_in_reg_63 + 32'd1);

assign sext_ln9_fu_105_p1 = j_fu_93_p2;

assign v_address0 = v_addr_reg_129;

assign v_d0 = v_q1;

assign v_d1 = v_q0;

assign zext_ln7_fu_72_p1 = i_0_reg_52;

assign zext_ln9_fu_88_p1 = i_0_reg_52;

endmodule //bubbleSort
