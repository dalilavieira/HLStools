// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bubbleSort_HH_
#define _bubbleSort_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bubbleSort : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > v_address0;
    sc_out< sc_logic > v_ce0;
    sc_out< sc_logic > v_we0;
    sc_out< sc_lv<32> > v_d0;
    sc_in< sc_lv<32> > v_q0;
    sc_out< sc_lv<7> > v_address1;
    sc_out< sc_logic > v_ce1;
    sc_out< sc_logic > v_we1;
    sc_out< sc_lv<32> > v_d1;
    sc_in< sc_lv<32> > v_q1;


    // Module declarations
    bubbleSort(sc_module_name name);
    SC_HAS_PROCESS(bubbleSort);

    ~bubbleSort();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > zext_ln7_fu_72_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > i_fu_82_p2;
    sc_signal< sc_lv<7> > i_reg_124;
    sc_signal< sc_lv<7> > v_addr_reg_129;
    sc_signal< sc_lv<1> > icmp_ln7_fu_76_p2;
    sc_signal< sc_lv<32> > j_fu_93_p2;
    sc_signal< sc_lv<32> > j_reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > v_addr_1_reg_142;
    sc_signal< sc_lv<1> > icmp_ln8_fu_99_p2;
    sc_signal< sc_lv<7> > i_0_reg_52;
    sc_signal< sc_lv<32> > j_0_in_reg_63;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln9_fu_88_p1;
    sc_signal< sc_lv<64> > sext_ln9_fu_105_p1;
    sc_signal< sc_lv<1> > icmp_ln9_fu_110_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_63;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_82_p2();
    void thread_icmp_ln7_fu_76_p2();
    void thread_icmp_ln8_fu_99_p2();
    void thread_icmp_ln9_fu_110_p2();
    void thread_j_fu_93_p2();
    void thread_sext_ln9_fu_105_p1();
    void thread_v_address0();
    void thread_v_address1();
    void thread_v_ce0();
    void thread_v_ce1();
    void thread_v_d0();
    void thread_v_d1();
    void thread_v_we0();
    void thread_v_we1();
    void thread_zext_ln7_fu_72_p1();
    void thread_zext_ln9_fu_88_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
