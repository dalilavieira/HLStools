// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bubbleSort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bubbleSort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic bubbleSort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> bubbleSort::ap_ST_fsm_state1 = "1";
const sc_lv<4> bubbleSort::ap_ST_fsm_state2 = "10";
const sc_lv<4> bubbleSort::ap_ST_fsm_state3 = "100";
const sc_lv<4> bubbleSort::ap_ST_fsm_state4 = "1000";
const sc_lv<32> bubbleSort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> bubbleSort::ap_const_lv32_1 = "1";
const sc_lv<1> bubbleSort::ap_const_lv1_0 = "0";
const sc_lv<32> bubbleSort::ap_const_lv32_2 = "10";
const sc_lv<7> bubbleSort::ap_const_lv7_0 = "0000000";
const sc_lv<1> bubbleSort::ap_const_lv1_1 = "1";
const sc_lv<32> bubbleSort::ap_const_lv32_3 = "11";
const sc_lv<7> bubbleSort::ap_const_lv7_64 = "1100100";
const sc_lv<7> bubbleSort::ap_const_lv7_1 = "1";
const sc_lv<32> bubbleSort::ap_const_lv32_63 = "1100011";
const bool bubbleSort::ap_const_boolean_1 = true;

bubbleSort::bubbleSort(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_76_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_76_p2 );

    SC_METHOD(thread_i_fu_82_p2);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_icmp_ln7_fu_76_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_icmp_ln8_fu_99_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_in_reg_63 );

    SC_METHOD(thread_icmp_ln9_fu_110_p2);
    sensitive << ( v_q0 );
    sensitive << ( v_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_j_fu_93_p2);
    sensitive << ( j_0_in_reg_63 );

    SC_METHOD(thread_sext_ln9_fu_105_p1);
    sensitive << ( j_fu_93_p2 );

    SC_METHOD(thread_v_address0);
    sensitive << ( v_addr_reg_129 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( v_addr_1_reg_142 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sext_ln9_fu_105_p1 );

    SC_METHOD(thread_v_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_d0);
    sensitive << ( v_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_d1);
    sensitive << ( v_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_v_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln9_fu_110_p2 );

    SC_METHOD(thread_v_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln9_fu_110_p2 );

    SC_METHOD(thread_zext_ln7_fu_72_p1);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_zext_ln9_fu_88_p1);
    sensitive << ( i_0_reg_52 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln7_fu_76_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln8_fu_99_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bubbleSort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, v_address0, "(port)v_address0");
    sc_trace(mVcdFile, v_ce0, "(port)v_ce0");
    sc_trace(mVcdFile, v_we0, "(port)v_we0");
    sc_trace(mVcdFile, v_d0, "(port)v_d0");
    sc_trace(mVcdFile, v_q0, "(port)v_q0");
    sc_trace(mVcdFile, v_address1, "(port)v_address1");
    sc_trace(mVcdFile, v_ce1, "(port)v_ce1");
    sc_trace(mVcdFile, v_we1, "(port)v_we1");
    sc_trace(mVcdFile, v_d1, "(port)v_d1");
    sc_trace(mVcdFile, v_q1, "(port)v_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln7_fu_72_p1, "zext_ln7_fu_72_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_82_p2, "i_fu_82_p2");
    sc_trace(mVcdFile, i_reg_124, "i_reg_124");
    sc_trace(mVcdFile, v_addr_reg_129, "v_addr_reg_129");
    sc_trace(mVcdFile, icmp_ln7_fu_76_p2, "icmp_ln7_fu_76_p2");
    sc_trace(mVcdFile, j_fu_93_p2, "j_fu_93_p2");
    sc_trace(mVcdFile, j_reg_134, "j_reg_134");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, v_addr_1_reg_142, "v_addr_1_reg_142");
    sc_trace(mVcdFile, icmp_ln8_fu_99_p2, "icmp_ln8_fu_99_p2");
    sc_trace(mVcdFile, i_0_reg_52, "i_0_reg_52");
    sc_trace(mVcdFile, j_0_in_reg_63, "j_0_in_reg_63");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln9_fu_88_p1, "zext_ln9_fu_88_p1");
    sc_trace(mVcdFile, sext_ln9_fu_105_p1, "sext_ln9_fu_105_p1");
    sc_trace(mVcdFile, icmp_ln9_fu_110_p2, "icmp_ln9_fu_110_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("bubbleSort.hdltvin.dat");
    mHdltvoutHandle.open("bubbleSort.hdltvout.dat");
}

bubbleSort::~bubbleSort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void bubbleSort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_99_p2.read(), ap_const_lv1_1))) {
        i_0_reg_52 = i_reg_124.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_52 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_76_p2.read(), ap_const_lv1_0))) {
        j_0_in_reg_63 = zext_ln7_fu_72_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_in_reg_63 = j_reg_134.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_124 = i_fu_82_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_134 = j_fu_93_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln8_fu_99_p2.read()))) {
        v_addr_1_reg_142 =  (sc_lv<7>) (sext_ln9_fu_105_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_76_p2.read(), ap_const_lv1_0))) {
        v_addr_reg_129 =  (sc_lv<7>) (zext_ln9_fu_88_p1.read());
    }
}

void bubbleSort::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void bubbleSort::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void bubbleSort::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void bubbleSort::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void bubbleSort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_76_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_76_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void bubbleSort::thread_i_fu_82_p2() {
    i_fu_82_p2 = (!i_0_reg_52.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_52.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void bubbleSort::thread_icmp_ln7_fu_76_p2() {
    icmp_ln7_fu_76_p2 = (!i_0_reg_52.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_52.read() == ap_const_lv7_64);
}

void bubbleSort::thread_icmp_ln8_fu_99_p2() {
    icmp_ln8_fu_99_p2 = (!j_0_in_reg_63.read().is_01() || !ap_const_lv32_63.is_01())? sc_lv<1>(): sc_lv<1>(j_0_in_reg_63.read() == ap_const_lv32_63);
}

void bubbleSort::thread_icmp_ln9_fu_110_p2() {
    icmp_ln9_fu_110_p2 = (!v_q0.read().is_01() || !v_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(v_q0.read()) > sc_bigint<32>(v_q1.read()));
}

void bubbleSort::thread_j_fu_93_p2() {
    j_fu_93_p2 = (!j_0_in_reg_63.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(j_0_in_reg_63.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void bubbleSort::thread_sext_ln9_fu_105_p1() {
    sext_ln9_fu_105_p1 = esl_sext<64,32>(j_fu_93_p2.read());
}

void bubbleSort::thread_v_address0() {
    v_address0 = v_addr_reg_129.read();
}

void bubbleSort::thread_v_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_address1 = v_addr_1_reg_142.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_address1 =  (sc_lv<7>) (sext_ln9_fu_105_p1.read());
    } else {
        v_address1 = "XXXXXXX";
    }
}

void bubbleSort::thread_v_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        v_ce0 = ap_const_logic_1;
    } else {
        v_ce0 = ap_const_logic_0;
    }
}

void bubbleSort::thread_v_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        v_ce1 = ap_const_logic_1;
    } else {
        v_ce1 = ap_const_logic_0;
    }
}

void bubbleSort::thread_v_d0() {
    v_d0 = v_q1.read();
}

void bubbleSort::thread_v_d1() {
    v_d1 = v_q0.read();
}

void bubbleSort::thread_v_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln9_fu_110_p2.read()))) {
        v_we0 = ap_const_logic_1;
    } else {
        v_we0 = ap_const_logic_0;
    }
}

void bubbleSort::thread_v_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln9_fu_110_p2.read()))) {
        v_we1 = ap_const_logic_1;
    } else {
        v_we1 = ap_const_logic_0;
    }
}

void bubbleSort::thread_zext_ln7_fu_72_p1() {
    zext_ln7_fu_72_p1 = esl_zext<32,7>(i_0_reg_52.read());
}

void bubbleSort::thread_zext_ln9_fu_88_p1() {
    zext_ln9_fu_88_p1 = esl_zext<64,7>(i_0_reg_52.read());
}

void bubbleSort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_76_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_99_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void bubbleSort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_address0\" :  \"" << v_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_ce0\" :  \"" << v_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_we0\" :  \"" << v_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_d0\" :  \"" << v_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"v_q0\" :  \"" << v_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_address1\" :  \"" << v_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_ce1\" :  \"" << v_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_we1\" :  \"" << v_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"v_d1\" :  \"" << v_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"v_q1\" :  \"" << v_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

