// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmc,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.416000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=211,HLS_VERSION=2019_1}" *)

module mmc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
input  [31:0] b;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] F1_1_fu_66_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln7_fu_44_p2;
wire   [31:0] F2_1_fu_74_p3;
reg   [31:0] F1_0_reg_26;
reg   [31:0] F2_0_reg_35;
wire   [0:0] icmp_ln8_fu_50_p2;
wire   [31:0] F1_fu_61_p2;
wire   [31:0] F2_fu_56_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        F1_0_reg_26 <= F1_1_fu_66_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F1_0_reg_26 <= a;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        F2_0_reg_35 <= F2_1_fu_74_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F2_0_reg_35 <= b;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F1_1_fu_66_p3 = ((icmp_ln8_fu_50_p2[0:0] === 1'b1) ? F1_0_reg_26 : F1_fu_61_p2);

assign F1_fu_61_p2 = (F1_0_reg_26 + a);

assign F2_1_fu_74_p3 = ((icmp_ln8_fu_50_p2[0:0] === 1'b1) ? F2_fu_56_p2 : F2_0_reg_35);

assign F2_fu_56_p2 = (F2_0_reg_35 + b);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = F1_0_reg_26;

assign icmp_ln7_fu_44_p2 = ((F1_0_reg_26 == F2_0_reg_35) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_50_p2 = (($signed(F1_0_reg_26) > $signed(F2_0_reg_35)) ? 1'b1 : 1'b0);

endmodule //mmc
