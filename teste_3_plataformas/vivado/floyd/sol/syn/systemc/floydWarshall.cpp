// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "floydWarshall.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic floydWarshall::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic floydWarshall::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> floydWarshall::ap_ST_fsm_state1 = "1";
const sc_lv<9> floydWarshall::ap_ST_fsm_state2 = "10";
const sc_lv<9> floydWarshall::ap_ST_fsm_state3 = "100";
const sc_lv<9> floydWarshall::ap_ST_fsm_state4 = "1000";
const sc_lv<9> floydWarshall::ap_ST_fsm_state5 = "10000";
const sc_lv<9> floydWarshall::ap_ST_fsm_state6 = "100000";
const sc_lv<9> floydWarshall::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> floydWarshall::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> floydWarshall::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> floydWarshall::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> floydWarshall::ap_const_lv32_1 = "1";
const sc_lv<1> floydWarshall::ap_const_lv1_0 = "0";
const sc_lv<32> floydWarshall::ap_const_lv32_2 = "10";
const sc_lv<32> floydWarshall::ap_const_lv32_4 = "100";
const sc_lv<32> floydWarshall::ap_const_lv32_5 = "101";
const sc_lv<32> floydWarshall::ap_const_lv32_6 = "110";
const sc_lv<32> floydWarshall::ap_const_lv32_7 = "111";
const sc_lv<3> floydWarshall::ap_const_lv3_0 = "000";
const sc_lv<1> floydWarshall::ap_const_lv1_1 = "1";
const sc_lv<32> floydWarshall::ap_const_lv32_3 = "11";
const sc_lv<32> floydWarshall::ap_const_lv32_8 = "1000";
const sc_lv<3> floydWarshall::ap_const_lv3_4 = "100";
const sc_lv<3> floydWarshall::ap_const_lv3_1 = "1";
const sc_lv<2> floydWarshall::ap_const_lv2_0 = "00";
const bool floydWarshall::ap_const_boolean_1 = true;

floydWarshall::floydWarshall(sc_module_name name) : sc_module(name), mVcdFile(0) {
    A_U = new floydWarshall_A("A_U");
    A_U->clk(ap_clk);
    A_U->reset(ap_rst);
    A_U->address0(A_address0);
    A_U->ce0(A_ce0);
    A_U->we0(A_we0);
    A_U->d0(A_d0);
    A_U->q0(A_q0);
    A_U->address1(A_address1);
    A_U->ce1(A_ce1);
    A_U->q1(A_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( zext_ln18_1_reg_314 );
    sensitive << ( A_addr_1_reg_355 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( A_addr_3_reg_373 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_A_address1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( A_addr_3_reg_373 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln26_4_fu_267_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_A_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_A_d0);
    sensitive << ( graph_q0 );
    sensitive << ( add_ln26_reg_379 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln26_fu_288_p2 );

    SC_METHOD(thread_add_ln18_fu_174_p2);
    sensitive << ( zext_ln17_reg_301 );
    sensitive << ( zext_ln18_fu_170_p1 );

    SC_METHOD(thread_add_ln26_1_fu_236_p2);
    sensitive << ( zext_ln26_reg_332 );
    sensitive << ( zext_ln26_1_fu_232_p1 );

    SC_METHOD(thread_add_ln26_2_fu_262_p2);
    sensitive << ( zext_ln22_reg_337 );
    sensitive << ( zext_ln26_3_fu_258_p1 );

    SC_METHOD(thread_add_ln26_3_fu_272_p2);
    sensitive << ( zext_ln26_1_reg_350 );
    sensitive << ( zext_ln26_3_fu_258_p1 );

    SC_METHOD(thread_add_ln26_fu_282_p2);
    sensitive << ( A_q0 );
    sensitive << ( A_q1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln20_fu_184_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln20_fu_184_p2 );

    SC_METHOD(thread_graph_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln18_1_fu_179_p1 );

    SC_METHOD(thread_graph_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_2_fu_218_p2);
    sensitive << ( i_1_reg_112 );

    SC_METHOD(thread_i_fu_140_p2);
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_icmp_ln16_fu_134_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_icmp_ln17_fu_158_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_icmp_ln20_fu_184_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k_0_reg_101 );

    SC_METHOD(thread_icmp_ln22_fu_212_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i_1_reg_112 );

    SC_METHOD(thread_icmp_ln24_fu_246_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( j_1_reg_123 );

    SC_METHOD(thread_icmp_ln26_fu_288_p2);
    sensitive << ( add_ln26_reg_379 );
    sensitive << ( A_q1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_j_2_fu_252_p2);
    sensitive << ( j_1_reg_123 );

    SC_METHOD(thread_j_fu_164_p2);
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_k_fu_190_p2);
    sensitive << ( k_0_reg_101 );

    SC_METHOD(thread_tmp_1_fu_200_p3);
    sensitive << ( k_0_reg_101 );

    SC_METHOD(thread_tmp_2_fu_224_p3);
    sensitive << ( i_1_reg_112 );

    SC_METHOD(thread_tmp_fu_146_p3);
    sensitive << ( i_0_reg_79 );

    SC_METHOD(thread_zext_ln17_fu_154_p1);
    sensitive << ( tmp_fu_146_p3 );

    SC_METHOD(thread_zext_ln18_1_fu_179_p1);
    sensitive << ( add_ln18_fu_174_p2 );

    SC_METHOD(thread_zext_ln18_fu_170_p1);
    sensitive << ( j_0_reg_90 );

    SC_METHOD(thread_zext_ln22_fu_208_p1);
    sensitive << ( tmp_1_fu_200_p3 );

    SC_METHOD(thread_zext_ln26_1_fu_232_p1);
    sensitive << ( tmp_2_fu_224_p3 );

    SC_METHOD(thread_zext_ln26_2_fu_241_p1);
    sensitive << ( add_ln26_1_fu_236_p2 );

    SC_METHOD(thread_zext_ln26_3_fu_258_p1);
    sensitive << ( j_1_reg_123 );

    SC_METHOD(thread_zext_ln26_4_fu_267_p1);
    sensitive << ( add_ln26_2_fu_262_p2 );

    SC_METHOD(thread_zext_ln26_5_fu_277_p1);
    sensitive << ( add_ln26_3_fu_272_p2 );

    SC_METHOD(thread_zext_ln26_fu_196_p1);
    sensitive << ( k_0_reg_101 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln16_fu_134_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln17_fu_158_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln20_fu_184_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln22_fu_212_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln24_fu_246_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "floydWarshall_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, graph_address0, "(port)graph_address0");
    sc_trace(mVcdFile, graph_ce0, "(port)graph_ce0");
    sc_trace(mVcdFile, graph_q0, "(port)graph_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_140_p2, "i_fu_140_p2");
    sc_trace(mVcdFile, i_reg_296, "i_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln17_fu_154_p1, "zext_ln17_fu_154_p1");
    sc_trace(mVcdFile, zext_ln17_reg_301, "zext_ln17_reg_301");
    sc_trace(mVcdFile, icmp_ln16_fu_134_p2, "icmp_ln16_fu_134_p2");
    sc_trace(mVcdFile, j_fu_164_p2, "j_fu_164_p2");
    sc_trace(mVcdFile, j_reg_309, "j_reg_309");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln18_1_fu_179_p1, "zext_ln18_1_fu_179_p1");
    sc_trace(mVcdFile, zext_ln18_1_reg_314, "zext_ln18_1_reg_314");
    sc_trace(mVcdFile, icmp_ln17_fu_158_p2, "icmp_ln17_fu_158_p2");
    sc_trace(mVcdFile, k_fu_190_p2, "k_fu_190_p2");
    sc_trace(mVcdFile, k_reg_327, "k_reg_327");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln26_fu_196_p1, "zext_ln26_fu_196_p1");
    sc_trace(mVcdFile, zext_ln26_reg_332, "zext_ln26_reg_332");
    sc_trace(mVcdFile, icmp_ln20_fu_184_p2, "icmp_ln20_fu_184_p2");
    sc_trace(mVcdFile, zext_ln22_fu_208_p1, "zext_ln22_fu_208_p1");
    sc_trace(mVcdFile, zext_ln22_reg_337, "zext_ln22_reg_337");
    sc_trace(mVcdFile, i_2_fu_218_p2, "i_2_fu_218_p2");
    sc_trace(mVcdFile, i_2_reg_345, "i_2_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln26_1_fu_232_p1, "zext_ln26_1_fu_232_p1");
    sc_trace(mVcdFile, zext_ln26_1_reg_350, "zext_ln26_1_reg_350");
    sc_trace(mVcdFile, icmp_ln22_fu_212_p2, "icmp_ln22_fu_212_p2");
    sc_trace(mVcdFile, A_addr_1_reg_355, "A_addr_1_reg_355");
    sc_trace(mVcdFile, j_2_fu_252_p2, "j_2_fu_252_p2");
    sc_trace(mVcdFile, j_2_reg_363, "j_2_reg_363");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln24_fu_246_p2, "icmp_ln24_fu_246_p2");
    sc_trace(mVcdFile, A_addr_3_reg_373, "A_addr_3_reg_373");
    sc_trace(mVcdFile, add_ln26_fu_282_p2, "add_ln26_fu_282_p2");
    sc_trace(mVcdFile, add_ln26_reg_379, "add_ln26_reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, A_address0, "A_address0");
    sc_trace(mVcdFile, A_ce0, "A_ce0");
    sc_trace(mVcdFile, A_we0, "A_we0");
    sc_trace(mVcdFile, A_d0, "A_d0");
    sc_trace(mVcdFile, A_q0, "A_q0");
    sc_trace(mVcdFile, A_address1, "A_address1");
    sc_trace(mVcdFile, A_ce1, "A_ce1");
    sc_trace(mVcdFile, A_q1, "A_q1");
    sc_trace(mVcdFile, i_0_reg_79, "i_0_reg_79");
    sc_trace(mVcdFile, j_0_reg_90, "j_0_reg_90");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, k_0_reg_101, "k_0_reg_101");
    sc_trace(mVcdFile, i_1_reg_112, "i_1_reg_112");
    sc_trace(mVcdFile, j_1_reg_123, "j_1_reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, zext_ln26_2_fu_241_p1, "zext_ln26_2_fu_241_p1");
    sc_trace(mVcdFile, zext_ln26_4_fu_267_p1, "zext_ln26_4_fu_267_p1");
    sc_trace(mVcdFile, zext_ln26_5_fu_277_p1, "zext_ln26_5_fu_277_p1");
    sc_trace(mVcdFile, icmp_ln26_fu_288_p2, "icmp_ln26_fu_288_p2");
    sc_trace(mVcdFile, tmp_fu_146_p3, "tmp_fu_146_p3");
    sc_trace(mVcdFile, zext_ln18_fu_170_p1, "zext_ln18_fu_170_p1");
    sc_trace(mVcdFile, add_ln18_fu_174_p2, "add_ln18_fu_174_p2");
    sc_trace(mVcdFile, tmp_1_fu_200_p3, "tmp_1_fu_200_p3");
    sc_trace(mVcdFile, tmp_2_fu_224_p3, "tmp_2_fu_224_p3");
    sc_trace(mVcdFile, add_ln26_1_fu_236_p2, "add_ln26_1_fu_236_p2");
    sc_trace(mVcdFile, zext_ln26_3_fu_258_p1, "zext_ln26_3_fu_258_p1");
    sc_trace(mVcdFile, add_ln26_2_fu_262_p2, "add_ln26_2_fu_262_p2");
    sc_trace(mVcdFile, add_ln26_3_fu_272_p2, "add_ln26_3_fu_272_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("floydWarshall.hdltvin.dat");
    mHdltvoutHandle.open("floydWarshall.hdltvout.dat");
}

floydWarshall::~floydWarshall() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete A_U;
}

void floydWarshall::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_158_p2.read(), ap_const_lv1_1))) {
        i_0_reg_79 = i_reg_296.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_79 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln24_fu_246_p2.read(), ap_const_lv1_1))) {
        i_1_reg_112 = i_2_reg_345.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_184_p2.read()))) {
        i_1_reg_112 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_134_p2.read(), ap_const_lv1_0))) {
        j_0_reg_90 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_90 = j_reg_309.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_212_p2.read()))) {
        j_1_reg_123 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_1_reg_123 = j_2_reg_363.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_134_p2.read(), ap_const_lv1_1))) {
        k_0_reg_101 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(icmp_ln22_fu_212_p2.read(), ap_const_lv1_1))) {
        k_0_reg_101 = k_reg_327.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln22_fu_212_p2.read()))) {
        A_addr_1_reg_355 =  (sc_lv<4>) (zext_ln26_2_fu_241_p1.read());
        zext_ln26_1_reg_350 = zext_ln26_1_fu_232_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln24_fu_246_p2.read()))) {
        A_addr_3_reg_373 =  (sc_lv<4>) (zext_ln26_5_fu_277_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        add_ln26_reg_379 = add_ln26_fu_282_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_2_reg_345 = i_2_fu_218_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_296 = i_fu_140_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_2_reg_363 = j_2_fu_252_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_309 = j_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_327 = k_fu_190_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_134_p2.read(), ap_const_lv1_0))) {
        zext_ln17_reg_301 = zext_ln17_fu_154_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_158_p2.read()))) {
        zext_ln18_1_reg_314 = zext_ln18_1_fu_179_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_184_p2.read()))) {
        zext_ln22_reg_337 = zext_ln22_fu_208_p1.read();
        zext_ln26_reg_332 = zext_ln26_fu_196_p1.read();
    }
}

void floydWarshall::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        A_address0 = A_addr_3_reg_373.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        A_address0 = A_addr_1_reg_355.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_address0 =  (sc_lv<4>) (zext_ln18_1_reg_314.read());
    } else {
        A_address0 = "XXXX";
    }
}

void floydWarshall::thread_A_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        A_address1 = A_addr_3_reg_373.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        A_address1 =  (sc_lv<4>) (zext_ln26_4_fu_267_p1.read());
    } else {
        A_address1 = "XXXX";
    }
}

void floydWarshall::thread_A_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void floydWarshall::thread_A_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        A_ce1 = ap_const_logic_1;
    } else {
        A_ce1 = ap_const_logic_0;
    }
}

void floydWarshall::thread_A_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        A_d0 = add_ln26_reg_379.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_d0 = graph_q0.read();
    } else {
        A_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void floydWarshall::thread_A_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_288_p2.read())))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void floydWarshall::thread_add_ln18_fu_174_p2() {
    add_ln18_fu_174_p2 = (!zext_ln17_reg_301.read().is_01() || !zext_ln18_fu_170_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln17_reg_301.read()) + sc_biguint<6>(zext_ln18_fu_170_p1.read()));
}

void floydWarshall::thread_add_ln26_1_fu_236_p2() {
    add_ln26_1_fu_236_p2 = (!zext_ln26_reg_332.read().is_01() || !zext_ln26_1_fu_232_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln26_reg_332.read()) + sc_biguint<6>(zext_ln26_1_fu_232_p1.read()));
}

void floydWarshall::thread_add_ln26_2_fu_262_p2() {
    add_ln26_2_fu_262_p2 = (!zext_ln22_reg_337.read().is_01() || !zext_ln26_3_fu_258_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln22_reg_337.read()) + sc_biguint<6>(zext_ln26_3_fu_258_p1.read()));
}

void floydWarshall::thread_add_ln26_3_fu_272_p2() {
    add_ln26_3_fu_272_p2 = (!zext_ln26_1_reg_350.read().is_01() || !zext_ln26_3_fu_258_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln26_1_reg_350.read()) + sc_biguint<6>(zext_ln26_3_fu_258_p1.read()));
}

void floydWarshall::thread_add_ln26_fu_282_p2() {
    add_ln26_fu_282_p2 = (!A_q1.read().is_01() || !A_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(A_q1.read()) + sc_biguint<32>(A_q0.read()));
}

void floydWarshall::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void floydWarshall::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void floydWarshall::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void floydWarshall::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void floydWarshall::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void floydWarshall::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void floydWarshall::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void floydWarshall::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void floydWarshall::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void floydWarshall::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_184_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void floydWarshall::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void floydWarshall::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_184_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void floydWarshall::thread_graph_address0() {
    graph_address0 =  (sc_lv<4>) (zext_ln18_1_fu_179_p1.read());
}

void floydWarshall::thread_graph_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        graph_ce0 = ap_const_logic_1;
    } else {
        graph_ce0 = ap_const_logic_0;
    }
}

void floydWarshall::thread_i_2_fu_218_p2() {
    i_2_fu_218_p2 = (!i_1_reg_112.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_112.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void floydWarshall::thread_i_fu_140_p2() {
    i_fu_140_p2 = (!i_0_reg_79.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_79.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void floydWarshall::thread_icmp_ln16_fu_134_p2() {
    icmp_ln16_fu_134_p2 = (!i_0_reg_79.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_79.read() == ap_const_lv3_4);
}

void floydWarshall::thread_icmp_ln17_fu_158_p2() {
    icmp_ln17_fu_158_p2 = (!j_0_reg_90.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_90.read() == ap_const_lv3_4);
}

void floydWarshall::thread_icmp_ln20_fu_184_p2() {
    icmp_ln20_fu_184_p2 = (!k_0_reg_101.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_101.read() == ap_const_lv3_4);
}

void floydWarshall::thread_icmp_ln22_fu_212_p2() {
    icmp_ln22_fu_212_p2 = (!i_1_reg_112.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_112.read() == ap_const_lv3_4);
}

void floydWarshall::thread_icmp_ln24_fu_246_p2() {
    icmp_ln24_fu_246_p2 = (!j_1_reg_123.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_1_reg_123.read() == ap_const_lv3_4);
}

void floydWarshall::thread_icmp_ln26_fu_288_p2() {
    icmp_ln26_fu_288_p2 = (!add_ln26_reg_379.read().is_01() || !A_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(add_ln26_reg_379.read()) < sc_bigint<32>(A_q1.read()));
}

void floydWarshall::thread_j_2_fu_252_p2() {
    j_2_fu_252_p2 = (!j_1_reg_123.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_1_reg_123.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void floydWarshall::thread_j_fu_164_p2() {
    j_fu_164_p2 = (!j_0_reg_90.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_90.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void floydWarshall::thread_k_fu_190_p2() {
    k_fu_190_p2 = (!k_0_reg_101.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_101.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void floydWarshall::thread_tmp_1_fu_200_p3() {
    tmp_1_fu_200_p3 = esl_concat<3,2>(k_0_reg_101.read(), ap_const_lv2_0);
}

void floydWarshall::thread_tmp_2_fu_224_p3() {
    tmp_2_fu_224_p3 = esl_concat<3,2>(i_1_reg_112.read(), ap_const_lv2_0);
}

void floydWarshall::thread_tmp_fu_146_p3() {
    tmp_fu_146_p3 = esl_concat<3,2>(i_0_reg_79.read(), ap_const_lv2_0);
}

void floydWarshall::thread_zext_ln17_fu_154_p1() {
    zext_ln17_fu_154_p1 = esl_zext<6,5>(tmp_fu_146_p3.read());
}

void floydWarshall::thread_zext_ln18_1_fu_179_p1() {
    zext_ln18_1_fu_179_p1 = esl_zext<64,6>(add_ln18_fu_174_p2.read());
}

void floydWarshall::thread_zext_ln18_fu_170_p1() {
    zext_ln18_fu_170_p1 = esl_zext<6,3>(j_0_reg_90.read());
}

void floydWarshall::thread_zext_ln22_fu_208_p1() {
    zext_ln22_fu_208_p1 = esl_zext<6,5>(tmp_1_fu_200_p3.read());
}

void floydWarshall::thread_zext_ln26_1_fu_232_p1() {
    zext_ln26_1_fu_232_p1 = esl_zext<6,5>(tmp_2_fu_224_p3.read());
}

void floydWarshall::thread_zext_ln26_2_fu_241_p1() {
    zext_ln26_2_fu_241_p1 = esl_zext<64,6>(add_ln26_1_fu_236_p2.read());
}

void floydWarshall::thread_zext_ln26_3_fu_258_p1() {
    zext_ln26_3_fu_258_p1 = esl_zext<6,3>(j_1_reg_123.read());
}

void floydWarshall::thread_zext_ln26_4_fu_267_p1() {
    zext_ln26_4_fu_267_p1 = esl_zext<64,6>(add_ln26_2_fu_262_p2.read());
}

void floydWarshall::thread_zext_ln26_5_fu_277_p1() {
    zext_ln26_5_fu_277_p1 = esl_zext<64,6>(add_ln26_3_fu_272_p2.read());
}

void floydWarshall::thread_zext_ln26_fu_196_p1() {
    zext_ln26_fu_196_p1 = esl_zext<6,3>(k_0_reg_101.read());
}

void floydWarshall::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_134_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_158_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_184_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_212_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln24_fu_246_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void floydWarshall::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"graph_address0\" :  \"" << graph_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"graph_ce0\" :  \"" << graph_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"graph_q0\" :  \"" << graph_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

