-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity floydWarshall is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    graph_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    graph_ce0 : OUT STD_LOGIC;
    graph_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of floydWarshall is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "floydWarshall,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.210000,HLS_SYN_LAT=274,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=161,HLS_SYN_LUT=373,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_140_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_296 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln17_fu_154_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln17_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln16_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_164_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln18_1_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln17_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_327 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln26_fu_196_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln20_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln22_fu_208_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_fu_218_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_345 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln26_1_fu_232_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_1_reg_350 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_1_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_3_reg_373 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_ce1 : STD_LOGIC;
    signal A_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_0_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln26_2_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln26_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_146_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_170_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_200_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_224_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_3_fu_258_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_272_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component floydWarshall_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_U : component floydWarshall_A
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => A_d0,
        q0 => A_q0,
        address1 => A_address1,
        ce1 => A_ce1,
        q1 => A_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_79 <= i_reg_296;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_reg_112 <= i_2_reg_345;
            elsif (((icmp_ln20_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_112 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_90 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_90 <= j_reg_309;
            end if; 
        end if;
    end process;

    j_1_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_123 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_123 <= j_2_reg_363;
            end if; 
        end if;
    end process;

    k_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_101 <= ap_const_lv3_0;
            elsif (((icmp_ln22_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_0_reg_101 <= k_reg_327;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                A_addr_1_reg_355 <= zext_ln26_2_fu_241_p1(4 - 1 downto 0);
                    zext_ln26_1_reg_350(4 downto 2) <= zext_ln26_1_fu_232_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                A_addr_3_reg_373 <= zext_ln26_5_fu_277_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln26_reg_379 <= add_ln26_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_345 <= i_2_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_296 <= i_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_363 <= j_2_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_309 <= j_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_reg_327 <= k_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln17_reg_301(4 downto 2) <= zext_ln17_fu_154_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln18_1_reg_314(5 downto 0) <= zext_ln18_1_fu_179_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln22_reg_337(4 downto 2) <= zext_ln22_fu_208_p1(4 downto 2);
                    zext_ln26_reg_332(2 downto 0) <= zext_ln26_fu_196_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln17_reg_301(1 downto 0) <= "00";
    zext_ln17_reg_301(5) <= '0';
    zext_ln18_1_reg_314(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_332(5 downto 3) <= "000";
    zext_ln22_reg_337(1 downto 0) <= "00";
    zext_ln22_reg_337(5) <= '0';
    zext_ln26_1_reg_350(1 downto 0) <= "00";
    zext_ln26_1_reg_350(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_134_p2, ap_CS_fsm_state3, icmp_ln17_fu_158_p2, ap_CS_fsm_state5, icmp_ln20_fu_184_p2, ap_CS_fsm_state6, icmp_ln22_fu_212_p2, ap_CS_fsm_state7, icmp_ln24_fu_246_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln20_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln22_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln24_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(zext_ln18_1_reg_314, A_addr_1_reg_355, ap_CS_fsm_state7, A_addr_3_reg_373, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= A_addr_3_reg_373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= A_addr_1_reg_355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= zext_ln18_1_reg_314(4 - 1 downto 0);
        else 
            A_address0 <= "XXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state7, A_addr_3_reg_373, ap_CS_fsm_state8, zext_ln26_4_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address1 <= A_addr_3_reg_373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= zext_ln26_4_fu_267_p1(4 - 1 downto 0);
        else 
            A_address1 <= "XXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_d0_assign_proc : process(graph_q0, add_ln26_reg_379, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_d0 <= add_ln26_reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_d0 <= graph_q0;
        else 
            A_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, icmp_ln26_fu_288_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln26_fu_288_p2 = ap_const_lv1_1)))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln18_fu_174_p2 <= std_logic_vector(unsigned(zext_ln17_reg_301) + unsigned(zext_ln18_fu_170_p1));
    add_ln26_1_fu_236_p2 <= std_logic_vector(unsigned(zext_ln26_reg_332) + unsigned(zext_ln26_1_fu_232_p1));
    add_ln26_2_fu_262_p2 <= std_logic_vector(unsigned(zext_ln22_reg_337) + unsigned(zext_ln26_3_fu_258_p1));
    add_ln26_3_fu_272_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_350) + unsigned(zext_ln26_3_fu_258_p1));
    add_ln26_fu_282_p2 <= std_logic_vector(unsigned(A_q1) + unsigned(A_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_184_p2)
    begin
        if (((icmp_ln20_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_184_p2)
    begin
        if (((icmp_ln20_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    graph_address0 <= zext_ln18_1_fu_179_p1(4 - 1 downto 0);

    graph_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            graph_ce0 <= ap_const_logic_1;
        else 
            graph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_218_p2 <= std_logic_vector(unsigned(i_1_reg_112) + unsigned(ap_const_lv3_1));
    i_fu_140_p2 <= std_logic_vector(unsigned(i_0_reg_79) + unsigned(ap_const_lv3_1));
    icmp_ln16_fu_134_p2 <= "1" when (i_0_reg_79 = ap_const_lv3_4) else "0";
    icmp_ln17_fu_158_p2 <= "1" when (j_0_reg_90 = ap_const_lv3_4) else "0";
    icmp_ln20_fu_184_p2 <= "1" when (k_0_reg_101 = ap_const_lv3_4) else "0";
    icmp_ln22_fu_212_p2 <= "1" when (i_1_reg_112 = ap_const_lv3_4) else "0";
    icmp_ln24_fu_246_p2 <= "1" when (j_1_reg_123 = ap_const_lv3_4) else "0";
    icmp_ln26_fu_288_p2 <= "1" when (signed(add_ln26_reg_379) < signed(A_q1)) else "0";
    j_2_fu_252_p2 <= std_logic_vector(unsigned(j_1_reg_123) + unsigned(ap_const_lv3_1));
    j_fu_164_p2 <= std_logic_vector(unsigned(j_0_reg_90) + unsigned(ap_const_lv3_1));
    k_fu_190_p2 <= std_logic_vector(unsigned(k_0_reg_101) + unsigned(ap_const_lv3_1));
    tmp_1_fu_200_p3 <= (k_0_reg_101 & ap_const_lv2_0);
    tmp_2_fu_224_p3 <= (i_1_reg_112 & ap_const_lv2_0);
    tmp_fu_146_p3 <= (i_0_reg_79 & ap_const_lv2_0);
    zext_ln17_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_146_p3),6));
    zext_ln18_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_174_p2),64));
    zext_ln18_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_90),6));
    zext_ln22_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_200_p3),6));
    zext_ln26_1_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_224_p3),6));
    zext_ln26_2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_236_p2),64));
    zext_ln26_3_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_123),6));
    zext_ln26_4_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_262_p2),64));
    zext_ln26_5_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_272_p2),64));
    zext_ln26_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_101),6));
end behav;
