// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="floydWarshall,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.210000,HLS_SYN_LAT=274,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=161,HLS_SYN_LUT=373,HLS_VERSION=2019_1}" *)

module floydWarshall (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        graph_address0,
        graph_ce0,
        graph_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] graph_address0;
output   graph_ce0;
input  [31:0] graph_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg graph_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_140_p2;
reg   [2:0] i_reg_296;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln17_fu_154_p1;
reg   [5:0] zext_ln17_reg_301;
wire   [0:0] icmp_ln16_fu_134_p2;
wire   [2:0] j_fu_164_p2;
reg   [2:0] j_reg_309;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln18_1_fu_179_p1;
reg   [63:0] zext_ln18_1_reg_314;
wire   [0:0] icmp_ln17_fu_158_p2;
wire   [2:0] k_fu_190_p2;
reg   [2:0] k_reg_327;
wire    ap_CS_fsm_state5;
wire   [5:0] zext_ln26_fu_196_p1;
reg   [5:0] zext_ln26_reg_332;
wire   [0:0] icmp_ln20_fu_184_p2;
wire   [5:0] zext_ln22_fu_208_p1;
reg   [5:0] zext_ln22_reg_337;
wire   [2:0] i_2_fu_218_p2;
reg   [2:0] i_2_reg_345;
wire    ap_CS_fsm_state6;
wire   [5:0] zext_ln26_1_fu_232_p1;
reg   [5:0] zext_ln26_1_reg_350;
wire   [0:0] icmp_ln22_fu_212_p2;
reg   [3:0] A_addr_1_reg_355;
wire   [2:0] j_2_fu_252_p2;
reg   [2:0] j_2_reg_363;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln24_fu_246_p2;
reg   [3:0] A_addr_3_reg_373;
wire   [31:0] add_ln26_fu_282_p2;
reg   [31:0] add_ln26_reg_379;
wire    ap_CS_fsm_state8;
reg   [3:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [31:0] A_d0;
wire   [31:0] A_q0;
reg   [3:0] A_address1;
reg    A_ce1;
wire   [31:0] A_q1;
reg   [2:0] i_0_reg_79;
reg   [2:0] j_0_reg_90;
wire    ap_CS_fsm_state4;
reg   [2:0] k_0_reg_101;
reg   [2:0] i_1_reg_112;
reg   [2:0] j_1_reg_123;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln26_2_fu_241_p1;
wire   [63:0] zext_ln26_4_fu_267_p1;
wire   [63:0] zext_ln26_5_fu_277_p1;
wire   [0:0] icmp_ln26_fu_288_p2;
wire   [4:0] tmp_fu_146_p3;
wire   [5:0] zext_ln18_fu_170_p1;
wire   [5:0] add_ln18_fu_174_p2;
wire   [4:0] tmp_1_fu_200_p3;
wire   [4:0] tmp_2_fu_224_p3;
wire   [5:0] add_ln26_1_fu_236_p2;
wire   [5:0] zext_ln26_3_fu_258_p1;
wire   [5:0] add_ln26_2_fu_262_p2;
wire   [5:0] add_ln26_3_fu_272_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

floydWarshall_A #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(A_address1),
    .ce1(A_ce1),
    .q1(A_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_79 <= i_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_112 <= i_2_reg_345;
    end else if (((icmp_ln20_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_90 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_90 <= j_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_1_reg_123 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_123 <= j_2_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_101 <= 3'd0;
    end else if (((icmp_ln22_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_0_reg_101 <= k_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        A_addr_1_reg_355 <= zext_ln26_2_fu_241_p1;
        zext_ln26_1_reg_350[4 : 2] <= zext_ln26_1_fu_232_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        A_addr_3_reg_373 <= zext_ln26_5_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln26_reg_379 <= add_ln26_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_345 <= i_2_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_296 <= i_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_363 <= j_2_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_309 <= j_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_327 <= k_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln17_reg_301[4 : 2] <= zext_ln17_fu_154_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln18_1_reg_314[5 : 0] <= zext_ln18_1_fu_179_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln22_reg_337[4 : 2] <= zext_ln22_fu_208_p1[4 : 2];
        zext_ln26_reg_332[2 : 0] <= zext_ln26_fu_196_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = A_addr_3_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = A_addr_1_reg_355;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln18_1_reg_314;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = A_addr_3_reg_373;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address1 = zext_ln26_4_fu_267_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        A_d0 = add_ln26_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_d0 = graph_q0;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln26_fu_288_p2 == 1'd1)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        graph_ce0 = 1'b1;
    end else begin
        graph_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln22_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln24_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_174_p2 = (zext_ln17_reg_301 + zext_ln18_fu_170_p1);

assign add_ln26_1_fu_236_p2 = (zext_ln26_reg_332 + zext_ln26_1_fu_232_p1);

assign add_ln26_2_fu_262_p2 = (zext_ln22_reg_337 + zext_ln26_3_fu_258_p1);

assign add_ln26_3_fu_272_p2 = (zext_ln26_1_reg_350 + zext_ln26_3_fu_258_p1);

assign add_ln26_fu_282_p2 = (A_q1 + A_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign graph_address0 = zext_ln18_1_fu_179_p1;

assign i_2_fu_218_p2 = (i_1_reg_112 + 3'd1);

assign i_fu_140_p2 = (i_0_reg_79 + 3'd1);

assign icmp_ln16_fu_134_p2 = ((i_0_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_158_p2 = ((j_0_reg_90 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_184_p2 = ((k_0_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_212_p2 = ((i_1_reg_112 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_246_p2 = ((j_1_reg_123 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_288_p2 = (($signed(add_ln26_reg_379) < $signed(A_q1)) ? 1'b1 : 1'b0);

assign j_2_fu_252_p2 = (j_1_reg_123 + 3'd1);

assign j_fu_164_p2 = (j_0_reg_90 + 3'd1);

assign k_fu_190_p2 = (k_0_reg_101 + 3'd1);

assign tmp_1_fu_200_p3 = {{k_0_reg_101}, {2'd0}};

assign tmp_2_fu_224_p3 = {{i_1_reg_112}, {2'd0}};

assign tmp_fu_146_p3 = {{i_0_reg_79}, {2'd0}};

assign zext_ln17_fu_154_p1 = tmp_fu_146_p3;

assign zext_ln18_1_fu_179_p1 = add_ln18_fu_174_p2;

assign zext_ln18_fu_170_p1 = j_0_reg_90;

assign zext_ln22_fu_208_p1 = tmp_1_fu_200_p3;

assign zext_ln26_1_fu_232_p1 = tmp_2_fu_224_p3;

assign zext_ln26_2_fu_241_p1 = add_ln26_1_fu_236_p2;

assign zext_ln26_3_fu_258_p1 = j_1_reg_123;

assign zext_ln26_4_fu_267_p1 = add_ln26_2_fu_262_p2;

assign zext_ln26_5_fu_277_p1 = add_ln26_3_fu_272_p2;

assign zext_ln26_fu_196_p1 = k_0_reg_101;

always @ (posedge ap_clk) begin
    zext_ln17_reg_301[1:0] <= 2'b00;
    zext_ln17_reg_301[5] <= 1'b0;
    zext_ln18_1_reg_314[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_332[5:3] <= 3'b000;
    zext_ln22_reg_337[1:0] <= 2'b00;
    zext_ln22_reg_337[5] <= 1'b0;
    zext_ln26_1_reg_350[1:0] <= 2'b00;
    zext_ln26_1_reg_350[5] <= 1'b0;
end

endmodule //floydWarshall
