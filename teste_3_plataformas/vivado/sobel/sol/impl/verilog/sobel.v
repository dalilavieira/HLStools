// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=317129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=2150,HLS_SYN_LUT=4146,HLS_VERSION=2019_1}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image1_address0,
        image1_ce0,
        image1_q0,
        image1_address1,
        image1_ce1,
        image1_q1,
        image2_address0,
        image2_ce0,
        image2_we0,
        image2_d0
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] image1_address0;
output   image1_ce0;
input  [31:0] image1_q0;
output  [13:0] image1_address1;
output   image1_ce1;
input  [31:0] image1_q1;
output  [13:0] image2_address0;
output   image2_ce0;
output   image2_we0;
output  [31:0] image2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] image1_address0;
reg image1_ce0;
reg[13:0] image1_address1;
reg image1_ce1;
reg image2_ce0;
reg image2_we0;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_179;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [13:0] mul_ln11_2_fu_200_p2;
reg   [13:0] mul_ln11_2_reg_586;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_184_p2;
wire   [13:0] mul_ln11_3_fu_210_p2;
reg   [13:0] mul_ln11_3_reg_593;
wire   [6:0] j_fu_216_p2;
reg   [6:0] j_reg_600;
wire   [13:0] mul_ln11_4_fu_226_p2;
reg   [13:0] mul_ln11_4_reg_605;
wire   [13:0] zext_ln11_3_fu_244_p1;
reg   [13:0] zext_ln11_3_reg_615;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln9_fu_232_p2;
reg   [31:0] image1_load_1_reg_635;
wire   [6:0] i_fu_277_p2;
reg   [6:0] i_reg_640;
wire   [13:0] zext_ln11_7_fu_283_p1;
reg   [13:0] zext_ln11_7_reg_645;
wire   [31:0] sub_ln11_fu_332_p2;
reg   [31:0] sub_ln11_reg_666;
wire   [13:0] add_ln11_15_fu_342_p2;
reg   [13:0] add_ln11_15_reg_671;
wire   [13:0] add_ln11_16_fu_347_p2;
reg   [13:0] add_ln11_16_reg_676;
wire   [13:0] add_ln11_17_fu_352_p2;
reg   [13:0] add_ln11_17_reg_681;
wire   [31:0] sub_ln11_3_fu_357_p2;
reg   [31:0] sub_ln11_3_reg_686;
wire  signed [31:0] sub_ln11_2_fu_374_p2;
reg  signed [31:0] sub_ln11_2_reg_691;
wire    ap_CS_fsm_state6;
wire   [31:0] sub_ln11_4_fu_393_p2;
reg   [31:0] sub_ln11_4_reg_707;
wire  signed [31:0] sub_ln11_5_fu_416_p2;
reg  signed [31:0] sub_ln11_5_reg_712;
wire    ap_CS_fsm_state7;
wire   [31:0] add_ln11_8_fu_430_p2;
reg   [31:0] add_ln11_8_reg_718;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_171_p1;
reg   [63:0] tmp_reg_723;
wire    ap_CS_fsm_state12;
wire   [63:0] grp_fu_174_p2;
reg   [63:0] x_assign_reg_728;
wire    ap_CS_fsm_state33;
wire   [31:0] p_Val2_6_fu_571_p3;
reg   [31:0] p_Val2_6_reg_733;
wire    ap_CS_fsm_state34;
reg   [6:0] j_0_reg_148;
reg   [6:0] i_0_reg_159;
wire    ap_CS_fsm_state35;
wire   [63:0] zext_ln11_4_fu_253_p1;
wire   [63:0] zext_ln11_5_fu_263_p1;
wire   [63:0] zext_ln11_6_fu_272_p1;
wire   [63:0] zext_ln11_8_fu_292_p1;
wire   [63:0] zext_ln11_9_fu_306_p1;
wire   [63:0] zext_ln11_10_fu_315_p1;
wire   [63:0] zext_ln11_12_fu_380_p1;
wire   [63:0] zext_ln11_13_fu_384_p1;
wire   [63:0] zext_ln11_14_fu_579_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [6:0] add_ln11_fu_190_p2;
wire   [6:0] mul_ln11_2_fu_200_p0;
wire   [6:0] mul_ln11_3_fu_210_p0;
wire   [6:0] mul_ln11_4_fu_226_p0;
wire   [6:0] add_ln11_2_fu_238_p2;
wire   [13:0] add_ln11_3_fu_248_p2;
wire   [13:0] add_ln11_9_fu_258_p2;
wire   [13:0] add_ln11_10_fu_268_p2;
wire   [13:0] add_ln11_12_fu_287_p2;
wire   [13:0] add_ln11_13_fu_302_p2;
wire   [13:0] add_ln11_14_fu_311_p2;
wire   [31:0] shl_ln11_fu_297_p2;
wire   [31:0] add_ln11_4_fu_320_p2;
wire   [31:0] add_ln11_5_fu_326_p2;
wire   [13:0] zext_ln11_11_fu_338_p1;
wire   [31:0] shl_ln11_1_fu_363_p2;
wire   [31:0] sub_ln11_1_fu_369_p2;
wire   [31:0] add_ln11_6_fu_388_p2;
wire   [31:0] shl_ln11_2_fu_399_p2;
wire   [31:0] add_ln11_7_fu_411_p2;
wire   [31:0] shl_ln11_3_fu_405_p2;
wire   [31:0] mul_ln11_1_fu_426_p2;
wire   [31:0] mul_ln11_fu_422_p2;
wire   [63:0] p_Val2_s_fu_436_p1;
wire   [51:0] tmp_V_1_fu_457_p1;
wire   [53:0] mantissa_V_fu_461_p4;
wire   [10:0] tmp_V_fu_447_p4;
wire   [11:0] zext_ln502_fu_475_p1;
wire   [11:0] add_ln502_fu_479_p2;
wire   [10:0] sub_ln1311_fu_493_p2;
wire   [0:0] isNeg_fu_485_p3;
wire  signed [11:0] sext_ln1311_fu_499_p1;
wire   [11:0] ush_fu_503_p3;
wire  signed [31:0] sext_ln1311_1_fu_511_p1;
wire   [53:0] zext_ln1285_fu_519_p1;
wire   [136:0] zext_ln682_fu_471_p1;
wire   [136:0] zext_ln1287_fu_515_p1;
wire   [53:0] r_V_fu_523_p2;
wire   [0:0] tmp_3_fu_535_p3;
wire   [136:0] r_V_1_fu_529_p2;
wire   [31:0] zext_ln662_fu_543_p1;
wire   [31:0] tmp_6_fu_547_p4;
wire   [31:0] p_Val2_5_fu_557_p3;
wire   [0:0] p_Result_s_fu_439_p3;
wire   [31:0] result_V_1_fu_565_p2;
reg   [34:0] ap_NS_fsm;
wire   [13:0] mul_ln11_2_fu_200_p00;
wire   [13:0] mul_ln11_3_fu_210_p00;
wire   [13:0] mul_ln11_4_fu_226_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
end

sobel_sitodp_32ns_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_sitodp_32ns_64_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln11_8_reg_718),
    .ce(1'b1),
    .dout(grp_fu_171_p1)
);

sobel_dsqrt_64ns_64ns_64_21_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sobel_dsqrt_64ns_64ns_64_21_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(tmp_reg_723),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_159 <= 7'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_0_reg_159 <= i_reg_640;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_232_p2 == 1'd1))) begin
        j_0_reg_148 <= j_reg_600;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_148 <= 7'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_179 <= image1_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reg_179 <= image1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln11_15_reg_671 <= add_ln11_15_fu_342_p2;
        add_ln11_16_reg_676 <= add_ln11_16_fu_347_p2;
        add_ln11_17_reg_681 <= add_ln11_17_fu_352_p2;
        sub_ln11_3_reg_686 <= sub_ln11_3_fu_357_p2;
        sub_ln11_reg_666 <= sub_ln11_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln11_8_reg_718 <= add_ln11_8_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_640 <= i_fu_277_p2;
        image1_load_1_reg_635 <= image1_q1;
        zext_ln11_7_reg_645[6 : 0] <= zext_ln11_7_fu_283_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_600 <= j_fu_216_p2;
        mul_ln11_2_reg_586[13 : 2] <= mul_ln11_2_fu_200_p2[13 : 2];
        mul_ln11_3_reg_593[13 : 2] <= mul_ln11_3_fu_210_p2[13 : 2];
        mul_ln11_4_reg_605[13 : 2] <= mul_ln11_4_fu_226_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_Val2_6_reg_733 <= p_Val2_6_fu_571_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln11_2_reg_691 <= sub_ln11_2_fu_374_p2;
        sub_ln11_4_reg_707 <= sub_ln11_4_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_ln11_5_reg_712 <= sub_ln11_5_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_reg_723 <= grp_fu_171_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_assign_reg_728 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln11_3_reg_615[6 : 0] <= zext_ln11_3_fu_244_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        image1_address0 = zext_ln11_12_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image1_address0 = zext_ln11_9_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image1_address0 = zext_ln11_6_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image1_address0 = zext_ln11_4_fu_253_p1;
    end else begin
        image1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        image1_address1 = zext_ln11_13_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image1_address1 = zext_ln11_10_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image1_address1 = zext_ln11_8_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image1_address1 = zext_ln11_5_fu_263_p1;
    end else begin
        image1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        image1_ce0 = 1'b1;
    end else begin
        image1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        image1_ce1 = 1'b1;
    end else begin
        image1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        image2_ce0 = 1'b1;
    end else begin
        image2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        image2_we0 = 1'b1;
    end else begin
        image2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_232_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_10_fu_268_p2 = (mul_ln11_4_reg_605 + zext_ln11_3_reg_615);

assign add_ln11_12_fu_287_p2 = (mul_ln11_2_reg_586 + zext_ln11_7_fu_283_p1);

assign add_ln11_13_fu_302_p2 = (mul_ln11_3_reg_593 + zext_ln11_7_reg_645);

assign add_ln11_14_fu_311_p2 = (mul_ln11_4_reg_605 + zext_ln11_7_reg_645);

assign add_ln11_15_fu_342_p2 = (mul_ln11_2_reg_586 + zext_ln11_11_fu_338_p1);

assign add_ln11_16_fu_347_p2 = (mul_ln11_4_reg_605 + zext_ln11_11_fu_338_p1);

assign add_ln11_17_fu_352_p2 = (mul_ln11_3_reg_593 + zext_ln11_11_fu_338_p1);

assign add_ln11_2_fu_238_p2 = ($signed(7'd127) + $signed(i_0_reg_159));

assign add_ln11_3_fu_248_p2 = (mul_ln11_2_reg_586 + zext_ln11_3_fu_244_p1);

assign add_ln11_4_fu_320_p2 = (shl_ln11_fu_297_p2 + image1_q0);

assign add_ln11_5_fu_326_p2 = (reg_179 + add_ln11_4_fu_320_p2);

assign add_ln11_6_fu_388_p2 = (sub_ln11_3_reg_686 + reg_179);

assign add_ln11_7_fu_411_p2 = (sub_ln11_4_reg_707 + shl_ln11_2_fu_399_p2);

assign add_ln11_8_fu_430_p2 = (mul_ln11_1_fu_426_p2 + mul_ln11_fu_422_p2);

assign add_ln11_9_fu_258_p2 = (mul_ln11_3_reg_593 + zext_ln11_3_fu_244_p1);

assign add_ln11_fu_190_p2 = ($signed(j_0_reg_148) + $signed(7'd127));

assign add_ln502_fu_479_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_475_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_277_p2 = (7'd1 + i_0_reg_159);

assign icmp_ln8_fu_184_p2 = ((j_0_reg_148 == 7'd99) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_232_p2 = ((i_0_reg_159 == 7'd99) ? 1'b1 : 1'b0);

assign image2_address0 = zext_ln11_14_fu_579_p1;

assign image2_d0 = p_Val2_6_reg_733;

assign isNeg_fu_485_p3 = add_ln502_fu_479_p2[32'd11];

assign j_fu_216_p2 = (j_0_reg_148 + 7'd1);

assign mantissa_V_fu_461_p4 = {{{{1'd1}, {tmp_V_1_fu_457_p1}}}, {1'd0}};

assign mul_ln11_1_fu_426_p2 = ($signed(sub_ln11_5_reg_712) * $signed(sub_ln11_5_reg_712));

assign mul_ln11_2_fu_200_p0 = mul_ln11_2_fu_200_p00;

assign mul_ln11_2_fu_200_p00 = add_ln11_fu_190_p2;

assign mul_ln11_2_fu_200_p2 = (mul_ln11_2_fu_200_p0 * $signed('h64));

assign mul_ln11_3_fu_210_p0 = mul_ln11_3_fu_210_p00;

assign mul_ln11_3_fu_210_p00 = j_0_reg_148;

assign mul_ln11_3_fu_210_p2 = (mul_ln11_3_fu_210_p0 * $signed('h64));

assign mul_ln11_4_fu_226_p0 = mul_ln11_4_fu_226_p00;

assign mul_ln11_4_fu_226_p00 = j_fu_216_p2;

assign mul_ln11_4_fu_226_p2 = (mul_ln11_4_fu_226_p0 * $signed('h64));

assign mul_ln11_fu_422_p2 = ($signed(sub_ln11_2_reg_691) * $signed(sub_ln11_2_reg_691));

assign p_Result_s_fu_439_p3 = p_Val2_s_fu_436_p1[32'd63];

assign p_Val2_5_fu_557_p3 = ((isNeg_fu_485_p3[0:0] === 1'b1) ? zext_ln662_fu_543_p1 : tmp_6_fu_547_p4);

assign p_Val2_6_fu_571_p3 = ((p_Result_s_fu_439_p3[0:0] === 1'b1) ? result_V_1_fu_565_p2 : p_Val2_5_fu_557_p3);

assign p_Val2_s_fu_436_p1 = x_assign_reg_728;

assign r_V_1_fu_529_p2 = zext_ln682_fu_471_p1 << zext_ln1287_fu_515_p1;

assign r_V_fu_523_p2 = mantissa_V_fu_461_p4 >> zext_ln1285_fu_519_p1;

assign result_V_1_fu_565_p2 = (32'd0 - p_Val2_5_fu_557_p3);

assign sext_ln1311_1_fu_511_p1 = $signed(ush_fu_503_p3);

assign sext_ln1311_fu_499_p1 = $signed(sub_ln1311_fu_493_p2);

assign shl_ln11_1_fu_363_p2 = image1_q0 << 32'd1;

assign shl_ln11_2_fu_399_p2 = image1_q0 << 32'd1;

assign shl_ln11_3_fu_405_p2 = image1_q1 << 32'd1;

assign shl_ln11_fu_297_p2 = image1_load_1_reg_635 << 32'd1;

assign sub_ln11_1_fu_369_p2 = (sub_ln11_reg_666 - shl_ln11_1_fu_363_p2);

assign sub_ln11_2_fu_374_p2 = (sub_ln11_1_fu_369_p2 - image1_q1);

assign sub_ln11_3_fu_357_p2 = (reg_179 - image1_q0);

assign sub_ln11_4_fu_393_p2 = (add_ln11_6_fu_388_p2 - image1_q1);

assign sub_ln11_5_fu_416_p2 = (add_ln11_7_fu_411_p2 - shl_ln11_3_fu_405_p2);

assign sub_ln11_fu_332_p2 = (add_ln11_5_fu_326_p2 - image1_q1);

assign sub_ln1311_fu_493_p2 = (11'd1023 - tmp_V_fu_447_p4);

assign tmp_3_fu_535_p3 = r_V_fu_523_p2[32'd53];

assign tmp_6_fu_547_p4 = {{r_V_1_fu_529_p2[84:53]}};

assign tmp_V_1_fu_457_p1 = p_Val2_s_fu_436_p1[51:0];

assign tmp_V_fu_447_p4 = {{p_Val2_s_fu_436_p1[62:52]}};

assign ush_fu_503_p3 = ((isNeg_fu_485_p3[0:0] === 1'b1) ? sext_ln1311_fu_499_p1 : add_ln502_fu_479_p2);

assign zext_ln11_10_fu_315_p1 = add_ln11_14_fu_311_p2;

assign zext_ln11_11_fu_338_p1 = i_0_reg_159;

assign zext_ln11_12_fu_380_p1 = add_ln11_15_reg_671;

assign zext_ln11_13_fu_384_p1 = add_ln11_16_reg_676;

assign zext_ln11_14_fu_579_p1 = add_ln11_17_reg_681;

assign zext_ln11_3_fu_244_p1 = add_ln11_2_fu_238_p2;

assign zext_ln11_4_fu_253_p1 = add_ln11_3_fu_248_p2;

assign zext_ln11_5_fu_263_p1 = add_ln11_9_fu_258_p2;

assign zext_ln11_6_fu_272_p1 = add_ln11_10_fu_268_p2;

assign zext_ln11_7_fu_283_p1 = i_fu_277_p2;

assign zext_ln11_8_fu_292_p1 = add_ln11_12_fu_287_p2;

assign zext_ln11_9_fu_306_p1 = add_ln11_13_fu_302_p2;

assign zext_ln1285_fu_519_p1 = $unsigned(sext_ln1311_1_fu_511_p1);

assign zext_ln1287_fu_515_p1 = $unsigned(sext_ln1311_1_fu_511_p1);

assign zext_ln502_fu_475_p1 = tmp_V_fu_447_p4;

assign zext_ln662_fu_543_p1 = tmp_3_fu_535_p3;

assign zext_ln682_fu_471_p1 = mantissa_V_fu_461_p4;

always @ (posedge ap_clk) begin
    mul_ln11_2_reg_586[1:0] <= 2'b00;
    mul_ln11_3_reg_593[1:0] <= 2'b00;
    mul_ln11_4_reg_605[1:0] <= 2'b00;
    zext_ln11_3_reg_615[13:7] <= 7'b0000000;
    zext_ln11_7_reg_645[13:7] <= 7'b0000000;
end

endmodule //sobel
