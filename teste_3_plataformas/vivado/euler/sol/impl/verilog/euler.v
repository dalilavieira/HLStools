// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="euler,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.517000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=3857,HLS_SYN_LUT=5006,HLS_VERSION=2019_1}" *)

module euler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        ap_return
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] i_1_fu_128_p2;
reg   [30:0] i_1_reg_180;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_134_p2;
reg   [0:0] icmp_ln6_reg_185;
wire   [0:0] icmp_ln22_fu_123_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln11_fu_144_p2;
wire   [30:0] i_fu_160_p2;
reg   [30:0] i_reg_197;
wire   [31:0] add_ln22_fu_166_p2;
reg   [31:0] add_ln22_reg_202;
wire   [63:0] grp_fu_154_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_115_p1;
reg   [63:0] tmp_1_reg_212;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_110_p2;
reg   [63:0] tmp_2_reg_217;
wire    ap_CS_fsm_state29;
wire   [63:0] grp_fu_105_p2;
wire    ap_CS_fsm_state34;
reg   [31:0] indvars_iv_reg_34;
reg   [63:0] soma_0_reg_46;
reg   [30:0] n_assign_reg_58;
reg  signed [63:0] y_0_i_reg_69;
reg   [30:0] i_0_i_reg_81;
reg   [63:0] ap_phi_mux_p_0_i_phi_fu_96_p4;
reg   [63:0] p_0_i_reg_92;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state8;
wire   [31:0] zext_ln22_fu_119_p1;
wire   [31:0] i_0_i_cast_fu_140_p1;
wire   [30:0] grp_fu_154_p0;
reg   [33:0] ap_NS_fsm;
wire   [63:0] grp_fu_154_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

euler_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
euler_dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(soma_0_reg_46),
    .din1(tmp_2_reg_217),
    .ce(1'b1),
    .dout(grp_fu_105_p2)
);

euler_ddiv_64ns_64ns_64_22_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
euler_ddiv_64ns_64ns_64_22_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(tmp_1_reg_212),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

euler_sitodp_64ns_64_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
euler_sitodp_64ns_64_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_p_0_i_phi_fu_96_p4),
    .ce(1'b1),
    .dout(grp_fu_115_p1)
);

euler_mul_31ns_64s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
euler_mul_31ns_64s_64_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_154_p0),
    .din1(y_0_i_reg_69),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_123_p2 == 1'd1) & (icmp_ln6_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_81 <= 31'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_81 <= i_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv_reg_34 <= 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        indvars_iv_reg_34 <= add_ln22_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_assign_reg_58 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        n_assign_reg_58 <= i_1_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_144_p2 == 1'd1) & (icmp_ln6_reg_185 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0_i_reg_92 <= y_0_i_reg_69;
    end else if (((icmp_ln22_fu_123_p2 == 1'd1) & (icmp_ln6_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_i_reg_92 <= 64'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        soma_0_reg_46 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        soma_0_reg_46 <= grp_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_123_p2 == 1'd1) & (icmp_ln6_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_i_reg_69 <= 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_i_reg_69 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln11_fu_144_p2 == 1'd1) | (icmp_ln6_reg_185 == 1'd1)))) begin
        add_ln22_reg_202 <= add_ln22_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_180 <= i_1_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_144_p2 == 1'd0) & (icmp_ln6_reg_185 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_197 <= i_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln6_reg_185 <= icmp_ln6_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_212 <= grp_fu_115_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_2_reg_217 <= grp_fu_110_p2;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_144_p2 == 1'd1) & (icmp_ln6_reg_185 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_p_0_i_phi_fu_96_p4 = y_0_i_reg_69;
    end else begin
        ap_phi_mux_p_0_i_phi_fu_96_p4 = p_0_i_reg_92;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln11_fu_144_p2 == 1'd1) | (icmp_ln6_reg_185 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_166_p2 = (indvars_iv_reg_34 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = soma_0_reg_46;

assign grp_fu_154_p0 = grp_fu_154_p00;

assign grp_fu_154_p00 = i_0_i_reg_81;

assign i_0_i_cast_fu_140_p1 = i_0_i_reg_81;

assign i_1_fu_128_p2 = (n_assign_reg_58 + 31'd1);

assign i_fu_160_p2 = (i_0_i_reg_81 + 31'd1);

assign icmp_ln11_fu_144_p2 = ((i_0_i_cast_fu_140_p1 == indvars_iv_reg_34) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_123_p2 = (($signed(zext_ln22_fu_119_p1) < $signed(n)) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_134_p2 = ((n_assign_reg_58 == 31'd0) ? 1'b1 : 1'b0);

assign zext_ln22_fu_119_p1 = n_assign_reg_58;

endmodule //euler
