// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "euler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic euler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic euler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> euler::ap_ST_fsm_state1 = "1";
const sc_lv<34> euler::ap_ST_fsm_state2 = "10";
const sc_lv<34> euler::ap_ST_fsm_state3 = "100";
const sc_lv<34> euler::ap_ST_fsm_state4 = "1000";
const sc_lv<34> euler::ap_ST_fsm_state5 = "10000";
const sc_lv<34> euler::ap_ST_fsm_state6 = "100000";
const sc_lv<34> euler::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> euler::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> euler::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> euler::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> euler::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> euler::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> euler::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> euler::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> euler::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> euler::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> euler::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> euler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> euler::ap_const_lv32_1 = "1";
const sc_lv<1> euler::ap_const_lv1_1 = "1";
const sc_lv<32> euler::ap_const_lv32_2 = "10";
const sc_lv<1> euler::ap_const_lv1_0 = "0";
const sc_lv<32> euler::ap_const_lv32_3 = "11";
const sc_lv<32> euler::ap_const_lv32_6 = "110";
const sc_lv<32> euler::ap_const_lv32_1C = "11100";
const sc_lv<32> euler::ap_const_lv32_21 = "100001";
const sc_lv<64> euler::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<31> euler::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<64> euler::ap_const_lv64_1 = "1";
const sc_lv<31> euler::ap_const_lv31_1 = "1";
const sc_lv<32> euler::ap_const_lv32_1D = "11101";
const sc_lv<64> euler::ap_const_lv64_3FF0000000000000 = "11111111110000000000000000000000000000000000000000000000000000";
const sc_lv<32> euler::ap_const_lv32_7 = "111";
const bool euler::ap_const_boolean_1 = true;

euler::euler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1 = new euler_dadd_64ns_64ns_64_5_full_dsp_1<1,5,64,64,64>("euler_dadd_64ns_64ns_64_5_full_dsp_1_U1");
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->clk(ap_clk);
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->reset(ap_rst);
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->din0(soma_0_reg_46);
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->din1(tmp_2_reg_217);
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->ce(ap_var_for_const0);
    euler_dadd_64ns_64ns_64_5_full_dsp_1_U1->dout(grp_fu_105_p2);
    euler_ddiv_64ns_64ns_64_22_1_U2 = new euler_ddiv_64ns_64ns_64_22_1<1,22,64,64,64>("euler_ddiv_64ns_64ns_64_22_1_U2");
    euler_ddiv_64ns_64ns_64_22_1_U2->clk(ap_clk);
    euler_ddiv_64ns_64ns_64_22_1_U2->reset(ap_rst);
    euler_ddiv_64ns_64ns_64_22_1_U2->din0(ap_var_for_const1);
    euler_ddiv_64ns_64ns_64_22_1_U2->din1(tmp_1_reg_212);
    euler_ddiv_64ns_64ns_64_22_1_U2->ce(ap_var_for_const0);
    euler_ddiv_64ns_64ns_64_22_1_U2->dout(grp_fu_110_p2);
    euler_sitodp_64ns_64_4_1_U3 = new euler_sitodp_64ns_64_4_1<1,4,64,64>("euler_sitodp_64ns_64_4_1_U3");
    euler_sitodp_64ns_64_4_1_U3->clk(ap_clk);
    euler_sitodp_64ns_64_4_1_U3->reset(ap_rst);
    euler_sitodp_64ns_64_4_1_U3->din0(ap_phi_mux_p_0_i_phi_fu_96_p4);
    euler_sitodp_64ns_64_4_1_U3->ce(ap_var_for_const0);
    euler_sitodp_64ns_64_4_1_U3->dout(grp_fu_115_p1);
    euler_mul_31ns_64s_64_2_1_U4 = new euler_mul_31ns_64s_64_2_1<1,2,31,64,64>("euler_mul_31ns_64s_64_2_1_U4");
    euler_mul_31ns_64s_64_2_1_U4->clk(ap_clk);
    euler_mul_31ns_64s_64_2_1_U4->reset(ap_rst);
    euler_mul_31ns_64s_64_2_1_U4->din0(grp_fu_154_p0);
    euler_mul_31ns_64s_64_2_1_U4->din1(y_0_i_reg_69);
    euler_mul_31ns_64s_64_2_1_U4->ce(ap_var_for_const0);
    euler_mul_31ns_64s_64_2_1_U4->dout(grp_fu_154_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln22_fu_166_p2);
    sensitive << ( indvars_iv_reg_34 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_123_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_i_phi_fu_96_p4);
    sensitive << ( icmp_ln6_reg_185 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln11_fu_144_p2 );
    sensitive << ( y_0_i_reg_69 );
    sensitive << ( p_0_i_reg_92 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_123_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_123_p2 );
    sensitive << ( soma_0_reg_46 );

    SC_METHOD(thread_grp_fu_154_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_154_p00 );

    SC_METHOD(thread_grp_fu_154_p00);
    sensitive << ( i_0_i_reg_81 );

    SC_METHOD(thread_i_0_i_cast_fu_140_p1);
    sensitive << ( i_0_i_reg_81 );

    SC_METHOD(thread_i_1_fu_128_p2);
    sensitive << ( n_assign_reg_58 );

    SC_METHOD(thread_i_fu_160_p2);
    sensitive << ( i_0_i_reg_81 );

    SC_METHOD(thread_icmp_ln11_fu_144_p2);
    sensitive << ( icmp_ln6_reg_185 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( indvars_iv_reg_34 );
    sensitive << ( i_0_i_cast_fu_140_p1 );

    SC_METHOD(thread_icmp_ln22_fu_123_p2);
    sensitive << ( n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln22_fu_119_p1 );

    SC_METHOD(thread_icmp_ln6_fu_134_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_123_p2 );
    sensitive << ( n_assign_reg_58 );

    SC_METHOD(thread_zext_ln22_fu_119_p1);
    sensitive << ( n_assign_reg_58 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_reg_185 );
    sensitive << ( icmp_ln22_fu_123_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln11_fu_144_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "euler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_128_p2, "i_1_fu_128_p2");
    sc_trace(mVcdFile, i_1_reg_180, "i_1_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln6_fu_134_p2, "icmp_ln6_fu_134_p2");
    sc_trace(mVcdFile, icmp_ln6_reg_185, "icmp_ln6_reg_185");
    sc_trace(mVcdFile, icmp_ln22_fu_123_p2, "icmp_ln22_fu_123_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln11_fu_144_p2, "icmp_ln11_fu_144_p2");
    sc_trace(mVcdFile, i_fu_160_p2, "i_fu_160_p2");
    sc_trace(mVcdFile, i_reg_197, "i_reg_197");
    sc_trace(mVcdFile, add_ln22_fu_166_p2, "add_ln22_fu_166_p2");
    sc_trace(mVcdFile, add_ln22_reg_202, "add_ln22_reg_202");
    sc_trace(mVcdFile, grp_fu_154_p2, "grp_fu_154_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_115_p1, "grp_fu_115_p1");
    sc_trace(mVcdFile, tmp_1_reg_212, "tmp_1_reg_212");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, tmp_2_reg_217, "tmp_2_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, grp_fu_105_p2, "grp_fu_105_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, indvars_iv_reg_34, "indvars_iv_reg_34");
    sc_trace(mVcdFile, soma_0_reg_46, "soma_0_reg_46");
    sc_trace(mVcdFile, n_assign_reg_58, "n_assign_reg_58");
    sc_trace(mVcdFile, y_0_i_reg_69, "y_0_i_reg_69");
    sc_trace(mVcdFile, i_0_i_reg_81, "i_0_i_reg_81");
    sc_trace(mVcdFile, ap_phi_mux_p_0_i_phi_fu_96_p4, "ap_phi_mux_p_0_i_phi_fu_96_p4");
    sc_trace(mVcdFile, p_0_i_reg_92, "p_0_i_reg_92");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, zext_ln22_fu_119_p1, "zext_ln22_fu_119_p1");
    sc_trace(mVcdFile, i_0_i_cast_fu_140_p1, "i_0_i_cast_fu_140_p1");
    sc_trace(mVcdFile, grp_fu_154_p0, "grp_fu_154_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_154_p00, "grp_fu_154_p00");
#endif

    }
    mHdltvinHandle.open("euler.hdltvin.dat");
    mHdltvoutHandle.open("euler.hdltvout.dat");
}

euler::~euler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete euler_dadd_64ns_64ns_64_5_full_dsp_1_U1;
    delete euler_ddiv_64ns_64ns_64_22_1_U2;
    delete euler_sitodp_64ns_64_4_1_U3;
    delete euler_mul_31ns_64s_64_2_1_U4;
}

void euler::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void euler::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_3FF0000000000000;
}

void euler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_134_p2.read(), ap_const_lv1_0))) {
        i_0_i_reg_81 = ap_const_lv31_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_reg_81 = i_reg_197.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_34 = ap_const_lv32_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        indvars_iv_reg_34 = add_ln22_reg_202.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        n_assign_reg_58 = ap_const_lv31_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        n_assign_reg_58 = i_1_reg_180.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_185.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_144_p2.read()))) {
        p_0_i_reg_92 = y_0_i_reg_69.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln6_fu_134_p2.read(), ap_const_lv1_1))) {
        p_0_i_reg_92 = ap_const_lv64_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        soma_0_reg_46 = ap_const_lv64_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        soma_0_reg_46 = grp_fu_105_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_134_p2.read(), ap_const_lv1_0))) {
        y_0_i_reg_69 = ap_const_lv64_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        y_0_i_reg_69 = grp_fu_154_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_144_p2.read()) || 
  esl_seteq<1,1,1>(icmp_ln6_reg_185.read(), ap_const_lv1_1)))) {
        add_ln22_reg_202 = add_ln22_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_180 = i_1_fu_128_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln6_reg_185.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_144_p2.read()))) {
        i_reg_197 = i_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_1))) {
        icmp_ln6_reg_185 = icmp_ln6_fu_134_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_1_reg_212 = grp_fu_115_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        tmp_2_reg_217 = grp_fu_110_p2.read();
    }
}

void euler::thread_add_ln22_fu_166_p2() {
    add_ln22_fu_166_p2 = (!indvars_iv_reg_34.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(indvars_iv_reg_34.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void euler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void euler::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void euler::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void euler::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void euler::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void euler::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void euler::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void euler::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void euler::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void euler::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void euler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void euler::thread_ap_phi_mux_p_0_i_phi_fu_96_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_185.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_144_p2.read()))) {
        ap_phi_mux_p_0_i_phi_fu_96_p4 = y_0_i_reg_69.read();
    } else {
        ap_phi_mux_p_0_i_phi_fu_96_p4 = p_0_i_reg_92.read();
    }
}

void euler::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void euler::thread_ap_return() {
    ap_return = soma_0_reg_46.read();
}

void euler::thread_grp_fu_154_p0() {
    grp_fu_154_p0 =  (sc_lv<31>) (grp_fu_154_p00.read());
}

void euler::thread_grp_fu_154_p00() {
    grp_fu_154_p00 = esl_zext<64,31>(i_0_i_reg_81.read());
}

void euler::thread_i_0_i_cast_fu_140_p1() {
    i_0_i_cast_fu_140_p1 = esl_zext<32,31>(i_0_i_reg_81.read());
}

void euler::thread_i_1_fu_128_p2() {
    i_1_fu_128_p2 = (!n_assign_reg_58.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(n_assign_reg_58.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void euler::thread_i_fu_160_p2() {
    i_fu_160_p2 = (!i_0_i_reg_81.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_i_reg_81.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void euler::thread_icmp_ln11_fu_144_p2() {
    icmp_ln11_fu_144_p2 = (!i_0_i_cast_fu_140_p1.read().is_01() || !indvars_iv_reg_34.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_cast_fu_140_p1.read() == indvars_iv_reg_34.read());
}

void euler::thread_icmp_ln22_fu_123_p2() {
    icmp_ln22_fu_123_p2 = (!zext_ln22_fu_119_p1.read().is_01() || !n.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln22_fu_119_p1.read()) < sc_bigint<32>(n.read()));
}

void euler::thread_icmp_ln6_fu_134_p2() {
    icmp_ln6_fu_134_p2 = (!n_assign_reg_58.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(n_assign_reg_58.read() == ap_const_lv31_0);
}

void euler::thread_zext_ln22_fu_119_p1() {
    zext_ln22_fu_119_p1 = esl_zext<32,31>(n_assign_reg_58.read());
}

void euler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_123_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln11_fu_144_p2.read()) || 
  esl_seteq<1,1,1>(icmp_ln6_reg_185.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void euler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n\" :  \"" << n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

