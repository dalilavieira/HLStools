//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Mar 30 14:09:04 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_4_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB_4_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB__lr_ph_i_preheader_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB__lr_ph_i_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB__lr_ph_i_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB__lr_ph_i_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB_sum_vector_exit_preheader_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB_sum_vector_exit_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB_sum_vector_exit_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB_16_11 = 4'd11;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [31:0] main_4_tmp13;
reg [31:0] main_4_tmp13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep16_reg;
reg [31:0] main_4_6;
reg [31:0] main_4_6_reg;
reg  main_4_exitcond12;
reg  main_4_exitcond12_reg;
reg [31:0] main__lr_ph_i_i_01_i;
reg [31:0] main__lr_ph_i_i_01_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep3_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep3_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep2_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep2_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_scevgep_i_reg;
reg [31:0] main__lr_ph_i_7;
reg [31:0] main__lr_ph_i_7_reg;
reg [31:0] main__lr_ph_i_8;
reg [31:0] main__lr_ph_i_8_reg;
reg [31:0] main__lr_ph_i_9;
reg [31:0] main__lr_ph_i_9_reg;
reg [31:0] main__lr_ph_i_10;
reg [31:0] main__lr_ph_i_10_reg;
reg  main__lr_ph_i_exitcond8;
reg  main__lr_ph_i_exitcond8_reg;
reg [31:0] main_sum_vector_exit_i_14;
reg [31:0] main_sum_vector_exit_i_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sum_vector_exit_scevgep7_reg;
reg [31:0] main_sum_vector_exit_11;
reg [31:0] main_sum_vector_exit_11_reg;
reg [31:0] main_sum_vector_exit_12;
reg [31:0] main_sum_vector_exit_12_reg;
reg [31:0] main_sum_vector_exit_13;
reg [31:0] main_sum_vector_exit_13_reg;
reg [31:0] main_sum_vector_exit_15;
reg [31:0] main_sum_vector_exit_15_reg;
reg  main_sum_vector_exit_exitcond;
reg  main_sum_vector_exit_exitcond_reg;
reg [6:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
wire [6:0] main_0_1_address_b;
wire  main_0_1_write_enable_b;
wire [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg [6:0] main_0_2_address_a;
reg  main_0_2_write_enable_a;
reg [31:0] main_0_2_in_a;
wire [31:0] main_0_2_out_a;
wire [6:0] main_0_2_address_b;
wire  main_0_2_write_enable_b;
wire [31:0] main_0_2_in_b;
wire [31:0] main_0_2_out_b;
reg [6:0] main_0_3_address_a;
reg  main_0_3_write_enable_a;
reg [31:0] main_0_3_in_a;
wire [31:0] main_0_3_out_a;
wire [6:0] main_0_3_address_b;
wire  main_0_3_write_enable_b;
wire [31:0] main_0_3_in_b;
wire [31:0] main_0_3_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams

//   %1 = alloca [100 x i32], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 7;
defparam main_0_1.widthad_b = 7;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 100;
defparam main_0_1.numwords_b = 100;
defparam main_0_1.latency = 1;

//   %2 = alloca [100 x i32], align 4
ram_dual_port main_0_2 (
	.clk( clk ),
	.address_a( main_0_2_address_a ),
	.address_b( main_0_2_address_b ),
	.wren_a( main_0_2_write_enable_a ),
	.wren_b( main_0_2_write_enable_b ),
	.data_a( main_0_2_in_a ),
	.data_b( main_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_2_out_a ),
	.q_b( main_0_2_out_b)
);
defparam main_0_2.width_a = 32;
defparam main_0_2.width_b = 32;
defparam main_0_2.widthad_a = 7;
defparam main_0_2.widthad_b = 7;
defparam main_0_2.width_be_a = 1;
defparam main_0_2.width_be_b = 1;
defparam main_0_2.numwords_a = 100;
defparam main_0_2.numwords_b = 100;
defparam main_0_2.latency = 1;

//   %3 = alloca [100 x i32], align 4
ram_dual_port main_0_3 (
	.clk( clk ),
	.address_a( main_0_3_address_a ),
	.address_b( main_0_3_address_b ),
	.wren_a( main_0_3_write_enable_a ),
	.wren_b( main_0_3_write_enable_b ),
	.data_a( main_0_3_in_a ),
	.data_b( main_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_3_out_a ),
	.q_b( main_0_3_out_b)
);
defparam main_0_3.width_a = 32;
defparam main_0_3.width_b = 32;
defparam main_0_3.widthad_a = 7;
defparam main_0_3.widthad_b = 7;
defparam main_0_3.width_be_a = 1;
defparam main_0_3.width_be_b = 1;
defparam main_0_3.numwords_a = 100;
defparam main_0_3.numwords_b = 100;
defparam main_0_3.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %11, i32 %12, i32 %13) nounwind*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_10))
begin
$write("%d + %d = %d\n", $signed(main_sum_vector_exit_11), $signed(main_sum_vector_exit_12), $signed(main_sum_vector_exit_13));
// to fix quartus warning
if (reset == 1'b0 && ^(main_sum_vector_exit_11) === 1'bX) finish <= 0;
if (reset == 1'b0 && ^(main_sum_vector_exit_12) === 1'bX) finish <= 0;
if (reset == 1'b0 && ^(main_sum_vector_exit_13) === 1'bX) finish <= 0;
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_4_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_4_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond12_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond12_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_4_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_preheader_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_6;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__lr_ph_i_7) & (memory_controller_waitrequest == 1'd0)) & (main__lr_ph_i_exitcond8_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB__lr_ph_i_7) & (memory_controller_waitrequest == 1'd0)) & (main__lr_ph_i_exitcond8_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB__lr_ph_i_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB__lr_ph_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_preheader_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_10;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_sum_vector_exit_10) & (memory_controller_waitrequest == 1'd0)) & (main_sum_vector_exit_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_sum_vector_exit_10) & (memory_controller_waitrequest == 1'd0)) & (main_sum_vector_exit_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_sum_vector_exit_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_sum_vector_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_16_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_16_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (reset == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %5 = phi i32 [ 0, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_4_5 = 32'd0;
end
/* main: %4*/
/*   %5 = phi i32 [ 0, %0 ], [ %6, %4 ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond12_reg == 1'd0))) */
begin
main_4_5 = main_4_6_reg;
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %5 = phi i32 [ 0, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_4_5_reg <= main_4_5;
if (reset == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
end
/* main: %4*/
/*   %5 = phi i32 [ 0, %0 ], [ %6, %4 ]*/
if ((((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond12_reg == 1'd0)))
begin
main_4_5_reg <= main_4_5;
if (reset == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %tmp13 = sub i32 100, %5*/
begin
main_4_tmp13 = (32'd100 - main_4_5_reg);
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %tmp13 = sub i32 100, %5*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_tmp13_reg <= main_4_tmp13;
if (reset == 1'b0 && ^(main_4_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_tmp13_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %scevgep14 = getelementptr [100 x i32]* %1, i32 0, i32 %5*/
begin
main_4_scevgep14 = (1'd0 + (4 * main_4_5_reg));
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %scevgep14 = getelementptr [100 x i32]* %1, i32 0, i32 %5*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_scevgep14_reg <= main_4_scevgep14;
if (reset == 1'b0 && ^(main_4_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep14_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %scevgep15 = getelementptr [100 x i32]* %2, i32 0, i32 %5*/
begin
main_4_scevgep15 = (1'd0 + (4 * main_4_5_reg));
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %scevgep15 = getelementptr [100 x i32]* %2, i32 0, i32 %5*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_scevgep15_reg <= main_4_scevgep15;
if (reset == 1'b0 && ^(main_4_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep15_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %scevgep16 = getelementptr [100 x i32]* %3, i32 0, i32 %5*/
begin
main_4_scevgep16 = (1'd0 + (4 * main_4_5_reg));
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %scevgep16 = getelementptr [100 x i32]* %3, i32 0, i32 %5*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_scevgep16_reg <= main_4_scevgep16;
if (reset == 1'b0 && ^(main_4_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep16_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %6 = add nsw i32 %5, 1*/
begin
main_4_6 = (main_4_5_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %6 = add nsw i32 %5, 1*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_6_reg <= main_4_6;
if (reset == 1'b0 && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %exitcond12 = icmp eq i32 %6, 100*/
begin
main_4_exitcond12 = (main_4_6 == 32'd100);
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %exitcond12 = icmp eq i32 %6, 100*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_4_exitcond12_reg <= main_4_exitcond12;
if (reset == 1'b0 && ^(main_4_exitcond12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_exitcond12_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %i.01.i = phi i32 [ %10, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__lr_ph_i_i_01_i = 32'd0;
end
/* main: %.lr.ph.i*/
/*   %i.01.i = phi i32 [ %10, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]*/
else /* if ((((cur_state == LEGUP_F_main_BB__lr_ph_i_7) & (memory_controller_waitrequest == 1'd0)) & (main__lr_ph_i_exitcond8_reg == 1'd0))) */
begin
main__lr_ph_i_i_01_i = main__lr_ph_i_10_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %i.01.i = phi i32 [ %10, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]*/
if (((cur_state == LEGUP_F_main_BB__lr_ph_i_preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
main__lr_ph_i_i_01_i_reg <= main__lr_ph_i_i_01_i;
if (reset == 1'b0 && ^(main__lr_ph_i_i_01_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_01_i_reg"); $finish; end
end
/* main: %.lr.ph.i*/
/*   %i.01.i = phi i32 [ %10, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB__lr_ph_i_7) & (memory_controller_waitrequest == 1'd0)) & (main__lr_ph_i_exitcond8_reg == 1'd0)))
begin
main__lr_ph_i_i_01_i_reg <= main__lr_ph_i_i_01_i;
if (reset == 1'b0 && ^(main__lr_ph_i_i_01_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_01_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %scevgep3.i = getelementptr [100 x i32]* %3, i32 0, i32 %i.01.i*/
begin
main__lr_ph_i_scevgep3_i = (1'd0 + (4 * main__lr_ph_i_i_01_i_reg));
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %scevgep3.i = getelementptr [100 x i32]* %3, i32 0, i32 %i.01.i*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main__lr_ph_i_scevgep3_i_reg <= main__lr_ph_i_scevgep3_i;
if (reset == 1'b0 && ^(main__lr_ph_i_scevgep3_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_scevgep3_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %scevgep2.i = getelementptr [100 x i32]* %2, i32 0, i32 %i.01.i*/
begin
main__lr_ph_i_scevgep2_i = (1'd0 + (4 * main__lr_ph_i_i_01_i_reg));
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %scevgep2.i = getelementptr [100 x i32]* %2, i32 0, i32 %i.01.i*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main__lr_ph_i_scevgep2_i_reg <= main__lr_ph_i_scevgep2_i;
if (reset == 1'b0 && ^(main__lr_ph_i_scevgep2_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_scevgep2_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %scevgep.i = getelementptr [100 x i32]* %1, i32 0, i32 %i.01.i*/
begin
main__lr_ph_i_scevgep_i = (1'd0 + (4 * main__lr_ph_i_i_01_i_reg));
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %scevgep.i = getelementptr [100 x i32]* %1, i32 0, i32 %i.01.i*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main__lr_ph_i_scevgep_i_reg <= main__lr_ph_i_scevgep_i;
if (reset == 1'b0 && ^(main__lr_ph_i_scevgep_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_scevgep_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %7 = load i32* %scevgep.i, align 4, !tbaa !0*/
begin
main__lr_ph_i_7 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %7 = load i32* %scevgep.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main__lr_ph_i_7_reg <= main__lr_ph_i_7;
if (reset == 1'b0 && ^(main__lr_ph_i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %8 = load i32* %scevgep2.i, align 4, !tbaa !0*/
begin
main__lr_ph_i_8 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %8 = load i32* %scevgep2.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main__lr_ph_i_8_reg <= main__lr_ph_i_8;
if (reset == 1'b0 && ^(main__lr_ph_i_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %9 = add nsw i32 %8, %7*/
begin
main__lr_ph_i_9 = (main__lr_ph_i_8 + main__lr_ph_i_7);
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %9 = add nsw i32 %8, %7*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main__lr_ph_i_9_reg <= main__lr_ph_i_9;
if (reset == 1'b0 && ^(main__lr_ph_i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %10 = add nsw i32 %i.01.i, 1*/
begin
main__lr_ph_i_10 = (main__lr_ph_i_i_01_i_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %10 = add nsw i32 %i.01.i, 1*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main__lr_ph_i_10_reg <= main__lr_ph_i_10;
if (reset == 1'b0 && ^(main__lr_ph_i_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %exitcond8 = icmp eq i32 %10, 100*/
begin
main__lr_ph_i_exitcond8 = (main__lr_ph_i_10 == 32'd100);
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i*/
/*   %exitcond8 = icmp eq i32 %10, 100*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main__lr_ph_i_exitcond8_reg <= main__lr_ph_i_exitcond8;
if (reset == 1'b0 && ^(main__lr_ph_i_exitcond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_exitcond8_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %i.14 = phi i32 [ %15, %sum_vector.exit ], [ 0, %sum_vector.exit.preheader ]*/
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
main_sum_vector_exit_i_14 = 32'd0;
end
/* main: %sum_vector.exit*/
/*   %i.14 = phi i32 [ %15, %sum_vector.exit ], [ 0, %sum_vector.exit.preheader ]*/
else /* if ((((cur_state == LEGUP_F_main_BB_sum_vector_exit_10) & (memory_controller_waitrequest == 1'd0)) & (main_sum_vector_exit_exitcond_reg == 1'd0))) */
begin
main_sum_vector_exit_i_14 = main_sum_vector_exit_15_reg;
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %i.14 = phi i32 [ %15, %sum_vector.exit ], [ 0, %sum_vector.exit.preheader ]*/
if (((cur_state == LEGUP_F_main_BB_sum_vector_exit_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
main_sum_vector_exit_i_14_reg <= main_sum_vector_exit_i_14;
if (reset == 1'b0 && ^(main_sum_vector_exit_i_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_i_14_reg"); $finish; end
end
/* main: %sum_vector.exit*/
/*   %i.14 = phi i32 [ %15, %sum_vector.exit ], [ 0, %sum_vector.exit.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB_sum_vector_exit_10) & (memory_controller_waitrequest == 1'd0)) & (main_sum_vector_exit_exitcond_reg == 1'd0)))
begin
main_sum_vector_exit_i_14_reg <= main_sum_vector_exit_i_14;
if (reset == 1'b0 && ^(main_sum_vector_exit_i_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_i_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %scevgep = getelementptr [100 x i32]* %1, i32 0, i32 %i.14*/
begin
main_sum_vector_exit_scevgep = (1'd0 + (4 * main_sum_vector_exit_i_14_reg));
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %scevgep = getelementptr [100 x i32]* %1, i32 0, i32 %i.14*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_sum_vector_exit_scevgep_reg <= main_sum_vector_exit_scevgep;
if (reset == 1'b0 && ^(main_sum_vector_exit_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %scevgep6 = getelementptr [100 x i32]* %2, i32 0, i32 %i.14*/
begin
main_sum_vector_exit_scevgep6 = (1'd0 + (4 * main_sum_vector_exit_i_14_reg));
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %scevgep6 = getelementptr [100 x i32]* %2, i32 0, i32 %i.14*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_sum_vector_exit_scevgep6_reg <= main_sum_vector_exit_scevgep6;
if (reset == 1'b0 && ^(main_sum_vector_exit_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_scevgep6_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %scevgep7 = getelementptr [100 x i32]* %3, i32 0, i32 %i.14*/
begin
main_sum_vector_exit_scevgep7 = (1'd0 + (4 * main_sum_vector_exit_i_14_reg));
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %scevgep7 = getelementptr [100 x i32]* %3, i32 0, i32 %i.14*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_sum_vector_exit_scevgep7_reg <= main_sum_vector_exit_scevgep7;
if (reset == 1'b0 && ^(main_sum_vector_exit_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_scevgep7_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %11 = load i32* %scevgep, align 4, !tbaa !0*/
begin
main_sum_vector_exit_11 = main_0_1_out_a;
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %11 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_10))
begin
main_sum_vector_exit_11_reg <= main_sum_vector_exit_11;
if (reset == 1'b0 && ^(main_sum_vector_exit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %12 = load i32* %scevgep6, align 4, !tbaa !0*/
begin
main_sum_vector_exit_12 = main_0_2_out_a;
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %12 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_10))
begin
main_sum_vector_exit_12_reg <= main_sum_vector_exit_12;
if (reset == 1'b0 && ^(main_sum_vector_exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %13 = load i32* %scevgep7, align 4, !tbaa !0*/
begin
main_sum_vector_exit_13 = main_0_3_out_a;
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %13 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_10))
begin
main_sum_vector_exit_13_reg <= main_sum_vector_exit_13;
if (reset == 1'b0 && ^(main_sum_vector_exit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %15 = add nsw i32 %i.14, 1*/
begin
main_sum_vector_exit_15 = (main_sum_vector_exit_i_14_reg + 32'd1);
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %15 = add nsw i32 %i.14, 1*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_sum_vector_exit_15_reg <= main_sum_vector_exit_15;
if (reset == 1'b0 && ^(main_sum_vector_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %sum_vector.exit*/
/*   %exitcond = icmp eq i32 %15, 100*/
begin
main_sum_vector_exit_exitcond = (main_sum_vector_exit_15 == 32'd100);
end
end
always @(posedge clk) begin
/* main: %sum_vector.exit*/
/*   %exitcond = icmp eq i32 %15, 100*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_sum_vector_exit_exitcond_reg <= main_sum_vector_exit_exitcond;
if (reset == 1'b0 && ^(main_sum_vector_exit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sum_vector_exit_exitcond_reg"); $finish; end
end
end
always @(*) begin
main_0_1_address_a = 1'd0;
/* main: %4*/
/*   store i32 %5, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_1_address_a = (main_4_scevgep14 >>> 3'd2);
end
/* main: %.lr.ph.i*/
/*   %7 = load i32* %scevgep.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main_0_1_address_a = (main__lr_ph_i_scevgep_i >>> 3'd2);
end
/* main: %sum_vector.exit*/
/*   %11 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_1_address_a = (main_sum_vector_exit_scevgep >>> 3'd2);
end
end
always @(*) begin
main_0_1_write_enable_a = 1'd0;
/* main: %4*/
/*   store i32 %5, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_1_write_enable_a = 1'd1;
end
/* main: %.lr.ph.i*/
/*   %7 = load i32* %scevgep.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main_0_1_write_enable_a = 1'd0;
end
/* main: %sum_vector.exit*/
/*   %11 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_1_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_1_in_a = 1'd0;
/* main: %4*/
/*   store i32 %5, i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_1_in_a = main_4_5_reg;
end
end
always @(*) begin
main_0_2_address_a = 1'd0;
/* main: %4*/
/*   store i32 %tmp13, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_2_address_a = (main_4_scevgep15 >>> 3'd2);
end
/* main: %.lr.ph.i*/
/*   %8 = load i32* %scevgep2.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main_0_2_address_a = (main__lr_ph_i_scevgep2_i >>> 3'd2);
end
/* main: %sum_vector.exit*/
/*   %12 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_2_address_a = (main_sum_vector_exit_scevgep6 >>> 3'd2);
end
end
always @(*) begin
main_0_2_write_enable_a = 1'd0;
/* main: %4*/
/*   store i32 %tmp13, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_2_write_enable_a = 1'd1;
end
/* main: %.lr.ph.i*/
/*   %8 = load i32* %scevgep2.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_5))
begin
main_0_2_write_enable_a = 1'd0;
end
/* main: %sum_vector.exit*/
/*   %12 = load i32* %scevgep6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_2_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_2_in_a = 1'd0;
/* main: %4*/
/*   store i32 %tmp13, i32* %scevgep15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_2_in_a = main_4_tmp13;
end
end
always @(*) begin
main_0_3_address_a = 1'd0;
/* main: %4*/
/*   store i32 0, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_3_address_a = (main_4_scevgep16 >>> 3'd2);
end
/* main: %.lr.ph.i*/
/*   store i32 %9, i32* %scevgep3.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main_0_3_address_a = (main__lr_ph_i_scevgep3_i_reg >>> 3'd2);
end
/* main: %sum_vector.exit*/
/*   %13 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_3_address_a = (main_sum_vector_exit_scevgep7 >>> 3'd2);
end
end
always @(*) begin
main_0_3_write_enable_a = 1'd0;
/* main: %4*/
/*   store i32 0, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %.lr.ph.i*/
/*   store i32 %9, i32* %scevgep3.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main_0_3_write_enable_a = 1'd1;
end
/* main: %sum_vector.exit*/
/*   %13 = load i32* %scevgep7, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_sum_vector_exit_9))
begin
main_0_3_write_enable_a = 1'd0;
end
end
always @(*) begin
main_0_3_in_a = 1'd0;
/* main: %4*/
/*   store i32 0, i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_4_2))
begin
main_0_3_in_a = 32'd0;
end
/* main: %.lr.ph.i*/
/*   store i32 %9, i32* %scevgep3.i, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB__lr_ph_i_6))
begin
main_0_3_in_a = main__lr_ph_i_9;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %16*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_16_11))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %16*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_16_11))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
