//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Mar 30 14:09:04 2020
//----------------------------------------------------------------------------//

Target Family: CycloneII
Clock period constraint: 1.300000e+01ns
Start Function: main
state: LEGUP_0
   Transition: if (start): LEGUP_F_main_BB_0_1 default: LEGUP_0
state: LEGUP_F_main_BB_0_1
   %1 = alloca [100 x i32], align 4 (endState: LEGUP_F_main_BB_0_1)
   %2 = alloca [100 x i32], align 4 (endState: LEGUP_F_main_BB_0_1)
   %3 = alloca [100 x i32], align 4 (endState: LEGUP_F_main_BB_0_1)
   br label %4
   Transition: default: LEGUP_F_main_BB_4_2
state: LEGUP_F_main_BB_4_2
   %5 = phi i32 [ 0, %0 ], [ %6, %4 ] (endState: LEGUP_F_main_BB_4_2)
   %tmp13 = sub i32 100, %5 (endState: LEGUP_F_main_BB_4_2)
   %scevgep14 = getelementptr [100 x i32]* %1, i32 0, i32 %5 (endState: LEGUP_F_main_BB_4_2)
   %scevgep15 = getelementptr [100 x i32]* %2, i32 0, i32 %5 (endState: LEGUP_F_main_BB_4_2)
   %scevgep16 = getelementptr [100 x i32]* %3, i32 0, i32 %5 (endState: LEGUP_F_main_BB_4_2)
   store i32 %5, i32* %scevgep14, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_4_3)
   store i32 %tmp13, i32* %scevgep15, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_4_3)
   store i32 0, i32* %scevgep16, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_4_3)
   %6 = add nsw i32 %5, 1 (endState: LEGUP_F_main_BB_4_2)
   %exitcond12 = icmp eq i32 %6, 100 (endState: LEGUP_F_main_BB_4_2)
   Transition: default: LEGUP_F_main_BB_4_3
state: LEGUP_F_main_BB_4_3
   br i1 %exitcond12, label %.lr.ph.i.preheader, label %4
   Transition: if (%exitcond12): LEGUP_F_main_BB__lr_ph_i_preheader_4 default: LEGUP_F_main_BB_4_2
state: LEGUP_F_main_BB__lr_ph_i_preheader_4
   br label %.lr.ph.i
   Transition: default: LEGUP_F_main_BB__lr_ph_i_5
state: LEGUP_F_main_BB__lr_ph_i_5
   %i.01.i = phi i32 [ %10, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ] (endState: LEGUP_F_main_BB__lr_ph_i_5)
   %scevgep3.i = getelementptr [100 x i32]* %3, i32 0, i32 %i.01.i (endState: LEGUP_F_main_BB__lr_ph_i_5)
   %scevgep2.i = getelementptr [100 x i32]* %2, i32 0, i32 %i.01.i (endState: LEGUP_F_main_BB__lr_ph_i_5)
   %scevgep.i = getelementptr [100 x i32]* %1, i32 0, i32 %i.01.i (endState: LEGUP_F_main_BB__lr_ph_i_5)
   %7 = load i32* %scevgep.i, align 4, !tbaa !0 (endState: LEGUP_F_main_BB__lr_ph_i_6)
   %8 = load i32* %scevgep2.i, align 4, !tbaa !0 (endState: LEGUP_F_main_BB__lr_ph_i_6)
   %10 = add nsw i32 %i.01.i, 1 (endState: LEGUP_F_main_BB__lr_ph_i_5)
   %exitcond8 = icmp eq i32 %10, 100 (endState: LEGUP_F_main_BB__lr_ph_i_5)
   Transition: default: LEGUP_F_main_BB__lr_ph_i_6
state: LEGUP_F_main_BB__lr_ph_i_6
   %9 = add nsw i32 %8, %7 (endState: LEGUP_F_main_BB__lr_ph_i_6)
   store i32 %9, i32* %scevgep3.i, align 4, !tbaa !0 (endState: LEGUP_F_main_BB__lr_ph_i_7)
   Transition: default: LEGUP_F_main_BB__lr_ph_i_7
state: LEGUP_F_main_BB__lr_ph_i_7
   br i1 %exitcond8, label %sum_vector.exit.preheader, label %.lr.ph.i
   Transition: if (%exitcond8): LEGUP_F_main_BB_sum_vector_exit_preheader_8 default: LEGUP_F_main_BB__lr_ph_i_5
state: LEGUP_F_main_BB_sum_vector_exit_preheader_8
   br label %sum_vector.exit
   Transition: default: LEGUP_F_main_BB_sum_vector_exit_9
state: LEGUP_F_main_BB_sum_vector_exit_9
   %i.14 = phi i32 [ %15, %sum_vector.exit ], [ 0, %sum_vector.exit.preheader ] (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   %scevgep = getelementptr [100 x i32]* %1, i32 0, i32 %i.14 (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   %scevgep6 = getelementptr [100 x i32]* %2, i32 0, i32 %i.14 (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   %scevgep7 = getelementptr [100 x i32]* %3, i32 0, i32 %i.14 (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   %11 = load i32* %scevgep, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_sum_vector_exit_10)
   %12 = load i32* %scevgep6, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_sum_vector_exit_10)
   %13 = load i32* %scevgep7, align 4, !tbaa !0 (endState: LEGUP_F_main_BB_sum_vector_exit_10)
   %15 = add nsw i32 %i.14, 1 (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   %exitcond = icmp eq i32 %15, 100 (endState: LEGUP_F_main_BB_sum_vector_exit_9)
   Transition: default: LEGUP_F_main_BB_sum_vector_exit_10
state: LEGUP_F_main_BB_sum_vector_exit_10
   %14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %11, i32 %12, i32 %13) nounwind (endState: LEGUP_F_main_BB_sum_vector_exit_10)
   br i1 %exitcond, label %16, label %sum_vector.exit
   Transition: if (%exitcond): LEGUP_F_main_BB_16_11 default: LEGUP_F_main_BB_sum_vector_exit_9
state: LEGUP_F_main_BB_16_11
   ret i32 0
   Transition: default: LEGUP_0

Basic Block: %4 Num States: 2
Basic Block: %.lr.ph.i.preheader Num States: 1
Basic Block: %sum_vector.exit Num States: 2
Basic Block: %16 Num States: 1
Basic Block: %0 Num States: 1
Basic Block: %.lr.ph.i Num States: 3
Basic Block: %sum_vector.exit.preheader Num States: 1
End Function: main
--------------------------------------------------------------------------------

