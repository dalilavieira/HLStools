//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Feb 13 11:08:49 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 4
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str3 = private unnamed_addr constant [5 x i8] c"loop\00", align 1

`define TAG_g__str3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str3_a {`TAG_g__str3, 23'd0}
// @img = internal unnamed_addr global [64 x [64 x i8]] zeroinitializer, align 32

`define TAG_g_img `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_img_a {`TAG_g_img, 23'd0}
//   %data = alloca [4 x %struct.thread_data], align 8
`define TAG_main_bb3_3_data `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_main_bb3_3_data_a {`TAG_main_bb3_3_data, 23'd0}
//   %threads = alloca [4 x i32], align 4
`define TAG_main_bb3_3_threads `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_bb3_3_threads_a {`TAG_main_bb3_3_threads, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_arbiter_a( memory_controller_address_a ),
	.memory_controller_address_arbiter_b( memory_controller_address_b ),
	.memory_controller_enable_arbiter_a( memory_controller_enable_a ),
	.memory_controller_enable_arbiter_b( memory_controller_enable_b ),
	.memory_controller_write_enable_arbiter_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_arbiter_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest_arbiter( memory_controller_waitrequest ),
	.memory_controller_in_arbiter_a( memory_controller_in_a ),
	.memory_controller_in_arbiter_b( memory_controller_in_b ),
	.memory_controller_size_arbiter_a( memory_controller_size_a ),
	.memory_controller_size_arbiter_b( memory_controller_size_b ),
	.memory_controller_out_arbiter_a( memory_controller_out_a ),
	.memory_controller_out_arbiter_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str3_address_a;
reg [2:0] _str3_address_b;
reg _str3_write_enable_a;
reg _str3_write_enable_b;
reg [7:0] _str3_in_a;
reg [7:0] _str3_in_b;
wire [7:0] _str3_out_a;
wire [7:0] _str3_out_b;

// @.str3 = private unnamed_addr constant [5 x i8] c"loop\00", align 1

rom_dual_port _str3 (
	.clk( clk ),
	.address_a( _str3_address_a ),
	.address_b( _str3_address_b ),
	.q_a( _str3_out_a ),
	.q_b( _str3_out_b)
);
defparam _str3.width_a = 8;
defparam _str3.width_b = 8;
defparam _str3.widthad_a = 3;
defparam _str3.widthad_b = 3;
defparam _str3.numwords_a = 5;
defparam _str3.numwords_b = 5;
defparam _str3.latency = 1;
defparam _str3.init_file = "_str3.mif";


reg [11:0] img_address_a;
reg [11:0] img_address_b;
reg img_write_enable_a;
reg img_write_enable_b;
reg [7:0] img_in_a;
reg [7:0] img_in_b;
wire [7:0] img_out_a;
wire [7:0] img_out_b;

// @img = internal unnamed_addr global [64 x [64 x i8]] zeroinitializer, align 32

ram_dual_port img (
	.clk( clk ),
	.address_a( img_address_a ),
	.address_b( img_address_b ),
	.wren_a( img_write_enable_a ),
	.wren_b( img_write_enable_b ),
	.data_a( img_in_a ),
	.data_b( img_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( img_out_a ),
	.q_b( img_out_b)
);
defparam img.width_a = 8;
defparam img.width_b = 8;
defparam img.widthad_a = 12;
defparam img.widthad_b = 12;
defparam img.width_be_a = 1;
defparam img.width_be_b = 1;
defparam img.numwords_a = 4096;
defparam img.numwords_b = 4096;
defparam img.latency = 1;
defparam img.init_file = "img.mif";


reg [1:0] main_bb3_3_threads_address_a;
reg [1:0] main_bb3_3_threads_address_b;
reg main_bb3_3_threads_write_enable_a;
reg main_bb3_3_threads_write_enable_b;
reg [31:0] main_bb3_3_threads_in_a;
reg [31:0] main_bb3_3_threads_in_b;
wire [31:0] main_bb3_3_threads_out_a;
wire [31:0] main_bb3_3_threads_out_b;

//   %threads = alloca [4 x i32], align 4
ram_dual_port main_bb3_3_threads (
	.clk( clk ),
	.address_a( main_bb3_3_threads_address_a ),
	.address_b( main_bb3_3_threads_address_b ),
	.wren_a( main_bb3_3_threads_write_enable_a ),
	.wren_b( main_bb3_3_threads_write_enable_b ),
	.data_a( main_bb3_3_threads_in_a ),
	.data_b( main_bb3_3_threads_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_bb3_3_threads_out_a ),
	.q_b( main_bb3_3_threads_out_b)
);
defparam main_bb3_3_threads.width_a = 32;
defparam main_bb3_3_threads.width_b = 32;
defparam main_bb3_3_threads.widthad_a = 2;
defparam main_bb3_3_threads.widthad_b = 2;
defparam main_bb3_3_threads.width_be_a = 1;
defparam main_bb3_3_threads.width_be_b = 1;
defparam main_bb3_3_threads.numwords_a = 4;
defparam main_bb3_3_threads.numwords_b = 4;
defparam main_bb3_3_threads.latency = 1;


reg [1:0] main_bb3_3_data_address_a;
reg [1:0] main_bb3_3_data_address_b;
reg main_bb3_3_data_write_enable_a;
reg main_bb3_3_data_write_enable_b;
reg [63:0] main_bb3_3_data_in_a;
reg [63:0] main_bb3_3_data_in_b;
wire [63:0] main_bb3_3_data_out_a;
wire [63:0] main_bb3_3_data_out_b;
reg [8-1:0] main_bb3_3_data_byteena_a;
reg [8-1:0] main_bb3_3_data_byteena_b;

//   %data = alloca [4 x %struct.thread_data], align 8
ram_dual_port main_bb3_3_data (
	.clk( clk ),
	.address_a( main_bb3_3_data_address_a ),
	.address_b( main_bb3_3_data_address_b ),
	.wren_a( main_bb3_3_data_write_enable_a ),
	.wren_b( main_bb3_3_data_write_enable_b ),
	.data_a( main_bb3_3_data_in_a ),
	.data_b( main_bb3_3_data_in_b ),
	.byteena_a( main_bb3_3_data_byteena_a ),
	.byteena_b( main_bb3_3_data_byteena_b ),
	.q_a( main_bb3_3_data_out_a ),
	.q_b( main_bb3_3_data_out_b)
);
defparam main_bb3_3_data.width_a = 64;
defparam main_bb3_3_data.width_b = 64;
defparam main_bb3_3_data.widthad_a = 2;
defparam main_bb3_3_data.widthad_b = 2;
defparam main_bb3_3_data.width_be_a = 8;
defparam main_bb3_3_data.width_be_b = 8;
defparam main_bb3_3_data.numwords_a = 4;
defparam main_bb3_3_data.numwords_b = 4;
defparam main_bb3_3_data.latency = 1;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str3_a;
assign select__str3_a = (tag_a == `TAG_g__str3);
reg select__str3_reg_a;
wire [7:0] memory_controller__str3_out_a;
assign memory_controller__str3_out_a = {8{ select__str3_reg_a}} & _str3_out_a;

wire select_img_a;
assign select_img_a = (tag_a == `TAG_g_img);
reg select_img_reg_a;
wire [7:0] memory_controller_img_out_a;
assign memory_controller_img_out_a = {8{ select_img_reg_a}} & img_out_a;

wire select_main_bb3_3_threads_a;
assign select_main_bb3_3_threads_a = (tag_a == `TAG_main_bb3_3_threads);
reg select_main_bb3_3_threads_reg_a;
wire [31:0] memory_controller_main_bb3_3_threads_out_a;
assign memory_controller_main_bb3_3_threads_out_a = {32{ select_main_bb3_3_threads_reg_a}} & main_bb3_3_threads_out_a;

wire select_main_bb3_3_data_a;
assign select_main_bb3_3_data_a = (tag_a == `TAG_main_bb3_3_data);
reg select_main_bb3_3_data_reg_a;
reg [63:0] memory_controller_main_bb3_3_data_out_a;
wire [63:0] memory_controller_main_bb3_3_data_out_struct_a;
assign memory_controller_main_bb3_3_data_out_struct_a = {64{ select_main_bb3_3_data_reg_a}} & main_bb3_3_data_out_a;

always @(*)
begin
	_str3_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str3_a}};
	_str3_write_enable_a = memory_controller_write_enable_a & select__str3_a;
	_str3_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	img_address_a = memory_controller_address_a [12-1+0:0] & {12{select_img_a}};
	img_write_enable_a = memory_controller_write_enable_a & select_img_a;
	img_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	main_bb3_3_threads_address_a = memory_controller_address_a [2-1+2:2] & {2{select_main_bb3_3_threads_a}};
	main_bb3_3_threads_write_enable_a = memory_controller_write_enable_a & select_main_bb3_3_threads_a;
	main_bb3_3_threads_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_bb3_3_data_address_a = memory_controller_address_a[5-1:3] & {2{select_main_bb3_3_data_a}};
	main_bb3_3_data_write_enable_a = memory_controller_write_enable_a & select_main_bb3_3_data_a;
				main_bb3_3_data_in_a = 0;
		case(memory_controller_size_a)
			3:
			begin
				main_bb3_3_data_in_a[64-1:0] = memory_controller_in_a[64-1:0];
				main_bb3_3_data_byteena_a = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_a [2:2] == 0)
				begin
					main_bb3_3_data_in_a[32-1:0] = memory_controller_in_a[32-1:0];
					main_bb3_3_data_byteena_a = 8'b00001111;
				end
				else
				begin
					main_bb3_3_data_in_a[64-1:32] = memory_controller_in_a[32-1:0];
					main_bb3_3_data_byteena_a = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_a[2:1])
					0:
					begin
						main_bb3_3_data_in_a[16-1:0] = memory_controller_in_a[16-1:0];
						main_bb3_3_data_byteena_a = 8'd3;
					end
					1:
					begin
						main_bb3_3_data_in_a[32-1:16] = memory_controller_in_a[16-1:0];
						main_bb3_3_data_byteena_a = 8'd12;
					end
					2:
					begin
						main_bb3_3_data_in_a[48-1:32] = memory_controller_in_a[16-1:0];
						main_bb3_3_data_byteena_a = 8'd48;
					end
					3:
					begin
						main_bb3_3_data_in_a[64-1:48] = memory_controller_in_a[16-1:0];
						main_bb3_3_data_byteena_a = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_a[2:0])
					0:
					begin
						main_bb3_3_data_in_a[8-1:0] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd1;
					end
					1:
					begin
						main_bb3_3_data_in_a[16-1:8] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd2;
					end
					2:
					begin
						main_bb3_3_data_in_a[24-1:16] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd4;
					end
					3:
					begin
						main_bb3_3_data_in_a[32-1:24] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd8;
					end
					4:
					begin
						main_bb3_3_data_in_a[40-1:32] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd16;
					end
					5:
					begin
						main_bb3_3_data_in_a[48-1:40] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd32;
					end
					6:
					begin
						main_bb3_3_data_in_a[56-1:48] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd64;
					end
					7:
					begin
						main_bb3_3_data_in_a[64-1:56] = memory_controller_in_a[8-1:0];
						main_bb3_3_data_byteena_a = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_bb3_3_threads_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_main_bb3_3_data_out_a = 0;
	case(prevAddr_a)
		0: memory_controller_main_bb3_3_data_out_a[64-1:0] = memory_controller_main_bb3_3_data_out_struct_a[64-1:0];
		1: memory_controller_main_bb3_3_data_out_a[32-1:0] = memory_controller_main_bb3_3_data_out_struct_a[40-1:8];
		2: memory_controller_main_bb3_3_data_out_a[32-1:0] = memory_controller_main_bb3_3_data_out_struct_a[48-1:16];
		3: memory_controller_main_bb3_3_data_out_a[32-1:0] = memory_controller_main_bb3_3_data_out_struct_a[56-1:24];
		4: memory_controller_main_bb3_3_data_out_a[32-1:0] = memory_controller_main_bb3_3_data_out_struct_a[64-1:32];
		5: memory_controller_main_bb3_3_data_out_a[16-1:0] = memory_controller_main_bb3_3_data_out_struct_a[56-1:40];
		6: memory_controller_main_bb3_3_data_out_a[16-1:0] = memory_controller_main_bb3_3_data_out_struct_a[64-1:48];
		7: memory_controller_main_bb3_3_data_out_a[8-1:0] = memory_controller_main_bb3_3_data_out_struct_a[64-1:56];
	endcase

	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str3_out_a | memory_controller_img_out_a | memory_controller_main_bb3_3_threads_out_a | memory_controller_main_bb3_3_data_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str3_reg_a <= select__str3_a;
select_img_reg_a <= select_img_a;
select_main_bb3_3_threads_reg_a <= select_main_bb3_3_threads_a;
select_main_bb3_3_data_reg_a <= select_main_bb3_3_data_a;
end

reg [2:0] select_not_struct_b;

wire select__str3_b;
assign select__str3_b = (tag_b == `TAG_g__str3);
reg select__str3_reg_b;
wire [7:0] memory_controller__str3_out_b;
assign memory_controller__str3_out_b = {8{ select__str3_reg_b}} & _str3_out_b;

wire select_img_b;
assign select_img_b = (tag_b == `TAG_g_img);
reg select_img_reg_b;
wire [7:0] memory_controller_img_out_b;
assign memory_controller_img_out_b = {8{ select_img_reg_b}} & img_out_b;

wire select_main_bb3_3_threads_b;
assign select_main_bb3_3_threads_b = (tag_b == `TAG_main_bb3_3_threads);
reg select_main_bb3_3_threads_reg_b;
wire [31:0] memory_controller_main_bb3_3_threads_out_b;
assign memory_controller_main_bb3_3_threads_out_b = {32{ select_main_bb3_3_threads_reg_b}} & main_bb3_3_threads_out_b;

wire select_main_bb3_3_data_b;
assign select_main_bb3_3_data_b = (tag_b == `TAG_main_bb3_3_data);
reg select_main_bb3_3_data_reg_b;
reg [63:0] memory_controller_main_bb3_3_data_out_b;
wire [63:0] memory_controller_main_bb3_3_data_out_struct_b;
assign memory_controller_main_bb3_3_data_out_struct_b = {64{ select_main_bb3_3_data_reg_b}} & main_bb3_3_data_out_b;

always @(*)
begin
	_str3_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str3_b}};
	_str3_write_enable_b = memory_controller_write_enable_b & select__str3_b;
	_str3_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	img_address_b = memory_controller_address_b [12-1+0:0] & {12{select_img_b}};
	img_write_enable_b = memory_controller_write_enable_b & select_img_b;
	img_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	main_bb3_3_threads_address_b = memory_controller_address_b [2-1+2:2] & {2{select_main_bb3_3_threads_b}};
	main_bb3_3_threads_write_enable_b = memory_controller_write_enable_b & select_main_bb3_3_threads_b;
	main_bb3_3_threads_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_bb3_3_data_address_b = memory_controller_address_b[5-1:3] & {2{select_main_bb3_3_data_b}};
	main_bb3_3_data_write_enable_b = memory_controller_write_enable_b & select_main_bb3_3_data_b;
				main_bb3_3_data_in_b = 0;
		case(memory_controller_size_b)
			3:
			begin
				main_bb3_3_data_in_b[64-1:0] = memory_controller_in_b[64-1:0];
				main_bb3_3_data_byteena_b = 8'b11111111;
			end
			2:
			begin
				if (memory_controller_address_b [2:2] == 0)
				begin
					main_bb3_3_data_in_b[32-1:0] = memory_controller_in_b[32-1:0];
					main_bb3_3_data_byteena_b = 8'b00001111;
				end
				else
				begin
					main_bb3_3_data_in_b[64-1:32] = memory_controller_in_b[32-1:0];
					main_bb3_3_data_byteena_b = 8'b11110000;
				end
			end
			1:
			begin
				case (memory_controller_address_b[2:1])
					0:
					begin
						main_bb3_3_data_in_b[16-1:0] = memory_controller_in_b[16-1:0];
						main_bb3_3_data_byteena_b = 8'd3;
					end
					1:
					begin
						main_bb3_3_data_in_b[32-1:16] = memory_controller_in_b[16-1:0];
						main_bb3_3_data_byteena_b = 8'd12;
					end
					2:
					begin
						main_bb3_3_data_in_b[48-1:32] = memory_controller_in_b[16-1:0];
						main_bb3_3_data_byteena_b = 8'd48;
					end
					3:
					begin
						main_bb3_3_data_in_b[64-1:48] = memory_controller_in_b[16-1:0];
						main_bb3_3_data_byteena_b = 8'd192;
					end
				endcase
			end
			0:
				case (memory_controller_address_b[2:0])
					0:
					begin
						main_bb3_3_data_in_b[8-1:0] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd1;
					end
					1:
					begin
						main_bb3_3_data_in_b[16-1:8] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd2;
					end
					2:
					begin
						main_bb3_3_data_in_b[24-1:16] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd4;
					end
					3:
					begin
						main_bb3_3_data_in_b[32-1:24] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd8;
					end
					4:
					begin
						main_bb3_3_data_in_b[40-1:32] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd16;
					end
					5:
					begin
						main_bb3_3_data_in_b[48-1:40] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd32;
					end
					6:
					begin
						main_bb3_3_data_in_b[56-1:48] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd64;
					end
					7:
					begin
						main_bb3_3_data_in_b[64-1:56] = memory_controller_in_b[8-1:0];
						main_bb3_3_data_byteena_b = 8'd128;
					end
			endcase
		endcase

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_bb3_3_threads_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_main_bb3_3_data_out_b = 0;
	case(prevAddr_b)
		0: memory_controller_main_bb3_3_data_out_b[64-1:0] = memory_controller_main_bb3_3_data_out_struct_b[64-1:0];
		1: memory_controller_main_bb3_3_data_out_b[32-1:0] = memory_controller_main_bb3_3_data_out_struct_b[40-1:8];
		2: memory_controller_main_bb3_3_data_out_b[32-1:0] = memory_controller_main_bb3_3_data_out_struct_b[48-1:16];
		3: memory_controller_main_bb3_3_data_out_b[32-1:0] = memory_controller_main_bb3_3_data_out_struct_b[56-1:24];
		4: memory_controller_main_bb3_3_data_out_b[32-1:0] = memory_controller_main_bb3_3_data_out_struct_b[64-1:32];
		5: memory_controller_main_bb3_3_data_out_b[16-1:0] = memory_controller_main_bb3_3_data_out_struct_b[56-1:40];
		6: memory_controller_main_bb3_3_data_out_b[16-1:0] = memory_controller_main_bb3_3_data_out_struct_b[64-1:48];
		7: memory_controller_main_bb3_3_data_out_b[8-1:0] = memory_controller_main_bb3_3_data_out_struct_b[64-1:56];
	endcase

	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str3_out_b | memory_controller_img_out_b | memory_controller_main_bb3_3_threads_out_b | memory_controller_main_bb3_3_data_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str3_reg_b <= select__str3_b;
select_img_reg_b <= select_img_b;
select_main_bb3_3_threads_reg_b <= select_main_bb3_3_threads_b;
select_main_bb3_3_data_reg_b <= select_main_bb3_3_data_b;
end

endmodule 

`timescale 1 ns / 1 ns
module mandelbrot
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_threadarg
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_mandelbrot_BB_entry_1 = 4'd1;
parameter [3:0] LEGUP_F_mandelbrot_BB_entry_2 = 4'd2;
parameter [3:0] LEGUP_F_mandelbrot_BB_entry_3 = 4'd3;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4 = 4'd4;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb1_5 = 4'd5;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb1_6 = 4'd6;
parameter [3:0] LEGUP_loop_pipeline_wait_loop_1_7 = 4'd7;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb4_8 = 4'd8;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb4_9 = 4'd9;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb6_10 = 4'd10;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb5_preheader_11 = 4'd11;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12 = 4'd12;
parameter [3:0] LEGUP_F_mandelbrot_BB_bb8_13 = 4'd13;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_threadarg;
reg [3:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_entry_0;
reg [31:0] mandelbrot_entry_1;
reg [31:0] mandelbrot_entry_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_entry_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_entry_3;
reg [31:0] mandelbrot_entry_4;
reg [31:0] mandelbrot_entry_4_reg;
reg  mandelbrot_entry_5;
reg [31:0] mandelbrot_bb5_preheader_lr_ph_tmp32;
reg [31:0] mandelbrot_bb5_preheader_lr_ph_tmp32_reg;
reg [31:0] mandelbrot_bb5_preheader_lr_ph_tmp37;
reg [31:0] mandelbrot_bb5_preheader_lr_ph_tmp38;
reg [31:0] mandelbrot_bb5_preheader_lr_ph_tmp38_reg;
reg [31:0] mandelbrot_bb1_i_015;
reg [31:0] mandelbrot_bb1_i_015_reg;
reg [31:0] mandelbrot_bb1_count_014;
reg [31:0] mandelbrot_bb1_count_014_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_bb1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_bb1_scevgep_reg;
reg [31:0] mandelbrot_bb1_tmp20;
reg [31:0] mandelbrot_bb1_tmp21;
reg [31:0] mandelbrot_bb1_tmp21_reg;
reg [7:0] mandelbrot_bb2_fiter_013;
reg [7:0] mandelbrot_bb2_fiter_013_reg;
reg [31:0] mandelbrot_bb2_y_011;
reg [31:0] mandelbrot_bb2_y_011_reg;
reg [31:0] mandelbrot_bb2_x_010;
reg [31:0] mandelbrot_bb2_x_010_reg;
reg [63:0] mandelbrot_bb2_6;
reg [63:0] mandelbrot_bb2_7;
reg [63:0] mandelbrot_bb2_8;
reg [63:0] mandelbrot_bb2_9;
reg [63:0] mandelbrot_bb2_10;
reg [63:0] mandelbrot_bb2_11;
reg [63:0] mandelbrot_bb2_12;
reg [63:0] mandelbrot_bb2_13;
reg [63:0] mandelbrot_bb2_14;
reg [31:0] mandelbrot_bb2__tr;
reg [31:0] mandelbrot_bb2_15;
reg  mandelbrot_bb2_16;
reg [7:0] mandelbrot_bb2_17;
reg [7:0] mandelbrot_bb2_18;
reg [7:0] mandelbrot_bb2_18_reg;
reg [63:0] mandelbrot_bb2_tmp24;
reg [31:0] mandelbrot_bb2_tmp25;
reg [31:0] mandelbrot_bb2_tmp26;
reg [63:0] mandelbrot_bb2_tmp29;
reg [31:0] mandelbrot_bb2_tmp30;
reg [31:0] mandelbrot_bb2_tmp31;
reg [31:0] mandelbrot_bb2_tmp40;
reg  mandelbrot_bb4_20;
reg [7:0] mandelbrot_bb4_21;
reg [31:0] mandelbrot_bb4_22;
reg [31:0] mandelbrot_bb4_23;
reg [31:0] mandelbrot_bb4_23_reg;
reg [31:0] mandelbrot_bb4_24;
reg [31:0] mandelbrot_bb4_24_reg;
reg  mandelbrot_bb4_exitcond19;
reg  mandelbrot_bb4_exitcond19_reg;
reg [31:0] mandelbrot_bb6_indvar_next;
reg  mandelbrot_bb6_exitcond33;
reg [31:0] mandelbrot_bb5_preheader_indvar;
reg [31:0] mandelbrot_bb5_preheader_indvar_reg;
reg [31:0] mandelbrot_bb5_preheader_count_116;
reg [31:0] mandelbrot_bb5_preheader_count_116_reg;
reg [31:0] mandelbrot_bb5_preheader_tmp34;
reg [31:0] mandelbrot_bb5_preheader_tmp34_reg;
reg [31:0] mandelbrot_bb5_preheader_tmp36;
reg [31:0] mandelbrot_bb5_preheader_tmp39;
reg [31:0] mandelbrot_bb5_preheader_tmp39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_bb7_bb8_crit_edge_phitmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_bb8_count_1_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_bb8_count_1_lcssa_reg;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg  loop_1_ii_state;
reg [7:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg [63:0] mandelbrot_bb2_12_reg_stage1;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;
reg  lpm_mult_mandelbrot_bb1_tmp20_en;
reg [31:0] mandelbrot_bb1_tmp20_stage0_reg;
reg  lpm_mult_mandelbrot_bb2_7_en;
reg [63:0] mandelbrot_bb2_7_stage0_reg;
reg  lpm_mult_mandelbrot_bb2_10_en;
reg [63:0] mandelbrot_bb2_10_stage0_reg;
reg  lpm_mult_mandelbrot_bb2_13_en;
reg [63:0] mandelbrot_bb2_13_stage0_reg;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_1;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_entry_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_1;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_entry_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_2;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_entry_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_2;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_entry_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_3;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_entry_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_entry_3;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_entry_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_entry_3) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_entry_5 == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_entry_3) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_entry_5 == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb8_13;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb5_preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb5_preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb1_5;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb1_6;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb1_6;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_1_7;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_loop_pipeline_wait_loop_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_1_7;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_loop_pipeline_wait_loop_1_7) & (memory_controller_waitrequest == 1'd0)) & (loop_1_pipeline_finish == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb4_8;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_loop_pipeline_wait_loop_1_7) & (memory_controller_waitrequest == 1'd0)) & (loop_1_pipeline_finish == 1'd0)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_1_7;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb4_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb4_8;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb4_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb4_9;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb4_9;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb6_10;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb1_5;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb6_10;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb5_preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb5_preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb5_preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb5_preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb1_5;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb8_13;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb8_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_mandelbrot_BB_bb8_13;
if (reset == 1'b0 && ^(LEGUP_F_mandelbrot_BB_bb8_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb8_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (reset == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %0 = bitcast i8* %threadarg to i32**/
begin
mandelbrot_entry_0 = arg_threadarg;
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
begin
mandelbrot_entry_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_3))
begin
mandelbrot_entry_1_reg <= mandelbrot_entry_1;
if (reset == 1'b0 && ^(mandelbrot_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_entry_1_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %2 = getelementptr inbounds i8* %threadarg, i32 4*/
begin
mandelbrot_entry_2 = (arg_threadarg + (1 * 32'd4));
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %3 = bitcast i8* %2 to i32**/
begin
mandelbrot_entry_3 = mandelbrot_entry_2;
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
begin
mandelbrot_entry_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_3))
begin
mandelbrot_entry_4_reg <= mandelbrot_entry_4;
if (reset == 1'b0 && ^(mandelbrot_entry_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_entry_4_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %entry*/
/*   %5 = icmp slt i32 %1, %4*/
begin
mandelbrot_entry_5 = ($signed(mandelbrot_entry_1) < $signed(mandelbrot_entry_4));
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader.lr.ph*/
/*   %tmp32 = sub i32 %4, %1*/
begin
mandelbrot_bb5_preheader_lr_ph_tmp32 = (mandelbrot_entry_4_reg - mandelbrot_entry_1_reg);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader.lr.ph*/
/*   %tmp32 = sub i32 %4, %1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4))
begin
mandelbrot_bb5_preheader_lr_ph_tmp32_reg <= mandelbrot_bb5_preheader_lr_ph_tmp32;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_lr_ph_tmp32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_lr_ph_tmp32_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader.lr.ph*/
/*   %tmp37 = shl i32 %1, 23*/
begin
mandelbrot_bb5_preheader_lr_ph_tmp37 = (mandelbrot_entry_1_reg <<< (32'd23 % 32));
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader.lr.ph*/
/*   %tmp38 = add i32 %tmp37, -268435456*/
begin
mandelbrot_bb5_preheader_lr_ph_tmp38 = (mandelbrot_bb5_preheader_lr_ph_tmp37 + -32'd268435456);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader.lr.ph*/
/*   %tmp38 = add i32 %tmp37, -268435456*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4))
begin
mandelbrot_bb5_preheader_lr_ph_tmp38_reg <= mandelbrot_bb5_preheader_lr_ph_tmp38;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_lr_ph_tmp38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_lr_ph_tmp38_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb1*/
/*   %i.015 = phi i32 [ 0, %bb5.preheader ], [ %24, %bb4 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd0)))
begin
mandelbrot_bb1_i_015 = mandelbrot_bb4_24_reg;
end
/* mandelbrot: %bb1*/
/*   %i.015 = phi i32 [ 0, %bb5.preheader ], [ %24, %bb4 ]*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb1_i_015 = 32'd0;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb1*/
/*   %i.015 = phi i32 [ 0, %bb5.preheader ], [ %24, %bb4 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd0)))
begin
mandelbrot_bb1_i_015_reg <= mandelbrot_bb1_i_015;
if (reset == 1'b0 && ^(mandelbrot_bb1_i_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_i_015_reg"); $finish; end
end
/* mandelbrot: %bb1*/
/*   %i.015 = phi i32 [ 0, %bb5.preheader ], [ %24, %bb4 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb1_i_015_reg <= mandelbrot_bb1_i_015;
if (reset == 1'b0 && ^(mandelbrot_bb1_i_015) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_i_015_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb1*/
/*   %count.014 = phi i32 [ %count.116, %bb5.preheader ], [ %23, %bb4 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd0)))
begin
mandelbrot_bb1_count_014 = mandelbrot_bb4_23_reg;
end
/* mandelbrot: %bb1*/
/*   %count.014 = phi i32 [ %count.116, %bb5.preheader ], [ %23, %bb4 ]*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb1_count_014 = mandelbrot_bb5_preheader_count_116_reg;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb1*/
/*   %count.014 = phi i32 [ %count.116, %bb5.preheader ], [ %23, %bb4 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb4_9) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb4_exitcond19_reg == 1'd0)))
begin
mandelbrot_bb1_count_014_reg <= mandelbrot_bb1_count_014;
if (reset == 1'b0 && ^(mandelbrot_bb1_count_014) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_count_014_reg"); $finish; end
end
/* mandelbrot: %bb1*/
/*   %count.014 = phi i32 [ %count.116, %bb5.preheader ], [ %23, %bb4 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb1_count_014_reg <= mandelbrot_bb1_count_014;
if (reset == 1'b0 && ^(mandelbrot_bb1_count_014) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_count_014_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb1*/
/*   %scevgep = getelementptr [64 x [64 x i8]]* @img, i32 0, i32 %i.015, i32 %tmp34*/
begin
mandelbrot_bb1_scevgep = (`TAG_g_img_a + ((64 * mandelbrot_bb1_i_015_reg) + (1 * mandelbrot_bb5_preheader_tmp34_reg)));
end
end
always @(posedge clk) begin
/* mandelbrot: %bb1*/
/*   %scevgep = getelementptr [64 x [64 x i8]]* @img, i32 0, i32 %i.015, i32 %tmp34*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb1_5))
begin
mandelbrot_bb1_scevgep_reg <= mandelbrot_bb1_scevgep;
if (reset == 1'b0 && ^(mandelbrot_bb1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_scevgep_reg"); $finish; end
end
end
always @(*) begin
mandelbrot_bb1_tmp20 = mandelbrot_bb1_tmp20_stage0_reg;
end
always @(*) begin
/* mandelbrot: %bb1*/
/*   %tmp21 = add i32 %tmp20, -536870912*/
begin
mandelbrot_bb1_tmp21 = (mandelbrot_bb1_tmp20 + -32'd536870912);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb1*/
/*   %tmp21 = add i32 %tmp20, -536870912*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb1_6))
begin
mandelbrot_bb1_tmp21_reg <= mandelbrot_bb1_tmp21;
if (reset == 1'b0 && ^(mandelbrot_bb1_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb1_tmp21_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %fiter.013 = phi i8 [ 0, %bb1 ], [ %18, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)))
begin
mandelbrot_bb2_fiter_013 = mandelbrot_bb2_18;
end
/* mandelbrot: %bb2*/
/*   %fiter.013 = phi i8 [ 0, %bb1 ], [ %18, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb2_fiter_013 = 8'd0;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %fiter.013 = phi i8 [ 0, %bb1 ], [ %18, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)))
begin
mandelbrot_bb2_fiter_013_reg <= mandelbrot_bb2_fiter_013;
if (reset == 1'b0 && ^(mandelbrot_bb2_fiter_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_fiter_013_reg"); $finish; end
end
/* mandelbrot: %bb2*/
/*   %fiter.013 = phi i8 [ 0, %bb1 ], [ %18, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb2_fiter_013_reg <= mandelbrot_bb2_fiter_013;
if (reset == 1'b0 && ^(mandelbrot_bb2_fiter_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_fiter_013_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %y.011 = phi i32 [ 0, %bb1 ], [ %tmp40, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd1) & loop_1_valid_bit_1)))
begin
mandelbrot_bb2_y_011 = mandelbrot_bb2_tmp40;
end
/* mandelbrot: %bb2*/
/*   %y.011 = phi i32 [ 0, %bb1 ], [ %tmp40, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb2_y_011 = 32'd0;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %y.011 = phi i32 [ 0, %bb1 ], [ %tmp40, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd1) & loop_1_valid_bit_1)))
begin
mandelbrot_bb2_y_011_reg <= mandelbrot_bb2_y_011;
if (reset == 1'b0 && ^(mandelbrot_bb2_y_011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_y_011_reg"); $finish; end
end
/* mandelbrot: %bb2*/
/*   %y.011 = phi i32 [ 0, %bb1 ], [ %tmp40, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb2_y_011_reg <= mandelbrot_bb2_y_011;
if (reset == 1'b0 && ^(mandelbrot_bb2_y_011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_y_011_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %x.010 = phi i32 [ 0, %bb1 ], [ %tmp31, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd1) & loop_1_valid_bit_1)))
begin
mandelbrot_bb2_x_010 = mandelbrot_bb2_tmp31;
end
/* mandelbrot: %bb2*/
/*   %x.010 = phi i32 [ 0, %bb1 ], [ %tmp31, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb2_x_010 = 32'd0;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %x.010 = phi i32 [ 0, %bb1 ], [ %tmp31, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd1) & loop_1_valid_bit_1)))
begin
mandelbrot_bb2_x_010_reg <= mandelbrot_bb2_x_010;
if (reset == 1'b0 && ^(mandelbrot_bb2_x_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_x_010_reg"); $finish; end
end
/* mandelbrot: %bb2*/
/*   %x.010 = phi i32 [ 0, %bb1 ], [ %tmp31, %bb2 ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb2_x_010_reg <= mandelbrot_bb2_x_010;
if (reset == 1'b0 && ^(mandelbrot_bb2_x_010) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_x_010_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %6 = sext i32 %x.010 to i64, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
begin
mandelbrot_bb2_6 = $signed(mandelbrot_bb2_x_010_reg);
end
end
always @(*) begin
mandelbrot_bb2_7 = mandelbrot_bb2_7_stage0_reg;
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %8 = ashr i64 %7, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_8 = ($signed(mandelbrot_bb2_7) >>> 64'd28);
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %9 = sext i32 %y.011 to i64, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
begin
mandelbrot_bb2_9 = $signed(mandelbrot_bb2_y_011_reg);
end
end
always @(*) begin
mandelbrot_bb2_10 = mandelbrot_bb2_10_stage0_reg;
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %11 = ashr i64 %10, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_11 = ($signed(mandelbrot_bb2_10) >>> 64'd28);
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %12 = add nsw i64 %11, %8, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_12 = (mandelbrot_bb2_11 + mandelbrot_bb2_8);
end
end
always @(*) begin
mandelbrot_bb2_13 = mandelbrot_bb2_13_stage0_reg;
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %14 = lshr i64 %13, 27, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_14 = (mandelbrot_bb2_13 >>> (64'd27 % 64'd64));
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %.tr = trunc i64 %14 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2__tr = mandelbrot_bb2_14[31:0];
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %15 = and i32 %.tr, -2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_15 = (mandelbrot_bb2__tr & -32'd2);
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %16 = icmp slt i64 %12, 1073741825, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
mandelbrot_bb2_16 = ($signed(mandelbrot_bb2_12_reg_stage1) < $signed(64'd1073741825));
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %17 = zext i1 %16 to i8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
mandelbrot_bb2_17 = mandelbrot_bb2_16;
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %18 = add i8 %17, %fiter.013, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
mandelbrot_bb2_18 = (mandelbrot_bb2_17 + mandelbrot_bb2_fiter_013_reg);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %18 = add i8 %17, %fiter.013, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 1'd0) & loop_1_valid_bit_2)))
begin
mandelbrot_bb2_18_reg <= mandelbrot_bb2_18;
if (reset == 1'b0 && ^(mandelbrot_bb2_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_18_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp24 = lshr i64 %7, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp24 = (mandelbrot_bb2_7 >>> (64'd28 % 64'd64));
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp25 = trunc i64 %tmp24 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp25 = mandelbrot_bb2_tmp24[31:0];
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp26 = add i32 %tmp21, %tmp25, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp26 = (mandelbrot_bb1_tmp21_reg + mandelbrot_bb2_tmp25);
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp29 = lshr i64 %10, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp29 = (mandelbrot_bb2_10 >>> (64'd28 % 64'd64));
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp30 = trunc i64 %tmp29 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp30 = mandelbrot_bb2_tmp29[31:0];
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp31 = sub i32 %tmp26, %tmp30, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp31 = (mandelbrot_bb2_tmp26 - mandelbrot_bb2_tmp30);
end
end
always @(*) begin
/* mandelbrot: %bb2*/
/*   %tmp40 = add i32 %tmp39, %15, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
mandelbrot_bb2_tmp40 = (mandelbrot_bb5_preheader_tmp39_reg + mandelbrot_bb2_15);
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %20 = icmp ult i8 %18, 50*/
begin
mandelbrot_bb4_20 = (mandelbrot_bb2_18_reg < 8'd50);
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %21 = zext i1 %20 to i8*/
begin
mandelbrot_bb4_21 = mandelbrot_bb4_20;
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %22 = zext i1 %20 to i32*/
begin
mandelbrot_bb4_22 = mandelbrot_bb4_20;
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %23 = add nsw i32 %22, %count.014*/
begin
mandelbrot_bb4_23 = (mandelbrot_bb4_22 + mandelbrot_bb1_count_014_reg);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb4*/
/*   %23 = add nsw i32 %22, %count.014*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
mandelbrot_bb4_23_reg <= mandelbrot_bb4_23;
if (reset == 1'b0 && ^(mandelbrot_bb4_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb4_23_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %24 = add nsw i32 %i.015, 1*/
begin
mandelbrot_bb4_24 = (mandelbrot_bb1_i_015_reg + 32'd1);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb4*/
/*   %24 = add nsw i32 %i.015, 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
mandelbrot_bb4_24_reg <= mandelbrot_bb4_24;
if (reset == 1'b0 && ^(mandelbrot_bb4_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb4_24_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb4*/
/*   %exitcond19 = icmp eq i32 %24, 64*/
begin
mandelbrot_bb4_exitcond19 = (mandelbrot_bb4_24 == 32'd64);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb4*/
/*   %exitcond19 = icmp eq i32 %24, 64*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
mandelbrot_bb4_exitcond19_reg <= mandelbrot_bb4_exitcond19;
if (reset == 1'b0 && ^(mandelbrot_bb4_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb4_exitcond19_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb6*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
mandelbrot_bb6_indvar_next = (mandelbrot_bb5_preheader_indvar_reg + 32'd1);
end
end
always @(*) begin
/* mandelbrot: %bb6*/
/*   %exitcond33 = icmp eq i32 %indvar.next, %tmp32*/
begin
mandelbrot_bb6_exitcond33 = (mandelbrot_bb6_indvar_next == mandelbrot_bb5_preheader_lr_ph_tmp32_reg);
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader*/
/*   %indvar = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %indvar.next, %bb6 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb5_preheader_indvar = 32'd0;
end
/* mandelbrot: %bb5.preheader*/
/*   %indvar = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %indvar.next, %bb6 ]*/
else /* if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd0))) */
begin
mandelbrot_bb5_preheader_indvar = mandelbrot_bb6_indvar_next;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader*/
/*   %indvar = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %indvar.next, %bb6 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb5_preheader_indvar_reg <= mandelbrot_bb5_preheader_indvar;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_indvar_reg"); $finish; end
end
/* mandelbrot: %bb5.preheader*/
/*   %indvar = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %indvar.next, %bb6 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd0)))
begin
mandelbrot_bb5_preheader_indvar_reg <= mandelbrot_bb5_preheader_indvar;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_indvar_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader*/
/*   %count.116 = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %23, %bb6 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb5_preheader_count_116 = 32'd0;
end
/* mandelbrot: %bb5.preheader*/
/*   %count.116 = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %23, %bb6 ]*/
else /* if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd0))) */
begin
mandelbrot_bb5_preheader_count_116 = mandelbrot_bb4_23_reg;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader*/
/*   %count.116 = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %23, %bb6 ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_lr_ph_4) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb5_preheader_count_116_reg <= mandelbrot_bb5_preheader_count_116;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_count_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_count_116_reg"); $finish; end
end
/* mandelbrot: %bb5.preheader*/
/*   %count.116 = phi i32 [ 0, %bb5.preheader.lr.ph ], [ %23, %bb6 ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_bb6_10) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_bb6_exitcond33 == 1'd0)))
begin
mandelbrot_bb5_preheader_count_116_reg <= mandelbrot_bb5_preheader_count_116;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_count_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_count_116_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader*/
/*   %tmp34 = add i32 %1, %indvar*/
begin
mandelbrot_bb5_preheader_tmp34 = (mandelbrot_entry_1_reg + mandelbrot_bb5_preheader_indvar_reg);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader*/
/*   %tmp34 = add i32 %1, %indvar*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11))
begin
mandelbrot_bb5_preheader_tmp34_reg <= mandelbrot_bb5_preheader_tmp34;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_tmp34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_tmp34_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader*/
/*   %tmp36 = shl i32 %indvar, 23*/
begin
mandelbrot_bb5_preheader_tmp36 = (mandelbrot_bb5_preheader_indvar_reg <<< (32'd23 % 32));
end
end
always @(*) begin
/* mandelbrot: %bb5.preheader*/
/*   %tmp39 = add i32 %tmp38, %tmp36*/
begin
mandelbrot_bb5_preheader_tmp39 = (mandelbrot_bb5_preheader_lr_ph_tmp38_reg + mandelbrot_bb5_preheader_tmp36);
end
end
always @(posedge clk) begin
/* mandelbrot: %bb5.preheader*/
/*   %tmp39 = add i32 %tmp38, %tmp36*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb5_preheader_11))
begin
mandelbrot_bb5_preheader_tmp39_reg <= mandelbrot_bb5_preheader_tmp39;
if (reset == 1'b0 && ^(mandelbrot_bb5_preheader_tmp39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb5_preheader_tmp39_reg"); $finish; end
end
end
always @(*) begin
/* mandelbrot: %bb7.bb8_crit_edge*/
/*   %phitmp = inttoptr i32 %23 to i8**/
begin
mandelbrot_bb7_bb8_crit_edge_phitmp = mandelbrot_bb4_23_reg;
end
end
always @(*) begin
/* mandelbrot: %bb8*/
/*   %count.1.lcssa = phi i8* [ %phitmp, %bb7.bb8_crit_edge ], [ null, %entry ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_entry_3) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_entry_5 == 1'd0)))
begin
mandelbrot_bb8_count_1_lcssa = 0;
end
/* mandelbrot: %bb8*/
/*   %count.1.lcssa = phi i8* [ %phitmp, %bb7.bb8_crit_edge ], [ null, %entry ]*/
else /* if (((cur_state == LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) & (memory_controller_waitrequest == 1'd0))) */
begin
mandelbrot_bb8_count_1_lcssa = mandelbrot_bb7_bb8_crit_edge_phitmp;
end
end
always @(posedge clk) begin
/* mandelbrot: %bb8*/
/*   %count.1.lcssa = phi i8* [ %phitmp, %bb7.bb8_crit_edge ], [ null, %entry ]*/
if ((((cur_state == LEGUP_F_mandelbrot_BB_entry_3) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_entry_5 == 1'd0)))
begin
mandelbrot_bb8_count_1_lcssa_reg <= mandelbrot_bb8_count_1_lcssa;
if (reset == 1'b0 && ^(mandelbrot_bb8_count_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb8_count_1_lcssa_reg"); $finish; end
end
/* mandelbrot: %bb8*/
/*   %count.1.lcssa = phi i8* [ %phitmp, %bb7.bb8_crit_edge ], [ null, %entry ]*/
if (((cur_state == LEGUP_F_mandelbrot_BB_bb7_bb8_crit_edge_12) & (memory_controller_waitrequest == 1'd0)))
begin
mandelbrot_bb8_count_1_lcssa_reg <= mandelbrot_bb8_count_1_lcssa;
if (reset == 1'b0 && ^(mandelbrot_bb8_count_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb8_count_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
loop_1_pipeline_start = 1'd0;
if (reset)
begin
loop_1_pipeline_start = 1'd0;
end
if (((cur_state == LEGUP_F_mandelbrot_BB_bb1_6) & (memory_controller_waitrequest == 1'd0)))
begin
loop_1_pipeline_start = 1'd1;
end
end
always @(posedge clk) begin
if (reset)
begin
loop_1_started <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))))
begin
loop_1_started <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_1) & loop_1_valid_bit_2))))
begin
loop_1_started <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_1_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))))
begin
loop_1_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd0)))
begin
loop_1_ii_state <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd1)))
begin
loop_1_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_1_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))))
begin
loop_1_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 1'd1)) & loop_1_valid_bit_1)))
begin
loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
if (reset == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
end
if (reset)
begin
loop_1_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_1_epilogue <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond))))
begin
loop_1_epilogue <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_1) & loop_1_valid_bit_2))))
begin
loop_1_epilogue <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond))))));
if (reset == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 1'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
end
if (reset)
begin
loop_1_valid_bit_0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_1_valid_bit_1 <= loop_1_valid_bit_0;
if (reset == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
end
if (reset)
begin
loop_1_valid_bit_1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_1_valid_bit_2 <= loop_1_valid_bit_1;
if (reset == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
end
if (reset)
begin
loop_1_valid_bit_2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
end
end
always @(posedge clk) begin
if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 1'd1) & loop_1_valid_bit_1)))
begin
mandelbrot_bb2_12_reg_stage1 <= mandelbrot_bb2_12;
if (reset == 1'b0 && ^(mandelbrot_bb2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_bb2_12_reg_stage1"); $finish; end
end
end
always @(*) begin
loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 8'd49);
end
always @(*) begin
loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_1) & loop_1_valid_bit_2)));
end
always @(*) begin
lpm_mult_mandelbrot_bb1_tmp20_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* mandelbrot: %bb1*/
/*   %tmp20 = mul i32 %i.015, 12582912*/
if ((lpm_mult_mandelbrot_bb1_tmp20_en == 1'd1))
begin
mandelbrot_bb1_tmp20_stage0_reg <= (mandelbrot_bb1_i_015_reg * 32'd12582912);
end
end
always @(*) begin
lpm_mult_mandelbrot_bb2_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %7 = mul nsw i64 %6, %6, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_mandelbrot_bb2_7_en == 1'd1))
begin
mandelbrot_bb2_7_stage0_reg <= (mandelbrot_bb2_6 * mandelbrot_bb2_6);
end
end
always @(*) begin
lpm_mult_mandelbrot_bb2_10_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %10 = mul nsw i64 %9, %9, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_mandelbrot_bb2_10_en == 1'd1))
begin
mandelbrot_bb2_10_stage0_reg <= (mandelbrot_bb2_9 * mandelbrot_bb2_9);
end
end
always @(*) begin
lpm_mult_mandelbrot_bb2_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* mandelbrot: %bb2*/
/*   %13 = mul nsw i64 %9, %6, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_mandelbrot_bb2_13_en == 1'd1))
begin
mandelbrot_bb2_13_stage0_reg <= (mandelbrot_bb2_9 * mandelbrot_bb2_6);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* mandelbrot: %bb8*/
/*   ret i8* %count.1.lcssa*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb8_13))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_enable_a = 1'd1;
end
/* mandelbrot: %bb4*/
/*   volatile store i8 %21, i8* %scevgep, align 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_address_a = mandelbrot_entry_0;
end
/* mandelbrot: %bb4*/
/*   volatile store i8 %21, i8* %scevgep, align 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
memory_controller_address_a = mandelbrot_bb1_scevgep_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* mandelbrot: %bb4*/
/*   volatile store i8 %21, i8* %scevgep, align 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* mandelbrot: %bb4*/
/*   volatile store i8 %21, i8* %scevgep, align 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
memory_controller_in_a = mandelbrot_bb4_21;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* mandelbrot: %entry*/
/*   %1 = load i32* %0, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_size_a = 2'd2;
end
/* mandelbrot: %bb4*/
/*   volatile store i8 %21, i8* %scevgep, align 1*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb4_8))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_address_b = mandelbrot_entry_3;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* mandelbrot: %entry*/
/*   %4 = load i32* %3, align 4*/
if ((cur_state == LEGUP_F_mandelbrot_BB_entry_1))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* mandelbrot: %bb8*/
/*   ret i8* %count.1.lcssa*/
if ((cur_state == LEGUP_F_mandelbrot_BB_bb8_13))
begin
return_val <= mandelbrot_bb8_count_1_lcssa_reg;
if (reset == 1'b0 && ^(mandelbrot_bb8_count_1_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_pthreadcall_mandelbrot
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_threadarg,
	arg_threadID,
	arg_threadIDValue
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7 = 4'd7;
parameter [3:0] LEGUP_loop_pipeline_wait_loop_2_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14 = 4'd14;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_threadarg;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_threadID;
input [31:0] arg_threadIDValue;
reg [3:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_0_1_reg;
reg [31:0] legup_pthreadcall_mandelbrot_0_2;
reg [31:0] legup_pthreadcall_mandelbrot_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_0_4_reg;
reg [31:0] legup_pthreadcall_mandelbrot_0_5;
reg [31:0] legup_pthreadcall_mandelbrot_0_5_reg;
reg  legup_pthreadcall_mandelbrot_0_6;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp37_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_i_015_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_count_014_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_bb1_i_scevgep_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_bb1_i_scevgep_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_tmp20_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_tmp21_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_tmp21_i_reg;
reg [7:0] legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i;
reg [7:0] legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_y_011_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_x_010_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_7;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_8;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_9;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_10;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_11;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_12;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_13;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_14;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_15;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i__tr_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_16;
reg  legup_pthreadcall_mandelbrot_bb2_i_17;
reg [7:0] legup_pthreadcall_mandelbrot_bb2_i_18;
reg [7:0] legup_pthreadcall_mandelbrot_bb2_i_19;
reg [7:0] legup_pthreadcall_mandelbrot_bb2_i_19_reg;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_tmp24_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_tmp25_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_tmp26_i;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_tmp29_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_tmp30_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_tmp31_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb2_i_tmp40_i;
reg  legup_pthreadcall_mandelbrot_bb4_i_21;
reg [7:0] legup_pthreadcall_mandelbrot_bb4_i_22;
reg [31:0] legup_pthreadcall_mandelbrot_bb4_i_23;
reg [31:0] legup_pthreadcall_mandelbrot_bb4_i_24;
reg [31:0] legup_pthreadcall_mandelbrot_bb4_i_24_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb4_i_25;
reg [31:0] legup_pthreadcall_mandelbrot_bb4_i_25_reg;
reg  legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i;
reg  legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb6_i_indvar_next_i;
reg  legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i_reg;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp36_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i;
reg [31:0] legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_bb7_bb8_crit_edge_i_phitmp_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg;
reg  loop_2_pipeline_start;
reg  loop_2_started;
reg  loop_2_ii_state;
reg [7:0] loop_2_i_stage0;
reg  loop_2_epilogue;
reg  loop_2_valid_bit_0;
reg  loop_2_valid_bit_1;
reg  loop_2_valid_bit_2;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_13_reg_stage1;
reg  loop_2_pipeline_exit_cond;
reg  loop_2_pipeline_finish;
reg  lpm_mult_legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_en;
reg [31:0] legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_stage0_reg;
reg  lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_8_en;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_8_stage0_reg;
reg  lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_11_en;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_11_stage0_reg;
reg  lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_14_en;
reg [63:0] legup_pthreadcall_mandelbrot_bb2_i_14_stage0_reg;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_0_6 == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_0_6 == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_2_8;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_loop_pipeline_wait_loop_2_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_2_8;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_loop_pipeline_wait_loop_2_8) & (memory_controller_waitrequest == 1'd0)) & (loop_2_pipeline_finish == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_loop_pipeline_wait_loop_2_8) & (memory_controller_waitrequest == 1'd0)) & (loop_2_pipeline_finish == 1'd0)))
begin
cur_state <= LEGUP_loop_pipeline_wait_loop_2_8;
if (reset == 1'b0 && ^(LEGUP_loop_pipeline_wait_loop_2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (reset == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %1 = bitcast i8* %threadarg to i32**/
begin
legup_pthreadcall_mandelbrot_0_1 = arg_threadarg;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %1 = bitcast i8* %threadarg to i32**/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
legup_pthreadcall_mandelbrot_0_1_reg <= legup_pthreadcall_mandelbrot_0_1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_0_1_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
begin
legup_pthreadcall_mandelbrot_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4))
begin
legup_pthreadcall_mandelbrot_0_2_reg <= legup_pthreadcall_mandelbrot_0_2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_0_2_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %3 = getelementptr inbounds i8* %threadarg, i32 4*/
begin
legup_pthreadcall_mandelbrot_0_3 = (arg_threadarg + (1 * 32'd4));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %4 = bitcast i8* %3 to i32**/
begin
legup_pthreadcall_mandelbrot_0_4 = legup_pthreadcall_mandelbrot_0_3;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %4 = bitcast i8* %3 to i32**/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
legup_pthreadcall_mandelbrot_0_4_reg <= legup_pthreadcall_mandelbrot_0_4;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_0_4_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
begin
legup_pthreadcall_mandelbrot_0_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4))
begin
legup_pthreadcall_mandelbrot_0_5_reg <= legup_pthreadcall_mandelbrot_0_5;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_0_5_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %0*/
/*   %6 = icmp slt i32 %2, %5*/
begin
legup_pthreadcall_mandelbrot_0_6 = ($signed(legup_pthreadcall_mandelbrot_0_2) < $signed(legup_pthreadcall_mandelbrot_0_5));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.lr.ph.i*/
/*   %tmp32.i = sub i32 %5, %2*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i = (legup_pthreadcall_mandelbrot_0_5_reg - legup_pthreadcall_mandelbrot_0_2_reg);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.lr.ph.i*/
/*   %tmp32.i = sub i32 %5, %2*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.lr.ph.i*/
/*   %tmp37.i = shl i32 %2, 23*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp37_i = (legup_pthreadcall_mandelbrot_0_2_reg <<< (32'd23 % 32));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.lr.ph.i*/
/*   %tmp38.i = add i32 %tmp37.i, -268435456*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i = (legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp37_i + -32'd268435456);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.lr.ph.i*/
/*   %tmp38.i = add i32 %tmp37.i, -268435456*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %i.015.i = phi i32 [ 0, %bb5.preheader.i ], [ %25, %bb4.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_i_015_i = legup_pthreadcall_mandelbrot_bb4_i_25_reg;
end
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %i.015.i = phi i32 [ 0, %bb5.preheader.i ], [ %25, %bb4.i ]*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb1_i_i_015_i = 32'd0;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %i.015.i = phi i32 [ 0, %bb5.preheader.i ], [ %25, %bb4.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_i_015_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_i_015_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %i.015.i = phi i32 [ 0, %bb5.preheader.i ], [ %25, %bb4.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_i_015_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_i_015_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %count.014.i = phi i32 [ %count.116.i, %bb5.preheader.i ], [ %24, %bb4.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_count_014_i = legup_pthreadcall_mandelbrot_bb4_i_24_reg;
end
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %count.014.i = phi i32 [ %count.116.i, %bb5.preheader.i ], [ %24, %bb4.i ]*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb1_i_count_014_i = legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %count.014.i = phi i32 [ %count.116.i, %bb5.preheader.i ], [ %24, %bb4.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_10) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_count_014_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_count_014_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %count.014.i = phi i32 [ %count.116.i, %bb5.preheader.i ], [ %24, %bb4.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_count_014_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_count_014_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %scevgep.i = getelementptr [64 x [64 x i8]]* @img, i32 0, i32 %i.015.i, i32 %tmp34.i*/
begin
legup_pthreadcall_mandelbrot_bb1_i_scevgep_i = (`TAG_g_img_a + ((64 * legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg) + (1 * legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i_reg)));
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %scevgep.i = getelementptr [64 x [64 x i8]]* @img, i32 0, i32 %i.015.i, i32 %tmp34.i*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_6))
begin
legup_pthreadcall_mandelbrot_bb1_i_scevgep_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_scevgep_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_scevgep_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_scevgep_i_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_bb1_i_tmp20_i = legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_stage0_reg;
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %tmp21.i = add i32 %tmp20.i, -536870912*/
begin
legup_pthreadcall_mandelbrot_bb1_i_tmp21_i = (legup_pthreadcall_mandelbrot_bb1_i_tmp20_i + -32'd536870912);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %tmp21.i = add i32 %tmp20.i, -536870912*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7))
begin
legup_pthreadcall_mandelbrot_bb1_i_tmp21_i_reg <= legup_pthreadcall_mandelbrot_bb1_i_tmp21_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb1_i_tmp21_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb1_i_tmp21_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %fiter.013.i = phi i8 [ 0, %bb1.i ], [ %19, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd0) & loop_2_valid_bit_2)))
begin
legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i = legup_pthreadcall_mandelbrot_bb2_i_19;
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %fiter.013.i = phi i8 [ 0, %bb1.i ], [ %19, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i = 8'd0;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %fiter.013.i = phi i8 [ 0, %bb1.i ], [ %19, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd0) & loop_2_valid_bit_2)))
begin
legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %fiter.013.i = phi i8 [ 0, %bb1.i ], [ %19, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %y.011.i = phi i32 [ 0, %bb1.i ], [ %tmp40.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd1) & loop_2_valid_bit_1)))
begin
legup_pthreadcall_mandelbrot_bb2_i_y_011_i = legup_pthreadcall_mandelbrot_bb2_i_tmp40_i;
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %y.011.i = phi i32 [ 0, %bb1.i ], [ %tmp40.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb2_i_y_011_i = 32'd0;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %y.011.i = phi i32 [ 0, %bb1.i ], [ %tmp40.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd1) & loop_2_valid_bit_1)))
begin
legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_y_011_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_y_011_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %y.011.i = phi i32 [ 0, %bb1.i ], [ %tmp40.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_y_011_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_y_011_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %x.010.i = phi i32 [ 0, %bb1.i ], [ %tmp31.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd1) & loop_2_valid_bit_1)))
begin
legup_pthreadcall_mandelbrot_bb2_i_x_010_i = legup_pthreadcall_mandelbrot_bb2_i_tmp31_i;
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %x.010.i = phi i32 [ 0, %bb1.i ], [ %tmp31.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb2_i_x_010_i = 32'd0;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %x.010.i = phi i32 [ 0, %bb1.i ], [ %tmp31.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd1) & loop_2_valid_bit_1)))
begin
legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_x_010_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_x_010_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %x.010.i = phi i32 [ 0, %bb1.i ], [ %tmp31.i, %bb2.i ], !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg <= legup_pthreadcall_mandelbrot_bb2_i_x_010_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_x_010_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %7 = sext i32 %x.010.i to i64, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
begin
legup_pthreadcall_mandelbrot_bb2_i_7 = $signed(legup_pthreadcall_mandelbrot_bb2_i_x_010_i_reg);
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_bb2_i_8 = legup_pthreadcall_mandelbrot_bb2_i_8_stage0_reg;
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %9 = ashr i64 %8, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_9 = ($signed(legup_pthreadcall_mandelbrot_bb2_i_8) >>> 64'd28);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %10 = sext i32 %y.011.i to i64, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !1, !legup.pipeline.stage !1
start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
begin
legup_pthreadcall_mandelbrot_bb2_i_10 = $signed(legup_pthreadcall_mandelbrot_bb2_i_y_011_i_reg);
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_bb2_i_11 = legup_pthreadcall_mandelbrot_bb2_i_11_stage0_reg;
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %12 = ashr i64 %11, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_12 = ($signed(legup_pthreadcall_mandelbrot_bb2_i_11) >>> 64'd28);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %13 = add nsw i64 %12, %9, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_13 = (legup_pthreadcall_mandelbrot_bb2_i_12 + legup_pthreadcall_mandelbrot_bb2_i_9);
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_bb2_i_14 = legup_pthreadcall_mandelbrot_bb2_i_14_stage0_reg;
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %15 = lshr i64 %14, 27, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_15 = (legup_pthreadcall_mandelbrot_bb2_i_14 >>> (64'd27 % 64'd64));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %.tr.i = trunc i64 %15 to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i__tr_i = legup_pthreadcall_mandelbrot_bb2_i_15[31:0];
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %16 = and i32 %.tr.i, -2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_16 = (legup_pthreadcall_mandelbrot_bb2_i__tr_i & -32'd2);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %17 = icmp slt i64 %13, 1073741825, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
legup_pthreadcall_mandelbrot_bb2_i_17 = ($signed(legup_pthreadcall_mandelbrot_bb2_i_13_reg_stage1) < $signed(64'd1073741825));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %18 = zext i1 %17 to i8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
legup_pthreadcall_mandelbrot_bb2_i_18 = legup_pthreadcall_mandelbrot_bb2_i_17;
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %19 = add i8 %18, %fiter.013.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
begin
legup_pthreadcall_mandelbrot_bb2_i_19 = (legup_pthreadcall_mandelbrot_bb2_i_18 + legup_pthreadcall_mandelbrot_bb2_i_fiter_013_i_reg);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %19 = add i8 %18, %fiter.013.i, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !2
start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
if ((~(memory_controller_waitrequest) & ((loop_2_ii_state == 1'd0) & loop_2_valid_bit_2)))
begin
legup_pthreadcall_mandelbrot_bb2_i_19_reg <= legup_pthreadcall_mandelbrot_bb2_i_19;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_19_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp24.i = lshr i64 %8, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp24_i = (legup_pthreadcall_mandelbrot_bb2_i_8 >>> (64'd28 % 64'd64));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp25.i = trunc i64 %tmp24.i to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp25_i = legup_pthreadcall_mandelbrot_bb2_i_tmp24_i[31:0];
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp26.i = add i32 %tmp21.i, %tmp25.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp26_i = (legup_pthreadcall_mandelbrot_bb1_i_tmp21_i_reg + legup_pthreadcall_mandelbrot_bb2_i_tmp25_i);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp29.i = lshr i64 %11, 28, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp29_i = (legup_pthreadcall_mandelbrot_bb2_i_11 >>> (64'd28 % 64'd64));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp30.i = trunc i64 %tmp29.i to i32, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp30_i = legup_pthreadcall_mandelbrot_bb2_i_tmp29_i[31:0];
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp31.i = sub i32 %tmp26.i, %tmp30.i, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp31_i = (legup_pthreadcall_mandelbrot_bb2_i_tmp26_i - legup_pthreadcall_mandelbrot_bb2_i_tmp30_i);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %tmp40.i = add i32 %tmp39.i, %16, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
begin
legup_pthreadcall_mandelbrot_bb2_i_tmp40_i = (legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i_reg + legup_pthreadcall_mandelbrot_bb2_i_16);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %21 = icmp ult i8 %19, 50*/
begin
legup_pthreadcall_mandelbrot_bb4_i_21 = (legup_pthreadcall_mandelbrot_bb2_i_19_reg < 8'd50);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %22 = zext i1 %21 to i8*/
begin
legup_pthreadcall_mandelbrot_bb4_i_22 = legup_pthreadcall_mandelbrot_bb4_i_21;
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %23 = zext i1 %21 to i32*/
begin
legup_pthreadcall_mandelbrot_bb4_i_23 = legup_pthreadcall_mandelbrot_bb4_i_21;
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %24 = add nsw i32 %23, %count.014.i*/
begin
legup_pthreadcall_mandelbrot_bb4_i_24 = (legup_pthreadcall_mandelbrot_bb4_i_23 + legup_pthreadcall_mandelbrot_bb1_i_count_014_i_reg);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %24 = add nsw i32 %23, %count.014.i*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
legup_pthreadcall_mandelbrot_bb4_i_24_reg <= legup_pthreadcall_mandelbrot_bb4_i_24;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb4_i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb4_i_24_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %25 = add nsw i32 %i.015.i, 1*/
begin
legup_pthreadcall_mandelbrot_bb4_i_25 = (legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg + 32'd1);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %25 = add nsw i32 %i.015.i, 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
legup_pthreadcall_mandelbrot_bb4_i_25_reg <= legup_pthreadcall_mandelbrot_bb4_i_25;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb4_i_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb4_i_25_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %exitcond19.i = icmp eq i32 %25, 64*/
begin
legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i = (legup_pthreadcall_mandelbrot_bb4_i_25 == 32'd64);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   %exitcond19.i = icmp eq i32 %25, 64*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg <= legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb4_i_exitcond19_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb6.i*/
/*   %indvar.next.i = add i32 %indvar.i, 1*/
begin
legup_pthreadcall_mandelbrot_bb6_i_indvar_next_i = (legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg + 32'd1);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb6.i*/
/*   %exitcond33.i = icmp eq i32 %indvar.next.i, %tmp32.i*/
begin
legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i = (legup_pthreadcall_mandelbrot_bb6_i_indvar_next_i == legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp32_i_reg);
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %indvar.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %indvar.next.i, %bb6.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i = 32'd0;
end
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %indvar.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %indvar.next.i, %bb6.i ]*/
else /* if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i = legup_pthreadcall_mandelbrot_bb6_i_indvar_next_i;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %indvar.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %indvar.next.i, %bb6.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %indvar.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %indvar.next.i, %bb6.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %count.116.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %24, %bb6.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i = 32'd0;
end
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %count.116.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %24, %bb6.i ]*/
else /* if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i = legup_pthreadcall_mandelbrot_bb4_i_24_reg;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %count.116.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %24, %bb6.i ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_lr_ph_i_5) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %count.116.i = phi i32 [ 0, %bb5.preheader.lr.ph.i ], [ %24, %bb6.i ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb6_i_11) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_bb6_i_exitcond33_i == 1'd0)))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_count_116_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %tmp34.i = add i32 %2, %indvar.i*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i = (legup_pthreadcall_mandelbrot_0_2_reg + legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %tmp34.i = add i32 %2, %indvar.i*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp34_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %tmp36.i = shl i32 %indvar.i, 23*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp36_i = (legup_pthreadcall_mandelbrot_bb5_preheader_i_indvar_i_reg <<< (32'd23 % 32));
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %tmp39.i = add i32 %tmp38.i, %tmp36.i*/
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i = (legup_pthreadcall_mandelbrot_bb5_preheader_lr_ph_i_tmp38_i_reg + legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp36_i);
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb5.preheader.i*/
/*   %tmp39.i = add i32 %tmp38.i, %tmp36.i*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb5_preheader_i_12))
begin
legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i_reg <= legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb5_preheader_i_tmp39_i_reg"); $finish; end
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %bb7.bb8_crit_edge.i*/
/*   %phitmp.i = inttoptr i32 %24 to i8**/
begin
legup_pthreadcall_mandelbrot_bb7_bb8_crit_edge_i_phitmp_i = legup_pthreadcall_mandelbrot_bb4_i_24_reg;
end
end
always @(*) begin
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   %count.1.lcssa.i = phi i8* [ %phitmp.i, %bb7.bb8_crit_edge.i ], [ null, %0 ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_0_6 == 1'd0)))
begin
legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i = 0;
end
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   %count.1.lcssa.i = phi i8* [ %phitmp.i, %bb7.bb8_crit_edge.i ], [ null, %0 ]*/
else /* if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) & (memory_controller_waitrequest == 1'd0))) */
begin
legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i = legup_pthreadcall_mandelbrot_bb7_bb8_crit_edge_i_phitmp_i;
end
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   %count.1.lcssa.i = phi i8* [ %phitmp.i, %bb7.bb8_crit_edge.i ], [ null, %0 ]*/
if ((((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadcall_mandelbrot_0_6 == 1'd0)))
begin
legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg <= legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   %count.1.lcssa.i = phi i8* [ %phitmp.i, %bb7.bb8_crit_edge.i ], [ null, %0 ]*/
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb7_bb8_crit_edge_i_13) & (memory_controller_waitrequest == 1'd0)))
begin
legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg <= legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg"); $finish; end
end
end
always @(*) begin
loop_2_pipeline_start = 1'd0;
if (reset)
begin
loop_2_pipeline_start = 1'd0;
end
if (((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb1_i_7) & (memory_controller_waitrequest == 1'd0)))
begin
loop_2_pipeline_start = 1'd1;
end
end
always @(posedge clk) begin
if (reset)
begin
loop_2_started <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_started"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_pipeline_start & ~(loop_2_started))))
begin
loop_2_started <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_started"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_epilogue & (~(loop_2_valid_bit_1) & loop_2_valid_bit_2))))
begin
loop_2_started <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_started"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_2_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_pipeline_start & ~(loop_2_started))))
begin
loop_2_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_ii_state == 1'd0)))
begin
loop_2_ii_state <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_ii_state"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_ii_state == 1'd1)))
begin
loop_2_ii_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_ii_state"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_2_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_i_stage0"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_pipeline_start & ~(loop_2_started))))
begin
loop_2_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_i_stage0"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_2_ii_state == 1'd1)) & loop_2_valid_bit_1)))
begin
loop_2_i_stage0 <= (loop_2_i_stage0 + 1'd1);
if (reset == 1'b0 && ^((loop_2_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_i_stage0"); $finish; end
end
if (reset)
begin
loop_2_i_stage0 <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_i_stage0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
loop_2_epilogue <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_epilogue"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_started & ((loop_2_ii_state == 1'd0) & loop_2_pipeline_exit_cond))))
begin
loop_2_epilogue <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_epilogue"); $finish; end
end
if (((memory_controller_waitrequest == 1'd0) & (loop_2_epilogue & (~(loop_2_valid_bit_1) & loop_2_valid_bit_2))))
begin
loop_2_epilogue <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_epilogue"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_2_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_2_pipeline_start & ~(loop_2_started))) | ((loop_2_started & ~(loop_2_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_2_started & ((loop_2_ii_state == 1'd0) & loop_2_pipeline_exit_cond))))));
if (reset == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_2_pipeline_start & ~(loop_2_started))) | ((loop_2_started & ~(loop_2_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_2_started & ((loop_2_ii_state == 1'd0) & loop_2_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_0"); $finish; end
end
if (reset)
begin
loop_2_valid_bit_0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_0"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_2_valid_bit_1 <= loop_2_valid_bit_0;
if (reset == 1'b0 && ^(loop_2_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_1"); $finish; end
end
if (reset)
begin
loop_2_valid_bit_1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_1"); $finish; end
end
end
always @(posedge clk) begin
if ((memory_controller_waitrequest == 1'd0))
begin
loop_2_valid_bit_2 <= loop_2_valid_bit_1;
if (reset == 1'b0 && ^(loop_2_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_2"); $finish; end
end
if (reset)
begin
loop_2_valid_bit_2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_2_valid_bit_2"); $finish; end
end
end
always @(posedge clk) begin
if (((memory_controller_waitrequest == 1'd0) & ((loop_2_ii_state == 1'd1) & loop_2_valid_bit_1)))
begin
legup_pthreadcall_mandelbrot_bb2_i_13_reg_stage1 <= legup_pthreadcall_mandelbrot_bb2_i_13;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_bb2_i_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_bb2_i_13_reg_stage1"); $finish; end
end
end
always @(*) begin
loop_2_pipeline_exit_cond = (loop_2_i_stage0 == 8'd49);
end
always @(*) begin
loop_2_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_2_epilogue & (~(loop_2_valid_bit_1) & loop_2_valid_bit_2)));
end
always @(*) begin
lpm_mult_legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb1.i*/
/*   %tmp20.i = mul i32 %i.015.i, 12582912*/
if ((lpm_mult_legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_en == 1'd1))
begin
legup_pthreadcall_mandelbrot_bb1_i_tmp20_i_stage0_reg <= (legup_pthreadcall_mandelbrot_bb1_i_i_015_i_reg * 32'd12582912);
end
end
always @(*) begin
lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %8 = mul nsw i64 %7, %7, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_8_en == 1'd1))
begin
legup_pthreadcall_mandelbrot_bb2_i_8_stage0_reg <= (legup_pthreadcall_mandelbrot_bb2_i_7 * legup_pthreadcall_mandelbrot_bb2_i_7);
end
end
always @(*) begin
lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %11 = mul nsw i64 %10, %10, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_11_en == 1'd1))
begin
legup_pthreadcall_mandelbrot_bb2_i_11_stage0_reg <= (legup_pthreadcall_mandelbrot_bb2_i_10 * legup_pthreadcall_mandelbrot_bb2_i_10);
end
end
always @(*) begin
lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_14_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* legup_pthreadcall_mandelbrot: %bb2.i*/
/*   %14 = mul nsw i64 %10, %7, !legup.pipeline.start_time !1, !legup.pipeline.avail_time !2, !legup.pipeline.stage !1
start_time: 0 avail_time: 1 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 1 % 2 = 1*/
if ((lpm_mult_legup_pthreadcall_mandelbrot_bb2_i_14_en == 1'd1))
begin
legup_pthreadcall_mandelbrot_bb2_i_14_stage0_reg <= (legup_pthreadcall_mandelbrot_bb2_i_10 * legup_pthreadcall_mandelbrot_bb2_i_7);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   store i32 %threadIDValue, i32* %threadID, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   volatile store i8 %22, i8* %scevgep.i, align 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   store i32 %threadIDValue, i32* %threadID, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
memory_controller_address_a = arg_threadID;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_address_a = legup_pthreadcall_mandelbrot_0_1_reg;
end
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   volatile store i8 %22, i8* %scevgep.i, align 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
memory_controller_address_a = legup_pthreadcall_mandelbrot_bb1_i_scevgep_i_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   store i32 %threadIDValue, i32* %threadID, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   volatile store i8 %22, i8* %scevgep.i, align 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   store i32 %threadIDValue, i32* %threadID, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
memory_controller_in_a = arg_threadIDValue;
end
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   volatile store i8 %22, i8* %scevgep.i, align 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
memory_controller_in_a = legup_pthreadcall_mandelbrot_bb4_i_22;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   store i32 %threadIDValue, i32* %threadID, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %2 = load i32* %1, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* legup_pthreadcall_mandelbrot: %bb4.i*/
/*   volatile store i8 %22, i8* %scevgep.i, align 1*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_bb4_i_9))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_address_b = legup_pthreadcall_mandelbrot_0_4_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* legup_pthreadcall_mandelbrot: %0*/
/*   %5 = load i32* %4, align 4*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* legup_pthreadcall_mandelbrot: %mandelbrot.exit*/
/*   ret void*/
if ((cur_state == LEGUP_F_legup_pthreadcall_mandelbrot_BB_mandelbrot_exit_14))
begin
return_val <= legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_mandelbrot_exit_count_1_lcssa_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_pthreadpoll
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_threadID
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_legup_pthreadpoll_BB_entry_1 = 2'd1;
parameter [1:0] LEGUP_F_legup_pthreadpoll_BB_entry_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] return_val;
input [31:0] arg_threadID;
reg [1:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadpoll_entry_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadpoll_entry_0_reg;
reg  mandelbrot_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_arg_threadarg;
wire  mandelbrot_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_memory_controller_address_a;
wire  mandelbrot_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] mandelbrot_memory_controller_in_a;
wire [1:0] mandelbrot_memory_controller_size_a;
wire  mandelbrot_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_memory_controller_address_b;
wire  mandelbrot_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] mandelbrot_memory_controller_in_b;
wire [1:0] mandelbrot_memory_controller_size_b;
wire  mandelbrot_finish;
reg  mandelbrot_finish_final;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] mandelbrot_return_val;


mandelbrot mandelbrot_inst (
	.memory_controller_enable_a (mandelbrot_memory_controller_enable_a),
	.memory_controller_address_a (mandelbrot_memory_controller_address_a),
	.memory_controller_write_enable_a (mandelbrot_memory_controller_write_enable_a),
	.memory_controller_in_a (mandelbrot_memory_controller_in_a),
	.memory_controller_size_a (mandelbrot_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (mandelbrot_memory_controller_enable_b),
	.memory_controller_address_b (mandelbrot_memory_controller_address_b),
	.memory_controller_write_enable_b (mandelbrot_memory_controller_write_enable_b),
	.memory_controller_in_b (mandelbrot_memory_controller_in_b),
	.memory_controller_size_b (mandelbrot_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (mandelbrot_start),
	.finish (mandelbrot_finish),
	.return_val (mandelbrot_return_val),
	.arg_threadarg (mandelbrot_arg_threadarg)
);



always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadpoll_BB_entry_1;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadpoll_BB_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadpoll_BB_entry_1;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadpoll_BB_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadpoll_BB_entry_3;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadpoll_BB_entry_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (mandelbrot_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_legup_pthreadpoll_BB_entry_3;
if (reset == 1'b0 && ^(LEGUP_F_legup_pthreadpoll_BB_entry_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
begin
legup_pthreadpoll_entry_0 = mandelbrot_return_val;
end
end
always @(posedge clk) begin
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_pthreadpoll_entry_0_reg <= legup_pthreadpoll_entry_0;
if (reset == 1'b0 && ^(legup_pthreadpoll_entry_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadpoll_entry_0_reg"); $finish; end
end
end
always @(posedge clk) begin
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_1))
begin
mandelbrot_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_start"); $finish; end
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
mandelbrot_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_start"); $finish; end
end
end
always @(posedge clk) begin
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_1))
begin
mandelbrot_arg_threadarg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to mandelbrot_arg_threadarg"); $finish; end
end
end
always @(*) begin
mandelbrot_finish_final = mandelbrot_finish;
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* legup_pthreadpoll: %entry*/
/*   ret i8* %0*/
if ((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = mandelbrot_memory_controller_enable_a;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = mandelbrot_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = mandelbrot_memory_controller_address_a;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = mandelbrot_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = mandelbrot_memory_controller_write_enable_a;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = mandelbrot_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = mandelbrot_memory_controller_in_a;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = mandelbrot_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = mandelbrot_memory_controller_size_a;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = mandelbrot_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = mandelbrot_memory_controller_enable_b;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = mandelbrot_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = mandelbrot_memory_controller_address_b;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = mandelbrot_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = mandelbrot_memory_controller_write_enable_b;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = mandelbrot_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = mandelbrot_memory_controller_in_b;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = mandelbrot_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = mandelbrot_memory_controller_size_b;
end
/* legup_pthreadpoll: %entry*/
/*   %0 = call fastcc i8* @mandelbrot(i8* null) noinline, !TYPE !1*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = mandelbrot_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* legup_pthreadpoll: %entry*/
/*   ret i8* %0*/
if ((cur_state == LEGUP_F_legup_pthreadpoll_BB_entry_3))
begin
return_val <= legup_pthreadpoll_entry_0_reg;
if (reset == 1'b0 && ^(legup_pthreadpoll_entry_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_arbiter_a,
	memory_controller_address_arbiter_a,
	memory_controller_write_enable_arbiter_a,
	memory_controller_in_arbiter_a,
	memory_controller_size_arbiter_a,
	memory_controller_out_arbiter_a,
	memory_controller_enable_arbiter_b,
	memory_controller_address_arbiter_b,
	memory_controller_write_enable_arbiter_b,
	memory_controller_in_arbiter_b,
	memory_controller_size_arbiter_b,
	memory_controller_out_arbiter_b,
	memory_controller_waitrequest_arbiter
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB_bb3_3_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB_bb3_3_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB_bb3_3_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB_bb3_3_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_bb3_3_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB_bb3_3_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_bb3_3_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB_bb3_3_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_bb3_3_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB_bb3_3_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_bb3_3_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB_bb3_3_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB_bb3_3_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB_bb3_3_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB_bb3_3_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_bb3_3_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB_bb3_3_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB_bb3_3_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB_bb3_3_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB_bb3_3_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_bb3_3_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB_bb15_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_bb16_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB_return_32 = 6'd32;
parameter [5:0] LEGUP_function_call_6 = 6'd6;
parameter [5:0] LEGUP_function_call_8 = 6'd8;
parameter [5:0] LEGUP_function_call_10 = 6'd10;
parameter [5:0] LEGUP_function_call_12 = 6'd12;
parameter [5:0] LEGUP_function_call_16 = 6'd16;
parameter [5:0] LEGUP_function_call_20 = 6'd20;
parameter [5:0] LEGUP_function_call_24 = 6'd24;
parameter [5:0] LEGUP_function_call_28 = 6'd28;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_arbiter_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_arbiter_a;
output reg  memory_controller_write_enable_arbiter_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_arbiter_a;
output reg [1:0] memory_controller_size_arbiter_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_arbiter_a;
output reg  memory_controller_enable_arbiter_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_arbiter_b;
output reg  memory_controller_write_enable_arbiter_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_arbiter_b;
output reg [1:0] memory_controller_size_arbiter_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_arbiter_b;
input  memory_controller_waitrequest_arbiter;
reg [5:0] cur_state;
reg  memory_controller_enable_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
reg  memory_controller_write_enable_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
reg [1:0] memory_controller_size_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
reg  memory_controller_enable_b;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
reg  memory_controller_write_enable_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
reg [1:0] memory_controller_size_b;
reg  memory_controller_waitrequest;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep3132_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep33_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep27_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep27_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep27_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep2728_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_scevgep29_3_reg;
reg [31:0] main_bb3_3_0;
reg [31:0] main_bb3_3_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_1_reg;
reg [31:0] main_bb3_3__c;
reg [31:0] main_bb3_3__c_reg;
reg [31:0] main_bb3_3_2;
reg [31:0] main_bb3_3_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_3_reg;
reg [31:0] main_bb3_3__c1;
reg [31:0] main_bb3_3_4;
reg [31:0] main_bb3_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_5_reg;
reg [31:0] main_bb3_3__c2;
reg [31:0] main_bb3_3_6;
reg [31:0] main_bb3_3_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_bb3_3_7_reg;
reg [31:0] main_bb3_3__c3;
reg [31:0] main_bb3_3_8;
reg [31:0] main_bb3_3_8_reg;
reg [31:0] main_bb3_3_9;
reg [31:0] main_bb3_3_9_reg;
reg [31:0] main_bb3_3_10;
reg  main_bb3_3_12;
reg  legup_pthreadcall_mandelbrot_start_inst0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadarg_inst0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadID_inst0;
reg [31:0] legup_pthreadcall_mandelbrot_arg_threadIDValue_inst0;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_a_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_a_inst0;
wire  legup_pthreadcall_mandelbrot_gnt_0;
reg  legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_b_inst0;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_b_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg;
reg  legup_pthreadcall_mandelbrot_finish_inst0_reg;
wire  legup_pthreadcall_mandelbrot_finish_inst0;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst0_reg;
reg  legup_pthreadcall_mandelbrot_start_inst1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadarg_inst1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadID_inst1;
reg [31:0] legup_pthreadcall_mandelbrot_arg_threadIDValue_inst1;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_a_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_a_inst1;
wire  legup_pthreadcall_mandelbrot_gnt_1;
reg  legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_b_inst1;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_b_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg;
reg  legup_pthreadcall_mandelbrot_finish_inst1_reg;
wire  legup_pthreadcall_mandelbrot_finish_inst1;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst1_reg;
reg  legup_pthreadcall_mandelbrot_start_inst2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadarg_inst2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadID_inst2;
reg [31:0] legup_pthreadcall_mandelbrot_arg_threadIDValue_inst2;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_a_inst2;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_a_inst2;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_a_inst2;
wire  legup_pthreadcall_mandelbrot_gnt_2;
reg  legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_b_inst2;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_b_inst2;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_b_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg;
reg  legup_pthreadcall_mandelbrot_finish_inst2_reg;
wire  legup_pthreadcall_mandelbrot_finish_inst2;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst2_reg;
reg  legup_pthreadcall_mandelbrot_start_inst3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadarg_inst3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_arg_threadID_inst3;
reg [31:0] legup_pthreadcall_mandelbrot_arg_threadIDValue_inst3;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_a_inst3;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_a_inst3;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_a_inst3;
wire  legup_pthreadcall_mandelbrot_gnt_3;
reg  legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg;
wire  legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3;
wire  legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_address_b_inst3;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_in_b_inst3;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3;
wire [1:0] legup_pthreadcall_mandelbrot_memory_controller_size_b_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3;
reg  legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg;
reg  legup_pthreadcall_mandelbrot_finish_inst3_reg;
wire  legup_pthreadcall_mandelbrot_finish_inst3;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadcall_mandelbrot_return_val_inst3_reg;
reg  legup_pthreadpoll_finish_final;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_pthreadpoll_return_val;
reg [15:0] legup_pthreadpoll_threadID;
wire  main_gnt_0;
reg  memory_controller_dataCapture0_a;
reg  memory_controller_dataCapture1_a;
reg  memory_controller_dataUse0_a;
reg  memory_controller_dataUse1_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a_stored;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a_stored_reg;


legup_pthreadcall_mandelbrot legup_pthreadcall_mandelbrot_inst0 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_pthreadcall_mandelbrot_start_inst0),
	.finish (legup_pthreadcall_mandelbrot_finish_inst0),
	.return_val (legup_pthreadcall_mandelbrot_return_val_inst0),
	.memory_controller_enable_a (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0),
	.memory_controller_address_a (legup_pthreadcall_mandelbrot_memory_controller_address_a_inst0),
	.memory_controller_write_enable_a (legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0),
	.memory_controller_in_a (legup_pthreadcall_mandelbrot_memory_controller_in_a_inst0),
	.memory_controller_size_a (legup_pthreadcall_mandelbrot_memory_controller_size_a_inst0),
	.memory_controller_out_a (legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0),
	.memory_controller_enable_b (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0),
	.memory_controller_address_b (legup_pthreadcall_mandelbrot_memory_controller_address_b_inst0),
	.memory_controller_write_enable_b (legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0),
	.memory_controller_in_b (legup_pthreadcall_mandelbrot_memory_controller_in_b_inst0),
	.memory_controller_size_b (legup_pthreadcall_mandelbrot_memory_controller_size_b_inst0),
	.memory_controller_out_b (legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0),
	.memory_controller_waitrequest (legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0),
	.arg_threadarg (legup_pthreadcall_mandelbrot_arg_threadarg_inst0),
	.arg_threadID (legup_pthreadcall_mandelbrot_arg_threadID_inst0),
	.arg_threadIDValue (legup_pthreadcall_mandelbrot_arg_threadIDValue_inst0)
);



legup_pthreadcall_mandelbrot legup_pthreadcall_mandelbrot_inst1 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_pthreadcall_mandelbrot_start_inst1),
	.finish (legup_pthreadcall_mandelbrot_finish_inst1),
	.return_val (legup_pthreadcall_mandelbrot_return_val_inst1),
	.memory_controller_enable_a (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1),
	.memory_controller_address_a (legup_pthreadcall_mandelbrot_memory_controller_address_a_inst1),
	.memory_controller_write_enable_a (legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1),
	.memory_controller_in_a (legup_pthreadcall_mandelbrot_memory_controller_in_a_inst1),
	.memory_controller_size_a (legup_pthreadcall_mandelbrot_memory_controller_size_a_inst1),
	.memory_controller_out_a (legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1),
	.memory_controller_enable_b (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1),
	.memory_controller_address_b (legup_pthreadcall_mandelbrot_memory_controller_address_b_inst1),
	.memory_controller_write_enable_b (legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1),
	.memory_controller_in_b (legup_pthreadcall_mandelbrot_memory_controller_in_b_inst1),
	.memory_controller_size_b (legup_pthreadcall_mandelbrot_memory_controller_size_b_inst1),
	.memory_controller_out_b (legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1),
	.memory_controller_waitrequest (legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1),
	.arg_threadarg (legup_pthreadcall_mandelbrot_arg_threadarg_inst1),
	.arg_threadID (legup_pthreadcall_mandelbrot_arg_threadID_inst1),
	.arg_threadIDValue (legup_pthreadcall_mandelbrot_arg_threadIDValue_inst1)
);



legup_pthreadcall_mandelbrot legup_pthreadcall_mandelbrot_inst2 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_pthreadcall_mandelbrot_start_inst2),
	.finish (legup_pthreadcall_mandelbrot_finish_inst2),
	.return_val (legup_pthreadcall_mandelbrot_return_val_inst2),
	.memory_controller_enable_a (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2),
	.memory_controller_address_a (legup_pthreadcall_mandelbrot_memory_controller_address_a_inst2),
	.memory_controller_write_enable_a (legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2),
	.memory_controller_in_a (legup_pthreadcall_mandelbrot_memory_controller_in_a_inst2),
	.memory_controller_size_a (legup_pthreadcall_mandelbrot_memory_controller_size_a_inst2),
	.memory_controller_out_a (legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2),
	.memory_controller_enable_b (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2),
	.memory_controller_address_b (legup_pthreadcall_mandelbrot_memory_controller_address_b_inst2),
	.memory_controller_write_enable_b (legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2),
	.memory_controller_in_b (legup_pthreadcall_mandelbrot_memory_controller_in_b_inst2),
	.memory_controller_size_b (legup_pthreadcall_mandelbrot_memory_controller_size_b_inst2),
	.memory_controller_out_b (legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2),
	.memory_controller_waitrequest (legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2),
	.arg_threadarg (legup_pthreadcall_mandelbrot_arg_threadarg_inst2),
	.arg_threadID (legup_pthreadcall_mandelbrot_arg_threadID_inst2),
	.arg_threadIDValue (legup_pthreadcall_mandelbrot_arg_threadIDValue_inst2)
);



legup_pthreadcall_mandelbrot legup_pthreadcall_mandelbrot_inst3 (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_pthreadcall_mandelbrot_start_inst3),
	.finish (legup_pthreadcall_mandelbrot_finish_inst3),
	.return_val (legup_pthreadcall_mandelbrot_return_val_inst3),
	.memory_controller_enable_a (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3),
	.memory_controller_address_a (legup_pthreadcall_mandelbrot_memory_controller_address_a_inst3),
	.memory_controller_write_enable_a (legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3),
	.memory_controller_in_a (legup_pthreadcall_mandelbrot_memory_controller_in_a_inst3),
	.memory_controller_size_a (legup_pthreadcall_mandelbrot_memory_controller_size_a_inst3),
	.memory_controller_out_a (legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3),
	.memory_controller_enable_b (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3),
	.memory_controller_address_b (legup_pthreadcall_mandelbrot_memory_controller_address_b_inst3),
	.memory_controller_write_enable_b (legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3),
	.memory_controller_in_b (legup_pthreadcall_mandelbrot_memory_controller_in_b_inst3),
	.memory_controller_size_b (legup_pthreadcall_mandelbrot_memory_controller_size_b_inst3),
	.memory_controller_out_b (legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3),
	.memory_controller_waitrequest (legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3),
	.arg_threadarg (legup_pthreadcall_mandelbrot_arg_threadarg_inst3),
	.arg_threadID (legup_pthreadcall_mandelbrot_arg_threadID_inst3),
	.arg_threadIDValue (legup_pthreadcall_mandelbrot_arg_threadIDValue_inst3)
);



round_robin_arbiter round_robin_arbiter_main_inst (
	.clk (clk),
	.rst_an (~(reset)),
	.waitrequest (1'd0),
	.req_in ({{{{(legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0),(legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1)},(legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2)},(legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3)},(memory_controller_enable_a | memory_controller_enable_b)}),
	.grant_final ({{{{legup_pthreadcall_mandelbrot_gnt_0,legup_pthreadcall_mandelbrot_gnt_1},legup_pthreadcall_mandelbrot_gnt_2},legup_pthreadcall_mandelbrot_gnt_3},main_gnt_0})
);

defparam
	round_robin_arbiter_main_inst.N = 5;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %11 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %10) nounwind*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_29))
begin
$write("Count: %d\n", $signed(main_bb3_3_10));
// to fix quartus warning
if (reset == 1'b0 && ^(main_bb3_3_10) === 1'bX) finish <= 0;
end
/* main: %bb15*/
/*   %13 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_bb15_30))
begin
$write("PASS\n");
end
/* main: %bb16*/
/*   %14 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([6 x i8]* @.str2, i32 0, i32 0)) nounwind*/
if ((cur_state == LEGUP_F_main_BB_bb16_31))
begin
$write("FAIL\n");
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_2;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_4;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_5;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_6;
if (reset == 1'b0 && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_6;
if (reset == 1'b0 && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_7;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_8;
if (reset == 1'b0 && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_8;
if (reset == 1'b0 && ^(LEGUP_function_call_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_9;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_10;
if (reset == 1'b0 && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_10;
if (reset == 1'b0 && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_11;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_12;
if (reset == 1'b0 && ^(LEGUP_function_call_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_12;
if (reset == 1'b0 && ^(LEGUP_function_call_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_13;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_14;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_15;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (reset == 1'b0 && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_16;
if (reset == 1'b0 && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_16) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_16;
if (reset == 1'b0 && ^(LEGUP_function_call_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_17;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_18;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_19;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (reset == 1'b0 && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_20;
if (reset == 1'b0 && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_20) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_20;
if (reset == 1'b0 && ^(LEGUP_function_call_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_21;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_22;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_23;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_24;
if (reset == 1'b0 && ^(LEGUP_function_call_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_24;
if (reset == 1'b0 && ^(LEGUP_function_call_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_24) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_24) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_24;
if (reset == 1'b0 && ^(LEGUP_function_call_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_25;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_26;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_27;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_28;
if (reset == 1'b0 && ^(LEGUP_function_call_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_28;
if (reset == 1'b0 && ^(LEGUP_function_call_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_28) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_28) & (memory_controller_waitrequest == 1'd0)) & (legup_pthreadpoll_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_28;
if (reset == 1'b0 && ^(LEGUP_function_call_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb3_3_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb3_3_29;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb3_3_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_bb3_3_29) & (memory_controller_waitrequest == 1'd0)) & (main_bb3_3_12 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb15_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb15_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_bb3_3_29) & (memory_controller_waitrequest == 1'd0)) & (main_bb3_3_12 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_bb16_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb16_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb15_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb15_30;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb15_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb15_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_return_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_return_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb16_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_bb16_31;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_bb16_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_bb16_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_return_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_return_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_return_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_return_32;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_return_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_return_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %bb3.3*/
/*   store i32 0, i32* %scevgep3132, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep3132.1, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep3132.2, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep3132.3, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_13))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_17))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_21))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_25))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %bb3.3*/
/*   store i32 0, i32* %scevgep3132, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_address_a = main_bb3_3_scevgep3132;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep3132.1, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_address_a = main_bb3_3_scevgep3132_1_reg;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep3132.2, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_address_a = main_bb3_3_scevgep3132_2_reg;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep3132.3, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_address_a = main_bb3_3_scevgep3132_3_reg;
end
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_13))
begin
memory_controller_address_a = main_bb3_3_scevgep29_reg;
end
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_17))
begin
memory_controller_address_a = main_bb3_3_scevgep29_1_reg;
end
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_21))
begin
memory_controller_address_a = main_bb3_3_scevgep29_2_reg;
end
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_25))
begin
memory_controller_address_a = main_bb3_3_scevgep29_3_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %bb3.3*/
/*   store i32 0, i32* %scevgep3132, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep3132.1, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep3132.2, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep3132.3, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_25))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 64'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* main: %bb3.3*/
/*   store i32 0, i32* %scevgep3132, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_in_a = 32'd0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep3132.1, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_in_a = 32'd16;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep3132.2, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_in_a = 32'd32;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep3132.3, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_in_a = 32'd48;
end
end
always @(*) begin
memory_controller_size_a = 2'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %bb3.3*/
/*   store i32 0, i32* %scevgep3132, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep3132.1, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep3132.2, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep3132.3, align 8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_13))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_17))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_21))
begin
memory_controller_size_a = 2'd2;
end
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_25))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_out_a = 64'd0;
if ((memory_controller_dataUse0_a & memory_controller_dataUse1_a))
begin
memory_controller_out_a = memory_controller_out_a_stored_reg;
end
if (((~(memory_controller_dataCapture0_a) & memory_controller_dataCapture1_a) & (~(memory_controller_dataUse0_a) & memory_controller_dataUse1_a)))
begin
memory_controller_out_a = memory_controller_out_arbiter_a;
end
if (((~(memory_controller_dataCapture0_a) & ~(memory_controller_dataCapture1_a)) & (~(memory_controller_dataUse0_a) & memory_controller_dataUse1_a)))
begin
memory_controller_out_a = memory_controller_out_a_stored;
end
if (((~(memory_controller_dataCapture0_a) & memory_controller_dataCapture1_a) & (memory_controller_dataUse0_a & memory_controller_dataUse1_a)))
begin
memory_controller_out_a = memory_controller_out_a_stored;
end
if (((memory_controller_dataCapture0_a & ~(memory_controller_dataCapture1_a)) & (memory_controller_dataUse0_a & memory_controller_dataUse1_a)))
begin
memory_controller_out_a = memory_controller_out_a_stored;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep33, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep33.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep33.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 64, i32* %scevgep33.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep33, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_address_b = main_bb3_3_scevgep33;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep33.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_address_b = main_bb3_3_scevgep33_1_reg;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep33.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_address_b = main_bb3_3_scevgep33_2_reg;
end
/* main: %bb3.3*/
/*   store i32 64, i32* %scevgep33.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_address_b = main_bb3_3_scevgep33_3_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep33, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep33.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep33.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %bb3.3*/
/*   store i32 64, i32* %scevgep33.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 64'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep33, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_in_b = 32'd16;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep33.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_in_b = 32'd32;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep33.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_in_b = 32'd48;
end
/* main: %bb3.3*/
/*   store i32 64, i32* %scevgep33.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_in_b = 32'd64;
end
end
always @(*) begin
memory_controller_size_b = 2'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* main: %bb3.3*/
/*   store i32 16, i32* %scevgep33, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
memory_controller_size_b = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 32, i32* %scevgep33.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_2))
begin
memory_controller_size_b = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 48, i32* %scevgep33.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_3))
begin
memory_controller_size_b = 2'd2;
end
/* main: %bb3.3*/
/*   store i32 64, i32* %scevgep33.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_4))
begin
memory_controller_size_b = 2'd2;
end
end
always @(*) begin
memory_controller_waitrequest = (memory_controller_waitrequest_arbiter | ((memory_controller_enable_a | memory_controller_enable_b) & ~(main_gnt_0)));
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep3132 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 0, i32 0*/
if (reset) begin main_bb3_3_scevgep3132 = 0; end
begin
main_bb3_3_scevgep3132 = `TAG_main_bb3_3_data_a;
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep33 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 0, i32 1*/
if (reset) begin main_bb3_3_scevgep33 = 0; end
begin
main_bb3_3_scevgep33 = (`TAG_main_bb3_3_data_a + 4);
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep3132.1 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 1, i32 0*/
if (reset) begin main_bb3_3_scevgep3132_1 = 0; end
begin
main_bb3_3_scevgep3132_1 = (`TAG_main_bb3_3_data_a + (8 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep3132.1 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep3132_1_reg <= main_bb3_3_scevgep3132_1;
if (reset == 1'b0 && ^(main_bb3_3_scevgep3132_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep3132_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep33.1 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 1, i32 1*/
if (reset) begin main_bb3_3_scevgep33_1 = 0; end
begin
main_bb3_3_scevgep33_1 = (`TAG_main_bb3_3_data_a + ((8 * 32'd1) + 4));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep33.1 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep33_1_reg <= main_bb3_3_scevgep33_1;
if (reset == 1'b0 && ^(main_bb3_3_scevgep33_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep33_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep3132.2 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 2, i32 0*/
if (reset) begin main_bb3_3_scevgep3132_2 = 0; end
begin
main_bb3_3_scevgep3132_2 = (`TAG_main_bb3_3_data_a + (8 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep3132.2 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep3132_2_reg <= main_bb3_3_scevgep3132_2;
if (reset == 1'b0 && ^(main_bb3_3_scevgep3132_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep3132_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep33.2 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 2, i32 1*/
if (reset) begin main_bb3_3_scevgep33_2 = 0; end
begin
main_bb3_3_scevgep33_2 = (`TAG_main_bb3_3_data_a + ((8 * 32'd2) + 4));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep33.2 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep33_2_reg <= main_bb3_3_scevgep33_2;
if (reset == 1'b0 && ^(main_bb3_3_scevgep33_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep33_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep3132.3 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 3, i32 0*/
if (reset) begin main_bb3_3_scevgep3132_3 = 0; end
begin
main_bb3_3_scevgep3132_3 = (`TAG_main_bb3_3_data_a + (8 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep3132.3 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 3, i32 0*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep3132_3_reg <= main_bb3_3_scevgep3132_3;
if (reset == 1'b0 && ^(main_bb3_3_scevgep3132_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep3132_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep33.3 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 3, i32 1*/
if (reset) begin main_bb3_3_scevgep33_3 = 0; end
begin
main_bb3_3_scevgep33_3 = (`TAG_main_bb3_3_data_a + ((8 * 32'd3) + 4));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep33.3 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 3, i32 1*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep33_3_reg <= main_bb3_3_scevgep33_3;
if (reset == 1'b0 && ^(main_bb3_3_scevgep33_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep33_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep2728 = bitcast [4 x %struct.thread_data]* %data to i8**/
if (reset) begin main_bb3_3_scevgep2728 = 0; end
begin
main_bb3_3_scevgep2728 = `TAG_main_bb3_3_data_a;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep2728 = bitcast [4 x %struct.thread_data]* %data to i8**/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep2728_reg <= main_bb3_3_scevgep2728;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep2728_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep29 = getelementptr [4 x i32]* %threads, i32 0, i32 0*/
if (reset) begin main_bb3_3_scevgep29 = 0; end
begin
main_bb3_3_scevgep29 = `TAG_main_bb3_3_threads_a;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep29 = getelementptr [4 x i32]* %threads, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep29_reg <= main_bb3_3_scevgep29;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep29_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep27.1 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 1*/
if (reset) begin main_bb3_3_scevgep27_1 = 0; end
begin
main_bb3_3_scevgep27_1 = (`TAG_main_bb3_3_data_a + (8 * 32'd1));
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep2728.1 = bitcast %struct.thread_data* %scevgep27.1 to i8**/
begin
main_bb3_3_scevgep2728_1 = main_bb3_3_scevgep27_1;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep2728.1 = bitcast %struct.thread_data* %scevgep27.1 to i8**/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep2728_1_reg <= main_bb3_3_scevgep2728_1;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep2728_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep29.1 = getelementptr [4 x i32]* %threads, i32 0, i32 1*/
if (reset) begin main_bb3_3_scevgep29_1 = 0; end
begin
main_bb3_3_scevgep29_1 = (`TAG_main_bb3_3_threads_a + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep29.1 = getelementptr [4 x i32]* %threads, i32 0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep29_1_reg <= main_bb3_3_scevgep29_1;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep29_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep27.2 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 2*/
if (reset) begin main_bb3_3_scevgep27_2 = 0; end
begin
main_bb3_3_scevgep27_2 = (`TAG_main_bb3_3_data_a + (8 * 32'd2));
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep2728.2 = bitcast %struct.thread_data* %scevgep27.2 to i8**/
begin
main_bb3_3_scevgep2728_2 = main_bb3_3_scevgep27_2;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep2728.2 = bitcast %struct.thread_data* %scevgep27.2 to i8**/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep2728_2_reg <= main_bb3_3_scevgep2728_2;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep2728_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep29.2 = getelementptr [4 x i32]* %threads, i32 0, i32 2*/
if (reset) begin main_bb3_3_scevgep29_2 = 0; end
begin
main_bb3_3_scevgep29_2 = (`TAG_main_bb3_3_threads_a + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep29.2 = getelementptr [4 x i32]* %threads, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep29_2_reg <= main_bb3_3_scevgep29_2;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep29_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep27.3 = getelementptr [4 x %struct.thread_data]* %data, i32 0, i32 3*/
if (reset) begin main_bb3_3_scevgep27_3 = 0; end
begin
main_bb3_3_scevgep27_3 = (`TAG_main_bb3_3_data_a + (8 * 32'd3));
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep2728.3 = bitcast %struct.thread_data* %scevgep27.3 to i8**/
begin
main_bb3_3_scevgep2728_3 = main_bb3_3_scevgep27_3;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep2728.3 = bitcast %struct.thread_data* %scevgep27.3 to i8**/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep2728_3_reg <= main_bb3_3_scevgep2728_3;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep2728_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %scevgep29.3 = getelementptr [4 x i32]* %threads, i32 0, i32 3*/
if (reset) begin main_bb3_3_scevgep29_3 = 0; end
begin
main_bb3_3_scevgep29_3 = (`TAG_main_bb3_3_threads_a + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %scevgep29.3 = getelementptr [4 x i32]* %threads, i32 0, i32 3*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_1))
begin
main_bb3_3_scevgep29_3_reg <= main_bb3_3_scevgep29_3;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_scevgep29_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
begin
main_bb3_3_0 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %0 = load i32* %scevgep29, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_15))
begin
main_bb3_3_0_reg <= main_bb3_3_0;
if (reset == 1'b0 && ^(main_bb3_3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %1 = call fastcc i8* @legup_pthreadpoll(i32 %0) nounwind, !TYPE !7, !NUMTHREADS !3*/
begin
main_bb3_3_1 = legup_pthreadpoll_return_val;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %1 = call fastcc i8* @legup_pthreadpoll(i32 %0) nounwind, !TYPE !7, !NUMTHREADS !3*/
if ((cur_state == LEGUP_function_call_16))
begin
main_bb3_3_1_reg <= main_bb3_3_1;
if (reset == 1'b0 && ^(main_bb3_3_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %.c = ptrtoint i8* %1 to i32*/
begin
main_bb3_3__c = main_bb3_3_1_reg;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %.c = ptrtoint i8* %1 to i32*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_17))
begin
main_bb3_3__c_reg <= main_bb3_3__c;
if (reset == 1'b0 && ^(main_bb3_3__c) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3__c_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
begin
main_bb3_3_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %2 = load i32* %scevgep29.1, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_19))
begin
main_bb3_3_2_reg <= main_bb3_3_2;
if (reset == 1'b0 && ^(main_bb3_3_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %3 = call fastcc i8* @legup_pthreadpoll(i32 %2) nounwind, !TYPE !7, !NUMTHREADS !3*/
begin
main_bb3_3_3 = legup_pthreadpoll_return_val;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %3 = call fastcc i8* @legup_pthreadpoll(i32 %2) nounwind, !TYPE !7, !NUMTHREADS !3*/
if ((cur_state == LEGUP_function_call_20))
begin
main_bb3_3_3_reg <= main_bb3_3_3;
if (reset == 1'b0 && ^(main_bb3_3_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %.c1 = ptrtoint i8* %3 to i32*/
begin
main_bb3_3__c1 = main_bb3_3_3_reg;
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
begin
main_bb3_3_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %4 = load i32* %scevgep29.2, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_23))
begin
main_bb3_3_4_reg <= main_bb3_3_4;
if (reset == 1'b0 && ^(main_bb3_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %5 = call fastcc i8* @legup_pthreadpoll(i32 %4) nounwind, !TYPE !7, !NUMTHREADS !3*/
begin
main_bb3_3_5 = legup_pthreadpoll_return_val;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %5 = call fastcc i8* @legup_pthreadpoll(i32 %4) nounwind, !TYPE !7, !NUMTHREADS !3*/
if ((cur_state == LEGUP_function_call_24))
begin
main_bb3_3_5_reg <= main_bb3_3_5;
if (reset == 1'b0 && ^(main_bb3_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %.c2 = ptrtoint i8* %5 to i32*/
begin
main_bb3_3__c2 = main_bb3_3_5_reg;
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
begin
main_bb3_3_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %6 = load i32* %scevgep29.3, align 4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_27))
begin
main_bb3_3_6_reg <= main_bb3_3_6;
if (reset == 1'b0 && ^(main_bb3_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %7 = call fastcc i8* @legup_pthreadpoll(i32 %6) nounwind, !TYPE !7, !NUMTHREADS !3*/
begin
main_bb3_3_7 = legup_pthreadpoll_return_val;
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %7 = call fastcc i8* @legup_pthreadpoll(i32 %6) nounwind, !TYPE !7, !NUMTHREADS !3*/
if ((cur_state == LEGUP_function_call_28))
begin
main_bb3_3_7_reg <= main_bb3_3_7;
if (reset == 1'b0 && ^(main_bb3_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %.c3 = ptrtoint i8* %7 to i32*/
begin
main_bb3_3__c3 = main_bb3_3_7_reg;
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %8 = add nsw i32 %.c1, %.c*/
begin
main_bb3_3_8 = (main_bb3_3__c1 + main_bb3_3__c_reg);
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %8 = add nsw i32 %.c1, %.c*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_21))
begin
main_bb3_3_8_reg <= main_bb3_3_8;
if (reset == 1'b0 && ^(main_bb3_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %9 = add nsw i32 %.c2, %8*/
begin
main_bb3_3_9 = (main_bb3_3__c2 + main_bb3_3_8_reg);
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   %9 = add nsw i32 %.c2, %8*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_25))
begin
main_bb3_3_9_reg <= main_bb3_3_9;
if (reset == 1'b0 && ^(main_bb3_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_bb3_3_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %10 = add nsw i32 %.c3, %9*/
begin
main_bb3_3_10 = (main_bb3_3__c3 + main_bb3_3_9_reg);
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %12 = icmp eq i32 %10, 2989*/
begin
main_bb3_3_12 = (main_bb3_3_10 == 32'd2989);
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728, i32* %scevgep29, i32 0) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !4, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_5))
begin
legup_pthreadcall_mandelbrot_start_inst0 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst0"); $finish; end
end
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728, i32* %scevgep29, i32 0) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !4, !FUNCTIONID !4*/
if ((cur_state == LEGUP_function_call_6))
begin
legup_pthreadcall_mandelbrot_start_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst0"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728, i32* %scevgep29, i32 0) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !4, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_5))
begin
legup_pthreadcall_mandelbrot_arg_threadarg_inst0 <= main_bb3_3_scevgep2728_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadarg_inst0"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728, i32* %scevgep29, i32 0) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !4, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_5))
begin
legup_pthreadcall_mandelbrot_arg_threadID_inst0 <= main_bb3_3_scevgep29_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadID_inst0"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728, i32* %scevgep29, i32 0) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !4, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_5))
begin
legup_pthreadcall_mandelbrot_arg_threadIDValue_inst0 <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadIDValue_inst0"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = memory_controller_out_arbiter_a;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored;
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0 = 1'd0;
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0 = (((legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0) & ~(legup_pthreadcall_mandelbrot_gnt_0)) | memory_controller_waitrequest_arbiter);
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst0 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored <= memory_controller_out_arbiter_a;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst0_stored_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = memory_controller_out_arbiter_b;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored;
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_0 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst0"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst0 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored <= memory_controller_out_arbiter_b;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst0))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst0_stored_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_5)))
begin
legup_pthreadcall_mandelbrot_finish_inst0_reg <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst0_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst0)
begin
legup_pthreadcall_mandelbrot_finish_inst0_reg <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_5)))
begin
legup_pthreadcall_mandelbrot_return_val_inst0_reg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst0_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst0)
begin
legup_pthreadcall_mandelbrot_return_val_inst0_reg <= legup_pthreadcall_mandelbrot_return_val_inst0;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_return_val_inst0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst0_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.1, i32* %scevgep29.1, i32 1) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !3, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_7))
begin
legup_pthreadcall_mandelbrot_start_inst1 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst1"); $finish; end
end
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.1, i32* %scevgep29.1, i32 1) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !3, !FUNCTIONID !4*/
if ((cur_state == LEGUP_function_call_8))
begin
legup_pthreadcall_mandelbrot_start_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.1, i32* %scevgep29.1, i32 1) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !3, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_7))
begin
legup_pthreadcall_mandelbrot_arg_threadarg_inst1 <= main_bb3_3_scevgep2728_1_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadarg_inst1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.1, i32* %scevgep29.1, i32 1) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !3, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_7))
begin
legup_pthreadcall_mandelbrot_arg_threadID_inst1 <= main_bb3_3_scevgep29_1_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadID_inst1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.1, i32* %scevgep29.1, i32 1) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !3, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_7))
begin
legup_pthreadcall_mandelbrot_arg_threadIDValue_inst1 <= 32'd1;
if (reset == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadIDValue_inst1"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = memory_controller_out_arbiter_a;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored;
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1 = 1'd0;
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1 = (((legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1) & ~(legup_pthreadcall_mandelbrot_gnt_1)) | memory_controller_waitrequest_arbiter);
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst1 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored <= memory_controller_out_arbiter_a;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst1_stored_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = memory_controller_out_arbiter_b;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored;
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_1 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst1"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst1 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored <= memory_controller_out_arbiter_b;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst1))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst1_stored_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_7)))
begin
legup_pthreadcall_mandelbrot_finish_inst1_reg <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst1_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst1)
begin
legup_pthreadcall_mandelbrot_finish_inst1_reg <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst1_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_7)))
begin
legup_pthreadcall_mandelbrot_return_val_inst1_reg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst1_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst1)
begin
legup_pthreadcall_mandelbrot_return_val_inst1_reg <= legup_pthreadcall_mandelbrot_return_val_inst1;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_return_val_inst1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.2, i32* %scevgep29.2, i32 2) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !5, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_9))
begin
legup_pthreadcall_mandelbrot_start_inst2 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst2"); $finish; end
end
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.2, i32* %scevgep29.2, i32 2) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !5, !FUNCTIONID !4*/
if ((cur_state == LEGUP_function_call_10))
begin
legup_pthreadcall_mandelbrot_start_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst2"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.2, i32* %scevgep29.2, i32 2) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !5, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_9))
begin
legup_pthreadcall_mandelbrot_arg_threadarg_inst2 <= main_bb3_3_scevgep2728_2_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadarg_inst2"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.2, i32* %scevgep29.2, i32 2) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !5, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_9))
begin
legup_pthreadcall_mandelbrot_arg_threadID_inst2 <= main_bb3_3_scevgep29_2_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadID_inst2"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.2, i32* %scevgep29.2, i32 2) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !5, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_9))
begin
legup_pthreadcall_mandelbrot_arg_threadIDValue_inst2 <= 32'd2;
if (reset == 1'b0 && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadIDValue_inst2"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = memory_controller_out_arbiter_a;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored;
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2 = 1'd0;
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2 = (((legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2) & ~(legup_pthreadcall_mandelbrot_gnt_2)) | memory_controller_waitrequest_arbiter);
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst2 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored <= memory_controller_out_arbiter_a;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst2_stored_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = memory_controller_out_arbiter_b;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored;
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_2 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst2"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst2 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored <= memory_controller_out_arbiter_b;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst2))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst2_stored_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_9)))
begin
legup_pthreadcall_mandelbrot_finish_inst2_reg <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst2_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst2)
begin
legup_pthreadcall_mandelbrot_finish_inst2_reg <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst2_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_9)))
begin
legup_pthreadcall_mandelbrot_return_val_inst2_reg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst2_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst2)
begin
legup_pthreadcall_mandelbrot_return_val_inst2_reg <= legup_pthreadcall_mandelbrot_return_val_inst2;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_return_val_inst2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst2_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.3, i32* %scevgep29.3, i32 3) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !6, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_11))
begin
legup_pthreadcall_mandelbrot_start_inst3 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst3"); $finish; end
end
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.3, i32* %scevgep29.3, i32 3) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !6, !FUNCTIONID !4*/
if ((cur_state == LEGUP_function_call_12))
begin
legup_pthreadcall_mandelbrot_start_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_start_inst3"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.3, i32* %scevgep29.3, i32 3) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !6, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_11))
begin
legup_pthreadcall_mandelbrot_arg_threadarg_inst3 <= main_bb3_3_scevgep2728_3_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep2728_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadarg_inst3"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.3, i32* %scevgep29.3, i32 3) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !6, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_11))
begin
legup_pthreadcall_mandelbrot_arg_threadID_inst3 <= main_bb3_3_scevgep29_3_reg;
if (reset == 1'b0 && ^(main_bb3_3_scevgep29_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadID_inst3"); $finish; end
end
end
always @(posedge clk) begin
/* main: %bb3.3*/
/*   call fastcc void @legup_pthreadcall_mandelbrot(i8* %scevgep2728.3, i32* %scevgep29.3, i32 3) nounwind, !TYPE !1, !PTHREADNAME !2, !NUMTHREADS !3, !THREADID !6, !FUNCTIONID !4*/
if ((cur_state == LEGUP_F_main_BB_bb3_3_11))
begin
legup_pthreadcall_mandelbrot_arg_threadIDValue_inst3 <= 32'd3;
if (reset == 1'b0 && ^(32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_arg_threadIDValue_inst3"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = memory_controller_out_arbiter_a;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored;
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3 = 1'd0;
legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3 = (((legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 | legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3) & ~(legup_pthreadcall_mandelbrot_gnt_3)) | memory_controller_waitrequest_arbiter);
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_a_inst3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_a_inst3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_a_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_a_inst3 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored <= memory_controller_out_arbiter_a;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_a_inst3_stored_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = 1'd0;
if ((legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = memory_controller_out_arbiter_b;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3) & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3)) & (~(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored;
end
if (((~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3) & legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored;
end
if (((legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3)) & (legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 & legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3 = legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored;
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3)))) & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3 <= legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataCapture0_b_inst3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3"); $finish; end
end
if (((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3"); $finish; end
end
if ((~((legup_pthreadcall_mandelbrot_gnt_3 & (legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3 & ~(legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3)))) & ~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3)))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3 <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3 <= legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_dataUse0_b_inst3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_dataUse1_b_inst3"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored"); $finish; end
end
if ((legup_pthreadcall_mandelbrot_memory_controller_dataCapture1_b_inst3 & ~(memory_controller_waitrequest_arbiter)))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored <= memory_controller_out_arbiter_b;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_b) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg"); $finish; end
end
if (~(legup_pthreadcall_mandelbrot_memory_controller_waitrequest_inst3))
begin
legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg <= legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_memory_controller_out_b_inst3_stored_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_11)))
begin
legup_pthreadcall_mandelbrot_finish_inst3_reg <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst3_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst3)
begin
legup_pthreadcall_mandelbrot_finish_inst3_reg <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_finish_inst3_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((reset | (cur_state == LEGUP_F_main_BB_bb3_3_11)))
begin
legup_pthreadcall_mandelbrot_return_val_inst3_reg <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst3_reg"); $finish; end
end
if (legup_pthreadcall_mandelbrot_finish_inst3)
begin
legup_pthreadcall_mandelbrot_return_val_inst3_reg <= legup_pthreadcall_mandelbrot_return_val_inst3;
if (reset == 1'b0 && ^(legup_pthreadcall_mandelbrot_return_val_inst3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_pthreadcall_mandelbrot_return_val_inst3_reg"); $finish; end
end
end
always @(*) begin
legup_pthreadpoll_finish_final = 1'd0;
if (((legup_pthreadpoll_threadID == 16'd0) & (legup_pthreadcall_mandelbrot_finish_inst0_reg == 1'd1)))
begin
legup_pthreadpoll_finish_final = 1'd1;
end
if (((legup_pthreadpoll_threadID == 16'd1) & (legup_pthreadcall_mandelbrot_finish_inst1_reg == 1'd1)))
begin
legup_pthreadpoll_finish_final = 1'd1;
end
if (((legup_pthreadpoll_threadID == 16'd2) & (legup_pthreadcall_mandelbrot_finish_inst2_reg == 1'd1)))
begin
legup_pthreadpoll_finish_final = 1'd1;
end
if (((legup_pthreadpoll_threadID == 16'd3) & (legup_pthreadcall_mandelbrot_finish_inst3_reg == 1'd1)))
begin
legup_pthreadpoll_finish_final = 1'd1;
end
end
always @(*) begin
legup_pthreadpoll_return_val = 0;
if (((legup_pthreadpoll_threadID == 16'd0) & (legup_pthreadcall_mandelbrot_finish_inst0_reg == 1'd1)))
begin
legup_pthreadpoll_return_val = legup_pthreadcall_mandelbrot_return_val_inst0_reg;
end
if (((legup_pthreadpoll_threadID == 16'd1) & (legup_pthreadcall_mandelbrot_finish_inst1_reg == 1'd1)))
begin
legup_pthreadpoll_return_val = legup_pthreadcall_mandelbrot_return_val_inst1_reg;
end
if (((legup_pthreadpoll_threadID == 16'd2) & (legup_pthreadcall_mandelbrot_finish_inst2_reg == 1'd1)))
begin
legup_pthreadpoll_return_val = legup_pthreadcall_mandelbrot_return_val_inst2_reg;
end
if (((legup_pthreadpoll_threadID == 16'd3) & (legup_pthreadcall_mandelbrot_finish_inst3_reg == 1'd1)))
begin
legup_pthreadpoll_return_val = legup_pthreadcall_mandelbrot_return_val_inst3_reg;
end
end
always @(*) begin
/* main: %bb3.3*/
/*   %1 = call fastcc i8* @legup_pthreadpoll(i32 %0) nounwind, !TYPE !7, !NUMTHREADS !3*/
if ((cur_state == LEGUP_function_call_16))
begin
legup_pthreadpoll_threadID = main_bb3_3_0_reg[15:0];
end
/* main: %bb3.3*/
/*   %3 = call fastcc i8* @legup_pthreadpoll(i32 %2) nounwind, !TYPE !7, !NUMTHREADS !3*/
else if ((cur_state == LEGUP_function_call_20))
begin
legup_pthreadpoll_threadID = main_bb3_3_2_reg[15:0];
end
/* main: %bb3.3*/
/*   %5 = call fastcc i8* @legup_pthreadpoll(i32 %4) nounwind, !TYPE !7, !NUMTHREADS !3*/
else if ((cur_state == LEGUP_function_call_24))
begin
legup_pthreadpoll_threadID = main_bb3_3_4_reg[15:0];
end
/* main: %bb3.3*/
/*   %7 = call fastcc i8* @legup_pthreadpoll(i32 %6) nounwind, !TYPE !7, !NUMTHREADS !3*/
else /* if ((cur_state == LEGUP_function_call_28)) */
begin
legup_pthreadpoll_threadID = main_bb3_3_6_reg[15:0];
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_dataCapture0_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataCapture0_a"); $finish; end
end
if (((main_gnt_0 & (memory_controller_enable_a & ~(memory_controller_write_enable_a))) & ~(memory_controller_waitrequest_arbiter)))
begin
memory_controller_dataCapture0_a <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataCapture0_a"); $finish; end
end
if ((~((main_gnt_0 & (memory_controller_enable_a & ~(memory_controller_write_enable_a)))) & ~(memory_controller_waitrequest_arbiter)))
begin
memory_controller_dataCapture0_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataCapture0_a"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_dataCapture1_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataCapture1_a"); $finish; end
end
if (~(memory_controller_waitrequest_arbiter))
begin
memory_controller_dataCapture1_a <= memory_controller_dataCapture0_a;
if (reset == 1'b0 && ^(memory_controller_dataCapture0_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataCapture1_a"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_dataUse0_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataUse0_a"); $finish; end
end
if (((main_gnt_0 & (memory_controller_enable_a & ~(memory_controller_write_enable_a))) & ~(memory_controller_waitrequest)))
begin
memory_controller_dataUse0_a <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataUse0_a"); $finish; end
end
if ((~((main_gnt_0 & (memory_controller_enable_a & ~(memory_controller_write_enable_a)))) & ~(memory_controller_waitrequest)))
begin
memory_controller_dataUse0_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataUse0_a"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_dataUse1_a <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataUse1_a"); $finish; end
end
if (~(memory_controller_waitrequest))
begin
memory_controller_dataUse1_a <= memory_controller_dataUse0_a;
if (reset == 1'b0 && ^(memory_controller_dataUse0_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_dataUse1_a"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_out_a_stored <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_a_stored"); $finish; end
end
if ((memory_controller_dataCapture1_a & ~(memory_controller_waitrequest_arbiter)))
begin
memory_controller_out_a_stored <= memory_controller_out_arbiter_a;
if (reset == 1'b0 && ^(memory_controller_out_arbiter_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_a_stored"); $finish; end
end
end
always @(posedge clk) begin
if (reset)
begin
memory_controller_out_a_stored_reg <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_a_stored_reg"); $finish; end
end
if (~(memory_controller_waitrequest))
begin
memory_controller_out_a_stored_reg <= memory_controller_out_a_stored;
if (reset == 1'b0 && ^(memory_controller_out_a_stored) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to memory_controller_out_a_stored_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %return*/
/*   ret i32 undef*/
if ((cur_state == LEGUP_F_main_BB_return_32))
begin
finish <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %return*/
/*   ret i32 undef*/
if ((cur_state == LEGUP_F_main_BB_return_32))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_arbiter_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_arbiter_a = 1'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_enable_a_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_enable_arbiter_a = memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_arbiter_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_arbiter_a = 0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_address_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_address_a_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_address_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_address_a_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_address_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_address_a_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_address_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_address_a_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_address_arbiter_a = memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_arbiter_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_arbiter_a = 1'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_write_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_write_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_write_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_write_enable_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_write_enable_a_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_write_enable_arbiter_a = memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_arbiter_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_arbiter_a = 64'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_in_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_in_a_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_in_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_in_a_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_in_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_in_a_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_in_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_in_a_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_in_arbiter_a = memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_arbiter_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_arbiter_a = 2'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_size_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_size_a_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_size_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_size_a_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_size_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_size_a_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_size_arbiter_a = legup_pthreadcall_mandelbrot_memory_controller_size_a_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_size_arbiter_a = memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_arbiter_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_arbiter_b = 1'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_enable_b_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_enable_arbiter_b = memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_arbiter_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_arbiter_b = 0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_address_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_address_b_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_address_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_address_b_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_address_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_address_b_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_address_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_address_b_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_address_arbiter_b = memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_arbiter_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_arbiter_b = 1'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_write_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_write_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_write_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_write_enable_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_write_enable_b_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_write_enable_arbiter_b = memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_arbiter_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_arbiter_b = 64'd0;
end
if ((legup_pthreadcall_mandelbrot_gnt_0 == 1'd1))
begin
memory_controller_in_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_in_b_inst0;
end
if ((legup_pthreadcall_mandelbrot_gnt_1 == 1'd1))
begin
memory_controller_in_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_in_b_inst1;
end
if ((legup_pthreadcall_mandelbrot_gnt_2 == 1'd1))
begin
memory_controller_in_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_in_b_inst2;
end
if ((legup_pthreadcall_mandelbrot_gnt_3 == 1'd1))
begin
memory_controller_in_arbiter_b = legup_pthreadcall_mandelbrot_memory_controller_in_b_inst3;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_in_arbiter_b = memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_arbiter_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_arbiter_b = 2'd0;
end
if ((main_gnt_0 == 1'd1))
begin
memory_controller_size_arbiter_b = memory_controller_size_b;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.data_a (data_a),
	.data_b (data_b)
);

defparam
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b,
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];

endmodule 
`timescale 1 ns / 1 ns
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (),
	.byteena_b (),
	.wren_a (1'd0),
	.wren_b (1'd0),
	.data_a (),
	.data_b ()
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";


always @(*) begin
clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];

endmodule 
module round_robin_arbiter (
	rst_an,
	clk,
	req_in,
	grant_final,
	waitrequest
);

parameter N = 4;
input		rst_an;
input		clk;
input	[N-1:0]	req_in;
input waitrequest;
output	[N-1:0]	grant_final;

wire [N-1:0] req_final;
wire [N-1:0] req;
reg	[N-1:0]	req_reg;
reg	[N-1:0]	rotate_ptr;
wire	[N-1:0]	mask_req;
wire	[N-1:0]	mask_grant;
wire	[N-1:0]	grant_comb;
reg	[N-1:0]	grant;
wire		no_mask_req;
wire	[N-1:0] nomask_grant;
wire		update_ptr;
genvar i;

assign grant_final = grant;
always @(posedge clk)
begin
	if (!waitrequest)
	req_reg[N-1:0] <= req_final[N-1:0];
end

assign req_final[N-1:0] = req_in[N-1:0] & ~req_reg[N-1:0];
assign req[N-1:0] = req_in[N-1:0];
// rotate pointer update logic
assign update_ptr = |grant[N-1:0];
always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)
	begin
		rotate_ptr[0] <= 1'b1;
		rotate_ptr[1] <= 1'b1;
	end
	else if (update_ptr)
	begin
		// note: N must be at least 2
		rotate_ptr[0] <= grant[N-1];
		rotate_ptr[1] <= grant[N-1] | grant[0];
	end
end

generate
for (i=2;i<N;i=i+1) begin : abc
always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)
		rotate_ptr[i] <= 1'b1;
	else if (update_ptr)
		rotate_ptr[i] <= grant[N-1] | (|grant[i-1:0]);
end
end
endgenerate

// mask grant generation logic
assign mask_req[N-1:0] = req[N-1:0] & rotate_ptr[N-1:0];

assign mask_grant[0] = mask_req[0];
generate
for (i=1;i<N;i=i+1) begin : abcd
	assign mask_grant[i] = (~|mask_req[i-1:0]) & mask_req[i];
end
endgenerate

// non-mask grant generation logic
assign nomask_grant[0] = req[0];
generate
for (i=1;i<N;i=i+1) begin : abcde
	assign nomask_grant[i] = (~|req[i-1:0]) & req[i];
end
endgenerate

// grant generation logic
assign no_mask_req = ~|mask_req[N-1:0];
assign grant_comb[N-1:0] = mask_grant[N-1:0] | (nomask_grant[N-1:0] & {N{no_mask_req}});

always @ (posedge clk or negedge rst_an)
begin
	if (!rst_an)	grant[N-1:0] <= {N{1'b0}};
	else if (!waitrequest) grant[N-1:0] <= grant_comb[N-1:0] & ~grant[N-1:0];

end

endmodule

module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
