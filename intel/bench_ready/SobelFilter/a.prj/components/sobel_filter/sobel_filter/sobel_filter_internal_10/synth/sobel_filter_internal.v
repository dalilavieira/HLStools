// (C) 1992-2019 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) HLS Compiler, Version 19.4.0 Build 64

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal
/////////////////////////////////////////////////////////////////
module sobel_filter_internal
(
   input logic clock,
   input logic resetn,
   input logic clock2x,
   input logic [31:0] idx,
   input logic start,
   output logic busy,
   output logic done,
   input logic stall,
   output logic [31:0] returndata
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   logic local_avm_aspace8_enable [1][19];
   logic local_avm_aspace8_read [1][19];
   logic local_avm_aspace8_write [1][19];
   logic [31:0] local_avm_aspace8_address [1][19];
   logic [31:0] local_avm_aspace8_writedata [1][19];
   logic [3:0] local_avm_aspace8_byteenable [1][19];
   logic local_avm_aspace8_waitrequest [1][19];
   logic [31:0] local_avm_aspace8_readdata [1][19];
   logic local_avm_aspace8_readdatavalid [1][19];
   logic local_avm_aspace8_burstcount [1][19];
   logic local_avm_aspace8_writeack [1][19];
   logic local_avm_aspace9_enable [1][2];
   logic local_avm_aspace9_read [1][2];
   logic local_avm_aspace9_write [1][2];
   logic [31:0] local_avm_aspace9_address [1][2];
   logic [31:0] local_avm_aspace9_writedata [1][2];
   logic [3:0] local_avm_aspace9_byteenable [1][2];
   logic local_avm_aspace9_waitrequest [1][2];
   logic [31:0] local_avm_aspace9_readdata [1][2];
   logic local_avm_aspace9_readdatavalid [1][2];
   logic local_avm_aspace9_burstcount [1][2];
   logic local_avm_aspace9_writeack [1][2];
   logic local_avm_aspace10_enable [1][2];
   logic local_avm_aspace10_read [1][2];
   logic local_avm_aspace10_write [1][2];
   logic [31:0] local_avm_aspace10_address [1][2];
   logic [31:0] local_avm_aspace10_writedata [1][2];
   logic [3:0] local_avm_aspace10_byteenable [1][2];
   logic local_avm_aspace10_waitrequest [1][2];
   logic [31:0] local_avm_aspace10_readdata [1][2];
   logic local_avm_aspace10_readdatavalid [1][2];
   logic local_avm_aspace10_burstcount [1][2];
   logic local_avm_aspace10_writeack [1][2];
   logic local_avm_aspace11_enable [1][2];
   logic local_avm_aspace11_read [1][2];
   logic local_avm_aspace11_write [1][2];
   logic [31:0] local_avm_aspace11_address [1][2];
   logic [31:0] local_avm_aspace11_writedata [1][2];
   logic [3:0] local_avm_aspace11_byteenable [1][2];
   logic local_avm_aspace11_waitrequest [1][2];
   logic [31:0] local_avm_aspace11_readdata [1][2];
   logic local_avm_aspace11_readdatavalid [1][2];
   logic local_avm_aspace11_burstcount [1][2];
   logic local_avm_aspace11_writeack [1][2];

   // INST sobel_filter_internal of sobel_filter_function_wrapper
   sobel_filter_function_wrapper sobel_filter_internal
   (
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      .idx(idx),
      .start(start),
      .busy(busy),
      .done(done),
      .stall(stall),
      .returndata(returndata),
      // AVM avm_lm1202_sobel_filter
      .avm_lm1202_sobel_filter_enable(local_avm_aspace8_enable[0][0]),
      .avm_lm1202_sobel_filter_read(local_avm_aspace8_read[0][0]),
      .avm_lm1202_sobel_filter_write(local_avm_aspace8_write[0][0]),
      .avm_lm1202_sobel_filter_address(local_avm_aspace8_address[0][0]),
      .avm_lm1202_sobel_filter_writedata(local_avm_aspace8_writedata[0][0]),
      .avm_lm1202_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][0]),
      .avm_lm1202_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][0]),
      .avm_lm1202_sobel_filter_readdata(local_avm_aspace8_readdata[0][0]),
      .avm_lm1202_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][0]),
      .avm_lm1202_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][0]),
      .avm_lm1202_sobel_filter_writeack(local_avm_aspace8_writeack[0][0]),
      // AVM avm_lm1223_sobel_filter
      .avm_lm1223_sobel_filter_enable(local_avm_aspace8_enable[0][1]),
      .avm_lm1223_sobel_filter_read(local_avm_aspace8_read[0][1]),
      .avm_lm1223_sobel_filter_write(local_avm_aspace8_write[0][1]),
      .avm_lm1223_sobel_filter_address(local_avm_aspace8_address[0][1]),
      .avm_lm1223_sobel_filter_writedata(local_avm_aspace8_writedata[0][1]),
      .avm_lm1223_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][1]),
      .avm_lm1223_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][1]),
      .avm_lm1223_sobel_filter_readdata(local_avm_aspace8_readdata[0][1]),
      .avm_lm1223_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][1]),
      .avm_lm1223_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][1]),
      .avm_lm1223_sobel_filter_writeack(local_avm_aspace8_writeack[0][1]),
      // AVM avm_lm1244_sobel_filter
      .avm_lm1244_sobel_filter_enable(local_avm_aspace8_enable[0][2]),
      .avm_lm1244_sobel_filter_read(local_avm_aspace8_read[0][2]),
      .avm_lm1244_sobel_filter_write(local_avm_aspace8_write[0][2]),
      .avm_lm1244_sobel_filter_address(local_avm_aspace8_address[0][2]),
      .avm_lm1244_sobel_filter_writedata(local_avm_aspace8_writedata[0][2]),
      .avm_lm1244_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][2]),
      .avm_lm1244_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][2]),
      .avm_lm1244_sobel_filter_readdata(local_avm_aspace8_readdata[0][2]),
      .avm_lm1244_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][2]),
      .avm_lm1244_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][2]),
      .avm_lm1244_sobel_filter_writeack(local_avm_aspace8_writeack[0][2]),
      // AVM avm_lm1265_sobel_filter
      .avm_lm1265_sobel_filter_enable(local_avm_aspace8_enable[0][3]),
      .avm_lm1265_sobel_filter_read(local_avm_aspace8_read[0][3]),
      .avm_lm1265_sobel_filter_write(local_avm_aspace8_write[0][3]),
      .avm_lm1265_sobel_filter_address(local_avm_aspace8_address[0][3]),
      .avm_lm1265_sobel_filter_writedata(local_avm_aspace8_writedata[0][3]),
      .avm_lm1265_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][3]),
      .avm_lm1265_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][3]),
      .avm_lm1265_sobel_filter_readdata(local_avm_aspace8_readdata[0][3]),
      .avm_lm1265_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][3]),
      .avm_lm1265_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][3]),
      .avm_lm1265_sobel_filter_writeack(local_avm_aspace8_writeack[0][3]),
      // AVM avm_lm1286_sobel_filter
      .avm_lm1286_sobel_filter_enable(local_avm_aspace8_enable[0][4]),
      .avm_lm1286_sobel_filter_read(local_avm_aspace8_read[0][4]),
      .avm_lm1286_sobel_filter_write(local_avm_aspace8_write[0][4]),
      .avm_lm1286_sobel_filter_address(local_avm_aspace8_address[0][4]),
      .avm_lm1286_sobel_filter_writedata(local_avm_aspace8_writedata[0][4]),
      .avm_lm1286_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][4]),
      .avm_lm1286_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][4]),
      .avm_lm1286_sobel_filter_readdata(local_avm_aspace8_readdata[0][4]),
      .avm_lm1286_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][4]),
      .avm_lm1286_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][4]),
      .avm_lm1286_sobel_filter_writeack(local_avm_aspace8_writeack[0][4]),
      // AVM avm_lm1307_sobel_filter
      .avm_lm1307_sobel_filter_enable(local_avm_aspace8_enable[0][5]),
      .avm_lm1307_sobel_filter_read(local_avm_aspace8_read[0][5]),
      .avm_lm1307_sobel_filter_write(local_avm_aspace8_write[0][5]),
      .avm_lm1307_sobel_filter_address(local_avm_aspace8_address[0][5]),
      .avm_lm1307_sobel_filter_writedata(local_avm_aspace8_writedata[0][5]),
      .avm_lm1307_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][5]),
      .avm_lm1307_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][5]),
      .avm_lm1307_sobel_filter_readdata(local_avm_aspace8_readdata[0][5]),
      .avm_lm1307_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][5]),
      .avm_lm1307_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][5]),
      .avm_lm1307_sobel_filter_writeack(local_avm_aspace8_writeack[0][5]),
      // AVM avm_lm1328_sobel_filter
      .avm_lm1328_sobel_filter_enable(local_avm_aspace8_enable[0][6]),
      .avm_lm1328_sobel_filter_read(local_avm_aspace8_read[0][6]),
      .avm_lm1328_sobel_filter_write(local_avm_aspace8_write[0][6]),
      .avm_lm1328_sobel_filter_address(local_avm_aspace8_address[0][6]),
      .avm_lm1328_sobel_filter_writedata(local_avm_aspace8_writedata[0][6]),
      .avm_lm1328_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][6]),
      .avm_lm1328_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][6]),
      .avm_lm1328_sobel_filter_readdata(local_avm_aspace8_readdata[0][6]),
      .avm_lm1328_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][6]),
      .avm_lm1328_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][6]),
      .avm_lm1328_sobel_filter_writeack(local_avm_aspace8_writeack[0][6]),
      // AVM avm_lm1479_sobel_filter
      .avm_lm1479_sobel_filter_enable(local_avm_aspace8_enable[0][7]),
      .avm_lm1479_sobel_filter_read(local_avm_aspace8_read[0][7]),
      .avm_lm1479_sobel_filter_write(local_avm_aspace8_write[0][7]),
      .avm_lm1479_sobel_filter_address(local_avm_aspace8_address[0][7]),
      .avm_lm1479_sobel_filter_writedata(local_avm_aspace8_writedata[0][7]),
      .avm_lm1479_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][7]),
      .avm_lm1479_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][7]),
      .avm_lm1479_sobel_filter_readdata(local_avm_aspace8_readdata[0][7]),
      .avm_lm1479_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][7]),
      .avm_lm1479_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][7]),
      .avm_lm1479_sobel_filter_writeack(local_avm_aspace8_writeack[0][7]),
      // AVM avm_lm14910_sobel_filter
      .avm_lm14910_sobel_filter_enable(local_avm_aspace8_enable[0][8]),
      .avm_lm14910_sobel_filter_read(local_avm_aspace8_read[0][8]),
      .avm_lm14910_sobel_filter_write(local_avm_aspace8_write[0][8]),
      .avm_lm14910_sobel_filter_address(local_avm_aspace8_address[0][8]),
      .avm_lm14910_sobel_filter_writedata(local_avm_aspace8_writedata[0][8]),
      .avm_lm14910_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][8]),
      .avm_lm14910_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][8]),
      .avm_lm14910_sobel_filter_readdata(local_avm_aspace8_readdata[0][8]),
      .avm_lm14910_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][8]),
      .avm_lm14910_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][8]),
      .avm_lm14910_sobel_filter_writeack(local_avm_aspace8_writeack[0][8]),
      // AVM avm_lm15111_sobel_filter
      .avm_lm15111_sobel_filter_enable(local_avm_aspace8_enable[0][9]),
      .avm_lm15111_sobel_filter_read(local_avm_aspace8_read[0][9]),
      .avm_lm15111_sobel_filter_write(local_avm_aspace8_write[0][9]),
      .avm_lm15111_sobel_filter_address(local_avm_aspace8_address[0][9]),
      .avm_lm15111_sobel_filter_writedata(local_avm_aspace8_writedata[0][9]),
      .avm_lm15111_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][9]),
      .avm_lm15111_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][9]),
      .avm_lm15111_sobel_filter_readdata(local_avm_aspace8_readdata[0][9]),
      .avm_lm15111_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][9]),
      .avm_lm15111_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][9]),
      .avm_lm15111_sobel_filter_writeack(local_avm_aspace8_writeack[0][9]),
      // AVM avm_lm15312_sobel_filter
      .avm_lm15312_sobel_filter_enable(local_avm_aspace8_enable[0][10]),
      .avm_lm15312_sobel_filter_read(local_avm_aspace8_read[0][10]),
      .avm_lm15312_sobel_filter_write(local_avm_aspace8_write[0][10]),
      .avm_lm15312_sobel_filter_address(local_avm_aspace8_address[0][10]),
      .avm_lm15312_sobel_filter_writedata(local_avm_aspace8_writedata[0][10]),
      .avm_lm15312_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][10]),
      .avm_lm15312_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][10]),
      .avm_lm15312_sobel_filter_readdata(local_avm_aspace8_readdata[0][10]),
      .avm_lm15312_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][10]),
      .avm_lm15312_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][10]),
      .avm_lm15312_sobel_filter_writeack(local_avm_aspace8_writeack[0][10]),
      // AVM avm_lm15513_sobel_filter
      .avm_lm15513_sobel_filter_enable(local_avm_aspace8_enable[0][11]),
      .avm_lm15513_sobel_filter_read(local_avm_aspace8_read[0][11]),
      .avm_lm15513_sobel_filter_write(local_avm_aspace8_write[0][11]),
      .avm_lm15513_sobel_filter_address(local_avm_aspace8_address[0][11]),
      .avm_lm15513_sobel_filter_writedata(local_avm_aspace8_writedata[0][11]),
      .avm_lm15513_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][11]),
      .avm_lm15513_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][11]),
      .avm_lm15513_sobel_filter_readdata(local_avm_aspace8_readdata[0][11]),
      .avm_lm15513_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][11]),
      .avm_lm15513_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][11]),
      .avm_lm15513_sobel_filter_writeack(local_avm_aspace8_writeack[0][11]),
      // AVM avm_lm15714_sobel_filter
      .avm_lm15714_sobel_filter_enable(local_avm_aspace8_enable[0][12]),
      .avm_lm15714_sobel_filter_read(local_avm_aspace8_read[0][12]),
      .avm_lm15714_sobel_filter_write(local_avm_aspace8_write[0][12]),
      .avm_lm15714_sobel_filter_address(local_avm_aspace8_address[0][12]),
      .avm_lm15714_sobel_filter_writedata(local_avm_aspace8_writedata[0][12]),
      .avm_lm15714_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][12]),
      .avm_lm15714_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][12]),
      .avm_lm15714_sobel_filter_readdata(local_avm_aspace8_readdata[0][12]),
      .avm_lm15714_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][12]),
      .avm_lm15714_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][12]),
      .avm_lm15714_sobel_filter_writeack(local_avm_aspace8_writeack[0][12]),
      // AVM avm_lm15915_sobel_filter
      .avm_lm15915_sobel_filter_enable(local_avm_aspace8_enable[0][13]),
      .avm_lm15915_sobel_filter_read(local_avm_aspace8_read[0][13]),
      .avm_lm15915_sobel_filter_write(local_avm_aspace8_write[0][13]),
      .avm_lm15915_sobel_filter_address(local_avm_aspace8_address[0][13]),
      .avm_lm15915_sobel_filter_writedata(local_avm_aspace8_writedata[0][13]),
      .avm_lm15915_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][13]),
      .avm_lm15915_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][13]),
      .avm_lm15915_sobel_filter_readdata(local_avm_aspace8_readdata[0][13]),
      .avm_lm15915_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][13]),
      .avm_lm15915_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][13]),
      .avm_lm15915_sobel_filter_writeack(local_avm_aspace8_writeack[0][13]),
      // AVM avm_lm16116_sobel_filter
      .avm_lm16116_sobel_filter_enable(local_avm_aspace8_enable[0][14]),
      .avm_lm16116_sobel_filter_read(local_avm_aspace8_read[0][14]),
      .avm_lm16116_sobel_filter_write(local_avm_aspace8_write[0][14]),
      .avm_lm16116_sobel_filter_address(local_avm_aspace8_address[0][14]),
      .avm_lm16116_sobel_filter_writedata(local_avm_aspace8_writedata[0][14]),
      .avm_lm16116_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][14]),
      .avm_lm16116_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][14]),
      .avm_lm16116_sobel_filter_readdata(local_avm_aspace8_readdata[0][14]),
      .avm_lm16116_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][14]),
      .avm_lm16116_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][14]),
      .avm_lm16116_sobel_filter_writeack(local_avm_aspace8_writeack[0][14]),
      // AVM avm_lm1_sobel_filter
      .avm_lm1_sobel_filter_enable(local_avm_aspace8_enable[0][15]),
      .avm_lm1_sobel_filter_read(local_avm_aspace8_read[0][15]),
      .avm_lm1_sobel_filter_write(local_avm_aspace8_write[0][15]),
      .avm_lm1_sobel_filter_address(local_avm_aspace8_address[0][15]),
      .avm_lm1_sobel_filter_writedata(local_avm_aspace8_writedata[0][15]),
      .avm_lm1_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][15]),
      .avm_lm1_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][15]),
      .avm_lm1_sobel_filter_readdata(local_avm_aspace8_readdata[0][15]),
      .avm_lm1_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][15]),
      .avm_lm1_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][15]),
      .avm_lm1_sobel_filter_writeack(local_avm_aspace8_writeack[0][15]),
      // AVM avm_memdep_sobel_filter
      .avm_memdep_sobel_filter_enable(local_avm_aspace8_enable[0][16]),
      .avm_memdep_sobel_filter_read(local_avm_aspace8_read[0][16]),
      .avm_memdep_sobel_filter_write(local_avm_aspace8_write[0][16]),
      .avm_memdep_sobel_filter_address(local_avm_aspace8_address[0][16]),
      .avm_memdep_sobel_filter_writedata(local_avm_aspace8_writedata[0][16]),
      .avm_memdep_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][16]),
      .avm_memdep_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][16]),
      .avm_memdep_sobel_filter_readdata(local_avm_aspace8_readdata[0][16]),
      .avm_memdep_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][16]),
      .avm_memdep_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][16]),
      .avm_memdep_sobel_filter_writeack(local_avm_aspace8_writeack[0][16]),
      // AVM avm_unnamed_sobel_filter10_sobel_filter
      .avm_unnamed_sobel_filter10_sobel_filter_enable(local_avm_aspace8_enable[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_read(local_avm_aspace8_read[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_write(local_avm_aspace8_write[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_address(local_avm_aspace8_address[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_writedata(local_avm_aspace8_writedata[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_readdata(local_avm_aspace8_readdata[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][17]),
      .avm_unnamed_sobel_filter10_sobel_filter_writeack(local_avm_aspace8_writeack[0][17]),
      // AVM avm_unnamed_sobel_filter12_sobel_filter
      .avm_unnamed_sobel_filter12_sobel_filter_enable(local_avm_aspace8_enable[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_read(local_avm_aspace8_read[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_write(local_avm_aspace8_write[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_address(local_avm_aspace8_address[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_writedata(local_avm_aspace8_writedata[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_byteenable(local_avm_aspace8_byteenable[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_waitrequest(local_avm_aspace8_waitrequest[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_readdata(local_avm_aspace8_readdata[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_readdatavalid(local_avm_aspace8_readdatavalid[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_burstcount(local_avm_aspace8_burstcount[0][18]),
      .avm_unnamed_sobel_filter12_sobel_filter_writeack(local_avm_aspace8_writeack[0][18]),
      // AVM avm_memdep_19_sobel_filter
      .avm_memdep_19_sobel_filter_enable(local_avm_aspace9_enable[0][0]),
      .avm_memdep_19_sobel_filter_read(local_avm_aspace9_read[0][0]),
      .avm_memdep_19_sobel_filter_write(local_avm_aspace9_write[0][0]),
      .avm_memdep_19_sobel_filter_address(local_avm_aspace9_address[0][0]),
      .avm_memdep_19_sobel_filter_writedata(local_avm_aspace9_writedata[0][0]),
      .avm_memdep_19_sobel_filter_byteenable(local_avm_aspace9_byteenable[0][0]),
      .avm_memdep_19_sobel_filter_waitrequest(local_avm_aspace9_waitrequest[0][0]),
      .avm_memdep_19_sobel_filter_readdata(local_avm_aspace9_readdata[0][0]),
      .avm_memdep_19_sobel_filter_readdatavalid(local_avm_aspace9_readdatavalid[0][0]),
      .avm_memdep_19_sobel_filter_burstcount(local_avm_aspace9_burstcount[0][0]),
      .avm_memdep_19_sobel_filter_writeack(local_avm_aspace9_writeack[0][0]),
      // AVM avm_unnamed_sobel_filter8_sobel_filter
      .avm_unnamed_sobel_filter8_sobel_filter_enable(local_avm_aspace9_enable[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_read(local_avm_aspace9_read[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_write(local_avm_aspace9_write[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_address(local_avm_aspace9_address[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_writedata(local_avm_aspace9_writedata[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_byteenable(local_avm_aspace9_byteenable[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_waitrequest(local_avm_aspace9_waitrequest[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_readdata(local_avm_aspace9_readdata[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_readdatavalid(local_avm_aspace9_readdatavalid[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_burstcount(local_avm_aspace9_burstcount[0][1]),
      .avm_unnamed_sobel_filter8_sobel_filter_writeack(local_avm_aspace9_writeack[0][1]),
      // AVM avm_memdep_20_sobel_filter
      .avm_memdep_20_sobel_filter_enable(local_avm_aspace10_enable[0][0]),
      .avm_memdep_20_sobel_filter_read(local_avm_aspace10_read[0][0]),
      .avm_memdep_20_sobel_filter_write(local_avm_aspace10_write[0][0]),
      .avm_memdep_20_sobel_filter_address(local_avm_aspace10_address[0][0]),
      .avm_memdep_20_sobel_filter_writedata(local_avm_aspace10_writedata[0][0]),
      .avm_memdep_20_sobel_filter_byteenable(local_avm_aspace10_byteenable[0][0]),
      .avm_memdep_20_sobel_filter_waitrequest(local_avm_aspace10_waitrequest[0][0]),
      .avm_memdep_20_sobel_filter_readdata(local_avm_aspace10_readdata[0][0]),
      .avm_memdep_20_sobel_filter_readdatavalid(local_avm_aspace10_readdatavalid[0][0]),
      .avm_memdep_20_sobel_filter_burstcount(local_avm_aspace10_burstcount[0][0]),
      .avm_memdep_20_sobel_filter_writeack(local_avm_aspace10_writeack[0][0]),
      // AVM avm_unnamed_sobel_filter14_sobel_filter
      .avm_unnamed_sobel_filter14_sobel_filter_enable(local_avm_aspace10_enable[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_read(local_avm_aspace10_read[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_write(local_avm_aspace10_write[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_address(local_avm_aspace10_address[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_writedata(local_avm_aspace10_writedata[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_byteenable(local_avm_aspace10_byteenable[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_waitrequest(local_avm_aspace10_waitrequest[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_readdata(local_avm_aspace10_readdata[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_readdatavalid(local_avm_aspace10_readdatavalid[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_burstcount(local_avm_aspace10_burstcount[0][1]),
      .avm_unnamed_sobel_filter14_sobel_filter_writeack(local_avm_aspace10_writeack[0][1]),
      // AVM avm_memdep_21_sobel_filter
      .avm_memdep_21_sobel_filter_enable(local_avm_aspace11_enable[0][0]),
      .avm_memdep_21_sobel_filter_read(local_avm_aspace11_read[0][0]),
      .avm_memdep_21_sobel_filter_write(local_avm_aspace11_write[0][0]),
      .avm_memdep_21_sobel_filter_address(local_avm_aspace11_address[0][0]),
      .avm_memdep_21_sobel_filter_writedata(local_avm_aspace11_writedata[0][0]),
      .avm_memdep_21_sobel_filter_byteenable(local_avm_aspace11_byteenable[0][0]),
      .avm_memdep_21_sobel_filter_waitrequest(local_avm_aspace11_waitrequest[0][0]),
      .avm_memdep_21_sobel_filter_readdata(local_avm_aspace11_readdata[0][0]),
      .avm_memdep_21_sobel_filter_readdatavalid(local_avm_aspace11_readdatavalid[0][0]),
      .avm_memdep_21_sobel_filter_burstcount(local_avm_aspace11_burstcount[0][0]),
      .avm_memdep_21_sobel_filter_writeack(local_avm_aspace11_writeack[0][0]),
      // AVM avm_unnamed_sobel_filter15_sobel_filter
      .avm_unnamed_sobel_filter15_sobel_filter_enable(local_avm_aspace11_enable[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_read(local_avm_aspace11_read[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_write(local_avm_aspace11_write[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_address(local_avm_aspace11_address[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_writedata(local_avm_aspace11_writedata[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_byteenable(local_avm_aspace11_byteenable[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_waitrequest(local_avm_aspace11_waitrequest[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_readdata(local_avm_aspace11_readdata[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_readdatavalid(local_avm_aspace11_readdatavalid[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_burstcount(local_avm_aspace11_burstcount[0][1]),
      .avm_unnamed_sobel_filter15_sobel_filter_writeack(local_avm_aspace11_writeack[0][1])
   );

   generate
   begin:local_mem_system_aspace8
      logic local_icm_arb_request [1][19];
      logic local_icm_arb_enable [1][19];
      logic local_icm_arb_read [1][19];
      logic local_icm_arb_write [1][19];
      logic local_icm_arb_burstcount [1][19];
      logic [16:0] local_icm_arb_address [1][19];
      logic [31:0] local_icm_arb_writedata [1][19];
      logic [3:0] local_icm_arb_byteenable [1][19];
      logic local_icm_arb_stall [1][19];
      logic local_icm_wrp_ack [1][19];
      logic local_icm_rrp_datavalid [1][19];
      logic [31:0] local_icm_rrp_data [1][19];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 19; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace8_enable[__i][__j]),
               .avm_read(local_avm_aspace8_read[__i][__j]),
               .avm_write(local_avm_aspace8_write[__i][__j]),
               .avm_address(local_avm_aspace8_address[__i][__j]),
               .avm_writedata(local_avm_aspace8_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace8_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace8_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace8_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace8_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace8_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace8_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:20];
            logic port_read [1:20];
            logic port_write [1:20];
            logic [16:0] port_address [1:20];
            logic [31:0] port_writedata [1:20];
            logic [3:0] port_byteenable [1:20];
            logic port_waitrequest [1:20];
            logic [31:0] port_readdata [1:20];
            logic port_readdatavalid [1:20];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

            // INST mem1 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem1
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[5]),
               .avs_port1_read(port_read[5]),
               .avs_port1_write(port_write[5]),
               .avs_port1_address(port_address[5]),
               .avs_port1_writedata(port_writedata[5]),
               .avs_port1_byteenable(port_byteenable[5]),
               .avs_port1_waitrequest(port_waitrequest[5]),
               .avs_port1_readdata(port_readdata[5]),
               .avs_port1_readdatavalid(port_readdatavalid[5]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[6]),
               .avs_port2_read(port_read[6]),
               .avs_port2_write(port_write[6]),
               .avs_port2_address(port_address[6]),
               .avs_port2_writedata(port_writedata[6]),
               .avs_port2_byteenable(port_byteenable[6]),
               .avs_port2_waitrequest(port_waitrequest[6]),
               .avs_port2_readdata(port_readdata[6]),
               .avs_port2_readdatavalid(port_readdatavalid[6]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[7]),
               .avs_port3_read(port_read[7]),
               .avs_port3_write(port_write[7]),
               .avs_port3_address(port_address[7]),
               .avs_port3_writedata(port_writedata[7]),
               .avs_port3_byteenable(port_byteenable[7]),
               .avs_port3_waitrequest(port_waitrequest[7]),
               .avs_port3_readdata(port_readdata[7]),
               .avs_port3_readdatavalid(port_readdatavalid[7]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[8]),
               .avs_port4_read(port_read[8]),
               .avs_port4_write(port_write[8]),
               .avs_port4_address(port_address[8]),
               .avs_port4_writedata(port_writedata[8]),
               .avs_port4_byteenable(port_byteenable[8]),
               .avs_port4_waitrequest(port_waitrequest[8]),
               .avs_port4_readdata(port_readdata[8]),
               .avs_port4_readdatavalid(port_readdatavalid[8])
            );

            // INST mem2 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem2
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[9]),
               .avs_port1_read(port_read[9]),
               .avs_port1_write(port_write[9]),
               .avs_port1_address(port_address[9]),
               .avs_port1_writedata(port_writedata[9]),
               .avs_port1_byteenable(port_byteenable[9]),
               .avs_port1_waitrequest(port_waitrequest[9]),
               .avs_port1_readdata(port_readdata[9]),
               .avs_port1_readdatavalid(port_readdatavalid[9]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[10]),
               .avs_port2_read(port_read[10]),
               .avs_port2_write(port_write[10]),
               .avs_port2_address(port_address[10]),
               .avs_port2_writedata(port_writedata[10]),
               .avs_port2_byteenable(port_byteenable[10]),
               .avs_port2_waitrequest(port_waitrequest[10]),
               .avs_port2_readdata(port_readdata[10]),
               .avs_port2_readdatavalid(port_readdatavalid[10]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[11]),
               .avs_port3_read(port_read[11]),
               .avs_port3_write(port_write[11]),
               .avs_port3_address(port_address[11]),
               .avs_port3_writedata(port_writedata[11]),
               .avs_port3_byteenable(port_byteenable[11]),
               .avs_port3_waitrequest(port_waitrequest[11]),
               .avs_port3_readdata(port_readdata[11]),
               .avs_port3_readdatavalid(port_readdatavalid[11]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[12]),
               .avs_port4_read(port_read[12]),
               .avs_port4_write(port_write[12]),
               .avs_port4_address(port_address[12]),
               .avs_port4_writedata(port_writedata[12]),
               .avs_port4_byteenable(port_byteenable[12]),
               .avs_port4_waitrequest(port_waitrequest[12]),
               .avs_port4_readdata(port_readdata[12]),
               .avs_port4_readdatavalid(port_readdatavalid[12])
            );

            // INST mem3 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem3
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[13]),
               .avs_port1_read(port_read[13]),
               .avs_port1_write(port_write[13]),
               .avs_port1_address(port_address[13]),
               .avs_port1_writedata(port_writedata[13]),
               .avs_port1_byteenable(port_byteenable[13]),
               .avs_port1_waitrequest(port_waitrequest[13]),
               .avs_port1_readdata(port_readdata[13]),
               .avs_port1_readdatavalid(port_readdatavalid[13]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[14]),
               .avs_port2_read(port_read[14]),
               .avs_port2_write(port_write[14]),
               .avs_port2_address(port_address[14]),
               .avs_port2_writedata(port_writedata[14]),
               .avs_port2_byteenable(port_byteenable[14]),
               .avs_port2_waitrequest(port_waitrequest[14]),
               .avs_port2_readdata(port_readdata[14]),
               .avs_port2_readdatavalid(port_readdatavalid[14]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[15]),
               .avs_port3_read(port_read[15]),
               .avs_port3_write(port_write[15]),
               .avs_port3_address(port_address[15]),
               .avs_port3_writedata(port_writedata[15]),
               .avs_port3_byteenable(port_byteenable[15]),
               .avs_port3_waitrequest(port_waitrequest[15]),
               .avs_port3_readdata(port_readdata[15]),
               .avs_port3_readdatavalid(port_readdatavalid[15]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[16]),
               .avs_port4_read(port_read[16]),
               .avs_port4_write(port_write[16]),
               .avs_port4_address(port_address[16]),
               .avs_port4_writedata(port_writedata[16]),
               .avs_port4_byteenable(port_byteenable[16]),
               .avs_port4_waitrequest(port_waitrequest[16]),
               .avs_port4_readdata(port_readdata[16]),
               .avs_port4_readdatavalid(port_readdatavalid[16])
            );

            // INST mem4 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem4
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[17]),
               .avs_port1_read(port_read[17]),
               .avs_port1_write(port_write[17]),
               .avs_port1_address(port_address[17]),
               .avs_port1_writedata(port_writedata[17]),
               .avs_port1_byteenable(port_byteenable[17]),
               .avs_port1_waitrequest(port_waitrequest[17]),
               .avs_port1_readdata(port_readdata[17]),
               .avs_port1_readdatavalid(port_readdatavalid[17]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[18]),
               .avs_port2_read(port_read[18]),
               .avs_port2_write(port_write[18]),
               .avs_port2_address(port_address[18]),
               .avs_port2_writedata(port_writedata[18]),
               .avs_port2_byteenable(port_byteenable[18]),
               .avs_port2_waitrequest(port_waitrequest[18]),
               .avs_port2_readdata(port_readdata[18]),
               .avs_port2_readdatavalid(port_readdatavalid[18]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[19]),
               .avs_port3_read(port_read[19]),
               .avs_port3_write(port_write[19]),
               .avs_port3_address(port_address[19]),
               .avs_port3_writedata(port_writedata[19]),
               .avs_port3_byteenable(port_byteenable[19]),
               .avs_port3_waitrequest(port_waitrequest[19]),
               .avs_port3_readdata(port_readdata[19]),
               .avs_port3_readdatavalid(port_readdatavalid[19]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[20]),
               .avs_port4_read(port_read[20]),
               .avs_port4_write(port_write[20]),
               .avs_port4_address(port_address[20]),
               .avs_port4_writedata(port_writedata[20]),
               .avs_port4_byteenable(port_byteenable[20]),
               .avs_port4_waitrequest(port_waitrequest[20]),
               .avs_port4_readdata(port_readdata[20]),
               .avs_port4_readdatavalid(port_readdatavalid[20])
            );

         end

         for( __j = 0; __j < 19; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [16:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(17),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[16].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[16].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[16].b_arb_read[0];
            assign icm_in_arb_write[0] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[16].b_arb_byteenable[0];
            assign router[16].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[16].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[16].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[16].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_984557311563155295
            sobel_filter_internal_ic_984557311563155295 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[17].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[17].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[17].b_arb_read[0];
            assign icm_in_arb_write[0] = router[17].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[17].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[17].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[17].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[17].b_arb_byteenable[0];
            assign router[17].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[17].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[17].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[17].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port5bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[16].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[16].b_arb_request[0];
            assign icm_in_arb_read[0] = router[16].b_arb_read[0];
            assign icm_in_arb_write[0] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[16].b_arb_byteenable[0];
            // INST data_ic of sobel_filter_internal_ic_984557311563155295
            sobel_filter_internal_ic_984557311563155295 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[5] = icm_out_arb_enable;
            assign bank[0].port_read[5] = icm_out_arb_read;
            assign bank[0].port_write[5] = icm_out_arb_write;
            assign bank[0].port_address[5] = icm_out_arb_address;
            assign bank[0].port_writedata[5] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[5] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[5];
            assign icm_out_rrp_data = bank[0].port_readdata[5];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[5];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port6bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[6] = icm_out_arb_enable;
            assign bank[0].port_read[6] = icm_out_arb_read;
            assign bank[0].port_write[6] = icm_out_arb_write;
            assign bank[0].port_address[6] = icm_out_arb_address;
            assign bank[0].port_writedata[6] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[6] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[6];
            assign icm_out_rrp_data = bank[0].port_readdata[6];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[6];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port7bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[7] = icm_out_arb_enable;
            assign bank[0].port_read[7] = icm_out_arb_read;
            assign bank[0].port_write[7] = icm_out_arb_write;
            assign bank[0].port_address[7] = icm_out_arb_address;
            assign bank[0].port_writedata[7] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[7] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[7];
            assign icm_out_rrp_data = bank[0].port_readdata[7];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[7];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port8bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[8] = icm_out_arb_enable;
            assign bank[0].port_read[8] = icm_out_arb_read;
            assign bank[0].port_write[8] = icm_out_arb_write;
            assign bank[0].port_address[8] = icm_out_arb_address;
            assign bank[0].port_writedata[8] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[8] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[8];
            assign icm_out_rrp_data = bank[0].port_readdata[8];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[8];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port9bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [16:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[6].b_arb_read[0];
            assign icm_in_arb_write[0] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[1] = router[16].b_arb_enable[0];
            assign icm_in_arb_request[1] = router[16].b_arb_request[0];
            assign icm_in_arb_read[1] = router[16].b_arb_read[0];
            assign icm_in_arb_write[1] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[16].b_arb_byteenable[0];
            // INST data_ic of sobel_filter_internal_ic_13806127209490066136
            sobel_filter_internal_ic_13806127209490066136 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[9] = icm_out_arb_enable;
            assign bank[0].port_read[9] = icm_out_arb_read;
            assign bank[0].port_write[9] = icm_out_arb_write;
            assign bank[0].port_address[9] = icm_out_arb_address;
            assign bank[0].port_writedata[9] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[9] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[9];
            assign icm_out_rrp_data = bank[0].port_readdata[9];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[9];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port10bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[7].b_arb_read[0];
            assign icm_in_arb_write[0] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[10] = icm_out_arb_enable;
            assign bank[0].port_read[10] = icm_out_arb_read;
            assign bank[0].port_write[10] = icm_out_arb_write;
            assign bank[0].port_address[10] = icm_out_arb_address;
            assign bank[0].port_writedata[10] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[10] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[10];
            assign icm_out_rrp_data = bank[0].port_readdata[10];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[10];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port11bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[8].b_arb_read[0];
            assign icm_in_arb_write[0] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[11] = icm_out_arb_enable;
            assign bank[0].port_read[11] = icm_out_arb_read;
            assign bank[0].port_write[11] = icm_out_arb_write;
            assign bank[0].port_address[11] = icm_out_arb_address;
            assign bank[0].port_writedata[11] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[11] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[11];
            assign icm_out_rrp_data = bank[0].port_readdata[11];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[11];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port12bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[9].b_arb_read[0];
            assign icm_in_arb_write[0] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[12] = icm_out_arb_enable;
            assign bank[0].port_read[12] = icm_out_arb_read;
            assign bank[0].port_write[12] = icm_out_arb_write;
            assign bank[0].port_address[12] = icm_out_arb_address;
            assign bank[0].port_writedata[12] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[12] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[12];
            assign icm_out_rrp_data = bank[0].port_readdata[12];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[12];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port13bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [16:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[10].b_arb_read[0];
            assign icm_in_arb_write[0] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[1] = router[16].b_arb_enable[0];
            assign icm_in_arb_request[1] = router[16].b_arb_request[0];
            assign icm_in_arb_read[1] = router[16].b_arb_read[0];
            assign icm_in_arb_write[1] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[16].b_arb_byteenable[0];
            // INST data_ic of sobel_filter_internal_ic_13806127209490066136
            sobel_filter_internal_ic_13806127209490066136 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[13] = icm_out_arb_enable;
            assign bank[0].port_read[13] = icm_out_arb_read;
            assign bank[0].port_write[13] = icm_out_arb_write;
            assign bank[0].port_address[13] = icm_out_arb_address;
            assign bank[0].port_writedata[13] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[13] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[13];
            assign icm_out_rrp_data = bank[0].port_readdata[13];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[13];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port14bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[18].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[18].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[18].b_arb_read[0];
            assign icm_in_arb_write[0] = router[18].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[18].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[18].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[18].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[18].b_arb_byteenable[0];
            assign router[18].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[18].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[18].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[18].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[14] = icm_out_arb_enable;
            assign bank[0].port_read[14] = icm_out_arb_read;
            assign bank[0].port_write[14] = icm_out_arb_write;
            assign bank[0].port_address[14] = icm_out_arb_address;
            assign bank[0].port_writedata[14] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[14] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[14];
            assign icm_out_rrp_data = bank[0].port_readdata[14];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[14];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port15bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[11].b_arb_read[0];
            assign icm_in_arb_write[0] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[15] = icm_out_arb_enable;
            assign bank[0].port_read[15] = icm_out_arb_read;
            assign bank[0].port_write[15] = icm_out_arb_write;
            assign bank[0].port_address[15] = icm_out_arb_address;
            assign bank[0].port_writedata[15] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[15] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[15];
            assign icm_out_rrp_data = bank[0].port_readdata[15];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[15];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port16bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[12].b_arb_read[0];
            assign icm_in_arb_write[0] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[16] = icm_out_arb_enable;
            assign bank[0].port_read[16] = icm_out_arb_read;
            assign bank[0].port_write[16] = icm_out_arb_write;
            assign bank[0].port_address[16] = icm_out_arb_address;
            assign bank[0].port_writedata[16] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[16] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[16];
            assign icm_out_rrp_data = bank[0].port_readdata[16];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[16];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port17bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [16:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[13].b_arb_read[0];
            assign icm_in_arb_write[0] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[0];
            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[1] = router[16].b_arb_enable[0];
            assign icm_in_arb_request[1] = router[16].b_arb_request[0];
            assign icm_in_arb_read[1] = router[16].b_arb_read[0];
            assign icm_in_arb_write[1] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[16].b_arb_byteenable[0];
            // INST data_ic of sobel_filter_internal_ic_13806127209490066136
            sobel_filter_internal_ic_13806127209490066136 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[17] = icm_out_arb_enable;
            assign bank[0].port_read[17] = icm_out_arb_read;
            assign bank[0].port_write[17] = icm_out_arb_write;
            assign bank[0].port_address[17] = icm_out_arb_address;
            assign bank[0].port_writedata[17] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[17] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[17];
            assign icm_out_rrp_data = bank[0].port_readdata[17];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[17];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port18bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[14].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[14].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[14].b_arb_read[0];
            assign icm_in_arb_write[0] = router[14].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[14].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[14].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[14].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[14].b_arb_byteenable[0];
            assign router[14].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[14].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[14].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[14].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[18] = icm_out_arb_enable;
            assign bank[0].port_read[18] = icm_out_arb_read;
            assign bank[0].port_write[18] = icm_out_arb_write;
            assign bank[0].port_address[18] = icm_out_arb_address;
            assign bank[0].port_writedata[18] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[18] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[18];
            assign icm_out_rrp_data = bank[0].port_readdata[18];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[18];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port19bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[15].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[15].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[15].b_arb_read[0];
            assign icm_in_arb_write[0] = router[15].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[15].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[15].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[15].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[15].b_arb_byteenable[0];
            assign router[15].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[15].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[15].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[15].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[19] = icm_out_arb_enable;
            assign bank[0].port_read[19] = icm_out_arb_read;
            assign bank[0].port_write[19] = icm_out_arb_write;
            assign bank[0].port_address[19] = icm_out_arb_address;
            assign bank[0].port_writedata[19] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[19] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[19];
            assign icm_out_rrp_data = bank[0].port_readdata[19];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[19];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port20bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_13419060221397700970
            sobel_filter_internal_ic_13419060221397700970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[20] = icm_out_arb_enable;
            assign bank[0].port_read[20] = icm_out_arb_read;
            assign bank[0].port_write[20] = icm_out_arb_write;
            assign bank[0].port_address[20] = icm_out_arb_address;
            assign bank[0].port_writedata[20] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[20] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[20];
            assign icm_out_rrp_data = bank[0].port_readdata[20];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[20];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace9
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [16:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace9_enable[__j][__k]),
               .avm_read(local_avm_aspace9_read[__j][__k]),
               .avm_write(local_avm_aspace9_write[__j][__k]),
               .avm_address(local_avm_aspace9_address[__j][__k]),
               .avm_writedata(local_avm_aspace9_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace9_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace9_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace9_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace9_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace9_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace9_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [16:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [16:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(17),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_10736695204410134599
            sobel_filter_internal_ic_10736695204410134599 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_11156511600522139566
            sobel_filter_internal_ic_11156511600522139566 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace10
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [16:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace10_enable[__k][__l]),
               .avm_read(local_avm_aspace10_read[__k][__l]),
               .avm_write(local_avm_aspace10_write[__k][__l]),
               .avm_address(local_avm_aspace10_address[__k][__l]),
               .avm_writedata(local_avm_aspace10_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace10_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace10_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace10_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace10_readdatavalid[__k][__l]),
               .avm_burstcount(local_avm_aspace10_burstcount[__k][__l]),
               .avm_writeack(local_avm_aspace10_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [16:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [16:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(17),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_10736695204410134599
            sobel_filter_internal_ic_10736695204410134599 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_11156511600522139566
            sobel_filter_internal_ic_11156511600522139566 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace11
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [16:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace11_enable[__l][__m]),
               .avm_read(local_avm_aspace11_read[__l][__m]),
               .avm_write(local_avm_aspace11_write[__l][__m]),
               .avm_address(local_avm_aspace11_address[__l][__m]),
               .avm_writedata(local_avm_aspace11_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace11_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace11_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace11_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace11_readdatavalid[__l][__m]),
               .avm_burstcount(local_avm_aspace11_burstcount[__l][__m]),
               .avm_writeack(local_avm_aspace11_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [16:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(131072),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [16:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(17),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_10736695204410134599
            sobel_filter_internal_ic_10736695204410134599 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [16:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [16:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of sobel_filter_internal_ic_11156511600522139566
            sobel_filter_internal_ic_11156511600522139566 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal_ic_984557311563155295
/////////////////////////////////////////////////////////////////
module sobel_filter_internal_ic_984557311563155295
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [16:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [16:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal_ic_13419060221397700970
/////////////////////////////////////////////////////////////////
module sobel_filter_internal_ic_13419060221397700970
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [16:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [16:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal_ic_13806127209490066136
/////////////////////////////////////////////////////////////////
module sobel_filter_internal_ic_13806127209490066136
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [16:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [16:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal_ic_10736695204410134599
/////////////////////////////////////////////////////////////////
module sobel_filter_internal_ic_10736695204410134599
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [16:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [16:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE sobel_filter_internal_ic_11156511600522139566
/////////////////////////////////////////////////////////////////
module sobel_filter_internal_ic_11156511600522139566
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [16:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [16:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(17),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(17),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

