	component emscripten_compute_dom_pk_code is
		port (
			clock                       : in  std_logic                     := 'X';             -- clk
			resetn                      : in  std_logic                     := 'X';             -- reset_n
			start                       : in  std_logic                     := 'X';             -- valid
			busy                        : out std_logic;                                        -- stall
			done                        : out std_logic;                                        -- valid
			stall                       : in  std_logic                     := 'X';             -- stall
			returndata                  : out std_logic_vector(31 downto 0);                    -- data
			keyCodeString               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_0                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_1                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_2                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_3                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_4                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_5                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_6                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_7                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_8                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_9                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_A                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ALT_LEFT             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ALT_RIGHT            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ARROW_DOWN           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ARROW_LEFT           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ARROW_RIGHT          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ARROW_UP             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_AUDIO_VOLUME_DOWN    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_AUDIO_VOLUME_MUTE    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_AUDIO_VOLUME_UP      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_B                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BACKQUOTE            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BACKSLASH            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BACKSPACE            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BRACKET_LEFT         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BRACKET_RIGHT        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_BACK         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_FAVORITES    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_FORWARD      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_HOME         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_REFRESH      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_SEARCH       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_BROWSER_STOP         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_C                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CAPS_LOCK            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_COMMA                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CONTEXT_MENU         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CONTROL_LEFT         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CONTROL_RIGHT        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CONVERT              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_COPY                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_CUT                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_D                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_DELETE               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_E                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_EJECT                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_END                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ENTER                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_EQUAL                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_ESCAPE               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F1                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F10                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F11                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F12                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F13                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F14                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F15                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F16                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F17                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F18                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F19                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F2                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F20                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F21                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F22                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F23                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F24                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F3                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F4                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F5                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F6                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F7                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F8                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_F9                   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_G                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_H                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_HELP                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_HOME                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_I                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_INSERT               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_INTL_BACKSLASH       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_INTL_RO              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_INTL_YEN             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_J                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_K                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_KANA_MODE            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_L                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LANG_1               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LANG_2               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LAUNCH_APP_1         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LAUNCH_APP_2         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LAUNCH_MAIL          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_LAUNCH_MEDIA_PLAYER  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_M                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MEDIA_PLAY_PAUSE     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MEDIA_SELECT         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MEDIA_STOP           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MEDIA_TRACK_NEXT     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MEDIA_TRACK_PREVIOUS : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_META_LEFT            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_META_RIGHT           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_MINUS                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_N                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NON_CONVERT          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_0             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_1             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_2             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_3             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_4             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_5             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_6             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_7             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_8             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_9             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_ADD           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_COMMA         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_DECIMAL       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_DIVIDE        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_ENTER         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_EQUAL         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_MULTIPLY      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUMPAD_SUBTRACT      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_NUM_LOCK             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_O                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_OS_LEFT              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_OS_RIGHT             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_P                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PAGE_DOWN            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PAGE_UP              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PASTE                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PAUSE                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PERIOD               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_POWER                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_PRINT_SCREEN         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_Q                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_QUOTE                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_R                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_S                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SCROLL_LOCK          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SEMICOLON            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SHIFT_LEFT           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SHIFT_RIGHT          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SLASH                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_SPACE                : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_T                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_TAB                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_U                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_UNKNOWN              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_V                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_W                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_X                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_Y                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			DOM_PK_Z                    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			avmm_0_rw_address           : out std_logic_vector(63 downto 0);                    -- address
			avmm_0_rw_byteenable        : out std_logic_vector(7 downto 0);                     -- byteenable
			avmm_0_rw_read              : out std_logic;                                        -- read
			avmm_0_rw_readdata          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- readdata
			avmm_0_rw_write             : out std_logic;                                        -- write
			avmm_0_rw_writedata         : out std_logic_vector(63 downto 0)                     -- writedata
		);
	end component emscripten_compute_dom_pk_code;

