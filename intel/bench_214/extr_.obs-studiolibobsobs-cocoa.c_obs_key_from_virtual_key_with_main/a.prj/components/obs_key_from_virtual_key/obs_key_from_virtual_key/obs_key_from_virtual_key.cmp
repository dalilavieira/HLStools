	component obs_key_from_virtual_key is
		port (
			clock                : in  std_logic                     := 'X';             -- clk
			resetn               : in  std_logic                     := 'X';             -- reset_n
			start                : in  std_logic                     := 'X';             -- valid
			busy                 : out std_logic;                                        -- stall
			done                 : out std_logic;                                        -- valid
			stall                : in  std_logic                     := 'X';             -- stall
			returndata           : out std_logic_vector(31 downto 0);                    -- data
			code                 : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			OBS_KEY_0            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_1            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_2            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_3            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_4            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_5            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_6            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_7            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_8            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_9            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_A            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_ALT          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_B            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_BACKSLASH    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_BACKSPACE    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_BRACKETLEFT  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_BRACKETRIGHT : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_C            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_CAPSLOCK     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_CLEAR        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_COMMA        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_CONTROL      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_D            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_DEAD_GRAVE   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_DELETE       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_DOWN         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_E            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_END          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_ENTER        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_EQUAL        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_ESCAPE       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F1           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F10          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F11          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F12          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F13          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F14          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F15          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F16          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F17          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F18          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F19          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F2           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F20          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F3           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F4           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F5           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F6           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F7           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F8           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_F9           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_G            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_H            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_HELP         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_HOME         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_I            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_J            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_K            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_L            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_LEFT         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_M            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_META         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_MINUS        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_N            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NONE         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM0         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM1         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM2         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM3         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM4         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM5         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM6         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM7         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM8         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUM9         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMASTERISK  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMEQUAL     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMMINUS     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMPERIOD    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMPLUS      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_NUMSLASH     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_O            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_P            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_PAGEDOWN     : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_PAGEUP       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_PERIOD       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_Q            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_QUOTE        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_R            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_RETURN       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_RIGHT        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_S            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_SECTION      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_SEMICOLON    : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_SHIFT        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_SLASH        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_SPACE        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_T            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_TAB          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_U            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_UP           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_V            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_W            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_X            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_Y            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			OBS_KEY_Z            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			avmm_0_rw_address    : out std_logic_vector(63 downto 0);                    -- address
			avmm_0_rw_byteenable : out std_logic_vector(7 downto 0);                     -- byteenable
			avmm_0_rw_read       : out std_logic;                                        -- read
			avmm_0_rw_readdata   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- readdata
			avmm_0_rw_write      : out std_logic;                                        -- write
			avmm_0_rw_writedata  : out std_logic_vector(63 downto 0)                     -- writedata
		);
	end component obs_key_from_virtual_key;

