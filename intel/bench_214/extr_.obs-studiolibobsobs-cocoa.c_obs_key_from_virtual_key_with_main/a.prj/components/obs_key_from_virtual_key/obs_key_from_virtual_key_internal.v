// (C) 1992-2019 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) HLS Compiler, Version 19.4.0 Build 64

/////////////////////////////////////////////////////////////////
// MODULE obs_key_from_virtual_key_internal
/////////////////////////////////////////////////////////////////
module obs_key_from_virtual_key_internal
(
   input logic clock,
   input logic resetn,
   input logic [31:0] code,
   input logic [63:0] OBS_KEY_0,
   input logic [63:0] OBS_KEY_1,
   input logic [63:0] OBS_KEY_2,
   input logic [63:0] OBS_KEY_3,
   input logic [63:0] OBS_KEY_4,
   input logic [63:0] OBS_KEY_5,
   input logic [63:0] OBS_KEY_6,
   input logic [63:0] OBS_KEY_7,
   input logic [63:0] OBS_KEY_8,
   input logic [63:0] OBS_KEY_9,
   input logic [63:0] OBS_KEY_A,
   input logic [63:0] OBS_KEY_ALT,
   input logic [63:0] OBS_KEY_B,
   input logic [63:0] OBS_KEY_BACKSLASH,
   input logic [63:0] OBS_KEY_BACKSPACE,
   input logic [63:0] OBS_KEY_BRACKETLEFT,
   input logic [63:0] OBS_KEY_BRACKETRIGHT,
   input logic [63:0] OBS_KEY_C,
   input logic [63:0] OBS_KEY_CAPSLOCK,
   input logic [63:0] OBS_KEY_CLEAR,
   input logic [63:0] OBS_KEY_COMMA,
   input logic [63:0] OBS_KEY_CONTROL,
   input logic [63:0] OBS_KEY_D,
   input logic [63:0] OBS_KEY_DEAD_GRAVE,
   input logic [63:0] OBS_KEY_DELETE,
   input logic [63:0] OBS_KEY_DOWN,
   input logic [63:0] OBS_KEY_E,
   input logic [63:0] OBS_KEY_END,
   input logic [63:0] OBS_KEY_ENTER,
   input logic [63:0] OBS_KEY_EQUAL,
   input logic [63:0] OBS_KEY_ESCAPE,
   input logic [63:0] OBS_KEY_F,
   input logic [63:0] OBS_KEY_F1,
   input logic [63:0] OBS_KEY_F10,
   input logic [63:0] OBS_KEY_F11,
   input logic [63:0] OBS_KEY_F12,
   input logic [63:0] OBS_KEY_F13,
   input logic [63:0] OBS_KEY_F14,
   input logic [63:0] OBS_KEY_F15,
   input logic [63:0] OBS_KEY_F16,
   input logic [63:0] OBS_KEY_F17,
   input logic [63:0] OBS_KEY_F18,
   input logic [63:0] OBS_KEY_F19,
   input logic [63:0] OBS_KEY_F2,
   input logic [63:0] OBS_KEY_F20,
   input logic [63:0] OBS_KEY_F3,
   input logic [63:0] OBS_KEY_F4,
   input logic [63:0] OBS_KEY_F5,
   input logic [63:0] OBS_KEY_F6,
   input logic [63:0] OBS_KEY_F7,
   input logic [63:0] OBS_KEY_F8,
   input logic [63:0] OBS_KEY_F9,
   input logic [63:0] OBS_KEY_G,
   input logic [63:0] OBS_KEY_H,
   input logic [63:0] OBS_KEY_HELP,
   input logic [63:0] OBS_KEY_HOME,
   input logic [63:0] OBS_KEY_I,
   input logic [63:0] OBS_KEY_J,
   input logic [63:0] OBS_KEY_K,
   input logic [63:0] OBS_KEY_L,
   input logic [63:0] OBS_KEY_LEFT,
   input logic [63:0] OBS_KEY_M,
   input logic [63:0] OBS_KEY_META,
   input logic [63:0] OBS_KEY_MINUS,
   input logic [63:0] OBS_KEY_N,
   input logic [63:0] OBS_KEY_NONE,
   input logic [63:0] OBS_KEY_NUM0,
   input logic [63:0] OBS_KEY_NUM1,
   input logic [63:0] OBS_KEY_NUM2,
   input logic [63:0] OBS_KEY_NUM3,
   input logic [63:0] OBS_KEY_NUM4,
   input logic [63:0] OBS_KEY_NUM5,
   input logic [63:0] OBS_KEY_NUM6,
   input logic [63:0] OBS_KEY_NUM7,
   input logic [63:0] OBS_KEY_NUM8,
   input logic [63:0] OBS_KEY_NUM9,
   input logic [63:0] OBS_KEY_NUMASTERISK,
   input logic [63:0] OBS_KEY_NUMEQUAL,
   input logic [63:0] OBS_KEY_NUMMINUS,
   input logic [63:0] OBS_KEY_NUMPERIOD,
   input logic [63:0] OBS_KEY_NUMPLUS,
   input logic [63:0] OBS_KEY_NUMSLASH,
   input logic [63:0] OBS_KEY_O,
   input logic [63:0] OBS_KEY_P,
   input logic [63:0] OBS_KEY_PAGEDOWN,
   input logic [63:0] OBS_KEY_PAGEUP,
   input logic [63:0] OBS_KEY_PERIOD,
   input logic [63:0] OBS_KEY_Q,
   input logic [63:0] OBS_KEY_QUOTE,
   input logic [63:0] OBS_KEY_R,
   input logic [63:0] OBS_KEY_RETURN,
   input logic [63:0] OBS_KEY_RIGHT,
   input logic [63:0] OBS_KEY_S,
   input logic [63:0] OBS_KEY_SECTION,
   input logic [63:0] OBS_KEY_SEMICOLON,
   input logic [63:0] OBS_KEY_SHIFT,
   input logic [63:0] OBS_KEY_SLASH,
   input logic [63:0] OBS_KEY_SPACE,
   input logic [63:0] OBS_KEY_T,
   input logic [63:0] OBS_KEY_TAB,
   input logic [63:0] OBS_KEY_U,
   input logic [63:0] OBS_KEY_UP,
   input logic [63:0] OBS_KEY_V,
   input logic [63:0] OBS_KEY_W,
   input logic [63:0] OBS_KEY_X,
   input logic [63:0] OBS_KEY_Y,
   input logic [63:0] OBS_KEY_Z,
   input logic start,
   output logic busy,
   output logic done,
   input logic stall,
   output logic [31:0] returndata,
   // AVM avmm_0_rw
   output logic avmm_0_rw_enable,
   output logic avmm_0_rw_read,
   output logic avmm_0_rw_write,
   output logic [63:0] avmm_0_rw_address,
   output logic [63:0] avmm_0_rw_writedata,
   output logic [7:0] avmm_0_rw_byteenable,
   input logic [63:0] avmm_0_rw_readdata,
   input logic avmm_0_rw_readdatavalid,
   output logic avmm_0_rw_burstcount,
   input logic avmm_0_rw_writeack
);
   genvar __i;
   logic avmm_0_global_avm_enable [1];
   logic avmm_0_global_avm_read [1];
   logic avmm_0_global_avm_write [1];
   logic [63:0] avmm_0_global_avm_address [1];
   logic [63:0] avmm_0_global_avm_writedata [1];
   logic [7:0] avmm_0_global_avm_byteenable [1];
   logic avmm_0_global_avm_waitrequest [1];
   logic [63:0] avmm_0_global_avm_readdata [1];
   logic avmm_0_global_avm_readdatavalid [1];
   logic avmm_0_global_avm_burstcount [1];
   logic avmm_0_global_avm_writeack [1];

   // INST obs_key_from_virtual_key_internal of obs_key_from_virtual_key_function_wrapper
   obs_key_from_virtual_key_function_wrapper obs_key_from_virtual_key_internal
   (
      .clock(clock),
      .resetn(resetn),
      .code(code),
      .OBS_KEY_0(OBS_KEY_0),
      .OBS_KEY_1(OBS_KEY_1),
      .OBS_KEY_2(OBS_KEY_2),
      .OBS_KEY_3(OBS_KEY_3),
      .OBS_KEY_4(OBS_KEY_4),
      .OBS_KEY_5(OBS_KEY_5),
      .OBS_KEY_6(OBS_KEY_6),
      .OBS_KEY_7(OBS_KEY_7),
      .OBS_KEY_8(OBS_KEY_8),
      .OBS_KEY_9(OBS_KEY_9),
      .OBS_KEY_A(OBS_KEY_A),
      .OBS_KEY_ALT(OBS_KEY_ALT),
      .OBS_KEY_B(OBS_KEY_B),
      .OBS_KEY_BACKSLASH(OBS_KEY_BACKSLASH),
      .OBS_KEY_BACKSPACE(OBS_KEY_BACKSPACE),
      .OBS_KEY_BRACKETLEFT(OBS_KEY_BRACKETLEFT),
      .OBS_KEY_BRACKETRIGHT(OBS_KEY_BRACKETRIGHT),
      .OBS_KEY_C(OBS_KEY_C),
      .OBS_KEY_CAPSLOCK(OBS_KEY_CAPSLOCK),
      .OBS_KEY_CLEAR(OBS_KEY_CLEAR),
      .OBS_KEY_COMMA(OBS_KEY_COMMA),
      .OBS_KEY_CONTROL(OBS_KEY_CONTROL),
      .OBS_KEY_D(OBS_KEY_D),
      .OBS_KEY_DEAD_GRAVE(OBS_KEY_DEAD_GRAVE),
      .OBS_KEY_DELETE(OBS_KEY_DELETE),
      .OBS_KEY_DOWN(OBS_KEY_DOWN),
      .OBS_KEY_E(OBS_KEY_E),
      .OBS_KEY_END(OBS_KEY_END),
      .OBS_KEY_ENTER(OBS_KEY_ENTER),
      .OBS_KEY_EQUAL(OBS_KEY_EQUAL),
      .OBS_KEY_ESCAPE(OBS_KEY_ESCAPE),
      .OBS_KEY_F(OBS_KEY_F),
      .OBS_KEY_F1(OBS_KEY_F1),
      .OBS_KEY_F10(OBS_KEY_F10),
      .OBS_KEY_F11(OBS_KEY_F11),
      .OBS_KEY_F12(OBS_KEY_F12),
      .OBS_KEY_F13(OBS_KEY_F13),
      .OBS_KEY_F14(OBS_KEY_F14),
      .OBS_KEY_F15(OBS_KEY_F15),
      .OBS_KEY_F16(OBS_KEY_F16),
      .OBS_KEY_F17(OBS_KEY_F17),
      .OBS_KEY_F18(OBS_KEY_F18),
      .OBS_KEY_F19(OBS_KEY_F19),
      .OBS_KEY_F2(OBS_KEY_F2),
      .OBS_KEY_F20(OBS_KEY_F20),
      .OBS_KEY_F3(OBS_KEY_F3),
      .OBS_KEY_F4(OBS_KEY_F4),
      .OBS_KEY_F5(OBS_KEY_F5),
      .OBS_KEY_F6(OBS_KEY_F6),
      .OBS_KEY_F7(OBS_KEY_F7),
      .OBS_KEY_F8(OBS_KEY_F8),
      .OBS_KEY_F9(OBS_KEY_F9),
      .OBS_KEY_G(OBS_KEY_G),
      .OBS_KEY_H(OBS_KEY_H),
      .OBS_KEY_HELP(OBS_KEY_HELP),
      .OBS_KEY_HOME(OBS_KEY_HOME),
      .OBS_KEY_I(OBS_KEY_I),
      .OBS_KEY_J(OBS_KEY_J),
      .OBS_KEY_K(OBS_KEY_K),
      .OBS_KEY_L(OBS_KEY_L),
      .OBS_KEY_LEFT(OBS_KEY_LEFT),
      .OBS_KEY_M(OBS_KEY_M),
      .OBS_KEY_META(OBS_KEY_META),
      .OBS_KEY_MINUS(OBS_KEY_MINUS),
      .OBS_KEY_N(OBS_KEY_N),
      .OBS_KEY_NONE(OBS_KEY_NONE),
      .OBS_KEY_NUM0(OBS_KEY_NUM0),
      .OBS_KEY_NUM1(OBS_KEY_NUM1),
      .OBS_KEY_NUM2(OBS_KEY_NUM2),
      .OBS_KEY_NUM3(OBS_KEY_NUM3),
      .OBS_KEY_NUM4(OBS_KEY_NUM4),
      .OBS_KEY_NUM5(OBS_KEY_NUM5),
      .OBS_KEY_NUM6(OBS_KEY_NUM6),
      .OBS_KEY_NUM7(OBS_KEY_NUM7),
      .OBS_KEY_NUM8(OBS_KEY_NUM8),
      .OBS_KEY_NUM9(OBS_KEY_NUM9),
      .OBS_KEY_NUMASTERISK(OBS_KEY_NUMASTERISK),
      .OBS_KEY_NUMEQUAL(OBS_KEY_NUMEQUAL),
      .OBS_KEY_NUMMINUS(OBS_KEY_NUMMINUS),
      .OBS_KEY_NUMPERIOD(OBS_KEY_NUMPERIOD),
      .OBS_KEY_NUMPLUS(OBS_KEY_NUMPLUS),
      .OBS_KEY_NUMSLASH(OBS_KEY_NUMSLASH),
      .OBS_KEY_O(OBS_KEY_O),
      .OBS_KEY_P(OBS_KEY_P),
      .OBS_KEY_PAGEDOWN(OBS_KEY_PAGEDOWN),
      .OBS_KEY_PAGEUP(OBS_KEY_PAGEUP),
      .OBS_KEY_PERIOD(OBS_KEY_PERIOD),
      .OBS_KEY_Q(OBS_KEY_Q),
      .OBS_KEY_QUOTE(OBS_KEY_QUOTE),
      .OBS_KEY_R(OBS_KEY_R),
      .OBS_KEY_RETURN(OBS_KEY_RETURN),
      .OBS_KEY_RIGHT(OBS_KEY_RIGHT),
      .OBS_KEY_S(OBS_KEY_S),
      .OBS_KEY_SECTION(OBS_KEY_SECTION),
      .OBS_KEY_SEMICOLON(OBS_KEY_SEMICOLON),
      .OBS_KEY_SHIFT(OBS_KEY_SHIFT),
      .OBS_KEY_SLASH(OBS_KEY_SLASH),
      .OBS_KEY_SPACE(OBS_KEY_SPACE),
      .OBS_KEY_T(OBS_KEY_T),
      .OBS_KEY_TAB(OBS_KEY_TAB),
      .OBS_KEY_U(OBS_KEY_U),
      .OBS_KEY_UP(OBS_KEY_UP),
      .OBS_KEY_V(OBS_KEY_V),
      .OBS_KEY_W(OBS_KEY_W),
      .OBS_KEY_X(OBS_KEY_X),
      .OBS_KEY_Y(OBS_KEY_Y),
      .OBS_KEY_Z(OBS_KEY_Z),
      .start(start),
      .busy(busy),
      .done(done),
      .stall(stall),
      .returndata(returndata),
      // AVM avm_retval_01_obs_key_from_virtual_key
      .avm_retval_01_obs_key_from_virtual_key_enable(avmm_0_global_avm_enable[0]),
      .avm_retval_01_obs_key_from_virtual_key_read(avmm_0_global_avm_read[0]),
      .avm_retval_01_obs_key_from_virtual_key_write(avmm_0_global_avm_write[0]),
      .avm_retval_01_obs_key_from_virtual_key_address(avmm_0_global_avm_address[0]),
      .avm_retval_01_obs_key_from_virtual_key_writedata(avmm_0_global_avm_writedata[0]),
      .avm_retval_01_obs_key_from_virtual_key_byteenable(avmm_0_global_avm_byteenable[0]),
      .avm_retval_01_obs_key_from_virtual_key_waitrequest(avmm_0_global_avm_waitrequest[0]),
      .avm_retval_01_obs_key_from_virtual_key_readdata(avmm_0_global_avm_readdata[0]),
      .avm_retval_01_obs_key_from_virtual_key_readdatavalid(avmm_0_global_avm_readdatavalid[0]),
      .avm_retval_01_obs_key_from_virtual_key_burstcount(avmm_0_global_avm_burstcount[0]),
      .avm_retval_01_obs_key_from_virtual_key_writeack(avmm_0_global_avm_writeack[0])
   );

   generate
   begin:avmm_0_
      logic avmm_0_icm_in_arb_request [1];
      logic avmm_0_icm_in_arb_enable [1];
      logic avmm_0_icm_in_arb_read [1];
      logic avmm_0_icm_in_arb_write [1];
      logic avmm_0_icm_in_arb_burstcount [1];
      logic [60:0] avmm_0_icm_in_arb_address [1];
      logic [63:0] avmm_0_icm_in_arb_writedata [1];
      logic [7:0] avmm_0_icm_in_arb_byteenable [1];
      logic avmm_0_icm_in_arb_stall [1];
      logic avmm_0_icm_in_wrp_ack [1];
      logic avmm_0_icm_in_rrp_datavalid [1];
      logic [63:0] avmm_0_icm_in_rrp_data [1];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [60:0] icm_out_0_rw_arb_address [1];
      logic [63:0] icm_out_0_rw_arb_writedata [1];
      logic [7:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [63:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_0_rw_arb_request [1];
      logic icm_routedavmm_0_rw_arb_enable [1];
      logic icm_routedavmm_0_rw_arb_read [1];
      logic icm_routedavmm_0_rw_arb_write [1];
      logic icm_routedavmm_0_rw_arb_burstcount [1];
      logic [60:0] icm_routedavmm_0_rw_arb_address [1];
      logic [63:0] icm_routedavmm_0_rw_arb_writedata [1];
      logic [7:0] icm_routedavmm_0_rw_arb_byteenable [1];
      logic icm_routedavmm_0_rw_arb_stall [1];
      logic icm_routedavmm_0_rw_wrp_ack [1];
      logic icm_routedavmm_0_rw_rrp_datavalid [1];
      logic [63:0] icm_routedavmm_0_rw_rrp_data [1];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:t
         // INST avmm_0_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(64),
            .WRITEDATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(64),
            .BYTEENA_W(8)
         )
         avmm_0_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_0_global_avm_enable[__i]),
            .avm_read(avmm_0_global_avm_read[__i]),
            .avm_write(avmm_0_global_avm_write[__i]),
            .avm_address(avmm_0_global_avm_address[__i]),
            .avm_writedata(avmm_0_global_avm_writedata[__i]),
            .avm_byteenable(avmm_0_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_0_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_0_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_0_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_0_global_avm_burstcount[__i]),
            .avm_writeack(avmm_0_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_0_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_0_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_0_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_0_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_0_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_0_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_0_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_0_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_0_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_0_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_0_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_0_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_0_rw of obs_key_from_virtual_key_internal_ic_11797103729985604047
      obs_key_from_virtual_key_internal_ic_11797103729985604047 global_icavmm_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_0_rw_arb_request),
         .m_arb_enable(icm_routedavmm_0_rw_arb_enable),
         .m_arb_read(icm_routedavmm_0_rw_arb_read),
         .m_arb_write(icm_routedavmm_0_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_0_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_0_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_0_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:mavmm_0_rw
         assign icm_routedavmm_0_rw_arb_request[__i] = avmm_0_icm_in_arb_request[__i];
         assign icm_routedavmm_0_rw_arb_enable[__i] = avmm_0_icm_in_arb_enable[__i];
         assign icm_routedavmm_0_rw_arb_read[__i] = avmm_0_icm_in_arb_read[__i];
         assign icm_routedavmm_0_rw_arb_write[__i] = avmm_0_icm_in_arb_write[__i];
         assign icm_routedavmm_0_rw_arb_burstcount[__i] = avmm_0_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_0_rw_arb_address[__i] = avmm_0_icm_in_arb_address[__i];
         assign icm_routedavmm_0_rw_arb_writedata[__i] = avmm_0_icm_in_arb_writedata[__i];
         assign icm_routedavmm_0_rw_arb_byteenable[__i] = avmm_0_icm_in_arb_byteenable[__i];
         assign avmm_0_icm_in_arb_stall[__i] = icm_routedavmm_0_rw_arb_stall[__i];
         assign avmm_0_icm_in_wrp_ack[__i] = icm_routedavmm_0_rw_wrp_ack[__i];
         assign avmm_0_icm_in_rrp_datavalid[__i] = icm_routedavmm_0_rw_rrp_datavalid[__i];
         assign avmm_0_icm_in_rrp_data[__i] = icm_routedavmm_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(64),
         .BYTEENA_W(8),
         .LATENCY(1),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(1),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_0_rw_enable),
         .avm_read(avmm_0_rw_read),
         .avm_write(avmm_0_rw_write),
         .avm_address(avmm_0_rw_address),
         .avm_writedata(avmm_0_rw_writedata),
         .avm_byteenable(avmm_0_rw_byteenable),
         .avm_readdata(avmm_0_rw_readdata),
         .avm_readdatavalid(avmm_0_rw_readdatavalid),
         .avm_burstcount(avmm_0_rw_burstcount),
         .avm_writeack(avmm_0_rw_writeack),
         .clock(clock),
         .resetn(resetn),
         .avm_waitrequest(1'b0)
      );

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE obs_key_from_virtual_key_internal_ic_11797103729985604047
/////////////////////////////////////////////////////////////////
module obs_key_from_virtual_key_internal_ic_11797103729985604047
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [60:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [60:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(61),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(61),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(61),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(61),
            .BYTEENA_W(8),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = s.in_arb_intf.stall;
   assign dp[1].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[1].in_intf.stall;
endmodule

