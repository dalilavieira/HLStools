// afs_abort_to_error.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module afs_abort_to_error (
		input  wire        clock,                //        clock.clk
		input  wire        resetn,               //        reset.reset_n
		input  wire        start,                //         call.valid
		output wire        busy,                 //             .stall
		output wire        done,                 //       return.valid
		input  wire        stall,                //             .stall
		output wire [31:0] returndata,           //   returndata.data
		input  wire [31:0] abort_code,           //   abort_code.data
		input  wire [63:0] EACCES,               //       EACCES.data
		input  wire [63:0] EAGAIN,               //       EAGAIN.data
		input  wire [63:0] EBADRQC,              //      EBADRQC.data
		input  wire [63:0] EBUSY,                //        EBUSY.data
		input  wire [63:0] EDEADLK,              //      EDEADLK.data
		input  wire [63:0] EDOM,                 //         EDOM.data
		input  wire [63:0] EDQUOT,               //       EDQUOT.data
		input  wire [63:0] EEXIST,               //       EEXIST.data
		input  wire [63:0] EFBIG,                //        EFBIG.data
		input  wire [63:0] EINVAL,               //       EINVAL.data
		input  wire [63:0] EIO,                  //          EIO.data
		input  wire [63:0] EISDIR,               //       EISDIR.data
		input  wire [63:0] EKEYEXPIRED,          //  EKEYEXPIRED.data
		input  wire [63:0] EKEYREJECTED,         // EKEYREJECTED.data
		input  wire [63:0] EMLINK,               //       EMLINK.data
		input  wire [63:0] ENAMETOOLONG,         // ENAMETOOLONG.data
		input  wire [63:0] ENODEV,               //       ENODEV.data
		input  wire [63:0] ENOENT,               //       ENOENT.data
		input  wire [63:0] ENOLCK,               //       ENOLCK.data
		input  wire [63:0] ENOMEDIUM,            //    ENOMEDIUM.data
		input  wire [63:0] ENOMEM,               //       ENOMEM.data
		input  wire [63:0] ENOSPC,               //       ENOSPC.data
		input  wire [63:0] ENOTCONN,             //     ENOTCONN.data
		input  wire [63:0] ENOTDIR,              //      ENOTDIR.data
		input  wire [63:0] ENOTEMPTY,            //    ENOTEMPTY.data
		input  wire [63:0] ENOTSUPP,             //     ENOTSUPP.data
		input  wire [63:0] ENXIO,                //        ENXIO.data
		input  wire [63:0] EPERM,                //        EPERM.data
		input  wire [63:0] EPROTO,               //       EPROTO.data
		input  wire [63:0] ERANGE,               //       ERANGE.data
		input  wire [63:0] EREMOTEIO,            //    EREMOTEIO.data
		input  wire [63:0] EROFS,                //        EROFS.data
		input  wire [63:0] ETIMEDOUT,            //    ETIMEDOUT.data
		input  wire [63:0] EWOULDBLOCK,          //  EWOULDBLOCK.data
		input  wire [63:0] EXDEV,                //        EXDEV.data
		output wire [63:0] avmm_0_rw_address,    //    avmm_0_rw.address
		output wire [7:0]  avmm_0_rw_byteenable, //             .byteenable
		output wire        avmm_0_rw_read,       //             .read
		input  wire [63:0] avmm_0_rw_readdata,   //             .readdata
		output wire        avmm_0_rw_write,      //             .write
		output wire [63:0] avmm_0_rw_writedata   //             .writedata
	);

	afs_abort_to_error_internal afs_abort_to_error_internal_inst (
		.clock                (clock),                //   input,   width = 1,        clock.clk
		.resetn               (resetn),               //   input,   width = 1,        reset.reset_n
		.start                (start),                //   input,   width = 1,         call.valid
		.busy                 (busy),                 //  output,   width = 1,             .stall
		.done                 (done),                 //  output,   width = 1,       return.valid
		.stall                (stall),                //   input,   width = 1,             .stall
		.returndata           (returndata),           //  output,  width = 32,   returndata.data
		.abort_code           (abort_code),           //   input,  width = 32,   abort_code.data
		.EACCES               (EACCES),               //   input,  width = 64,       EACCES.data
		.EAGAIN               (EAGAIN),               //   input,  width = 64,       EAGAIN.data
		.EBADRQC              (EBADRQC),              //   input,  width = 64,      EBADRQC.data
		.EBUSY                (EBUSY),                //   input,  width = 64,        EBUSY.data
		.EDEADLK              (EDEADLK),              //   input,  width = 64,      EDEADLK.data
		.EDOM                 (EDOM),                 //   input,  width = 64,         EDOM.data
		.EDQUOT               (EDQUOT),               //   input,  width = 64,       EDQUOT.data
		.EEXIST               (EEXIST),               //   input,  width = 64,       EEXIST.data
		.EFBIG                (EFBIG),                //   input,  width = 64,        EFBIG.data
		.EINVAL               (EINVAL),               //   input,  width = 64,       EINVAL.data
		.EIO                  (EIO),                  //   input,  width = 64,          EIO.data
		.EISDIR               (EISDIR),               //   input,  width = 64,       EISDIR.data
		.EKEYEXPIRED          (EKEYEXPIRED),          //   input,  width = 64,  EKEYEXPIRED.data
		.EKEYREJECTED         (EKEYREJECTED),         //   input,  width = 64, EKEYREJECTED.data
		.EMLINK               (EMLINK),               //   input,  width = 64,       EMLINK.data
		.ENAMETOOLONG         (ENAMETOOLONG),         //   input,  width = 64, ENAMETOOLONG.data
		.ENODEV               (ENODEV),               //   input,  width = 64,       ENODEV.data
		.ENOENT               (ENOENT),               //   input,  width = 64,       ENOENT.data
		.ENOLCK               (ENOLCK),               //   input,  width = 64,       ENOLCK.data
		.ENOMEDIUM            (ENOMEDIUM),            //   input,  width = 64,    ENOMEDIUM.data
		.ENOMEM               (ENOMEM),               //   input,  width = 64,       ENOMEM.data
		.ENOSPC               (ENOSPC),               //   input,  width = 64,       ENOSPC.data
		.ENOTCONN             (ENOTCONN),             //   input,  width = 64,     ENOTCONN.data
		.ENOTDIR              (ENOTDIR),              //   input,  width = 64,      ENOTDIR.data
		.ENOTEMPTY            (ENOTEMPTY),            //   input,  width = 64,    ENOTEMPTY.data
		.ENOTSUPP             (ENOTSUPP),             //   input,  width = 64,     ENOTSUPP.data
		.ENXIO                (ENXIO),                //   input,  width = 64,        ENXIO.data
		.EPERM                (EPERM),                //   input,  width = 64,        EPERM.data
		.EPROTO               (EPROTO),               //   input,  width = 64,       EPROTO.data
		.ERANGE               (ERANGE),               //   input,  width = 64,       ERANGE.data
		.EREMOTEIO            (EREMOTEIO),            //   input,  width = 64,    EREMOTEIO.data
		.EROFS                (EROFS),                //   input,  width = 64,        EROFS.data
		.ETIMEDOUT            (ETIMEDOUT),            //   input,  width = 64,    ETIMEDOUT.data
		.EWOULDBLOCK          (EWOULDBLOCK),          //   input,  width = 64,  EWOULDBLOCK.data
		.EXDEV                (EXDEV),                //   input,  width = 64,        EXDEV.data
		.avmm_0_rw_address    (avmm_0_rw_address),    //  output,  width = 64,    avmm_0_rw.address
		.avmm_0_rw_byteenable (avmm_0_rw_byteenable), //  output,   width = 8,             .byteenable
		.avmm_0_rw_read       (avmm_0_rw_read),       //  output,   width = 1,             .read
		.avmm_0_rw_readdata   (avmm_0_rw_readdata),   //   input,  width = 64,             .readdata
		.avmm_0_rw_write      (avmm_0_rw_write),      //  output,   width = 1,             .write
		.avmm_0_rw_writedata  (avmm_0_rw_writedata)   //  output,  width = 64,             .writedata
	);

endmodule
