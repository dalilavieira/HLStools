// SiS_Generic_ConvertCRData.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module SiS_Generic_ConvertCRData (
		input  wire        clock,                //     clock.clk
		input  wire        resetn,               //     reset.reset_n
		input  wire        start,                //      call.valid
		output wire        busy,                 //          .stall
		output wire        done,                 //    return.valid
		input  wire        stall,                //          .stall
		input  wire [63:0] SiS_Pr,               //    SiS_Pr.data
		input  wire [63:0] crdata,               //    crdata.data
		input  wire [31:0] xres,                 //      xres.data
		input  wire [31:0] yres,                 //      yres.data
		input  wire [63:0] var0,                 //      var0.data
		input  wire        writeres,             //  writeres.data
		output wire [63:0] avmm_0_rw_address,    // avmm_0_rw.address
		output wire [7:0]  avmm_0_rw_byteenable, //          .byteenable
		output wire        avmm_0_rw_read,       //          .read
		input  wire [63:0] avmm_0_rw_readdata,   //          .readdata
		output wire        avmm_0_rw_write,      //          .write
		output wire [63:0] avmm_0_rw_writedata   //          .writedata
	);

	SiS_Generic_ConvertCRData_internal sis_generic_convertcrdata_internal_inst (
		.clock                (clock),                //   input,   width = 1,     clock.clk
		.resetn               (resetn),               //   input,   width = 1,     reset.reset_n
		.start                (start),                //   input,   width = 1,      call.valid
		.busy                 (busy),                 //  output,   width = 1,          .stall
		.done                 (done),                 //  output,   width = 1,    return.valid
		.stall                (stall),                //   input,   width = 1,          .stall
		.SiS_Pr               (SiS_Pr),               //   input,  width = 64,    SiS_Pr.data
		.crdata               (crdata),               //   input,  width = 64,    crdata.data
		.xres                 (xres),                 //   input,  width = 32,      xres.data
		.yres                 (yres),                 //   input,  width = 32,      yres.data
		.var0                 (var0),                 //   input,  width = 64,      var0.data
		.writeres             (writeres),             //   input,   width = 1,  writeres.data
		.avmm_0_rw_address    (avmm_0_rw_address),    //  output,  width = 64, avmm_0_rw.address
		.avmm_0_rw_byteenable (avmm_0_rw_byteenable), //  output,   width = 8,          .byteenable
		.avmm_0_rw_read       (avmm_0_rw_read),       //  output,   width = 1,          .read
		.avmm_0_rw_readdata   (avmm_0_rw_readdata),   //   input,  width = 64,          .readdata
		.avmm_0_rw_write      (avmm_0_rw_write),      //  output,   width = 1,          .write
		.avmm_0_rw_writedata  (avmm_0_rw_writedata)   //  output,  width = 64,          .writedata
	);

endmodule
