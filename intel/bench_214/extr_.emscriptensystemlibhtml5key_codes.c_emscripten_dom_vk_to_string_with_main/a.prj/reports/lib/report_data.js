var areaJSON='{"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[0.806342, 0.826077, 0.100714, 0, 0], "total":[6978, 1721, 0, 0, 4], "name":"System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"emscripten_dom_vk_to_string", "compute_units":1, "type":"function", "total_percent":[0.806342, 0.826077, 0.100714, 0, 0], "total_kernel_resources":[6978, 1721, 0, 0, 4], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Component call", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 32 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"32b wide with 0 elements."}]}, {"name":"Component return", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 64 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"64b wide with 0 elements."}]}, {"name":"emscripten_dom_vk_to_string.B1.start", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[345, 1270, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[345, 1270, 0, 0, 0]}]}, {"name":"Feedback", "type":"resource", "data":[7, 7, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:199", "type":"resource", "data":[7, 7, 0, 0, 0], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[9, 6, 0, 0, 4], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"No Source Line", "type":"resource", "data":[6611, 436, 0, 0, 0], "debug":[[{"filename":"", "line":0}]], "children":[{"name":"1-bit Select", "type":"resource", "count":1, "data":[1, 1, 0, 0, 0]}, {"name":"1-bit Xor", "type":"resource", "count":158, "data":[158, 101, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":170, "data":[5686, 167, 0, 0, 0]}, {"name":"Select", "type":"resource", "count":169, "data":[700, 167, 0, 0, 0]}, {"name":"llvm.fpga.case", "type":"resource", "count":4, "data":[66, 0, 0, 0, 0]}]}, {"name":"extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:199", "type":"resource", "data":[3, 0, 0, 0, 0], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "children":[{"name":"Stream Read", "type":"resource", "count":1, "data":[3, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:391", "type":"resource", "data":[3, 2, 0, 0, 0], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":391}]], "children":[{"name":"Stream Write", "type":"resource", "count":1, "data":[3, 2, 0, 0, 0]}], "replace_name":"true"}]}]}]}]}';
var area_srcJSON='{"children":[{"children":[{"data":[16,13,0,0,4],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 32 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"32b wide with 0 elements.","type":"brief"}],"name":"Component call","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 64 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"64b wide with 0 elements.","type":"brief"}],"name":"Component return","type":"resource"},{"children":[{"count":1,"data":[345,1270,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"},{"count":1,"data":[1,1,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"1-bit Select","type":"resource"},{"count":158,"data":[158,101,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"1-bit Xor","type":"resource"},{"count":170,"data":[5686,167,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"32-bit Integer Compare","type":"resource"},{"count":169,"data":[700,167,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"Select","type":"resource"},{"count":4,"data":[66,0,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"llvm.fpga.case","type":"resource"}],"data":[6956,1706,0,0,0],"name":"No Source Line","type":"resource"},{"children":[{"count":1,"data":[3,0,0,0,0],"debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c","line":199}]],"name":"Stream Read","type":"resource"}],"data":[3,0,0,0,0],"debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c","line":199}]],"name":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:199","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[3,2,0,0,0],"debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c","line":391}]],"name":"Stream Write","type":"resource"}],"data":[3,2,0,0,0],"debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c","line":391}]],"name":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:391","replace_name":"true","type":"resource"}],"compute_units":1,"data":[6978,1721,0,0,4],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"emscripten_dom_vk_to_string","total_kernel_resources":[6978,1721,0,0,4],"total_percent":[0.806342,0.826077,0.100714,0,0],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[6978,1721,0,0,4],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"System","total":[6978,1721,0,0,4],"total_percent":[0.806342,0.826077,0.100714,0,0],"type":"module"}';
var mavJSON='{"nodes":[{"type":"component", "id":2, "name":"emscripten_dom_vk_to_string", "children":[{"type":"bb", "id":3, "name":"emscripten_dom_vk_to_string.B0.runOnce", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"emscripten_dom_vk_to_string.B1.start", "children":[{"type":"inst", "id":5, "name":"Stream Read", "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "details":[{"type":"table", "Width":"32 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"1", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":7, "name":"Stream Write", "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":391}]], "details":[{"type":"table", "Width":"64 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"29", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":9, "name":"Loop Input", "debug":[[{"filename":"", "line":0}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"10"}]}, {"type":"inst", "id":10, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"1", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"1", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}]}, {"type":"stream", "id":6, "name":"call.emscripten_dom_vk_to_string", "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "details":[{"type":"table", "Width":"32 bits", "Depth":"0", "Bits per symbol":"32 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Valid":"Yes", "Ready Latency":"0"}]}, {"type":"stream", "id":8, "name":"return.emscripten_dom_vk_to_string", "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "details":[{"type":"table", "Width":"64 bits", "Depth":"0", "Bits per symbol":"64 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Ready":"Yes", "Ready Latency":"0"}]}, {"type":"interface", "id":11, "name":"dom_vk_code", "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "details":[{"type":"table", "Stable":"No", "Width":"32 bits", "Component":"emscripten_dom_vk_to_string"}]}], "links":[{"from":6, "to":5}, {"from":7, "to":8}, {"from":11, "to":5}, {"from":10, "to":9}, {"from":3, "to":9}, {"from":5, "to":10}, {"from":7, "to":10}, {"from":9, "to":5}, {"from":5, "to":7}]}';
var loopsJSON='{"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Component: emscripten_dom_vk_to_string", "data":["", "", ""], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]], "details":[{"type":"brief", "text":"Task function"}, {"type":"text", "text":"Task function"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Component", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462820640727"}]}], "children":[{"name":"emscripten_dom_vk_to_string.B1.start", "data":["Yes", "~1", "n/a"], "debug":[[{"filename":"Component invocation", "line":0}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Stream Read Operation (%L)", "links":[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":"199"}]}, {"type":"text", "text":"Stream Write Operation (%L)", "links":[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":"391"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Loops in Components", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462826976357"}]}], "children":[]}]}]}';
var fmax_iiJSON='{"basicblocks":{"emscripten_dom_vk_to_string.B0.runOnce":{"name":"emscripten_dom_vk_to_string.B0.runOnce", "target_fmax":"Not specified", "target_ii":"Not specified", "achieved_fmax":"240.0", "achieved_ii":1, "latency":2, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"No", "is_single_block_loop":"No", "loop_layer":0, "loop_location":{}}, "emscripten_dom_vk_to_string.B1.start":{"name":"emscripten_dom_vk_to_string.B1.start", "target_fmax":"Not specified", "target_ii":"Not specified", "achieved_fmax":"240.0", "achieved_ii":1, "latency":1, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"Yes", "is_single_block_loop":"Yes", "loop_layer":1, "loop_location":{"details":[{"type":"text", "text":"Loop:  (%L)", "links":[{"filename":"Unknown location", "line":"0"}]}]}}}, "functions":{"emscripten_dom_vk_to_string":{"debug":[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}], "loop_hierachy":{"emscripten_dom_vk_to_string__no_loop":["emscripten_dom_vk_to_string.B0.runOnce"], "emscripten_dom_vk_to_string.B1.start":["emscripten_dom_vk_to_string.B1.start"]}}}}';
var summaryJSON='{"functionNameMapping":{"name":"Synthesized Function Name Mapping", "columns":["User-defined Function Name", "Mapped Function Name"], "children":[{"name":"emscripten_dom_vk_to_string(int)", "data":["emscripten_dom_vk_to_string"], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Function Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"emscripten_dom_vk_to_string", "data":[6978, 1721, 0, 0, 4], "debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "line":199}]]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[6978, 1721, 0, 0, 4], "data_percent":[0.816714, 0.100714, 0, 0]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}}';
var infoJSON='{"name":"Info","rows":[{"classes":["info-table"],"data":["./a"],"name":"Project Name"},{"data":["Arria10, 10AX115U1F45I1SG"],"name":"Target Family, Device"},{"data":["19.4.0 Build 64"],"name":"i++ Version"},{"data":["19.4.0 Build 64 Pro"],"name":"Quartus Version"},{"data":["i++ -march=Arria10 --simulator none bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c"],"name":"Command"},{"data":["Sun May 24 22:31:47 2020"],"name":"Reports Generated At"}]}';
var warningsJSON='{"rows":[{"debug":[[{"filename":"bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c","line":394}]],"details":["bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c:394:31: warning: variable \'dom_vk_code\' is uninitialized when used here [-Wuninitialized]"],"name":"variable \'dom_vk_code\' is uninitialized when used here [-Wuninitialized]"}]}';
var quartusJSON='{"quartusFitClockSummary":{"children":[{"details":[{"text":"This section contains a summary of the area and f<sub>MAX</sub> data generated by compiling the components through Quartus. \\nTo generate the data, run a Quartus compile on the project created for this design. To run the Quartus compile:\\n  1) Change to the quartus directory (./a.prj/quartus)\\n  2) quartus_sh --flow compile quartus_compile\\n","type":"text"}],"name":"Run Quartus compile to populate this section. See details for more information."}],"name":"Quartus Fit Summary"}}';
var fileJSON=[{"path":"/opt/altera_pro/19.4/hls/include/HLS/internal/_task_FPGA.h", "name":"_task_FPGA.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/internal/_task_FPGA.h", "content":"#ifndef _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#define _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#include \"HLS/function_traits.h\"\012\012namespace ihc {\012  namespace internal {\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Identify the functionality\012    //   task<function>::instance()\012    // * Launch the calculations\012    //   task<function>::instance().launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::instance().collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    template<typename X, X& f, bool detach = false>\012    class _task {\012    public:\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Constructor\012      _task() {}\012\012      // Disable copy-assignment operator\012      _task& operator=(const _task& rhs) = delete;\012\012      // Disable copy constructor\012      _task(const _task& other) = delete;\012\012      // Destructor\012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      template<int capacity, typename ... Args>\012      void launch(Args&&... args) {\012        __builtin_intel_hls_enqueue(capacity, f, std::forward<Args>(args)...);\012      } // launch\012\012      template<int capacity>\012      T collect() {\012        return static_cast<T>(__builtin_intel_hls_get(capacity, f));\012      }\012\012    }; // class _task\012\012  } //namespace internal\012} // namespace ihc\012\012#endif // _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012"}, {"path":"/home/canesche/HLStools/intel/bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "name":"extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "has_active_debug_locs":false, "absName":"/home/canesche/HLStools/intel/bench_214/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main/extr_.emscriptensystemlibhtml5key_codes.c_emscripten_dom_vk_to_string_with_main.c", "content":"#include \"HLS/hls.h\"\012#define NULL 0\012typedef unsigned long size_t;  // Customize by platform.\012typedef int scalar_t__;  // Either arithmetic or pointer type.\012/* By default, we understand bool (as a convenience). */\012#define false 0\012#define true 1\012\012/* Forward declarations */\012\012/* Type definitions */\012\012/* Variables and functions */\012#define  DOM_VK_0 310 \012#define  DOM_VK_1 309 \012#define  DOM_VK_2 308 \012#define  DOM_VK_3 307 \012#define  DOM_VK_4 306 \012#define  DOM_VK_5 305 \012#define  DOM_VK_6 304 \012#define  DOM_VK_7 303 \012#define  DOM_VK_8 302 \012#define  DOM_VK_9 301 \012#define  DOM_VK_A 300 \012#define  DOM_VK_ACCEPT 299 \012#define  DOM_VK_ADD 298 \012#define  DOM_VK_ALT 297 \012#define  DOM_VK_ALTGR 296 \012#define  DOM_VK_AMPERSAND 295 \012#define  DOM_VK_ASTERISK 294 \012#define  DOM_VK_AT 293 \012#define  DOM_VK_ATTN 292 \012#define  DOM_VK_B 291 \012#define  DOM_VK_BACK_QUOTE 290 \012#define  DOM_VK_BACK_SLASH 289 \012#define  DOM_VK_BACK_SPACE 288 \012#define  DOM_VK_C 287 \012#define  DOM_VK_CANCEL 286 \012#define  DOM_VK_CAPS_LOCK 285 \012#define  DOM_VK_CIRCUMFLEX 284 \012#define  DOM_VK_CLEAR 283 \012#define  DOM_VK_CLOSE_BRACKET 282 \012#define  DOM_VK_CLOSE_CURLY_BRACKET 281 \012#define  DOM_VK_CLOSE_PAREN 280 \012#define  DOM_VK_COLON 279 \012#define  DOM_VK_COMMA 278 \012#define  DOM_VK_CONTEXT_MENU 277 \012#define  DOM_VK_CONTROL 276 \012#define  DOM_VK_CONVERT 275 \012#define  DOM_VK_CRSEL 274 \012#define  DOM_VK_D 273 \012#define  DOM_VK_DECIMAL 272 \012#define  DOM_VK_DELETE 271 \012#define  DOM_VK_DIVIDE 270 \012#define  DOM_VK_DOLLAR 269 \012#define  DOM_VK_DOWN 268 \012#define  DOM_VK_E 267 \012#define  DOM_VK_EISU 266 \012#define  DOM_VK_END 265 \012#define  DOM_VK_ENTER 264 \012#define  DOM_VK_EQUALS 263 \012#define  DOM_VK_EREOF 262 \012#define  DOM_VK_ESCAPE 261 \012#define  DOM_VK_EXCLAMATION 260 \012#define  DOM_VK_EXECUTE 259 \012#define  DOM_VK_EXSEL 258 \012#define  DOM_VK_F 257 \012#define  DOM_VK_F1 256 \012#define  DOM_VK_F10 255 \012#define  DOM_VK_F11 254 \012#define  DOM_VK_F12 253 \012#define  DOM_VK_F13 252 \012#define  DOM_VK_F14 251 \012#define  DOM_VK_F15 250 \012#define  DOM_VK_F16 249 \012#define  DOM_VK_F17 248 \012#define  DOM_VK_F18 247 \012#define  DOM_VK_F19 246 \012#define  DOM_VK_F2 245 \012#define  DOM_VK_F20 244 \012#define  DOM_VK_F21 243 \012#define  DOM_VK_F22 242 \012#define  DOM_VK_F23 241 \012#define  DOM_VK_F24 240 \012#define  DOM_VK_F3 239 \012#define  DOM_VK_F4 238 \012#define  DOM_VK_F5 237 \012#define  DOM_VK_F6 236 \012#define  DOM_VK_F7 235 \012#define  DOM_VK_F8 234 \012#define  DOM_VK_F9 233 \012#define  DOM_VK_FINAL 232 \012#define  DOM_VK_G 231 \012#define  DOM_VK_GREATER_THAN 230 \012#define  DOM_VK_H 229 \012#define  DOM_VK_HANGUL 228 \012#define  DOM_VK_HASH 227 \012#define  DOM_VK_HELP 226 \012#define  DOM_VK_HOME 225 \012#define  DOM_VK_HYPHEN_MINUS 224 \012#define  DOM_VK_I 223 \012#define  DOM_VK_INSERT 222 \012#define  DOM_VK_J 221 \012#define  DOM_VK_JUNJA 220 \012#define  DOM_VK_K 219 \012#define  DOM_VK_KANJI 218 \012#define  DOM_VK_L 217 \012#define  DOM_VK_LEFT 216 \012#define  DOM_VK_LESS_THAN 215 \012#define  DOM_VK_M 214 \012#define  DOM_VK_META 213 \012#define  DOM_VK_MODECHANGE 212 \012#define  DOM_VK_MULTIPLY 211 \012#define  DOM_VK_N 210 \012#define  DOM_VK_NONCONVERT 209 \012#define  DOM_VK_NUMPAD0 208 \012#define  DOM_VK_NUMPAD1 207 \012#define  DOM_VK_NUMPAD2 206 \012#define  DOM_VK_NUMPAD3 205 \012#define  DOM_VK_NUMPAD4 204 \012#define  DOM_VK_NUMPAD5 203 \012#define  DOM_VK_NUMPAD6 202 \012#define  DOM_VK_NUMPAD7 201 \012#define  DOM_VK_NUMPAD8 200 \012#define  DOM_VK_NUMPAD9 199 \012#define  DOM_VK_NUM_LOCK 198 \012#define  DOM_VK_O 197 \012#define  DOM_VK_OPEN_BRACKET 196 \012#define  DOM_VK_OPEN_CURLY_BRACKET 195 \012#define  DOM_VK_OPEN_PAREN 194 \012#define  DOM_VK_P 193 \012#define  DOM_VK_PA1 192 \012#define  DOM_VK_PAGE_DOWN 191 \012#define  DOM_VK_PAGE_UP 190 \012#define  DOM_VK_PAUSE 189 \012#define  DOM_VK_PERCENT 188 \012#define  DOM_VK_PERIOD 187 \012#define  DOM_VK_PIPE 186 \012#define  DOM_VK_PLAY 185 \012#define  DOM_VK_PLUS 184 \012#define  DOM_VK_PRINT 183 \012#define  DOM_VK_PRINTSCREEN 182 \012#define  DOM_VK_Q 181 \012#define  DOM_VK_QUESTION_MARK 180 \012#define  DOM_VK_QUOTE 179 \012#define  DOM_VK_R 178 \012#define  DOM_VK_RETURN 177 \012#define  DOM_VK_RIGHT 176 \012#define  DOM_VK_S 175 \012#define  DOM_VK_SCROLL_LOCK 174 \012#define  DOM_VK_SELECT 173 \012#define  DOM_VK_SEMICOLON 172 \012#define  DOM_VK_SEPARATOR 171 \012#define  DOM_VK_SHIFT 170 \012#define  DOM_VK_SLASH 169 \012#define  DOM_VK_SLEEP 168 \012#define  DOM_VK_SPACE 167 \012#define  DOM_VK_SUBTRACT 166 \012#define  DOM_VK_T 165 \012#define  DOM_VK_TAB 164 \012#define  DOM_VK_TILDE 163 \012#define  DOM_VK_U 162 \012#define  DOM_VK_UNDERSCORE 161 \012#define  DOM_VK_UP 160 \012#define  DOM_VK_V 159 \012#define  DOM_VK_VOLUME_DOWN 158 \012#define  DOM_VK_VOLUME_MUTE 157 \012#define  DOM_VK_VOLUME_UP 156 \012#define  DOM_VK_W 155 \012#define  DOM_VK_WIN 154 \012#define  DOM_VK_WIN_ICO_00 153 \012#define  DOM_VK_WIN_ICO_CLEAR 152 \012#define  DOM_VK_WIN_ICO_HELP 151 \012#define  DOM_VK_WIN_OEM_ATTN 150 \012#define  DOM_VK_WIN_OEM_AUTO 149 \012#define  DOM_VK_WIN_OEM_BACKTAB 148 \012#define  DOM_VK_WIN_OEM_CLEAR 147 \012#define  DOM_VK_WIN_OEM_COPY 146 \012#define  DOM_VK_WIN_OEM_CUSEL 145 \012#define  DOM_VK_WIN_OEM_ENLW 144 \012#define  DOM_VK_WIN_OEM_FINISH 143 \012#define  DOM_VK_WIN_OEM_FJ_JISHO 142 \012#define  DOM_VK_WIN_OEM_FJ_LOYA 141 \012#define  DOM_VK_WIN_OEM_FJ_MASSHOU 140 \012#define  DOM_VK_WIN_OEM_FJ_ROYA 139 \012#define  DOM_VK_WIN_OEM_FJ_TOUROKU 138 \012#define  DOM_VK_WIN_OEM_JUMP 137 \012#define  DOM_VK_WIN_OEM_PA1 136 \012#define  DOM_VK_WIN_OEM_PA2 135 \012#define  DOM_VK_WIN_OEM_PA3 134 \012#define  DOM_VK_WIN_OEM_RESET 133 \012#define  DOM_VK_WIN_OEM_WSCTRL 132 \012#define  DOM_VK_X 131 \012#define  DOM_VK_Y 130 \012#define  DOM_VK_Z 129 \012#define  DOM_VK_ZOOM 128 \012\012component\012const char *emscripten_dom_vk_to_string(int dom_vk_code)\012{\012  switch(dom_vk_code)\012  {\012    case DOM_VK_CANCEL:               return \"DOM_VK_CANCEL\";\012    case DOM_VK_HELP:                 return \"DOM_VK_HELP\";\012    case DOM_VK_BACK_SPACE:           return \"DOM_VK_BACK_SPACE\";\012    case DOM_VK_TAB:                  return \"DOM_VK_TAB\";\012    case DOM_VK_CLEAR:                return \"DOM_VK_CLEAR\";\012    case DOM_VK_RETURN:               return \"DOM_VK_RETURN\";\012    case DOM_VK_ENTER:                return \"DOM_VK_ENTER\";\012    case DOM_VK_SHIFT:                return \"DOM_VK_SHIFT\";\012    case DOM_VK_CONTROL:              return \"DOM_VK_CONTROL\";\012    case DOM_VK_ALT:                  return \"DOM_VK_ALT\";\012    case DOM_VK_PAUSE:                return \"DOM_VK_PAUSE\";\012    case DOM_VK_CAPS_LOCK:            return \"DOM_VK_CAPS_LOCK\";\012    /* case DOM_VK_KANA:              DOM_VK_KANA == DOM_VK_HANGUL */\012    case DOM_VK_HANGUL:               return \"DOM_VK_KANA/DOM_VK_HANGUL\";\012    case DOM_VK_EISU:                 return \"DOM_VK_EISU\";\012    case DOM_VK_JUNJA:                return \"DOM_VK_JUNJA\";\012    case DOM_VK_FINAL:                return \"DOM_VK_FINAL\";\012    /* case DOM_VK_HANJA:             DOM_VK_HANJA == DOM_VK_KANJI */\012    case DOM_VK_KANJI:                return \"DOM_VK_HANJA/DOM_VK_KANJI\";\012    case DOM_VK_ESCAPE:               return \"DOM_VK_ESCAPE\";\012    case DOM_VK_CONVERT:              return \"DOM_VK_CONVERT\";\012    case DOM_VK_NONCONVERT:           return \"DOM_VK_NONCONVERT\";\012    case DOM_VK_ACCEPT:               return \"DOM_VK_ACCEPT\";\012    case DOM_VK_MODECHANGE:           return \"DOM_VK_MODECHANGE\";\012    case DOM_VK_SPACE:                return \"DOM_VK_SPACE\";\012    case DOM_VK_PAGE_UP:              return \"DOM_VK_PAGE_UP\";\012    case DOM_VK_PAGE_DOWN:            return \"DOM_VK_PAGE_DOWN\";\012    case DOM_VK_END:                  return \"DOM_VK_END\";\012    case DOM_VK_HOME:                 return \"DOM_VK_HOME\";\012    case DOM_VK_LEFT:                 return \"DOM_VK_LEFT\";\012    case DOM_VK_UP:                   return \"DOM_VK_UP\";\012    case DOM_VK_RIGHT:                return \"DOM_VK_RIGHT\";\012    case DOM_VK_DOWN:                 return \"DOM_VK_DOWN\";\012    case DOM_VK_SELECT:               return \"DOM_VK_SELECT\";\012    case DOM_VK_PRINT:                return \"DOM_VK_PRINT\";\012    case DOM_VK_EXECUTE:              return \"DOM_VK_EXECUTE\";\012    case DOM_VK_PRINTSCREEN:          return \"DOM_VK_PRINTSCREEN\";\012    case DOM_VK_INSERT:               return \"DOM_VK_INSERT\";\012    case DOM_VK_DELETE:               return \"DOM_VK_DELETE\";\012    case DOM_VK_0:                    return \"DOM_VK_0\";\012    case DOM_VK_1:                    return \"DOM_VK_1\";\012    case DOM_VK_2:                    return \"DOM_VK_2\";\012    case DOM_VK_3:                    return \"DOM_VK_3\";\012    case DOM_VK_4:                    return \"DOM_VK_4\";\012    case DOM_VK_5:                    return \"DOM_VK_5\";\012    case DOM_VK_6:                    return \"DOM_VK_6\";\012    case DOM_VK_7:                    return \"DOM_VK_7\";\012    case DOM_VK_8:                    return \"DOM_VK_8\";\012    case DOM_VK_9:                    return \"DOM_VK_9\";\012    case DOM_VK_COLON:                return \"DOM_VK_COLON\";\012    case DOM_VK_SEMICOLON:            return \"DOM_VK_SEMICOLON\";\012    case DOM_VK_LESS_THAN:            return \"DOM_VK_LESS_THAN\";\012    case DOM_VK_EQUALS:               return \"DOM_VK_EQUALS\";\012    case DOM_VK_GREATER_THAN:         return \"DOM_VK_GREATER_THAN\";\012    case DOM_VK_QUESTION_MARK:        return \"DOM_VK_QUESTION_MARK\";\012    case DOM_VK_AT:                   return \"DOM_VK_AT\";\012    case DOM_VK_A:                    return \"DOM_VK_A\";\012    case DOM_VK_B:                    return \"DOM_VK_B\";\012    case DOM_VK_C:                    return \"DOM_VK_C\";\012    case DOM_VK_D:                    return \"DOM_VK_D\";\012    case DOM_VK_E:                    return \"DOM_VK_E\";\012    case DOM_VK_F:                    return \"DOM_VK_F\";\012    case DOM_VK_G:                    return \"DOM_VK_G\";\012    case DOM_VK_H:                    return \"DOM_VK_H\";\012    case DOM_VK_I:                    return \"DOM_VK_I\";\012    case DOM_VK_J:                    return \"DOM_VK_J\";\012    case DOM_VK_K:                    return \"DOM_VK_K\";\012    case DOM_VK_L:                    return \"DOM_VK_L\";\012    case DOM_VK_M:                    return \"DOM_VK_M\";\012    case DOM_VK_N:                    return \"DOM_VK_N\";\012    case DOM_VK_O:                    return \"DOM_VK_O\";\012    case DOM_VK_P:                    return \"DOM_VK_P\";\012    case DOM_VK_Q:                    return \"DOM_VK_Q\";\012    case DOM_VK_R:                    return \"DOM_VK_R\";\012    case DOM_VK_S:                    return \"DOM_VK_S\";\012    case DOM_VK_T:                    return \"DOM_VK_T\";\012    case DOM_VK_U:                    return \"DOM_VK_U\";\012    case DOM_VK_V:                    return \"DOM_VK_V\";\012    case DOM_VK_W:                    return \"DOM_VK_W\";\012    case DOM_VK_X:                    return \"DOM_VK_X\";\012    case DOM_VK_Y:                    return \"DOM_VK_Y\";\012    case DOM_VK_Z:                    return \"DOM_VK_Z\";\012    case DOM_VK_WIN:                  return \"DOM_VK_WIN\";\012    case DOM_VK_CONTEXT_MENU:         return \"DOM_VK_CONTEXT_MENU\";\012    case DOM_VK_SLEEP:                return \"DOM_VK_SLEEP\";\012    case DOM_VK_NUMPAD0:              return \"DOM_VK_NUMPAD0\";\012    case DOM_VK_NUMPAD1:              return \"DOM_VK_NUMPAD1\";\012    case DOM_VK_NUMPAD2:              return \"DOM_VK_NUMPAD2\";\012    case DOM_VK_NUMPAD3:              return \"DOM_VK_NUMPAD3\";\012    case DOM_VK_NUMPAD4:              return \"DOM_VK_NUMPAD4\";\012    case DOM_VK_NUMPAD5:              return \"DOM_VK_NUMPAD5\";\012    case DOM_VK_NUMPAD6:              return \"DOM_VK_NUMPAD6\";\012    case DOM_VK_NUMPAD7:              return \"DOM_VK_NUMPAD7\";\012    case DOM_VK_NUMPAD8:              return \"DOM_VK_NUMPAD8\";\012    case DOM_VK_NUMPAD9:              return \"DOM_VK_NUMPAD9\";\012    case DOM_VK_MULTIPLY:             return \"DOM_VK_MULTIPLY\";\012    case DOM_VK_ADD:                  return \"DOM_VK_ADD\";\012    case DOM_VK_SEPARATOR:            return \"DOM_VK_SEPARATOR\";\012    case DOM_VK_SUBTRACT:             return \"DOM_VK_SUBTRACT\";\012    case DOM_VK_DECIMAL:              return \"DOM_VK_DECIMAL\";\012    case DOM_VK_DIVIDE:               return \"DOM_VK_DIVIDE\";\012    case DOM_VK_F1:                   return \"DOM_VK_F1\";\012    case DOM_VK_F2:                   return \"DOM_VK_F2\";\012    case DOM_VK_F3:                   return \"DOM_VK_F3\";\012    case DOM_VK_F4:                   return \"DOM_VK_F4\";\012    case DOM_VK_F5:                   return \"DOM_VK_F5\";\012    case DOM_VK_F6:                   return \"DOM_VK_F6\";\012    case DOM_VK_F7:                   return \"DOM_VK_F7\";\012    case DOM_VK_F8:                   return \"DOM_VK_F8\";\012    case DOM_VK_F9:                   return \"DOM_VK_F9\";\012    case DOM_VK_F10:                  return \"DOM_VK_F10\";\012    case DOM_VK_F11:                  return \"DOM_VK_F11\";\012    case DOM_VK_F12:                  return \"DOM_VK_F12\";\012    case DOM_VK_F13:                  return \"DOM_VK_F13\";\012    case DOM_VK_F14:                  return \"DOM_VK_F14\";\012    case DOM_VK_F15:                  return \"DOM_VK_F15\";\012    case DOM_VK_F16:                  return \"DOM_VK_F16\";\012    case DOM_VK_F17:                  return \"DOM_VK_F17\";\012    case DOM_VK_F18:                  return \"DOM_VK_F18\";\012    case DOM_VK_F19:                  return \"DOM_VK_F19\";\012    case DOM_VK_F20:                  return \"DOM_VK_F20\";\012    case DOM_VK_F21:                  return \"DOM_VK_F21\";\012    case DOM_VK_F22:                  return \"DOM_VK_F22\";\012    case DOM_VK_F23:                  return \"DOM_VK_F23\";\012    case DOM_VK_F24:                  return \"DOM_VK_F24\";\012    case DOM_VK_NUM_LOCK:             return \"DOM_VK_NUM_LOCK\";\012    case DOM_VK_SCROLL_LOCK:          return \"DOM_VK_SCROLL_LOCK\";\012    case DOM_VK_WIN_OEM_FJ_JISHO:     return \"DOM_VK_WIN_OEM_FJ_JISHO\";\012    case DOM_VK_WIN_OEM_FJ_MASSHOU:   return \"DOM_VK_WIN_OEM_FJ_MASSHOU\";\012    case DOM_VK_WIN_OEM_FJ_TOUROKU:   return \"DOM_VK_WIN_OEM_FJ_TOUROKU\";\012    case DOM_VK_WIN_OEM_FJ_LOYA:      return \"DOM_VK_WIN_OEM_FJ_LOYA\";\012    case DOM_VK_WIN_OEM_FJ_ROYA:      return \"DOM_VK_WIN_OEM_FJ_ROYA\";\012    case DOM_VK_CIRCUMFLEX:           return \"DOM_VK_CIRCUMFLEX\";\012    case DOM_VK_EXCLAMATION:          return \"DOM_VK_EXCLAMATION\";\012    /* case DOM_VK_DOUBLE_QUOTE:      DOM_VK_DOUBLE_QUOTE == DOM_VK_HASH */\012    case DOM_VK_HASH:                 return \"DOM_VK_DOUBLE_QUOTE/DOM_VK_HASH\";\012    case DOM_VK_DOLLAR:               return \"DOM_VK_DOLLAR\";\012    case DOM_VK_PERCENT:              return \"DOM_VK_PERCENT\";\012    case DOM_VK_AMPERSAND:            return \"DOM_VK_AMPERSAND\";\012    case DOM_VK_UNDERSCORE:           return \"DOM_VK_UNDERSCORE\";\012    case DOM_VK_OPEN_PAREN:           return \"DOM_VK_OPEN_PAREN\";\012    case DOM_VK_CLOSE_PAREN:          return \"DOM_VK_CLOSE_PAREN\";\012    case DOM_VK_ASTERISK:             return \"DOM_VK_ASTERISK\";\012    case DOM_VK_PLUS:                 return \"DOM_VK_PLUS\";\012    case DOM_VK_PIPE:                 return \"DOM_VK_PIPE\";\012    case DOM_VK_HYPHEN_MINUS:         return \"DOM_VK_HYPHEN_MINUS\";\012    case DOM_VK_OPEN_CURLY_BRACKET:   return \"DOM_VK_OPEN_CURLY_BRACKET\";\012    case DOM_VK_CLOSE_CURLY_BRACKET:  return \"DOM_VK_CLOSE_CURLY_BRACKET\";\012    case DOM_VK_TILDE:                return \"DOM_VK_TILDE\";\012    case DOM_VK_VOLUME_MUTE:          return \"DOM_VK_VOLUME_MUTE\";\012    case DOM_VK_VOLUME_DOWN:          return \"DOM_VK_VOLUME_DOWN\";\012    case DOM_VK_VOLUME_UP:            return \"DOM_VK_VOLUME_UP\";\012    case DOM_VK_COMMA:                return \"DOM_VK_COMMA\";\012    case DOM_VK_PERIOD:               return \"DOM_VK_PERIOD\";\012    case DOM_VK_SLASH:                return \"DOM_VK_SLASH\";\012    case DOM_VK_BACK_QUOTE:           return \"DOM_VK_BACK_QUOTE\";\012    case DOM_VK_OPEN_BRACKET:         return \"DOM_VK_OPEN_BRACKET\";\012    case DOM_VK_BACK_SLASH:           return \"DOM_VK_BACK_SLASH\";\012    case DOM_VK_CLOSE_BRACKET:        return \"DOM_VK_CLOSE_BRACKET\";\012    case DOM_VK_QUOTE:                return \"DOM_VK_QUOTE\";\012    case DOM_VK_META:                 return \"DOM_VK_META\";\012    case DOM_VK_ALTGR:                return \"DOM_VK_ALTGR\";\012    case DOM_VK_WIN_ICO_HELP:         return \"DOM_VK_WIN_ICO_HELP\";\012    case DOM_VK_WIN_ICO_00:           return \"DOM_VK_WIN_ICO_00\";\012    case DOM_VK_WIN_ICO_CLEAR:        return \"DOM_VK_WIN_ICO_CLEAR\";\012    case DOM_VK_WIN_OEM_RESET:        return \"DOM_VK_WIN_OEM_RESET\";\012    case DOM_VK_WIN_OEM_JUMP:         return \"DOM_VK_WIN_OEM_JUMP\";\012    case DOM_VK_WIN_OEM_PA1:          return \"DOM_VK_WIN_OEM_PA1\";\012    case DOM_VK_WIN_OEM_PA2:          return \"DOM_VK_WIN_OEM_PA2\";\012    case DOM_VK_WIN_OEM_PA3:          return \"DOM_VK_WIN_OEM_PA3\";\012    case DOM_VK_WIN_OEM_WSCTRL:       return \"DOM_VK_WIN_OEM_WSCTRL\";\012    case DOM_VK_WIN_OEM_CUSEL:        return \"DOM_VK_WIN_OEM_CUSEL\";\012    case DOM_VK_WIN_OEM_ATTN:         return \"DOM_VK_WIN_OEM_ATTN\";\012    case DOM_VK_WIN_OEM_FINISH:       return \"DOM_VK_WIN_OEM_FINISH\";\012    case DOM_VK_WIN_OEM_COPY:         return \"DOM_VK_WIN_OEM_COPY\";\012    case DOM_VK_WIN_OEM_AUTO:         return \"DOM_VK_WIN_OEM_AUTO\";\012    case DOM_VK_WIN_OEM_ENLW:         return \"DOM_VK_WIN_OEM_ENLW\";\012    case DOM_VK_WIN_OEM_BACKTAB:      return \"DOM_VK_WIN_OEM_BACKTAB\";\012    case DOM_VK_ATTN:                 return \"DOM_VK_ATTN\";\012    case DOM_VK_CRSEL:                return \"DOM_VK_CRSEL\";\012    case DOM_VK_EXSEL:                return \"DOM_VK_EXSEL\";\012    case DOM_VK_EREOF:                return \"DOM_VK_EREOF\";\012    case DOM_VK_PLAY:                 return \"DOM_VK_PLAY\";\012    case DOM_VK_ZOOM:                 return \"DOM_VK_ZOOM\";\012    case DOM_VK_PA1:                  return \"DOM_VK_PA1\";\012    case DOM_VK_WIN_OEM_CLEAR:        return \"DOM_VK_WIN_OEM_CLEAR\";\012    default:                          return \"Unknown DOM_VK code\";\012  }\012}/* Main routine for emscripten_dom_vk_to_string */\012int main() {\012  int dom_vk_code;\012  emscripten_dom_vk_to_string(dom_vk_code);\012  return 0;\012}\012"}, {"path":"/opt/altera_pro/19.4/hls/include/HLS/function_traits.h", "name":"function_traits.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/function_traits.h", "content":"#ifndef _INTEL_IHC_HLS_FUNCTION_TRAITS\012#define _INTEL_IHC_HLS_FUNCTION_TRAITS\012\012namespace ihc {\012  // Some metaprogramming to extract the return type\012  // from a function type\012  template<typename F>\012  struct function_traits {\012    using return_type = F;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(*)(Args...)>\012  {\012    using return_type = R;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(&)(Args...)>\012  {\012    using return_type = R;\012  };\012}\012\012#endif // _INTEL_IHC_HLS_FUNCTION_TRAITS\012"}, {"path":"/opt/altera_pro/19.4/hls/include/HLS/hls.h", "name":"hls.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/hls.h", "content":"#ifndef __HLS_H__\012#define __HLS_H__\012\012#ifdef __INTELFPGA_COMPILER__\012   // Compiling for FPGA or x86 using FPGA compiler\012#  undef component\012#  define component __attribute__((ihc_component)) __attribute__((noinline))\012#else\012#  ifndef component\012#    define component\012#  endif\012#  ifndef HLS_X86\012#    define HLS_X86\012#  endif\012#endif\012#include <type_traits>\012#include \"HLS/hls_internal.h\"\012#include \"HLS/task.h\"\012#include \"HLS/lsu.h\"\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#ifdef __INTELFPGA_COMPILER__\012// Memory attributes\012#define hls_register                                  __attribute__((__register__))\012#define hls_memory                                    __attribute__((__memory__))\012#define hls_memory_impl(__x)                          __attribute__((__memory__(__x)))\012#define hls_numbanks(__x)                             __attribute__((__numbanks__(__x)))\012#define hls_bankwidth(__x)                            __attribute__((__bankwidth__(__x)))\012#define hls_singlepump                                __attribute__((__singlepump__))\012#define hls_doublepump                                __attribute__((__doublepump__))\012#define hls_numports_readonly_writeonly(__rd, __wr)   __attribute__((__numports_readonly_writeonly__(__rd, __wr)))\012#define hls_bankbits(__x, ...)                        __attribute__((__bank_bits__(__x, ##__VA_ARGS__)))\012#define hls_merge(__x, __y)                           __attribute__((merge(__x, __y)))\012#define hls_init_on_reset                             __attribute__((__static_array_reset__(1)))\012#define hls_init_on_powerup                           __attribute__((__static_array_reset__(0)))\012#define hls_numreadports(__x)                         __attribute__((__numreadports__(__x)))\012#define hls_numwriteports(__x)                        __attribute__((__numwriteports__(__x)))\012#define hls_simple_dual_port_memory                   __attribute__((simple_dual_port))\012#define hls_max_replicates(__x)                       __attribute__((max_replicates(__x)))\012\012// Interface synthesis attributes\012#define hls_avalon_streaming_component         __attribute__((component_interface(\"avalon_streaming\")))\012#define hls_avalon_slave_component             __attribute__((component_interface(\"avalon_mm_slave\"))) __attribute__((stall_free_return))\012#define hls_always_run_component               __attribute__((component_interface(\"always_run\"))) __attribute__((stall_free_return))\012#define hls_conduit_argument                   __attribute__((argument_interface(\"wire\")))\012#define hls_avalon_slave_register_argument     __attribute__((argument_interface(\"avalon_mm_slave\")))\012#define hls_avalon_slave_memory_argument(__x)  __attribute__((local_mem_size(__x))) __attribute__((slave_memory_argument))\012#define hls_stable_argument                    __attribute__((stable_argument))\012#define hls_stall_free_return                  __attribute__((stall_free_return))\012\012// Component attributes\012#define hls_max_concurrency(__x)               __attribute__((max_concurrency(__x)))\012#define hls_scheduler_target_fmax_mhz(__x)     __attribute__((scheduler_target_fmax_mhz(__x)))\012#define hls_component_ii(__x)                  __attribute__((hls_ii(__x)))\012#define hls_disable_component_pipelining       __attribute__((hls_force_loop_pipelining(\"off\")))\012\012// Cluster attributes\012#define hls_use_stall_enable_clusters          __attribute__((stall_enable))\012\012// fpga_reg support\012#define hls_fpga_reg(__x)                      __fpga_reg(__x)\012\012#else\012#define hls_register\012#define hls_memory\012#define hls_numbanks(__x)\012#define hls_bankwidth(__x)\012#define hls_singlepump\012#define hls_doublepump\012#define hls_numports_readonly_writeonly(__rd, __wr)\012#define hls_bankbits(__x, ...)\012#define hls_merge(__x, __y)\012#define hls_init_on_reset\012#define hls_init_on_powerup\012\012#define hls_numreadports(__x)\012#define hls_numwriteports(__x)\012\012#define hls_simple_dual_port_memory\012#define hls_max_replicates(__x)\012\012#define hls_avalon_streaming_component\012#define hls_avalon_slave_component\012#define hls_always_run_component\012#define hls_conduit_argument\012#define hls_avalon_slave_register_argument\012#define hls_avalon_slave_memory_argument(__x)\012#define hls_stable_argument\012#define hls_stall_free_return\012\012#define hls_max_concurrency(__x)\012#define hls_scheduler_target_fmax_mhz(__x)\012#define hls_component_ii(__x)\012#define hls_disable_component_pipelining\012\012#define hls_use_stall_enable_clusters\012\012#define hls_fpga_reg(__x) __x\012#endif\012\012////////////////////////////////////////////////////////////////////////////////\012// Interfaces Declarations\012////////////////////////////////////////////////////////////////////////////////\012\012namespace ihc {\012\012  ////////////////////////////////\012 /// memory master interface  ///\012////////////////////////////////\012\012  template<int _N> struct dwidth {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 64;\012  };\012\012  template<int _N> struct awidth {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 64;\012  };\012\012  template<int _N> struct latency {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct readwrite_mode {\012    // Should be enum readwrite_t but we don't know how to make GetValue generic\012    static constexpr enum readwrite_t value = (readwrite_t) _N;\012    static constexpr enum readwrite_t defaultValue = readwrite;\012  };\012\012  template<int _N> struct maxburst {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct align {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = -1;\012  };\012\012  template<int _N> struct aspace {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct waitrequest {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012  template <template <int> class _Type, class _T>\012  struct MatchType : std::is_same<_Type<_T::value>,_T> {};\012\012  template <template <int> class _Type, class ... _T>\012  struct GetValue {\012    // any value is ok here, so '0' is fine for an arbitrary instantiation\012    enum { value = _Type<0>::defaultValue };\012    // only when _T is empty\012  };\012\012  template <template <int> class _Type, class _T1, class ... _T>\012  struct GetValue<_Type, _T1, _T...> {\012    enum { value = std::conditional<MatchType<_Type, _T1>::value, _T1, GetValue<_Type, _T...>>::type::value };\012  };\012\012template <typename _DT, class ... _Params>\012class mm_master final\012#ifdef HLS_X86\012  : public internal::memory_base\012#endif\012{\012public:\012\012#ifdef HLS_X86\012  template <typename _T>\012  explicit mm_master(_T *data, std::size_t size = 0, bool use_socket = false)\012      : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                              _readwrite_mode, true, _maxburst, _align,\012                              _waitrequest, data, size, sizeof(_DT),\012                              use_socket) {\012    mSize = size;\012    mUse_socket = use_socket;\012    if (size > 0 && size % sizeof(_DT) != 0) {\012      __ihc_hls_runtime_error_x86(\012          \"The buffer size must be a multiple of the type size\");\012    }\012  }\012#else\012  template<typename _T> explicit mm_master(_T *data, std::size_t size=0, bool use_socket=false);\012#endif\012\012  // The copy constructor and assignment operator are needed in the testbench\012  // but illegal in a component\012  mm_master(const mm_master &other);\012\012  mm_master& operator=(const mm_master& other);\012\012  // Clean up any derrived mm_masters when this object is destroyed.\012  ~mm_master();\012\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the mm_master object and are only\012  // supported in the testbench:\012  //   mm_master()\012  //   getInterfaceAtIndex()\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the base pointer and should only be used\012  // in the component:\012  //   operator[]()\012  //   operator*()\012  //   operator->()\012  //   operator _T()\012  //   operator+()\012  //   operator&()\012  //   operator|()\012  //   operator^()\012  //////////////////////////////////////////////////////////////////////////////\012\012  _DT &operator[](int index);\012  _DT &operator*();\012  _DT *operator->();\012  template<typename _T> operator _T();\012  _DT *operator+(int index);\012  template<typename _T> _DT *operator&(_T value);\012  template<typename _T> _DT *operator|(_T value);\012  template<typename _T> _DT *operator^(_T value);\012  // This function is only supported in the testbench:\012  mm_master<_DT, _Params...>& getInterfaceAtIndex(int index);\012\012#ifdef HLS_X86\012private:\012  std::vector<internal::memory_base* > new_masters;\012#else //Fpga\012\012\012#endif\012private:\012  static constexpr int _dwidth   = GetValue<ihc::dwidth, _Params...>::value;\012  static constexpr int _awidth   = GetValue<ihc::awidth, _Params...>::value;\012  static constexpr int _aspace   = GetValue<ihc::aspace, _Params...>::value;\012  static constexpr int _latency  = GetValue<ihc::latency, _Params...>::value;\012  static constexpr int _maxburst = GetValue<ihc::maxburst, _Params...>::value;\012  static constexpr int _align    = (GetValue<ihc::align, _Params...>::value == -1) ? alignof(_DT) : GetValue<ihc::align, _Params...>::value;\012  static constexpr int _readwrite_mode = GetValue<ihc::readwrite_mode, _Params...>::value;\012  static constexpr bool _waitrequest = GetValue<ihc::waitrequest, _Params...>::value;\012\012  _DT __hls_mm_master_aspace(_aspace) *mPtr;\012  int mSize;\012  bool mUse_socket;\012};\012  /////////////////////////////\012 /// streaming interfaces  ///\012//////////////////////////////\012\012  template<int _N> struct buffer {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012\012  template<int _N> struct readyLatency {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012\012  template<int _N> struct bitsPerSymbol {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012\012  template<int _N> struct usesPackets {\012    static constexpr bool value = _N;\012    static constexpr bool defaultValue = false;\012  };\012\012  template<int _N> struct usesValid {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = true;\012  };\012\012  template<int _N> struct usesReady {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = true;\012  };\012\012  template<int _N> struct usesEmpty {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012  template<int _N> struct firstSymbolInHighOrderBits {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012template <typename _T, class ... _Params>\012class stream_in final : public internal::stream<_T, _Params...> {\012public:\012  stream_in();\012  stream_in(const stream_in&) = delete;\012  stream_in(const stream_in&&) = delete;\012  stream_in& operator=(const stream_in&) = delete;\012  stream_in& operator=(const stream_in&&) = delete;\012  _T read(bool wait=false);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=false);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  void setValidCycles(unsigned average_valid, unsigned valid_delta=0);\012\012 private:\012    static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012    static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012    static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012    static constexpr bool _firstSymbolInHighOrderBits =  GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012    static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012    static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012    static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012    static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012};\012\012template <typename _T, class ... _Params>\012class stream_out final : public internal::stream<_T, _Params...> {\012\012public:\012  stream_out();\012  stream_out(const stream_out&) = delete;\012  stream_out(const stream_out&&) = delete;\012  stream_out& operator=(const stream_out&) = delete;\012  stream_out& operator=(const stream_out&&) = delete;\012  _T read(bool wait=false);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=false);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  void setReadyCycles(unsigned average_ready, unsigned ready_delta=0);\012\012 private:\012    static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012    static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012    static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012    static constexpr bool _firstSymbolInHighOrderBits = GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012    static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012    static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012    static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012    static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012};\012\012\012// Bi-directional inter-task stream\012template<typename _T, class ... _Params>\012class stream final : public internal::stream<_T, _Params...> {\012public:\012  stream();\012  stream(const stream&) = delete;\012  stream(const stream&&) = delete;\012  stream& operator=(const stream&) = delete;\012  stream& operator=(const stream&&) = delete;\012  _T read(bool wait=true);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=true);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=true);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012\012private:\012  static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012  static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012  static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012  static constexpr bool _firstSymbolInHighOrderBits = GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012  static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012  static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012  static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012  static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012  static_assert(_usesValid, \"Bi-directional stream interfaces must use Valid signal\");\012  static_assert(_usesReady, \"Bi-directional stream interfaces must use Ready signal\");\012\012};\012\012}//namespace ihc\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Cosimulation Support API\012////////////////////////////////////////////////////////////////////////////////\012\012#define ihc_hls_enqueue(retptr, func, ...) \\\012  { \\\012    if (__ihc_hls_async_call_capable()){ \\\012      __ihc_enqueue_handle=(retptr); \\\012      (void) (*(func))(__VA_ARGS__); \\\012      __ihc_enqueue_handle=0; \\\012    } else { \\\012      *(retptr) = (*(func))(__VA_ARGS__); \\\012    } \\\012  }\012\012#define ihc_hls_enqueue_noret(func, ...) \\\012  { \\\012  __ihc_enqueue_handle=& __ihc_enqueue_handle; \\\012  (*(func))(__VA_ARGS__); \\\012  __ihc_enqueue_handle=0; \\\012  }\012\012#define ihc_hls_component_run_all(component_address) \\\012  __ihc_hls_component_run_all((void*) (component_address))\012\012#define ihc_hls_set_component_wait_cycle(component_address, num_wait_cycles) \\\012  __ihc_hls_set_component_wait_cycle((void*) (component_address), num_wait_cycles)\012\012// When running a simulation, this function will issue a reset to all components\012// in the testbench\012// Returns: 0 if reset did not occur (ie. if the component target is x86)\012//          1 if reset occured (ie. if the component target is an FPGA)\012extern \"C\" int ihc_hls_sim_reset(void);\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Component Built-Ins\012////////////////////////////////////////////////////////////////////////////////\012\012//Builtin memory fence function call\012#ifdef HLS_X86\012inline void ihc_fence() {}\012\012#else\012extern \"C\" void __acl_mem_fence(unsigned int);\012inline void ihc_fence() {\012  // fence on all types of fences from OpenCL\012  __acl_mem_fence(-1);\012}\012#endif\012\012////////////////////////////////////////////////////////////////////////////////\012// Implementions, no declarations below\012////////////////////////////////////////////////////////////////////////////////\012\012namespace ihc {\012#ifdef HLS_X86\012\012  //////////////////\012 /// mm_master  ///\012//////////////////\012\012  // The copy constructor and assignment operator are needed in the testbench\012  // necessary to ensurebut illegal in a component\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...>::mm_master(const mm_master &other)\012    : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                            static_cast<readwrite_t>(_readwrite_mode), true,\012                            _maxburst, _align, _waitrequest, other.get_base(),\012                            other.get_size(), sizeof(_DT),\012                            other.uses_socket()) {\012  mPtr = other.mPtr;\012  mSize = other.mSize;\012  mUse_socket = other.mUse_socket;\012  mem = other.mem;\012}\012\012template <typename _DT, class ... _Params>\012  mm_master<_DT, _Params...>& mm_master<_DT, _Params...>::operator=(const mm_master& other) {\012    mPtr = other.mPtr;\012    mSize = other.mSize;\012    mUse_socket = other.m_Use_socket;\012    mem = other.mem;\012  }\012\012  // Clean up any derrived mm_masters when this object is destroyed.\012template <typename _DT, class ... _Params>\012  mm_master<_DT, _Params...>::~mm_master() {\012    for(std::vector<internal::memory_base* >::iterator it = new_masters.begin(),\012        ie = new_masters.end(); it != ie; it++) {\012      delete *it;\012    }\012    new_masters.clear();\012  }\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params... >::operator[](int index) {\012  assert(size==0 || index*data_size<size);\012  return ((_DT*)mem)[index];\012}\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params...>::operator*() {\012  return ((_DT*)mem)[0];\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator->() {\012  return (_DT*)mem;\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)mem);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  assert(size==0 || index*data_size<size);\012  return &((_DT*)mem)[index];\012}\012\012// Bitwise operators\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (_DT*)((unsigned long long)mem & (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (_DT*)((unsigned long long)mem | (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (_DT*)((unsigned long long)mem ^ (unsigned long long)value);\012}\012\012// Function for creating new mm_master at an offset\012template <typename _DT, class ... _Params>\012mm_master<_DT, _Params...>& mm_master<_DT,_Params...>::getInterfaceAtIndex(int index) {\012  assert(mSize==0 || index*data_size<mSize);\012  // This new object is cleaned up when this' destructor is called.\012  mm_master<_DT, _Params...> *temp = new mm_master(&(((_DT*)mem)[index]), mSize - index * sizeof(_DT), mUse_socket);\012  new_masters.push_back(temp);\012  return *temp;\012}\012\012  ///////////////////\012 /// stream_in   ///\012///////////////////\012\012template<typename _T, class ... _Params>\012stream_in<_T,_Params...>::stream_in() {}\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T, _Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T,_Params...>::read(bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be larger than the average stall value\");\012  }\012  internal::stream<_T,_Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::setValidCycles(unsigned average_valid, unsigned valid_delta) {\012  if (average_valid == 0) {\012    __ihc_hls_runtime_error_x86(\"The valid average in setValidCycles must be at least 1\");\012  }\012  if (valid_delta > average_valid) {\012    __ihc_hls_runtime_error_x86(\"The valid delta in setValidCycles cannot be larger than the average valid value\");\012  }\012  internal::stream<_T,_Params...>::setReadyorValidCycles(average_valid, valid_delta);\012}\012\012  ///////////////////\012 /// stream_out  ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  stream_out<_T,_Params...>::stream_out() {\012}\012\012template<typename _T, class ... _Params>\012  _T stream_out<_T,_Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be larger than the average stall value\");\012  }\012  internal::stream<_T,_Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::setReadyCycles(unsigned average_ready, unsigned ready_delta) {\012  if (average_ready == 0) {\012    __ihc_hls_runtime_error_x86(\"The ready average in setReadCycles must be at least 1\");\012  }\012  if (ready_delta > average_ready) {\012    __ihc_hls_runtime_error_x86(\"The ready delta in setReadyCycles cannot be larger than the average ready value\");\012  }\012  internal::stream<_T,_Params...>::setReadyorValidCycles(average_ready, ready_delta);\012}\012\012  ///////////////////\012  ///// stream  /////\012  ///////////////////\012\012template<typename _T, class ... _Params>\012  stream<_T,_Params...>::stream() {\012}\012\012template<typename _T, class ... _Params>\012  _T stream<_T,_Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012\012#else //fpga path. Ignore the class just return a consistant pointer/reference\012\012  //////////////////\012 /// mm_master  ///\012//////////////////\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params...>::operator[](int index) {\012  return *(_DT*)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, index);\012}\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT,_Params...>::operator*(){\012  return *(_DT*)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT,_Params...>::operator->(){\012  return (_DT*)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  return (_DT*)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0) + index;\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0));\012}\012\012// Bitwise operators\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) & (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) | (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) ^ (unsigned long long)value);\012}\012\012  ///////////////////\012 /// stream_in   ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T, _Params...>::tryRead(bool &success) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012  _T stream_in<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, false, false, 0 );\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer,  _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based reads require a stream with the parameterization: usesEmpty<true>\");\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  int emp = 0;\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp);\012}\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void) wait;\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based reads require a stream with the parameterization: usesEmpty<true>\");\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, 0 );\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this,  _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, empty );\012}\012\012  ///////////////////\012 /// stream_out  ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream_out<_T,_Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp );\012}\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012 __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  int emp;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void)wait;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &empty );\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012  ///////////////////\012  ///// stream  /////\012  ///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream<_T,_Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp );\012}\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012 __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  int emp;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void)wait;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &empty );\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012#endif\012} // namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012"}, {"path":"/opt/altera_pro/19.4/hls/include/HLS/hls_internal.h", "name":"hls_internal.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/hls_internal.h", "content":"#ifndef __HLS_INTERNAL_H__\012#define __HLS_INTERNAL_H__\012\012#ifdef HLS_X86\012#include <queue>\012#include <string.h> //memcpy\012#include <assert.h>\012#include <stdio.h>\012#include <stdlib.h>\012#include <mutex>\012#include <condition_variable>\012#endif\012\012#ifdef __INTELFPGA_COMPILER__\012#define __hls_mm_master_aspace(__x) __attribute__((address_space(__x + 1024)))\012#else\012#define __hls_mm_master_aspace(__x)\012#endif\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#if defined(_MSC_VER)\012  #define WINDOWSWEAK __declspec(selectany)\012  #define LINUXWEAK\012#else\012  #define WINDOWSWEAK\012  #define LINUXWEAK __attribute__((weak))\012#endif\012\012WINDOWSWEAK void *__ihc_enqueue_handle LINUXWEAK;\012\012extern \"C\" unsigned long long ihc_hls_get_sim_time(void);\012extern \"C\" int __ihc_hls_get_clock_period_ps(void);\012extern \"C\" int __ihc_hls_component_start_sim_task(const char *component_name);\012extern \"C\" int __ihc_hls_component_wait_sim_task(const char *component_name, unsigned int wait_cycles);\012extern \"C\" void __ihc_hls_stream_sink_wait_sim_task(void* obj_ptr);\012extern \"C\" void __ihc_hls_component_run_all(const void* component_address);\012extern \"C\" void __ihc_hls_set_component_wait_cycle(const void * component_address, unsigned int num_wait_cycles);\012\012// Cosim internal support calls\012extern \"C\" int __ihc_hls_async_call_capable(void);\012// Print error message and bail\012extern \"C\" void __ihc_hls_runtime_error(const char *msg);\012\012#ifdef HLS_X86\012inline void __ihc_hls_runtime_error_x86(const char *msg){\012  printf(\"Error: %s\\n\",msg);\012  exit(1);\012}\012#endif\012\012enum readwrite_t {readwrite = 0, readonly = 1, writeonly = 2};\012\012// ignore __fpga_reg in emulation flow\012#ifdef HLS_X86\012  #define __fpga_reg(x) (x)\012#elif defined(__clang__)\012#if __has_builtin(__builtin_fpga_reg)\012  #ifndef __fpga_reg\012    #define __fpga_reg __builtin_fpga_reg\012  #endif\012#endif\012#endif\012\012namespace ihc {\012\012namespace internal {\012\012// Interface parameter base types used to define interfaces\012class param {};\012class notinit:public param {};\012\012class memory_base {\012private:\012#ifdef HLS_X86\012  // Attributes\012  int aspace; \012  int awidth;\012  int dwidth;\012  int latency;\012  readwrite_t readwrite_mode;\012  bool byteenabled;\012  int maxburst;\012  int align;\012  bool waitrequest;\012  size_t sim_base;\012\012protected:\012  // Extra cosim book keeping\012  size_t data_size; //size of the underlying type used by the interface\012  void *mem;\012  size_t size;\012  bool use_socket; // if true, all reads and writes will go through the IPC socket instead of shared memory\012\012  //description of test data buffer accessed through this interface\012  void set_mem(void *x) {mem=x;};\012  void set_size(size_t x) {size=x;};\012  void set_data_size(size_t datasize) {data_size = datasize;}\012  \012#endif\012public:\012#ifdef HLS_X86\012  memory_base() {}\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              int readwrite_mode, bool byteenabled, int maxburst, int align,\012              bool waitrequest, void *mem, size_t size, size_t data_size,\012              bool use_socket)\012      : aspace(aspace), awidth(awidth), dwidth(dwidth), latency(latency),\012        readwrite_mode(static_cast<readwrite_t>(readwrite_mode)),\012        byteenabled(byteenabled), maxburst(maxburst), align(align),\012        waitrequest(waitrequest), data_size(data_size), mem(mem), size(size),\012        use_socket(use_socket) {}\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              readwrite_t readwrite_mode, bool byteenabled, int maxburst,\012              int align, bool waitrequest);\012  // set_parameters, set_base, and get_sim_base are defined in the hls_cosim library\012  void set_parameters(int aspace, int awidth, int dwidth, int latency,\012                      readwrite_t readwrite_mode, bool byteenabled,\012                      int maxburst, int align, bool waitrequest);\012  void set_base(void *ptr, size_t datasize, size_t size, bool use_socket);\012  int get_interface_aspace() const {return aspace;}\012  void * get_base() const {return mem;}\012  size_t get_size() const {return size;}\012  int get_awidth() const {return awidth;}\012  int get_dwidth() const {return dwidth;}\012  int get_latency() const {return latency;}\012  readwrite_t get_readwrite_mode() const {return readwrite_mode;}\012  bool get_byteenabled() const {return byteenabled;}\012  int get_maxburst() const {return maxburst;}\012  int get_align() const {return align;}\012  bool get_waitrequest() const {return waitrequest;}\012  \012  size_t get_data_size() const {return data_size;}\012\012  void set_sim_base(size_t addr) {sim_base = addr;}\012  size_t get_sim_base();\012  \012  void set_use_socket(bool socket) {use_socket = socket;}\012  bool uses_socket() const {return use_socket;}\012#endif\012};\012\012#ifdef HLS_X86\012class stream_abstract_base {\012  bool stable; // does the data on this interface change between function calls?\012  bool implicit; // is this interface synchronous with the component's function call interface?\012  bool global; // is this an implicit interface that carries a global variable's address?\012  size_t data_size; //size of the underlying type used by the interface\012protected:\012  unsigned m_average_stall;\012  unsigned m_stall_delta;\012  unsigned m_average_RoV;\012  unsigned m_RoV_delta;\012  unsigned m_remaining_period;\012  unsigned m_period_threshold;\012public:\012stream_abstract_base():stable(false), implicit(false), global(false), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1) { assert(1==0);}\012stream_abstract_base(size_t data_size):stable(false), implicit(false), global(false), data_size(data_size), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1){}\012  bool is_stable() {return stable;}\012  void set_stable() {stable = true;}\012  bool is_implicit() {return implicit;}\012  bool is_global() {return global;}\012  void set_implicit() {implicit = true;}\012  void set_global() {global = true;}\012  size_t get_data_size() {return data_size;}\012  void set_data_size(size_t datasize) {data_size = datasize;}\012  unsigned get_average_stall() {return m_average_stall;}\012  unsigned get_stall_delta() {return m_stall_delta;}\012  unsigned get_average_RoV() {return m_average_RoV;}\012  unsigned get_RoV_delta() {return m_RoV_delta;}\012  virtual bool _internal_cosim_empty() = 0;\012  virtual void read_by_ptr(void *data) = 0;\012  virtual void read_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void write_by_ptr(void *data) = 0;\012  virtual void write_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void front_by_ptr(void *data) = 0;\012  virtual void front_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual size_t get_size() = 0;\012};\012#endif\012\012template<typename T, class ... Params>\012class stream \012#ifdef HLS_X86\012  :  public stream_abstract_base \012#endif\012{\012\012#ifdef HLS_X86\012  std::queue<T> q_;\012  std::queue<std::pair<bool,bool> > qp_;\012  std::queue<int> qpe_;\012  std::mutex m_;\012  std::condition_variable cv_;\012#endif\012public:  \012  stream();\012  // do not allow copy and assignment of streams\012  stream(const stream&) = delete;\012  stream& operator=(const stream&) = delete; \012\012  bool _internal_cosim_empty(); \012#ifdef HLS_X86\012  virtual T read(bool wait=false);               \012  virtual void write(const T& arg);      \012  virtual T tryRead(bool &success);   \012  virtual bool tryWrite(const T& arg);       \012\012  // for packet based stream \012  virtual T read(bool& sop, bool& eop, bool wait=false);\012  virtual T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  virtual void write(const T& arg, bool sop, bool eop);\012  virtual void write(const T& arg, bool sop, bool eop, int empty);\012  virtual T tryRead(bool &success, bool& sop, bool& eop);\012  virtual T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  virtual bool tryWrite(const T& arg, bool sop, bool eop);     \012  virtual bool tryWrite(const T& arg, bool sop, bool eop, int empty);     \012  virtual void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  virtual void setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta=0);\012#else\012  T read();               \012  void write(const T& arg);      \012  T tryRead(bool &success); \012  bool tryWrite(const T& arg);       \012\012  // for packet based stream \012  T read(bool& sop, bool& eop);\012  T read(bool& sop, bool& eop, int& empty);\012  void write(const T& arg, bool sop, bool eop);\012  void write(const T& arg, bool sop, bool eop, int empty);\012  T tryRead(bool &success, bool& sop, bool& eop);\012  T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const T& arg, bool sop, bool eop);     \012  bool tryWrite(const T& arg, bool sop, bool eop, int empty);     \012#endif\012   T _internal_cosim_front();\012   T _internal_cosim_front(bool& sop, bool& eop);\012   T _internal_cosim_front(bool& sop, bool& eop, int& empty);\012  \012#ifdef HLS_X86\012  void read_by_ptr(void *data);\012  void read_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  void write_by_ptr(void *data);\012  void write_by_ptr_pkt(void *data, bool* sop, bool*eop);\012  void write_by_ptr_pkt_e(void *data, bool* sop, bool*eop, void* empty);\012  void front_by_ptr(void *data);\012  void front_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  size_t get_size() {return q_.size();}\012\012  // control stall/valid behaviour\012  bool stall();\012  void setStallPeriod();\012  //Middle Square Weyl Sequence RNG\012   unsigned msws();\012#endif\012};\012\012template <typename T, class ... Params>\012  stream<T,Params...>::stream()\012#ifdef HLS_X86\012 :stream_abstract_base(sizeof(T))\012#endif\012{\012}\012\012  ////////////////\012 /// stream   ///\012////////////////\012\012#ifdef HLS_X86\012template<typename T, class ... Params>\012bool stream<T,Params...>::_internal_cosim_empty() {\012  bool empty=q_.empty();  \012  return empty;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012 \012    // unused sideband signals\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    empty = qpe_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool wait) {\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  // unused sideband signals\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, bool wait) {\012  T arg;\012\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  arg = q_.front();\012  q_.pop();\012  std::pair<bool,bool> p = qp_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  // unused sideband signal\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty_ = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty_ && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front() {\012  T arg;      \012    \012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  \012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop) {\012  T arg;      \012    \012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012\012  sop = p.first;\012  eop = p.second;\012  \012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop, int& empty) {\012  T arg;      \012\012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty_ = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty_) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012\012  return arg;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg) {\012   bool success = true; /* stl::queue has no full */\012   if (success) {\012      write(arg);\012   }\012   return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop, int empty) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop, empty);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(false,false));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop, int empty) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(empty);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr(void *data) {\012    T elem = read();\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = read(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = read(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = _internal_cosim_front(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = _internal_cosim_front(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));    \012}\012\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr(void *data) {\012    T elem = _internal_cosim_front();\012    memcpy(data, &elem, sizeof(T));    \012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem, *sop, *eop);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    T elem;\012    int temp_empty;\012    memcpy(&elem, data, sizeof(T));\012    memcpy(&temp_empty, empty, sizeof(int));\012    write(elem, *sop, *eop, temp_empty);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr(void *data) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::setStallPeriod() {\012    if (m_stall_delta == 0) {\012        m_remaining_period = m_average_stall;\012    } else {\012        m_remaining_period = (m_average_stall - m_stall_delta) + msws()%(m_stall_delta*2+1);\012    }\012    if (m_RoV_delta == 0) {\012        m_period_threshold = m_average_RoV;\012    } else {\012        m_period_threshold = (m_average_RoV - m_RoV_delta) + msws()%(m_RoV_delta*2+1);\012    }\012    m_remaining_period +=  m_period_threshold;\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012    m_average_stall = average_stall;\012    m_stall_delta = stall_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta) {\012    m_average_RoV = average_RoV;\012    m_RoV_delta = RoV_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012bool stream<T, Params...>::stall() {\012  if (m_remaining_period == 0) {\012    setStallPeriod();\012  }\012  m_remaining_period--;\012  if (m_remaining_period < m_period_threshold) { \012    return false;\012  } else {\012    return true;\012  }\012}\012\012template<typename T, class ... Params>\012unsigned stream<T, Params...>::msws() {\012  static unsigned long long x = 0, w = 0;\012  const unsigned long long s = 0xb5ad4eceda1ce2a9ULL;\012  \012  x *= x; \012  x += (w += s); \012  return (unsigned) (x = (x>>32) | (x<<32));\012}\012\012#endif\012} //namespace internal\012} //namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012\012"}, {"path":"/opt/altera_pro/19.4/hls/include/HLS/lsu.h", "name":"lsu.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/lsu.h", "content":"/**************************************************************************\012 *                                                                        *\012 *  A library that allows controlling the LSU of a given load/store site  *\012 *  Copyright 2019, Intel Corporation                                     *\012 *  All Rights Reserved.                                                  *\012 *                                                                        *\012 *  Author: Mohammad Fawaz                                                *\012 *                                                                        *\012 **************************************************************************/\012\012#ifndef __HLS_LSU_H__\012#define __HLS_LSU_H__\012\012namespace ihc {\012// Forward declarations. These are defined in HLS/hls.h\012template <typename _DT, class... _Params> class mm_master;\012template <template <int> class _Type, class... _T> struct GetValue;\012\012enum style_t {\012  BURST_COALESCED = 0,\012  PIPELINED,\012};\012\012template <int _N> struct style {\012  static constexpr enum style_t value = (style_t)_N;\012  static constexpr enum style_t defaultValue = BURST_COALESCED;\012};\012\012template <int _N> struct static_coalescing {\012  static constexpr int value = _N;\012  static constexpr int defaultValue = 1;\012};\012\012template <class... _LSUParams> class lsu final {\012public:\012  lsu() = delete;\012\012#ifdef HLS_X86\012  template <class _DT, class... _MMParams>\012  static _DT &load(mm_master<_DT, _MMParams...> &Ptr) {\012    return *Ptr;\012  }\012\012  template <class _DT> static _DT &load(_DT *Ptr) { return *Ptr; }\012\012  template <class _DT, class... _MMParams>\012  static void store(mm_master<_DT, _MMParams...> &Ptr, _DT Val) {\012    *Ptr = Val;\012  }\012\012  template <class _DT> static void store(_DT *Ptr, _DT Val) { *Ptr = Val; }\012#else\012  template <class _DT, class... _MMParams>\012  static _DT &load(mm_master<_DT, _MMParams...> &Ptr) {\012    CheckLoad();\012    return *__builtin_fpga_mem(&*Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                               _static_coalescing);\012  }\012\012  template <class _DT> static _DT &load(_DT *Ptr) {\012    CheckLoad();\012    return *__builtin_fpga_mem(Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                               _static_coalescing);\012  }\012\012  template <class _DT, class... _MMParams>\012  static void store(mm_master<_DT, _MMParams...> &Ptr, _DT Val) {\012    CheckStore();\012    *__builtin_fpga_mem(&*Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                        _static_coalescing) = Val;\012  }\012\012  template <class _DT> static void store(_DT *Ptr, _DT Val) {\012    CheckStore();\012    *__builtin_fpga_mem(Ptr, _style == BURST_COALESCED, 0, 0, 0, 0,\012                        _static_coalescing) = Val;\012  }\012#endif\012\012private:\012  static constexpr int _style = GetValue<ihc::style, _LSUParams...>::value;\012  static constexpr int _static_coalescing =\012      GetValue<ihc::static_coalescing, _LSUParams...>::value;\012\012  static void CheckLoad() {\012    static_assert(_style == BURST_COALESCED || _style == PIPELINED,\012                  \"Invalid LSU style choice for a load operation\");\012  }\012  static void CheckStore() {\012    static_assert(_style == BURST_COALESCED || _style == PIPELINED,\012                  \"Invalid LSU style choice for a store operation\");\012  }\012};\012} // namespace ihc\012\012#endif //__HLS_LSU_H__\012"}, {"path":"/opt/altera_pro/19.4/hls/include/HLS/task.h", "name":"task.h", "has_active_debug_locs":false, "absName":"/opt/altera_pro/19.4/hls/include/HLS/task.h", "content":"#ifndef _INTEL_IHC_HLS_TASK\012#define _INTEL_IHC_HLS_TASK\012#include \"HLS/function_traits.h\"\012\012#include <type_traits>\012#include <utility>\012\012// Make sure the macros to take the user calls into implementations\012// is not in effect for the source code of the implementation\012#undef launch\012#undef collect\012\012// Bring in the platform specific '_task' for composition\012#if defined(__INTELFPGA_COMPILER__)  && !defined(HLS_X86)\012#include \"HLS/internal/_task_FPGA.h\"\012#else\012#include \"HLS/internal/_task_X64.h\"\012#endif\012\012namespace ihc {\012  namespace internal {\012    // Signature for void func()\012    using VoidFuncTy = void ();\012\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Launch the calculations\012    //   task<function>::launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    //\012    // The task is implemented as an\012    // Adaptor Design Pattern\012    // The X64 or FPGA implementation is adapted to the desired API\012    // This adaptor is straight forward:\012    // Both architecture specific implementations are supposed to\012    // be interface compatible with this adaptor\012    template<typename X, X& f, bool detach = false>\012    class task {\012    public:\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Launch the callable\012      template<int capacity, typename ... Args>\012      static void launch(Args&& ... args) {\012        _t.template launch<capacity>(std::forward<Args>(args)...);\012      }\012\012      // Get the result\012      template<int capacity>\012      static T collect() {\012        // Restore void if needed\012        return static_cast<T>(_t.template collect<capacity>());\012      }\012\012    private:\012      // Constructor\012      task() {};\012      // Destructor\012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      // Composition (_task is architecture specific)\012      // Singleton\012      // Anywhere in the function hierarchy where \"f\" gets called,\012      // this specific task (with the corresponding thread and queue)\012      // needs to be used\012      static internal::_task<X, f, detach> _t;\012    }; // class task\012\012    template <typename X, X& f, bool detach>\012    internal::_task<X, f, detach> task<X, f, detach>::_t;\012\012    // Launch (through singleton)\012    template <int capacity, class X, X &f, typename... Args>\012    void launch(Args &&... args) {\012      task<X, f>::template launch<capacity>(std::forward<Args>(args)...);\012    }\012\012    // Collect (through singleton)\012    template<int capacity, typename X, X& f>\012    typename ihc::function_traits<decltype(f)>::return_type collect() {\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012      // Restore void if needed\012      return static_cast<T>(task<X, f>::template collect<capacity>());\012    }\012\012    // launch_always_run_helper utilities\012    template <VoidFuncTy &f> void launch_at_startup() {\012      while (1) {\012        f();\012      }\012    }\012\012    template <VoidFuncTy &f> class launch_always_run_helper {\012    public:\012      launch_always_run_helper() {\012        task<VoidFuncTy, launch_at_startup<f>, true>::template launch<0>();\012      }\012    };\012  } // namespace internal\012\012  /// Launches a task function at when the component starts up.\012  /// The task function to be launched must take no input arguments and have\012  /// a void return.\012  template <internal::VoidFuncTy &f> void launch_always_run() {\012    static internal::launch_always_run_helper<f> t;\012  }\012\012  // Fake functions to help with Content Assist (IntelliSense)\012\012  // /!\\ Please remember to put parentheses around a launch of\012  //     a templated function:\012  //     ihc::launch(\012  //       ( foo<Types...> ),\012  //       args... );\012  template<int capacity, typename F, typename... Args>\012  void launch(F&& f, Args&&...args);\012  template<int capacity, typename F>\012  typename ihc::function_traits<F>::return_type collect(F&& f);\012\012} // namespace ihc\012\012// Work around for C++14 (no support for <auto& f>\012#define launch(x, ...)  internal::launch <0, decltype(x), x>(__VA_ARGS__)\012#define buffered_launch(depth, x, ...)  internal::launch <depth, decltype(x), x>(__VA_ARGS__)\012\012#define collect(x)      internal::collect<0, decltype(x), x>()\012#define buffered_collect(depth, x)      internal::collect<depth, decltype(x), x>()\012\012#endif // _INTEL_IHC_HLS_TASK\012"}];