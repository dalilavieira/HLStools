// draw_box.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module draw_box (
		input  wire         clock,                //     clock.clk
		input  wire         resetn,               //     reset.reset_n
		input  wire         start,                //      call.valid
		output wire         busy,                 //          .stall
		output wire         done,                 //    return.valid
		input  wire         stall,                //          .stall
		input  wire [127:0] a,                    //         a.data
		input  wire [31:0]  x1,                   //        x1.data
		input  wire [31:0]  y1,                   //        y1.data
		input  wire [31:0]  x2,                   //        x2.data
		input  wire [31:0]  y2,                   //        y2.data
		input  wire [31:0]  r,                    //         r.data
		input  wire [31:0]  g,                    //         g.data
		input  wire [31:0]  b,                    //         b.data
		output wire [63:0]  avmm_0_rw_address,    // avmm_0_rw.address
		output wire [7:0]   avmm_0_rw_byteenable, //          .byteenable
		output wire         avmm_0_rw_read,       //          .read
		input  wire [63:0]  avmm_0_rw_readdata,   //          .readdata
		output wire         avmm_0_rw_write,      //          .write
		output wire [63:0]  avmm_0_rw_writedata   //          .writedata
	);

	draw_box_internal draw_box_internal_inst (
		.clock                (clock),                //   input,    width = 1,     clock.clk
		.resetn               (resetn),               //   input,    width = 1,     reset.reset_n
		.start                (start),                //   input,    width = 1,      call.valid
		.busy                 (busy),                 //  output,    width = 1,          .stall
		.done                 (done),                 //  output,    width = 1,    return.valid
		.stall                (stall),                //   input,    width = 1,          .stall
		.a                    (a),                    //   input,  width = 128,         a.data
		.x1                   (x1),                   //   input,   width = 32,        x1.data
		.y1                   (y1),                   //   input,   width = 32,        y1.data
		.x2                   (x2),                   //   input,   width = 32,        x2.data
		.y2                   (y2),                   //   input,   width = 32,        y2.data
		.r                    (r),                    //   input,   width = 32,         r.data
		.g                    (g),                    //   input,   width = 32,         g.data
		.b                    (b),                    //   input,   width = 32,         b.data
		.avmm_0_rw_address    (avmm_0_rw_address),    //  output,   width = 64, avmm_0_rw.address
		.avmm_0_rw_byteenable (avmm_0_rw_byteenable), //  output,    width = 8,          .byteenable
		.avmm_0_rw_read       (avmm_0_rw_read),       //  output,    width = 1,          .read
		.avmm_0_rw_readdata   (avmm_0_rw_readdata),   //   input,   width = 64,          .readdata
		.avmm_0_rw_write      (avmm_0_rw_write),      //  output,    width = 1,          .write
		.avmm_0_rw_writedata  (avmm_0_rw_writedata)   //  output,   width = 64,          .writedata
	);

endmodule
