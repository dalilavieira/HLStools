// c2c_decode_stats.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module c2c_decode_stats (
		input  wire        clock,                //                clock.clk
		input  wire        resetn,               //                reset.reset_n
		input  wire        start,                //                 call.valid
		output wire        busy,                 //                     .stall
		output wire        done,                 //               return.valid
		input  wire        stall,                //                     .stall
		output wire [31:0] returndata,           //           returndata.data
		input  wire [63:0] stats,                //                stats.data
		input  wire [63:0] mi,                   //                   mi.data
		input  wire [63:0] PERF_MEM_LOCK_LOCKED, // PERF_MEM_LOCK_LOCKED.data
		input  wire [63:0] PERF_MEM_LVL_HIT,     //     PERF_MEM_LVL_HIT.data
		input  wire [63:0] PERF_MEM_LVL_IO,      //      PERF_MEM_LVL_IO.data
		input  wire [63:0] PERF_MEM_LVL_L1,      //      PERF_MEM_LVL_L1.data
		input  wire [63:0] PERF_MEM_LVL_L2,      //      PERF_MEM_LVL_L2.data
		input  wire [63:0] PERF_MEM_LVL_L3,      //      PERF_MEM_LVL_L3.data
		input  wire [63:0] PERF_MEM_LVL_LFB,     //     PERF_MEM_LVL_LFB.data
		input  wire [63:0] PERF_MEM_LVL_LOC_RAM, // PERF_MEM_LVL_LOC_RAM.data
		input  wire [63:0] PERF_MEM_LVL_MISS,    //    PERF_MEM_LVL_MISS.data
		input  wire [63:0] PERF_MEM_LVL_UNC,     //     PERF_MEM_LVL_UNC.data
		input  wire [63:0] PERF_MEM_OP_LOAD,     //     PERF_MEM_OP_LOAD.data
		input  wire [63:0] PERF_MEM_OP_STORE,    //    PERF_MEM_OP_STORE.data
		input  wire [63:0] PERF_MEM_SNOOP_HIT,   //   PERF_MEM_SNOOP_HIT.data
		input  wire [63:0] PERF_MEM_SNOOP_HITM,  //  PERF_MEM_SNOOP_HITM.data
		output wire [63:0] avmm_0_rw_address,    //            avmm_0_rw.address
		output wire [7:0]  avmm_0_rw_byteenable, //                     .byteenable
		output wire        avmm_0_rw_read,       //                     .read
		input  wire [63:0] avmm_0_rw_readdata,   //                     .readdata
		output wire        avmm_0_rw_write,      //                     .write
		output wire [63:0] avmm_0_rw_writedata   //                     .writedata
	);

	c2c_decode_stats_internal c2c_decode_stats_internal_inst (
		.clock                (clock),                //   input,   width = 1,                clock.clk
		.resetn               (resetn),               //   input,   width = 1,                reset.reset_n
		.start                (start),                //   input,   width = 1,                 call.valid
		.busy                 (busy),                 //  output,   width = 1,                     .stall
		.done                 (done),                 //  output,   width = 1,               return.valid
		.stall                (stall),                //   input,   width = 1,                     .stall
		.returndata           (returndata),           //  output,  width = 32,           returndata.data
		.stats                (stats),                //   input,  width = 64,                stats.data
		.mi                   (mi),                   //   input,  width = 64,                   mi.data
		.PERF_MEM_LOCK_LOCKED (PERF_MEM_LOCK_LOCKED), //   input,  width = 64, PERF_MEM_LOCK_LOCKED.data
		.PERF_MEM_LVL_HIT     (PERF_MEM_LVL_HIT),     //   input,  width = 64,     PERF_MEM_LVL_HIT.data
		.PERF_MEM_LVL_IO      (PERF_MEM_LVL_IO),      //   input,  width = 64,      PERF_MEM_LVL_IO.data
		.PERF_MEM_LVL_L1      (PERF_MEM_LVL_L1),      //   input,  width = 64,      PERF_MEM_LVL_L1.data
		.PERF_MEM_LVL_L2      (PERF_MEM_LVL_L2),      //   input,  width = 64,      PERF_MEM_LVL_L2.data
		.PERF_MEM_LVL_L3      (PERF_MEM_LVL_L3),      //   input,  width = 64,      PERF_MEM_LVL_L3.data
		.PERF_MEM_LVL_LFB     (PERF_MEM_LVL_LFB),     //   input,  width = 64,     PERF_MEM_LVL_LFB.data
		.PERF_MEM_LVL_LOC_RAM (PERF_MEM_LVL_LOC_RAM), //   input,  width = 64, PERF_MEM_LVL_LOC_RAM.data
		.PERF_MEM_LVL_MISS    (PERF_MEM_LVL_MISS),    //   input,  width = 64,    PERF_MEM_LVL_MISS.data
		.PERF_MEM_LVL_UNC     (PERF_MEM_LVL_UNC),     //   input,  width = 64,     PERF_MEM_LVL_UNC.data
		.PERF_MEM_OP_LOAD     (PERF_MEM_OP_LOAD),     //   input,  width = 64,     PERF_MEM_OP_LOAD.data
		.PERF_MEM_OP_STORE    (PERF_MEM_OP_STORE),    //   input,  width = 64,    PERF_MEM_OP_STORE.data
		.PERF_MEM_SNOOP_HIT   (PERF_MEM_SNOOP_HIT),   //   input,  width = 64,   PERF_MEM_SNOOP_HIT.data
		.PERF_MEM_SNOOP_HITM  (PERF_MEM_SNOOP_HITM),  //   input,  width = 64,  PERF_MEM_SNOOP_HITM.data
		.avmm_0_rw_address    (avmm_0_rw_address),    //  output,  width = 64,            avmm_0_rw.address
		.avmm_0_rw_byteenable (avmm_0_rw_byteenable), //  output,   width = 8,                     .byteenable
		.avmm_0_rw_read       (avmm_0_rw_read),       //  output,   width = 1,                     .read
		.avmm_0_rw_readdata   (avmm_0_rw_readdata),   //   input,  width = 64,                     .readdata
		.avmm_0_rw_write      (avmm_0_rw_write),      //  output,   width = 1,                     .write
		.avmm_0_rw_writedata  (avmm_0_rw_writedata)   //  output,  width = 64,                     .writedata
	);

endmodule
