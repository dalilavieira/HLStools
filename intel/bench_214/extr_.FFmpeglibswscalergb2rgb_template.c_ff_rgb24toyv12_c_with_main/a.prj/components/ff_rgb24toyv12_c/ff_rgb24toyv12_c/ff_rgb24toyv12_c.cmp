	component ff_rgb24toyv12_c is
		port (
			clock                : in  std_logic                     := 'X';             -- clk
			resetn               : in  std_logic                     := 'X';             -- reset_n
			start                : in  std_logic                     := 'X';             -- valid
			busy                 : out std_logic;                                        -- stall
			done                 : out std_logic;                                        -- valid
			stall                : in  std_logic                     := 'X';             -- stall
			src                  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			ydst                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			udst                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			vdst                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			width                : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			height               : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			lumStride            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			chromStride          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			srcStride            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			rgb2yuv              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			BU_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			BV_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			BY_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			GU_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			GV_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			GY_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			RGB2YUV_SHIFT        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			RU_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			RV_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			RY_IDX               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			avmm_0_rw_address    : out std_logic_vector(63 downto 0);                    -- address
			avmm_0_rw_byteenable : out std_logic_vector(7 downto 0);                     -- byteenable
			avmm_0_rw_read       : out std_logic;                                        -- read
			avmm_0_rw_readdata   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- readdata
			avmm_0_rw_write      : out std_logic;                                        -- write
			avmm_0_rw_writedata  : out std_logic_vector(63 downto 0)                     -- writedata
		);
	end component ff_rgb24toyv12_c;

