// ff_rgb24toyv12_c.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module ff_rgb24toyv12_c (
		input  wire        clock,                //         clock.clk
		input  wire        resetn,               //         reset.reset_n
		input  wire        start,                //          call.valid
		output wire        busy,                 //              .stall
		output wire        done,                 //        return.valid
		input  wire        stall,                //              .stall
		input  wire [63:0] src,                  //           src.data
		input  wire [63:0] ydst,                 //          ydst.data
		input  wire [63:0] udst,                 //          udst.data
		input  wire [63:0] vdst,                 //          vdst.data
		input  wire [31:0] width,                //         width.data
		input  wire [31:0] height,               //        height.data
		input  wire [31:0] lumStride,            //     lumStride.data
		input  wire [31:0] chromStride,          //   chromStride.data
		input  wire [31:0] srcStride,            //     srcStride.data
		input  wire [63:0] rgb2yuv,              //       rgb2yuv.data
		input  wire [63:0] BU_IDX,               //        BU_IDX.data
		input  wire [63:0] BV_IDX,               //        BV_IDX.data
		input  wire [63:0] BY_IDX,               //        BY_IDX.data
		input  wire [63:0] GU_IDX,               //        GU_IDX.data
		input  wire [63:0] GV_IDX,               //        GV_IDX.data
		input  wire [63:0] GY_IDX,               //        GY_IDX.data
		input  wire [63:0] RGB2YUV_SHIFT,        // RGB2YUV_SHIFT.data
		input  wire [63:0] RU_IDX,               //        RU_IDX.data
		input  wire [63:0] RV_IDX,               //        RV_IDX.data
		input  wire [63:0] RY_IDX,               //        RY_IDX.data
		output wire [63:0] avmm_0_rw_address,    //     avmm_0_rw.address
		output wire [7:0]  avmm_0_rw_byteenable, //              .byteenable
		output wire        avmm_0_rw_read,       //              .read
		input  wire [63:0] avmm_0_rw_readdata,   //              .readdata
		output wire        avmm_0_rw_write,      //              .write
		output wire [63:0] avmm_0_rw_writedata   //              .writedata
	);

	ff_rgb24toyv12_c_internal ff_rgb24toyv12_c_internal_inst (
		.clock                (clock),                //   input,   width = 1,         clock.clk
		.resetn               (resetn),               //   input,   width = 1,         reset.reset_n
		.start                (start),                //   input,   width = 1,          call.valid
		.busy                 (busy),                 //  output,   width = 1,              .stall
		.done                 (done),                 //  output,   width = 1,        return.valid
		.stall                (stall),                //   input,   width = 1,              .stall
		.src                  (src),                  //   input,  width = 64,           src.data
		.ydst                 (ydst),                 //   input,  width = 64,          ydst.data
		.udst                 (udst),                 //   input,  width = 64,          udst.data
		.vdst                 (vdst),                 //   input,  width = 64,          vdst.data
		.width                (width),                //   input,  width = 32,         width.data
		.height               (height),               //   input,  width = 32,        height.data
		.lumStride            (lumStride),            //   input,  width = 32,     lumStride.data
		.chromStride          (chromStride),          //   input,  width = 32,   chromStride.data
		.srcStride            (srcStride),            //   input,  width = 32,     srcStride.data
		.rgb2yuv              (rgb2yuv),              //   input,  width = 64,       rgb2yuv.data
		.BU_IDX               (BU_IDX),               //   input,  width = 64,        BU_IDX.data
		.BV_IDX               (BV_IDX),               //   input,  width = 64,        BV_IDX.data
		.BY_IDX               (BY_IDX),               //   input,  width = 64,        BY_IDX.data
		.GU_IDX               (GU_IDX),               //   input,  width = 64,        GU_IDX.data
		.GV_IDX               (GV_IDX),               //   input,  width = 64,        GV_IDX.data
		.GY_IDX               (GY_IDX),               //   input,  width = 64,        GY_IDX.data
		.RGB2YUV_SHIFT        (RGB2YUV_SHIFT),        //   input,  width = 64, RGB2YUV_SHIFT.data
		.RU_IDX               (RU_IDX),               //   input,  width = 64,        RU_IDX.data
		.RV_IDX               (RV_IDX),               //   input,  width = 64,        RV_IDX.data
		.RY_IDX               (RY_IDX),               //   input,  width = 64,        RY_IDX.data
		.avmm_0_rw_address    (avmm_0_rw_address),    //  output,  width = 64,     avmm_0_rw.address
		.avmm_0_rw_byteenable (avmm_0_rw_byteenable), //  output,   width = 8,              .byteenable
		.avmm_0_rw_read       (avmm_0_rw_read),       //  output,   width = 1,              .read
		.avmm_0_rw_readdata   (avmm_0_rw_readdata),   //   input,  width = 64,              .readdata
		.avmm_0_rw_write      (avmm_0_rw_write),      //  output,   width = 1,              .write
		.avmm_0_rw_writedata  (avmm_0_rw_writedata)   //  output,  width = 64,              .writedata
	);

endmodule
