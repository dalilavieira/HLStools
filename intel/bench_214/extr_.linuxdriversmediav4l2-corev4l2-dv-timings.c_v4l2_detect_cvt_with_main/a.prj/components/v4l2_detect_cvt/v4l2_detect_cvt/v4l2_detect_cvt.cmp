	component v4l2_detect_cvt is
		port (
			clock                       : in  std_logic                     := 'X';             -- clk
			resetn                      : in  std_logic                     := 'X';             -- reset_n
			start                       : in  std_logic                     := 'X';             -- valid
			busy                        : out std_logic;                                        -- stall
			done                        : out std_logic;                                        -- valid
			stall                       : in  std_logic                     := 'X';             -- stall
			returndata                  : out std_logic;                                        -- data
			frame_height                : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			hfreq                       : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			vsync                       : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			active_width                : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			polarities                  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			interlaced                  : in  std_logic                     := 'X';             -- data
			fmt                         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_CELL_GRAN               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_C_PRIME                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_HSYNC_PERCENT           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_MIN_VSYNC_BP            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_MIN_V_BPORCH            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_MIN_V_PORCH_RND         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_M_PRIME                 : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_PXL_CLK_GRAN            : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_PXL_CLK_GRAN_RB_V2      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_H_BLANK              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_H_SYNC               : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_MIN_V_BLANK          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_MIN_V_BPORCH         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_V2_H_BLANK           : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_V2_MIN_V_FPORCH      : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_V_BPORCH             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			CVT_RB_V_FPORCH             : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_BT_656_1120         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_BT_STD_CVT          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_FL_HALF_LINE        : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_FL_REDUCED_BLANKING : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_HSYNC_POS_POL       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_INTERLACED          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_PROGRESSIVE         : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			V4L2_DV_VSYNC_POS_POL       : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			avmm_0_rw_address           : out std_logic_vector(63 downto 0);                    -- address
			avmm_0_rw_byteenable        : out std_logic_vector(7 downto 0);                     -- byteenable
			avmm_0_rw_read              : out std_logic;                                        -- read
			avmm_0_rw_readdata          : in  std_logic_vector(63 downto 0) := (others => 'X'); -- readdata
			avmm_0_rw_write             : out std_logic;                                        -- write
			avmm_0_rw_writedata         : out std_logic_vector(63 downto 0)                     -- writedata
		);
	end component v4l2_detect_cvt;

