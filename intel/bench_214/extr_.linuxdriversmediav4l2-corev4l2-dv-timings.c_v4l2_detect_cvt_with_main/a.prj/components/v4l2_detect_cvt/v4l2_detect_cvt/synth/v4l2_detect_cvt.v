// v4l2_detect_cvt.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module v4l2_detect_cvt (
		input  wire        clock,                       //                       clock.clk
		input  wire        resetn,                      //                       reset.reset_n
		input  wire        start,                       //                        call.valid
		output wire        busy,                        //                            .stall
		output wire        done,                        //                      return.valid
		input  wire        stall,                       //                            .stall
		output wire        returndata,                  //                  returndata.data
		input  wire [31:0] frame_height,                //                frame_height.data
		input  wire [31:0] hfreq,                       //                       hfreq.data
		input  wire [31:0] vsync,                       //                       vsync.data
		input  wire [31:0] active_width,                //                active_width.data
		input  wire [31:0] polarities,                  //                  polarities.data
		input  wire        interlaced,                  //                  interlaced.data
		input  wire [63:0] fmt,                         //                         fmt.data
		input  wire [63:0] CVT_CELL_GRAN,               //               CVT_CELL_GRAN.data
		input  wire [63:0] CVT_C_PRIME,                 //                 CVT_C_PRIME.data
		input  wire [63:0] CVT_HSYNC_PERCENT,           //           CVT_HSYNC_PERCENT.data
		input  wire [63:0] CVT_MIN_VSYNC_BP,            //            CVT_MIN_VSYNC_BP.data
		input  wire [63:0] CVT_MIN_V_BPORCH,            //            CVT_MIN_V_BPORCH.data
		input  wire [63:0] CVT_MIN_V_PORCH_RND,         //         CVT_MIN_V_PORCH_RND.data
		input  wire [63:0] CVT_M_PRIME,                 //                 CVT_M_PRIME.data
		input  wire [63:0] CVT_PXL_CLK_GRAN,            //            CVT_PXL_CLK_GRAN.data
		input  wire [63:0] CVT_PXL_CLK_GRAN_RB_V2,      //      CVT_PXL_CLK_GRAN_RB_V2.data
		input  wire [63:0] CVT_RB_H_BLANK,              //              CVT_RB_H_BLANK.data
		input  wire [63:0] CVT_RB_H_SYNC,               //               CVT_RB_H_SYNC.data
		input  wire [63:0] CVT_RB_MIN_V_BLANK,          //          CVT_RB_MIN_V_BLANK.data
		input  wire [63:0] CVT_RB_MIN_V_BPORCH,         //         CVT_RB_MIN_V_BPORCH.data
		input  wire [63:0] CVT_RB_V2_H_BLANK,           //           CVT_RB_V2_H_BLANK.data
		input  wire [63:0] CVT_RB_V2_MIN_V_FPORCH,      //      CVT_RB_V2_MIN_V_FPORCH.data
		input  wire [63:0] CVT_RB_V_BPORCH,             //             CVT_RB_V_BPORCH.data
		input  wire [63:0] CVT_RB_V_FPORCH,             //             CVT_RB_V_FPORCH.data
		input  wire [63:0] V4L2_DV_BT_656_1120,         //         V4L2_DV_BT_656_1120.data
		input  wire [63:0] V4L2_DV_BT_STD_CVT,          //          V4L2_DV_BT_STD_CVT.data
		input  wire [63:0] V4L2_DV_FL_HALF_LINE,        //        V4L2_DV_FL_HALF_LINE.data
		input  wire [63:0] V4L2_DV_FL_REDUCED_BLANKING, // V4L2_DV_FL_REDUCED_BLANKING.data
		input  wire [63:0] V4L2_DV_HSYNC_POS_POL,       //       V4L2_DV_HSYNC_POS_POL.data
		input  wire [63:0] V4L2_DV_INTERLACED,          //          V4L2_DV_INTERLACED.data
		input  wire [63:0] V4L2_DV_PROGRESSIVE,         //         V4L2_DV_PROGRESSIVE.data
		input  wire [63:0] V4L2_DV_VSYNC_POS_POL,       //       V4L2_DV_VSYNC_POS_POL.data
		output wire [63:0] avmm_0_rw_address,           //                   avmm_0_rw.address
		output wire [7:0]  avmm_0_rw_byteenable,        //                            .byteenable
		output wire        avmm_0_rw_read,              //                            .read
		input  wire [63:0] avmm_0_rw_readdata,          //                            .readdata
		output wire        avmm_0_rw_write,             //                            .write
		output wire [63:0] avmm_0_rw_writedata          //                            .writedata
	);

	v4l2_detect_cvt_internal v4l2_detect_cvt_internal_inst (
		.clock                       (clock),                       //   input,   width = 1,                       clock.clk
		.resetn                      (resetn),                      //   input,   width = 1,                       reset.reset_n
		.start                       (start),                       //   input,   width = 1,                        call.valid
		.busy                        (busy),                        //  output,   width = 1,                            .stall
		.done                        (done),                        //  output,   width = 1,                      return.valid
		.stall                       (stall),                       //   input,   width = 1,                            .stall
		.returndata                  (returndata),                  //  output,   width = 1,                  returndata.data
		.frame_height                (frame_height),                //   input,  width = 32,                frame_height.data
		.hfreq                       (hfreq),                       //   input,  width = 32,                       hfreq.data
		.vsync                       (vsync),                       //   input,  width = 32,                       vsync.data
		.active_width                (active_width),                //   input,  width = 32,                active_width.data
		.polarities                  (polarities),                  //   input,  width = 32,                  polarities.data
		.interlaced                  (interlaced),                  //   input,   width = 1,                  interlaced.data
		.fmt                         (fmt),                         //   input,  width = 64,                         fmt.data
		.CVT_CELL_GRAN               (CVT_CELL_GRAN),               //   input,  width = 64,               CVT_CELL_GRAN.data
		.CVT_C_PRIME                 (CVT_C_PRIME),                 //   input,  width = 64,                 CVT_C_PRIME.data
		.CVT_HSYNC_PERCENT           (CVT_HSYNC_PERCENT),           //   input,  width = 64,           CVT_HSYNC_PERCENT.data
		.CVT_MIN_VSYNC_BP            (CVT_MIN_VSYNC_BP),            //   input,  width = 64,            CVT_MIN_VSYNC_BP.data
		.CVT_MIN_V_BPORCH            (CVT_MIN_V_BPORCH),            //   input,  width = 64,            CVT_MIN_V_BPORCH.data
		.CVT_MIN_V_PORCH_RND         (CVT_MIN_V_PORCH_RND),         //   input,  width = 64,         CVT_MIN_V_PORCH_RND.data
		.CVT_M_PRIME                 (CVT_M_PRIME),                 //   input,  width = 64,                 CVT_M_PRIME.data
		.CVT_PXL_CLK_GRAN            (CVT_PXL_CLK_GRAN),            //   input,  width = 64,            CVT_PXL_CLK_GRAN.data
		.CVT_PXL_CLK_GRAN_RB_V2      (CVT_PXL_CLK_GRAN_RB_V2),      //   input,  width = 64,      CVT_PXL_CLK_GRAN_RB_V2.data
		.CVT_RB_H_BLANK              (CVT_RB_H_BLANK),              //   input,  width = 64,              CVT_RB_H_BLANK.data
		.CVT_RB_H_SYNC               (CVT_RB_H_SYNC),               //   input,  width = 64,               CVT_RB_H_SYNC.data
		.CVT_RB_MIN_V_BLANK          (CVT_RB_MIN_V_BLANK),          //   input,  width = 64,          CVT_RB_MIN_V_BLANK.data
		.CVT_RB_MIN_V_BPORCH         (CVT_RB_MIN_V_BPORCH),         //   input,  width = 64,         CVT_RB_MIN_V_BPORCH.data
		.CVT_RB_V2_H_BLANK           (CVT_RB_V2_H_BLANK),           //   input,  width = 64,           CVT_RB_V2_H_BLANK.data
		.CVT_RB_V2_MIN_V_FPORCH      (CVT_RB_V2_MIN_V_FPORCH),      //   input,  width = 64,      CVT_RB_V2_MIN_V_FPORCH.data
		.CVT_RB_V_BPORCH             (CVT_RB_V_BPORCH),             //   input,  width = 64,             CVT_RB_V_BPORCH.data
		.CVT_RB_V_FPORCH             (CVT_RB_V_FPORCH),             //   input,  width = 64,             CVT_RB_V_FPORCH.data
		.V4L2_DV_BT_656_1120         (V4L2_DV_BT_656_1120),         //   input,  width = 64,         V4L2_DV_BT_656_1120.data
		.V4L2_DV_BT_STD_CVT          (V4L2_DV_BT_STD_CVT),          //   input,  width = 64,          V4L2_DV_BT_STD_CVT.data
		.V4L2_DV_FL_HALF_LINE        (V4L2_DV_FL_HALF_LINE),        //   input,  width = 64,        V4L2_DV_FL_HALF_LINE.data
		.V4L2_DV_FL_REDUCED_BLANKING (V4L2_DV_FL_REDUCED_BLANKING), //   input,  width = 64, V4L2_DV_FL_REDUCED_BLANKING.data
		.V4L2_DV_HSYNC_POS_POL       (V4L2_DV_HSYNC_POS_POL),       //   input,  width = 64,       V4L2_DV_HSYNC_POS_POL.data
		.V4L2_DV_INTERLACED          (V4L2_DV_INTERLACED),          //   input,  width = 64,          V4L2_DV_INTERLACED.data
		.V4L2_DV_PROGRESSIVE         (V4L2_DV_PROGRESSIVE),         //   input,  width = 64,         V4L2_DV_PROGRESSIVE.data
		.V4L2_DV_VSYNC_POS_POL       (V4L2_DV_VSYNC_POS_POL),       //   input,  width = 64,       V4L2_DV_VSYNC_POS_POL.data
		.avmm_0_rw_address           (avmm_0_rw_address),           //  output,  width = 64,                   avmm_0_rw.address
		.avmm_0_rw_byteenable        (avmm_0_rw_byteenable),        //  output,   width = 8,                            .byteenable
		.avmm_0_rw_read              (avmm_0_rw_read),              //  output,   width = 1,                            .read
		.avmm_0_rw_readdata          (avmm_0_rw_readdata),          //   input,  width = 64,                            .readdata
		.avmm_0_rw_write             (avmm_0_rw_write),             //  output,   width = 1,                            .write
		.avmm_0_rw_writedata         (avmm_0_rw_writedata)          //  output,  width = 64,                            .writedata
	);

endmodule
