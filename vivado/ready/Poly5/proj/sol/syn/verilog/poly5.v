// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poly5,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.167000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=17,HLS_SYN_FF=185,HLS_SYN_LUT=319,HLS_VERSION=2019_1}" *)

module poly5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] a_address1;
output   a_ce1;
input  [15:0] a_q1;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg a_ce1;
reg b_ce0;
reg c_ce0;
reg[6:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_158_p2;
reg   [6:0] i_reg_388;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_174_p2;
reg   [6:0] k_reg_396;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln13_fu_180_p1;
reg   [63:0] zext_ln13_reg_401;
wire   [0:0] icmp_ln12_fu_168_p2;
wire  signed [31:0] add_ln13_2_fu_215_p2;
reg  signed [31:0] add_ln13_2_reg_426;
wire    ap_CS_fsm_state4;
wire  signed [31:0] sext_ln13_3_fu_221_p1;
reg  signed [31:0] sext_ln13_3_reg_431;
wire  signed [31:0] grp_fu_340_p3;
reg  signed [31:0] add_ln13_5_reg_436;
reg  signed [15:0] c_load_reg_441;
wire  signed [31:0] grp_fu_366_p3;
reg  signed [31:0] sub_ln13_1_reg_446;
reg   [6:0] i_0_reg_130;
reg   [6:0] k_0_reg_141;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln10_fu_152_p2;
wire  signed [63:0] sext_ln13_1_fu_193_p1;
wire   [9:0] zext_ln12_fu_164_p1;
wire   [9:0] add_ln13_fu_187_p2;
wire  signed [15:0] sext_ln13_fu_198_p0;
wire  signed [15:0] mul_ln13_1_fu_210_p0;
wire  signed [31:0] sext_ln13_fu_198_p1;
wire  signed [31:0] grp_fu_322_p3;
wire   [31:0] mul_ln13_1_fu_210_p2;
wire  signed [22:0] grp_fu_331_p3;
wire  signed [15:0] shl_ln_fu_232_p1;
wire  signed [23:0] shl_ln_fu_232_p3;
wire  signed [15:0] shl_ln13_1_fu_244_p1;
wire   [20:0] shl_ln13_1_fu_244_p3;
wire  signed [21:0] sext_ln13_9_fu_252_p1;
wire  signed [21:0] add_ln13_8_fu_256_p2;
wire  signed [15:0] sext_ln13_12_fu_266_p0;
wire  signed [15:0] shl_ln13_2_fu_270_p1;
wire   [16:0] shl_ln13_2_fu_270_p3;
wire  signed [17:0] sext_ln13_14_fu_278_p1;
wire   [17:0] add_ln13_7_fu_282_p2;
wire  signed [17:0] sext_ln13_12_fu_266_p1;
wire  signed [17:0] sub_ln13_fu_288_p2;
wire  signed [15:0] mul_ln13_8_fu_305_p0;
wire  signed [31:0] sext_ln13_4_fu_302_p1;
wire   [31:0] mul_ln13_8_fu_305_p2;
wire   [31:0] mul_ln13_5_fu_298_p2;
wire  signed [31:0] tmp_fu_310_p2;
wire  signed [31:0] mul_ln13_9_fu_374_p2;
wire  signed [15:0] grp_fu_322_p1;
wire   [16:0] grp_fu_322_p2;
wire   [7:0] grp_fu_331_p1;
wire  signed [14:0] grp_fu_331_p2;
wire  signed [15:0] grp_fu_340_p0;
wire  signed [31:0] grp_fu_347_p3;
wire  signed [15:0] grp_fu_347_p2;
wire  signed [8:0] grp_fu_356_p1;
wire  signed [15:0] grp_fu_356_p2;
wire   [12:0] grp_fu_356_p3;
wire  signed [15:0] grp_fu_366_p0;
wire  signed [31:0] grp_fu_356_p4;
wire  signed [15:0] mul_ln13_9_fu_374_p0;
wire  signed [15:0] mul_ln13_9_fu_374_p1;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

poly5_mac_muladd_16s_16s_17ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
poly5_mac_muladd_16s_16s_17ns_32_1_1_U1(
    .din0(a_q1),
    .din1(grp_fu_322_p1),
    .din2(grp_fu_322_p2),
    .dout(grp_fu_322_p3)
);

poly5_mac_muladd_16s_8ns_15s_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 23 ))
poly5_mac_muladd_16s_8ns_15s_23_1_1_U2(
    .din0(a_q0),
    .din1(grp_fu_331_p1),
    .din2(grp_fu_331_p2),
    .dout(grp_fu_331_p3)
);

poly5_mac_muladd_16s_23s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly5_mac_muladd_16s_23s_32s_32_1_1_U3(
    .din0(grp_fu_340_p0),
    .din1(grp_fu_331_p3),
    .din2(grp_fu_347_p3),
    .dout(grp_fu_340_p3)
);

poly5_am_addmul_24s_22s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 22 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly5_am_addmul_24s_22s_16s_32_1_1_U4(
    .din0(shl_ln_fu_232_p3),
    .din1(add_ln13_8_fu_256_p2),
    .din2(grp_fu_347_p2),
    .dout(grp_fu_347_p3)
);

poly5_ama_addmuladd_16s_9s_16s_13ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 13 ),
    .dout_WIDTH( 32 ))
poly5_ama_addmuladd_16s_9s_16s_13ns_32_1_1_U5(
    .din0(a_q0),
    .din1(grp_fu_356_p1),
    .din2(grp_fu_356_p2),
    .din3(grp_fu_356_p3),
    .dout(grp_fu_356_p4)
);

poly5_mac_mulsub_16s_18s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly5_mac_mulsub_16s_18s_32s_32_1_1_U6(
    .din0(grp_fu_366_p0),
    .din1(sub_ln13_fu_288_p2),
    .din2(grp_fu_356_p4),
    .dout(grp_fu_366_p3)
);

poly5_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly5_mul_mul_16s_16s_32_1_1_U7(
    .din0(mul_ln13_9_fu_374_p0),
    .din1(mul_ln13_9_fu_374_p1),
    .dout(mul_ln13_9_fu_374_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_130 <= i_reg_388;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_130 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_141 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_141 <= k_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_2_reg_426 <= add_ln13_2_fu_215_p2;
        add_ln13_5_reg_436 <= grp_fu_340_p3;
        c_load_reg_441 <= c_q0;
        sext_ln13_3_reg_431 <= sext_ln13_3_fu_221_p1;
        sub_ln13_1_reg_446 <= grp_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_388 <= i_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_396 <= k_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln13_reg_401[6 : 0] <= zext_ln13_fu_180_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = zext_ln13_reg_401;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln13_fu_180_p1;

assign a_address1 = sext_ln13_1_fu_193_p1;

assign add_ln13_2_fu_215_p2 = ($signed(mul_ln13_1_fu_210_p2) + $signed(32'd4291981312));

assign add_ln13_7_fu_282_p2 = ($signed(sext_ln13_14_fu_278_p1) + $signed(18'd144));

assign add_ln13_8_fu_256_p2 = ($signed(sext_ln13_9_fu_252_p1) + $signed(22'd4189120));

assign add_ln13_fu_187_p2 = ($signed(zext_ln12_fu_164_p1) + $signed(10'd592));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = out_r_q0;

assign b_address0 = zext_ln13_fu_180_p1;

assign c_address0 = zext_ln13_fu_180_p1;

assign grp_fu_322_p1 = sext_ln13_fu_198_p1;

assign grp_fu_322_p2 = 32'd62208;

assign grp_fu_331_p1 = 23'd78;

assign grp_fu_331_p2 = 23'd8379104;

assign grp_fu_340_p0 = sext_ln13_fu_198_p1;

assign grp_fu_347_p2 = sext_ln13_3_fu_221_p1;

assign grp_fu_356_p1 = 17'd130865;

assign grp_fu_356_p2 = sext_ln13_fu_198_p1;

assign grp_fu_356_p3 = 32'd3456;

assign grp_fu_366_p0 = sext_ln13_3_fu_221_p1;

assign i_fu_158_p2 = (i_0_reg_130 + 7'd1);

assign icmp_ln10_fu_152_p2 = ((i_0_reg_130 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_168_p2 = ((k_0_reg_141 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_174_p2 = (k_0_reg_141 + 7'd1);

assign mul_ln13_1_fu_210_p0 = sext_ln13_fu_198_p1;

assign mul_ln13_1_fu_210_p2 = ($signed(mul_ln13_1_fu_210_p0) * $signed(grp_fu_322_p3));

assign mul_ln13_5_fu_298_p2 = ($signed(add_ln13_5_reg_436) * $signed(add_ln13_2_reg_426));

assign mul_ln13_8_fu_305_p0 = sext_ln13_4_fu_302_p1;

assign mul_ln13_8_fu_305_p2 = ($signed(mul_ln13_8_fu_305_p0) * $signed(sub_ln13_1_reg_446));

assign mul_ln13_9_fu_374_p0 = sext_ln13_4_fu_302_p1;

assign mul_ln13_9_fu_374_p1 = sext_ln13_3_reg_431;

assign out_r_d0 = ($signed(tmp_fu_310_p2) * $signed(mul_ln13_9_fu_374_p2));

assign sext_ln13_12_fu_266_p0 = c_q0;

assign sext_ln13_12_fu_266_p1 = sext_ln13_12_fu_266_p0;

assign sext_ln13_14_fu_278_p1 = $signed(shl_ln13_2_fu_270_p3);

assign sext_ln13_1_fu_193_p1 = $signed(add_ln13_fu_187_p2);

assign sext_ln13_3_fu_221_p1 = $signed(b_q0);

assign sext_ln13_4_fu_302_p1 = c_load_reg_441;

assign sext_ln13_9_fu_252_p1 = $signed(shl_ln13_1_fu_244_p3);

assign sext_ln13_fu_198_p0 = a_q0;

assign sext_ln13_fu_198_p1 = sext_ln13_fu_198_p0;

assign shl_ln13_1_fu_244_p1 = a_q0;

assign shl_ln13_1_fu_244_p3 = {{shl_ln13_1_fu_244_p1}, {5'd0}};

assign shl_ln13_2_fu_270_p1 = a_q0;

assign shl_ln13_2_fu_270_p3 = {{shl_ln13_2_fu_270_p1}, {1'd0}};

assign shl_ln_fu_232_p1 = a_q0;

assign shl_ln_fu_232_p3 = {{shl_ln_fu_232_p1}, {8'd0}};

assign sub_ln13_fu_288_p2 = ($signed(add_ln13_7_fu_282_p2) - $signed(sext_ln13_12_fu_266_p1));

assign tmp_fu_310_p2 = (mul_ln13_8_fu_305_p2 + mul_ln13_5_fu_298_p2);

assign zext_ln12_fu_164_p1 = k_0_reg_141;

assign zext_ln13_fu_180_p1 = k_0_reg_141;

always @ (posedge ap_clk) begin
    zext_ln13_reg_401[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //poly5
