-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of poly5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "poly5,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.590286,HLS_SYN_LAT=16810770637,HLS_SYN_TPT=none,HLS_SYN_MEM=109568,HLS_SYN_DSP=22,HLS_SYN_FF=891,HLS_SYN_LUT=1069,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv25_1FFFE50 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111001010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_7FFFEBC0 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111110101111000000";
    constant ap_const_lv26_3FFFF31 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111100110001";
    constant ap_const_lv27_90 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010010000";
    constant ap_const_lv32_F300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111001100000000";
    constant ap_const_lv32_FFFFDAE0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101101011100000";
    constant ap_const_lv32_D80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110110000000";
    constant ap_const_lv32_FFD27000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111110100100111000000000000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_fu_227_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal k_reg_490 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln33_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_518 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln43_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_263_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal k_1_reg_531 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln46_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_1_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_1_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln46_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal b_load_reg_573 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_2_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_2_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_4_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_4_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal c_load_reg_588 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln46_6_fu_349_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln46_6_reg_593 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln46_fu_377_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln46_reg_598 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln46_1_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_1_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln46_4_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_4_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_3_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_3_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_4_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_4_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln46_1_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln46_1_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_5_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_5_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln46_6_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_6_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_8_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_8_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_9_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_9_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal mul_ln46_10_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_10_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal a_address1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_ce1 : STD_LOGIC;
    signal a_q1 : STD_LOGIC_VECTOR (24 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal c_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal out_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_181 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_199 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_0_reg_210 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln34_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln46_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln46_fu_276_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_fu_299_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_fu_299_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln46_fu_305_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln46_1_fu_317_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln46_5_fu_325_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln46_8_fu_329_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln46_1_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_2_fu_291_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln46_2_fu_355_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln46_8_fu_363_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln46_7_fu_367_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln46_9_fu_373_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln46_7_fu_345_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln46_1_fu_388_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln46_1_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_3_fu_401_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln46_3_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln46_3_fu_396_p2 : signal is "no";
    signal mul_ln46_4_fu_406_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_6_fu_414_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_6_fu_414_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln46_7_fu_422_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_7_fu_422_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln46_6_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_9_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_7_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_2_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_5_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_8_fu_458_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_9_fu_467_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_10_fu_472_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln46_2_fu_476_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln46_2_fu_476_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln46_8_fu_458_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln46_fu_299_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component poly5_mul_mul_8ns_25ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (24 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0);
        address1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component poly5_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (24 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component poly5_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_U : component poly5_a
    generic map (
        DataWidth => 25,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => k_0_reg_181,
        q0 => a_q0,
        address1 => a_address1,
        ce1 => a_ce1,
        q1 => a_q1);

    b_U : component poly5_b
    generic map (
        DataWidth => 25,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => k_0_reg_181,
        q0 => b_q0);

    c_U : component poly5_b
    generic map (
        DataWidth => 25,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => k_0_reg_181,
        q0 => c_q0);

    out_U : component poly5_out
    generic map (
        DataWidth => 32,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);

    poly5_mul_mul_8ns_25ns_32_1_1_U1 : component poly5_mul_mul_8ns_25ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 25,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln46_2_fu_476_p0,
        din1 => mul_ln46_2_fu_476_p1,
        dout => mul_ln46_2_fu_476_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_199 <= ap_const_lv7_0;
            elsif (((icmp_ln45_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_199 <= i_reg_518;
            end if; 
        end if;
    end process;

    k1_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k1_0_reg_210 <= ap_const_lv25_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k1_0_reg_210 <= k_1_reg_531;
            end if; 
        end if;
    end process;

    k_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_0_reg_181 <= k_reg_490;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_181 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    add_ln46_4_reg_583(31 downto 5) <= add_ln46_4_fu_339_p2(31 downto 5);
                add_ln46_6_reg_593 <= add_ln46_6_fu_349_p2;
                b_load_reg_573 <= b_q0;
                c_load_reg_588 <= c_q0;
                mul_ln46_2_reg_578 <= mul_ln46_2_fu_476_p2;
                mul_ln46_reg_568 <= mul_ln46_fu_299_p2;
                sub_ln46_reg_598 <= sub_ln46_fu_377_p2;
                    zext_ln46_1_reg_561(24 downto 0) <= zext_ln46_1_fu_287_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_518 <= i_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_1_reg_531 <= k_1_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_490 <= k_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln46_10_reg_648 <= mul_ln46_10_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln46_1_reg_603 <= mul_ln46_1_fu_388_p2;
                mul_ln46_3_reg_613 <= mul_ln46_3_fu_401_p2;
                    mul_ln46_4_reg_618(31 downto 5) <= mul_ln46_4_fu_406_p2(31 downto 5);
                sub_ln46_1_reg_623 <= sub_ln46_1_fu_434_p2;
                    zext_ln46_4_reg_608(24 downto 0) <= zext_ln46_4_fu_393_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln46_5_reg_628 <= mul_ln46_5_fu_449_p2;
                mul_ln46_8_reg_638 <= mul_ln46_8_fu_458_p2;
                    zext_ln46_6_reg_633(24 downto 0) <= zext_ln46_6_fu_455_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln46_9_reg_643 <= mul_ln46_9_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln46_reg_536(24 downto 0) <= zext_ln46_fu_269_p1(24 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_536(63 downto 25) <= "000000000000000000000000000000000000000";
    zext_ln46_1_reg_561(31 downto 25) <= "0000000";
    add_ln46_4_reg_583(4 downto 0) <= "00000";
    zext_ln46_4_reg_608(31 downto 25) <= "0000000";
    mul_ln46_4_reg_618(4 downto 0) <= "00000";
    zext_ln46_6_reg_633(31 downto 25) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_221_p2, ap_CS_fsm_state4, icmp_ln43_fu_241_p2, ap_CS_fsm_state5, icmp_ln45_fu_257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln43_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln45_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln46_fu_269_p1, zext_ln34_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= zext_ln46_fu_269_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln34_fu_233_p1(24 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_address1 <= sext_ln46_fu_282_p1(24 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_221_p2)
    begin
        if (((icmp_ln33_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln46_1_fu_383_p2 <= std_logic_vector(unsigned(ap_const_lv32_F300) + unsigned(mul_ln46_reg_568));
    add_ln46_2_fu_440_p2 <= std_logic_vector(signed(ap_const_lv32_FFD27000) + signed(mul_ln46_1_reg_603));
    add_ln46_3_fu_396_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFDAE0) + signed(mul_ln46_2_reg_578));
    add_ln46_4_fu_339_p2 <= std_logic_vector(signed(sext_ln46_1_fu_335_p1) + signed(shl_ln_fu_309_p3));
    add_ln46_5_fu_445_p2 <= std_logic_vector(unsigned(mul_ln46_3_reg_613) + unsigned(mul_ln46_4_reg_618));
    add_ln46_6_fu_349_p2 <= std_logic_vector(signed(ap_const_lv26_3FFFF31) + signed(zext_ln46_2_fu_291_p1));
    add_ln46_7_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv27_90) + unsigned(zext_ln46_8_fu_363_p1));
    add_ln46_8_fu_329_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFEBC0) + signed(zext_ln46_5_fu_325_p1));
    add_ln46_9_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv32_D80) + unsigned(mul_ln46_6_fu_414_p2));
    add_ln46_fu_276_p2 <= std_logic_vector(signed(ap_const_lv25_1FFFE50) + signed(k1_0_reg_210));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_q0;

    b_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln46_fu_269_p1, zext_ln34_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= zext_ln46_fu_269_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= zext_ln34_fu_233_p1(24 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_221_p2)
    begin
        if (((icmp_ln33_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln46_fu_269_p1, zext_ln34_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= zext_ln46_fu_269_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= zext_ln34_fu_233_p1(24 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_221_p2)
    begin
        if (((icmp_ln33_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_247_p2 <= std_logic_vector(unsigned(i_0_reg_199) + unsigned(ap_const_lv7_1));
    icmp_ln33_fu_221_p2 <= "1" when (k_0_reg_181 = ap_const_lv25_1000000) else "0";
    icmp_ln43_fu_241_p2 <= "1" when (i_0_reg_199 = ap_const_lv7_64) else "0";
    icmp_ln45_fu_257_p2 <= "1" when (k1_0_reg_210 = ap_const_lv25_1000000) else "0";
    k_1_fu_263_p2 <= std_logic_vector(unsigned(k1_0_reg_210) + unsigned(ap_const_lv25_1));
    k_fu_227_p2 <= std_logic_vector(unsigned(k_0_reg_181) + unsigned(ap_const_lv25_1));
    mul_ln46_10_fu_472_p1 <= zext_ln46_4_reg_608(25 - 1 downto 0);
    mul_ln46_10_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln46_9_reg_643) * signed('0' &mul_ln46_10_fu_472_p1))), 32));
    mul_ln46_1_fu_388_p0 <= zext_ln46_1_reg_561(25 - 1 downto 0);
    mul_ln46_1_fu_388_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_1_fu_388_p0) * signed(add_ln46_1_fu_383_p2))), 32));
    mul_ln46_2_fu_476_p0 <= ap_const_lv32_4E(8 - 1 downto 0);
    mul_ln46_2_fu_476_p1 <= zext_ln46_1_fu_287_p1(25 - 1 downto 0);
    mul_ln46_3_fu_401_p0 <= zext_ln46_1_reg_561(25 - 1 downto 0);
    mul_ln46_3_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_3_fu_401_p0) * signed(add_ln46_3_fu_396_p2))), 32));
    mul_ln46_4_fu_406_p0 <= zext_ln46_4_fu_393_p1(25 - 1 downto 0);
    mul_ln46_4_fu_406_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_4_fu_406_p0) * signed(add_ln46_4_reg_583))), 32));
    mul_ln46_5_fu_449_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln46_2_fu_440_p2) * signed(add_ln46_5_fu_445_p2))), 32));
    mul_ln46_6_fu_414_p0 <= zext_ln46_1_reg_561(25 - 1 downto 0);
    mul_ln46_6_fu_414_p1 <= add_ln46_6_reg_593;
    mul_ln46_6_fu_414_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_6_fu_414_p0) * signed(mul_ln46_6_fu_414_p1))), 32));
    mul_ln46_7_fu_422_p0 <= zext_ln46_4_fu_393_p1(25 - 1 downto 0);
    mul_ln46_7_fu_422_p1 <= sub_ln46_reg_598;
    mul_ln46_7_fu_422_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_7_fu_422_p0) * signed(mul_ln46_7_fu_422_p1))), 32));
    mul_ln46_8_fu_458_p0 <= mul_ln46_8_fu_458_p00(25 - 1 downto 0);
    mul_ln46_8_fu_458_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_load_reg_588),32));
    mul_ln46_8_fu_458_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_8_fu_458_p0) * signed(sub_ln46_1_reg_623))), 32));
    mul_ln46_9_fu_467_p0 <= zext_ln46_6_reg_633(25 - 1 downto 0);
    mul_ln46_9_fu_467_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln46_9_fu_467_p0) * signed(tmp_fu_463_p2))), 32));
    mul_ln46_fu_299_p0 <= zext_ln46_1_fu_287_p1(25 - 1 downto 0);
    mul_ln46_fu_299_p1 <= mul_ln46_fu_299_p10(25 - 1 downto 0);
    mul_ln46_fu_299_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),32));
    mul_ln46_fu_299_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln46_fu_299_p0) * unsigned(mul_ln46_fu_299_p1), 32));

    out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln46_reg_536, ap_CS_fsm_state13, zext_ln34_fu_233_p1, sext_ln56_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_address0 <= zext_ln46_reg_536(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_address0 <= sext_ln56_fu_253_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_address0 <= zext_ln34_fu_233_p1(24 - 1 downto 0);
        else 
            out_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_d0_assign_proc : process(ap_CS_fsm_state2, mul_ln46_10_reg_648, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_d0 <= mul_ln46_10_reg_648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_d0 <= ap_const_lv32_0;
        else 
            out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_221_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln33_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln46_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_8_fu_329_p2),32));

        sext_ln46_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_fu_276_p2),64));

        sext_ln56_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx),64));

    shl_ln46_1_fu_317_p3 <= (a_q0 & ap_const_lv5_0);
    shl_ln46_2_fu_355_p3 <= (a_q0 & ap_const_lv1_0);
    shl_ln_fu_309_p3 <= (trunc_ln46_fu_305_p1 & ap_const_lv8_0);
    sub_ln46_1_fu_434_p2 <= std_logic_vector(unsigned(add_ln46_9_fu_428_p2) - unsigned(mul_ln46_7_fu_422_p2));
    sub_ln46_fu_377_p2 <= std_logic_vector(unsigned(zext_ln46_9_fu_373_p1) - unsigned(zext_ln46_7_fu_345_p1));
    tmp_fu_463_p2 <= std_logic_vector(unsigned(mul_ln46_5_reg_628) + unsigned(mul_ln46_8_reg_638));
    trunc_ln46_fu_305_p1 <= a_q0(24 - 1 downto 0);
    zext_ln34_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_181),64));
    zext_ln46_1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),32));
    zext_ln46_2_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),26));
    zext_ln46_4_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_reg_573),32));
    zext_ln46_5_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln46_1_fu_317_p3),31));
    zext_ln46_6_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_load_reg_588),32));
    zext_ln46_7_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_q0),28));
    zext_ln46_8_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln46_2_fu_355_p3),27));
    zext_ln46_9_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_7_fu_367_p2),28));
    zext_ln46_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_210),64));
end behav;
