-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of poly5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "poly5,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.167000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=17,HLS_SYN_FF=185,HLS_SYN_LUT=319,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_250 : STD_LOGIC_VECTOR (9 downto 0) := "1001010000";
    constant ap_const_lv32_FFD27000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111110100100111000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv22_3FEBC0 : STD_LOGIC_VECTOR (21 downto 0) := "1111111110101111000000";
    constant ap_const_lv18_90 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010010000";
    constant ap_const_lv32_F300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111001100000000";
    constant ap_const_lv23_4E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001001110";
    constant ap_const_lv23_7FDAE0 : STD_LOGIC_VECTOR (22 downto 0) := "11111111101101011100000";
    constant ap_const_lv17_1FF31 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110001";
    constant ap_const_lv32_D80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110110000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_158_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln13_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_2_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_2_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln13_3_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_3_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_load_reg_441 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_1_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_130 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_141 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln10_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln13_1_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_164_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_fu_187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln13_fu_198_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_1_fu_210_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_1_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_232_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_232_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln13_1_fu_244_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln13_1_fu_244_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln13_9_fu_252_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln13_8_fu_256_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln13_12_fu_266_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln13_2_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln13_2_fu_270_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln13_14_fu_278_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln13_7_fu_282_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln13_12_fu_266_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln13_fu_288_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln13_8_fu_305_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_4_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_8_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_5_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_9_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_356_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_366_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_9_fu_374_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_9_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component poly5_mac_muladd_16s_16s_17ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_mac_muladd_16s_8ns_15s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component poly5_mac_muladd_16s_23s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_am_addmul_24s_22s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_ama_addmuladd_16s_9s_16s_13ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_mac_mulsub_16s_18s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly5_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    poly5_mac_muladd_16s_16s_17ns_32_1_1_U1 : component poly5_mac_muladd_16s_16s_17ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => a_q1,
        din1 => grp_fu_322_p1,
        din2 => grp_fu_322_p2,
        dout => grp_fu_322_p3);

    poly5_mac_muladd_16s_8ns_15s_23_1_1_U2 : component poly5_mac_muladd_16s_8ns_15s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 15,
        dout_WIDTH => 23)
    port map (
        din0 => a_q0,
        din1 => grp_fu_331_p1,
        din2 => grp_fu_331_p2,
        dout => grp_fu_331_p3);

    poly5_mac_muladd_16s_23s_32s_32_1_1_U3 : component poly5_mac_muladd_16s_23s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_340_p0,
        din1 => grp_fu_331_p3,
        din2 => grp_fu_347_p3,
        dout => grp_fu_340_p3);

    poly5_am_addmul_24s_22s_16s_32_1_1_U4 : component poly5_am_addmul_24s_22s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 22,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_232_p3,
        din1 => add_ln13_8_fu_256_p2,
        din2 => grp_fu_347_p2,
        dout => grp_fu_347_p3);

    poly5_ama_addmuladd_16s_9s_16s_13ns_32_1_1_U5 : component poly5_ama_addmuladd_16s_9s_16s_13ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 16,
        din3_WIDTH => 13,
        dout_WIDTH => 32)
    port map (
        din0 => a_q0,
        din1 => grp_fu_356_p1,
        din2 => grp_fu_356_p2,
        din3 => grp_fu_356_p3,
        dout => grp_fu_356_p4);

    poly5_mac_mulsub_16s_18s_32s_32_1_1_U6 : component poly5_mac_mulsub_16s_18s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_366_p0,
        din1 => sub_ln13_fu_288_p2,
        din2 => grp_fu_356_p4,
        dout => grp_fu_366_p3);

    poly5_mul_mul_16s_16s_32_1_1_U7 : component poly5_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln13_9_fu_374_p0,
        din1 => mul_ln13_9_fu_374_p1,
        dout => mul_ln13_9_fu_374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_130 <= i_reg_388;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_130 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_141 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_141 <= k_reg_396;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln13_2_reg_426 <= add_ln13_2_fu_215_p2;
                add_ln13_5_reg_436 <= grp_fu_340_p3;
                c_load_reg_441 <= c_q0;
                sext_ln13_3_reg_431 <= sext_ln13_3_fu_221_p1;
                sub_ln13_1_reg_446 <= grp_fu_366_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_388 <= i_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_396 <= k_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln13_reg_401(6 downto 0) <= zext_ln13_fu_180_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_401(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln12_fu_168_p2, icmp_ln10_fu_152_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address0 <= zext_ln13_fu_180_p1(7 - 1 downto 0);
    a_address1 <= sext_ln13_1_fu_193_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_2_fu_215_p2 <= std_logic_vector(unsigned(mul_ln13_1_fu_210_p2) + unsigned(ap_const_lv32_FFD27000));
    add_ln13_7_fu_282_p2 <= std_logic_vector(signed(sext_ln13_14_fu_278_p1) + signed(ap_const_lv18_90));
    add_ln13_8_fu_256_p2 <= std_logic_vector(signed(sext_ln13_9_fu_252_p1) + signed(ap_const_lv22_3FEBC0));
    add_ln13_fu_187_p2 <= std_logic_vector(unsigned(zext_ln12_fu_164_p1) + unsigned(ap_const_lv10_250));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_r_q0;
    b_address0 <= zext_ln13_fu_180_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln13_fu_180_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_322_p1 <= sext_ln13_fu_198_p1(16 - 1 downto 0);
    grp_fu_322_p2 <= ap_const_lv32_F300(17 - 1 downto 0);
    grp_fu_331_p1 <= ap_const_lv23_4E(8 - 1 downto 0);
    grp_fu_331_p2 <= ap_const_lv23_7FDAE0(15 - 1 downto 0);
    grp_fu_340_p0 <= sext_ln13_fu_198_p1(16 - 1 downto 0);
    grp_fu_347_p2 <= sext_ln13_3_fu_221_p1(16 - 1 downto 0);
    grp_fu_356_p1 <= ap_const_lv17_1FF31(9 - 1 downto 0);
    grp_fu_356_p2 <= sext_ln13_fu_198_p1(16 - 1 downto 0);
    grp_fu_356_p3 <= ap_const_lv32_D80(13 - 1 downto 0);
    grp_fu_366_p0 <= sext_ln13_3_fu_221_p1(16 - 1 downto 0);
    i_fu_158_p2 <= std_logic_vector(unsigned(i_0_reg_130) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_152_p2 <= "1" when (i_0_reg_130 = ap_const_lv7_64) else "0";
    icmp_ln12_fu_168_p2 <= "1" when (k_0_reg_141 = ap_const_lv7_64) else "0";
    k_fu_174_p2 <= std_logic_vector(unsigned(k_0_reg_141) + unsigned(ap_const_lv7_1));
    mul_ln13_1_fu_210_p0 <= sext_ln13_fu_198_p1(16 - 1 downto 0);
    mul_ln13_1_fu_210_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_1_fu_210_p0) * signed(grp_fu_322_p3))), 32));
    mul_ln13_5_fu_298_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln13_5_reg_436) * signed(add_ln13_2_reg_426))), 32));
    mul_ln13_8_fu_305_p0 <= sext_ln13_4_fu_302_p1(16 - 1 downto 0);
    mul_ln13_8_fu_305_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_8_fu_305_p0) * signed(sub_ln13_1_reg_446))), 32));
    mul_ln13_9_fu_374_p0 <= sext_ln13_4_fu_302_p1(16 - 1 downto 0);
    mul_ln13_9_fu_374_p1 <= sext_ln13_3_reg_431(16 - 1 downto 0);

    out_r_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln13_reg_401, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address0 <= zext_ln13_reg_401(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_r_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_fu_310_p2) * signed(mul_ln13_9_fu_374_p2))), 32));

    out_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln13_12_fu_266_p0 <= c_q0;
        sext_ln13_12_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_12_fu_266_p0),18));

        sext_ln13_14_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln13_2_fu_270_p3),18));

        sext_ln13_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln13_fu_187_p2),64));

        sext_ln13_3_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_q0),32));

        sext_ln13_4_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_load_reg_441),32));

        sext_ln13_9_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln13_1_fu_244_p3),22));

    sext_ln13_fu_198_p0 <= a_q0;
        sext_ln13_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_198_p0),32));

    shl_ln13_1_fu_244_p1 <= a_q0;
    shl_ln13_1_fu_244_p3 <= (shl_ln13_1_fu_244_p1 & ap_const_lv5_0);
    shl_ln13_2_fu_270_p1 <= a_q0;
    shl_ln13_2_fu_270_p3 <= (shl_ln13_2_fu_270_p1 & ap_const_lv1_0);
    shl_ln_fu_232_p1 <= a_q0;
    shl_ln_fu_232_p3 <= (shl_ln_fu_232_p1 & ap_const_lv8_0);
    sub_ln13_fu_288_p2 <= std_logic_vector(unsigned(add_ln13_7_fu_282_p2) - unsigned(sext_ln13_12_fu_266_p1));
    tmp_fu_310_p2 <= std_logic_vector(unsigned(mul_ln13_8_fu_305_p2) + unsigned(mul_ln13_5_fu_298_p2));
    zext_ln12_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_141),10));
    zext_ln13_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_141),64));
end behav;
