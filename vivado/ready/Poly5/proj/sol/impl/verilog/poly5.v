// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poly5,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.590286,HLS_SYN_LAT=16810770637,HLS_SYN_TPT=none,HLS_SYN_MEM=109568,HLS_SYN_DSP=22,HLS_SYN_FF=891,HLS_SYN_LUT=1069,HLS_VERSION=2019_1}" *)

module poly5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [24:0] k_fu_227_p2;
reg   [24:0] k_reg_490;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_221_p2;
wire   [6:0] i_fu_247_p2;
reg   [6:0] i_reg_518;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln43_fu_241_p2;
wire   [24:0] k_1_fu_263_p2;
reg   [24:0] k_1_reg_531;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln46_fu_269_p1;
reg   [63:0] zext_ln46_reg_536;
wire   [0:0] icmp_ln45_fu_257_p2;
wire   [31:0] zext_ln46_1_fu_287_p1;
reg   [31:0] zext_ln46_1_reg_561;
wire    ap_CS_fsm_state8;
wire   [31:0] mul_ln46_fu_299_p2;
reg   [31:0] mul_ln46_reg_568;
wire   [24:0] b_q0;
reg   [24:0] b_load_reg_573;
wire   [31:0] mul_ln46_2_fu_476_p2;
reg   [31:0] mul_ln46_2_reg_578;
wire  signed [31:0] add_ln46_4_fu_339_p2;
reg  signed [31:0] add_ln46_4_reg_583;
wire   [24:0] c_q0;
reg   [24:0] c_load_reg_588;
wire   [25:0] add_ln46_6_fu_349_p2;
reg   [25:0] add_ln46_6_reg_593;
wire   [27:0] sub_ln46_fu_377_p2;
reg   [27:0] sub_ln46_reg_598;
wire   [31:0] mul_ln46_1_fu_388_p2;
reg   [31:0] mul_ln46_1_reg_603;
wire    ap_CS_fsm_state9;
wire   [31:0] zext_ln46_4_fu_393_p1;
reg   [31:0] zext_ln46_4_reg_608;
wire   [31:0] mul_ln46_3_fu_401_p2;
reg   [31:0] mul_ln46_3_reg_613;
wire   [31:0] mul_ln46_4_fu_406_p2;
reg   [31:0] mul_ln46_4_reg_618;
wire  signed [31:0] sub_ln46_1_fu_434_p2;
reg  signed [31:0] sub_ln46_1_reg_623;
wire   [31:0] mul_ln46_5_fu_449_p2;
reg   [31:0] mul_ln46_5_reg_628;
wire    ap_CS_fsm_state10;
wire   [31:0] zext_ln46_6_fu_455_p1;
reg   [31:0] zext_ln46_6_reg_633;
wire   [31:0] mul_ln46_8_fu_458_p2;
reg   [31:0] mul_ln46_8_reg_638;
wire  signed [31:0] mul_ln46_9_fu_467_p2;
reg  signed [31:0] mul_ln46_9_reg_643;
wire    ap_CS_fsm_state11;
wire   [31:0] mul_ln46_10_fu_472_p2;
reg   [31:0] mul_ln46_10_reg_648;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [23:0] a_address0;
reg    a_ce0;
reg    a_we0;
wire   [24:0] a_q0;
wire   [23:0] a_address1;
reg    a_ce1;
wire   [24:0] a_q1;
reg   [23:0] b_address0;
reg    b_ce0;
reg    b_we0;
reg   [23:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [23:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [31:0] out_d0;
wire   [31:0] out_q0;
reg   [24:0] k_0_reg_181;
wire    ap_CS_fsm_state3;
reg   [6:0] i_0_reg_199;
reg   [24:0] k1_0_reg_210;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln34_fu_233_p1;
wire  signed [63:0] sext_ln56_fu_253_p1;
wire  signed [63:0] sext_ln46_fu_282_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [24:0] add_ln46_fu_276_p2;
wire   [24:0] mul_ln46_fu_299_p0;
wire   [24:0] mul_ln46_fu_299_p1;
wire   [23:0] trunc_ln46_fu_305_p1;
wire   [29:0] shl_ln46_1_fu_317_p3;
wire   [30:0] zext_ln46_5_fu_325_p1;
wire   [30:0] add_ln46_8_fu_329_p2;
wire  signed [31:0] sext_ln46_1_fu_335_p1;
wire   [31:0] shl_ln_fu_309_p3;
wire   [25:0] zext_ln46_2_fu_291_p1;
wire   [25:0] shl_ln46_2_fu_355_p3;
wire   [26:0] zext_ln46_8_fu_363_p1;
wire   [26:0] add_ln46_7_fu_367_p2;
wire   [27:0] zext_ln46_9_fu_373_p1;
wire   [27:0] zext_ln46_7_fu_345_p1;
wire   [24:0] mul_ln46_1_fu_388_p0;
wire  signed [31:0] add_ln46_1_fu_383_p2;
wire   [24:0] mul_ln46_3_fu_401_p0;
(* use_dsp48 = "no" *) wire  signed [31:0] add_ln46_3_fu_396_p2;
wire   [24:0] mul_ln46_4_fu_406_p0;
wire   [24:0] mul_ln46_6_fu_414_p0;
wire  signed [25:0] mul_ln46_6_fu_414_p1;
wire   [24:0] mul_ln46_7_fu_422_p0;
wire  signed [27:0] mul_ln46_7_fu_422_p1;
wire   [31:0] mul_ln46_6_fu_414_p2;
wire   [31:0] add_ln46_9_fu_428_p2;
wire   [31:0] mul_ln46_7_fu_422_p2;
wire  signed [31:0] add_ln46_2_fu_440_p2;
wire  signed [31:0] add_ln46_5_fu_445_p2;
wire   [24:0] mul_ln46_8_fu_458_p0;
wire   [24:0] mul_ln46_9_fu_467_p0;
wire  signed [31:0] tmp_fu_463_p2;
wire   [24:0] mul_ln46_10_fu_472_p1;
wire   [7:0] mul_ln46_2_fu_476_p0;
wire   [24:0] mul_ln46_2_fu_476_p1;
reg   [16:0] ap_NS_fsm;
wire   [31:0] mul_ln46_8_fu_458_p00;
wire   [31:0] mul_ln46_fu_299_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

poly5_a #(
    .DataWidth( 25 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(k_0_reg_181),
    .q0(a_q0),
    .address1(a_address1),
    .ce1(a_ce1),
    .q1(a_q1)
);

poly5_b #(
    .DataWidth( 25 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(k_0_reg_181),
    .q0(b_q0)
);

poly5_b #(
    .DataWidth( 25 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(k_0_reg_181),
    .q0(c_q0)
);

poly5_out #(
    .DataWidth( 32 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(out_d0),
    .q0(out_q0)
);

poly5_mul_mul_8ns_25ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 32 ))
poly5_mul_mul_8ns_25ns_32_1_1_U1(
    .din0(mul_ln46_2_fu_476_p0),
    .din1(mul_ln46_2_fu_476_p1),
    .dout(mul_ln46_2_fu_476_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_199 <= 7'd0;
    end else if (((icmp_ln45_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_199 <= i_reg_518;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k1_0_reg_210 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k1_0_reg_210 <= k_1_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_reg_181 <= k_reg_490;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_181 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln46_4_reg_583[31 : 5] <= add_ln46_4_fu_339_p2[31 : 5];
        add_ln46_6_reg_593 <= add_ln46_6_fu_349_p2;
        b_load_reg_573 <= b_q0;
        c_load_reg_588 <= c_q0;
        mul_ln46_2_reg_578 <= mul_ln46_2_fu_476_p2;
        mul_ln46_reg_568 <= mul_ln46_fu_299_p2;
        sub_ln46_reg_598 <= sub_ln46_fu_377_p2;
        zext_ln46_1_reg_561[24 : 0] <= zext_ln46_1_fu_287_p1[24 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_518 <= i_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_531 <= k_1_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_490 <= k_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln46_10_reg_648 <= mul_ln46_10_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln46_1_reg_603 <= mul_ln46_1_fu_388_p2;
        mul_ln46_3_reg_613 <= mul_ln46_3_fu_401_p2;
        mul_ln46_4_reg_618[31 : 5] <= mul_ln46_4_fu_406_p2[31 : 5];
        sub_ln46_1_reg_623 <= sub_ln46_1_fu_434_p2;
        zext_ln46_4_reg_608[24 : 0] <= zext_ln46_4_fu_393_p1[24 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln46_5_reg_628 <= mul_ln46_5_fu_449_p2;
        mul_ln46_8_reg_638 <= mul_ln46_8_fu_458_p2;
        zext_ln46_6_reg_633[24 : 0] <= zext_ln46_6_fu_455_p1[24 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln46_9_reg_643 <= mul_ln46_9_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln46_reg_536[24 : 0] <= zext_ln46_fu_269_p1[24 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = zext_ln46_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = zext_ln34_fu_233_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = zext_ln46_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = zext_ln34_fu_233_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln46_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = zext_ln34_fu_233_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_address0 = zext_ln46_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_address0 = sext_ln56_fu_253_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_address0 = zext_ln34_fu_233_p1;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13))) begin
        out_ce0 = 1'b1;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_d0 = mul_ln46_10_reg_648;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d0 = 32'd0;
    end else begin
        out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((icmp_ln33_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_we0 = 1'b1;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln43_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln45_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = sext_ln46_fu_282_p1;

assign add_ln46_1_fu_383_p2 = (32'd62208 + mul_ln46_reg_568);

assign add_ln46_2_fu_440_p2 = ($signed(32'd4291981312) + $signed(mul_ln46_1_reg_603));

assign add_ln46_3_fu_396_p2 = ($signed(32'd4294957792) + $signed(mul_ln46_2_reg_578));

assign add_ln46_4_fu_339_p2 = ($signed(sext_ln46_1_fu_335_p1) + $signed(shl_ln_fu_309_p3));

assign add_ln46_5_fu_445_p2 = (mul_ln46_3_reg_613 + mul_ln46_4_reg_618);

assign add_ln46_6_fu_349_p2 = ($signed(26'd67108657) + $signed(zext_ln46_2_fu_291_p1));

assign add_ln46_7_fu_367_p2 = (27'd144 + zext_ln46_8_fu_363_p1);

assign add_ln46_8_fu_329_p2 = ($signed(31'd2147478464) + $signed(zext_ln46_5_fu_325_p1));

assign add_ln46_9_fu_428_p2 = (32'd3456 + mul_ln46_6_fu_414_p2);

assign add_ln46_fu_276_p2 = ($signed(25'd33554000) + $signed(k1_0_reg_210));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = out_q0;

assign i_fu_247_p2 = (i_0_reg_199 + 7'd1);

assign icmp_ln33_fu_221_p2 = ((k_0_reg_181 == 25'd16777216) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_241_p2 = ((i_0_reg_199 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_257_p2 = ((k1_0_reg_210 == 25'd16777216) ? 1'b1 : 1'b0);

assign k_1_fu_263_p2 = (k1_0_reg_210 + 25'd1);

assign k_fu_227_p2 = (k_0_reg_181 + 25'd1);

assign mul_ln46_10_fu_472_p1 = zext_ln46_4_reg_608;

assign mul_ln46_10_fu_472_p2 = ($signed(mul_ln46_9_reg_643) * $signed({{1'b0}, {mul_ln46_10_fu_472_p1}}));

assign mul_ln46_1_fu_388_p0 = zext_ln46_1_reg_561;

assign mul_ln46_1_fu_388_p2 = ($signed({{1'b0}, {mul_ln46_1_fu_388_p0}}) * $signed(add_ln46_1_fu_383_p2));

assign mul_ln46_2_fu_476_p0 = 32'd78;

assign mul_ln46_2_fu_476_p1 = zext_ln46_1_fu_287_p1;

assign mul_ln46_3_fu_401_p0 = zext_ln46_1_reg_561;

assign mul_ln46_3_fu_401_p2 = ($signed({{1'b0}, {mul_ln46_3_fu_401_p0}}) * $signed(add_ln46_3_fu_396_p2));

assign mul_ln46_4_fu_406_p0 = zext_ln46_4_fu_393_p1;

assign mul_ln46_4_fu_406_p2 = ($signed({{1'b0}, {mul_ln46_4_fu_406_p0}}) * $signed(add_ln46_4_reg_583));

assign mul_ln46_5_fu_449_p2 = ($signed(add_ln46_2_fu_440_p2) * $signed(add_ln46_5_fu_445_p2));

assign mul_ln46_6_fu_414_p0 = zext_ln46_1_reg_561;

assign mul_ln46_6_fu_414_p1 = add_ln46_6_reg_593;

assign mul_ln46_6_fu_414_p2 = ($signed({{1'b0}, {mul_ln46_6_fu_414_p0}}) * $signed(mul_ln46_6_fu_414_p1));

assign mul_ln46_7_fu_422_p0 = zext_ln46_4_fu_393_p1;

assign mul_ln46_7_fu_422_p1 = sub_ln46_reg_598;

assign mul_ln46_7_fu_422_p2 = ($signed({{1'b0}, {mul_ln46_7_fu_422_p0}}) * $signed(mul_ln46_7_fu_422_p1));

assign mul_ln46_8_fu_458_p0 = mul_ln46_8_fu_458_p00;

assign mul_ln46_8_fu_458_p00 = c_load_reg_588;

assign mul_ln46_8_fu_458_p2 = ($signed({{1'b0}, {mul_ln46_8_fu_458_p0}}) * $signed(sub_ln46_1_reg_623));

assign mul_ln46_9_fu_467_p0 = zext_ln46_6_reg_633;

assign mul_ln46_9_fu_467_p2 = ($signed({{1'b0}, {mul_ln46_9_fu_467_p0}}) * $signed(tmp_fu_463_p2));

assign mul_ln46_fu_299_p0 = zext_ln46_1_fu_287_p1;

assign mul_ln46_fu_299_p1 = mul_ln46_fu_299_p10;

assign mul_ln46_fu_299_p10 = a_q1;

assign mul_ln46_fu_299_p2 = (mul_ln46_fu_299_p0 * mul_ln46_fu_299_p1);

assign sext_ln46_1_fu_335_p1 = $signed(add_ln46_8_fu_329_p2);

assign sext_ln46_fu_282_p1 = $signed(add_ln46_fu_276_p2);

assign sext_ln56_fu_253_p1 = $signed(idx);

assign shl_ln46_1_fu_317_p3 = {{a_q0}, {5'd0}};

assign shl_ln46_2_fu_355_p3 = {{a_q0}, {1'd0}};

assign shl_ln_fu_309_p3 = {{trunc_ln46_fu_305_p1}, {8'd0}};

assign sub_ln46_1_fu_434_p2 = (add_ln46_9_fu_428_p2 - mul_ln46_7_fu_422_p2);

assign sub_ln46_fu_377_p2 = (zext_ln46_9_fu_373_p1 - zext_ln46_7_fu_345_p1);

assign tmp_fu_463_p2 = (mul_ln46_5_reg_628 + mul_ln46_8_reg_638);

assign trunc_ln46_fu_305_p1 = a_q0[23:0];

assign zext_ln34_fu_233_p1 = k_0_reg_181;

assign zext_ln46_1_fu_287_p1 = a_q0;

assign zext_ln46_2_fu_291_p1 = a_q0;

assign zext_ln46_4_fu_393_p1 = b_load_reg_573;

assign zext_ln46_5_fu_325_p1 = shl_ln46_1_fu_317_p3;

assign zext_ln46_6_fu_455_p1 = c_load_reg_588;

assign zext_ln46_7_fu_345_p1 = c_q0;

assign zext_ln46_8_fu_363_p1 = shl_ln46_2_fu_355_p3;

assign zext_ln46_9_fu_373_p1 = add_ln46_7_fu_367_p2;

assign zext_ln46_fu_269_p1 = k1_0_reg_210;

always @ (posedge ap_clk) begin
    zext_ln46_reg_536[63:25] <= 39'b000000000000000000000000000000000000000;
    zext_ln46_1_reg_561[31:25] <= 7'b0000000;
    add_ln46_4_reg_583[4:0] <= 5'b00000;
    zext_ln46_4_reg_608[31:25] <= 7'b0000000;
    mul_ln46_4_reg_618[4:0] <= 5'b00000;
    zext_ln46_6_reg_633[31:25] <= 7'b0000000;
end

endmodule //poly5
