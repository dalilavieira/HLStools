-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of poly6 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "poly6,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.678000,HLS_SYN_LAT=40202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=23,HLS_SYN_FF=330,HLS_SYN_LUT=500,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_1ECC0 : STD_LOGIC_VECTOR (19 downto 0) := "00011110110011000000";
    constant ap_const_lv18_3FE50 : STD_LOGIC_VECTOR (17 downto 0) := "111111111001010000";
    constant ap_const_lv32_2D9000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001011011001000000000000";
    constant ap_const_lv25_19E : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000110011110";
    constant ap_const_lv25_1FFAF00 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111010111100000000";
    constant ap_const_lv28_D80 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000110110000000";
    constant ap_const_lv28_FE93800 : STD_LOGIC_VECTOR (27 downto 0) := "1111111010010011100000000000";
    constant ap_const_lv17_1FFE0 : STD_LOGIC_VECTOR (16 downto 0) := "11111111111100000";
    constant ap_const_lv17_1FFB8 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110111000";
    constant ap_const_lv23_57 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001010111";
    constant ap_const_lv23_A20 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000101000100000";
    constant ap_const_lv17_1FCA0 : STD_LOGIC_VECTOR (16 downto 0) := "11111110010100000";
    constant ap_const_lv32_FFFD2700 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111010010011100000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_150_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_410 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_162_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln13_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln13_1_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_1_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln13_1_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_1_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sub_ln13_fu_266_p2 : signal is "no";
    signal sub_ln13_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_2_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_2_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_2_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_2_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln13_3_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_3_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_122 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_133 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln10_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln13_fu_174_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_4_fu_186_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_198_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln13_7_fu_206_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_fu_210_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_220_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl11_cast_fu_228_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln13_10_fu_232_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln13_8_fu_238_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln13_fu_242_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln13_2_fu_252_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_346_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_355_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_382_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_391_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_14_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_2_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_11_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_1_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_10_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_10_fu_291_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_10_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_7_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_11_fu_301_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln13_9_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_12_fu_307_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_12_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_11_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_317_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_13_fu_321_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_13_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln13_1_fu_339_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_1_fu_339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_4_fu_186_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_391_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_391_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component poly6_mac_muladd_16s_20s_23ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly6_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly6_mac_muladd_16s_10ns_16s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component poly6_mac_muladd_16s_13ns_22s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component poly6_ama_addmuladd_16s_6s_16s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly6_am_addmul_16s_8s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component poly6_mac_muladd_16s_8ns_13ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component poly6_ama_addmuladd_16s_11s_16s_19s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    poly6_mac_muladd_16s_20s_23ns_32_1_1_U1 : component poly6_mac_muladd_16s_20s_23ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 20,
        din2_WIDTH => 23,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_331_p0,
        din1 => tmp_fu_210_p2,
        din2 => grp_fu_331_p2,
        dout => grp_fu_331_p3);

    poly6_mul_mul_16s_16s_32_1_1_U2 : component poly6_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln13_1_fu_339_p0,
        din1 => mul_ln13_1_fu_339_p1,
        dout => mul_ln13_1_fu_339_p2);

    poly6_mac_muladd_16s_10ns_16s_25_1_1_U3 : component poly6_mac_muladd_16s_10ns_16s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => c_q0,
        din1 => grp_fu_346_p1,
        din2 => grp_fu_346_p2,
        dout => grp_fu_346_p3);

    poly6_mac_muladd_16s_13ns_22s_28_1_1_U4 : component poly6_mac_muladd_16s_13ns_22s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 28)
    port map (
        din0 => c_q0,
        din1 => grp_fu_355_p1,
        din2 => grp_fu_355_p2,
        dout => grp_fu_355_p3);

    poly6_ama_addmuladd_16s_6s_16s_32s_32_1_1_U5 : component poly6_ama_addmuladd_16s_6s_16s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        din2 => grp_fu_364_p2,
        din3 => grp_fu_373_p3,
        dout => grp_fu_364_p4);

    poly6_am_addmul_16s_8s_16s_32_1_1_U6 : component poly6_am_addmul_16s_8s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        din2 => grp_fu_373_p2,
        dout => grp_fu_373_p3);

    poly6_mac_muladd_16s_8ns_13ns_23_1_1_U7 : component poly6_mac_muladd_16s_8ns_13ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 13,
        dout_WIDTH => 23)
    port map (
        din0 => c_q0,
        din1 => grp_fu_382_p1,
        din2 => grp_fu_382_p2,
        dout => grp_fu_382_p3);

    poly6_ama_addmuladd_16s_11s_16s_19s_32_1_1_U8 : component poly6_ama_addmuladd_16s_11s_16s_19s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 16,
        din3_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_391_p0,
        din1 => grp_fu_391_p1,
        din2 => grp_fu_391_p2,
        din3 => grp_fu_391_p3,
        dout => grp_fu_391_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_122 <= i_reg_410;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_122 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_133 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_0_reg_133 <= k_reg_418;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln13_5_reg_456 <= grp_fu_364_p4;
                mul_ln13_1_reg_451 <= mul_ln13_1_fu_339_p2;
                sext_ln13_1_reg_439 <= sext_ln13_1_fu_178_p1;
                sub_ln13_2_reg_466 <= sub_ln13_2_fu_277_p2;
                sub_ln13_reg_461 <= sub_ln13_fu_266_p2;
                tmp12_reg_471 <= grp_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_410 <= i_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_418 <= k_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln13_2_reg_476 <= sext_ln13_2_fu_283_p1;
                sub_ln13_3_reg_481 <= sub_ln13_3_fu_311_p2;
                tmp13_reg_486 <= tmp13_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln13_reg_423(6 downto 0) <= zext_ln13_fu_168_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_423(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln12_fu_156_p2, icmp_ln10_fu_144_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_address0 <= zext_ln13_reg_423(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_10_fu_232_p2 <= std_logic_vector(signed(p_shl11_cast_fu_228_p1) + signed(ap_const_lv18_3FE50));
    add_ln13_9_fu_295_p2 <= std_logic_vector(unsigned(mul_ln13_10_fu_291_p2) + unsigned(mul_ln13_7_fu_287_p2));
    add_ln13_fu_242_p2 <= std_logic_vector(signed(sext_ln13_7_fu_206_p1) + signed(sext_ln13_8_fu_238_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_r_q0;
    b_address0 <= zext_ln13_fu_168_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln13_fu_168_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p0 <= sext_ln13_fu_174_p1(16 - 1 downto 0);
    grp_fu_331_p2 <= ap_const_lv32_2D9000(23 - 1 downto 0);
    grp_fu_346_p1 <= ap_const_lv25_19E(10 - 1 downto 0);
    grp_fu_346_p2 <= ap_const_lv25_1FFAF00(16 - 1 downto 0);
    grp_fu_355_p1 <= ap_const_lv28_D80(13 - 1 downto 0);
    grp_fu_355_p2 <= ap_const_lv28_FE93800(22 - 1 downto 0);
    grp_fu_364_p0 <= sext_ln13_4_fu_186_p1(16 - 1 downto 0);
    grp_fu_364_p1 <= ap_const_lv17_1FFE0(6 - 1 downto 0);
    grp_fu_364_p2 <= sext_ln13_fu_174_p1(16 - 1 downto 0);
    grp_fu_373_p0 <= sext_ln13_4_fu_186_p1(16 - 1 downto 0);
    grp_fu_373_p1 <= ap_const_lv17_1FFB8(8 - 1 downto 0);
    grp_fu_373_p2 <= sext_ln13_1_fu_178_p1(16 - 1 downto 0);
    grp_fu_382_p1 <= ap_const_lv23_57(8 - 1 downto 0);
    grp_fu_382_p2 <= ap_const_lv23_A20(13 - 1 downto 0);
    grp_fu_391_p0 <= sext_ln13_4_fu_186_p1(16 - 1 downto 0);
    grp_fu_391_p1 <= ap_const_lv17_1FCA0(11 - 1 downto 0);
    grp_fu_391_p2 <= sext_ln13_1_fu_178_p1(16 - 1 downto 0);
    grp_fu_391_p3 <= ap_const_lv32_FFFD2700(19 - 1 downto 0);
    i_fu_150_p2 <= std_logic_vector(unsigned(i_0_reg_122) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_144_p2 <= "1" when (i_0_reg_122 = ap_const_lv7_64) else "0";
    icmp_ln12_fu_156_p2 <= "1" when (k_0_reg_133 = ap_const_lv7_64) else "0";
    k_fu_162_p2 <= std_logic_vector(unsigned(k_0_reg_133) + unsigned(ap_const_lv7_1));
    mul_ln13_10_fu_291_p0 <= sext_ln13_1_reg_439(16 - 1 downto 0);
    mul_ln13_10_fu_291_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_10_fu_291_p0) * signed(sub_ln13_reg_461))), 32));
    mul_ln13_11_fu_301_p0 <= a_q0;
    mul_ln13_11_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_11_fu_301_p0) * signed(add_ln13_9_fu_295_p2))), 32));
    mul_ln13_12_fu_307_p0 <= sext_ln13_1_reg_439(16 - 1 downto 0);
    mul_ln13_12_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_12_fu_307_p0) * signed(sub_ln13_2_reg_466))), 32));
    mul_ln13_13_fu_321_p0 <= sext_ln13_2_reg_476(16 - 1 downto 0);
    mul_ln13_13_fu_321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_13_fu_321_p0) * signed(sub_ln13_3_reg_481))), 32));
    mul_ln13_1_fu_339_p0 <= sext_ln13_fu_174_p1(16 - 1 downto 0);
    mul_ln13_1_fu_339_p1 <= sext_ln13_fu_174_p1(16 - 1 downto 0);
    mul_ln13_2_fu_252_p0 <= add_ln13_fu_242_p2;
    mul_ln13_2_fu_252_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln13_2_fu_252_p0) * signed(mul_ln13_1_fu_339_p2))), 32));
    mul_ln13_7_fu_287_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln13_5_reg_456) * signed(mul_ln13_1_reg_451))), 32));

    out_r_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln13_reg_423, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address0 <= zext_ln13_reg_423(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_r_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(unsigned(tmp13_reg_486) - unsigned(mul_ln13_13_fu_321_p2));

    out_r_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_shl11_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_220_p3),18));

    p_shl_fu_220_p1 <= b_q0;
    p_shl_fu_220_p3 <= (p_shl_fu_220_p1 & ap_const_lv1_0);
        sext_ln13_10_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_346_p3),32));

        sext_ln13_11_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_355_p3),32));

        sext_ln13_14_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_382_p3),32));

    sext_ln13_1_fu_178_p0 <= c_q0;
        sext_ln13_1_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_1_fu_178_p0),32));

        sext_ln13_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),32));

    sext_ln13_4_fu_186_p0 <= c_q0;
        sext_ln13_4_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_4_fu_186_p0),17));

        sext_ln13_7_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_198_p3),20));

        sext_ln13_8_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln13_10_fu_232_p2),20));

    sext_ln13_fu_174_p0 <= b_q0;
        sext_ln13_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_174_p0),32));

    shl_ln_fu_198_p1 <= b_q0;
    shl_ln_fu_198_p3 <= (shl_ln_fu_198_p1 & ap_const_lv3_0);
    sub_ln13_1_fu_271_p2 <= std_logic_vector(unsigned(mul_ln13_2_fu_252_p2) - unsigned(sext_ln13_11_fu_260_p1));
    sub_ln13_2_fu_277_p2 <= std_logic_vector(unsigned(sub_ln13_1_fu_271_p2) - unsigned(sext_ln13_10_fu_257_p1));
    sub_ln13_3_fu_311_p2 <= std_logic_vector(unsigned(mul_ln13_12_fu_307_p2) - unsigned(mul_ln13_11_fu_301_p2));
    sub_ln13_fu_266_p2 <= std_logic_vector(signed(grp_fu_391_p4) - signed(sext_ln13_14_fu_263_p1));
    tmp13_fu_317_p0 <= sext_ln13_1_reg_439(16 - 1 downto 0);
    tmp13_fu_317_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp13_fu_317_p0) * signed(tmp12_reg_471))), 32));
    tmp_fu_210_p2 <= std_logic_vector(signed(sext_ln13_7_fu_206_p1) + signed(ap_const_lv20_1ECC0));
    zext_ln13_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_133),64));
end behav;
