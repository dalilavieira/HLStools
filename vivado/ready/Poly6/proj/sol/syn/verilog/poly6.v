// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poly6,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.678000,HLS_SYN_LAT=40202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=23,HLS_SYN_FF=330,HLS_SYN_LUT=500,HLS_VERSION=2019_1}" *)

module poly6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg[6:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_150_p2;
reg   [6:0] i_reg_410;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_162_p2;
reg   [6:0] k_reg_418;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln13_fu_168_p1;
reg   [63:0] zext_ln13_reg_423;
wire   [0:0] icmp_ln12_fu_156_p2;
wire  signed [31:0] sext_ln13_1_fu_178_p1;
reg  signed [31:0] sext_ln13_1_reg_439;
wire    ap_CS_fsm_state4;
wire  signed [31:0] mul_ln13_1_fu_339_p2;
reg  signed [31:0] mul_ln13_1_reg_451;
wire  signed [31:0] grp_fu_364_p4;
reg  signed [31:0] add_ln13_5_reg_456;
(* use_dsp48 = "no" *) wire  signed [31:0] sub_ln13_fu_266_p2;
reg  signed [31:0] sub_ln13_reg_461;
wire  signed [31:0] sub_ln13_2_fu_277_p2;
reg  signed [31:0] sub_ln13_2_reg_466;
wire  signed [31:0] grp_fu_331_p3;
reg  signed [31:0] tmp12_reg_471;
wire  signed [31:0] sext_ln13_2_fu_283_p1;
reg  signed [31:0] sext_ln13_2_reg_476;
wire    ap_CS_fsm_state5;
wire  signed [31:0] sub_ln13_3_fu_311_p2;
reg  signed [31:0] sub_ln13_3_reg_481;
wire   [31:0] tmp13_fu_317_p2;
reg   [31:0] tmp13_reg_486;
reg   [6:0] i_0_reg_122;
reg   [6:0] k_0_reg_133;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln10_fu_144_p2;
wire  signed [15:0] sext_ln13_fu_174_p0;
wire  signed [15:0] sext_ln13_1_fu_178_p0;
wire  signed [15:0] sext_ln13_4_fu_186_p0;
wire  signed [15:0] shl_ln_fu_198_p1;
wire   [18:0] shl_ln_fu_198_p3;
wire  signed [19:0] sext_ln13_7_fu_206_p1;
wire  signed [19:0] tmp_fu_210_p2;
wire  signed [15:0] p_shl_fu_220_p1;
wire   [16:0] p_shl_fu_220_p3;
wire  signed [17:0] p_shl11_cast_fu_228_p1;
wire   [17:0] add_ln13_10_fu_232_p2;
wire  signed [19:0] sext_ln13_8_fu_238_p1;
wire   [19:0] add_ln13_fu_242_p2;
wire  signed [19:0] mul_ln13_2_fu_252_p0;
wire  signed [24:0] grp_fu_346_p3;
wire  signed [27:0] grp_fu_355_p3;
wire  signed [22:0] grp_fu_382_p3;
wire  signed [31:0] grp_fu_391_p4;
wire  signed [31:0] sext_ln13_14_fu_263_p1;
wire   [31:0] mul_ln13_2_fu_252_p2;
wire  signed [31:0] sext_ln13_11_fu_260_p1;
wire   [31:0] sub_ln13_1_fu_271_p2;
wire  signed [31:0] sext_ln13_10_fu_257_p1;
wire  signed [15:0] mul_ln13_10_fu_291_p0;
wire   [31:0] mul_ln13_10_fu_291_p2;
wire   [31:0] mul_ln13_7_fu_287_p2;
wire  signed [15:0] mul_ln13_11_fu_301_p0;
wire  signed [31:0] add_ln13_9_fu_295_p2;
wire  signed [15:0] mul_ln13_12_fu_307_p0;
wire   [31:0] mul_ln13_12_fu_307_p2;
wire   [31:0] mul_ln13_11_fu_301_p2;
wire  signed [15:0] tmp13_fu_317_p0;
wire  signed [15:0] mul_ln13_13_fu_321_p0;
wire   [31:0] mul_ln13_13_fu_321_p2;
wire  signed [15:0] grp_fu_331_p0;
wire  signed [31:0] sext_ln13_fu_174_p1;
wire   [22:0] grp_fu_331_p2;
wire  signed [15:0] mul_ln13_1_fu_339_p0;
wire  signed [15:0] mul_ln13_1_fu_339_p1;
wire   [9:0] grp_fu_346_p1;
wire  signed [15:0] grp_fu_346_p2;
wire   [12:0] grp_fu_355_p1;
wire  signed [21:0] grp_fu_355_p2;
wire  signed [15:0] grp_fu_364_p0;
wire  signed [16:0] sext_ln13_4_fu_186_p1;
wire  signed [5:0] grp_fu_364_p1;
wire  signed [15:0] grp_fu_364_p2;
wire  signed [31:0] grp_fu_373_p3;
wire  signed [15:0] grp_fu_373_p0;
wire  signed [7:0] grp_fu_373_p1;
wire  signed [15:0] grp_fu_373_p2;
wire   [7:0] grp_fu_382_p1;
wire   [12:0] grp_fu_382_p2;
wire  signed [15:0] grp_fu_391_p0;
wire  signed [10:0] grp_fu_391_p1;
wire  signed [15:0] grp_fu_391_p2;
wire  signed [18:0] grp_fu_391_p3;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

poly6_mac_muladd_16s_20s_23ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 32 ))
poly6_mac_muladd_16s_20s_23ns_32_1_1_U1(
    .din0(grp_fu_331_p0),
    .din1(tmp_fu_210_p2),
    .din2(grp_fu_331_p2),
    .dout(grp_fu_331_p3)
);

poly6_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly6_mul_mul_16s_16s_32_1_1_U2(
    .din0(mul_ln13_1_fu_339_p0),
    .din1(mul_ln13_1_fu_339_p1),
    .dout(mul_ln13_1_fu_339_p2)
);

poly6_mac_muladd_16s_10ns_16s_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 25 ))
poly6_mac_muladd_16s_10ns_16s_25_1_1_U3(
    .din0(c_q0),
    .din1(grp_fu_346_p1),
    .din2(grp_fu_346_p2),
    .dout(grp_fu_346_p3)
);

poly6_mac_muladd_16s_13ns_22s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 28 ))
poly6_mac_muladd_16s_13ns_22s_28_1_1_U4(
    .din0(c_q0),
    .din1(grp_fu_355_p1),
    .din2(grp_fu_355_p2),
    .dout(grp_fu_355_p3)
);

poly6_ama_addmuladd_16s_6s_16s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly6_ama_addmuladd_16s_6s_16s_32s_32_1_1_U5(
    .din0(grp_fu_364_p0),
    .din1(grp_fu_364_p1),
    .din2(grp_fu_364_p2),
    .din3(grp_fu_373_p3),
    .dout(grp_fu_364_p4)
);

poly6_am_addmul_16s_8s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly6_am_addmul_16s_8s_16s_32_1_1_U6(
    .din0(grp_fu_373_p0),
    .din1(grp_fu_373_p1),
    .din2(grp_fu_373_p2),
    .dout(grp_fu_373_p3)
);

poly6_mac_muladd_16s_8ns_13ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 23 ))
poly6_mac_muladd_16s_8ns_13ns_23_1_1_U7(
    .din0(c_q0),
    .din1(grp_fu_382_p1),
    .din2(grp_fu_382_p2),
    .dout(grp_fu_382_p3)
);

poly6_ama_addmuladd_16s_11s_16s_19s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
poly6_ama_addmuladd_16s_11s_16s_19s_32_1_1_U8(
    .din0(grp_fu_391_p0),
    .din1(grp_fu_391_p1),
    .din2(grp_fu_391_p2),
    .din3(grp_fu_391_p3),
    .dout(grp_fu_391_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_122 <= i_reg_410;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_122 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_133 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_reg_133 <= k_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_5_reg_456 <= grp_fu_364_p4;
        mul_ln13_1_reg_451 <= mul_ln13_1_fu_339_p2;
        sext_ln13_1_reg_439 <= sext_ln13_1_fu_178_p1;
        sub_ln13_2_reg_466 <= sub_ln13_2_fu_277_p2;
        sub_ln13_reg_461 <= sub_ln13_fu_266_p2;
        tmp12_reg_471 <= grp_fu_331_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_410 <= i_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_418 <= k_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln13_2_reg_476 <= sext_ln13_2_fu_283_p1;
        sub_ln13_3_reg_481 <= sub_ln13_3_fu_311_p2;
        tmp13_reg_486 <= tmp13_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln13_reg_423[6 : 0] <= zext_ln13_fu_168_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_address0 = zext_ln13_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln13_reg_423;

assign add_ln13_10_fu_232_p2 = ($signed(p_shl11_cast_fu_228_p1) + $signed(18'd261712));

assign add_ln13_9_fu_295_p2 = (mul_ln13_10_fu_291_p2 + mul_ln13_7_fu_287_p2);

assign add_ln13_fu_242_p2 = ($signed(sext_ln13_7_fu_206_p1) + $signed(sext_ln13_8_fu_238_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = out_r_q0;

assign b_address0 = zext_ln13_fu_168_p1;

assign c_address0 = zext_ln13_fu_168_p1;

assign grp_fu_331_p0 = sext_ln13_fu_174_p1;

assign grp_fu_331_p2 = 32'd2985984;

assign grp_fu_346_p1 = 25'd414;

assign grp_fu_346_p2 = 25'd33533696;

assign grp_fu_355_p1 = 28'd3456;

assign grp_fu_355_p2 = 28'd266942464;

assign grp_fu_364_p0 = sext_ln13_4_fu_186_p1;

assign grp_fu_364_p1 = 17'd131040;

assign grp_fu_364_p2 = sext_ln13_fu_174_p1;

assign grp_fu_373_p0 = sext_ln13_4_fu_186_p1;

assign grp_fu_373_p1 = 17'd131000;

assign grp_fu_373_p2 = sext_ln13_1_fu_178_p1;

assign grp_fu_382_p1 = 23'd87;

assign grp_fu_382_p2 = 23'd2592;

assign grp_fu_391_p0 = sext_ln13_4_fu_186_p1;

assign grp_fu_391_p1 = 17'd130208;

assign grp_fu_391_p2 = sext_ln13_1_fu_178_p1;

assign grp_fu_391_p3 = 32'd4294780672;

assign i_fu_150_p2 = (i_0_reg_122 + 7'd1);

assign icmp_ln10_fu_144_p2 = ((i_0_reg_122 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_156_p2 = ((k_0_reg_133 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_162_p2 = (k_0_reg_133 + 7'd1);

assign mul_ln13_10_fu_291_p0 = sext_ln13_1_reg_439;

assign mul_ln13_10_fu_291_p2 = ($signed(mul_ln13_10_fu_291_p0) * $signed(sub_ln13_reg_461));

assign mul_ln13_11_fu_301_p0 = a_q0;

assign mul_ln13_11_fu_301_p2 = ($signed(mul_ln13_11_fu_301_p0) * $signed(add_ln13_9_fu_295_p2));

assign mul_ln13_12_fu_307_p0 = sext_ln13_1_reg_439;

assign mul_ln13_12_fu_307_p2 = ($signed(mul_ln13_12_fu_307_p0) * $signed(sub_ln13_2_reg_466));

assign mul_ln13_13_fu_321_p0 = sext_ln13_2_reg_476;

assign mul_ln13_13_fu_321_p2 = ($signed(mul_ln13_13_fu_321_p0) * $signed(sub_ln13_3_reg_481));

assign mul_ln13_1_fu_339_p0 = sext_ln13_fu_174_p1;

assign mul_ln13_1_fu_339_p1 = sext_ln13_fu_174_p1;

assign mul_ln13_2_fu_252_p0 = add_ln13_fu_242_p2;

assign mul_ln13_2_fu_252_p2 = ($signed(mul_ln13_2_fu_252_p0) * $signed(mul_ln13_1_fu_339_p2));

assign mul_ln13_7_fu_287_p2 = ($signed(add_ln13_5_reg_456) * $signed(mul_ln13_1_reg_451));

assign out_r_d0 = (tmp13_reg_486 - mul_ln13_13_fu_321_p2);

assign p_shl11_cast_fu_228_p1 = $signed(p_shl_fu_220_p3);

assign p_shl_fu_220_p1 = b_q0;

assign p_shl_fu_220_p3 = {{p_shl_fu_220_p1}, {1'd0}};

assign sext_ln13_10_fu_257_p1 = grp_fu_346_p3;

assign sext_ln13_11_fu_260_p1 = grp_fu_355_p3;

assign sext_ln13_14_fu_263_p1 = grp_fu_382_p3;

assign sext_ln13_1_fu_178_p0 = c_q0;

assign sext_ln13_1_fu_178_p1 = sext_ln13_1_fu_178_p0;

assign sext_ln13_2_fu_283_p1 = $signed(a_q0);

assign sext_ln13_4_fu_186_p0 = c_q0;

assign sext_ln13_4_fu_186_p1 = sext_ln13_4_fu_186_p0;

assign sext_ln13_7_fu_206_p1 = $signed(shl_ln_fu_198_p3);

assign sext_ln13_8_fu_238_p1 = $signed(add_ln13_10_fu_232_p2);

assign sext_ln13_fu_174_p0 = b_q0;

assign sext_ln13_fu_174_p1 = sext_ln13_fu_174_p0;

assign shl_ln_fu_198_p1 = b_q0;

assign shl_ln_fu_198_p3 = {{shl_ln_fu_198_p1}, {3'd0}};

assign sub_ln13_1_fu_271_p2 = ($signed(mul_ln13_2_fu_252_p2) - $signed(sext_ln13_11_fu_260_p1));

assign sub_ln13_2_fu_277_p2 = ($signed(sub_ln13_1_fu_271_p2) - $signed(sext_ln13_10_fu_257_p1));

assign sub_ln13_3_fu_311_p2 = (mul_ln13_12_fu_307_p2 - mul_ln13_11_fu_301_p2);

assign sub_ln13_fu_266_p2 = ($signed(grp_fu_391_p4) - $signed(sext_ln13_14_fu_263_p1));

assign tmp13_fu_317_p0 = sext_ln13_1_reg_439;

assign tmp13_fu_317_p2 = ($signed(tmp13_fu_317_p0) * $signed(tmp12_reg_471));

assign tmp_fu_210_p2 = ($signed(sext_ln13_7_fu_206_p1) + $signed(20'd126144));

assign zext_ln13_fu_168_p1 = k_0_reg_133;

always @ (posedge ap_clk) begin
    zext_ln13_reg_423[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //poly6
