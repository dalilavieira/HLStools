// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poly6,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.300500,HLS_SYN_LAT=24343740621,HLS_SYN_TPT=none,HLS_SYN_MEM=53248,HLS_SYN_DSP=29,HLS_SYN_FF=3522,HLS_SYN_LUT=1001,HLS_VERSION=2019_1}" *)

module poly6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        ap_return
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [23:0] k_fu_220_p2;
reg   [23:0] k_reg_496;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_214_p2;
wire   [6:0] i_fu_240_p2;
reg   [6:0] i_reg_524;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln43_fu_234_p2;
wire   [23:0] k_1_fu_256_p2;
reg   [23:0] k_1_reg_537;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln46_fu_262_p1;
reg   [63:0] zext_ln46_reg_542;
wire   [0:0] icmp_ln45_fu_250_p2;
wire   [23:0] b_q0;
reg   [23:0] b_load_reg_558;
wire    ap_CS_fsm_state8;
wire   [23:0] c_q0;
reg   [23:0] c_load_reg_565;
wire   [24:0] add_ln46_3_fu_272_p2;
reg  signed [24:0] add_ln46_3_reg_571;
wire   [24:0] add_ln46_4_fu_278_p2;
reg  signed [24:0] add_ln46_4_reg_576;
wire   [24:0] add_ln46_7_fu_284_p2;
reg  signed [24:0] add_ln46_7_reg_581;
wire   [31:0] zext_ln46_1_fu_290_p1;
reg   [31:0] zext_ln46_1_reg_586;
wire    ap_CS_fsm_state9;
wire   [31:0] zext_ln46_2_fu_293_p1;
reg   [31:0] zext_ln46_2_reg_594;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_299_p2;
reg   [31:0] mul_ln46_5_reg_625;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] mul_ln46_6_reg_630;
wire   [30:0] grp_fu_466_p3;
reg   [30:0] add_ln46_6_reg_635;
wire   [31:0] grp_fu_317_p2;
reg   [31:0] mul_ln46_9_reg_640;
wire   [27:0] tmp_fu_345_p2;
reg   [27:0] tmp_reg_645;
wire    ap_CS_fsm_state13;
wire   [28:0] add_ln46_fu_372_p2;
reg  signed [28:0] add_ln46_reg_650;
wire  signed [31:0] grp_fu_323_p2;
reg  signed [31:0] mul_ln46_1_reg_655;
wire  signed [31:0] add_ln46_5_fu_378_p2;
reg  signed [31:0] add_ln46_5_reg_661;
wire  signed [31:0] sub_ln46_fu_390_p2;
reg  signed [31:0] sub_ln46_reg_666;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_399_p2;
reg   [31:0] mul_ln46_reg_686;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_407_p2;
reg   [31:0] mul_ln46_2_reg_691;
wire  signed [31:0] grp_fu_474_p3;
reg  signed [31:0] add_ln46_1_reg_696;
wire  signed [31:0] grp_fu_481_p3;
reg  signed [31:0] add_ln46_2_reg_701;
wire   [31:0] grp_fu_412_p2;
reg   [31:0] mul_ln46_7_reg_706;
wire   [31:0] grp_fu_416_p2;
reg   [31:0] mul_ln46_10_reg_711;
wire   [23:0] a_q0;
reg   [23:0] a_load_reg_716;
wire    ap_CS_fsm_state19;
wire  signed [31:0] add_ln46_9_fu_420_p2;
reg  signed [31:0] add_ln46_9_reg_721;
(* use_dsp48 = "no" *) wire  signed [31:0] sub_ln46_2_fu_428_p2;
reg  signed [31:0] sub_ln46_2_reg_726;
wire  signed [31:0] tmp13_fu_433_p2;
reg  signed [31:0] tmp13_reg_731;
wire   [31:0] zext_ln46_6_fu_438_p1;
reg   [31:0] zext_ln46_6_reg_736;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] mul_ln46_11_reg_742;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] mul_ln46_12_reg_747;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] tmp14_reg_752;
wire  signed [31:0] sub_ln46_3_fu_454_p2;
reg  signed [31:0] sub_ln46_3_reg_757;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_458_p2;
reg   [31:0] mul_ln46_13_reg_762;
wire    ap_CS_fsm_state30;
wire   [31:0] sub_ln46_4_fu_462_p2;
reg   [31:0] sub_ln46_4_reg_767;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg   [22:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [22:0] b_address0;
reg    b_ce0;
reg    b_we0;
reg   [22:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [22:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [31:0] out_d0;
wire   [31:0] out_q0;
reg   [23:0] k_0_reg_174;
wire    ap_CS_fsm_state3;
reg   [6:0] i_0_reg_192;
reg   [23:0] k1_0_reg_203;
wire    ap_CS_fsm_state33;
wire   [63:0] zext_ln34_fu_226_p1;
wire  signed [63:0] sext_ln73_fu_246_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire   [24:0] zext_ln46_3_fu_268_p1;
wire   [23:0] grp_fu_299_p1;
wire   [23:0] grp_fu_308_p1;
wire   [23:0] grp_fu_317_p1;
wire   [23:0] grp_fu_323_p0;
wire   [23:0] grp_fu_323_p1;
wire   [26:0] shl_ln_fu_330_p3;
wire   [27:0] zext_ln46_5_fu_341_p1;
wire   [24:0] p_shl4_fu_351_p3;
wire   [25:0] p_shl4_cast_fu_358_p1;
wire   [25:0] add_ln46_10_fu_362_p2;
wire   [28:0] zext_ln46_4_fu_337_p1;
wire  signed [28:0] sext_ln46_fu_368_p1;
wire   [31:0] add_ln46_8_fu_385_p2;
wire   [31:0] zext_ln46_8_fu_382_p1;
wire   [27:0] grp_fu_399_p0;
wire   [23:0] grp_fu_399_p1;
wire   [23:0] grp_fu_416_p1;
(* use_dsp48 = "no" *) wire   [31:0] sub_ln46_1_fu_424_p2;
wire   [23:0] grp_fu_441_p1;
wire   [23:0] grp_fu_446_p1;
wire   [23:0] grp_fu_450_p1;
wire   [23:0] grp_fu_458_p1;
wire    ap_CS_fsm_state26;
wire   [23:0] grp_fu_466_p0;
wire   [7:0] grp_fu_466_p1;
wire   [12:0] grp_fu_466_p2;
wire   [23:0] grp_fu_474_p0;
wire   [9:0] grp_fu_474_p1;
wire  signed [15:0] grp_fu_474_p2;
wire   [23:0] grp_fu_481_p0;
wire   [12:0] grp_fu_481_p1;
wire  signed [21:0] grp_fu_481_p2;
reg   [35:0] ap_NS_fsm;
wire   [31:0] grp_fu_299_p10;
wire   [31:0] grp_fu_399_p00;
wire   [31:0] grp_fu_441_p10;
wire   [30:0] grp_fu_466_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

poly6_a #(
    .DataWidth( 24 ),
    .AddressRange( 8388608 ),
    .AddressWidth( 23 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(k_0_reg_174),
    .q0(a_q0)
);

poly6_a #(
    .DataWidth( 24 ),
    .AddressRange( 8388608 ),
    .AddressWidth( 23 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(k_0_reg_174),
    .q0(b_q0)
);

poly6_a #(
    .DataWidth( 24 ),
    .AddressRange( 8388608 ),
    .AddressWidth( 23 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(k_0_reg_174),
    .q0(c_q0)
);

poly6_out #(
    .DataWidth( 32 ),
    .AddressRange( 8388608 ),
    .AddressWidth( 23 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(out_d0),
    .q0(out_q0)
);

poly6_mul_25s_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_25s_24ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_3_reg_571),
    .din1(grp_fu_299_p1),
    .ce(1'b1),
    .dout(grp_fu_299_p2)
);

poly6_mul_25s_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_25s_24ns_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_4_reg_576),
    .din1(grp_fu_308_p1),
    .ce(1'b1),
    .dout(grp_fu_308_p2)
);

poly6_mul_25s_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_25s_24ns_32_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_7_reg_581),
    .din1(grp_fu_317_p1),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

poly6_mul_24ns_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_24ns_24ns_32_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

poly6_mul_28ns_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_28ns_24ns_32_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

poly6_mul_29s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly6_mul_29s_32s_32_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_reg_650),
    .din1(mul_ln46_1_reg_655),
    .ce(1'b1),
    .dout(grp_fu_407_p2)
);

poly6_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_32s_32_5_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_5_reg_661),
    .din1(mul_ln46_1_reg_655),
    .ce(1'b1),
    .dout(grp_fu_412_p2)
);

poly6_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_24ns_32_5_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln46_reg_666),
    .din1(grp_fu_416_p1),
    .ce(1'b1),
    .dout(grp_fu_416_p2)
);

poly6_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_24ns_32_5_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln46_9_reg_721),
    .din1(grp_fu_441_p1),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

poly6_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_24ns_32_5_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln46_2_reg_726),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

poly6_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_24ns_32_5_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp13_reg_731),
    .din1(grp_fu_450_p1),
    .ce(1'b1),
    .dout(grp_fu_450_p2)
);

poly6_mul_32s_24ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
poly6_mul_32s_24ns_32_5_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln46_3_reg_757),
    .din1(grp_fu_458_p1),
    .ce(1'b1),
    .dout(grp_fu_458_p2)
);

poly6_mac_muladd_24ns_8ns_13ns_31_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 31 ))
poly6_mac_muladd_24ns_8ns_13ns_31_3_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_466_p0),
    .din1(grp_fu_466_p1),
    .din2(grp_fu_466_p2),
    .ce(1'b1),
    .dout(grp_fu_466_p3)
);

poly6_mac_muladd_24ns_10ns_16s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly6_mac_muladd_24ns_10ns_16s_32_3_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_474_p0),
    .din1(grp_fu_474_p1),
    .din2(grp_fu_474_p2),
    .ce(1'b1),
    .dout(grp_fu_474_p3)
);

poly6_mac_muladd_24ns_13ns_22s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 32 ))
poly6_mac_muladd_24ns_13ns_22s_32_3_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_481_p0),
    .din1(grp_fu_481_p1),
    .din2(grp_fu_481_p2),
    .ce(1'b1),
    .dout(grp_fu_481_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_192 <= 7'd0;
    end else if (((icmp_ln45_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_192 <= i_reg_524;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k1_0_reg_203 <= 24'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        k1_0_reg_203 <= k_1_reg_537;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_reg_174 <= k_reg_496;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_174 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        a_load_reg_716 <= a_q0;
        add_ln46_9_reg_721 <= add_ln46_9_fu_420_p2;
        sub_ln46_2_reg_726 <= sub_ln46_2_fu_428_p2;
        tmp13_reg_731 <= tmp13_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln46_1_reg_696 <= grp_fu_474_p3;
        add_ln46_2_reg_701 <= grp_fu_481_p3;
        mul_ln46_10_reg_711 <= grp_fu_416_p2;
        mul_ln46_2_reg_691 <= grp_fu_407_p2;
        mul_ln46_7_reg_706 <= grp_fu_412_p2;
        mul_ln46_reg_686 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln46_3_reg_571 <= add_ln46_3_fu_272_p2;
        add_ln46_4_reg_576 <= add_ln46_4_fu_278_p2;
        add_ln46_7_reg_581 <= add_ln46_7_fu_284_p2;
        b_load_reg_558 <= b_q0;
        c_load_reg_565 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln46_5_reg_661 <= add_ln46_5_fu_378_p2;
        add_ln46_reg_650[28 : 1] <= add_ln46_fu_372_p2[28 : 1];
        mul_ln46_1_reg_655 <= grp_fu_323_p2;
        sub_ln46_reg_666 <= sub_ln46_fu_390_p2;
        tmp_reg_645[27 : 3] <= tmp_fu_345_p2[27 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln46_6_reg_635 <= grp_fu_466_p3;
        mul_ln46_5_reg_625 <= grp_fu_299_p2;
        mul_ln46_6_reg_630 <= grp_fu_308_p2;
        mul_ln46_9_reg_640 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_524 <= i_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_537 <= k_1_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_496 <= k_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln46_11_reg_742 <= grp_fu_441_p2;
        mul_ln46_12_reg_747 <= grp_fu_446_p2;
        tmp14_reg_752 <= grp_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mul_ln46_13_reg_762 <= grp_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sub_ln46_3_reg_757 <= sub_ln46_3_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        sub_ln46_4_reg_767 <= sub_ln46_4_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        zext_ln46_1_reg_586[23 : 0] <= zext_ln46_1_fu_290_p1[23 : 0];
        zext_ln46_2_reg_594[23 : 0] <= zext_ln46_2_fu_293_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        zext_ln46_6_reg_736[23 : 0] <= zext_ln46_6_fu_438_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln46_reg_542[23 : 0] <= zext_ln46_fu_262_p1[23 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        a_address0 = zext_ln46_reg_542;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = zext_ln34_fu_226_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = zext_ln46_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = zext_ln34_fu_226_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln46_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = zext_ln34_fu_226_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        out_address0 = zext_ln46_reg_542;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_address0 = sext_ln73_fu_246_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_address0 = zext_ln34_fu_226_p1;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state32))) begin
        out_ce0 = 1'b1;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        out_d0 = sub_ln46_4_reg_767;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d0 = 32'd0;
    end else begin
        out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | ((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_we0 = 1'b1;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln43_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln45_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_10_fu_362_p2 = ($signed(p_shl4_cast_fu_358_p1) + $signed(26'd67108432));

assign add_ln46_3_fu_272_p2 = ($signed(zext_ln46_3_fu_268_p1) + $signed(25'd33554400));

assign add_ln46_4_fu_278_p2 = ($signed(zext_ln46_3_fu_268_p1) + $signed(25'd33554360));

assign add_ln46_5_fu_378_p2 = (mul_ln46_6_reg_630 + mul_ln46_5_reg_625);

assign add_ln46_7_fu_284_p2 = ($signed(zext_ln46_3_fu_268_p1) + $signed(25'd33553568));

assign add_ln46_8_fu_385_p2 = ($signed(mul_ln46_9_reg_640) + $signed(32'd4294780672));

assign add_ln46_9_fu_420_p2 = (mul_ln46_10_reg_711 + mul_ln46_7_reg_706);

assign add_ln46_fu_372_p2 = ($signed(zext_ln46_4_fu_337_p1) + $signed(sext_ln46_fu_368_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = out_q0;

assign grp_fu_299_p1 = grp_fu_299_p10;

assign grp_fu_299_p10 = b_load_reg_558;

assign grp_fu_308_p1 = zext_ln46_2_fu_293_p1;

assign grp_fu_317_p1 = zext_ln46_2_fu_293_p1;

assign grp_fu_323_p0 = zext_ln46_1_reg_586;

assign grp_fu_323_p1 = zext_ln46_1_reg_586;

assign grp_fu_399_p0 = grp_fu_399_p00;

assign grp_fu_399_p00 = tmp_reg_645;

assign grp_fu_399_p1 = zext_ln46_1_reg_586;

assign grp_fu_416_p1 = zext_ln46_2_reg_594;

assign grp_fu_441_p1 = grp_fu_441_p10;

assign grp_fu_441_p10 = a_load_reg_716;

assign grp_fu_446_p1 = zext_ln46_2_reg_594;

assign grp_fu_450_p1 = zext_ln46_2_reg_594;

assign grp_fu_458_p1 = zext_ln46_6_reg_736;

assign grp_fu_466_p0 = grp_fu_466_p00;

assign grp_fu_466_p00 = c_load_reg_565;

assign grp_fu_466_p1 = 31'd87;

assign grp_fu_466_p2 = 31'd2592;

assign grp_fu_474_p0 = zext_ln46_2_reg_594;

assign grp_fu_474_p1 = 32'd414;

assign grp_fu_474_p2 = 32'd4294946560;

assign grp_fu_481_p0 = zext_ln46_2_reg_594;

assign grp_fu_481_p1 = 32'd3456;

assign grp_fu_481_p2 = 32'd4293474304;

assign i_fu_240_p2 = (i_0_reg_192 + 7'd1);

assign icmp_ln33_fu_214_p2 = ((k_0_reg_174 == 24'd8388608) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_234_p2 = ((i_0_reg_192 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_250_p2 = ((k1_0_reg_203 == 24'd8388608) ? 1'b1 : 1'b0);

assign k_1_fu_256_p2 = (k1_0_reg_203 + 24'd1);

assign k_fu_220_p2 = (k_0_reg_174 + 24'd1);

assign p_shl4_cast_fu_358_p1 = p_shl4_fu_351_p3;

assign p_shl4_fu_351_p3 = {{b_load_reg_558}, {1'd0}};

assign sext_ln46_fu_368_p1 = $signed(add_ln46_10_fu_362_p2);

assign sext_ln73_fu_246_p1 = $signed(idx);

assign shl_ln_fu_330_p3 = {{b_load_reg_558}, {3'd0}};

assign sub_ln46_1_fu_424_p2 = ($signed(mul_ln46_2_reg_691) - $signed(add_ln46_2_reg_701));

assign sub_ln46_2_fu_428_p2 = ($signed(sub_ln46_1_fu_424_p2) - $signed(add_ln46_1_reg_696));

assign sub_ln46_3_fu_454_p2 = (mul_ln46_12_reg_747 - mul_ln46_11_reg_742);

assign sub_ln46_4_fu_462_p2 = (tmp14_reg_752 - mul_ln46_13_reg_762);

assign sub_ln46_fu_390_p2 = (add_ln46_8_fu_385_p2 - zext_ln46_8_fu_382_p1);

assign tmp13_fu_433_p2 = (mul_ln46_reg_686 + 32'd2985984);

assign tmp_fu_345_p2 = (zext_ln46_5_fu_341_p1 + 28'd126144);

assign zext_ln34_fu_226_p1 = k_0_reg_174;

assign zext_ln46_1_fu_290_p1 = b_load_reg_558;

assign zext_ln46_2_fu_293_p1 = c_load_reg_565;

assign zext_ln46_3_fu_268_p1 = c_q0;

assign zext_ln46_4_fu_337_p1 = shl_ln_fu_330_p3;

assign zext_ln46_5_fu_341_p1 = shl_ln_fu_330_p3;

assign zext_ln46_6_fu_438_p1 = a_load_reg_716;

assign zext_ln46_8_fu_382_p1 = add_ln46_6_reg_635;

assign zext_ln46_fu_262_p1 = k1_0_reg_203;

always @ (posedge ap_clk) begin
    zext_ln46_reg_542[63:24] <= 40'b0000000000000000000000000000000000000000;
    zext_ln46_1_reg_586[31:24] <= 8'b00000000;
    zext_ln46_2_reg_594[31:24] <= 8'b00000000;
    tmp_reg_645[2:0] <= 3'b000;
    add_ln46_reg_650[0] <= 1'b0;
    zext_ln46_6_reg_736[31:24] <= 8'b00000000;
end

endmodule //poly6
