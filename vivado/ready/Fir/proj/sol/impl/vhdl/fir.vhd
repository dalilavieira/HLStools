-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    coef_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    coef_ce0 : OUT STD_LOGIC;
    coef_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    taps : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.454000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40960,HLS_SYN_DSP=1,HLS_SYN_FF=353,HLS_SYN_LUT=452,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_fu_193_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_reg_315 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln41_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_1_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_1_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_338 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln49_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_fu_236_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_reg_356 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_1_fu_251_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_1_reg_364 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln53_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_reg_384 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal data_in_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_in_ce0 : STD_LOGIC;
    signal data_in_we0 : STD_LOGIC;
    signal data_in_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_out_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_out_ce0 : STD_LOGIC;
    signal data_out_we0 : STD_LOGIC;
    signal data_out_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_0_reg_125 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_139 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln51_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_150 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal fir_0_reg_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal k1_0_reg_176 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln42_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln65_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_1_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln53_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln54_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component fir_mac_muladd_16s_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_data_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component fir_data_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    data_in_U : component fir_data_in
    generic map (
        DataWidth => 24,
        AddressRange => 8388708,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_in_address0,
        ce0 => data_in_ce0,
        we0 => data_in_we0,
        d0 => k_0_reg_125,
        q0 => data_in_q0);

    data_out_U : component fir_data_out
    generic map (
        DataWidth => 16,
        AddressRange => 8388708,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_out_address0,
        ce0 => data_out_ce0,
        we0 => data_out_we0,
        d0 => data_out_d0,
        q0 => data_out_q0);

    fir_mac_muladd_16s_16s_16ns_16_1_1_U1 : component fir_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => trunc_ln54_reg_384,
        din1 => grp_fu_294_p1,
        din2 => fir_0_reg_162,
        dout => grp_fu_294_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    fir_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                fir_0_reg_162 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                fir_0_reg_162 <= grp_fu_294_p3;
            end if; 
        end if;
    end process;

    i_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_139 <= i_reg_338;
            elsif (((icmp_ln41_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_139 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_150 <= ap_const_lv24_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_150 <= j_reg_356;
            end if; 
        end if;
    end process;

    k1_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k1_0_reg_176 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k1_0_reg_176 <= k_1_reg_364;
            end if; 
        end if;
    end process;

    k_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_0_reg_125 <= k_reg_315;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_125 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln54_1_reg_330 <= add_ln54_1_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_338 <= i_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_356 <= j_fu_236_p2;
                    zext_ln51_reg_348(23 downto 0) <= zext_ln51_fu_226_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_1_reg_364 <= k_1_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_315 <= k_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln54_reg_384 <= trunc_ln54_fu_282_p1;
            end if;
        end if;
    end process;
    zext_ln51_reg_348(31 downto 24) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_187_p2, ap_CS_fsm_state4, icmp_ln49_fu_210_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln53_fu_246_p2, icmp_ln51_fu_230_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln49_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln51_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln53_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln54_1_fu_205_p2 <= std_logic_vector(unsigned(taps) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln54_fu_257_p2 <= std_logic_vector(unsigned(zext_ln53_fu_242_p1) + unsigned(zext_ln51_reg_348));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_out_q0),32));
    coef_address0 <= sext_ln54_1_fu_272_p1(7 - 1 downto 0);

    coef_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ce0 <= ap_const_logic_1;
        else 
            coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln42_fu_199_p1, sext_ln54_fu_262_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_in_address0 <= sext_ln54_fu_262_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_address0 <= zext_ln42_fu_199_p1(24 - 1 downto 0);
        else 
            data_in_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln41_fu_187_p2)
    begin
        if (((icmp_ln41_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_we0 <= ap_const_logic_1;
        else 
            data_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln42_fu_199_p1, sext_ln65_fu_222_p1, zext_ln56_fu_277_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_out_address0 <= zext_ln56_fu_277_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_out_address0 <= sext_ln65_fu_222_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_out_address0 <= zext_ln42_fu_199_p1(24 - 1 downto 0);
        else 
            data_out_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, fir_0_reg_162)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_out_d0 <= fir_0_reg_162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_out_d0 <= ap_const_lv16_0;
        else 
            data_out_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln41_fu_187_p2, ap_CS_fsm_state6, icmp_ln53_fu_246_p2)
    begin
        if ((((icmp_ln53_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln41_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_294_p1 <= data_in_q0(16 - 1 downto 0);
    i_fu_216_p2 <= std_logic_vector(unsigned(i_0_reg_139) + unsigned(ap_const_lv7_1));
    icmp_ln41_fu_187_p2 <= "1" when (k_0_reg_125 = ap_const_lv24_800000) else "0";
    icmp_ln49_fu_210_p2 <= "1" when (i_0_reg_139 = ap_const_lv7_64) else "0";
    icmp_ln51_fu_230_p2 <= "1" when (j_0_reg_150 = ap_const_lv24_800000) else "0";
    icmp_ln53_fu_246_p2 <= "1" when (signed(zext_ln53_fu_242_p1) < signed(taps)) else "0";
    j_fu_236_p2 <= std_logic_vector(unsigned(j_0_reg_150) + unsigned(ap_const_lv24_1));
    k_1_fu_251_p2 <= std_logic_vector(unsigned(k1_0_reg_176) + unsigned(ap_const_lv31_1));
    k_fu_193_p2 <= std_logic_vector(unsigned(k_0_reg_125) + unsigned(ap_const_lv24_1));
        sext_ln54_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_fu_267_p2),64));

        sext_ln54_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_257_p2),64));

        sext_ln65_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx),64));

    sub_ln54_fu_267_p2 <= std_logic_vector(unsigned(add_ln54_1_reg_330) - unsigned(zext_ln53_fu_242_p1));
    trunc_ln54_fu_282_p1 <= coef_q0(16 - 1 downto 0);
    zext_ln42_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_125),64));
    zext_ln51_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_150),32));
    zext_ln53_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_176),32));
    zext_ln56_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_150),64));
end behav;
