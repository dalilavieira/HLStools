// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.454000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40960,HLS_SYN_DSP=1,HLS_SYN_FF=353,HLS_SYN_LUT=452,HLS_VERSION=2019_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        coef_address0,
        coef_ce0,
        coef_q0,
        taps,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
output  [6:0] coef_address0;
output   coef_ce0;
input  [31:0] coef_q0;
input  [31:0] taps;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg coef_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [23:0] k_fu_193_p2;
reg   [23:0] k_reg_315;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln41_fu_187_p2;
wire   [31:0] add_ln54_1_fu_205_p2;
reg   [31:0] add_ln54_1_reg_330;
wire   [6:0] i_fu_216_p2;
reg   [6:0] i_reg_338;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln49_fu_210_p2;
wire   [31:0] zext_ln51_fu_226_p1;
reg   [31:0] zext_ln51_reg_348;
wire    ap_CS_fsm_state5;
wire   [23:0] j_fu_236_p2;
reg   [23:0] j_reg_356;
wire   [30:0] k_1_fu_251_p2;
reg   [30:0] k_1_reg_364;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln53_fu_246_p2;
wire  signed [15:0] trunc_ln54_fu_282_p1;
reg  signed [15:0] trunc_ln54_reg_384;
wire    ap_CS_fsm_state7;
wire  signed [15:0] grp_fu_294_p3;
wire    ap_CS_fsm_state9;
reg   [23:0] data_in_address0;
reg    data_in_ce0;
reg    data_in_we0;
wire   [23:0] data_in_q0;
reg   [23:0] data_out_address0;
reg    data_out_ce0;
reg    data_out_we0;
reg   [15:0] data_out_d0;
wire   [15:0] data_out_q0;
reg   [23:0] k_0_reg_125;
wire    ap_CS_fsm_state3;
reg   [6:0] i_0_reg_139;
wire   [0:0] icmp_ln51_fu_230_p2;
reg   [23:0] j_0_reg_150;
wire    ap_CS_fsm_state10;
reg   [15:0] fir_0_reg_162;
reg   [30:0] k1_0_reg_176;
wire   [63:0] zext_ln42_fu_199_p1;
wire  signed [63:0] sext_ln65_fu_222_p1;
wire  signed [63:0] sext_ln54_fu_262_p1;
wire  signed [63:0] sext_ln54_1_fu_272_p1;
wire   [63:0] zext_ln56_fu_277_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [31:0] zext_ln53_fu_242_p1;
wire   [31:0] add_ln54_fu_257_p2;
wire   [31:0] sub_ln54_fu_267_p2;
wire  signed [15:0] grp_fu_294_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

fir_data_in #(
    .DataWidth( 24 ),
    .AddressRange( 8388708 ),
    .AddressWidth( 24 ))
data_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_in_address0),
    .ce0(data_in_ce0),
    .we0(data_in_we0),
    .d0(k_0_reg_125),
    .q0(data_in_q0)
);

fir_data_out #(
    .DataWidth( 16 ),
    .AddressRange( 8388708 ),
    .AddressWidth( 24 ))
data_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_out_address0),
    .ce0(data_out_ce0),
    .we0(data_out_we0),
    .d0(data_out_d0),
    .q0(data_out_q0)
);

fir_mac_muladd_16s_16s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fir_mac_muladd_16s_16s_16ns_16_1_1_U1(
    .din0(trunc_ln54_reg_384),
    .din1(grp_fu_294_p1),
    .din2(fir_0_reg_162),
    .dout(grp_fu_294_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        fir_0_reg_162 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        fir_0_reg_162 <= grp_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_139 <= i_reg_338;
    end else if (((icmp_ln41_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_139 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_150 <= 24'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_150 <= j_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k1_0_reg_176 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k1_0_reg_176 <= k_1_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_reg_125 <= k_reg_315;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_125 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln54_1_reg_330 <= add_ln54_1_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_338 <= i_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_356 <= j_fu_236_p2;
        zext_ln51_reg_348[23 : 0] <= zext_ln51_fu_226_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_364 <= k_1_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_315 <= k_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln54_reg_384 <= trunc_ln54_fu_282_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ce0 = 1'b1;
    end else begin
        coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_in_address0 = sext_ln54_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_address0 = zext_ln42_fu_199_p1;
    end else begin
        data_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_in_we0 = 1'b1;
    end else begin
        data_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_out_address0 = zext_ln56_fu_277_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        data_out_address0 = sext_ln65_fu_222_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_out_address0 = zext_ln42_fu_199_p1;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_out_d0 = fir_0_reg_162;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_out_d0 = 16'd0;
    end else begin
        data_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln53_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln41_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln49_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln51_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln53_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_205_p2 = ($signed(taps) + $signed(32'd4294967295));

assign add_ln54_fu_257_p2 = (zext_ln53_fu_242_p1 + zext_ln51_reg_348);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = data_out_q0;

assign coef_address0 = sext_ln54_1_fu_272_p1;

assign grp_fu_294_p1 = data_in_q0[15:0];

assign i_fu_216_p2 = (i_0_reg_139 + 7'd1);

assign icmp_ln41_fu_187_p2 = ((k_0_reg_125 == 24'd8388608) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_210_p2 = ((i_0_reg_139 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_230_p2 = ((j_0_reg_150 == 24'd8388608) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_246_p2 = (($signed(zext_ln53_fu_242_p1) < $signed(taps)) ? 1'b1 : 1'b0);

assign j_fu_236_p2 = (j_0_reg_150 + 24'd1);

assign k_1_fu_251_p2 = (k1_0_reg_176 + 31'd1);

assign k_fu_193_p2 = (k_0_reg_125 + 24'd1);

assign sext_ln54_1_fu_272_p1 = $signed(sub_ln54_fu_267_p2);

assign sext_ln54_fu_262_p1 = $signed(add_ln54_fu_257_p2);

assign sext_ln65_fu_222_p1 = $signed(idx);

assign sub_ln54_fu_267_p2 = (add_ln54_1_reg_330 - zext_ln53_fu_242_p1);

assign trunc_ln54_fu_282_p1 = coef_q0[15:0];

assign zext_ln42_fu_199_p1 = k_0_reg_125;

assign zext_ln51_fu_226_p1 = j_0_reg_150;

assign zext_ln53_fu_242_p1 = k1_0_reg_176;

assign zext_ln56_fu_277_p1 = j_0_reg_150;

always @ (posedge ap_clk) begin
    zext_ln51_reg_348[31:24] <= 8'b00000000;
end

endmodule //fir
