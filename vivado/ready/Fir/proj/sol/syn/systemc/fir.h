// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_mac_muladd_16s_16s_16ns_16_1_1.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > coef_address0;
    sc_out< sc_logic > coef_ce0;
    sc_in< sc_lv<16> > coef_q0;
    sc_out< sc_lv<8> > data_in_address0;
    sc_out< sc_logic > data_in_ce0;
    sc_in< sc_lv<16> > data_in_q0;
    sc_out< sc_lv<8> > data_out_address0;
    sc_out< sc_logic > data_out_ce0;
    sc_out< sc_logic > data_out_we0;
    sc_out< sc_lv<32> > data_out_d0;
    sc_in< sc_lv<32> > data_out_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_mac_muladd_16s_16s_16ns_16_1_1<1,1,16,16,16,16>* fir_mac_muladd_16s_16s_16ns_16_1_1_U1;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_129_p2;
    sc_signal< sc_lv<7> > i_reg_214;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > zext_ln12_fu_135_p1;
    sc_signal< sc_lv<8> > zext_ln12_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > j_fu_145_p2;
    sc_signal< sc_lv<7> > j_reg_227;
    sc_signal< sc_lv<7> > k_fu_161_p2;
    sc_signal< sc_lv<7> > k_reg_235;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln14_fu_155_p2;
    sc_signal< sc_lv<16> > grp_fu_198_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > i_0_reg_77;
    sc_signal< sc_lv<1> > icmp_ln12_fu_139_p2;
    sc_signal< sc_lv<7> > j_0_reg_88;
    sc_signal< sc_lv<1> > icmp_ln10_fu_123_p2;
    sc_signal< sc_lv<16> > fir_0_reg_100;
    sc_signal< sc_lv<7> > k_0_reg_112;
    sc_signal< sc_lv<64> > zext_ln15_fu_172_p1;
    sc_signal< sc_lv<64> > zext_ln15_1_fu_183_p1;
    sc_signal< sc_lv<64> > zext_ln17_1_fu_193_p1;
    sc_signal< sc_lv<8> > zext_ln14_fu_151_p1;
    sc_signal< sc_lv<8> > add_ln15_fu_167_p2;
    sc_signal< sc_lv<7> > sub_ln15_fu_177_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<7> ap_const_lv7_63;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln15_fu_167_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_coef_address0();
    void thread_coef_ce0();
    void thread_data_in_address0();
    void thread_data_in_ce0();
    void thread_data_out_address0();
    void thread_data_out_ce0();
    void thread_data_out_d0();
    void thread_data_out_we0();
    void thread_i_fu_129_p2();
    void thread_icmp_ln10_fu_123_p2();
    void thread_icmp_ln12_fu_139_p2();
    void thread_icmp_ln14_fu_155_p2();
    void thread_j_fu_145_p2();
    void thread_k_fu_161_p2();
    void thread_sub_ln15_fu_177_p2();
    void thread_zext_ln12_fu_135_p1();
    void thread_zext_ln14_fu_151_p1();
    void thread_zext_ln15_1_fu_183_p1();
    void thread_zext_ln15_fu_172_p1();
    void thread_zext_ln17_1_fu_193_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
