// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> fir::ap_ST_fsm_state1 = "1";
const sc_lv<6> fir::ap_ST_fsm_state2 = "10";
const sc_lv<6> fir::ap_ST_fsm_state3 = "100";
const sc_lv<6> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<6> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<6> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<7> fir::ap_const_lv7_0 = "0000000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<16> fir::ap_const_lv16_0 = "0000000000000000";
const sc_lv<64> fir::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> fir::ap_const_lv7_64 = "1100100";
const sc_lv<7> fir::ap_const_lv7_1 = "1";
const sc_lv<7> fir::ap_const_lv7_63 = "1100011";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fir_mac_muladd_16s_16s_16ns_16_1_1_U1 = new fir_mac_muladd_16s_16s_16ns_16_1_1<1,1,16,16,16,16>("fir_mac_muladd_16s_16s_16ns_16_1_1_U1");
    fir_mac_muladd_16s_16s_16ns_16_1_1_U1->din0(data_in_q0);
    fir_mac_muladd_16s_16s_16ns_16_1_1_U1->din1(coef_q0);
    fir_mac_muladd_16s_16s_16ns_16_1_1_U1->din2(fir_0_reg_100);
    fir_mac_muladd_16s_16s_16ns_16_1_1_U1->dout(grp_fu_198_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln15_fu_167_p2);
    sensitive << ( zext_ln12_reg_219 );
    sensitive << ( zext_ln14_fu_151_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( data_out_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_coef_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln15_1_fu_183_p1 );

    SC_METHOD(thread_coef_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln15_fu_172_p1 );

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_data_out_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln17_1_fu_193_p1 );

    SC_METHOD(thread_data_out_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_data_out_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( fir_0_reg_100 );

    SC_METHOD(thread_data_out_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_155_p2 );

    SC_METHOD(thread_i_fu_129_p2);
    sensitive << ( i_0_reg_77 );

    SC_METHOD(thread_icmp_ln10_fu_123_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_77 );

    SC_METHOD(thread_icmp_ln12_fu_139_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_88 );

    SC_METHOD(thread_icmp_ln14_fu_155_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_112 );

    SC_METHOD(thread_j_fu_145_p2);
    sensitive << ( j_0_reg_88 );

    SC_METHOD(thread_k_fu_161_p2);
    sensitive << ( k_0_reg_112 );

    SC_METHOD(thread_sub_ln15_fu_177_p2);
    sensitive << ( k_0_reg_112 );

    SC_METHOD(thread_zext_ln12_fu_135_p1);
    sensitive << ( j_0_reg_88 );

    SC_METHOD(thread_zext_ln14_fu_151_p1);
    sensitive << ( k_0_reg_112 );

    SC_METHOD(thread_zext_ln15_1_fu_183_p1);
    sensitive << ( sub_ln15_fu_177_p2 );

    SC_METHOD(thread_zext_ln15_fu_172_p1);
    sensitive << ( add_ln15_fu_167_p2 );

    SC_METHOD(thread_zext_ln17_1_fu_193_p1);
    sensitive << ( j_0_reg_88 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_155_p2 );
    sensitive << ( icmp_ln12_fu_139_p2 );
    sensitive << ( icmp_ln10_fu_123_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, coef_address0, "(port)coef_address0");
    sc_trace(mVcdFile, coef_ce0, "(port)coef_ce0");
    sc_trace(mVcdFile, coef_q0, "(port)coef_q0");
    sc_trace(mVcdFile, data_in_address0, "(port)data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "(port)data_in_ce0");
    sc_trace(mVcdFile, data_in_q0, "(port)data_in_q0");
    sc_trace(mVcdFile, data_out_address0, "(port)data_out_address0");
    sc_trace(mVcdFile, data_out_ce0, "(port)data_out_ce0");
    sc_trace(mVcdFile, data_out_we0, "(port)data_out_we0");
    sc_trace(mVcdFile, data_out_d0, "(port)data_out_d0");
    sc_trace(mVcdFile, data_out_q0, "(port)data_out_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_129_p2, "i_fu_129_p2");
    sc_trace(mVcdFile, i_reg_214, "i_reg_214");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln12_fu_135_p1, "zext_ln12_fu_135_p1");
    sc_trace(mVcdFile, zext_ln12_reg_219, "zext_ln12_reg_219");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_fu_145_p2, "j_fu_145_p2");
    sc_trace(mVcdFile, j_reg_227, "j_reg_227");
    sc_trace(mVcdFile, k_fu_161_p2, "k_fu_161_p2");
    sc_trace(mVcdFile, k_reg_235, "k_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln14_fu_155_p2, "icmp_ln14_fu_155_p2");
    sc_trace(mVcdFile, grp_fu_198_p3, "grp_fu_198_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_0_reg_77, "i_0_reg_77");
    sc_trace(mVcdFile, icmp_ln12_fu_139_p2, "icmp_ln12_fu_139_p2");
    sc_trace(mVcdFile, j_0_reg_88, "j_0_reg_88");
    sc_trace(mVcdFile, icmp_ln10_fu_123_p2, "icmp_ln10_fu_123_p2");
    sc_trace(mVcdFile, fir_0_reg_100, "fir_0_reg_100");
    sc_trace(mVcdFile, k_0_reg_112, "k_0_reg_112");
    sc_trace(mVcdFile, zext_ln15_fu_172_p1, "zext_ln15_fu_172_p1");
    sc_trace(mVcdFile, zext_ln15_1_fu_183_p1, "zext_ln15_1_fu_183_p1");
    sc_trace(mVcdFile, zext_ln17_1_fu_193_p1, "zext_ln17_1_fu_193_p1");
    sc_trace(mVcdFile, zext_ln14_fu_151_p1, "zext_ln14_fu_151_p1");
    sc_trace(mVcdFile, add_ln15_fu_167_p2, "add_ln15_fu_167_p2");
    sc_trace(mVcdFile, sub_ln15_fu_177_p2, "sub_ln15_fu_177_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fir_mac_muladd_16s_16s_16ns_16_1_1_U1;
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_139_p2.read()))) {
        fir_0_reg_100 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        fir_0_reg_100 = grp_fu_198_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_139_p2.read(), ap_const_lv1_1))) {
        i_0_reg_77 = i_reg_214.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_77 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_123_p2.read()))) {
        j_0_reg_88 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln14_fu_155_p2.read(), ap_const_lv1_1))) {
        j_0_reg_88 = j_reg_227.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_139_p2.read()))) {
        k_0_reg_112 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_0_reg_112 = k_reg_235.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_214 = i_fu_129_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_227 = j_fu_145_p2.read();
        zext_ln12_reg_219 = zext_ln12_fu_135_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_235 = k_fu_161_p2.read();
    }
}

void fir::thread_add_ln15_fu_167_p2() {
    add_ln15_fu_167_p2 = (!zext_ln12_reg_219.read().is_01() || !zext_ln14_fu_151_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln12_reg_219.read()) + sc_biguint<8>(zext_ln14_fu_151_p1.read()));
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_return() {
    ap_return = data_out_q0.read();
}

void fir::thread_coef_address0() {
    coef_address0 =  (sc_lv<7>) (zext_ln15_1_fu_183_p1.read());
}

void fir::thread_coef_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coef_ce0 = ap_const_logic_1;
    } else {
        coef_ce0 = ap_const_logic_0;
    }
}

void fir::thread_data_in_address0() {
    data_in_address0 =  (sc_lv<8>) (zext_ln15_fu_172_p1.read());
}

void fir::thread_data_in_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data_in_ce0 = ap_const_logic_1;
    } else {
        data_in_ce0 = ap_const_logic_0;
    }
}

void fir::thread_data_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data_out_address0 =  (sc_lv<8>) (zext_ln17_1_fu_193_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_out_address0 =  (sc_lv<8>) (ap_const_lv64_0);
    } else {
        data_out_address0 = "XXXXXXXX";
    }
}

void fir::thread_data_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        data_out_ce0 = ap_const_logic_1;
    } else {
        data_out_ce0 = ap_const_logic_0;
    }
}

void fir::thread_data_out_d0() {
    data_out_d0 = esl_zext<32,16>(fir_0_reg_100.read());
}

void fir::thread_data_out_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_155_p2.read(), ap_const_lv1_1))) {
        data_out_we0 = ap_const_logic_1;
    } else {
        data_out_we0 = ap_const_logic_0;
    }
}

void fir::thread_i_fu_129_p2() {
    i_fu_129_p2 = (!i_0_reg_77.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_77.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fir::thread_icmp_ln10_fu_123_p2() {
    icmp_ln10_fu_123_p2 = (!i_0_reg_77.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_77.read() == ap_const_lv7_64);
}

void fir::thread_icmp_ln12_fu_139_p2() {
    icmp_ln12_fu_139_p2 = (!j_0_reg_88.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_88.read() == ap_const_lv7_64);
}

void fir::thread_icmp_ln14_fu_155_p2() {
    icmp_ln14_fu_155_p2 = (!k_0_reg_112.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_112.read() == ap_const_lv7_64);
}

void fir::thread_j_fu_145_p2() {
    j_fu_145_p2 = (!j_0_reg_88.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_88.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fir::thread_k_fu_161_p2() {
    k_fu_161_p2 = (!k_0_reg_112.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_112.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fir::thread_sub_ln15_fu_177_p2() {
    sub_ln15_fu_177_p2 = (!ap_const_lv7_63.is_01() || !k_0_reg_112.read().is_01())? sc_lv<7>(): (sc_bigint<7>(ap_const_lv7_63) - sc_biguint<7>(k_0_reg_112.read()));
}

void fir::thread_zext_ln12_fu_135_p1() {
    zext_ln12_fu_135_p1 = esl_zext<8,7>(j_0_reg_88.read());
}

void fir::thread_zext_ln14_fu_151_p1() {
    zext_ln14_fu_151_p1 = esl_zext<8,7>(k_0_reg_112.read());
}

void fir::thread_zext_ln15_1_fu_183_p1() {
    zext_ln15_1_fu_183_p1 = esl_zext<64,7>(sub_ln15_fu_177_p2.read());
}

void fir::thread_zext_ln15_fu_172_p1() {
    zext_ln15_fu_172_p1 = esl_zext<64,8>(add_ln15_fu_167_p2.read());
}

void fir::thread_zext_ln17_1_fu_193_p1() {
    zext_ln17_1_fu_193_p1 = esl_zext<64,7>(j_0_reg_88.read());
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_123_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln14_fu_155_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coef_address0\" :  \"" << coef_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coef_ce0\" :  \"" << coef_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coef_q0\" :  \"" << coef_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_address0\" :  \"" << data_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ce0\" :  \"" << data_in_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_q0\" :  \"" << data_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_address0\" :  \"" << data_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_ce0\" :  \"" << data_out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_we0\" :  \"" << data_out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_d0\" :  \"" << data_out_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_q0\" :  \"" << data_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

