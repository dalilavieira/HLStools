// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.691000,HLS_SYN_LAT=2020202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=71,HLS_SYN_LUT=158,HLS_VERSION=2019_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coef_address0,
        coef_ce0,
        coef_q0,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        data_out_address0,
        data_out_ce0,
        data_out_we0,
        data_out_d0,
        data_out_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] coef_address0;
output   coef_ce0;
input  [15:0] coef_q0;
output  [7:0] data_in_address0;
output   data_in_ce0;
input  [15:0] data_in_q0;
output  [7:0] data_out_address0;
output   data_out_ce0;
output   data_out_we0;
output  [31:0] data_out_d0;
input  [31:0] data_out_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg coef_ce0;
reg data_in_ce0;
reg[7:0] data_out_address0;
reg data_out_ce0;
reg data_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_129_p2;
reg   [6:0] i_reg_214;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln12_fu_135_p1;
reg   [7:0] zext_ln12_reg_219;
wire    ap_CS_fsm_state3;
wire   [6:0] j_fu_145_p2;
reg   [6:0] j_reg_227;
wire   [6:0] k_fu_161_p2;
reg   [6:0] k_reg_235;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_155_p2;
wire  signed [15:0] grp_fu_198_p3;
wire    ap_CS_fsm_state5;
reg   [6:0] i_0_reg_77;
wire   [0:0] icmp_ln12_fu_139_p2;
reg   [6:0] j_0_reg_88;
wire   [0:0] icmp_ln10_fu_123_p2;
reg   [15:0] fir_0_reg_100;
reg   [6:0] k_0_reg_112;
wire   [63:0] zext_ln15_fu_172_p1;
wire   [63:0] zext_ln15_1_fu_183_p1;
wire   [63:0] zext_ln17_1_fu_193_p1;
wire   [7:0] zext_ln14_fu_151_p1;
wire   [7:0] add_ln15_fu_167_p2;
wire   [6:0] sub_ln15_fu_177_p2;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

fir_mac_muladd_16s_16s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fir_mac_muladd_16s_16s_16ns_16_1_1_U1(
    .din0(data_in_q0),
    .din1(coef_q0),
    .din2(fir_0_reg_100),
    .dout(grp_fu_198_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fir_0_reg_100 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fir_0_reg_100 <= grp_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_77 <= i_reg_214;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_77 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_88 <= 7'd0;
    end else if (((icmp_ln14_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_88 <= j_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_112 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_112 <= k_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_214 <= i_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_227 <= j_fu_145_p2;
        zext_ln12_reg_219[6 : 0] <= zext_ln12_fu_135_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_235 <= k_fu_161_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_ce0 = 1'b1;
    end else begin
        coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_out_address0 = zext_ln17_1_fu_193_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_out_address0 = 64'd0;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_167_p2 = (zext_ln12_reg_219 + zext_ln14_fu_151_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = data_out_q0;

assign coef_address0 = zext_ln15_1_fu_183_p1;

assign data_in_address0 = zext_ln15_fu_172_p1;

assign data_out_d0 = fir_0_reg_100;

assign i_fu_129_p2 = (i_0_reg_77 + 7'd1);

assign icmp_ln10_fu_123_p2 = ((i_0_reg_77 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_139_p2 = ((j_0_reg_88 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_155_p2 = ((k_0_reg_112 == 7'd100) ? 1'b1 : 1'b0);

assign j_fu_145_p2 = (j_0_reg_88 + 7'd1);

assign k_fu_161_p2 = (k_0_reg_112 + 7'd1);

assign sub_ln15_fu_177_p2 = ($signed(7'd99) - $signed(k_0_reg_112));

assign zext_ln12_fu_135_p1 = j_0_reg_88;

assign zext_ln14_fu_151_p1 = k_0_reg_112;

assign zext_ln15_1_fu_183_p1 = sub_ln15_fu_177_p2;

assign zext_ln15_fu_172_p1 = add_ln15_fu_167_p2;

assign zext_ln17_1_fu_193_p1 = j_0_reg_88;

always @ (posedge ap_clk) begin
    zext_ln12_reg_219[7] <= 1'b0;
end

endmodule //fir
