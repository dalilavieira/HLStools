// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="paeth,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.754437,HLS_SYN_LAT=20202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=435,HLS_VERSION=2019_1}" *)

module paeth (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg[6:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_137_p2;
reg   [6:0] i_reg_349;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_149_p2;
reg   [6:0] k_reg_357;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln10_fu_143_p2;
reg   [6:0] out_addr_1_reg_377;
reg   [6:0] i_0_reg_99;
reg   [6:0] k_0_reg_110;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln8_fu_131_p2;
wire   [15:0] c_load_b_load_fu_327_p3;
reg   [15:0] ap_phi_mux_storemerge1_in_phi_fu_124_p4;
wire   [0:0] test_3_fu_321_p2;
wire   [63:0] zext_ln13_fu_155_p1;
wire  signed [15:0] sext_ln13_fu_163_p0;
wire  signed [15:0] sext_ln13_1_fu_167_p0;
wire  signed [15:0] sext_ln13_2_fu_171_p0;
wire  signed [16:0] sext_ln13_1_fu_167_p1;
wire  signed [16:0] sext_ln13_2_fu_171_p1;
wire  signed [15:0] sext_ln14_fu_181_p0;
wire  signed [15:0] sext_ln14_1_fu_185_p0;
wire  signed [16:0] sext_ln14_1_fu_185_p1;
wire  signed [15:0] shl_ln_fu_195_p1;
wire   [16:0] shl_ln_fu_195_p3;
wire  signed [17:0] sext_ln13_fu_163_p1;
wire  signed [17:0] sext_ln15_fu_203_p1;
wire   [17:0] sub_ln15_fu_207_p2;
wire  signed [17:0] sext_ln14_fu_181_p1;
wire  signed [17:0] pcs_fu_213_p2;
wire   [16:0] pas_fu_175_p2;
wire   [0:0] abscond_fu_229_p2;
wire   [16:0] neg_fu_223_p2;
wire  signed [16:0] abs_fu_235_p3;
wire   [16:0] pbs_fu_189_p2;
wire   [0:0] abscond2_fu_253_p2;
wire   [16:0] neg1_fu_247_p2;
wire  signed [16:0] abs3_fu_259_p3;
wire  signed [18:0] sext_ln15_1_fu_219_p1;
wire   [0:0] abscond8_fu_277_p2;
wire   [18:0] neg7_fu_271_p2;
wire   [18:0] abs9_fu_283_p3;
wire  signed [18:0] abs_cast_cast_fu_243_p1;
wire   [0:0] icmp_ln17_fu_291_p2;
wire  signed [18:0] abs3_cast_cast_fu_267_p1;
wire   [0:0] icmp_ln19_fu_309_p2;
wire   [0:0] test_2_fu_297_p2;
wire   [0:0] xor_ln19_fu_315_p2;
wire   [0:0] test_4_fu_303_p2;
wire  signed [15:0] c_load_b_load_fu_327_p1;
wire  signed [15:0] c_load_b_load_fu_327_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_99 <= i_reg_349;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_99 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_110 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_0_reg_110 <= k_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_349 <= i_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_357 <= k_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_addr_1_reg_377 <= zext_ln13_fu_155_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((test_3_fu_321_p2 == 1'd1)) begin
            ap_phi_mux_storemerge1_in_phi_fu_124_p4 = a_q0;
        end else if ((test_3_fu_321_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1_in_phi_fu_124_p4 = c_load_b_load_fu_327_p3;
        end else begin
            ap_phi_mux_storemerge1_in_phi_fu_124_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_in_phi_fu_124_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address0 = out_addr_1_reg_377;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln13_fu_155_p1;

assign abs3_cast_cast_fu_267_p1 = abs3_fu_259_p3;

assign abs3_fu_259_p3 = ((abscond2_fu_253_p2[0:0] === 1'b1) ? pbs_fu_189_p2 : neg1_fu_247_p2);

assign abs9_fu_283_p3 = ((abscond8_fu_277_p2[0:0] === 1'b1) ? sext_ln15_1_fu_219_p1 : neg7_fu_271_p2);

assign abs_cast_cast_fu_243_p1 = abs_fu_235_p3;

assign abs_fu_235_p3 = ((abscond_fu_229_p2[0:0] === 1'b1) ? pas_fu_175_p2 : neg_fu_223_p2);

assign abscond2_fu_253_p2 = (($signed(pbs_fu_189_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign abscond8_fu_277_p2 = (($signed(pcs_fu_213_p2) > $signed(18'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_229_p2 = (($signed(pas_fu_175_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = out_r_q0;

assign b_address0 = zext_ln13_fu_155_p1;

assign c_address0 = zext_ln13_fu_155_p1;

assign c_load_b_load_fu_327_p1 = c_q0;

assign c_load_b_load_fu_327_p2 = b_q0;

assign c_load_b_load_fu_327_p3 = ((test_4_fu_303_p2[0:0] === 1'b1) ? c_load_b_load_fu_327_p1 : c_load_b_load_fu_327_p2);

assign i_fu_137_p2 = (i_0_reg_99 + 7'd1);

assign icmp_ln10_fu_143_p2 = ((k_0_reg_110 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_291_p2 = (($signed(abs9_fu_283_p3) < $signed(abs_cast_cast_fu_243_p1)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_309_p2 = (($signed(abs3_fu_259_p3) < $signed(abs_fu_235_p3)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_131_p2 = ((i_0_reg_99 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_149_p2 = (k_0_reg_110 + 7'd1);

assign neg1_fu_247_p2 = (17'd0 - pbs_fu_189_p2);

assign neg7_fu_271_p2 = ($signed(19'd0) - $signed(sext_ln15_1_fu_219_p1));

assign neg_fu_223_p2 = (17'd0 - pas_fu_175_p2);

assign out_r_d0 = $signed(ap_phi_mux_storemerge1_in_phi_fu_124_p4);

assign pas_fu_175_p2 = ($signed(sext_ln13_1_fu_167_p1) - $signed(sext_ln13_2_fu_171_p1));

assign pbs_fu_189_p2 = ($signed(sext_ln14_1_fu_185_p1) - $signed(sext_ln13_2_fu_171_p1));

assign pcs_fu_213_p2 = (sub_ln15_fu_207_p2 | sext_ln14_fu_181_p1);

assign sext_ln13_1_fu_167_p0 = b_q0;

assign sext_ln13_1_fu_167_p1 = sext_ln13_1_fu_167_p0;

assign sext_ln13_2_fu_171_p0 = c_q0;

assign sext_ln13_2_fu_171_p1 = sext_ln13_2_fu_171_p0;

assign sext_ln13_fu_163_p0 = b_q0;

assign sext_ln13_fu_163_p1 = sext_ln13_fu_163_p0;

assign sext_ln14_1_fu_185_p0 = a_q0;

assign sext_ln14_1_fu_185_p1 = sext_ln14_1_fu_185_p0;

assign sext_ln14_fu_181_p0 = a_q0;

assign sext_ln14_fu_181_p1 = sext_ln14_fu_181_p0;

assign sext_ln15_1_fu_219_p1 = pcs_fu_213_p2;

assign sext_ln15_fu_203_p1 = $signed(shl_ln_fu_195_p3);

assign shl_ln_fu_195_p1 = c_q0;

assign shl_ln_fu_195_p3 = {{shl_ln_fu_195_p1}, {1'd0}};

assign sub_ln15_fu_207_p2 = ($signed(sext_ln13_fu_163_p1) - $signed(sext_ln15_fu_203_p1));

assign test_2_fu_297_p2 = (icmp_ln17_fu_291_p2 ^ 1'd1);

assign test_3_fu_321_p2 = (xor_ln19_fu_315_p2 & test_2_fu_297_p2);

assign test_4_fu_303_p2 = (($signed(abs3_cast_cast_fu_267_p1) > $signed(abs9_fu_283_p3)) ? 1'b1 : 1'b0);

assign xor_ln19_fu_315_p2 = (icmp_ln19_fu_309_p2 ^ 1'd1);

assign zext_ln13_fu_155_p1 = k_0_reg_110;

endmodule //paeth
