-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity paeth is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of paeth is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "paeth,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.754437,HLS_SYN_LAT=20202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=435,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_137_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_349 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_149_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_357 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln10_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_1_reg_377 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_99 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_110 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln8_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_b_load_fu_327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_storemerge1_in_phi_fu_124_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal test_3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln13_fu_163_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_167_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_2_fu_171_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_167_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln13_2_fu_171_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln14_fu_181_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln14_1_fu_185_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln14_1_fu_185_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_195_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_195_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln13_fu_163_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln15_fu_203_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln15_fu_207_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln14_fu_181_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal pcs_fu_213_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal pas_fu_175_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal abscond_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_223_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal abs_fu_235_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal pbs_fu_189_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal abscond2_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg1_fu_247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal abs3_fu_259_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln15_1_fu_219_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal abscond8_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg7_fu_271_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal abs9_fu_283_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal abs_cast_cast_fu_243_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln17_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs3_cast_cast_fu_267_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln19_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_b_load_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_load_b_load_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_99 <= i_reg_349;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_99 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_110 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_0_reg_110 <= k_reg_357;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_349 <= i_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_357 <= k_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_addr_1_reg_377 <= zext_ln13_fu_155_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln10_fu_143_p2, icmp_ln8_fu_131_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address0 <= zext_ln13_fu_155_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        abs3_cast_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs3_fu_259_p3),19));

    abs3_fu_259_p3 <= 
        pbs_fu_189_p2 when (abscond2_fu_253_p2(0) = '1') else 
        neg1_fu_247_p2;
    abs9_fu_283_p3 <= 
        sext_ln15_1_fu_219_p1 when (abscond8_fu_277_p2(0) = '1') else 
        neg7_fu_271_p2;
        abs_cast_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_fu_235_p3),19));

    abs_fu_235_p3 <= 
        pas_fu_175_p2 when (abscond_fu_229_p2(0) = '1') else 
        neg_fu_223_p2;
    abscond2_fu_253_p2 <= "1" when (signed(pbs_fu_189_p2) > signed(ap_const_lv17_0)) else "0";
    abscond8_fu_277_p2 <= "1" when (signed(pcs_fu_213_p2) > signed(ap_const_lv18_0)) else "0";
    abscond_fu_229_p2 <= "1" when (signed(pas_fu_175_p2) > signed(ap_const_lv17_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge1_in_phi_fu_124_p4_assign_proc : process(a_q0, ap_CS_fsm_state4, c_load_b_load_fu_327_p3, test_3_fu_321_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((test_3_fu_321_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_in_phi_fu_124_p4 <= a_q0;
            elsif ((test_3_fu_321_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_in_phi_fu_124_p4 <= c_load_b_load_fu_327_p3;
            else 
                ap_phi_mux_storemerge1_in_phi_fu_124_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge1_in_phi_fu_124_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_r_q0;
    b_address0 <= zext_ln13_fu_155_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln13_fu_155_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_load_b_load_fu_327_p1 <= c_q0;
    c_load_b_load_fu_327_p2 <= b_q0;
    c_load_b_load_fu_327_p3 <= 
        c_load_b_load_fu_327_p1 when (test_4_fu_303_p2(0) = '1') else 
        c_load_b_load_fu_327_p2;
    i_fu_137_p2 <= std_logic_vector(unsigned(i_0_reg_99) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_143_p2 <= "1" when (k_0_reg_110 = ap_const_lv7_64) else "0";
    icmp_ln17_fu_291_p2 <= "1" when (signed(abs9_fu_283_p3) < signed(abs_cast_cast_fu_243_p1)) else "0";
    icmp_ln19_fu_309_p2 <= "1" when (signed(abs3_fu_259_p3) < signed(abs_fu_235_p3)) else "0";
    icmp_ln8_fu_131_p2 <= "1" when (i_0_reg_99 = ap_const_lv7_64) else "0";
    k_fu_149_p2 <= std_logic_vector(unsigned(k_0_reg_110) + unsigned(ap_const_lv7_1));
    neg1_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(pbs_fu_189_p2));
    neg7_fu_271_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln15_1_fu_219_p1));
    neg_fu_223_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(pas_fu_175_p2));

    out_r_address0_assign_proc : process(ap_CS_fsm_state2, out_addr_1_reg_377, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_address0 <= out_addr_1_reg_377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_r_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_storemerge1_in_phi_fu_124_p4),32));


    out_r_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pas_fu_175_p2 <= std_logic_vector(signed(sext_ln13_1_fu_167_p1) - signed(sext_ln13_2_fu_171_p1));
    pbs_fu_189_p2 <= std_logic_vector(signed(sext_ln14_1_fu_185_p1) - signed(sext_ln13_2_fu_171_p1));
    pcs_fu_213_p2 <= (sub_ln15_fu_207_p2 or sext_ln14_fu_181_p1);
    sext_ln13_1_fu_167_p0 <= b_q0;
        sext_ln13_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_1_fu_167_p0),17));

    sext_ln13_2_fu_171_p0 <= c_q0;
        sext_ln13_2_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_2_fu_171_p0),17));

    sext_ln13_fu_163_p0 <= b_q0;
        sext_ln13_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_163_p0),18));

    sext_ln14_1_fu_185_p0 <= a_q0;
        sext_ln14_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln14_1_fu_185_p0),17));

    sext_ln14_fu_181_p0 <= a_q0;
        sext_ln14_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln14_fu_181_p0),18));

        sext_ln15_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pcs_fu_213_p2),19));

        sext_ln15_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_195_p3),18));

    shl_ln_fu_195_p1 <= c_q0;
    shl_ln_fu_195_p3 <= (shl_ln_fu_195_p1 & ap_const_lv1_0);
    sub_ln15_fu_207_p2 <= std_logic_vector(signed(sext_ln13_fu_163_p1) - signed(sext_ln15_fu_203_p1));
    test_2_fu_297_p2 <= (icmp_ln17_fu_291_p2 xor ap_const_lv1_1);
    test_3_fu_321_p2 <= (xor_ln19_fu_315_p2 and test_2_fu_297_p2);
    test_4_fu_303_p2 <= "1" when (signed(abs3_cast_cast_fu_267_p1) > signed(abs9_fu_283_p3)) else "0";
    xor_ln19_fu_315_p2 <= (icmp_ln19_fu_309_p2 xor ap_const_lv1_1);
    zext_ln13_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_110),64));
end behav;
