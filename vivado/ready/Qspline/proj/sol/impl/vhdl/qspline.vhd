-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qspline is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qspline is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qspline,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.454000,HLS_SYN_LAT=8405385421,HLS_SYN_TPT=none,HLS_SYN_MEM=47104,HLS_SYN_DSP=13,HLS_SYN_FF=676,HLS_SYN_LUT=653,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln37_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_270_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_reg_485 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln37_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_293_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_528 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln50_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_309_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal k_1_reg_541 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln53_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal b_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_load_reg_584 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln53_fu_442_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_reg_589 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_1_fu_448_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_1_reg_595 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_4_fu_454_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_4_reg_600 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_2_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_2_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_load_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_3_fu_460_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_3_reg_615 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln53_fu_353_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln53_reg_620 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_3_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_3_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln53_5_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_5_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln53_1_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_1_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal c_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal e_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal e_ce0 : STD_LOGIC;
    signal e_we0 : STD_LOGIC;
    signal e_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal f_ce0 : STD_LOGIC;
    signal f_we0 : STD_LOGIC;
    signal g_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal g_ce0 : STD_LOGIC;
    signal g_we0 : STD_LOGIC;
    signal g_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_221 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_232 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_0_reg_243 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln38_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal mul_ln53_2_fu_343_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_2_fu_343_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_360_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln53_12_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_5_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_390_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_10_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_1_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_5_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_418_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp6_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp8_fu_433_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp8_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_fu_442_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_2_fu_322_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_fu_442_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_1_fu_448_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_1_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_4_fu_454_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_4_fu_454_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_3_fu_460_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln53_3_fu_460_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln53_1_fu_448_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln53_2_fu_343_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_2_fu_343_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_3_fu_460_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_3_fu_460_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_4_fu_454_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp6_fu_418_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component qspline_mul_mul_10ns_10ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component qspline_mul_mul_10ns_20ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component qspline_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (9 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component qspline_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => a_q0);

    b_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => b_q0);

    c_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => c_q0);

    e_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_address0,
        ce0 => e_ce0,
        we0 => e_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => e_q0);

    f_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_address0,
        ce0 => f_ce0,
        we0 => f_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => f_q0);

    g_U : component qspline_a
    generic map (
        DataWidth => 10,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_address0,
        ce0 => g_ce0,
        we0 => g_we0,
        d0 => trunc_ln37_fu_254_p1,
        q0 => g_q0);

    out_U : component qspline_out
    generic map (
        DataWidth => 32,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);

    qspline_mul_mul_10ns_10ns_20_1_1_U1 : component qspline_mul_mul_10ns_10ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln53_fu_442_p0,
        din1 => mul_ln53_fu_442_p1,
        dout => mul_ln53_fu_442_p2);

    qspline_mul_mul_10ns_10ns_20_1_1_U2 : component qspline_mul_mul_10ns_10ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln53_1_fu_448_p0,
        din1 => mul_ln53_1_fu_448_p1,
        dout => mul_ln53_1_fu_448_p2);

    qspline_mul_mul_10ns_10ns_20_1_1_U3 : component qspline_mul_mul_10ns_10ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln53_4_fu_454_p0,
        din1 => mul_ln53_4_fu_454_p1,
        dout => mul_ln53_4_fu_454_p2);

    qspline_mul_mul_10ns_20ns_30_1_1_U4 : component qspline_mul_mul_10ns_20ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 20,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln53_3_fu_460_p0,
        din1 => mul_ln53_3_fu_460_p1,
        dout => mul_ln53_3_fu_460_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_232 <= ap_const_lv7_0;
            elsif (((icmp_ln52_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_232 <= i_reg_528;
            end if; 
        end if;
    end process;

    k1_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k1_0_reg_243 <= ap_const_lv24_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k1_0_reg_243 <= k_1_reg_541;
            end if; 
        end if;
    end process;

    k_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_0_reg_221 <= k_reg_485;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_221 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln53_1_reg_651 <= add_ln53_1_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                b_load_reg_584 <= b_q0;
                mul_ln53_1_reg_595 <= mul_ln53_1_fu_448_p2;
                mul_ln53_4_reg_600 <= mul_ln53_4_fu_454_p2;
                mul_ln53_reg_589 <= mul_ln53_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                f_load_reg_610 <= f_q0;
                mul_ln53_2_reg_605 <= mul_ln53_2_fu_343_p2;
                mul_ln53_3_reg_615 <= mul_ln53_3_fu_460_p2;
                tmp5_reg_625 <= tmp5_fu_371_p2;
                trunc_ln53_reg_620 <= trunc_ln53_fu_353_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_528 <= i_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_1_reg_541 <= k_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_485 <= k_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln53_5_reg_636 <= mul_ln53_5_fu_412_p2;
                tmp4_reg_641 <= tmp4_fu_423_p2;
                    zext_ln53_3_reg_630(9 downto 0) <= zext_ln53_3_fu_380_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp3_reg_646 <= tmp3_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln53_reg_546(23 downto 0) <= zext_ln53_fu_315_p1(23 downto 0);
            end if;
        end if;
    end process;
    zext_ln53_reg_546(63 downto 24) <= "0000000000000000000000000000000000000000";
    zext_ln53_3_reg_630(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln37_fu_264_p2, ap_CS_fsm_state4, icmp_ln50_fu_287_p2, ap_CS_fsm_state5, icmp_ln52_fu_303_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln37_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln50_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln52_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln53_fu_315_p1, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= zext_ln53_fu_315_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln53_1_fu_437_p2 <= std_logic_vector(unsigned(tmp8_fu_433_p2) + unsigned(mul_ln53_5_reg_636));
    add_ln53_fu_407_p2 <= std_logic_vector(unsigned(mul_ln53_2_reg_605) + unsigned(zext_ln53_1_fu_377_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_q0;

    b_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln53_fu_315_p1, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= zext_ln53_fu_315_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln53_reg_546, ap_CS_fsm_state6, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= zext_ln53_reg_546(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln53_reg_546, ap_CS_fsm_state6, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e_address0 <= zext_ln53_reg_546(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            e_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    e_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            e_ce0 <= ap_const_logic_1;
        else 
            e_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            e_we0 <= ap_const_logic_1;
        else 
            e_we0 <= ap_const_logic_0;
        end if; 
    end process;


    f_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln53_reg_546, ap_CS_fsm_state6, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            f_address0 <= zext_ln53_reg_546(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            f_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            f_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            f_we0 <= ap_const_logic_1;
        else 
            f_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln53_fu_315_p1, zext_ln38_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            g_address0 <= zext_ln53_fu_315_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            g_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            g_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    g_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            g_ce0 <= ap_const_logic_1;
        else 
            g_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2)
    begin
        if (((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            g_we0 <= ap_const_logic_1;
        else 
            g_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_293_p2 <= std_logic_vector(unsigned(i_0_reg_232) + unsigned(ap_const_lv7_1));
    icmp_ln37_fu_264_p2 <= "1" when (k_0_reg_221 = ap_const_lv24_800000) else "0";
    icmp_ln50_fu_287_p2 <= "1" when (i_0_reg_232 = ap_const_lv7_64) else "0";
    icmp_ln52_fu_303_p2 <= "1" when (k1_0_reg_243 = ap_const_lv24_800000) else "0";
    k_1_fu_309_p2 <= std_logic_vector(unsigned(k1_0_reg_243) + unsigned(ap_const_lv24_1));
    k_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(k_0_reg_221));
    mul_ln53_1_fu_448_p0 <= mul_ln53_1_fu_448_p00(10 - 1 downto 0);
    mul_ln53_1_fu_448_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),20));
    mul_ln53_1_fu_448_p1 <= zext_ln53_2_fu_322_p1(10 - 1 downto 0);
    mul_ln53_2_fu_343_p0 <= mul_ln53_2_fu_343_p00(20 - 1 downto 0);
    mul_ln53_2_fu_343_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_reg_589),32));
    mul_ln53_2_fu_343_p1 <= mul_ln53_2_fu_343_p10(20 - 1 downto 0);
    mul_ln53_2_fu_343_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_1_reg_595),32));
    mul_ln53_2_fu_343_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_2_fu_343_p0) * unsigned(mul_ln53_2_fu_343_p1), 32));
    mul_ln53_3_fu_460_p0 <= mul_ln53_3_fu_460_p00(10 - 1 downto 0);
    mul_ln53_3_fu_460_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_q0),30));
    mul_ln53_3_fu_460_p1 <= mul_ln53_3_fu_460_p10(20 - 1 downto 0);
    mul_ln53_3_fu_460_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_reg_589),30));
    mul_ln53_4_fu_454_p0 <= zext_ln53_2_fu_322_p1(10 - 1 downto 0);
    mul_ln53_4_fu_454_p1 <= mul_ln53_4_fu_454_p10(10 - 1 downto 0);
    mul_ln53_4_fu_454_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_q0),20));
    mul_ln53_5_fu_412_p1 <= zext_ln53_1_fu_377_p1(10 - 1 downto 0);
    mul_ln53_5_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln53_fu_407_p2) * signed('0' &mul_ln53_5_fu_412_p1))), 32));
    mul_ln53_fu_442_p0 <= zext_ln53_2_fu_322_p1(10 - 1 downto 0);
    mul_ln53_fu_442_p1 <= zext_ln53_2_fu_322_p1(10 - 1 downto 0);

    out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln53_reg_546, ap_CS_fsm_state13, zext_ln38_fu_276_p1, sext_ln62_fu_299_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_address0 <= zext_ln53_reg_546(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_address0 <= sext_ln62_fu_299_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_address0 <= zext_ln38_fu_276_p1(23 - 1 downto 0);
        else 
            out_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_d0_assign_proc : process(ap_CS_fsm_state2, add_ln53_1_reg_651, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_d0 <= add_ln53_1_reg_651;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_d0 <= ap_const_lv32_0;
        else 
            out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_264_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln37_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln62_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx),64));

    shl_ln_fu_383_p3 <= (trunc_ln53_reg_620 & ap_const_lv3_0);
    sub_ln53_fu_401_p2 <= std_logic_vector(unsigned(shl_ln_fu_383_p3) - unsigned(zext_ln53_10_fu_397_p1));
    tmp3_fu_429_p1 <= zext_ln53_3_reg_630(10 - 1 downto 0);
    tmp3_fu_429_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_reg_641) * signed('0' &tmp3_fu_429_p1))), 32));
    tmp4_fu_423_p2 <= std_logic_vector(unsigned(tmp6_fu_418_p2) + unsigned(sub_ln53_fu_401_p2));
    tmp5_fu_371_p2 <= std_logic_vector(unsigned(zext_ln53_12_fu_367_p1) + unsigned(zext_ln53_5_fu_356_p1));
    tmp6_fu_418_p0 <= tmp5_reg_625(23 - 1 downto 0);
    tmp6_fu_418_p1 <= tmp6_fu_418_p10(10 - 1 downto 0);
    tmp6_fu_418_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_load_reg_610),32));
    tmp6_fu_418_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp6_fu_418_p0) * signed('0' &tmp6_fu_418_p1))), 32));
    tmp8_fu_433_p0 <= zext_ln53_3_reg_630(10 - 1 downto 0);
    tmp8_fu_433_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp8_fu_433_p0) * signed(tmp3_reg_646))), 32));
    tmp_1_fu_360_p3 <= (mul_ln53_4_reg_600 & ap_const_lv2_0);
    tmp_fu_390_p3 <= (mul_ln53_3_reg_615 & ap_const_lv1_0);
    trunc_ln37_fu_254_p1 <= k_0_reg_221(10 - 1 downto 0);
    trunc_ln53_fu_353_p1 <= mul_ln53_3_fu_460_p2(29 - 1 downto 0);
    zext_ln38_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_221),64));
    zext_ln53_10_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_390_p3),32));
    zext_ln53_12_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_360_p3),32));
    zext_ln53_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_reg_584),32));
    zext_ln53_2_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),20));
    zext_ln53_3_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_load_reg_610),32));
    zext_ln53_5_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_q0),32));
    zext_ln53_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_243),64));
end behav;
