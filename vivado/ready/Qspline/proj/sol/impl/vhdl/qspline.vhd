-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qspline is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    d_ce0 : OUT STD_LOGIC;
    d_we0 : OUT STD_LOGIC;
    d_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    d_ce1 : OUT STD_LOGIC;
    d_we1 : OUT STD_LOGIC;
    d_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    e_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    e_ce0 : OUT STD_LOGIC;
    e_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    f_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    f_ce0 : OUT STD_LOGIC;
    f_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    g_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    g_ce0 : OUT STD_LOGIC;
    g_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of qspline is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qspline,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.261000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=169,HLS_SYN_LUT=367,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_171_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_334 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_183_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_342 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln12_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln11_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln12_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln12_2_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_2_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_2_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_2_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_143 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_154 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln9_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln12_fu_199_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_3_fu_219_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_3_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln12_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln12_1_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_4_fu_314_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln12_2_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_4_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_267_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln12_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_5_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_5_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_fu_299_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_307_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_321_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component qspline_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component qspline_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    qspline_mul_mul_16s_16s_32_1_1_U1 : component qspline_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln12_fu_299_p0,
        din1 => mul_ln12_fu_299_p1,
        dout => mul_ln12_fu_299_p2);

    qspline_mul_mul_16s_16s_32_1_1_U2 : component qspline_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln12_1_fu_307_p0,
        din1 => a_q0,
        dout => mul_ln12_1_fu_307_p2);

    qspline_mul_mul_16s_16s_30_1_1_U3 : component qspline_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => g_q0,
        din1 => b_q0,
        dout => mul_ln12_4_fu_314_p2);

    qspline_mul_mul_16s_16s_32_1_1_U4 : component qspline_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp8_fu_321_p0,
        din1 => tmp8_fu_321_p1,
        dout => tmp8_fu_321_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_177_p2 = ap_const_lv1_1))) then 
                i_0_reg_143 <= i_reg_334;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_143 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_165_p2 = ap_const_lv1_0))) then 
                k_0_reg_154 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_154 <= k_reg_342;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_334 <= i_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_342 <= k_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln12_2_reg_388 <= mul_ln12_2_fu_207_p2;
                sext_ln12_2_reg_393 <= sext_ln12_2_fu_211_p1;
                sext_ln12_reg_382 <= sext_ln12_fu_199_p1;
                tmp3_reg_399 <= tmp3_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_177_p2 = ap_const_lv1_0))) then
                    zext_ln12_reg_347(6 downto 0) <= zext_ln12_fu_189_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_347(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_177_p2, icmp_ln9_fu_165_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_165_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_fu_279_p2 <= std_logic_vector(unsigned(mul_ln12_2_reg_388) + unsigned(sext_ln12_reg_382));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= out_r_q0;
    b_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_address0 <= ap_const_lv7_0;
    d_address1 <= ap_const_lv7_0;
    d_ce0 <= ap_const_logic_0;
    d_ce1 <= ap_const_logic_0;
    d_d0 <= ap_const_lv16_0;
    d_d1 <= ap_const_lv16_0;
    d_we0 <= ap_const_logic_0;
    d_we1 <= ap_const_logic_0;
    e_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    e_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_ce0 <= ap_const_logic_1;
        else 
            e_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    f_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_address0 <= zext_ln12_fu_189_p1(7 - 1 downto 0);

    g_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            g_ce0 <= ap_const_logic_1;
        else 
            g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_171_p2 <= std_logic_vector(unsigned(i_0_reg_143) + unsigned(ap_const_lv7_1));
    icmp_ln11_fu_177_p2 <= "1" when (k_0_reg_154 = ap_const_lv7_64) else "0";
    icmp_ln9_fu_165_p2 <= "1" when (i_0_reg_143 = ap_const_lv7_64) else "0";
    k_fu_183_p2 <= std_logic_vector(unsigned(k_0_reg_154) + unsigned(ap_const_lv7_1));
    mul_ln12_1_fu_307_p0 <= sext_ln12_fu_199_p1(16 - 1 downto 0);
    mul_ln12_2_fu_207_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln12_1_fu_307_p2) * signed(mul_ln12_fu_299_p2))), 32));
    mul_ln12_3_fu_219_p1 <= c_q0;
    mul_ln12_3_fu_219_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln12_fu_299_p2) * signed(mul_ln12_3_fu_219_p1))), 32));
    mul_ln12_5_fu_283_p1 <= sext_ln12_reg_382(16 - 1 downto 0);
    mul_ln12_5_fu_283_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln12_fu_279_p2) * signed(mul_ln12_5_fu_283_p1))), 32));
    mul_ln12_fu_299_p0 <= sext_ln12_fu_199_p1(16 - 1 downto 0);
    mul_ln12_fu_299_p1 <= sext_ln12_fu_199_p1(16 - 1 downto 0);

    out_r_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln12_reg_347, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address0 <= zext_ln12_reg_347(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_r_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(unsigned(mul_ln12_5_fu_283_p2) + unsigned(tmp7_fu_288_p2));

    out_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln12_2_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(f_q0),32));

        sext_ln12_4_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(e_q0),32));

    sext_ln12_fu_199_p0 <= b_q0;
        sext_ln12_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_fu_199_p0),32));

    shl_ln12_1_fu_230_p2 <= std_logic_vector(shift_left(unsigned(mul_ln12_3_fu_219_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln12_2_fu_254_p3 <= (mul_ln12_4_fu_314_p2 & ap_const_lv2_0);
    shl_ln12_fu_224_p2 <= std_logic_vector(shift_left(unsigned(mul_ln12_3_fu_219_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    sub_ln12_fu_236_p2 <= std_logic_vector(unsigned(shl_ln12_fu_224_p2) - unsigned(shl_ln12_1_fu_230_p2));
    tmp3_fu_273_p2 <= std_logic_vector(unsigned(sub_ln12_fu_236_p2) + unsigned(tmp5_fu_267_p2));
    tmp4_fu_261_p2 <= std_logic_vector(unsigned(shl_ln12_2_fu_254_p3) + unsigned(sext_ln12_4_fu_242_p1));
    tmp5_fu_267_p1 <= f_q0;
    tmp5_fu_267_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_fu_261_p2) * signed(tmp5_fu_267_p1))), 32));
    tmp7_fu_288_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp8_fu_321_p2) * signed(tmp3_reg_399))), 32));
    tmp8_fu_321_p0 <= sext_ln12_2_reg_393(16 - 1 downto 0);
    tmp8_fu_321_p1 <= sext_ln12_2_reg_393(16 - 1 downto 0);
    zext_ln12_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_154),64));
end behav;
