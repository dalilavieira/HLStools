// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="qspline,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.261000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=169,HLS_SYN_LUT=367,HLS_VERSION=2019_1}" *)

module qspline (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        d_address0,
        d_ce0,
        d_we0,
        d_d0,
        d_q0,
        d_address1,
        d_ce1,
        d_we1,
        d_d1,
        d_q1,
        e_address0,
        e_ce0,
        e_q0,
        f_address0,
        f_ce0,
        f_q0,
        g_address0,
        g_ce0,
        g_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [6:0] d_address0;
output   d_ce0;
output   d_we0;
output  [15:0] d_d0;
input  [15:0] d_q0;
output  [6:0] d_address1;
output   d_ce1;
output   d_we1;
output  [15:0] d_d1;
input  [15:0] d_q1;
output  [6:0] e_address0;
output   e_ce0;
input  [15:0] e_q0;
output  [6:0] f_address0;
output   f_ce0;
input  [15:0] f_q0;
output  [6:0] g_address0;
output   g_ce0;
input  [15:0] g_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg e_ce0;
reg f_ce0;
reg g_ce0;
reg[6:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_171_p2;
reg   [6:0] i_reg_334;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_183_p2;
reg   [6:0] k_reg_342;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln12_fu_189_p1;
reg   [63:0] zext_ln12_reg_347;
wire   [0:0] icmp_ln11_fu_177_p2;
wire  signed [31:0] sext_ln12_fu_199_p1;
reg  signed [31:0] sext_ln12_reg_382;
wire    ap_CS_fsm_state4;
wire   [31:0] mul_ln12_2_fu_207_p2;
reg   [31:0] mul_ln12_2_reg_388;
wire  signed [31:0] sext_ln12_2_fu_211_p1;
reg  signed [31:0] sext_ln12_2_reg_393;
wire  signed [31:0] tmp3_fu_273_p2;
reg  signed [31:0] tmp3_reg_399;
reg   [6:0] i_0_reg_143;
reg   [6:0] k_0_reg_154;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln9_fu_165_p2;
wire  signed [15:0] sext_ln12_fu_199_p0;
wire  signed [31:0] mul_ln12_1_fu_307_p2;
wire  signed [31:0] mul_ln12_fu_299_p2;
wire  signed [15:0] mul_ln12_3_fu_219_p1;
wire   [31:0] mul_ln12_3_fu_219_p2;
wire   [31:0] shl_ln12_fu_224_p2;
wire   [31:0] shl_ln12_1_fu_230_p2;
wire  signed [29:0] mul_ln12_4_fu_314_p2;
wire   [31:0] shl_ln12_2_fu_254_p3;
wire  signed [31:0] sext_ln12_4_fu_242_p1;
wire  signed [31:0] tmp4_fu_261_p2;
wire  signed [15:0] tmp5_fu_267_p1;
wire   [31:0] sub_ln12_fu_236_p2;
wire   [31:0] tmp5_fu_267_p2;
wire  signed [31:0] add_ln12_fu_279_p2;
wire  signed [15:0] mul_ln12_5_fu_283_p1;
wire  signed [31:0] tmp8_fu_321_p2;
wire   [31:0] mul_ln12_5_fu_283_p2;
wire   [31:0] tmp7_fu_288_p2;
wire  signed [15:0] mul_ln12_fu_299_p0;
wire  signed [15:0] mul_ln12_fu_299_p1;
wire  signed [15:0] mul_ln12_1_fu_307_p0;
wire  signed [15:0] tmp8_fu_321_p0;
wire  signed [15:0] tmp8_fu_321_p1;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

qspline_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
qspline_mul_mul_16s_16s_32_1_1_U1(
    .din0(mul_ln12_fu_299_p0),
    .din1(mul_ln12_fu_299_p1),
    .dout(mul_ln12_fu_299_p2)
);

qspline_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
qspline_mul_mul_16s_16s_32_1_1_U2(
    .din0(mul_ln12_1_fu_307_p0),
    .din1(a_q0),
    .dout(mul_ln12_1_fu_307_p2)
);

qspline_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
qspline_mul_mul_16s_16s_30_1_1_U3(
    .din0(g_q0),
    .din1(b_q0),
    .dout(mul_ln12_4_fu_314_p2)
);

qspline_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
qspline_mul_mul_16s_16s_32_1_1_U4(
    .din0(tmp8_fu_321_p0),
    .din1(tmp8_fu_321_p1),
    .dout(tmp8_fu_321_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_177_p2 == 1'd1))) begin
        i_0_reg_143 <= i_reg_334;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_143 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_165_p2 == 1'd0))) begin
        k_0_reg_154 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_154 <= k_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_334 <= i_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_342 <= k_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln12_2_reg_388 <= mul_ln12_2_fu_207_p2;
        sext_ln12_2_reg_393 <= sext_ln12_2_fu_211_p1;
        sext_ln12_reg_382 <= sext_ln12_fu_199_p1;
        tmp3_reg_399 <= tmp3_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_177_p2 == 1'd0))) begin
        zext_ln12_reg_347[6 : 0] <= zext_ln12_fu_189_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_ce0 = 1'b1;
    end else begin
        e_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        f_ce0 = 1'b1;
    end else begin
        f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        g_ce0 = 1'b1;
    end else begin
        g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = zext_ln12_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_165_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_177_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln12_fu_189_p1;

assign add_ln12_fu_279_p2 = ($signed(mul_ln12_2_reg_388) + $signed(sext_ln12_reg_382));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = out_r_q0;

assign b_address0 = zext_ln12_fu_189_p1;

assign c_address0 = zext_ln12_fu_189_p1;

assign d_address0 = 7'd0;

assign d_address1 = 7'd0;

assign d_ce0 = 1'b0;

assign d_ce1 = 1'b0;

assign d_d0 = 16'd0;

assign d_d1 = 16'd0;

assign d_we0 = 1'b0;

assign d_we1 = 1'b0;

assign e_address0 = zext_ln12_fu_189_p1;

assign f_address0 = zext_ln12_fu_189_p1;

assign g_address0 = zext_ln12_fu_189_p1;

assign i_fu_171_p2 = (i_0_reg_143 + 7'd1);

assign icmp_ln11_fu_177_p2 = ((k_0_reg_154 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_165_p2 = ((i_0_reg_143 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_183_p2 = (k_0_reg_154 + 7'd1);

assign mul_ln12_1_fu_307_p0 = sext_ln12_fu_199_p1;

assign mul_ln12_2_fu_207_p2 = ($signed(mul_ln12_1_fu_307_p2) * $signed(mul_ln12_fu_299_p2));

assign mul_ln12_3_fu_219_p1 = c_q0;

assign mul_ln12_3_fu_219_p2 = ($signed(mul_ln12_fu_299_p2) * $signed(mul_ln12_3_fu_219_p1));

assign mul_ln12_5_fu_283_p1 = sext_ln12_reg_382;

assign mul_ln12_5_fu_283_p2 = ($signed(add_ln12_fu_279_p2) * $signed(mul_ln12_5_fu_283_p1));

assign mul_ln12_fu_299_p0 = sext_ln12_fu_199_p1;

assign mul_ln12_fu_299_p1 = sext_ln12_fu_199_p1;

assign out_r_d0 = (mul_ln12_5_fu_283_p2 + tmp7_fu_288_p2);

assign sext_ln12_2_fu_211_p1 = $signed(f_q0);

assign sext_ln12_4_fu_242_p1 = $signed(e_q0);

assign sext_ln12_fu_199_p0 = b_q0;

assign sext_ln12_fu_199_p1 = sext_ln12_fu_199_p0;

assign shl_ln12_1_fu_230_p2 = mul_ln12_3_fu_219_p2 << 32'd1;

assign shl_ln12_2_fu_254_p3 = {{mul_ln12_4_fu_314_p2}, {2'd0}};

assign shl_ln12_fu_224_p2 = mul_ln12_3_fu_219_p2 << 32'd3;

assign sub_ln12_fu_236_p2 = (shl_ln12_fu_224_p2 - shl_ln12_1_fu_230_p2);

assign tmp3_fu_273_p2 = (sub_ln12_fu_236_p2 + tmp5_fu_267_p2);

assign tmp4_fu_261_p2 = ($signed(shl_ln12_2_fu_254_p3) + $signed(sext_ln12_4_fu_242_p1));

assign tmp5_fu_267_p1 = f_q0;

assign tmp5_fu_267_p2 = ($signed(tmp4_fu_261_p2) * $signed(tmp5_fu_267_p1));

assign tmp7_fu_288_p2 = ($signed(tmp8_fu_321_p2) * $signed(tmp3_reg_399));

assign tmp8_fu_321_p0 = sext_ln12_2_reg_393;

assign tmp8_fu_321_p1 = sext_ln12_2_reg_393;

assign zext_ln12_fu_189_p1 = k_0_reg_154;

always @ (posedge ap_clk) begin
    zext_ln12_reg_347[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //qspline
