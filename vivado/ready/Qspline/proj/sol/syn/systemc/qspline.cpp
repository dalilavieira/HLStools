// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "qspline.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic qspline::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic qspline::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> qspline::ap_ST_fsm_state1 = "1";
const sc_lv<6> qspline::ap_ST_fsm_state2 = "10";
const sc_lv<6> qspline::ap_ST_fsm_state3 = "100";
const sc_lv<6> qspline::ap_ST_fsm_state4 = "1000";
const sc_lv<6> qspline::ap_ST_fsm_state5 = "10000";
const sc_lv<6> qspline::ap_ST_fsm_state6 = "100000";
const sc_lv<32> qspline::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> qspline::ap_const_lv32_1 = "1";
const sc_lv<32> qspline::ap_const_lv32_2 = "10";
const sc_lv<1> qspline::ap_const_lv1_0 = "0";
const sc_lv<32> qspline::ap_const_lv32_3 = "11";
const sc_lv<7> qspline::ap_const_lv7_0 = "0000000";
const sc_lv<1> qspline::ap_const_lv1_1 = "1";
const sc_lv<32> qspline::ap_const_lv32_4 = "100";
const sc_lv<64> qspline::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> qspline::ap_const_lv7_64 = "1100100";
const sc_lv<7> qspline::ap_const_lv7_1 = "1";
const sc_lv<2> qspline::ap_const_lv2_0 = "00";
const sc_lv<32> qspline::ap_const_lv32_5 = "101";
const sc_lv<16> qspline::ap_const_lv16_0 = "0000000000000000";
const bool qspline::ap_const_boolean_1 = true;

qspline::qspline(sc_module_name name) : sc_module(name), mVcdFile(0) {
    qspline_mul_mul_16s_16s_32_1_1_U1 = new qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>("qspline_mul_mul_16s_16s_32_1_1_U1");
    qspline_mul_mul_16s_16s_32_1_1_U1->din0(mul_ln12_fu_299_p0);
    qspline_mul_mul_16s_16s_32_1_1_U1->din1(mul_ln12_fu_299_p1);
    qspline_mul_mul_16s_16s_32_1_1_U1->dout(mul_ln12_fu_299_p2);
    qspline_mul_mul_16s_16s_32_1_1_U2 = new qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>("qspline_mul_mul_16s_16s_32_1_1_U2");
    qspline_mul_mul_16s_16s_32_1_1_U2->din0(mul_ln12_1_fu_307_p0);
    qspline_mul_mul_16s_16s_32_1_1_U2->din1(a_q0);
    qspline_mul_mul_16s_16s_32_1_1_U2->dout(mul_ln12_1_fu_307_p2);
    qspline_mul_mul_16s_16s_30_1_1_U3 = new qspline_mul_mul_16s_16s_30_1_1<1,1,16,16,30>("qspline_mul_mul_16s_16s_30_1_1_U3");
    qspline_mul_mul_16s_16s_30_1_1_U3->din0(g_q0);
    qspline_mul_mul_16s_16s_30_1_1_U3->din1(b_q0);
    qspline_mul_mul_16s_16s_30_1_1_U3->dout(mul_ln12_4_fu_314_p2);
    qspline_mul_mul_16s_16s_32_1_1_U4 = new qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>("qspline_mul_mul_16s_16s_32_1_1_U4");
    qspline_mul_mul_16s_16s_32_1_1_U4->din0(tmp8_fu_321_p0);
    qspline_mul_mul_16s_16s_32_1_1_U4->din1(tmp8_fu_321_p1);
    qspline_mul_mul_16s_16s_32_1_1_U4->dout(tmp8_fu_321_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add_ln12_fu_279_p2);
    sensitive << ( sext_ln12_reg_382 );
    sensitive << ( mul_ln12_2_reg_388 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( out_r_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_d_address0);

    SC_METHOD(thread_d_address1);

    SC_METHOD(thread_d_ce0);

    SC_METHOD(thread_d_ce1);

    SC_METHOD(thread_d_d0);

    SC_METHOD(thread_d_d1);

    SC_METHOD(thread_d_we0);

    SC_METHOD(thread_d_we1);

    SC_METHOD(thread_e_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_e_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_f_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_f_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_g_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln12_fu_189_p1 );

    SC_METHOD(thread_g_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_171_p2);
    sensitive << ( i_0_reg_143 );

    SC_METHOD(thread_icmp_ln11_fu_177_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_icmp_ln9_fu_165_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_143 );

    SC_METHOD(thread_k_fu_183_p2);
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_mul_ln12_1_fu_307_p0);
    sensitive << ( sext_ln12_fu_199_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln12_2_fu_207_p2);
    sensitive << ( mul_ln12_1_fu_307_p2 );
    sensitive << ( mul_ln12_fu_299_p2 );

    SC_METHOD(thread_mul_ln12_3_fu_219_p1);
    sensitive << ( c_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln12_3_fu_219_p2);
    sensitive << ( mul_ln12_fu_299_p2 );
    sensitive << ( mul_ln12_3_fu_219_p1 );

    SC_METHOD(thread_mul_ln12_5_fu_283_p1);
    sensitive << ( sext_ln12_reg_382 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_mul_ln12_5_fu_283_p2);
    sensitive << ( add_ln12_fu_279_p2 );
    sensitive << ( mul_ln12_5_fu_283_p1 );

    SC_METHOD(thread_mul_ln12_fu_299_p0);
    sensitive << ( sext_ln12_fu_199_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln12_fu_299_p1);
    sensitive << ( sext_ln12_fu_199_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln12_reg_347 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln12_5_fu_283_p2 );
    sensitive << ( tmp7_fu_288_p2 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sext_ln12_2_fu_211_p1);
    sensitive << ( f_q0 );

    SC_METHOD(thread_sext_ln12_4_fu_242_p1);
    sensitive << ( e_q0 );

    SC_METHOD(thread_sext_ln12_fu_199_p0);
    sensitive << ( b_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln12_fu_199_p1);
    sensitive << ( sext_ln12_fu_199_p0 );

    SC_METHOD(thread_shl_ln12_1_fu_230_p2);
    sensitive << ( mul_ln12_3_fu_219_p2 );

    SC_METHOD(thread_shl_ln12_2_fu_254_p3);
    sensitive << ( mul_ln12_4_fu_314_p2 );

    SC_METHOD(thread_shl_ln12_fu_224_p2);
    sensitive << ( mul_ln12_3_fu_219_p2 );

    SC_METHOD(thread_sub_ln12_fu_236_p2);
    sensitive << ( shl_ln12_fu_224_p2 );
    sensitive << ( shl_ln12_1_fu_230_p2 );

    SC_METHOD(thread_tmp3_fu_273_p2);
    sensitive << ( sub_ln12_fu_236_p2 );
    sensitive << ( tmp5_fu_267_p2 );

    SC_METHOD(thread_tmp4_fu_261_p2);
    sensitive << ( shl_ln12_2_fu_254_p3 );
    sensitive << ( sext_ln12_4_fu_242_p1 );

    SC_METHOD(thread_tmp5_fu_267_p1);
    sensitive << ( f_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp5_fu_267_p2);
    sensitive << ( tmp4_fu_261_p2 );
    sensitive << ( tmp5_fu_267_p1 );

    SC_METHOD(thread_tmp7_fu_288_p2);
    sensitive << ( tmp3_reg_399 );
    sensitive << ( tmp8_fu_321_p2 );

    SC_METHOD(thread_tmp8_fu_321_p0);
    sensitive << ( sext_ln12_2_reg_393 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp8_fu_321_p1);
    sensitive << ( sext_ln12_2_reg_393 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_zext_ln12_fu_189_p1);
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln11_fu_177_p2 );
    sensitive << ( icmp_ln9_fu_165_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "qspline_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_q0, "(port)c_q0");
    sc_trace(mVcdFile, d_address0, "(port)d_address0");
    sc_trace(mVcdFile, d_ce0, "(port)d_ce0");
    sc_trace(mVcdFile, d_we0, "(port)d_we0");
    sc_trace(mVcdFile, d_d0, "(port)d_d0");
    sc_trace(mVcdFile, d_q0, "(port)d_q0");
    sc_trace(mVcdFile, d_address1, "(port)d_address1");
    sc_trace(mVcdFile, d_ce1, "(port)d_ce1");
    sc_trace(mVcdFile, d_we1, "(port)d_we1");
    sc_trace(mVcdFile, d_d1, "(port)d_d1");
    sc_trace(mVcdFile, d_q1, "(port)d_q1");
    sc_trace(mVcdFile, e_address0, "(port)e_address0");
    sc_trace(mVcdFile, e_ce0, "(port)e_ce0");
    sc_trace(mVcdFile, e_q0, "(port)e_q0");
    sc_trace(mVcdFile, f_address0, "(port)f_address0");
    sc_trace(mVcdFile, f_ce0, "(port)f_ce0");
    sc_trace(mVcdFile, f_q0, "(port)f_q0");
    sc_trace(mVcdFile, g_address0, "(port)g_address0");
    sc_trace(mVcdFile, g_ce0, "(port)g_ce0");
    sc_trace(mVcdFile, g_q0, "(port)g_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
    sc_trace(mVcdFile, out_r_q0, "(port)out_r_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_171_p2, "i_fu_171_p2");
    sc_trace(mVcdFile, i_reg_334, "i_reg_334");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_183_p2, "k_fu_183_p2");
    sc_trace(mVcdFile, k_reg_342, "k_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln12_fu_189_p1, "zext_ln12_fu_189_p1");
    sc_trace(mVcdFile, zext_ln12_reg_347, "zext_ln12_reg_347");
    sc_trace(mVcdFile, icmp_ln11_fu_177_p2, "icmp_ln11_fu_177_p2");
    sc_trace(mVcdFile, sext_ln12_fu_199_p1, "sext_ln12_fu_199_p1");
    sc_trace(mVcdFile, sext_ln12_reg_382, "sext_ln12_reg_382");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, mul_ln12_2_fu_207_p2, "mul_ln12_2_fu_207_p2");
    sc_trace(mVcdFile, mul_ln12_2_reg_388, "mul_ln12_2_reg_388");
    sc_trace(mVcdFile, sext_ln12_2_fu_211_p1, "sext_ln12_2_fu_211_p1");
    sc_trace(mVcdFile, sext_ln12_2_reg_393, "sext_ln12_2_reg_393");
    sc_trace(mVcdFile, tmp3_fu_273_p2, "tmp3_fu_273_p2");
    sc_trace(mVcdFile, tmp3_reg_399, "tmp3_reg_399");
    sc_trace(mVcdFile, i_0_reg_143, "i_0_reg_143");
    sc_trace(mVcdFile, k_0_reg_154, "k_0_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln9_fu_165_p2, "icmp_ln9_fu_165_p2");
    sc_trace(mVcdFile, sext_ln12_fu_199_p0, "sext_ln12_fu_199_p0");
    sc_trace(mVcdFile, mul_ln12_1_fu_307_p2, "mul_ln12_1_fu_307_p2");
    sc_trace(mVcdFile, mul_ln12_fu_299_p2, "mul_ln12_fu_299_p2");
    sc_trace(mVcdFile, mul_ln12_3_fu_219_p1, "mul_ln12_3_fu_219_p1");
    sc_trace(mVcdFile, mul_ln12_3_fu_219_p2, "mul_ln12_3_fu_219_p2");
    sc_trace(mVcdFile, shl_ln12_fu_224_p2, "shl_ln12_fu_224_p2");
    sc_trace(mVcdFile, shl_ln12_1_fu_230_p2, "shl_ln12_1_fu_230_p2");
    sc_trace(mVcdFile, mul_ln12_4_fu_314_p2, "mul_ln12_4_fu_314_p2");
    sc_trace(mVcdFile, shl_ln12_2_fu_254_p3, "shl_ln12_2_fu_254_p3");
    sc_trace(mVcdFile, sext_ln12_4_fu_242_p1, "sext_ln12_4_fu_242_p1");
    sc_trace(mVcdFile, tmp4_fu_261_p2, "tmp4_fu_261_p2");
    sc_trace(mVcdFile, tmp5_fu_267_p1, "tmp5_fu_267_p1");
    sc_trace(mVcdFile, sub_ln12_fu_236_p2, "sub_ln12_fu_236_p2");
    sc_trace(mVcdFile, tmp5_fu_267_p2, "tmp5_fu_267_p2");
    sc_trace(mVcdFile, add_ln12_fu_279_p2, "add_ln12_fu_279_p2");
    sc_trace(mVcdFile, mul_ln12_5_fu_283_p1, "mul_ln12_5_fu_283_p1");
    sc_trace(mVcdFile, tmp8_fu_321_p2, "tmp8_fu_321_p2");
    sc_trace(mVcdFile, mul_ln12_5_fu_283_p2, "mul_ln12_5_fu_283_p2");
    sc_trace(mVcdFile, tmp7_fu_288_p2, "tmp7_fu_288_p2");
    sc_trace(mVcdFile, mul_ln12_fu_299_p0, "mul_ln12_fu_299_p0");
    sc_trace(mVcdFile, mul_ln12_fu_299_p1, "mul_ln12_fu_299_p1");
    sc_trace(mVcdFile, mul_ln12_1_fu_307_p0, "mul_ln12_1_fu_307_p0");
    sc_trace(mVcdFile, tmp8_fu_321_p0, "tmp8_fu_321_p0");
    sc_trace(mVcdFile, tmp8_fu_321_p1, "tmp8_fu_321_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("qspline.hdltvin.dat");
    mHdltvoutHandle.open("qspline.hdltvout.dat");
}

qspline::~qspline() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete qspline_mul_mul_16s_16s_32_1_1_U1;
    delete qspline_mul_mul_16s_16s_32_1_1_U2;
    delete qspline_mul_mul_16s_16s_30_1_1_U3;
    delete qspline_mul_mul_16s_16s_32_1_1_U4;
}

void qspline::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_177_p2.read(), ap_const_lv1_1))) {
        i_0_reg_143 = i_reg_334.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_143 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_165_p2.read()))) {
        k_0_reg_154 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_0_reg_154 = k_reg_342.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_334 = i_fu_171_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_342 = k_fu_183_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln12_2_reg_388 = mul_ln12_2_fu_207_p2.read();
        sext_ln12_2_reg_393 = sext_ln12_2_fu_211_p1.read();
        sext_ln12_reg_382 = sext_ln12_fu_199_p1.read();
        tmp3_reg_399 = tmp3_fu_273_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_177_p2.read(), ap_const_lv1_0))) {
        zext_ln12_reg_347 = zext_ln12_fu_189_p1.read();
    }
}

void qspline::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_add_ln12_fu_279_p2() {
    add_ln12_fu_279_p2 = (!mul_ln12_2_reg_388.read().is_01() || !sext_ln12_reg_382.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln12_2_reg_388.read()) + sc_bigint<32>(sext_ln12_reg_382.read()));
}

void qspline::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void qspline::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void qspline::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void qspline::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void qspline::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void qspline::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void qspline::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void qspline::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void qspline::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void qspline::thread_ap_return() {
    ap_return = out_r_q0.read();
}

void qspline::thread_b_address0() {
    b_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_c_address0() {
    c_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_d_address0() {
    d_address0 = ap_const_lv7_0;
}

void qspline::thread_d_address1() {
    d_address1 = ap_const_lv7_0;
}

void qspline::thread_d_ce0() {
    d_ce0 = ap_const_logic_0;
}

void qspline::thread_d_ce1() {
    d_ce1 = ap_const_logic_0;
}

void qspline::thread_d_d0() {
    d_d0 = ap_const_lv16_0;
}

void qspline::thread_d_d1() {
    d_d1 = ap_const_lv16_0;
}

void qspline::thread_d_we0() {
    d_we0 = ap_const_logic_0;
}

void qspline::thread_d_we1() {
    d_we1 = ap_const_logic_0;
}

void qspline::thread_e_address0() {
    e_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_e_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        e_ce0 = ap_const_logic_1;
    } else {
        e_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_f_address0() {
    f_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_f_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        f_ce0 = ap_const_logic_1;
    } else {
        f_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_g_address0() {
    g_address0 =  (sc_lv<7>) (zext_ln12_fu_189_p1.read());
}

void qspline::thread_g_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        g_ce0 = ap_const_logic_1;
    } else {
        g_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_i_fu_171_p2() {
    i_fu_171_p2 = (!i_0_reg_143.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_143.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void qspline::thread_icmp_ln11_fu_177_p2() {
    icmp_ln11_fu_177_p2 = (!k_0_reg_154.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_154.read() == ap_const_lv7_64);
}

void qspline::thread_icmp_ln9_fu_165_p2() {
    icmp_ln9_fu_165_p2 = (!i_0_reg_143.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_143.read() == ap_const_lv7_64);
}

void qspline::thread_k_fu_183_p2() {
    k_fu_183_p2 = (!k_0_reg_154.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_154.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void qspline::thread_mul_ln12_1_fu_307_p0() {
    mul_ln12_1_fu_307_p0 =  (sc_lv<16>) (sext_ln12_fu_199_p1.read());
}

void qspline::thread_mul_ln12_2_fu_207_p2() {
    mul_ln12_2_fu_207_p2 = (!mul_ln12_1_fu_307_p2.read().is_01() || !mul_ln12_fu_299_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln12_1_fu_307_p2.read()) * sc_bigint<32>(mul_ln12_fu_299_p2.read());
}

void qspline::thread_mul_ln12_3_fu_219_p1() {
    mul_ln12_3_fu_219_p1 = c_q0.read();
}

void qspline::thread_mul_ln12_3_fu_219_p2() {
    mul_ln12_3_fu_219_p2 = (!mul_ln12_fu_299_p2.read().is_01() || !mul_ln12_3_fu_219_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln12_fu_299_p2.read()) * sc_bigint<16>(mul_ln12_3_fu_219_p1.read());
}

void qspline::thread_mul_ln12_5_fu_283_p1() {
    mul_ln12_5_fu_283_p1 =  (sc_lv<16>) (sext_ln12_reg_382.read());
}

void qspline::thread_mul_ln12_5_fu_283_p2() {
    mul_ln12_5_fu_283_p2 = (!add_ln12_fu_279_p2.read().is_01() || !mul_ln12_5_fu_283_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(add_ln12_fu_279_p2.read()) * sc_bigint<16>(mul_ln12_5_fu_283_p1.read());
}

void qspline::thread_mul_ln12_fu_299_p0() {
    mul_ln12_fu_299_p0 =  (sc_lv<16>) (sext_ln12_fu_199_p1.read());
}

void qspline::thread_mul_ln12_fu_299_p1() {
    mul_ln12_fu_299_p1 =  (sc_lv<16>) (sext_ln12_fu_199_p1.read());
}

void qspline::thread_out_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_address0 =  (sc_lv<7>) (zext_ln12_reg_347.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        out_r_address0 = "XXXXXXX";
    }
}

void qspline::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void qspline::thread_out_r_d0() {
    out_r_d0 = (!mul_ln12_5_fu_283_p2.read().is_01() || !tmp7_fu_288_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln12_5_fu_283_p2.read()) + sc_biguint<32>(tmp7_fu_288_p2.read()));
}

void qspline::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void qspline::thread_sext_ln12_2_fu_211_p1() {
    sext_ln12_2_fu_211_p1 = esl_sext<32,16>(f_q0.read());
}

void qspline::thread_sext_ln12_4_fu_242_p1() {
    sext_ln12_4_fu_242_p1 = esl_sext<32,16>(e_q0.read());
}

void qspline::thread_sext_ln12_fu_199_p0() {
    sext_ln12_fu_199_p0 = b_q0.read();
}

void qspline::thread_sext_ln12_fu_199_p1() {
    sext_ln12_fu_199_p1 = esl_sext<32,16>(sext_ln12_fu_199_p0.read());
}

void qspline::thread_shl_ln12_1_fu_230_p2() {
    shl_ln12_1_fu_230_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): mul_ln12_3_fu_219_p2.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void qspline::thread_shl_ln12_2_fu_254_p3() {
    shl_ln12_2_fu_254_p3 = esl_concat<30,2>(mul_ln12_4_fu_314_p2.read(), ap_const_lv2_0);
}

void qspline::thread_shl_ln12_fu_224_p2() {
    shl_ln12_fu_224_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): mul_ln12_3_fu_219_p2.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void qspline::thread_sub_ln12_fu_236_p2() {
    sub_ln12_fu_236_p2 = (!shl_ln12_fu_224_p2.read().is_01() || !shl_ln12_1_fu_230_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln12_fu_224_p2.read()) - sc_biguint<32>(shl_ln12_1_fu_230_p2.read()));
}

void qspline::thread_tmp3_fu_273_p2() {
    tmp3_fu_273_p2 = (!sub_ln12_fu_236_p2.read().is_01() || !tmp5_fu_267_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sub_ln12_fu_236_p2.read()) + sc_biguint<32>(tmp5_fu_267_p2.read()));
}

void qspline::thread_tmp4_fu_261_p2() {
    tmp4_fu_261_p2 = (!shl_ln12_2_fu_254_p3.read().is_01() || !sext_ln12_4_fu_242_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln12_2_fu_254_p3.read()) + sc_bigint<32>(sext_ln12_4_fu_242_p1.read()));
}

void qspline::thread_tmp5_fu_267_p1() {
    tmp5_fu_267_p1 = f_q0.read();
}

void qspline::thread_tmp5_fu_267_p2() {
    tmp5_fu_267_p2 = (!tmp4_fu_261_p2.read().is_01() || !tmp5_fu_267_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp4_fu_261_p2.read()) * sc_bigint<16>(tmp5_fu_267_p1.read());
}

void qspline::thread_tmp7_fu_288_p2() {
    tmp7_fu_288_p2 = (!tmp8_fu_321_p2.read().is_01() || !tmp3_reg_399.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp8_fu_321_p2.read()) * sc_bigint<32>(tmp3_reg_399.read());
}

void qspline::thread_tmp8_fu_321_p0() {
    tmp8_fu_321_p0 =  (sc_lv<16>) (sext_ln12_2_reg_393.read());
}

void qspline::thread_tmp8_fu_321_p1() {
    tmp8_fu_321_p1 =  (sc_lv<16>) (sext_ln12_2_reg_393.read());
}

void qspline::thread_zext_ln12_fu_189_p1() {
    zext_ln12_fu_189_p1 = esl_zext<64,7>(k_0_reg_154.read());
}

void qspline::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_165_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_177_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void qspline::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q0\" :  \"" << c_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_address0\" :  \"" << d_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_ce0\" :  \"" << d_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_we0\" :  \"" << d_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_d0\" :  \"" << d_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_q0\" :  \"" << d_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_address1\" :  \"" << d_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_ce1\" :  \"" << d_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_we1\" :  \"" << d_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_d1\" :  \"" << d_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_q1\" :  \"" << d_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"e_address0\" :  \"" << e_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"e_ce0\" :  \"" << e_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"e_q0\" :  \"" << e_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"f_address0\" :  \"" << f_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"f_ce0\" :  \"" << f_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"f_q0\" :  \"" << f_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_address0\" :  \"" << g_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_ce0\" :  \"" << g_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"g_q0\" :  \"" << g_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_q0\" :  \"" << out_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

