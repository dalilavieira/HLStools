// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _qspline_HH_
#define _qspline_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "qspline_mul_mul_16s_16s_32_1_1.h"
#include "qspline_mul_mul_16s_16s_30_1_1.h"

namespace ap_rtl {

struct qspline : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<16> > a_q0;
    sc_out< sc_lv<7> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<16> > b_q0;
    sc_out< sc_lv<7> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<16> > c_q0;
    sc_out< sc_lv<7> > d_address0;
    sc_out< sc_logic > d_ce0;
    sc_out< sc_logic > d_we0;
    sc_out< sc_lv<16> > d_d0;
    sc_in< sc_lv<16> > d_q0;
    sc_out< sc_lv<7> > d_address1;
    sc_out< sc_logic > d_ce1;
    sc_out< sc_logic > d_we1;
    sc_out< sc_lv<16> > d_d1;
    sc_in< sc_lv<16> > d_q1;
    sc_out< sc_lv<7> > e_address0;
    sc_out< sc_logic > e_ce0;
    sc_in< sc_lv<16> > e_q0;
    sc_out< sc_lv<7> > f_address0;
    sc_out< sc_logic > f_ce0;
    sc_in< sc_lv<16> > f_q0;
    sc_out< sc_lv<7> > g_address0;
    sc_out< sc_logic > g_ce0;
    sc_in< sc_lv<16> > g_q0;
    sc_out< sc_lv<7> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;
    sc_in< sc_lv<32> > out_r_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    qspline(sc_module_name name);
    SC_HAS_PROCESS(qspline);

    ~qspline();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>* qspline_mul_mul_16s_16s_32_1_1_U1;
    qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>* qspline_mul_mul_16s_16s_32_1_1_U2;
    qspline_mul_mul_16s_16s_30_1_1<1,1,16,16,30>* qspline_mul_mul_16s_16s_30_1_1_U3;
    qspline_mul_mul_16s_16s_32_1_1<1,1,16,16,32>* qspline_mul_mul_16s_16s_32_1_1_U4;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_171_p2;
    sc_signal< sc_lv<7> > i_reg_334;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > k_fu_183_p2;
    sc_signal< sc_lv<7> > k_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln12_fu_189_p1;
    sc_signal< sc_lv<64> > zext_ln12_reg_347;
    sc_signal< sc_lv<1> > icmp_ln11_fu_177_p2;
    sc_signal< sc_lv<32> > sext_ln12_fu_199_p1;
    sc_signal< sc_lv<32> > sext_ln12_reg_382;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > mul_ln12_2_fu_207_p2;
    sc_signal< sc_lv<32> > mul_ln12_2_reg_388;
    sc_signal< sc_lv<32> > sext_ln12_2_fu_211_p1;
    sc_signal< sc_lv<32> > sext_ln12_2_reg_393;
    sc_signal< sc_lv<32> > tmp3_fu_273_p2;
    sc_signal< sc_lv<32> > tmp3_reg_399;
    sc_signal< sc_lv<7> > i_0_reg_143;
    sc_signal< sc_lv<7> > k_0_reg_154;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln9_fu_165_p2;
    sc_signal< sc_lv<16> > sext_ln12_fu_199_p0;
    sc_signal< sc_lv<32> > mul_ln12_1_fu_307_p2;
    sc_signal< sc_lv<32> > mul_ln12_fu_299_p2;
    sc_signal< sc_lv<16> > mul_ln12_3_fu_219_p1;
    sc_signal< sc_lv<32> > mul_ln12_3_fu_219_p2;
    sc_signal< sc_lv<32> > shl_ln12_fu_224_p2;
    sc_signal< sc_lv<32> > shl_ln12_1_fu_230_p2;
    sc_signal< sc_lv<30> > mul_ln12_4_fu_314_p2;
    sc_signal< sc_lv<32> > shl_ln12_2_fu_254_p3;
    sc_signal< sc_lv<32> > sext_ln12_4_fu_242_p1;
    sc_signal< sc_lv<32> > tmp4_fu_261_p2;
    sc_signal< sc_lv<16> > tmp5_fu_267_p1;
    sc_signal< sc_lv<32> > sub_ln12_fu_236_p2;
    sc_signal< sc_lv<32> > tmp5_fu_267_p2;
    sc_signal< sc_lv<32> > add_ln12_fu_279_p2;
    sc_signal< sc_lv<16> > mul_ln12_5_fu_283_p1;
    sc_signal< sc_lv<32> > tmp8_fu_321_p2;
    sc_signal< sc_lv<32> > mul_ln12_5_fu_283_p2;
    sc_signal< sc_lv<32> > tmp7_fu_288_p2;
    sc_signal< sc_lv<16> > mul_ln12_fu_299_p0;
    sc_signal< sc_lv<16> > mul_ln12_fu_299_p1;
    sc_signal< sc_lv<16> > mul_ln12_1_fu_307_p0;
    sc_signal< sc_lv<16> > tmp8_fu_321_p0;
    sc_signal< sc_lv<16> > tmp8_fu_321_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_add_ln12_fu_279_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_d_address0();
    void thread_d_address1();
    void thread_d_ce0();
    void thread_d_ce1();
    void thread_d_d0();
    void thread_d_d1();
    void thread_d_we0();
    void thread_d_we1();
    void thread_e_address0();
    void thread_e_ce0();
    void thread_f_address0();
    void thread_f_ce0();
    void thread_g_address0();
    void thread_g_ce0();
    void thread_i_fu_171_p2();
    void thread_icmp_ln11_fu_177_p2();
    void thread_icmp_ln9_fu_165_p2();
    void thread_k_fu_183_p2();
    void thread_mul_ln12_1_fu_307_p0();
    void thread_mul_ln12_2_fu_207_p2();
    void thread_mul_ln12_3_fu_219_p1();
    void thread_mul_ln12_3_fu_219_p2();
    void thread_mul_ln12_5_fu_283_p1();
    void thread_mul_ln12_5_fu_283_p2();
    void thread_mul_ln12_fu_299_p0();
    void thread_mul_ln12_fu_299_p1();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_sext_ln12_2_fu_211_p1();
    void thread_sext_ln12_4_fu_242_p1();
    void thread_sext_ln12_fu_199_p0();
    void thread_sext_ln12_fu_199_p1();
    void thread_shl_ln12_1_fu_230_p2();
    void thread_shl_ln12_2_fu_254_p3();
    void thread_shl_ln12_fu_224_p2();
    void thread_sub_ln12_fu_236_p2();
    void thread_tmp3_fu_273_p2();
    void thread_tmp4_fu_261_p2();
    void thread_tmp5_fu_267_p1();
    void thread_tmp5_fu_267_p2();
    void thread_tmp7_fu_288_p2();
    void thread_tmp8_fu_321_p0();
    void thread_tmp8_fu_321_p1();
    void thread_zext_ln12_fu_189_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
