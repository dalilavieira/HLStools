// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mibench,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.621000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=57,HLS_SYN_LUT=219,HLS_VERSION=2019_1}" *)

module mibench (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_q0,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
output  [6:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
output  [6:0] C_address0;
output   C_ce0;
input  [15:0] C_q0;
output  [6:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
input  [31:0] OUT_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg[6:0] OUT_r_address0;
reg OUT_r_ce0;
reg OUT_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_124_p2;
reg   [6:0] i_reg_232;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_136_p2;
reg   [6:0] k_reg_240;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln10_1_fu_142_p1;
reg   [63:0] zext_ln10_1_reg_245;
wire   [0:0] icmp_ln9_fu_130_p2;
reg  signed [15:0] A_load_reg_257;
wire    ap_CS_fsm_state4;
reg   [6:0] i_0_reg_96;
reg   [6:0] k_0_reg_107;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln7_fu_118_p2;
wire   [15:0] shl_ln10_fu_147_p2;
wire   [15:0] shl_ln10_1_fu_152_p2;
wire   [15:0] sub_ln10_fu_157_p2;
wire   [15:0] add_ln10_fu_163_p2;
wire   [15:0] shl_ln10_2_fu_169_p2;
wire   [15:0] add_ln10_1_fu_175_p2;
wire  signed [15:0] add_ln10_2_fu_181_p1;
wire   [15:0] tmp5_fu_192_p2;
wire  signed [15:0] grp_fu_214_p4;
wire  signed [15:0] mul_ln10_fu_208_p1;
wire   [15:0] grp_fu_214_p0;
wire   [15:0] grp_fu_214_p1;
wire  signed [15:0] mul_ln10_fu_208_p2;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

mibench_mul_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mibench_mul_mul_16s_16s_16_1_1_U1(
    .din0(C_q0),
    .din1(mul_ln10_fu_208_p1),
    .dout(mul_ln10_fu_208_p2)
);

mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2(
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .din2(A_load_reg_257),
    .din3(mul_ln10_fu_208_p2),
    .dout(grp_fu_214_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_96 <= i_reg_232;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_96 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_107 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_107 <= k_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_load_reg_257 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_232 <= i_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_240 <= k_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln10_1_reg_245[6 : 0] <= zext_ln10_1_fu_142_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        OUT_r_address0 = zext_ln10_1_reg_245;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OUT_r_address0 = 64'd0;
    end else begin
        OUT_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln10_1_fu_142_p1;

assign B_address0 = zext_ln10_1_reg_245;

assign C_address0 = zext_ln10_1_reg_245;

assign OUT_r_d0 = $unsigned(grp_fu_214_p4);

assign add_ln10_1_fu_175_p2 = (add_ln10_fu_163_p2 + shl_ln10_2_fu_169_p2);

assign add_ln10_2_fu_181_p1 = C_q0;

assign add_ln10_fu_163_p2 = (16'd43 + sub_ln10_fu_157_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = OUT_r_q0;

assign grp_fu_214_p0 = (tmp5_fu_192_p2 + shl_ln10_fu_147_p2);

assign grp_fu_214_p1 = ($signed(A_load_reg_257) + $signed(B_q0));

assign i_fu_124_p2 = (i_0_reg_96 + 7'd1);

assign icmp_ln7_fu_118_p2 = ((i_0_reg_96 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_130_p2 = ((k_0_reg_107 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_136_p2 = (k_0_reg_107 + 7'd1);

assign mul_ln10_fu_208_p1 = ($signed(add_ln10_1_fu_175_p2) + $signed(add_ln10_2_fu_181_p1));

assign shl_ln10_1_fu_152_p2 = A_load_reg_257 << 16'd1;

assign shl_ln10_2_fu_169_p2 = B_q0 << 16'd1;

assign shl_ln10_fu_147_p2 = A_load_reg_257 << 16'd3;

assign sub_ln10_fu_157_p2 = (shl_ln10_fu_147_p2 - shl_ln10_1_fu_152_p2);

assign tmp5_fu_192_p2 = (16'd44 + sub_ln10_fu_157_p2);

assign zext_ln10_1_fu_142_p1 = k_0_reg_107;

always @ (posedge ap_clk) begin
    zext_ln10_1_reg_245[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //mibench
