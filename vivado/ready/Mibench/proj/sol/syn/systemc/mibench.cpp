// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mibench.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mibench::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mibench::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> mibench::ap_ST_fsm_state1 = "1";
const sc_lv<6> mibench::ap_ST_fsm_state2 = "10";
const sc_lv<6> mibench::ap_ST_fsm_state3 = "100";
const sc_lv<6> mibench::ap_ST_fsm_state4 = "1000";
const sc_lv<6> mibench::ap_ST_fsm_state5 = "10000";
const sc_lv<6> mibench::ap_ST_fsm_state6 = "100000";
const sc_lv<32> mibench::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mibench::ap_const_lv32_1 = "1";
const sc_lv<32> mibench::ap_const_lv32_2 = "10";
const sc_lv<1> mibench::ap_const_lv1_0 = "0";
const sc_lv<32> mibench::ap_const_lv32_3 = "11";
const sc_lv<7> mibench::ap_const_lv7_0 = "0000000";
const sc_lv<1> mibench::ap_const_lv1_1 = "1";
const sc_lv<32> mibench::ap_const_lv32_4 = "100";
const sc_lv<64> mibench::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> mibench::ap_const_lv7_64 = "1100100";
const sc_lv<7> mibench::ap_const_lv7_1 = "1";
const sc_lv<16> mibench::ap_const_lv16_3 = "11";
const sc_lv<16> mibench::ap_const_lv16_1 = "1";
const sc_lv<16> mibench::ap_const_lv16_2B = "101011";
const sc_lv<16> mibench::ap_const_lv16_2C = "101100";
const sc_lv<32> mibench::ap_const_lv32_5 = "101";
const bool mibench::ap_const_boolean_1 = true;

mibench::mibench(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mibench_mul_mul_16s_16s_16_1_1_U1 = new mibench_mul_mul_16s_16s_16_1_1<1,1,16,16,16>("mibench_mul_mul_16s_16s_16_1_1_U1");
    mibench_mul_mul_16s_16s_16_1_1_U1->din0(C_q0);
    mibench_mul_mul_16s_16s_16_1_1_U1->din1(mul_ln10_fu_208_p1);
    mibench_mul_mul_16s_16s_16_1_1_U1->dout(mul_ln10_fu_208_p2);
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2 = new mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1<1,1,16,16,16,16,16>("mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2");
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2->din0(grp_fu_214_p0);
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2->din1(grp_fu_214_p1);
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2->din2(A_load_reg_257);
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2->din3(mul_ln10_fu_208_p2);
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2->dout(grp_fu_214_p4);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln10_1_fu_142_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_B_address0);
    sensitive << ( zext_ln10_1_reg_245 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_address0);
    sensitive << ( zext_ln10_1_reg_245 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_OUT_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln10_1_reg_245 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_OUT_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_OUT_r_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_fu_214_p4 );

    SC_METHOD(thread_OUT_r_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_add_ln10_1_fu_175_p2);
    sensitive << ( add_ln10_fu_163_p2 );
    sensitive << ( shl_ln10_2_fu_169_p2 );

    SC_METHOD(thread_add_ln10_2_fu_181_p1);
    sensitive << ( C_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_add_ln10_fu_163_p2);
    sensitive << ( sub_ln10_fu_157_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( OUT_r_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_214_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( shl_ln10_fu_147_p2 );
    sensitive << ( tmp5_fu_192_p2 );

    SC_METHOD(thread_grp_fu_214_p1);
    sensitive << ( B_q0 );
    sensitive << ( A_load_reg_257 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_124_p2);
    sensitive << ( i_0_reg_96 );

    SC_METHOD(thread_icmp_ln7_fu_118_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_96 );

    SC_METHOD(thread_icmp_ln9_fu_130_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_107 );

    SC_METHOD(thread_k_fu_136_p2);
    sensitive << ( k_0_reg_107 );

    SC_METHOD(thread_mul_ln10_fu_208_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln10_1_fu_175_p2 );
    sensitive << ( add_ln10_2_fu_181_p1 );

    SC_METHOD(thread_shl_ln10_1_fu_152_p2);
    sensitive << ( A_load_reg_257 );

    SC_METHOD(thread_shl_ln10_2_fu_169_p2);
    sensitive << ( B_q0 );

    SC_METHOD(thread_shl_ln10_fu_147_p2);
    sensitive << ( A_load_reg_257 );

    SC_METHOD(thread_sub_ln10_fu_157_p2);
    sensitive << ( shl_ln10_fu_147_p2 );
    sensitive << ( shl_ln10_1_fu_152_p2 );

    SC_METHOD(thread_tmp5_fu_192_p2);
    sensitive << ( sub_ln10_fu_157_p2 );

    SC_METHOD(thread_zext_ln10_1_fu_142_p1);
    sensitive << ( k_0_reg_107 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln9_fu_130_p2 );
    sensitive << ( icmp_ln7_fu_118_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mibench_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, OUT_r_address0, "(port)OUT_r_address0");
    sc_trace(mVcdFile, OUT_r_ce0, "(port)OUT_r_ce0");
    sc_trace(mVcdFile, OUT_r_we0, "(port)OUT_r_we0");
    sc_trace(mVcdFile, OUT_r_d0, "(port)OUT_r_d0");
    sc_trace(mVcdFile, OUT_r_q0, "(port)OUT_r_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_124_p2, "i_fu_124_p2");
    sc_trace(mVcdFile, i_reg_232, "i_reg_232");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_136_p2, "k_fu_136_p2");
    sc_trace(mVcdFile, k_reg_240, "k_reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln10_1_fu_142_p1, "zext_ln10_1_fu_142_p1");
    sc_trace(mVcdFile, zext_ln10_1_reg_245, "zext_ln10_1_reg_245");
    sc_trace(mVcdFile, icmp_ln9_fu_130_p2, "icmp_ln9_fu_130_p2");
    sc_trace(mVcdFile, A_load_reg_257, "A_load_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_reg_96, "i_0_reg_96");
    sc_trace(mVcdFile, k_0_reg_107, "k_0_reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln7_fu_118_p2, "icmp_ln7_fu_118_p2");
    sc_trace(mVcdFile, shl_ln10_fu_147_p2, "shl_ln10_fu_147_p2");
    sc_trace(mVcdFile, shl_ln10_1_fu_152_p2, "shl_ln10_1_fu_152_p2");
    sc_trace(mVcdFile, sub_ln10_fu_157_p2, "sub_ln10_fu_157_p2");
    sc_trace(mVcdFile, add_ln10_fu_163_p2, "add_ln10_fu_163_p2");
    sc_trace(mVcdFile, shl_ln10_2_fu_169_p2, "shl_ln10_2_fu_169_p2");
    sc_trace(mVcdFile, add_ln10_1_fu_175_p2, "add_ln10_1_fu_175_p2");
    sc_trace(mVcdFile, add_ln10_2_fu_181_p1, "add_ln10_2_fu_181_p1");
    sc_trace(mVcdFile, tmp5_fu_192_p2, "tmp5_fu_192_p2");
    sc_trace(mVcdFile, grp_fu_214_p4, "grp_fu_214_p4");
    sc_trace(mVcdFile, mul_ln10_fu_208_p1, "mul_ln10_fu_208_p1");
    sc_trace(mVcdFile, grp_fu_214_p0, "grp_fu_214_p0");
    sc_trace(mVcdFile, grp_fu_214_p1, "grp_fu_214_p1");
    sc_trace(mVcdFile, mul_ln10_fu_208_p2, "mul_ln10_fu_208_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mibench.hdltvin.dat");
    mHdltvoutHandle.open("mibench.hdltvout.dat");
}

mibench::~mibench() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mibench_mul_mul_16s_16s_16_1_1_U1;
    delete mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2;
}

void mibench::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_130_p2.read(), ap_const_lv1_1))) {
        i_0_reg_96 = i_reg_232.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_96 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_118_p2.read()))) {
        k_0_reg_107 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_0_reg_107 = k_reg_240.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_load_reg_257 = A_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_232 = i_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_240 = k_fu_136_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_130_p2.read(), ap_const_lv1_0))) {
        zext_ln10_1_reg_245 = zext_ln10_1_fu_142_p1.read();
    }
}

void mibench::thread_A_address0() {
    A_address0 =  (sc_lv<7>) (zext_ln10_1_fu_142_p1.read());
}

void mibench::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void mibench::thread_B_address0() {
    B_address0 =  (sc_lv<7>) (zext_ln10_1_reg_245.read());
}

void mibench::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void mibench::thread_C_address0() {
    C_address0 =  (sc_lv<7>) (zext_ln10_1_reg_245.read());
}

void mibench::thread_C_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void mibench::thread_OUT_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        OUT_r_address0 =  (sc_lv<7>) (zext_ln10_1_reg_245.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        OUT_r_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        OUT_r_address0 = "XXXXXXX";
    }
}

void mibench::thread_OUT_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        OUT_r_ce0 = ap_const_logic_1;
    } else {
        OUT_r_ce0 = ap_const_logic_0;
    }
}

void mibench::thread_OUT_r_d0() {
    OUT_r_d0 = esl_zext<32,16>(grp_fu_214_p4.read());
}

void mibench::thread_OUT_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        OUT_r_we0 = ap_const_logic_1;
    } else {
        OUT_r_we0 = ap_const_logic_0;
    }
}

void mibench::thread_add_ln10_1_fu_175_p2() {
    add_ln10_1_fu_175_p2 = (!add_ln10_fu_163_p2.read().is_01() || !shl_ln10_2_fu_169_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(add_ln10_fu_163_p2.read()) + sc_biguint<16>(shl_ln10_2_fu_169_p2.read()));
}

void mibench::thread_add_ln10_2_fu_181_p1() {
    add_ln10_2_fu_181_p1 = C_q0.read();
}

void mibench::thread_add_ln10_fu_163_p2() {
    add_ln10_fu_163_p2 = (!ap_const_lv16_2B.is_01() || !sub_ln10_fu_157_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_2B) + sc_biguint<16>(sub_ln10_fu_157_p2.read()));
}

void mibench::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mibench::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mibench::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mibench::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mibench::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mibench::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mibench::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mibench::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mibench::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mibench::thread_ap_return() {
    ap_return = OUT_r_q0.read();
}

void mibench::thread_grp_fu_214_p0() {
    grp_fu_214_p0 = (!tmp5_fu_192_p2.read().is_01() || !shl_ln10_fu_147_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp5_fu_192_p2.read()) + sc_biguint<16>(shl_ln10_fu_147_p2.read()));
}

void mibench::thread_grp_fu_214_p1() {
    grp_fu_214_p1 = (!A_load_reg_257.read().is_01() || !B_q0.read().is_01())? sc_lv<16>(): (sc_bigint<16>(A_load_reg_257.read()) + sc_biguint<16>(B_q0.read()));
}

void mibench::thread_i_fu_124_p2() {
    i_fu_124_p2 = (!i_0_reg_96.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_96.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void mibench::thread_icmp_ln7_fu_118_p2() {
    icmp_ln7_fu_118_p2 = (!i_0_reg_96.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_96.read() == ap_const_lv7_64);
}

void mibench::thread_icmp_ln9_fu_130_p2() {
    icmp_ln9_fu_130_p2 = (!k_0_reg_107.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_107.read() == ap_const_lv7_64);
}

void mibench::thread_k_fu_136_p2() {
    k_fu_136_p2 = (!k_0_reg_107.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_107.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void mibench::thread_mul_ln10_fu_208_p1() {
    mul_ln10_fu_208_p1 = (!add_ln10_1_fu_175_p2.read().is_01() || !add_ln10_2_fu_181_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(add_ln10_1_fu_175_p2.read()) + sc_bigint<16>(add_ln10_2_fu_181_p1.read()));
}

void mibench::thread_shl_ln10_1_fu_152_p2() {
    shl_ln10_1_fu_152_p2 = (!ap_const_lv16_1.is_01())? sc_lv<16>(): A_load_reg_257.read() << (unsigned short)ap_const_lv16_1.to_uint();
}

void mibench::thread_shl_ln10_2_fu_169_p2() {
    shl_ln10_2_fu_169_p2 = (!ap_const_lv16_1.is_01())? sc_lv<16>(): B_q0.read() << (unsigned short)ap_const_lv16_1.to_uint();
}

void mibench::thread_shl_ln10_fu_147_p2() {
    shl_ln10_fu_147_p2 = (!ap_const_lv16_3.is_01())? sc_lv<16>(): A_load_reg_257.read() << (unsigned short)ap_const_lv16_3.to_uint();
}

void mibench::thread_sub_ln10_fu_157_p2() {
    sub_ln10_fu_157_p2 = (!shl_ln10_fu_147_p2.read().is_01() || !shl_ln10_1_fu_152_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(shl_ln10_fu_147_p2.read()) - sc_biguint<16>(shl_ln10_1_fu_152_p2.read()));
}

void mibench::thread_tmp5_fu_192_p2() {
    tmp5_fu_192_p2 = (!ap_const_lv16_2C.is_01() || !sub_ln10_fu_157_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_2C) + sc_biguint<16>(sub_ln10_fu_157_p2.read()));
}

void mibench::thread_zext_ln10_1_fu_142_p1() {
    zext_ln10_1_fu_142_p1 = esl_zext<64,7>(k_0_reg_107.read());
}

void mibench::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_118_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_130_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void mibench::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q0\" :  \"" << C_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUT_r_address0\" :  \"" << OUT_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUT_r_ce0\" :  \"" << OUT_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUT_r_we0\" :  \"" << OUT_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUT_r_d0\" :  \"" << OUT_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUT_r_q0\" :  \"" << OUT_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

