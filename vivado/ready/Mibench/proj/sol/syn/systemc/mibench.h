// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mibench_HH_
#define _mibench_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mibench_mul_mul_16s_16s_16_1_1.h"
#include "mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1.h"

namespace ap_rtl {

struct mibench : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<16> > A_q0;
    sc_out< sc_lv<7> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<16> > B_q0;
    sc_out< sc_lv<7> > C_address0;
    sc_out< sc_logic > C_ce0;
    sc_in< sc_lv<16> > C_q0;
    sc_out< sc_lv<7> > OUT_r_address0;
    sc_out< sc_logic > OUT_r_ce0;
    sc_out< sc_logic > OUT_r_we0;
    sc_out< sc_lv<32> > OUT_r_d0;
    sc_in< sc_lv<32> > OUT_r_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    mibench(sc_module_name name);
    SC_HAS_PROCESS(mibench);

    ~mibench();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mibench_mul_mul_16s_16s_16_1_1<1,1,16,16,16>* mibench_mul_mul_16s_16s_16_1_1_U1;
    mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1<1,1,16,16,16,16,16>* mibench_ama_addmuladd_16ns_16ns_16s_16s_16_1_1_U2;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_124_p2;
    sc_signal< sc_lv<7> > i_reg_232;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > k_fu_136_p2;
    sc_signal< sc_lv<7> > k_reg_240;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln10_1_fu_142_p1;
    sc_signal< sc_lv<64> > zext_ln10_1_reg_245;
    sc_signal< sc_lv<1> > icmp_ln9_fu_130_p2;
    sc_signal< sc_lv<16> > A_load_reg_257;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > i_0_reg_96;
    sc_signal< sc_lv<7> > k_0_reg_107;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln7_fu_118_p2;
    sc_signal< sc_lv<16> > shl_ln10_fu_147_p2;
    sc_signal< sc_lv<16> > shl_ln10_1_fu_152_p2;
    sc_signal< sc_lv<16> > sub_ln10_fu_157_p2;
    sc_signal< sc_lv<16> > add_ln10_fu_163_p2;
    sc_signal< sc_lv<16> > shl_ln10_2_fu_169_p2;
    sc_signal< sc_lv<16> > add_ln10_1_fu_175_p2;
    sc_signal< sc_lv<16> > add_ln10_2_fu_181_p1;
    sc_signal< sc_lv<16> > tmp5_fu_192_p2;
    sc_signal< sc_lv<16> > grp_fu_214_p4;
    sc_signal< sc_lv<16> > mul_ln10_fu_208_p1;
    sc_signal< sc_lv<16> > grp_fu_214_p0;
    sc_signal< sc_lv<16> > grp_fu_214_p1;
    sc_signal< sc_lv<16> > mul_ln10_fu_208_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_2B;
    static const sc_lv<16> ap_const_lv16_2C;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_C_address0();
    void thread_C_ce0();
    void thread_OUT_r_address0();
    void thread_OUT_r_ce0();
    void thread_OUT_r_d0();
    void thread_OUT_r_we0();
    void thread_add_ln10_1_fu_175_p2();
    void thread_add_ln10_2_fu_181_p1();
    void thread_add_ln10_fu_163_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_214_p0();
    void thread_grp_fu_214_p1();
    void thread_i_fu_124_p2();
    void thread_icmp_ln7_fu_118_p2();
    void thread_icmp_ln9_fu_130_p2();
    void thread_k_fu_136_p2();
    void thread_mul_ln10_fu_208_p1();
    void thread_shl_ln10_1_fu_152_p2();
    void thread_shl_ln10_2_fu_169_p2();
    void thread_shl_ln10_fu_147_p2();
    void thread_sub_ln10_fu_157_p2();
    void thread_tmp5_fu_192_p2();
    void thread_zext_ln10_1_fu_142_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
