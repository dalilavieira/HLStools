// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="paeth,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.502187,HLS_SYN_LAT=10099884237,HLS_SYN_TPT=none,HLS_SYN_MEM=40960,HLS_SYN_DSP=0,HLS_SYN_FF=264,HLS_SYN_LUT=630,HLS_VERSION=2019_1}" *)

module paeth (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] trunc_ln33_fu_206_p1;
wire    ap_CS_fsm_state2;
wire   [24:0] k_fu_219_p2;
reg   [24:0] k_reg_474;
wire   [0:0] icmp_ln33_fu_213_p2;
wire   [6:0] i_fu_239_p2;
reg   [6:0] i_reg_502;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln42_fu_233_p2;
wire   [24:0] k_1_fu_255_p2;
reg   [24:0] k_1_reg_515;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln44_fu_249_p2;
reg   [23:0] out_addr_2_reg_535;
wire   [9:0] b_q0;
reg   [9:0] b_load_reg_540;
wire    ap_CS_fsm_state8;
wire   [9:0] c_q0;
reg   [9:0] c_load_reg_545;
wire   [9:0] a_q0;
reg   [9:0] a_load_reg_550;
wire   [0:0] icmp_ln51_fu_415_p2;
reg   [0:0] icmp_ln51_reg_555;
wire   [0:0] test_4_fu_421_p2;
reg   [0:0] test_4_reg_560;
wire   [0:0] icmp_ln53_fu_427_p2;
reg   [0:0] icmp_ln53_reg_565;
reg   [23:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [23:0] b_address0;
reg    b_ce0;
reg    b_we0;
reg   [23:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [23:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [9:0] out_d0;
wire   [9:0] out_q0;
reg   [24:0] k_0_reg_161;
wire    ap_CS_fsm_state3;
reg   [6:0] i_0_reg_172;
reg   [24:0] k1_0_reg_183;
wire    ap_CS_fsm_state10;
wire   [9:0] c_load_b_load_fu_449_p3;
reg   [9:0] ap_phi_mux_storemerge1_phi_fu_198_p4;
wire    ap_CS_fsm_state9;
wire   [0:0] test_3_fu_443_p2;
wire   [63:0] zext_ln34_fu_225_p1;
wire  signed [63:0] sext_ln64_fu_245_p1;
wire   [63:0] zext_ln47_fu_261_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [10:0] zext_ln47_1_fu_269_p1;
wire   [10:0] zext_ln47_3_fu_277_p1;
wire   [10:0] zext_ln48_fu_287_p1;
wire   [10:0] tmp_fu_297_p3;
wire   [26:0] zext_ln47_2_fu_273_p1;
wire   [26:0] zext_ln49_fu_305_p1;
wire   [26:0] sub_ln49_fu_309_p2;
wire   [9:0] trunc_ln49_fu_315_p1;
wire   [16:0] tmp_2_fu_325_p4;
wire   [9:0] or_ln49_fu_319_p2;
wire  signed [26:0] tmp_1_fu_335_p3;
wire   [10:0] pas_fu_281_p2;
wire   [0:0] abscond_fu_353_p2;
wire   [10:0] neg_fu_347_p2;
wire  signed [10:0] abs_fu_359_p3;
wire   [10:0] pbs_fu_291_p2;
wire   [0:0] abscond3_fu_377_p2;
wire   [10:0] neg2_fu_371_p2;
wire  signed [10:0] abs4_fu_383_p3;
wire  signed [27:0] sext_ln49_fu_343_p1;
wire   [0:0] abscond9_fu_401_p2;
wire   [27:0] neg8_fu_395_p2;
wire   [27:0] abs10_fu_407_p3;
wire  signed [27:0] abs_cast_cast_fu_367_p1;
wire  signed [27:0] abs4_cast_cast_fu_391_p1;
wire   [0:0] test_2_fu_433_p2;
wire   [0:0] xor_ln53_fu_438_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

paeth_a #(
    .DataWidth( 10 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(trunc_ln33_fu_206_p1),
    .q0(a_q0)
);

paeth_a #(
    .DataWidth( 10 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(trunc_ln33_fu_206_p1),
    .q0(b_q0)
);

paeth_a #(
    .DataWidth( 10 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(trunc_ln33_fu_206_p1),
    .q0(c_q0)
);

paeth_a #(
    .DataWidth( 10 ),
    .AddressRange( 16777216 ),
    .AddressWidth( 24 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(out_we0),
    .d0(out_d0),
    .q0(out_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_172 <= 7'd0;
    end else if (((icmp_ln44_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_172 <= i_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k1_0_reg_183 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        k1_0_reg_183 <= k_1_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_reg_161 <= k_reg_474;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_161 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a_load_reg_550 <= a_q0;
        b_load_reg_540 <= b_q0;
        c_load_reg_545 <= c_q0;
        icmp_ln51_reg_555 <= icmp_ln51_fu_415_p2;
        icmp_ln53_reg_565 <= icmp_ln53_fu_427_p2;
        test_4_reg_560 <= test_4_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_502 <= i_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_515 <= k_1_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_474 <= k_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_addr_2_reg_535 <= zext_ln47_fu_261_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = zext_ln47_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = zext_ln34_fu_225_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        if ((test_3_fu_443_p2 == 1'd1)) begin
            ap_phi_mux_storemerge1_phi_fu_198_p4 = a_load_reg_550;
        end else if ((test_3_fu_443_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1_phi_fu_198_p4 = c_load_b_load_fu_449_p3;
        end else begin
            ap_phi_mux_storemerge1_phi_fu_198_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_phi_fu_198_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = zext_ln47_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = zext_ln34_fu_225_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln47_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = zext_ln34_fu_225_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_address0 = out_addr_2_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_address0 = sext_ln64_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_address0 = zext_ln34_fu_225_p1;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        out_ce0 = 1'b1;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_d0 = ap_phi_mux_storemerge1_phi_fu_198_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d0 = 10'd0;
    end else begin
        out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((icmp_ln33_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_we0 = 1'b1;
    end else begin
        out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln42_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln44_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs10_fu_407_p3 = ((abscond9_fu_401_p2[0:0] === 1'b1) ? sext_ln49_fu_343_p1 : neg8_fu_395_p2);

assign abs4_cast_cast_fu_391_p1 = abs4_fu_383_p3;

assign abs4_fu_383_p3 = ((abscond3_fu_377_p2[0:0] === 1'b1) ? pbs_fu_291_p2 : neg2_fu_371_p2);

assign abs_cast_cast_fu_367_p1 = abs_fu_359_p3;

assign abs_fu_359_p3 = ((abscond_fu_353_p2[0:0] === 1'b1) ? pas_fu_281_p2 : neg_fu_347_p2);

assign abscond3_fu_377_p2 = (($signed(pbs_fu_291_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign abscond9_fu_401_p2 = (($signed(tmp_1_fu_335_p3) > $signed(27'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_353_p2 = (($signed(pas_fu_281_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = out_q0;

assign c_load_b_load_fu_449_p3 = ((test_4_reg_560[0:0] === 1'b1) ? c_load_reg_545 : b_load_reg_540);

assign i_fu_239_p2 = (i_0_reg_172 + 7'd1);

assign icmp_ln33_fu_213_p2 = ((k_0_reg_161 == 25'd16777216) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_233_p2 = ((i_0_reg_172 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_249_p2 = ((k1_0_reg_183 == 25'd16777216) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_415_p2 = (($signed(abs10_fu_407_p3) < $signed(abs_cast_cast_fu_367_p1)) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_427_p2 = (($signed(abs4_fu_383_p3) < $signed(abs_fu_359_p3)) ? 1'b1 : 1'b0);

assign k_1_fu_255_p2 = (k1_0_reg_183 + 25'd1);

assign k_fu_219_p2 = (25'd1 + k_0_reg_161);

assign neg2_fu_371_p2 = (11'd0 - pbs_fu_291_p2);

assign neg8_fu_395_p2 = ($signed(28'd0) - $signed(sext_ln49_fu_343_p1));

assign neg_fu_347_p2 = (11'd0 - pas_fu_281_p2);

assign or_ln49_fu_319_p2 = (trunc_ln49_fu_315_p1 | a_q0);

assign pas_fu_281_p2 = (zext_ln47_1_fu_269_p1 - zext_ln47_3_fu_277_p1);

assign pbs_fu_291_p2 = (zext_ln48_fu_287_p1 - zext_ln47_3_fu_277_p1);

assign sext_ln49_fu_343_p1 = tmp_1_fu_335_p3;

assign sext_ln64_fu_245_p1 = $signed(idx);

assign sub_ln49_fu_309_p2 = (zext_ln47_2_fu_273_p1 - zext_ln49_fu_305_p1);

assign test_2_fu_433_p2 = (icmp_ln51_reg_555 ^ 1'd1);

assign test_3_fu_443_p2 = (xor_ln53_fu_438_p2 & test_2_fu_433_p2);

assign test_4_fu_421_p2 = (($signed(abs4_cast_cast_fu_391_p1) > $signed(abs10_fu_407_p3)) ? 1'b1 : 1'b0);

assign tmp_1_fu_335_p3 = {{tmp_2_fu_325_p4}, {or_ln49_fu_319_p2}};

assign tmp_2_fu_325_p4 = {{sub_ln49_fu_309_p2[26:10]}};

assign tmp_fu_297_p3 = {{c_q0}, {1'd0}};

assign trunc_ln33_fu_206_p1 = k_0_reg_161[9:0];

assign trunc_ln49_fu_315_p1 = sub_ln49_fu_309_p2[9:0];

assign xor_ln53_fu_438_p2 = (icmp_ln53_reg_565 ^ 1'd1);

assign zext_ln34_fu_225_p1 = k_0_reg_161;

assign zext_ln47_1_fu_269_p1 = b_q0;

assign zext_ln47_2_fu_273_p1 = b_q0;

assign zext_ln47_3_fu_277_p1 = c_q0;

assign zext_ln47_fu_261_p1 = k1_0_reg_183;

assign zext_ln48_fu_287_p1 = a_q0;

assign zext_ln49_fu_305_p1 = tmp_fu_297_p3;

endmodule //paeth
