-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity paeth is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of paeth is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "paeth,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.502187,HLS_SYN_LAT=10099884237,HLS_SYN_TPT=none,HLS_SYN_MEM=40960,HLS_SYN_DSP=0,HLS_SYN_FF=264,HLS_SYN_LUT=630,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln33_fu_206_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_219_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal k_reg_474 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln33_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_502 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln42_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_255_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal k_1_reg_515 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln44_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_2_reg_535 : STD_LOGIC_VECTOR (23 downto 0);
    signal b_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_load_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_load_reg_545 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_load_reg_550 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln51_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_4_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal test_4_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal b_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal c_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal out_address0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_0_reg_161 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_172 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_0_reg_183 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_load_b_load_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_storemerge1_phi_fu_198_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal test_3_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln64_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln47_1_fu_269_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln47_3_fu_277_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_297_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln47_2_fu_273_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln49_fu_305_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln49_fu_309_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln49_fu_315_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_325_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln49_fu_319_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_335_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal pas_fu_281_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_347_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs_fu_359_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal pbs_fu_291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond3_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg2_fu_371_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abs4_fu_383_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln49_fu_343_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal abscond9_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg8_fu_395_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal abs10_fu_407_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal abs_cast_cast_fu_367_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal abs4_cast_cast_fu_391_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal test_2_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component paeth_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (9 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    a_U : component paeth_a
    generic map (
        DataWidth => 10,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => trunc_ln33_fu_206_p1,
        q0 => a_q0);

    b_U : component paeth_a
    generic map (
        DataWidth => 10,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => trunc_ln33_fu_206_p1,
        q0 => b_q0);

    c_U : component paeth_a
    generic map (
        DataWidth => 10,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => trunc_ln33_fu_206_p1,
        q0 => c_q0);

    out_U : component paeth_a
    generic map (
        DataWidth => 10,
        AddressRange => 16777216,
        AddressWidth => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_172 <= ap_const_lv7_0;
            elsif (((icmp_ln44_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_172 <= i_reg_502;
            end if; 
        end if;
    end process;

    k1_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k1_0_reg_183 <= ap_const_lv25_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k1_0_reg_183 <= k_1_reg_515;
            end if; 
        end if;
    end process;

    k_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_0_reg_161 <= k_reg_474;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_161 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                a_load_reg_550 <= a_q0;
                b_load_reg_540 <= b_q0;
                c_load_reg_545 <= c_q0;
                icmp_ln51_reg_555 <= icmp_ln51_fu_415_p2;
                icmp_ln53_reg_565 <= icmp_ln53_fu_427_p2;
                test_4_reg_560 <= test_4_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_502 <= i_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_1_reg_515 <= k_1_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_474 <= k_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                out_addr_2_reg_535 <= zext_ln47_fu_261_p1(24 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_213_p2, ap_CS_fsm_state4, icmp_ln42_fu_233_p2, ap_CS_fsm_state5, icmp_ln44_fu_249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln42_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln44_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln34_fu_225_p1, zext_ln47_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= zext_ln47_fu_261_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= zext_ln34_fu_225_p1(24 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_213_p2)
    begin
        if (((icmp_ln33_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    abs10_fu_407_p3 <= 
        sext_ln49_fu_343_p1 when (abscond9_fu_401_p2(0) = '1') else 
        neg8_fu_395_p2;
        abs4_cast_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs4_fu_383_p3),28));

    abs4_fu_383_p3 <= 
        pbs_fu_291_p2 when (abscond3_fu_377_p2(0) = '1') else 
        neg2_fu_371_p2;
        abs_cast_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_fu_359_p3),28));

    abs_fu_359_p3 <= 
        pas_fu_281_p2 when (abscond_fu_353_p2(0) = '1') else 
        neg_fu_347_p2;
    abscond3_fu_377_p2 <= "1" when (signed(pbs_fu_291_p2) > signed(ap_const_lv11_0)) else "0";
    abscond9_fu_401_p2 <= "1" when (signed(tmp_1_fu_335_p3) > signed(ap_const_lv27_0)) else "0";
    abscond_fu_353_p2 <= "1" when (signed(pas_fu_281_p2) > signed(ap_const_lv11_0)) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge1_phi_fu_198_p4_assign_proc : process(a_load_reg_550, c_load_b_load_fu_449_p3, ap_CS_fsm_state9, test_3_fu_443_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
            if ((test_3_fu_443_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_phi_fu_198_p4 <= a_load_reg_550;
            elsif ((test_3_fu_443_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_phi_fu_198_p4 <= c_load_b_load_fu_449_p3;
            else 
                ap_phi_mux_storemerge1_phi_fu_198_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge1_phi_fu_198_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_q0),32));

    b_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln34_fu_225_p1, zext_ln47_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= zext_ln47_fu_261_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= zext_ln34_fu_225_p1(24 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_213_p2)
    begin
        if (((icmp_ln33_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln34_fu_225_p1, zext_ln47_fu_261_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= zext_ln47_fu_261_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= zext_ln34_fu_225_p1(24 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_load_b_load_fu_449_p3 <= 
        c_load_reg_545 when (test_4_reg_560(0) = '1') else 
        b_load_reg_540;

    c_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_213_p2)
    begin
        if (((icmp_ln33_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_239_p2 <= std_logic_vector(unsigned(i_0_reg_172) + unsigned(ap_const_lv7_1));
    icmp_ln33_fu_213_p2 <= "1" when (k_0_reg_161 = ap_const_lv25_1000000) else "0";
    icmp_ln42_fu_233_p2 <= "1" when (i_0_reg_172 = ap_const_lv7_64) else "0";
    icmp_ln44_fu_249_p2 <= "1" when (k1_0_reg_183 = ap_const_lv25_1000000) else "0";
    icmp_ln51_fu_415_p2 <= "1" when (signed(abs10_fu_407_p3) < signed(abs_cast_cast_fu_367_p1)) else "0";
    icmp_ln53_fu_427_p2 <= "1" when (signed(abs4_fu_383_p3) < signed(abs_fu_359_p3)) else "0";
    k_1_fu_255_p2 <= std_logic_vector(unsigned(k1_0_reg_183) + unsigned(ap_const_lv25_1));
    k_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv25_1) + unsigned(k_0_reg_161));
    neg2_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(pbs_fu_291_p2));
    neg8_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(sext_ln49_fu_343_p1));
    neg_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(pas_fu_281_p2));
    or_ln49_fu_319_p2 <= (trunc_ln49_fu_315_p1 or a_q0);

    out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, out_addr_2_reg_535, ap_CS_fsm_state9, zext_ln34_fu_225_p1, sext_ln64_fu_245_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_address0 <= out_addr_2_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_address0 <= sext_ln64_fu_245_p1(24 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_address0 <= zext_ln34_fu_225_p1(24 - 1 downto 0);
        else 
            out_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_d0_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_storemerge1_phi_fu_198_p4, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_d0 <= ap_phi_mux_storemerge1_phi_fu_198_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_d0 <= ap_const_lv10_0;
        else 
            out_d0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_213_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln33_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pas_fu_281_p2 <= std_logic_vector(unsigned(zext_ln47_1_fu_269_p1) - unsigned(zext_ln47_3_fu_277_p1));
    pbs_fu_291_p2 <= std_logic_vector(unsigned(zext_ln48_fu_287_p1) - unsigned(zext_ln47_3_fu_277_p1));
        sext_ln49_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_335_p3),28));

        sext_ln64_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx),64));

    sub_ln49_fu_309_p2 <= std_logic_vector(unsigned(zext_ln47_2_fu_273_p1) - unsigned(zext_ln49_fu_305_p1));
    test_2_fu_433_p2 <= (icmp_ln51_reg_555 xor ap_const_lv1_1);
    test_3_fu_443_p2 <= (xor_ln53_fu_438_p2 and test_2_fu_433_p2);
    test_4_fu_421_p2 <= "1" when (signed(abs4_cast_cast_fu_391_p1) > signed(abs10_fu_407_p3)) else "0";
    tmp_1_fu_335_p3 <= (tmp_2_fu_325_p4 & or_ln49_fu_319_p2);
    tmp_2_fu_325_p4 <= sub_ln49_fu_309_p2(26 downto 10);
    tmp_fu_297_p3 <= (c_q0 & ap_const_lv1_0);
    trunc_ln33_fu_206_p1 <= k_0_reg_161(10 - 1 downto 0);
    trunc_ln49_fu_315_p1 <= sub_ln49_fu_309_p2(10 - 1 downto 0);
    xor_ln53_fu_438_p2 <= (icmp_ln53_reg_565 xor ap_const_lv1_1);
    zext_ln34_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_161),64));
    zext_ln47_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),11));
    zext_ln47_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),27));
    zext_ln47_3_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_q0),11));
    zext_ln47_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_183),64));
    zext_ln48_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),11));
    zext_ln49_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_297_p3),27));
end behav;
