// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kmeans.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kmeans::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kmeans::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> kmeans::ap_ST_fsm_state1 = "1";
const sc_lv<7> kmeans::ap_ST_fsm_state2 = "10";
const sc_lv<7> kmeans::ap_ST_fsm_state3 = "100";
const sc_lv<7> kmeans::ap_ST_fsm_state4 = "1000";
const sc_lv<7> kmeans::ap_ST_fsm_state5 = "10000";
const sc_lv<7> kmeans::ap_ST_fsm_state6 = "100000";
const sc_lv<7> kmeans::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> kmeans::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> kmeans::ap_const_lv32_1 = "1";
const sc_lv<32> kmeans::ap_const_lv32_2 = "10";
const sc_lv<32> kmeans::ap_const_lv32_3 = "11";
const sc_lv<32> kmeans::ap_const_lv32_4 = "100";
const sc_lv<1> kmeans::ap_const_lv1_1 = "1";
const sc_lv<1> kmeans::ap_const_lv1_0 = "0";
const sc_lv<32> kmeans::ap_const_lv32_5 = "101";
const sc_lv<7> kmeans::ap_const_lv7_0 = "0000000";
const sc_lv<16> kmeans::ap_const_lv16_8235 = "1000001000110101";
const sc_lv<16> kmeans::ap_const_lv16_0 = "0000000000000000";
const sc_lv<31> kmeans::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<64> kmeans::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> kmeans::ap_const_lv7_64 = "1100100";
const sc_lv<7> kmeans::ap_const_lv7_1 = "1";
const sc_lv<16> kmeans::ap_const_lv16_1 = "1";
const sc_lv<31> kmeans::ap_const_lv31_1 = "1";
const sc_lv<32> kmeans::ap_const_lv32_6 = "110";
const bool kmeans::ap_const_boolean_1 = true;

kmeans::kmeans(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln17_1_fu_294_p2);
    sensitive << ( phi_mul1_reg_160 );
    sensitive << ( zext_ln20_fu_264_p1 );

    SC_METHOD(thread_add_ln17_2_fu_327_p2);
    sensitive << ( data_in_q0 );
    sensitive << ( min_reg_172 );

    SC_METHOD(thread_add_ln17_3_fu_279_p2);
    sensitive << ( num_dim );
    sensitive << ( phi_mul_reg_195 );

    SC_METHOD(thread_add_ln17_fu_284_p2);
    sensitive << ( zext_ln12_reg_364 );
    sensitive << ( phi_mul_reg_195 );

    SC_METHOD(thread_add_ln21_fu_234_p2);
    sensitive << ( num_dim );
    sensitive << ( phi_mul1_reg_160 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_return);
    sensitive << ( data_out_q0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_c_fu_248_p2);
    sensitive << ( min_id_reg_148 );

    SC_METHOD(thread_centroids_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln17_1_fu_300_p1 );

    SC_METHOD(thread_centroids_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln17_fu_289_p1 );

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_data_out_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln24_1_fu_259_p1 );

    SC_METHOD(thread_data_out_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_data_out_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( min_id_0_reg_136 );

    SC_METHOD(thread_data_out_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln14_fu_243_p2 );

    SC_METHOD(thread_i_fu_228_p2);
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_icmp_ln10_fu_206_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sp_0_reg_101 );

    SC_METHOD(thread_icmp_ln12_fu_222_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_icmp_ln14_fu_243_p2);
    sensitive << ( num_clusters );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln14_fu_239_p1 );

    SC_METHOD(thread_icmp_ln16_fu_268_p2);
    sensitive << ( num_dim );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln20_fu_264_p1 );

    SC_METHOD(thread_icmp_ln19_fu_305_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln16_fu_268_p2 );
    sensitive << ( min_0_reg_124 );
    sensitive << ( min_reg_172 );

    SC_METHOD(thread_j_fu_273_p2);
    sensitive << ( j_0_reg_184 );

    SC_METHOD(thread_select_ln19_1_fu_319_p3);
    sensitive << ( min_id_0_reg_136 );
    sensitive << ( min_id_reg_148 );
    sensitive << ( icmp_ln19_fu_305_p2 );

    SC_METHOD(thread_select_ln19_fu_311_p3);
    sensitive << ( min_0_reg_124 );
    sensitive << ( min_reg_172 );
    sensitive << ( icmp_ln19_fu_305_p2 );

    SC_METHOD(thread_sext_ln17_1_fu_300_p1);
    sensitive << ( add_ln17_1_fu_294_p2 );

    SC_METHOD(thread_sext_ln17_fu_289_p1);
    sensitive << ( add_ln17_fu_284_p2 );

    SC_METHOD(thread_sp_fu_212_p2);
    sensitive << ( sp_0_reg_101 );

    SC_METHOD(thread_sum_fu_333_p2);
    sensitive << ( centroids_q0 );
    sensitive << ( add_ln17_2_fu_327_p2 );

    SC_METHOD(thread_zext_ln12_fu_218_p1);
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_zext_ln14_fu_239_p1);
    sensitive << ( min_id_reg_148 );

    SC_METHOD(thread_zext_ln20_fu_264_p1);
    sensitive << ( j_0_reg_184 );

    SC_METHOD(thread_zext_ln24_1_fu_259_p1);
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln16_fu_268_p2 );
    sensitive << ( icmp_ln12_fu_222_p2 );
    sensitive << ( icmp_ln14_fu_243_p2 );
    sensitive << ( icmp_ln10_fu_206_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kmeans_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_in_address0, "(port)data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "(port)data_in_ce0");
    sc_trace(mVcdFile, data_in_q0, "(port)data_in_q0");
    sc_trace(mVcdFile, data_out_address0, "(port)data_out_address0");
    sc_trace(mVcdFile, data_out_ce0, "(port)data_out_ce0");
    sc_trace(mVcdFile, data_out_we0, "(port)data_out_we0");
    sc_trace(mVcdFile, data_out_d0, "(port)data_out_d0");
    sc_trace(mVcdFile, data_out_q0, "(port)data_out_q0");
    sc_trace(mVcdFile, centroids_address0, "(port)centroids_address0");
    sc_trace(mVcdFile, centroids_ce0, "(port)centroids_ce0");
    sc_trace(mVcdFile, centroids_q0, "(port)centroids_q0");
    sc_trace(mVcdFile, num_clusters, "(port)num_clusters");
    sc_trace(mVcdFile, num_dim, "(port)num_dim");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sp_fu_212_p2, "sp_fu_212_p2");
    sc_trace(mVcdFile, sp_reg_359, "sp_reg_359");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln12_fu_218_p1, "zext_ln12_fu_218_p1");
    sc_trace(mVcdFile, zext_ln12_reg_364, "zext_ln12_reg_364");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_228_p2, "i_fu_228_p2");
    sc_trace(mVcdFile, i_reg_372, "i_reg_372");
    sc_trace(mVcdFile, add_ln21_fu_234_p2, "add_ln21_fu_234_p2");
    sc_trace(mVcdFile, add_ln21_reg_377, "add_ln21_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, c_fu_248_p2, "c_fu_248_p2");
    sc_trace(mVcdFile, c_reg_385, "c_reg_385");
    sc_trace(mVcdFile, j_fu_273_p2, "j_fu_273_p2");
    sc_trace(mVcdFile, j_reg_393, "j_reg_393");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, add_ln17_3_fu_279_p2, "add_ln17_3_fu_279_p2");
    sc_trace(mVcdFile, add_ln17_3_reg_398, "add_ln17_3_reg_398");
    sc_trace(mVcdFile, icmp_ln16_fu_268_p2, "icmp_ln16_fu_268_p2");
    sc_trace(mVcdFile, select_ln19_fu_311_p3, "select_ln19_fu_311_p3");
    sc_trace(mVcdFile, select_ln19_1_fu_319_p3, "select_ln19_1_fu_319_p3");
    sc_trace(mVcdFile, sum_fu_333_p2, "sum_fu_333_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, sp_0_reg_101, "sp_0_reg_101");
    sc_trace(mVcdFile, icmp_ln12_fu_222_p2, "icmp_ln12_fu_222_p2");
    sc_trace(mVcdFile, i_0_reg_112, "i_0_reg_112");
    sc_trace(mVcdFile, icmp_ln14_fu_243_p2, "icmp_ln14_fu_243_p2");
    sc_trace(mVcdFile, icmp_ln10_fu_206_p2, "icmp_ln10_fu_206_p2");
    sc_trace(mVcdFile, min_0_reg_124, "min_0_reg_124");
    sc_trace(mVcdFile, min_id_0_reg_136, "min_id_0_reg_136");
    sc_trace(mVcdFile, min_id_reg_148, "min_id_reg_148");
    sc_trace(mVcdFile, phi_mul1_reg_160, "phi_mul1_reg_160");
    sc_trace(mVcdFile, min_reg_172, "min_reg_172");
    sc_trace(mVcdFile, j_0_reg_184, "j_0_reg_184");
    sc_trace(mVcdFile, phi_mul_reg_195, "phi_mul_reg_195");
    sc_trace(mVcdFile, zext_ln24_1_fu_259_p1, "zext_ln24_1_fu_259_p1");
    sc_trace(mVcdFile, sext_ln17_fu_289_p1, "sext_ln17_fu_289_p1");
    sc_trace(mVcdFile, sext_ln17_1_fu_300_p1, "sext_ln17_1_fu_300_p1");
    sc_trace(mVcdFile, zext_ln14_fu_239_p1, "zext_ln14_fu_239_p1");
    sc_trace(mVcdFile, zext_ln20_fu_264_p1, "zext_ln20_fu_264_p1");
    sc_trace(mVcdFile, add_ln17_fu_284_p2, "add_ln17_fu_284_p2");
    sc_trace(mVcdFile, add_ln17_1_fu_294_p2, "add_ln17_1_fu_294_p2");
    sc_trace(mVcdFile, icmp_ln19_fu_305_p2, "icmp_ln19_fu_305_p2");
    sc_trace(mVcdFile, add_ln17_2_fu_327_p2, "add_ln17_2_fu_327_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kmeans.hdltvin.dat");
    mHdltvoutHandle.open("kmeans.hdltvout.dat");
}

kmeans::~kmeans() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void kmeans::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_206_p2.read()))) {
        i_0_reg_112 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_243_p2.read()))) {
        i_0_reg_112 = i_reg_372.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_243_p2.read()))) {
        j_0_reg_184 = ap_const_lv31_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_0_reg_184 = j_reg_393.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_222_p2.read()))) {
        min_0_reg_124 = ap_const_lv16_8235;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_0))) {
        min_0_reg_124 = select_ln19_fu_311_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_222_p2.read()))) {
        min_id_0_reg_136 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_0))) {
        min_id_0_reg_136 = select_ln19_1_fu_319_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_222_p2.read()))) {
        min_id_reg_148 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_0))) {
        min_id_reg_148 = c_reg_385.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_243_p2.read()))) {
        min_reg_172 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        min_reg_172 = sum_fu_333_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_222_p2.read()))) {
        phi_mul1_reg_160 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_0))) {
        phi_mul1_reg_160 = add_ln21_reg_377.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_243_p2.read()))) {
        phi_mul_reg_195 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        phi_mul_reg_195 = add_ln17_3_reg_398.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln12_fu_222_p2.read()))) {
        sp_0_reg_101 = sp_reg_359.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sp_0_reg_101 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_1))) {
        add_ln17_3_reg_398 = add_ln17_3_fu_279_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        add_ln21_reg_377 = add_ln21_fu_234_p2.read();
        c_reg_385 = c_fu_248_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_372 = i_fu_228_p2.read();
        zext_ln12_reg_364 = zext_ln12_fu_218_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_393 = j_fu_273_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sp_reg_359 = sp_fu_212_p2.read();
    }
}

void kmeans::thread_add_ln17_1_fu_294_p2() {
    add_ln17_1_fu_294_p2 = (!zext_ln20_fu_264_p1.read().is_01() || !phi_mul1_reg_160.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln20_fu_264_p1.read()) + sc_biguint<32>(phi_mul1_reg_160.read()));
}

void kmeans::thread_add_ln17_2_fu_327_p2() {
    add_ln17_2_fu_327_p2 = (!data_in_q0.read().is_01() || !min_reg_172.read().is_01())? sc_lv<16>(): (sc_biguint<16>(data_in_q0.read()) + sc_biguint<16>(min_reg_172.read()));
}

void kmeans::thread_add_ln17_3_fu_279_p2() {
    add_ln17_3_fu_279_p2 = (!phi_mul_reg_195.read().is_01() || !num_dim.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_195.read()) + sc_biguint<32>(num_dim.read()));
}

void kmeans::thread_add_ln17_fu_284_p2() {
    add_ln17_fu_284_p2 = (!phi_mul_reg_195.read().is_01() || !zext_ln12_reg_364.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_195.read()) + sc_biguint<32>(zext_ln12_reg_364.read()));
}

void kmeans::thread_add_ln21_fu_234_p2() {
    add_ln21_fu_234_p2 = (!phi_mul1_reg_160.read().is_01() || !num_dim.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_160.read()) + sc_biguint<32>(num_dim.read()));
}

void kmeans::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kmeans::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kmeans::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kmeans::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void kmeans::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void kmeans::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void kmeans::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void kmeans::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kmeans::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kmeans::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kmeans::thread_ap_return() {
    ap_return = data_out_q0.read();
}

void kmeans::thread_c_fu_248_p2() {
    c_fu_248_p2 = (!min_id_reg_148.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(min_id_reg_148.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void kmeans::thread_centroids_address0() {
    centroids_address0 =  (sc_lv<20>) (sext_ln17_1_fu_300_p1.read());
}

void kmeans::thread_centroids_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        centroids_ce0 = ap_const_logic_1;
    } else {
        centroids_ce0 = ap_const_logic_0;
    }
}

void kmeans::thread_data_in_address0() {
    data_in_address0 =  (sc_lv<14>) (sext_ln17_fu_289_p1.read());
}

void kmeans::thread_data_in_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_in_ce0 = ap_const_logic_1;
    } else {
        data_in_ce0 = ap_const_logic_0;
    }
}

void kmeans::thread_data_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data_out_address0 =  (sc_lv<7>) (zext_ln24_1_fu_259_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_out_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        data_out_address0 = "XXXXXXX";
    }
}

void kmeans::thread_data_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        data_out_ce0 = ap_const_logic_1;
    } else {
        data_out_ce0 = ap_const_logic_0;
    }
}

void kmeans::thread_data_out_d0() {
    data_out_d0 = esl_zext<32,16>(min_id_0_reg_136.read());
}

void kmeans::thread_data_out_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_243_p2.read()))) {
        data_out_we0 = ap_const_logic_1;
    } else {
        data_out_we0 = ap_const_logic_0;
    }
}

void kmeans::thread_i_fu_228_p2() {
    i_fu_228_p2 = (!i_0_reg_112.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_112.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void kmeans::thread_icmp_ln10_fu_206_p2() {
    icmp_ln10_fu_206_p2 = (!sp_0_reg_101.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(sp_0_reg_101.read() == ap_const_lv7_64);
}

void kmeans::thread_icmp_ln12_fu_222_p2() {
    icmp_ln12_fu_222_p2 = (!i_0_reg_112.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_112.read() == ap_const_lv7_64);
}

void kmeans::thread_icmp_ln14_fu_243_p2() {
    icmp_ln14_fu_243_p2 = (!zext_ln14_fu_239_p1.read().is_01() || !num_clusters.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln14_fu_239_p1.read()) < sc_bigint<32>(num_clusters.read()));
}

void kmeans::thread_icmp_ln16_fu_268_p2() {
    icmp_ln16_fu_268_p2 = (!zext_ln20_fu_264_p1.read().is_01() || !num_dim.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln20_fu_264_p1.read()) < sc_bigint<32>(num_dim.read()));
}

void kmeans::thread_icmp_ln19_fu_305_p2() {
    icmp_ln19_fu_305_p2 = (!min_reg_172.read().is_01() || !min_0_reg_124.read().is_01())? sc_lv<1>(): (sc_biguint<16>(min_reg_172.read()) > sc_biguint<16>(min_0_reg_124.read()));
}

void kmeans::thread_j_fu_273_p2() {
    j_fu_273_p2 = (!j_0_reg_184.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_184.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void kmeans::thread_select_ln19_1_fu_319_p3() {
    select_ln19_1_fu_319_p3 = (!icmp_ln19_fu_305_p2.read()[0].is_01())? sc_lv<16>(): ((icmp_ln19_fu_305_p2.read()[0].to_bool())? min_id_0_reg_136.read(): min_id_reg_148.read());
}

void kmeans::thread_select_ln19_fu_311_p3() {
    select_ln19_fu_311_p3 = (!icmp_ln19_fu_305_p2.read()[0].is_01())? sc_lv<16>(): ((icmp_ln19_fu_305_p2.read()[0].to_bool())? min_0_reg_124.read(): min_reg_172.read());
}

void kmeans::thread_sext_ln17_1_fu_300_p1() {
    sext_ln17_1_fu_300_p1 = esl_sext<64,32>(add_ln17_1_fu_294_p2.read());
}

void kmeans::thread_sext_ln17_fu_289_p1() {
    sext_ln17_fu_289_p1 = esl_sext<64,32>(add_ln17_fu_284_p2.read());
}

void kmeans::thread_sp_fu_212_p2() {
    sp_fu_212_p2 = (!sp_0_reg_101.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(sp_0_reg_101.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void kmeans::thread_sum_fu_333_p2() {
    sum_fu_333_p2 = (!add_ln17_2_fu_327_p2.read().is_01() || !centroids_q0.read().is_01())? sc_lv<16>(): (sc_biguint<16>(add_ln17_2_fu_327_p2.read()) - sc_biguint<16>(centroids_q0.read()));
}

void kmeans::thread_zext_ln12_fu_218_p1() {
    zext_ln12_fu_218_p1 = esl_zext<32,7>(i_0_reg_112.read());
}

void kmeans::thread_zext_ln14_fu_239_p1() {
    zext_ln14_fu_239_p1 = esl_zext<32,16>(min_id_reg_148.read());
}

void kmeans::thread_zext_ln20_fu_264_p1() {
    zext_ln20_fu_264_p1 = esl_zext<32,31>(j_0_reg_184.read());
}

void kmeans::thread_zext_ln24_1_fu_259_p1() {
    zext_ln24_1_fu_259_p1 = esl_zext<64,7>(i_0_reg_112.read());
}

void kmeans::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_206_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln12_fu_222_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln14_fu_243_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_268_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void kmeans::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_address0\" :  \"" << data_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ce0\" :  \"" << data_in_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_q0\" :  \"" << data_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_address0\" :  \"" << data_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_ce0\" :  \"" << data_out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_we0\" :  \"" << data_out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_d0\" :  \"" << data_out_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_q0\" :  \"" << data_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"centroids_address0\" :  \"" << centroids_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"centroids_ce0\" :  \"" << centroids_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"centroids_q0\" :  \"" << centroids_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"num_clusters\" :  \"" << num_clusters.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"num_dim\" :  \"" << num_dim.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

