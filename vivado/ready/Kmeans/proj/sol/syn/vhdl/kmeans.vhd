-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_out_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_out_ce0 : OUT STD_LOGIC;
    data_out_we0 : OUT STD_LOGIC;
    data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    centroids_ce0 : OUT STD_LOGIC;
    centroids_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    num_clusters : IN STD_LOGIC_VECTOR (31 downto 0);
    num_dim : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.833000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=312,HLS_SYN_LUT=465,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_8235 : STD_LOGIC_VECTOR (15 downto 0) := "1000001000110101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sp_fu_212_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sp_reg_359 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln12_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_228_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_372 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_273_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_393 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln17_3_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_3_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_311_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln19_1_fu_319_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sp_0_reg_101 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln12_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_112 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln14_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_0_reg_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_id_0_reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_id_reg_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_184 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_1_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln17_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln17_1_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_1_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_2_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_206_p2 = ap_const_lv1_0))) then 
                i_0_reg_112 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_243_p2 = ap_const_lv1_0))) then 
                i_0_reg_112 <= i_reg_372;
            end if; 
        end if;
    end process;

    j_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_184 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_184 <= j_reg_393;
            end if; 
        end if;
    end process;

    min_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_222_p2 = ap_const_lv1_0))) then 
                min_0_reg_124 <= ap_const_lv16_8235;
            elsif (((icmp_ln16_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                min_0_reg_124 <= select_ln19_fu_311_p3;
            end if; 
        end if;
    end process;

    min_id_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_222_p2 = ap_const_lv1_0))) then 
                min_id_0_reg_136 <= ap_const_lv16_0;
            elsif (((icmp_ln16_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                min_id_0_reg_136 <= select_ln19_1_fu_319_p3;
            end if; 
        end if;
    end process;

    min_id_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_222_p2 = ap_const_lv1_0))) then 
                min_id_reg_148 <= ap_const_lv16_0;
            elsif (((icmp_ln16_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                min_id_reg_148 <= c_reg_385;
            end if; 
        end if;
    end process;

    min_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                min_reg_172 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                min_reg_172 <= sum_fu_333_p2;
            end if; 
        end if;
    end process;

    phi_mul1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_222_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_160 <= ap_const_lv32_0;
            elsif (((icmp_ln16_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul1_reg_160 <= add_ln21_reg_377;
            end if; 
        end if;
    end process;

    phi_mul_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_195 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_195 <= add_ln17_3_reg_398;
            end if; 
        end if;
    end process;

    sp_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sp_0_reg_101 <= sp_reg_359;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sp_0_reg_101 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln17_3_reg_398 <= add_ln17_3_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln21_reg_377 <= add_ln21_fu_234_p2;
                c_reg_385 <= c_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_372 <= i_fu_228_p2;
                    zext_ln12_reg_364(6 downto 0) <= zext_ln12_fu_218_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_393 <= j_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sp_reg_359 <= sp_fu_212_p2;
            end if;
        end if;
    end process;
    zext_ln12_reg_364(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln16_fu_268_p2, icmp_ln12_fu_222_p2, icmp_ln14_fu_243_p2, icmp_ln10_fu_206_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_206_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_243_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln16_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln17_1_fu_294_p2 <= std_logic_vector(unsigned(zext_ln20_fu_264_p1) + unsigned(phi_mul1_reg_160));
    add_ln17_2_fu_327_p2 <= std_logic_vector(unsigned(data_in_q0) + unsigned(min_reg_172));
    add_ln17_3_fu_279_p2 <= std_logic_vector(unsigned(phi_mul_reg_195) + unsigned(num_dim));
    add_ln17_fu_284_p2 <= std_logic_vector(unsigned(phi_mul_reg_195) + unsigned(zext_ln12_reg_364));
    add_ln21_fu_234_p2 <= std_logic_vector(unsigned(phi_mul1_reg_160) + unsigned(num_dim));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= data_out_q0;
    c_fu_248_p2 <= std_logic_vector(unsigned(min_id_reg_148) + unsigned(ap_const_lv16_1));
    centroids_address0 <= sext_ln17_1_fu_300_p1(20 - 1 downto 0);

    centroids_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            centroids_ce0 <= ap_const_logic_1;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_in_address0 <= sext_ln17_fu_289_p1(14 - 1 downto 0);

    data_in_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln24_1_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_out_address0 <= zext_ln24_1_fu_259_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_out_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            data_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_id_0_reg_136),32));

    data_out_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_243_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_243_p2 = ap_const_lv1_0))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_228_p2 <= std_logic_vector(unsigned(i_0_reg_112) + unsigned(ap_const_lv7_1));
    icmp_ln10_fu_206_p2 <= "1" when (sp_0_reg_101 = ap_const_lv7_64) else "0";
    icmp_ln12_fu_222_p2 <= "1" when (i_0_reg_112 = ap_const_lv7_64) else "0";
    icmp_ln14_fu_243_p2 <= "1" when (signed(zext_ln14_fu_239_p1) < signed(num_clusters)) else "0";
    icmp_ln16_fu_268_p2 <= "1" when (signed(zext_ln20_fu_264_p1) < signed(num_dim)) else "0";
    icmp_ln19_fu_305_p2 <= "1" when (unsigned(min_reg_172) > unsigned(min_0_reg_124)) else "0";
    j_fu_273_p2 <= std_logic_vector(unsigned(j_0_reg_184) + unsigned(ap_const_lv31_1));
    select_ln19_1_fu_319_p3 <= 
        min_id_0_reg_136 when (icmp_ln19_fu_305_p2(0) = '1') else 
        min_id_reg_148;
    select_ln19_fu_311_p3 <= 
        min_0_reg_124 when (icmp_ln19_fu_305_p2(0) = '1') else 
        min_reg_172;
        sext_ln17_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln17_1_fu_294_p2),64));

        sext_ln17_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln17_fu_284_p2),64));

    sp_fu_212_p2 <= std_logic_vector(unsigned(sp_0_reg_101) + unsigned(ap_const_lv7_1));
    sum_fu_333_p2 <= std_logic_vector(unsigned(add_ln17_2_fu_327_p2) - unsigned(centroids_q0));
    zext_ln12_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_112),32));
    zext_ln14_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_id_reg_148),32));
    zext_ln20_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_184),32));
    zext_ln24_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_112),64));
end behav;
