-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    num_clusters : IN STD_LOGIC_VECTOR (31 downto 0);
    num_dim : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2041792,HLS_SYN_DSP=3,HLS_SYN_FF=743,HLS_SYN_LUT=854,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_8235 : STD_LOGIC_VECTOR (15 downto 0) := "1000001000110101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln32_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln32_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_306_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_529 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_323_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_542 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln35_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln38_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_347_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_560 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln38_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sp_fu_364_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sp_reg_573 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln45_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_fu_384_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_3_reg_591 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln56_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln49_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_424_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_617 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln52_2_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_2_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_462_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln54_1_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_492_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data_in_address0 : STD_LOGIC_VECTOR (29 downto 0);
    signal data_in_ce0 : STD_LOGIC;
    signal data_in_we0 : STD_LOGIC;
    signal data_in_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_out_address0 : STD_LOGIC_VECTOR (22 downto 0);
    signal data_out_ce0 : STD_LOGIC;
    signal data_out_we0 : STD_LOGIC;
    signal data_out_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal centroids_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal centroids_ce0 : STD_LOGIC;
    signal centroids_we0 : STD_LOGIC;
    signal centroids_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_145 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i1_0_reg_159 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i2_0_reg_170 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sp_0_reg_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln47_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_0_reg_195 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal min_id_0_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_0_reg_221 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_id_reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_257 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_269 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_1_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal shl_ln32_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln55_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_2_fu_430_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_1_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln54_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_478_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln52_1_fu_482_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln52_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component kmeans_data_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component kmeans_data_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kmeans_centroids IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    data_in_U : component kmeans_data_in
    generic map (
        DataWidth => 31,
        AddressRange => 838860800,
        AddressWidth => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_in_address0,
        ce0 => data_in_ce0,
        we0 => data_in_we0,
        d0 => i_0_reg_145,
        q0 => data_in_q0);

    data_out_U : component kmeans_data_out
    generic map (
        DataWidth => 16,
        AddressRange => 8388608,
        AddressWidth => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_out_address0,
        ce0 => data_out_ce0,
        we0 => data_out_we0,
        d0 => data_out_d0,
        q0 => data_out_q0);

    centroids_U : component kmeans_centroids
    generic map (
        DataWidth => 31,
        AddressRange => 999900,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => centroids_address0,
        ce0 => centroids_ce0,
        we0 => centroids_we0,
        d0 => i2_0_reg_170,
        q0 => centroids_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_159 <= ap_const_lv24_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i1_0_reg_159 <= i_1_reg_542;
            end if; 
        end if;
    end process;

    i2_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_170 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_170 <= i_2_reg_560;
            end if; 
        end if;
    end process;

    i3_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i3_0_reg_195 <= ap_const_lv24_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i3_0_reg_195 <= i_3_reg_591;
            end if; 
        end if;
    end process;

    i_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_145 <= i_reg_529;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_145 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_0_reg_269 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_0_reg_269 <= j_reg_617;
            end if; 
        end if;
    end process;

    min_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                min_0_reg_221 <= ap_const_lv16_8235;
            elsif (((icmp_ln51_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                min_0_reg_221 <= select_ln54_1_fu_470_p3;
            end if; 
        end if;
    end process;

    min_id_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                min_id_0_reg_207 <= ap_const_lv16_0;
            elsif (((icmp_ln51_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                min_id_0_reg_207 <= select_ln54_fu_462_p3;
            end if; 
        end if;
    end process;

    min_id_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                min_id_reg_233 <= ap_const_lv16_0;
            elsif (((icmp_ln51_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                min_id_reg_233 <= c_reg_604;
            end if; 
        end if;
    end process;

    min_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                min_reg_257 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                min_reg_257 <= sum_fu_492_p2;
            end if; 
        end if;
    end process;

    phi_mul1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul1_reg_245 <= ap_const_lv32_0;
            elsif (((icmp_ln51_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_mul1_reg_245 <= add_ln56_reg_596;
            end if; 
        end if;
    end process;

    phi_mul_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul_reg_280 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_mul_reg_280 <= add_ln52_2_reg_622;
            end if; 
        end if;
    end process;

    sp_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sp_0_reg_184 <= ap_const_lv7_0;
            elsif (((icmp_ln47_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                sp_0_reg_184 <= sp_reg_573;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln52_2_reg_622 <= add_ln52_2_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln56_reg_596 <= add_ln56_fu_390_p2;
                c_reg_604 <= c_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_542 <= i_1_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_560 <= i_2_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_3_reg_591 <= i_3_fu_384_p2;
                    zext_ln47_reg_583(23 downto 0) <= zext_ln47_fu_374_p1(23 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_529 <= i_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_reg_617 <= j_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                mul_ln38_reg_552 <= mul_ln38_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln32_reg_521(31 downto 23) <= shl_ln32_fu_291_p2(31 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sp_reg_573 <= sp_fu_364_p2;
            end if;
        end if;
    end process;
    shl_ln32_reg_521(22 downto 0) <= "00000000000000000000000";
    zext_ln47_reg_583(31 downto 24) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_301_p2, ap_CS_fsm_state4, icmp_ln35_fu_317_p2, ap_CS_fsm_state6, icmp_ln38_fu_342_p2, ap_CS_fsm_state8, icmp_ln45_fu_358_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln49_fu_399_p2, ap_CS_fsm_state11, icmp_ln51_fu_419_p2, icmp_ln47_fu_378_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln35_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln38_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln45_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln47_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln49_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln51_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln52_1_fu_445_p2 <= std_logic_vector(unsigned(zext_ln55_fu_415_p1) + unsigned(phi_mul1_reg_245));
    add_ln52_2_fu_430_p0 <= num_dim;
    add_ln52_2_fu_430_p2 <= std_logic_vector(signed(add_ln52_2_fu_430_p0) + signed(phi_mul_reg_280));
    add_ln52_fu_435_p2 <= std_logic_vector(unsigned(phi_mul_reg_280) + unsigned(zext_ln47_reg_583));
    add_ln56_fu_390_p1 <= num_dim;
    add_ln56_fu_390_p2 <= std_logic_vector(unsigned(phi_mul1_reg_245) + unsigned(add_ln56_fu_390_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_out_q0),32));
    c_fu_404_p2 <= std_logic_vector(unsigned(min_id_reg_233) + unsigned(ap_const_lv16_1));

    centroids_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, zext_ln39_fu_353_p1, sext_ln52_1_fu_451_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            centroids_address0 <= sext_ln52_1_fu_451_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            centroids_address0 <= zext_ln39_fu_353_p1(20 - 1 downto 0);
        else 
            centroids_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    centroids_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            centroids_ce0 <= ap_const_logic_1;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln38_fu_342_p2)
    begin
        if (((icmp_ln38_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            centroids_we0 <= ap_const_logic_1;
        else 
            centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, zext_ln33_fu_312_p1, sext_ln52_fu_440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_in_address0 <= sext_ln52_fu_440_p1(30 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_in_address0 <= zext_ln33_fu_312_p1(30 - 1 downto 0);
        else 
            data_in_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_301_p2)
    begin
        if (((icmp_ln32_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_in_we0 <= ap_const_logic_1;
        else 
            data_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, zext_ln36_fu_329_p1, sext_ln68_fu_370_p1, zext_ln59_fu_410_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_out_address0 <= zext_ln59_fu_410_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_out_address0 <= sext_ln68_fu_370_p1(23 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_out_address0 <= zext_ln36_fu_329_p1(23 - 1 downto 0);
        else 
            data_out_address0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, min_id_0_reg_207)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_out_d0 <= min_id_0_reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_out_d0 <= ap_const_lv16_0;
        else 
            data_out_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln35_fu_317_p2, ap_CS_fsm_state10, icmp_ln49_fu_399_p2)
    begin
        if ((((icmp_ln35_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln49_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_323_p2 <= std_logic_vector(unsigned(i1_0_reg_159) + unsigned(ap_const_lv24_1));
    i_2_fu_347_p2 <= std_logic_vector(unsigned(i2_0_reg_170) + unsigned(ap_const_lv31_1));
    i_3_fu_384_p2 <= std_logic_vector(unsigned(i3_0_reg_195) + unsigned(ap_const_lv24_1));
    i_fu_306_p2 <= std_logic_vector(unsigned(i_0_reg_145) + unsigned(ap_const_lv31_1));
    icmp_ln32_fu_301_p2 <= "1" when (signed(zext_ln32_fu_297_p1) < signed(shl_ln32_reg_521)) else "0";
    icmp_ln35_fu_317_p2 <= "1" when (i1_0_reg_159 = ap_const_lv24_800000) else "0";
    icmp_ln38_fu_342_p2 <= "1" when (signed(zext_ln38_fu_338_p1) < signed(mul_ln38_reg_552)) else "0";
    icmp_ln45_fu_358_p2 <= "1" when (sp_0_reg_184 = ap_const_lv7_64) else "0";
    icmp_ln47_fu_378_p2 <= "1" when (i3_0_reg_195 = ap_const_lv24_800000) else "0";
    icmp_ln49_fu_399_p1 <= num_clusters;
    icmp_ln49_fu_399_p2 <= "1" when (signed(zext_ln49_fu_395_p1) < signed(icmp_ln49_fu_399_p1)) else "0";
    icmp_ln51_fu_419_p1 <= num_dim;
    icmp_ln51_fu_419_p2 <= "1" when (signed(zext_ln55_fu_415_p1) < signed(icmp_ln51_fu_419_p1)) else "0";
    icmp_ln54_fu_456_p2 <= "1" when (unsigned(min_reg_257) > unsigned(min_0_reg_221)) else "0";
    j_fu_424_p2 <= std_logic_vector(unsigned(j_0_reg_269) + unsigned(ap_const_lv31_1));
    mul_ln38_fu_334_p0 <= num_dim;
    mul_ln38_fu_334_p1 <= num_clusters;
    mul_ln38_fu_334_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln38_fu_334_p0) * signed(mul_ln38_fu_334_p1))), 32));
    select_ln54_1_fu_470_p3 <= 
        min_0_reg_221 when (icmp_ln54_fu_456_p2(0) = '1') else 
        min_reg_257;
    select_ln54_fu_462_p3 <= 
        min_id_0_reg_207 when (icmp_ln54_fu_456_p2(0) = '1') else 
        min_id_reg_233;
        sext_ln52_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln52_1_fu_445_p2),64));

        sext_ln52_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln52_fu_435_p2),64));

        sext_ln68_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx),64));

    shl_ln32_fu_291_p0 <= num_dim;
    shl_ln32_fu_291_p2 <= std_logic_vector(shift_left(unsigned(shl_ln32_fu_291_p0),to_integer(unsigned('0' & ap_const_lv32_17(31-1 downto 0)))));
    sp_fu_364_p2 <= std_logic_vector(unsigned(sp_0_reg_184) + unsigned(ap_const_lv7_1));
    sub_ln52_fu_486_p2 <= std_logic_vector(unsigned(trunc_ln52_fu_478_p1) - unsigned(trunc_ln52_1_fu_482_p1));
    sum_fu_492_p2 <= std_logic_vector(unsigned(sub_ln52_fu_486_p2) + unsigned(min_reg_257));
    trunc_ln52_1_fu_482_p1 <= centroids_q0(16 - 1 downto 0);
    trunc_ln52_fu_478_p1 <= data_in_q0(16 - 1 downto 0);
    zext_ln32_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_145),32));
    zext_ln33_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_145),64));
    zext_ln36_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_159),64));
    zext_ln38_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_170),32));
    zext_ln39_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_170),64));
    zext_ln47_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_195),32));
    zext_ln49_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_id_reg_233),32));
    zext_ln55_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_269),32));
    zext_ln59_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_195),64));
end behav;
