// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmeans,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.833000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=312,HLS_SYN_LUT=465,HLS_VERSION=2019_1}" *)

module kmeans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        data_out_address0,
        data_out_ce0,
        data_out_we0,
        data_out_d0,
        data_out_q0,
        centroids_address0,
        centroids_ce0,
        centroids_q0,
        num_clusters,
        num_dim,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] data_in_address0;
output   data_in_ce0;
input  [15:0] data_in_q0;
output  [6:0] data_out_address0;
output   data_out_ce0;
output   data_out_we0;
output  [31:0] data_out_d0;
input  [31:0] data_out_q0;
output  [19:0] centroids_address0;
output   centroids_ce0;
input  [15:0] centroids_q0;
input  [31:0] num_clusters;
input  [31:0] num_dim;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_ce0;
reg[6:0] data_out_address0;
reg data_out_ce0;
reg data_out_we0;
reg centroids_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] sp_fu_212_p2;
reg   [6:0] sp_reg_359;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln12_fu_218_p1;
reg   [31:0] zext_ln12_reg_364;
wire    ap_CS_fsm_state3;
wire   [6:0] i_fu_228_p2;
reg   [6:0] i_reg_372;
wire   [31:0] add_ln21_fu_234_p2;
reg   [31:0] add_ln21_reg_377;
wire    ap_CS_fsm_state4;
wire   [15:0] c_fu_248_p2;
reg   [15:0] c_reg_385;
wire   [30:0] j_fu_273_p2;
reg   [30:0] j_reg_393;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln17_3_fu_279_p2;
reg   [31:0] add_ln17_3_reg_398;
wire   [0:0] icmp_ln16_fu_268_p2;
wire   [15:0] select_ln19_fu_311_p3;
wire   [15:0] select_ln19_1_fu_319_p3;
wire   [15:0] sum_fu_333_p2;
wire    ap_CS_fsm_state6;
reg   [6:0] sp_0_reg_101;
wire   [0:0] icmp_ln12_fu_222_p2;
reg   [6:0] i_0_reg_112;
wire   [0:0] icmp_ln14_fu_243_p2;
wire   [0:0] icmp_ln10_fu_206_p2;
reg   [15:0] min_0_reg_124;
reg   [15:0] min_id_0_reg_136;
reg   [15:0] min_id_reg_148;
reg   [31:0] phi_mul1_reg_160;
reg   [15:0] min_reg_172;
reg   [30:0] j_0_reg_184;
reg   [31:0] phi_mul_reg_195;
wire   [63:0] zext_ln24_1_fu_259_p1;
wire  signed [63:0] sext_ln17_fu_289_p1;
wire  signed [63:0] sext_ln17_1_fu_300_p1;
wire   [31:0] zext_ln14_fu_239_p1;
wire   [31:0] zext_ln20_fu_264_p1;
wire   [31:0] add_ln17_fu_284_p2;
wire   [31:0] add_ln17_1_fu_294_p2;
wire   [0:0] icmp_ln19_fu_305_p2;
wire   [15:0] add_ln17_2_fu_327_p2;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_206_p2 == 1'd0))) begin
        i_0_reg_112 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_243_p2 == 1'd0))) begin
        i_0_reg_112 <= i_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_184 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_184 <= j_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_222_p2 == 1'd0))) begin
        min_0_reg_124 <= 16'd33333;
    end else if (((icmp_ln16_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        min_0_reg_124 <= select_ln19_fu_311_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_222_p2 == 1'd0))) begin
        min_id_0_reg_136 <= 16'd0;
    end else if (((icmp_ln16_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        min_id_0_reg_136 <= select_ln19_1_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_222_p2 == 1'd0))) begin
        min_id_reg_148 <= 16'd0;
    end else if (((icmp_ln16_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        min_id_reg_148 <= c_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        min_reg_172 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        min_reg_172 <= sum_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_222_p2 == 1'd0))) begin
        phi_mul1_reg_160 <= 32'd0;
    end else if (((icmp_ln16_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul1_reg_160 <= add_ln21_reg_377;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_195 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_195 <= add_ln17_3_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sp_0_reg_101 <= sp_reg_359;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sp_0_reg_101 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln17_3_reg_398 <= add_ln17_3_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln21_reg_377 <= add_ln21_fu_234_p2;
        c_reg_385 <= c_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_372 <= i_fu_228_p2;
        zext_ln12_reg_364[6 : 0] <= zext_ln12_fu_218_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_393 <= j_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sp_reg_359 <= sp_fu_212_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        centroids_ce0 = 1'b1;
    end else begin
        centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_out_address0 = zext_ln24_1_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_out_address0 = 64'd0;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_243_p2 == 1'd0))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_206_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_243_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln16_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_1_fu_294_p2 = (zext_ln20_fu_264_p1 + phi_mul1_reg_160);

assign add_ln17_2_fu_327_p2 = (data_in_q0 + min_reg_172);

assign add_ln17_3_fu_279_p2 = (phi_mul_reg_195 + num_dim);

assign add_ln17_fu_284_p2 = (phi_mul_reg_195 + zext_ln12_reg_364);

assign add_ln21_fu_234_p2 = (phi_mul1_reg_160 + num_dim);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = data_out_q0;

assign c_fu_248_p2 = (min_id_reg_148 + 16'd1);

assign centroids_address0 = sext_ln17_1_fu_300_p1;

assign data_in_address0 = sext_ln17_fu_289_p1;

assign data_out_d0 = min_id_0_reg_136;

assign i_fu_228_p2 = (i_0_reg_112 + 7'd1);

assign icmp_ln10_fu_206_p2 = ((sp_0_reg_101 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_222_p2 = ((i_0_reg_112 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_243_p2 = (($signed(zext_ln14_fu_239_p1) < $signed(num_clusters)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_268_p2 = (($signed(zext_ln20_fu_264_p1) < $signed(num_dim)) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_305_p2 = ((min_reg_172 > min_0_reg_124) ? 1'b1 : 1'b0);

assign j_fu_273_p2 = (j_0_reg_184 + 31'd1);

assign select_ln19_1_fu_319_p3 = ((icmp_ln19_fu_305_p2[0:0] === 1'b1) ? min_id_0_reg_136 : min_id_reg_148);

assign select_ln19_fu_311_p3 = ((icmp_ln19_fu_305_p2[0:0] === 1'b1) ? min_0_reg_124 : min_reg_172);

assign sext_ln17_1_fu_300_p1 = $signed(add_ln17_1_fu_294_p2);

assign sext_ln17_fu_289_p1 = $signed(add_ln17_fu_284_p2);

assign sp_fu_212_p2 = (sp_0_reg_101 + 7'd1);

assign sum_fu_333_p2 = (add_ln17_2_fu_327_p2 - centroids_q0);

assign zext_ln12_fu_218_p1 = i_0_reg_112;

assign zext_ln14_fu_239_p1 = min_id_reg_148;

assign zext_ln20_fu_264_p1 = j_0_reg_184;

assign zext_ln24_1_fu_259_p1 = i_0_reg_112;

always @ (posedge ap_clk) begin
    zext_ln12_reg_364[31:7] <= 25'b0000000000000000000000000;
end

endmodule //kmeans
