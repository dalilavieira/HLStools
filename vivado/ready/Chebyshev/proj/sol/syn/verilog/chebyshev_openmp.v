// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="chebyshev_openmp,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.530000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=105,HLS_SYN_LUT=211,HLS_VERSION=2019_1}" *)

module chebyshev_openmp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        data_out_address0,
        data_out_ce0,
        data_out_we0,
        data_out_d0,
        data_out_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_in_address0;
output   data_in_ce0;
input  [15:0] data_in_q0;
output  [6:0] data_out_address0;
output   data_out_ce0;
output   data_out_we0;
output  [31:0] data_out_d0;
input  [31:0] data_out_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_ce0;
reg[6:0] data_out_address0;
reg data_out_ce0;
reg data_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_94_p2;
reg   [6:0] i_reg_176;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_106_p2;
reg   [6:0] k_reg_184;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln53_fu_112_p1;
reg   [63:0] zext_ln53_reg_189;
wire   [0:0] icmp_ln52_fu_100_p2;
wire  signed [31:0] A_fu_117_p1;
reg  signed [31:0] A_reg_199;
wire    ap_CS_fsm_state4;
wire   [31:0] mul_ln54_2_fu_138_p2;
reg   [31:0] mul_ln54_2_reg_204;
reg   [6:0] i_0_reg_66;
reg   [6:0] k_0_reg_77;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln48_fu_88_p2;
wire  signed [15:0] A_fu_117_p0;
wire  signed [15:0] sext_ln54_fu_121_p0;
wire  signed [27:0] mul_ln54_fu_154_p2;
wire   [31:0] shl_ln_fu_125_p3;
wire  signed [31:0] add_ln54_fu_132_p2;
wire  signed [31:0] mul_ln54_1_fu_161_p2;
wire  signed [15:0] mul_ln54_3_fu_148_p0;
wire  signed [31:0] add_ln54_1_fu_143_p2;
wire  signed [15:0] mul_ln54_fu_154_p0;
wire  signed [27:0] sext_ln54_fu_121_p1;
wire  signed [15:0] mul_ln54_fu_154_p1;
wire  signed [15:0] mul_ln54_1_fu_161_p0;
wire  signed [15:0] mul_ln54_1_fu_161_p1;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

chebyshev_openmp_mul_mul_16s_16s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1(
    .din0(mul_ln54_fu_154_p0),
    .din1(mul_ln54_fu_154_p1),
    .dout(mul_ln54_fu_154_p2)
);

chebyshev_openmp_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2(
    .din0(mul_ln54_1_fu_161_p0),
    .din1(mul_ln54_1_fu_161_p1),
    .dout(mul_ln54_1_fu_161_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_66 <= i_reg_176;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_66 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_77 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_77 <= k_reg_184;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_reg_199 <= A_fu_117_p1;
        mul_ln54_2_reg_204 <= mul_ln54_2_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_176 <= i_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_184 <= k_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln53_reg_189[6 : 0] <= zext_ln53_fu_112_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_out_address0 = zext_ln53_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_out_address0 = 64'd0;
    end else begin
        data_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln48_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln52_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_fu_117_p0 = data_in_q0;

assign A_fu_117_p1 = A_fu_117_p0;

assign add_ln54_1_fu_143_p2 = (mul_ln54_2_reg_204 + 32'd5);

assign add_ln54_fu_132_p2 = ($signed(shl_ln_fu_125_p3) + $signed(32'd4294967276));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = data_out_q0;

assign data_in_address0 = zext_ln53_fu_112_p1;

assign data_out_d0 = ($signed(mul_ln54_3_fu_148_p0) * $signed(add_ln54_1_fu_143_p2));

assign i_fu_94_p2 = (i_0_reg_66 + 7'd1);

assign icmp_ln48_fu_88_p2 = ((i_0_reg_66 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_100_p2 = ((k_0_reg_77 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_106_p2 = (k_0_reg_77 + 7'd1);

assign mul_ln54_1_fu_161_p0 = A_fu_117_p1;

assign mul_ln54_1_fu_161_p1 = A_fu_117_p1;

assign mul_ln54_2_fu_138_p2 = ($signed(add_ln54_fu_132_p2) * $signed(mul_ln54_1_fu_161_p2));

assign mul_ln54_3_fu_148_p0 = A_reg_199;

assign mul_ln54_fu_154_p0 = sext_ln54_fu_121_p1;

assign mul_ln54_fu_154_p1 = sext_ln54_fu_121_p1;

assign sext_ln54_fu_121_p0 = data_in_q0;

assign sext_ln54_fu_121_p1 = sext_ln54_fu_121_p0;

assign shl_ln_fu_125_p3 = {{mul_ln54_fu_154_p2}, {4'd0}};

assign zext_ln53_fu_112_p1 = k_0_reg_77;

always @ (posedge ap_clk) begin
    zext_ln53_reg_189[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //chebyshev_openmp
