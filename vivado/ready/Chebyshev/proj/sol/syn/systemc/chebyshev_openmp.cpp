// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "chebyshev_openmp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic chebyshev_openmp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic chebyshev_openmp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state1 = "1";
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state2 = "10";
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state3 = "100";
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state4 = "1000";
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state5 = "10000";
const sc_lv<6> chebyshev_openmp::ap_ST_fsm_state6 = "100000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_1 = "1";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_2 = "10";
const sc_lv<1> chebyshev_openmp::ap_const_lv1_0 = "0";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_3 = "11";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_0 = "0000000";
const sc_lv<1> chebyshev_openmp::ap_const_lv1_1 = "1";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_4 = "100";
const sc_lv<64> chebyshev_openmp::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_64 = "1100100";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_1 = "1";
const sc_lv<4> chebyshev_openmp::ap_const_lv4_0 = "0000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_FFFFFFEC = "11111111111111111111111111101100";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_5 = "101";
const bool chebyshev_openmp::ap_const_boolean_1 = true;

chebyshev_openmp::chebyshev_openmp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1 = new chebyshev_openmp_mul_mul_16s_16s_28_1_1<1,1,16,16,28>("chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1");
    chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1->din0(mul_ln54_fu_154_p0);
    chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1->din1(mul_ln54_fu_154_p1);
    chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1->dout(mul_ln54_fu_154_p2);
    chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2 = new chebyshev_openmp_mul_mul_16s_16s_32_1_1<1,1,16,16,32>("chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2");
    chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2->din0(mul_ln54_1_fu_161_p0);
    chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2->din1(mul_ln54_1_fu_161_p1);
    chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2->dout(mul_ln54_1_fu_161_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_fu_117_p0);
    sensitive << ( data_in_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_A_fu_117_p1);
    sensitive << ( A_fu_117_p0 );

    SC_METHOD(thread_add_ln54_1_fu_143_p2);
    sensitive << ( mul_ln54_2_reg_204 );

    SC_METHOD(thread_add_ln54_fu_132_p2);
    sensitive << ( shl_ln_fu_125_p3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( data_out_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln53_fu_112_p1 );

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_out_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln53_reg_189 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_data_out_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_data_out_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln54_3_fu_148_p0 );
    sensitive << ( add_ln54_1_fu_143_p2 );

    SC_METHOD(thread_data_out_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_94_p2);
    sensitive << ( i_0_reg_66 );

    SC_METHOD(thread_icmp_ln48_fu_88_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_66 );

    SC_METHOD(thread_icmp_ln52_fu_100_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_77 );

    SC_METHOD(thread_k_fu_106_p2);
    sensitive << ( k_0_reg_77 );

    SC_METHOD(thread_mul_ln54_1_fu_161_p0);
    sensitive << ( A_fu_117_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln54_1_fu_161_p1);
    sensitive << ( A_fu_117_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln54_2_fu_138_p2);
    sensitive << ( add_ln54_fu_132_p2 );
    sensitive << ( mul_ln54_1_fu_161_p2 );

    SC_METHOD(thread_mul_ln54_3_fu_148_p0);
    sensitive << ( A_reg_199 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_mul_ln54_fu_154_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sext_ln54_fu_121_p1 );

    SC_METHOD(thread_mul_ln54_fu_154_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sext_ln54_fu_121_p1 );

    SC_METHOD(thread_sext_ln54_fu_121_p0);
    sensitive << ( data_in_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln54_fu_121_p1);
    sensitive << ( sext_ln54_fu_121_p0 );

    SC_METHOD(thread_shl_ln_fu_125_p3);
    sensitive << ( mul_ln54_fu_154_p2 );

    SC_METHOD(thread_zext_ln53_fu_112_p1);
    sensitive << ( k_0_reg_77 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln52_fu_100_p2 );
    sensitive << ( icmp_ln48_fu_88_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "chebyshev_openmp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_in_address0, "(port)data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "(port)data_in_ce0");
    sc_trace(mVcdFile, data_in_q0, "(port)data_in_q0");
    sc_trace(mVcdFile, data_out_address0, "(port)data_out_address0");
    sc_trace(mVcdFile, data_out_ce0, "(port)data_out_ce0");
    sc_trace(mVcdFile, data_out_we0, "(port)data_out_we0");
    sc_trace(mVcdFile, data_out_d0, "(port)data_out_d0");
    sc_trace(mVcdFile, data_out_q0, "(port)data_out_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_94_p2, "i_fu_94_p2");
    sc_trace(mVcdFile, i_reg_176, "i_reg_176");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_106_p2, "k_fu_106_p2");
    sc_trace(mVcdFile, k_reg_184, "k_reg_184");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln53_fu_112_p1, "zext_ln53_fu_112_p1");
    sc_trace(mVcdFile, zext_ln53_reg_189, "zext_ln53_reg_189");
    sc_trace(mVcdFile, icmp_ln52_fu_100_p2, "icmp_ln52_fu_100_p2");
    sc_trace(mVcdFile, A_fu_117_p1, "A_fu_117_p1");
    sc_trace(mVcdFile, A_reg_199, "A_reg_199");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, mul_ln54_2_fu_138_p2, "mul_ln54_2_fu_138_p2");
    sc_trace(mVcdFile, mul_ln54_2_reg_204, "mul_ln54_2_reg_204");
    sc_trace(mVcdFile, i_0_reg_66, "i_0_reg_66");
    sc_trace(mVcdFile, k_0_reg_77, "k_0_reg_77");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln48_fu_88_p2, "icmp_ln48_fu_88_p2");
    sc_trace(mVcdFile, A_fu_117_p0, "A_fu_117_p0");
    sc_trace(mVcdFile, sext_ln54_fu_121_p0, "sext_ln54_fu_121_p0");
    sc_trace(mVcdFile, mul_ln54_fu_154_p2, "mul_ln54_fu_154_p2");
    sc_trace(mVcdFile, shl_ln_fu_125_p3, "shl_ln_fu_125_p3");
    sc_trace(mVcdFile, add_ln54_fu_132_p2, "add_ln54_fu_132_p2");
    sc_trace(mVcdFile, mul_ln54_1_fu_161_p2, "mul_ln54_1_fu_161_p2");
    sc_trace(mVcdFile, mul_ln54_3_fu_148_p0, "mul_ln54_3_fu_148_p0");
    sc_trace(mVcdFile, add_ln54_1_fu_143_p2, "add_ln54_1_fu_143_p2");
    sc_trace(mVcdFile, mul_ln54_fu_154_p0, "mul_ln54_fu_154_p0");
    sc_trace(mVcdFile, sext_ln54_fu_121_p1, "sext_ln54_fu_121_p1");
    sc_trace(mVcdFile, mul_ln54_fu_154_p1, "mul_ln54_fu_154_p1");
    sc_trace(mVcdFile, mul_ln54_1_fu_161_p0, "mul_ln54_1_fu_161_p0");
    sc_trace(mVcdFile, mul_ln54_1_fu_161_p1, "mul_ln54_1_fu_161_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("chebyshev_openmp.hdltvin.dat");
    mHdltvoutHandle.open("chebyshev_openmp.hdltvout.dat");
}

chebyshev_openmp::~chebyshev_openmp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1;
    delete chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2;
}

void chebyshev_openmp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln52_fu_100_p2.read(), ap_const_lv1_1))) {
        i_0_reg_66 = i_reg_176.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_66 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln48_fu_88_p2.read()))) {
        k_0_reg_77 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_0_reg_77 = k_reg_184.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_reg_199 = A_fu_117_p1.read();
        mul_ln54_2_reg_204 = mul_ln54_2_fu_138_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_176 = i_fu_94_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_184 = k_fu_106_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln52_fu_100_p2.read(), ap_const_lv1_0))) {
        zext_ln53_reg_189 = zext_ln53_fu_112_p1.read();
    }
}

void chebyshev_openmp::thread_A_fu_117_p0() {
    A_fu_117_p0 = data_in_q0.read();
}

void chebyshev_openmp::thread_A_fu_117_p1() {
    A_fu_117_p1 = esl_sext<32,16>(A_fu_117_p0.read());
}

void chebyshev_openmp::thread_add_ln54_1_fu_143_p2() {
    add_ln54_1_fu_143_p2 = (!mul_ln54_2_reg_204.read().is_01() || !ap_const_lv32_5.is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln54_2_reg_204.read()) + sc_biguint<32>(ap_const_lv32_5));
}

void chebyshev_openmp::thread_add_ln54_fu_132_p2() {
    add_ln54_fu_132_p2 = (!shl_ln_fu_125_p3.read().is_01() || !ap_const_lv32_FFFFFFEC.is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln_fu_125_p3.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFEC));
}

void chebyshev_openmp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void chebyshev_openmp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void chebyshev_openmp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void chebyshev_openmp::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void chebyshev_openmp::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void chebyshev_openmp::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void chebyshev_openmp::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_return() {
    ap_return = data_out_q0.read();
}

void chebyshev_openmp::thread_data_in_address0() {
    data_in_address0 =  (sc_lv<7>) (zext_ln53_fu_112_p1.read());
}

void chebyshev_openmp::thread_data_in_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_in_ce0 = ap_const_logic_1;
    } else {
        data_in_ce0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_data_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_out_address0 =  (sc_lv<7>) (zext_ln53_reg_189.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_out_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        data_out_address0 = "XXXXXXX";
    }
}

void chebyshev_openmp::thread_data_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        data_out_ce0 = ap_const_logic_1;
    } else {
        data_out_ce0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_data_out_d0() {
    data_out_d0 = (!mul_ln54_3_fu_148_p0.read().is_01() || !add_ln54_1_fu_143_p2.read().is_01())? sc_lv<32>(): sc_bigint<16>(mul_ln54_3_fu_148_p0.read()) * sc_bigint<32>(add_ln54_1_fu_143_p2.read());
}

void chebyshev_openmp::thread_data_out_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_out_we0 = ap_const_logic_1;
    } else {
        data_out_we0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_i_fu_94_p2() {
    i_fu_94_p2 = (!i_0_reg_66.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_66.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void chebyshev_openmp::thread_icmp_ln48_fu_88_p2() {
    icmp_ln48_fu_88_p2 = (!i_0_reg_66.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_66.read() == ap_const_lv7_64);
}

void chebyshev_openmp::thread_icmp_ln52_fu_100_p2() {
    icmp_ln52_fu_100_p2 = (!k_0_reg_77.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_77.read() == ap_const_lv7_64);
}

void chebyshev_openmp::thread_k_fu_106_p2() {
    k_fu_106_p2 = (!k_0_reg_77.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_77.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void chebyshev_openmp::thread_mul_ln54_1_fu_161_p0() {
    mul_ln54_1_fu_161_p0 =  (sc_lv<16>) (A_fu_117_p1.read());
}

void chebyshev_openmp::thread_mul_ln54_1_fu_161_p1() {
    mul_ln54_1_fu_161_p1 =  (sc_lv<16>) (A_fu_117_p1.read());
}

void chebyshev_openmp::thread_mul_ln54_2_fu_138_p2() {
    mul_ln54_2_fu_138_p2 = (!add_ln54_fu_132_p2.read().is_01() || !mul_ln54_1_fu_161_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(add_ln54_fu_132_p2.read()) * sc_bigint<32>(mul_ln54_1_fu_161_p2.read());
}

void chebyshev_openmp::thread_mul_ln54_3_fu_148_p0() {
    mul_ln54_3_fu_148_p0 =  (sc_lv<16>) (A_reg_199.read());
}

void chebyshev_openmp::thread_mul_ln54_fu_154_p0() {
    mul_ln54_fu_154_p0 =  (sc_lv<16>) (sext_ln54_fu_121_p1.read());
}

void chebyshev_openmp::thread_mul_ln54_fu_154_p1() {
    mul_ln54_fu_154_p1 =  (sc_lv<16>) (sext_ln54_fu_121_p1.read());
}

void chebyshev_openmp::thread_sext_ln54_fu_121_p0() {
    sext_ln54_fu_121_p0 = data_in_q0.read();
}

void chebyshev_openmp::thread_sext_ln54_fu_121_p1() {
    sext_ln54_fu_121_p1 = esl_sext<28,16>(sext_ln54_fu_121_p0.read());
}

void chebyshev_openmp::thread_shl_ln_fu_125_p3() {
    shl_ln_fu_125_p3 = esl_concat<28,4>(mul_ln54_fu_154_p2.read(), ap_const_lv4_0);
}

void chebyshev_openmp::thread_zext_ln53_fu_112_p1() {
    zext_ln53_fu_112_p1 = esl_zext<64,7>(k_0_reg_77.read());
}

void chebyshev_openmp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln48_fu_88_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln52_fu_100_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void chebyshev_openmp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_address0\" :  \"" << data_in_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_in_ce0\" :  \"" << data_in_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_q0\" :  \"" << data_in_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_address0\" :  \"" << data_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_ce0\" :  \"" << data_out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_we0\" :  \"" << data_out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_d0\" :  \"" << data_out_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_out_q0\" :  \"" << data_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

