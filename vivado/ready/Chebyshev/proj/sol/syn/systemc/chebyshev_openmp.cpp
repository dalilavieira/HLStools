// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "chebyshev_openmp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic chebyshev_openmp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic chebyshev_openmp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state1 = "1";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state2 = "10";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state3 = "100";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state4 = "1000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state5 = "10000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state6 = "100000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> chebyshev_openmp::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_1 = "1";
const sc_lv<1> chebyshev_openmp::ap_const_lv1_0 = "0";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_3 = "11";
const sc_lv<1> chebyshev_openmp::ap_const_lv1_1 = "1";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_4 = "100";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_7 = "111";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_8 = "1000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_9 = "1001";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_A = "1010";
const sc_lv<27> chebyshev_openmp::ap_const_lv27_0 = "000000000000000000000000000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_2 = "10";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_0 = "0000000";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_B = "1011";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_5 = "101";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_6 = "110";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_C = "1100";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_D = "1101";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_E = "1110";
const sc_lv<27> chebyshev_openmp::ap_const_lv27_4000000 = "100000000000000000000000000";
const sc_lv<27> chebyshev_openmp::ap_const_lv27_1 = "1";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_64 = "1100100";
const sc_lv<7> chebyshev_openmp::ap_const_lv7_1 = "1";
const sc_lv<32> chebyshev_openmp::ap_const_lv32_FFFFFFEC = "11111111111111111111111111101100";
const bool chebyshev_openmp::ap_const_boolean_1 = true;

chebyshev_openmp::chebyshev_openmp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    data_in_U = new chebyshev_openmp_data_in("data_in_U");
    data_in_U->clk(ap_clk);
    data_in_U->reset(ap_rst);
    data_in_U->address0(data_in_address0);
    data_in_U->ce0(data_in_ce0);
    data_in_U->we0(data_in_we0);
    data_in_U->d0(k_0_reg_100);
    data_in_U->q0(data_in_q0);
    data_out_U = new chebyshev_openmp_data_out("data_out_U");
    data_out_U->clk(ap_clk);
    data_out_U->reset(ap_rst);
    data_out_U->address0(data_out_address0);
    data_out_U->ce0(data_out_ce0);
    data_out_U->we0(data_out_we0);
    data_out_U->d0(data_out_d0);
    data_out_U->q0(data_out_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_fu_187_p1);
    sensitive << ( data_in_q0 );

    SC_METHOD(thread_add_ln79_1_fu_213_p2);
    sensitive << ( mul_ln79_1_reg_288 );

    SC_METHOD(thread_add_ln79_fu_202_p2);
    sensitive << ( shl_ln79_fu_197_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_return);
    sensitive << ( data_out_q0 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_data_in_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln78_fu_182_p1 );
    sensitive << ( zext_ln67_fu_148_p1 );

    SC_METHOD(thread_data_in_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_in_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_fu_136_p2 );

    SC_METHOD(thread_data_out_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln78_reg_267 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( zext_ln67_fu_148_p1 );
    sensitive << ( sext_ln87_fu_166_p1 );

    SC_METHOD(thread_data_out_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_data_out_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( mul_ln79_2_reg_293 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_data_out_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_fu_136_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_i_fu_160_p2);
    sensitive << ( i_0_reg_114 );

    SC_METHOD(thread_icmp_ln66_fu_136_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_reg_100 );

    SC_METHOD(thread_icmp_ln73_fu_154_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_reg_114 );

    SC_METHOD(thread_icmp_ln77_fu_170_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k1_0_reg_125 );

    SC_METHOD(thread_k_1_fu_176_p2);
    sensitive << ( k1_0_reg_125 );

    SC_METHOD(thread_k_fu_142_p2);
    sensitive << ( k_0_reg_100 );

    SC_METHOD(thread_mul_ln79_1_fu_208_p2);
    sensitive << ( mul_ln79_reg_282 );
    sensitive << ( add_ln79_fu_202_p2 );

    SC_METHOD(thread_mul_ln79_2_fu_218_p1);
    sensitive << ( A_reg_277 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_mul_ln79_2_fu_218_p2);
    sensitive << ( add_ln79_1_fu_213_p2 );
    sensitive << ( mul_ln79_2_fu_218_p1 );

    SC_METHOD(thread_mul_ln79_fu_191_p0);
    sensitive << ( A_fu_187_p1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_mul_ln79_fu_191_p1);
    sensitive << ( A_fu_187_p1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_mul_ln79_fu_191_p2);
    sensitive << ( mul_ln79_fu_191_p0 );
    sensitive << ( mul_ln79_fu_191_p1 );

    SC_METHOD(thread_sext_ln87_fu_166_p1);
    sensitive << ( idx );

    SC_METHOD(thread_shl_ln79_fu_197_p2);
    sensitive << ( mul_ln79_reg_282 );

    SC_METHOD(thread_zext_ln67_fu_148_p1);
    sensitive << ( k_0_reg_100 );

    SC_METHOD(thread_zext_ln78_fu_182_p1);
    sensitive << ( k1_0_reg_125 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln66_fu_136_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln73_fu_154_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln77_fu_170_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "chebyshev_openmp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, idx, "(port)idx");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, k_fu_142_p2, "k_fu_142_p2");
    sc_trace(mVcdFile, k_reg_231, "k_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln66_fu_136_p2, "icmp_ln66_fu_136_p2");
    sc_trace(mVcdFile, i_fu_160_p2, "i_fu_160_p2");
    sc_trace(mVcdFile, i_reg_249, "i_reg_249");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln73_fu_154_p2, "icmp_ln73_fu_154_p2");
    sc_trace(mVcdFile, k_1_fu_176_p2, "k_1_fu_176_p2");
    sc_trace(mVcdFile, k_1_reg_262, "k_1_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln78_fu_182_p1, "zext_ln78_fu_182_p1");
    sc_trace(mVcdFile, zext_ln78_reg_267, "zext_ln78_reg_267");
    sc_trace(mVcdFile, icmp_ln77_fu_170_p2, "icmp_ln77_fu_170_p2");
    sc_trace(mVcdFile, A_fu_187_p1, "A_fu_187_p1");
    sc_trace(mVcdFile, A_reg_277, "A_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, mul_ln79_fu_191_p2, "mul_ln79_fu_191_p2");
    sc_trace(mVcdFile, mul_ln79_reg_282, "mul_ln79_reg_282");
    sc_trace(mVcdFile, mul_ln79_1_fu_208_p2, "mul_ln79_1_fu_208_p2");
    sc_trace(mVcdFile, mul_ln79_1_reg_288, "mul_ln79_1_reg_288");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, mul_ln79_2_fu_218_p2, "mul_ln79_2_fu_218_p2");
    sc_trace(mVcdFile, mul_ln79_2_reg_293, "mul_ln79_2_reg_293");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, data_in_address0, "data_in_address0");
    sc_trace(mVcdFile, data_in_ce0, "data_in_ce0");
    sc_trace(mVcdFile, data_in_we0, "data_in_we0");
    sc_trace(mVcdFile, data_in_q0, "data_in_q0");
    sc_trace(mVcdFile, data_out_address0, "data_out_address0");
    sc_trace(mVcdFile, data_out_ce0, "data_out_ce0");
    sc_trace(mVcdFile, data_out_we0, "data_out_we0");
    sc_trace(mVcdFile, data_out_d0, "data_out_d0");
    sc_trace(mVcdFile, data_out_q0, "data_out_q0");
    sc_trace(mVcdFile, k_0_reg_100, "k_0_reg_100");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_114, "i_0_reg_114");
    sc_trace(mVcdFile, k1_0_reg_125, "k1_0_reg_125");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, zext_ln67_fu_148_p1, "zext_ln67_fu_148_p1");
    sc_trace(mVcdFile, sext_ln87_fu_166_p1, "sext_ln87_fu_166_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, mul_ln79_fu_191_p0, "mul_ln79_fu_191_p0");
    sc_trace(mVcdFile, mul_ln79_fu_191_p1, "mul_ln79_fu_191_p1");
    sc_trace(mVcdFile, shl_ln79_fu_197_p2, "shl_ln79_fu_197_p2");
    sc_trace(mVcdFile, add_ln79_fu_202_p2, "add_ln79_fu_202_p2");
    sc_trace(mVcdFile, add_ln79_1_fu_213_p2, "add_ln79_1_fu_213_p2");
    sc_trace(mVcdFile, mul_ln79_2_fu_218_p1, "mul_ln79_2_fu_218_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("chebyshev_openmp.hdltvin.dat");
    mHdltvoutHandle.open("chebyshev_openmp.hdltvout.dat");
}

chebyshev_openmp::~chebyshev_openmp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete data_in_U;
    delete data_out_U;
}

void chebyshev_openmp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln66_fu_136_p2.read(), ap_const_lv1_1))) {
        i_0_reg_114 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln77_fu_170_p2.read()))) {
        i_0_reg_114 = i_reg_249.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln73_fu_154_p2.read()))) {
        k1_0_reg_125 = ap_const_lv27_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        k1_0_reg_125 = k_1_reg_262.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_0_reg_100 = k_reg_231.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_100 = ap_const_lv27_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        A_reg_277 = A_fu_187_p1.read();
        mul_ln79_reg_282 = mul_ln79_fu_191_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_249 = i_fu_160_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_1_reg_262 = k_1_fu_176_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_231 = k_fu_142_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        mul_ln79_1_reg_288 = mul_ln79_1_fu_208_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        mul_ln79_2_reg_293 = mul_ln79_2_fu_218_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln77_fu_170_p2.read()))) {
        zext_ln78_reg_267 = zext_ln78_fu_182_p1.read();
    }
}

void chebyshev_openmp::thread_A_fu_187_p1() {
    A_fu_187_p1 = esl_zext<32,27>(data_in_q0.read());
}

void chebyshev_openmp::thread_add_ln79_1_fu_213_p2() {
    add_ln79_1_fu_213_p2 = (!ap_const_lv32_5.is_01() || !mul_ln79_1_reg_288.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_5) + sc_biguint<32>(mul_ln79_1_reg_288.read()));
}

void chebyshev_openmp::thread_add_ln79_fu_202_p2() {
    add_ln79_fu_202_p2 = (!ap_const_lv32_FFFFFFEC.is_01() || !shl_ln79_fu_197_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFEC) + sc_biguint<32>(shl_ln79_fu_197_p2.read()));
}

void chebyshev_openmp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void chebyshev_openmp::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void chebyshev_openmp::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void chebyshev_openmp::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void chebyshev_openmp::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void chebyshev_openmp::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void chebyshev_openmp::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void chebyshev_openmp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void chebyshev_openmp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void chebyshev_openmp::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void chebyshev_openmp::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void chebyshev_openmp::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void chebyshev_openmp::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void chebyshev_openmp::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void chebyshev_openmp::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void chebyshev_openmp::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_ap_return() {
    ap_return = data_out_q0.read();
}

void chebyshev_openmp::thread_data_in_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data_in_address0 =  (sc_lv<27>) (zext_ln78_fu_182_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_in_address0 =  (sc_lv<27>) (zext_ln67_fu_148_p1.read());
    } else {
        data_in_address0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void chebyshev_openmp::thread_data_in_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data_in_ce0 = ap_const_logic_1;
    } else {
        data_in_ce0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_data_in_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln66_fu_136_p2.read(), ap_const_lv1_0))) {
        data_in_we0 = ap_const_logic_1;
    } else {
        data_in_we0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_data_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        data_out_address0 =  (sc_lv<27>) (zext_ln78_reg_267.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        data_out_address0 =  (sc_lv<27>) (sext_ln87_fu_166_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_out_address0 =  (sc_lv<27>) (zext_ln67_fu_148_p1.read());
    } else {
        data_out_address0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void chebyshev_openmp::thread_data_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        data_out_ce0 = ap_const_logic_1;
    } else {
        data_out_ce0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_data_out_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        data_out_d0 = mul_ln79_2_reg_293.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_out_d0 = ap_const_lv32_0;
    } else {
        data_out_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void chebyshev_openmp::thread_data_out_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln66_fu_136_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_out_we0 = ap_const_logic_1;
    } else {
        data_out_we0 = ap_const_logic_0;
    }
}

void chebyshev_openmp::thread_i_fu_160_p2() {
    i_fu_160_p2 = (!i_0_reg_114.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_114.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void chebyshev_openmp::thread_icmp_ln66_fu_136_p2() {
    icmp_ln66_fu_136_p2 = (!k_0_reg_100.read().is_01() || !ap_const_lv27_4000000.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_100.read() == ap_const_lv27_4000000);
}

void chebyshev_openmp::thread_icmp_ln73_fu_154_p2() {
    icmp_ln73_fu_154_p2 = (!i_0_reg_114.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_114.read() == ap_const_lv7_64);
}

void chebyshev_openmp::thread_icmp_ln77_fu_170_p2() {
    icmp_ln77_fu_170_p2 = (!k1_0_reg_125.read().is_01() || !ap_const_lv27_4000000.is_01())? sc_lv<1>(): sc_lv<1>(k1_0_reg_125.read() == ap_const_lv27_4000000);
}

void chebyshev_openmp::thread_k_1_fu_176_p2() {
    k_1_fu_176_p2 = (!k1_0_reg_125.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<27>(): (sc_biguint<27>(k1_0_reg_125.read()) + sc_biguint<27>(ap_const_lv27_1));
}

void chebyshev_openmp::thread_k_fu_142_p2() {
    k_fu_142_p2 = (!k_0_reg_100.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<27>(): (sc_biguint<27>(k_0_reg_100.read()) + sc_biguint<27>(ap_const_lv27_1));
}

void chebyshev_openmp::thread_mul_ln79_1_fu_208_p2() {
    mul_ln79_1_fu_208_p2 = (!add_ln79_fu_202_p2.read().is_01() || !mul_ln79_reg_282.read().is_01())? sc_lv<32>(): sc_bigint<32>(add_ln79_fu_202_p2.read()) * sc_bigint<32>(mul_ln79_reg_282.read());
}

void chebyshev_openmp::thread_mul_ln79_2_fu_218_p1() {
    mul_ln79_2_fu_218_p1 =  (sc_lv<27>) (A_reg_277.read());
}

void chebyshev_openmp::thread_mul_ln79_2_fu_218_p2() {
    mul_ln79_2_fu_218_p2 = (!add_ln79_1_fu_213_p2.read().is_01() || !mul_ln79_2_fu_218_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(add_ln79_1_fu_213_p2.read()) * sc_biguint<27>(mul_ln79_2_fu_218_p1.read());
}

void chebyshev_openmp::thread_mul_ln79_fu_191_p0() {
    mul_ln79_fu_191_p0 =  (sc_lv<27>) (A_fu_187_p1.read());
}

void chebyshev_openmp::thread_mul_ln79_fu_191_p1() {
    mul_ln79_fu_191_p1 =  (sc_lv<27>) (A_fu_187_p1.read());
}

void chebyshev_openmp::thread_mul_ln79_fu_191_p2() {
    mul_ln79_fu_191_p2 = (!mul_ln79_fu_191_p0.read().is_01() || !mul_ln79_fu_191_p1.read().is_01())? sc_lv<32>(): sc_biguint<27>(mul_ln79_fu_191_p0.read()) * sc_biguint<27>(mul_ln79_fu_191_p1.read());
}

void chebyshev_openmp::thread_sext_ln87_fu_166_p1() {
    sext_ln87_fu_166_p1 = esl_sext<64,32>(idx.read());
}

void chebyshev_openmp::thread_shl_ln79_fu_197_p2() {
    shl_ln79_fu_197_p2 = (!ap_const_lv32_4.is_01())? sc_lv<32>(): mul_ln79_reg_282.read() << (unsigned short)ap_const_lv32_4.to_uint();
}

void chebyshev_openmp::thread_zext_ln67_fu_148_p1() {
    zext_ln67_fu_148_p1 = esl_zext<64,27>(k_0_reg_100.read());
}

void chebyshev_openmp::thread_zext_ln78_fu_182_p1() {
    zext_ln78_fu_182_p1 = esl_zext<64,27>(k1_0_reg_125.read());
}

void chebyshev_openmp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln66_fu_136_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln73_fu_154_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln77_fu_170_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

void chebyshev_openmp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"idx\" :  \"" << idx.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

