-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity chebyshev_openmp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_out_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_out_ce0 : OUT STD_LOGIC;
    data_out_we0 : OUT STD_LOGIC;
    data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of chebyshev_openmp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "chebyshev_openmp,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.530000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=105,HLS_SYN_LUT=211,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_FFFFFFEC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_94_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln53_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln54_2_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_2_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_66 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_77 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln48_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_fu_117_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln54_fu_121_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln54_fu_154_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_125_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_1_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_3_fu_148_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_1_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_fu_154_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln54_fu_121_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln54_fu_154_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln54_1_fu_161_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln54_1_fu_161_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component chebyshev_openmp_mul_mul_16s_16s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component chebyshev_openmp_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    chebyshev_openmp_mul_mul_16s_16s_28_1_1_U1 : component chebyshev_openmp_mul_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln54_fu_154_p0,
        din1 => mul_ln54_fu_154_p1,
        dout => mul_ln54_fu_154_p2);

    chebyshev_openmp_mul_mul_16s_16s_32_1_1_U2 : component chebyshev_openmp_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln54_1_fu_161_p0,
        din1 => mul_ln54_1_fu_161_p1,
        dout => mul_ln54_1_fu_161_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_66 <= i_reg_176;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_66 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_77 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_77 <= k_reg_184;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                A_reg_199 <= A_fu_117_p1;
                mul_ln54_2_reg_204 <= mul_ln54_2_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_176 <= i_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_184 <= k_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln53_reg_189(6 downto 0) <= zext_ln53_fu_112_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln53_reg_189(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln52_fu_100_p2, icmp_ln48_fu_88_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln48_fu_88_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_100_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_fu_117_p0 <= data_in_q0;
        A_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_fu_117_p0),32));

    add_ln54_1_fu_143_p2 <= std_logic_vector(unsigned(mul_ln54_2_reg_204) + unsigned(ap_const_lv32_5));
    add_ln54_fu_132_p2 <= std_logic_vector(unsigned(shl_ln_fu_125_p3) + unsigned(ap_const_lv32_FFFFFFEC));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= data_out_q0;
    data_in_address0 <= zext_ln53_fu_112_p1(7 - 1 downto 0);

    data_in_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_out_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln53_reg_189, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_out_address0 <= zext_ln53_reg_189(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_out_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            data_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    data_out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln54_3_fu_148_p0) * signed(add_ln54_1_fu_143_p2))), 32));

    data_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_94_p2 <= std_logic_vector(unsigned(i_0_reg_66) + unsigned(ap_const_lv7_1));
    icmp_ln48_fu_88_p2 <= "1" when (i_0_reg_66 = ap_const_lv7_64) else "0";
    icmp_ln52_fu_100_p2 <= "1" when (k_0_reg_77 = ap_const_lv7_64) else "0";
    k_fu_106_p2 <= std_logic_vector(unsigned(k_0_reg_77) + unsigned(ap_const_lv7_1));
    mul_ln54_1_fu_161_p0 <= A_fu_117_p1(16 - 1 downto 0);
    mul_ln54_1_fu_161_p1 <= A_fu_117_p1(16 - 1 downto 0);
    mul_ln54_2_fu_138_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln54_fu_132_p2) * signed(mul_ln54_1_fu_161_p2))), 32));
    mul_ln54_3_fu_148_p0 <= A_reg_199(16 - 1 downto 0);
    mul_ln54_fu_154_p0 <= sext_ln54_fu_121_p1(16 - 1 downto 0);
    mul_ln54_fu_154_p1 <= sext_ln54_fu_121_p1(16 - 1 downto 0);
    sext_ln54_fu_121_p0 <= data_in_q0;
        sext_ln54_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln54_fu_121_p0),28));

    shl_ln_fu_125_p3 <= (mul_ln54_fu_154_p2 & ap_const_lv4_0);
    zext_ln53_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_77),64));
end behav;
