

================================================================
== Vivado HLS Report for 'sgfilter'
================================================================
* Date:           Mon Apr 27 13:25:49 2020

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        proj
* Solution:       sol
* Product family: virtexuplus
* Target device:  xcvu9p-flgb2104-2-i


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.458|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-------+-------+-------+-------+---------+
    |    Latency    |    Interval   | Pipeline|
    |  min  |  max  |  min  |  max  |   Type  |
    +-------+-------+-------+-------+---------+
    |  30202|  30202|  30202|  30202|   none  |
    +-------+-------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-------+-------+----------+-----------+-----------+------+----------+
        |             |    Latency    | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |  min  |  max  |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+-------+-------+----------+-----------+-----------+------+----------+
        |- Loop 1     |  30200|  30200|       302|          -|          -|   100|    no    |
        | + Loop 1.1  |    300|    300|         3|          -|          -|   100|    no    |
        +-------------+-------+-------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 6 3 
3 --> 4 2 
4 --> 5 
5 --> 3 
6 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.60>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([100 x i16]* %a) nounwind, !map !7"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([100 x i16]* %b) nounwind, !map !13"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([100 x i32]* %OUT_r) nounwind, !map !17"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%OUT_addr = getelementptr [100 x i32]* %OUT_r, i64 0, i64 0" [sgfilter.cpp:3]   --->   Operation 10 'getelementptr' 'OUT_addr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !21"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @sgfilter_str) nounwind"   --->   Operation 12 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.60ns)   --->   "br label %.loopexit" [sgfilter.cpp:7]   --->   Operation 13 'br' <Predicate = true> <Delay = 0.60>

State 2 <SV = 1> <Delay = 1.15>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%i_0 = phi i7 [ 0, %0 ], [ %i, %.loopexit.loopexit ]"   --->   Operation 14 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (0.59ns)   --->   "%icmp_ln7 = icmp eq i7 %i_0, -28" [sgfilter.cpp:7]   --->   Operation 15 'icmp' 'icmp_ln7' <Predicate = true> <Delay = 0.59> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.59> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind"   --->   Operation 16 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.40ns)   --->   "%i = add i7 %i_0, 1" [sgfilter.cpp:7]   --->   Operation 17 'add' 'i' <Predicate = true> <Delay = 0.40> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.40> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "br i1 %icmp_ln7, label %2, label %.preheader.preheader" [sgfilter.cpp:7]   --->   Operation 18 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.60ns)   --->   "br label %.preheader" [sgfilter.cpp:9]   --->   Operation 19 'br' <Predicate = (!icmp_ln7)> <Delay = 0.60>
ST_2 : Operation 20 [2/2] (1.15ns)   --->   "%v = load i32* %OUT_addr, align 4" [sgfilter.cpp:18]   --->   Operation 20 'load' 'v' <Predicate = (icmp_ln7)> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>

State 3 <SV = 2> <Delay = 1.15>
ST_3 : Operation 21 [1/1] (0.00ns)   --->   "%k_0 = phi i7 [ %k, %1 ], [ 0, %.preheader.preheader ]"   --->   Operation 21 'phi' 'k_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 22 [1/1] (0.59ns)   --->   "%icmp_ln9 = icmp eq i7 %k_0, -28" [sgfilter.cpp:9]   --->   Operation 22 'icmp' 'icmp_ln9' <Predicate = true> <Delay = 0.59> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.59> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 23 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind"   --->   Operation 23 'speclooptripcount' 'empty_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 24 [1/1] (0.40ns)   --->   "%k = add i7 %k_0, 1" [sgfilter.cpp:9]   --->   Operation 24 'add' 'k' <Predicate = true> <Delay = 0.40> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.40> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 25 [1/1] (0.00ns)   --->   "br i1 %icmp_ln9, label %.loopexit.loopexit, label %1" [sgfilter.cpp:9]   --->   Operation 25 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln10 = zext i7 %k_0 to i64" [sgfilter.cpp:10]   --->   Operation 26 'zext' 'zext_ln10' <Predicate = (!icmp_ln9)> <Delay = 0.00>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "%a_addr = getelementptr [100 x i16]* %a, i64 0, i64 %zext_ln10" [sgfilter.cpp:10]   --->   Operation 27 'getelementptr' 'a_addr' <Predicate = (!icmp_ln9)> <Delay = 0.00>
ST_3 : Operation 28 [2/2] (1.15ns)   --->   "%a_load = load i16* %a_addr, align 2" [sgfilter.cpp:10]   --->   Operation 28 'load' 'a_load' <Predicate = (!icmp_ln9)> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "%b_addr = getelementptr [100 x i16]* %b, i64 0, i64 %zext_ln10" [sgfilter.cpp:10]   --->   Operation 29 'getelementptr' 'b_addr' <Predicate = (!icmp_ln9)> <Delay = 0.00>
ST_3 : Operation 30 [2/2] (1.15ns)   --->   "%b_load = load i16* %b_addr, align 2" [sgfilter.cpp:10]   --->   Operation 30 'load' 'b_load' <Predicate = (!icmp_ln9)> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 31 'br' <Predicate = (icmp_ln9)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 8.45>
ST_4 : Operation 32 [1/2] (1.15ns)   --->   "%a_load = load i16* %a_addr, align 2" [sgfilter.cpp:10]   --->   Operation 32 'load' 'a_load' <Predicate = true> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_4 : Operation 33 [1/1] (0.00ns)   --->   "%sext_ln10 = sext i16 %a_load to i32" [sgfilter.cpp:10]   --->   Operation 33 'sext' 'sext_ln10' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 34 [1/1] (0.00ns)   --->   "%sext_ln10_2 = sext i16 %a_load to i26" [sgfilter.cpp:10]   --->   Operation 34 'sext' 'sext_ln10_2' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 35 [1/1] (0.49ns) (grouped into DSP with root node add_ln10)   --->   "%mul_ln10 = mul i26 %sext_ln10_2, -984" [sgfilter.cpp:10]   --->   Operation 35 'mul' 'mul_ln10' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 36 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10 = add i26 %mul_ln10, -46" [sgfilter.cpp:10]   --->   Operation 36 'add' 'add_ln10' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 37 [1/1] (0.00ns)   --->   "%sext_ln10_4 = sext i16 %a_load to i23" [sgfilter.cpp:10]   --->   Operation 37 'sext' 'sext_ln10_4' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 38 [1/1] (0.49ns) (grouped into DSP with root node add_ln10_2)   --->   "%mul_ln10_3 = mul i23 %sext_ln10_4, 92" [sgfilter.cpp:10]   --->   Operation 38 'mul' 'mul_ln10_3' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 39 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10_2 = add i23 %mul_ln10_3, -39" [sgfilter.cpp:10]   --->   Operation 39 'add' 'add_ln10_2' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 40 [1/1] (0.00ns)   --->   "%sext_ln10_5 = sext i23 %add_ln10_2 to i32" [sgfilter.cpp:10]   --->   Operation 40 'sext' 'sext_ln10_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 41 [1/1] (0.49ns) (grouped into DSP with root node add_ln10_6)   --->   "%mul_ln10_4 = mul nsw i32 %sext_ln10, %sext_ln10_5" [sgfilter.cpp:10]   --->   Operation 41 'mul' 'mul_ln10_4' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 42 [1/1] (0.49ns) (grouped into DSP with root node add_ln10_4)   --->   "%mul_ln10_5 = mul i23 %sext_ln10_4, -76" [sgfilter.cpp:10]   --->   Operation 42 'mul' 'mul_ln10_5' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 43 [1/2] (1.15ns)   --->   "%b_load = load i16* %b_addr, align 2" [sgfilter.cpp:10]   --->   Operation 43 'load' 'b_load' <Predicate = true> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "%sext_ln10_1 = sext i16 %b_load to i32" [sgfilter.cpp:10]   --->   Operation 44 'sext' 'sext_ln10_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%sext_ln10_6 = sext i16 %b_load to i20" [sgfilter.cpp:10]   --->   Operation 45 'sext' 'sext_ln10_6' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%shl_ln = call i19 @_ssdm_op_BitConcatenate.i19.i16.i3(i16 %b_load, i3 0)" [sgfilter.cpp:10]   --->   Operation 46 'bitconcatenate' 'shl_ln' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%sext_ln10_7 = sext i19 %shl_ln to i20" [sgfilter.cpp:10]   --->   Operation 47 'sext' 'sext_ln10_7' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln10 = sub i20 %sext_ln10_7, %sext_ln10_6" [sgfilter.cpp:10]   --->   Operation 48 'sub' 'sub_ln10' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 49 [1/1] (0.68ns) (root node of TernaryAdder)   --->   "%add_ln10_3 = add i20 %sub_ln10, 7" [sgfilter.cpp:10]   --->   Operation 49 'add' 'add_ln10_3' <Predicate = true> <Delay = 0.68> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 50 [1/1] (0.00ns)   --->   "%sext_ln10_8 = sext i20 %add_ln10_3 to i23" [sgfilter.cpp:10]   --->   Operation 50 'sext' 'sext_ln10_8' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 51 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10_4 = add i23 %mul_ln10_5, %sext_ln10_8" [sgfilter.cpp:10]   --->   Operation 51 'add' 'add_ln10_4' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "%sext_ln10_9 = sext i23 %add_ln10_4 to i32" [sgfilter.cpp:10]   --->   Operation 52 'sext' 'sext_ln10_9' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 53 [1/1] (0.49ns) (grouped into DSP with root node add_ln10_5)   --->   "%mul_ln10_6 = mul nsw i32 %sext_ln10_1, %sext_ln10_9" [sgfilter.cpp:10]   --->   Operation 53 'mul' 'mul_ln10_6' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 54 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10_5 = add i32 %mul_ln10_6, 7" [sgfilter.cpp:10]   --->   Operation 54 'add' 'add_ln10_5' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 55 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10_6 = add i32 %mul_ln10_4, %add_ln10_5" [sgfilter.cpp:10]   --->   Operation 55 'add' 'add_ln10_6' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>

State 5 <SV = 4> <Delay = 7.59>
ST_5 : Operation 56 [1/1] (0.00ns)   --->   "%sext_ln10_3 = sext i26 %add_ln10 to i32" [sgfilter.cpp:10]   --->   Operation 56 'sext' 'sext_ln10_3' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 57 [1/1] (0.49ns) (grouped into DSP with root node add_ln10_1)   --->   "%mul_ln10_1 = mul nsw i32 %sext_ln10, %sext_ln10_3" [sgfilter.cpp:10]   --->   Operation 57 'mul' 'mul_ln10_1' <Predicate = true> <Delay = 0.49> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 58 [1/1] (2.03ns) (root node of the DSP)   --->   "%add_ln10_1 = add nsw i32 %mul_ln10_1, -46" [sgfilter.cpp:10]   --->   Operation 58 'add' 'add_ln10_1' <Predicate = true> <Delay = 2.03> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 2.53> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 2> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 59 [1/1] (3.17ns)   --->   "%mul_ln10_2 = mul nsw i32 %sext_ln10, %add_ln10_1" [sgfilter.cpp:10]   --->   Operation 59 'mul' 'mul_ln10_2' <Predicate = true> <Delay = 3.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 3.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 60 [1/1] (3.17ns)   --->   "%mul_ln10_7 = mul nsw i32 %sext_ln10_1, %add_ln10_6" [sgfilter.cpp:10]   --->   Operation 60 'mul' 'mul_ln10_7' <Predicate = true> <Delay = 3.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 3.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 61 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln10_7 = add i32 %mul_ln10_7, -75" [sgfilter.cpp:10]   --->   Operation 61 'add' 'add_ln10_7' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 62 [1/1] (0.73ns) (root node of TernaryAdder)   --->   "%add_ln10_8 = add i32 %mul_ln10_2, %add_ln10_7" [sgfilter.cpp:10]   --->   Operation 62 'add' 'add_ln10_8' <Predicate = true> <Delay = 0.73> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 63 [1/1] (0.00ns)   --->   "%OUT_addr_1 = getelementptr [100 x i32]* %OUT_r, i64 0, i64 %zext_ln10" [sgfilter.cpp:10]   --->   Operation 63 'getelementptr' 'OUT_addr_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (1.15ns)   --->   "store i32 %add_ln10_8, i32* %OUT_addr_1, align 4" [sgfilter.cpp:10]   --->   Operation 64 'store' <Predicate = true> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_5 : Operation 65 [1/1] (0.00ns)   --->   "br label %.preheader" [sgfilter.cpp:9]   --->   Operation 65 'br' <Predicate = true> <Delay = 0.00>

State 6 <SV = 2> <Delay = 1.15>
ST_6 : Operation 66 [1/2] (1.15ns)   --->   "%v = load i32* %OUT_addr, align 4" [sgfilter.cpp:18]   --->   Operation 66 'load' 'v' <Predicate = true> <Delay = 1.15> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.15> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 100> <RAM>
ST_6 : Operation 67 [1/1] (0.00ns)   --->   "ret i32 %v" [sgfilter.cpp:24]   --->   Operation 67 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.603ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', sgfilter.cpp:7) [12]  (0.603 ns)

 <State 2>: 1.16ns
The critical path consists of the following:
	'load' operation ('v', sgfilter.cpp:18) on array 'OUT_r' [66]  (1.16 ns)

 <State 3>: 1.16ns
The critical path consists of the following:
	'phi' operation ('k') with incoming values : ('k', sgfilter.cpp:9) [20]  (0 ns)
	'getelementptr' operation ('a_addr', sgfilter.cpp:10) [27]  (0 ns)
	'load' operation ('a_load', sgfilter.cpp:10) on array 'a' [28]  (1.16 ns)

 <State 4>: 8.46ns
The critical path consists of the following:
	'load' operation ('b_load', sgfilter.cpp:10) on array 'b' [44]  (1.16 ns)
	'sub' operation ('sub_ln10', sgfilter.cpp:10) [49]  (0 ns)
	'add' operation ('add_ln10_3', sgfilter.cpp:10) [50]  (0.689 ns)
	'add' operation of DSP[52] ('add_ln10_4', sgfilter.cpp:10) [52]  (2.04 ns)
	'mul' operation of DSP[55] ('mul_ln10_6', sgfilter.cpp:10) [54]  (0.494 ns)
	'add' operation of DSP[55] ('add_ln10_5', sgfilter.cpp:10) [55]  (2.04 ns)
	'add' operation of DSP[56] ('add_ln10_6', sgfilter.cpp:10) [56]  (2.04 ns)

 <State 5>: 7.59ns
The critical path consists of the following:
	'mul' operation of DSP[35] ('mul_ln10_1', sgfilter.cpp:10) [34]  (0.494 ns)
	'add' operation of DSP[35] ('add_ln10_1', sgfilter.cpp:10) [35]  (2.04 ns)
	'mul' operation ('mul_ln10_2', sgfilter.cpp:10) [36]  (3.17 ns)
	'add' operation ('add_ln10_8', sgfilter.cpp:10) [59]  (0.731 ns)
	'store' operation ('store_ln10', sgfilter.cpp:10) of variable 'add_ln10_8', sgfilter.cpp:10 on array 'OUT_r' [61]  (1.16 ns)

 <State 6>: 1.16ns
The critical path consists of the following:
	'load' operation ('v', sgfilter.cpp:18) on array 'OUT_r' [66]  (1.16 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
