-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sgfilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OUT_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    OUT_r_ce0 : OUT STD_LOGIC;
    OUT_r_we0 : OUT STD_LOGIC;
    OUT_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sgfilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sgfilter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.458000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=163,HLS_SYN_LUT=275,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000111";
    constant ap_const_lv32_FFFFFFB5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110110101";
    constant ap_const_lv26_3FFFC28 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110000101000";
    constant ap_const_lv26_3FFFFD2 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111010010";
    constant ap_const_lv23_5C : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001011100";
    constant ap_const_lv23_7FFFD9 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111011001";
    constant ap_const_lv23_7FFFB4 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111110110100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFFD2 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111010010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_283 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_fu_135_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_291 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln10_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln10_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_225_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln10_reg_317 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln10_1_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln10_1_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_6_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_95 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_0_reg_106 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln7_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_fu_147_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_4_fu_155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_233_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln10_1_fu_162_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_6_fu_166_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_170_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln10_7_fu_178_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln10_6_fu_166_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln10_fu_182_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln10_3_fu_188_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_249_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln10_2_fu_204_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln10_7_fu_208_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_7_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln10_2_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_7_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_4_fu_155_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_258_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component sgfilter_mac_muladd_16s_11s_7s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component sgfilter_mac_muladd_16s_8ns_7s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sgfilter_mac_muladd_16s_23s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sgfilter_mac_muladd_16s_8s_20s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sgfilter_mac_muladd_16s_23s_4ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sgfilter_mac_muladd_16s_26s_7s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sgfilter_mac_muladd_16s_11s_7s_26_1_1_U1 : component sgfilter_mac_muladd_16s_11s_7s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 7,
        dout_WIDTH => 26)
    port map (
        din0 => a_q0,
        din1 => grp_fu_225_p1,
        din2 => grp_fu_225_p2,
        dout => grp_fu_225_p3);

    sgfilter_mac_muladd_16s_8ns_7s_23_1_1_U2 : component sgfilter_mac_muladd_16s_8ns_7s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        din2 => grp_fu_233_p2,
        dout => grp_fu_233_p3);

    sgfilter_mac_muladd_16s_23s_32s_32_1_1_U3 : component sgfilter_mac_muladd_16s_23s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => a_q0,
        din1 => grp_fu_233_p3,
        din2 => grp_fu_258_p3,
        dout => grp_fu_242_p3);

    sgfilter_mac_muladd_16s_8s_20s_23_1_1_U4 : component sgfilter_mac_muladd_16s_8s_20s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 20,
        dout_WIDTH => 23)
    port map (
        din0 => grp_fu_249_p0,
        din1 => grp_fu_249_p1,
        din2 => add_ln10_3_fu_188_p2,
        dout => grp_fu_249_p3);

    sgfilter_mac_muladd_16s_23s_4ns_32_1_1_U5 : component sgfilter_mac_muladd_16s_23s_4ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 23,
        din2_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => b_q0,
        din1 => grp_fu_249_p3,
        din2 => grp_fu_258_p2,
        dout => grp_fu_258_p3);

    sgfilter_mac_muladd_16s_26s_7s_32_1_1_U6 : component sgfilter_mac_muladd_16s_26s_7s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 26,
        din2_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_267_p0,
        din1 => add_ln10_reg_317,
        din2 => grp_fu_267_p2,
        dout => grp_fu_267_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_95 <= i_reg_283;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_95 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_106 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_106 <= k_reg_291;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln10_6_reg_327 <= grp_fu_242_p3;
                add_ln10_reg_317 <= grp_fu_225_p3;
                sext_ln10_1_reg_322 <= sext_ln10_1_fu_162_p1;
                sext_ln10_reg_311 <= sext_ln10_fu_147_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_283 <= i_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_291 <= k_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln10_reg_296(6 downto 0) <= zext_ln10_fu_141_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln10_reg_296(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln9_fu_129_p2, icmp_ln7_fu_117_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    OUT_r_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln10_reg_296, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            OUT_r_address0 <= zext_ln10_reg_296(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            OUT_r_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            OUT_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    OUT_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_r_ce0 <= ap_const_logic_1;
        else 
            OUT_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_r_d0 <= std_logic_vector(unsigned(mul_ln10_2_fu_204_p2) + unsigned(add_ln10_7_fu_212_p2));

    OUT_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            OUT_r_we0 <= ap_const_logic_1;
        else 
            OUT_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_address0 <= zext_ln10_fu_141_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_3_fu_188_p2 <= std_logic_vector(unsigned(sub_ln10_fu_182_p2) + unsigned(ap_const_lv20_7));
    add_ln10_7_fu_212_p2 <= std_logic_vector(unsigned(mul_ln10_7_fu_208_p2) + unsigned(ap_const_lv32_FFFFFFB5));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= OUT_r_q0;
    b_address0 <= zext_ln10_fu_141_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_225_p1 <= ap_const_lv26_3FFFC28(11 - 1 downto 0);
    grp_fu_225_p2 <= ap_const_lv26_3FFFFD2(7 - 1 downto 0);
    grp_fu_233_p0 <= sext_ln10_4_fu_155_p1(16 - 1 downto 0);
    grp_fu_233_p1 <= ap_const_lv23_5C(8 - 1 downto 0);
    grp_fu_233_p2 <= ap_const_lv23_7FFFD9(7 - 1 downto 0);
    grp_fu_249_p0 <= sext_ln10_4_fu_155_p1(16 - 1 downto 0);
    grp_fu_249_p1 <= ap_const_lv23_7FFFB4(8 - 1 downto 0);
    grp_fu_258_p2 <= ap_const_lv32_7(4 - 1 downto 0);
    grp_fu_267_p0 <= sext_ln10_reg_311(16 - 1 downto 0);
    grp_fu_267_p2 <= ap_const_lv32_FFFFFFD2(7 - 1 downto 0);
    i_fu_123_p2 <= std_logic_vector(unsigned(i_0_reg_95) + unsigned(ap_const_lv7_1));
    icmp_ln7_fu_117_p2 <= "1" when (i_0_reg_95 = ap_const_lv7_64) else "0";
    icmp_ln9_fu_129_p2 <= "1" when (k_0_reg_106 = ap_const_lv7_64) else "0";
    k_fu_135_p2 <= std_logic_vector(unsigned(k_0_reg_106) + unsigned(ap_const_lv7_1));
    mul_ln10_2_fu_204_p0 <= sext_ln10_reg_311(16 - 1 downto 0);
    mul_ln10_2_fu_204_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln10_2_fu_204_p0) * signed(grp_fu_267_p3))), 32));
    mul_ln10_7_fu_208_p0 <= sext_ln10_1_reg_322(16 - 1 downto 0);
    mul_ln10_7_fu_208_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln10_7_fu_208_p0) * signed(add_ln10_6_reg_327))), 32));
    sext_ln10_1_fu_162_p0 <= b_q0;
        sext_ln10_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_1_fu_162_p0),32));

    sext_ln10_4_fu_155_p0 <= a_q0;
        sext_ln10_4_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_4_fu_155_p0),23));

    sext_ln10_6_fu_166_p0 <= b_q0;
        sext_ln10_6_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_6_fu_166_p0),20));

        sext_ln10_7_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_170_p3),20));

    sext_ln10_fu_147_p0 <= a_q0;
        sext_ln10_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_fu_147_p0),32));

    shl_ln_fu_170_p1 <= b_q0;
    shl_ln_fu_170_p3 <= (shl_ln_fu_170_p1 & ap_const_lv3_0);
    sub_ln10_fu_182_p2 <= std_logic_vector(signed(sext_ln10_7_fu_178_p1) - signed(sext_ln10_6_fu_166_p1));
    zext_ln10_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_106),64));
end behav;
