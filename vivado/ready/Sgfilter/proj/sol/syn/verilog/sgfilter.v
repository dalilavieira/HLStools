// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sgfilter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.458000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=163,HLS_SYN_LUT=275,HLS_VERSION=2019_1}" *)

module sgfilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        OUT_r_address0,
        OUT_r_ce0,
        OUT_r_we0,
        OUT_r_d0,
        OUT_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] OUT_r_address0;
output   OUT_r_ce0;
output   OUT_r_we0;
output  [31:0] OUT_r_d0;
input  [31:0] OUT_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg[6:0] OUT_r_address0;
reg OUT_r_ce0;
reg OUT_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_123_p2;
reg   [6:0] i_reg_283;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_135_p2;
reg   [6:0] k_reg_291;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln10_fu_141_p1;
reg   [63:0] zext_ln10_reg_296;
wire   [0:0] icmp_ln9_fu_129_p2;
wire  signed [31:0] sext_ln10_fu_147_p1;
reg  signed [31:0] sext_ln10_reg_311;
wire    ap_CS_fsm_state4;
wire  signed [25:0] grp_fu_225_p3;
reg  signed [25:0] add_ln10_reg_317;
wire  signed [31:0] sext_ln10_1_fu_162_p1;
reg  signed [31:0] sext_ln10_1_reg_322;
wire  signed [31:0] grp_fu_242_p3;
reg  signed [31:0] add_ln10_6_reg_327;
reg   [6:0] i_0_reg_95;
reg   [6:0] k_0_reg_106;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln7_fu_117_p2;
wire  signed [15:0] sext_ln10_fu_147_p0;
wire  signed [15:0] sext_ln10_4_fu_155_p0;
wire  signed [22:0] grp_fu_233_p3;
wire  signed [15:0] sext_ln10_1_fu_162_p0;
wire  signed [15:0] sext_ln10_6_fu_166_p0;
wire  signed [15:0] shl_ln_fu_170_p1;
wire   [18:0] shl_ln_fu_170_p3;
wire  signed [19:0] sext_ln10_7_fu_178_p1;
wire  signed [19:0] sext_ln10_6_fu_166_p1;
wire   [19:0] sub_ln10_fu_182_p2;
wire  signed [19:0] add_ln10_3_fu_188_p2;
wire  signed [22:0] grp_fu_249_p3;
wire  signed [15:0] mul_ln10_2_fu_204_p0;
wire  signed [31:0] grp_fu_267_p3;
wire  signed [15:0] mul_ln10_7_fu_208_p0;
wire   [31:0] mul_ln10_7_fu_208_p2;
wire   [31:0] mul_ln10_2_fu_204_p2;
wire   [31:0] add_ln10_7_fu_212_p2;
wire  signed [10:0] grp_fu_225_p1;
wire  signed [6:0] grp_fu_225_p2;
wire  signed [15:0] grp_fu_233_p0;
wire  signed [22:0] sext_ln10_4_fu_155_p1;
wire   [7:0] grp_fu_233_p1;
wire  signed [6:0] grp_fu_233_p2;
wire  signed [31:0] grp_fu_258_p3;
wire  signed [15:0] grp_fu_249_p0;
wire  signed [7:0] grp_fu_249_p1;
wire   [3:0] grp_fu_258_p2;
wire  signed [15:0] grp_fu_267_p0;
wire  signed [6:0] grp_fu_267_p2;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

sgfilter_mac_muladd_16s_11s_7s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 26 ))
sgfilter_mac_muladd_16s_11s_7s_26_1_1_U1(
    .din0(a_q0),
    .din1(grp_fu_225_p1),
    .din2(grp_fu_225_p2),
    .dout(grp_fu_225_p3)
);

sgfilter_mac_muladd_16s_8ns_7s_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 23 ))
sgfilter_mac_muladd_16s_8ns_7s_23_1_1_U2(
    .din0(grp_fu_233_p0),
    .din1(grp_fu_233_p1),
    .din2(grp_fu_233_p2),
    .dout(grp_fu_233_p3)
);

sgfilter_mac_muladd_16s_23s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sgfilter_mac_muladd_16s_23s_32s_32_1_1_U3(
    .din0(a_q0),
    .din1(grp_fu_233_p3),
    .din2(grp_fu_258_p3),
    .dout(grp_fu_242_p3)
);

sgfilter_mac_muladd_16s_8s_20s_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 23 ))
sgfilter_mac_muladd_16s_8s_20s_23_1_1_U4(
    .din0(grp_fu_249_p0),
    .din1(grp_fu_249_p1),
    .din2(add_ln10_3_fu_188_p2),
    .dout(grp_fu_249_p3)
);

sgfilter_mac_muladd_16s_23s_4ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 23 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sgfilter_mac_muladd_16s_23s_4ns_32_1_1_U5(
    .din0(b_q0),
    .din1(grp_fu_249_p3),
    .din2(grp_fu_258_p2),
    .dout(grp_fu_258_p3)
);

sgfilter_mac_muladd_16s_26s_7s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 26 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
sgfilter_mac_muladd_16s_26s_7s_32_1_1_U6(
    .din0(grp_fu_267_p0),
    .din1(add_ln10_reg_317),
    .din2(grp_fu_267_p2),
    .dout(grp_fu_267_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_95 <= i_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_95 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_106 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_106 <= k_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln10_6_reg_327 <= grp_fu_242_p3;
        add_ln10_reg_317 <= grp_fu_225_p3;
        sext_ln10_1_reg_322 <= sext_ln10_1_fu_162_p1;
        sext_ln10_reg_311 <= sext_ln10_fu_147_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_283 <= i_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_291 <= k_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln10_reg_296[6 : 0] <= zext_ln10_fu_141_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        OUT_r_address0 = zext_ln10_reg_296;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        OUT_r_address0 = 64'd0;
    end else begin
        OUT_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        OUT_r_ce0 = 1'b1;
    end else begin
        OUT_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        OUT_r_we0 = 1'b1;
    end else begin
        OUT_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUT_r_d0 = (mul_ln10_2_fu_204_p2 + add_ln10_7_fu_212_p2);

assign a_address0 = zext_ln10_fu_141_p1;

assign add_ln10_3_fu_188_p2 = (sub_ln10_fu_182_p2 + 20'd7);

assign add_ln10_7_fu_212_p2 = ($signed(mul_ln10_7_fu_208_p2) + $signed(32'd4294967221));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = OUT_r_q0;

assign b_address0 = zext_ln10_fu_141_p1;

assign grp_fu_225_p1 = 26'd67107880;

assign grp_fu_225_p2 = 26'd67108818;

assign grp_fu_233_p0 = sext_ln10_4_fu_155_p1;

assign grp_fu_233_p1 = 23'd92;

assign grp_fu_233_p2 = 23'd8388569;

assign grp_fu_249_p0 = sext_ln10_4_fu_155_p1;

assign grp_fu_249_p1 = 23'd8388532;

assign grp_fu_258_p2 = 32'd7;

assign grp_fu_267_p0 = sext_ln10_reg_311;

assign grp_fu_267_p2 = 32'd4294967250;

assign i_fu_123_p2 = (i_0_reg_95 + 7'd1);

assign icmp_ln7_fu_117_p2 = ((i_0_reg_95 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_129_p2 = ((k_0_reg_106 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_135_p2 = (k_0_reg_106 + 7'd1);

assign mul_ln10_2_fu_204_p0 = sext_ln10_reg_311;

assign mul_ln10_2_fu_204_p2 = ($signed(mul_ln10_2_fu_204_p0) * $signed(grp_fu_267_p3));

assign mul_ln10_7_fu_208_p0 = sext_ln10_1_reg_322;

assign mul_ln10_7_fu_208_p2 = ($signed(mul_ln10_7_fu_208_p0) * $signed(add_ln10_6_reg_327));

assign sext_ln10_1_fu_162_p0 = b_q0;

assign sext_ln10_1_fu_162_p1 = sext_ln10_1_fu_162_p0;

assign sext_ln10_4_fu_155_p0 = a_q0;

assign sext_ln10_4_fu_155_p1 = sext_ln10_4_fu_155_p0;

assign sext_ln10_6_fu_166_p0 = b_q0;

assign sext_ln10_6_fu_166_p1 = sext_ln10_6_fu_166_p0;

assign sext_ln10_7_fu_178_p1 = $signed(shl_ln_fu_170_p3);

assign sext_ln10_fu_147_p0 = a_q0;

assign sext_ln10_fu_147_p1 = sext_ln10_fu_147_p0;

assign shl_ln_fu_170_p1 = b_q0;

assign shl_ln_fu_170_p3 = {{shl_ln_fu_170_p1}, {3'd0}};

assign sub_ln10_fu_182_p2 = ($signed(sext_ln10_7_fu_178_p1) - $signed(sext_ln10_6_fu_166_p1));

assign zext_ln10_fu_141_p1 = k_0_reg_106;

always @ (posedge ap_clk) begin
    zext_ln10_reg_296[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //sgfilter
