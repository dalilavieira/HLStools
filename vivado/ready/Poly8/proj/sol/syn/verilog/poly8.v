// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poly8,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.550000,HLS_SYN_LAT=30202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=162,HLS_SYN_LUT=219,HLS_VERSION=2019_1}" *)

module poly8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg[6:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_fu_132_p2;
reg   [6:0] i_reg_265;
wire    ap_CS_fsm_state2;
wire   [6:0] k_fu_144_p2;
reg   [6:0] k_reg_273;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln13_fu_150_p1;
reg   [63:0] zext_ln13_reg_278;
wire   [0:0] icmp_ln12_fu_138_p2;
wire  signed [31:0] sext_ln13_fu_157_p1;
reg  signed [31:0] sext_ln13_reg_298;
wire    ap_CS_fsm_state4;
wire  signed [31:0] sext_ln13_1_fu_161_p1;
reg  signed [31:0] sext_ln13_1_reg_304;
wire  signed [24:0] grp_fu_226_p3;
reg  signed [24:0] add_ln13_reg_309;
wire   [31:0] mul_ln13_3_fu_209_p2;
reg   [31:0] mul_ln13_3_reg_314;
reg   [6:0] i_0_reg_104;
reg   [6:0] k_0_reg_115;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln10_fu_126_p2;
wire  signed [15:0] sext_ln13_1_fu_161_p0;
wire  signed [15:0] shl_ln_fu_169_p1;
wire   [18:0] shl_ln_fu_169_p3;
wire  signed [15:0] shl_ln13_1_fu_181_p1;
wire   [16:0] shl_ln13_1_fu_181_p3;
wire  signed [19:0] sext_ln13_4_fu_177_p1;
wire  signed [19:0] sext_ln13_5_fu_189_p1;
wire   [19:0] sub_ln13_fu_193_p2;
wire  signed [19:0] tmp_fu_199_p2;
wire  signed [31:0] grp_fu_234_p3;
wire  signed [31:0] mul_ln13_2_fu_243_p2;
wire  signed [15:0] mul_ln13_4_fu_216_p0;
wire  signed [31:0] grp_fu_250_p3;
wire   [31:0] mul_ln13_4_fu_216_p2;
wire   [9:0] grp_fu_226_p1;
wire  signed [14:0] grp_fu_226_p2;
wire   [17:0] grp_fu_234_p2;
wire  signed [15:0] mul_ln13_2_fu_243_p0;
wire  signed [15:0] mul_ln13_2_fu_243_p1;
wire  signed [15:0] grp_fu_250_p0;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

poly8_mac_muladd_16s_10ns_15s_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 25 ))
poly8_mac_muladd_16s_10ns_15s_25_1_1_U1(
    .din0(b_q0),
    .din1(grp_fu_226_p1),
    .din2(grp_fu_226_p2),
    .dout(grp_fu_226_p3)
);

poly8_mac_muladd_16s_20s_18ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
poly8_mac_muladd_16s_20s_18ns_32_1_1_U2(
    .din0(c_q0),
    .din1(tmp_fu_199_p2),
    .din2(grp_fu_234_p2),
    .dout(grp_fu_234_p3)
);

poly8_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
poly8_mul_mul_16s_16s_32_1_1_U3(
    .din0(mul_ln13_2_fu_243_p0),
    .din1(mul_ln13_2_fu_243_p1),
    .dout(mul_ln13_2_fu_243_p2)
);

poly8_mac_muladd_16s_25s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
poly8_mac_muladd_16s_25s_32ns_32_1_1_U4(
    .din0(grp_fu_250_p0),
    .din1(add_ln13_reg_309),
    .din2(mul_ln13_3_reg_314),
    .dout(grp_fu_250_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_104 <= i_reg_265;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_104 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_115 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_115 <= k_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_reg_309 <= grp_fu_226_p3;
        mul_ln13_3_reg_314 <= mul_ln13_3_fu_209_p2;
        sext_ln13_1_reg_304 <= sext_ln13_1_fu_161_p1;
        sext_ln13_reg_298 <= sext_ln13_fu_157_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_265 <= i_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_273 <= k_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln13_reg_278[6 : 0] <= zext_ln13_fu_150_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = zext_ln13_reg_278;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln13_fu_150_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = out_r_q0;

assign b_address0 = zext_ln13_fu_150_p1;

assign c_address0 = zext_ln13_fu_150_p1;

assign grp_fu_226_p1 = 25'd432;

assign grp_fu_226_p2 = 25'd33540608;

assign grp_fu_234_p2 = 32'd69120;

assign grp_fu_250_p0 = sext_ln13_1_reg_304;

assign i_fu_132_p2 = (i_0_reg_104 + 7'd1);

assign icmp_ln10_fu_126_p2 = ((i_0_reg_104 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_138_p2 = ((k_0_reg_115 == 7'd100) ? 1'b1 : 1'b0);

assign k_fu_144_p2 = (k_0_reg_115 + 7'd1);

assign mul_ln13_2_fu_243_p0 = sext_ln13_fu_157_p1;

assign mul_ln13_2_fu_243_p1 = sext_ln13_fu_157_p1;

assign mul_ln13_3_fu_209_p2 = ($signed(grp_fu_234_p3) * $signed(mul_ln13_2_fu_243_p2));

assign mul_ln13_4_fu_216_p0 = sext_ln13_reg_298;

assign mul_ln13_4_fu_216_p2 = ($signed(mul_ln13_4_fu_216_p0) * $signed(grp_fu_250_p3));

assign out_r_d0 = ($signed(sext_ln13_reg_298) + $signed(mul_ln13_4_fu_216_p2));

assign sext_ln13_1_fu_161_p0 = c_q0;

assign sext_ln13_1_fu_161_p1 = sext_ln13_1_fu_161_p0;

assign sext_ln13_4_fu_177_p1 = $signed(shl_ln_fu_169_p3);

assign sext_ln13_5_fu_189_p1 = $signed(shl_ln13_1_fu_181_p3);

assign sext_ln13_fu_157_p1 = $signed(a_q0);

assign shl_ln13_1_fu_181_p1 = c_q0;

assign shl_ln13_1_fu_181_p3 = {{shl_ln13_1_fu_181_p1}, {1'd0}};

assign shl_ln_fu_169_p1 = c_q0;

assign shl_ln_fu_169_p3 = {{shl_ln_fu_169_p1}, {3'd0}};

assign sub_ln13_fu_193_p2 = ($signed(sext_ln13_4_fu_177_p1) - $signed(sext_ln13_5_fu_189_p1));

assign tmp_fu_199_p2 = ($signed(sub_ln13_fu_193_p2) + $signed(20'd1043800));

assign zext_ln13_fu_150_p1 = k_0_reg_115;

always @ (posedge ap_clk) begin
    zext_ln13_reg_278[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //poly8
