// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "poly8.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic poly8::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic poly8::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> poly8::ap_ST_fsm_state1 = "1";
const sc_lv<6> poly8::ap_ST_fsm_state2 = "10";
const sc_lv<6> poly8::ap_ST_fsm_state3 = "100";
const sc_lv<6> poly8::ap_ST_fsm_state4 = "1000";
const sc_lv<6> poly8::ap_ST_fsm_state5 = "10000";
const sc_lv<6> poly8::ap_ST_fsm_state6 = "100000";
const sc_lv<32> poly8::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> poly8::ap_const_lv32_1 = "1";
const sc_lv<32> poly8::ap_const_lv32_2 = "10";
const sc_lv<1> poly8::ap_const_lv1_0 = "0";
const sc_lv<32> poly8::ap_const_lv32_3 = "11";
const sc_lv<7> poly8::ap_const_lv7_0 = "0000000";
const sc_lv<1> poly8::ap_const_lv1_1 = "1";
const sc_lv<32> poly8::ap_const_lv32_4 = "100";
const sc_lv<64> poly8::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<7> poly8::ap_const_lv7_64 = "1100100";
const sc_lv<7> poly8::ap_const_lv7_1 = "1";
const sc_lv<3> poly8::ap_const_lv3_0 = "000";
const sc_lv<20> poly8::ap_const_lv20_FED58 = "11111110110101011000";
const sc_lv<25> poly8::ap_const_lv25_1B0 = "110110000";
const sc_lv<25> poly8::ap_const_lv25_1FFCA00 = "1111111111100101000000000";
const sc_lv<32> poly8::ap_const_lv32_10E00 = "10000111000000000";
const sc_lv<32> poly8::ap_const_lv32_5 = "101";
const bool poly8::ap_const_boolean_1 = true;

poly8::poly8(sc_module_name name) : sc_module(name), mVcdFile(0) {
    poly8_mac_muladd_16s_10ns_15s_25_1_1_U1 = new poly8_mac_muladd_16s_10ns_15s_25_1_1<1,1,16,10,15,25>("poly8_mac_muladd_16s_10ns_15s_25_1_1_U1");
    poly8_mac_muladd_16s_10ns_15s_25_1_1_U1->din0(b_q0);
    poly8_mac_muladd_16s_10ns_15s_25_1_1_U1->din1(grp_fu_226_p1);
    poly8_mac_muladd_16s_10ns_15s_25_1_1_U1->din2(grp_fu_226_p2);
    poly8_mac_muladd_16s_10ns_15s_25_1_1_U1->dout(grp_fu_226_p3);
    poly8_mac_muladd_16s_20s_18ns_32_1_1_U2 = new poly8_mac_muladd_16s_20s_18ns_32_1_1<1,1,16,20,18,32>("poly8_mac_muladd_16s_20s_18ns_32_1_1_U2");
    poly8_mac_muladd_16s_20s_18ns_32_1_1_U2->din0(c_q0);
    poly8_mac_muladd_16s_20s_18ns_32_1_1_U2->din1(tmp_fu_199_p2);
    poly8_mac_muladd_16s_20s_18ns_32_1_1_U2->din2(grp_fu_234_p2);
    poly8_mac_muladd_16s_20s_18ns_32_1_1_U2->dout(grp_fu_234_p3);
    poly8_mul_mul_16s_16s_32_1_1_U3 = new poly8_mul_mul_16s_16s_32_1_1<1,1,16,16,32>("poly8_mul_mul_16s_16s_32_1_1_U3");
    poly8_mul_mul_16s_16s_32_1_1_U3->din0(mul_ln13_2_fu_243_p0);
    poly8_mul_mul_16s_16s_32_1_1_U3->din1(mul_ln13_2_fu_243_p1);
    poly8_mul_mul_16s_16s_32_1_1_U3->dout(mul_ln13_2_fu_243_p2);
    poly8_mac_muladd_16s_25s_32ns_32_1_1_U4 = new poly8_mac_muladd_16s_25s_32ns_32_1_1<1,1,16,25,32,32>("poly8_mac_muladd_16s_25s_32ns_32_1_1_U4");
    poly8_mac_muladd_16s_25s_32ns_32_1_1_U4->din0(grp_fu_250_p0);
    poly8_mac_muladd_16s_25s_32ns_32_1_1_U4->din1(add_ln13_reg_309);
    poly8_mac_muladd_16s_25s_32ns_32_1_1_U4->din2(mul_ln13_3_reg_314);
    poly8_mac_muladd_16s_25s_32ns_32_1_1_U4->dout(grp_fu_250_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln13_fu_150_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( out_r_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln13_fu_150_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln13_fu_150_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_226_p1);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_226_p2);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_234_p2);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_250_p0);
    sensitive << ( sext_ln13_1_reg_304 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_132_p2);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln10_fu_126_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln12_fu_138_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_k_fu_144_p2);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_mul_ln13_2_fu_243_p0);
    sensitive << ( sext_ln13_fu_157_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln13_2_fu_243_p1);
    sensitive << ( sext_ln13_fu_157_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mul_ln13_3_fu_209_p2);
    sensitive << ( grp_fu_234_p3 );
    sensitive << ( mul_ln13_2_fu_243_p2 );

    SC_METHOD(thread_mul_ln13_4_fu_216_p0);
    sensitive << ( sext_ln13_reg_298 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_mul_ln13_4_fu_216_p2);
    sensitive << ( mul_ln13_4_fu_216_p0 );
    sensitive << ( grp_fu_250_p3 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln13_reg_278 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( sext_ln13_reg_298 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln13_4_fu_216_p2 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sext_ln13_1_fu_161_p0);
    sensitive << ( c_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln13_1_fu_161_p1);
    sensitive << ( sext_ln13_1_fu_161_p0 );

    SC_METHOD(thread_sext_ln13_4_fu_177_p1);
    sensitive << ( shl_ln_fu_169_p3 );

    SC_METHOD(thread_sext_ln13_5_fu_189_p1);
    sensitive << ( shl_ln13_1_fu_181_p3 );

    SC_METHOD(thread_sext_ln13_fu_157_p1);
    sensitive << ( a_q0 );

    SC_METHOD(thread_shl_ln13_1_fu_181_p1);
    sensitive << ( c_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shl_ln13_1_fu_181_p3);
    sensitive << ( shl_ln13_1_fu_181_p1 );

    SC_METHOD(thread_shl_ln_fu_169_p1);
    sensitive << ( c_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shl_ln_fu_169_p3);
    sensitive << ( shl_ln_fu_169_p1 );

    SC_METHOD(thread_sub_ln13_fu_193_p2);
    sensitive << ( sext_ln13_4_fu_177_p1 );
    sensitive << ( sext_ln13_5_fu_189_p1 );

    SC_METHOD(thread_tmp_fu_199_p2);
    sensitive << ( sub_ln13_fu_193_p2 );

    SC_METHOD(thread_zext_ln13_fu_150_p1);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_138_p2 );
    sensitive << ( icmp_ln10_fu_126_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "poly8_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_q0, "(port)c_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
    sc_trace(mVcdFile, out_r_q0, "(port)out_r_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_132_p2, "i_fu_132_p2");
    sc_trace(mVcdFile, i_reg_265, "i_reg_265");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_fu_144_p2, "k_fu_144_p2");
    sc_trace(mVcdFile, k_reg_273, "k_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln13_fu_150_p1, "zext_ln13_fu_150_p1");
    sc_trace(mVcdFile, zext_ln13_reg_278, "zext_ln13_reg_278");
    sc_trace(mVcdFile, icmp_ln12_fu_138_p2, "icmp_ln12_fu_138_p2");
    sc_trace(mVcdFile, sext_ln13_fu_157_p1, "sext_ln13_fu_157_p1");
    sc_trace(mVcdFile, sext_ln13_reg_298, "sext_ln13_reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sext_ln13_1_fu_161_p1, "sext_ln13_1_fu_161_p1");
    sc_trace(mVcdFile, sext_ln13_1_reg_304, "sext_ln13_1_reg_304");
    sc_trace(mVcdFile, grp_fu_226_p3, "grp_fu_226_p3");
    sc_trace(mVcdFile, add_ln13_reg_309, "add_ln13_reg_309");
    sc_trace(mVcdFile, mul_ln13_3_fu_209_p2, "mul_ln13_3_fu_209_p2");
    sc_trace(mVcdFile, mul_ln13_3_reg_314, "mul_ln13_3_reg_314");
    sc_trace(mVcdFile, i_0_reg_104, "i_0_reg_104");
    sc_trace(mVcdFile, k_0_reg_115, "k_0_reg_115");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln10_fu_126_p2, "icmp_ln10_fu_126_p2");
    sc_trace(mVcdFile, sext_ln13_1_fu_161_p0, "sext_ln13_1_fu_161_p0");
    sc_trace(mVcdFile, shl_ln_fu_169_p1, "shl_ln_fu_169_p1");
    sc_trace(mVcdFile, shl_ln_fu_169_p3, "shl_ln_fu_169_p3");
    sc_trace(mVcdFile, shl_ln13_1_fu_181_p1, "shl_ln13_1_fu_181_p1");
    sc_trace(mVcdFile, shl_ln13_1_fu_181_p3, "shl_ln13_1_fu_181_p3");
    sc_trace(mVcdFile, sext_ln13_4_fu_177_p1, "sext_ln13_4_fu_177_p1");
    sc_trace(mVcdFile, sext_ln13_5_fu_189_p1, "sext_ln13_5_fu_189_p1");
    sc_trace(mVcdFile, sub_ln13_fu_193_p2, "sub_ln13_fu_193_p2");
    sc_trace(mVcdFile, tmp_fu_199_p2, "tmp_fu_199_p2");
    sc_trace(mVcdFile, grp_fu_234_p3, "grp_fu_234_p3");
    sc_trace(mVcdFile, mul_ln13_2_fu_243_p2, "mul_ln13_2_fu_243_p2");
    sc_trace(mVcdFile, mul_ln13_4_fu_216_p0, "mul_ln13_4_fu_216_p0");
    sc_trace(mVcdFile, grp_fu_250_p3, "grp_fu_250_p3");
    sc_trace(mVcdFile, mul_ln13_4_fu_216_p2, "mul_ln13_4_fu_216_p2");
    sc_trace(mVcdFile, grp_fu_226_p1, "grp_fu_226_p1");
    sc_trace(mVcdFile, grp_fu_226_p2, "grp_fu_226_p2");
    sc_trace(mVcdFile, grp_fu_234_p2, "grp_fu_234_p2");
    sc_trace(mVcdFile, mul_ln13_2_fu_243_p0, "mul_ln13_2_fu_243_p0");
    sc_trace(mVcdFile, mul_ln13_2_fu_243_p1, "mul_ln13_2_fu_243_p1");
    sc_trace(mVcdFile, grp_fu_250_p0, "grp_fu_250_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("poly8.hdltvin.dat");
    mHdltvoutHandle.open("poly8.hdltvout.dat");
}

poly8::~poly8() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete poly8_mac_muladd_16s_10ns_15s_25_1_1_U1;
    delete poly8_mac_muladd_16s_20s_18ns_32_1_1_U2;
    delete poly8_mul_mul_16s_16s_32_1_1_U3;
    delete poly8_mac_muladd_16s_25s_32ns_32_1_1_U4;
}

void poly8::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_138_p2.read(), ap_const_lv1_1))) {
        i_0_reg_104 = i_reg_265.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_104 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_126_p2.read()))) {
        k_0_reg_115 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_0_reg_115 = k_reg_273.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        add_ln13_reg_309 = grp_fu_226_p3.read();
        mul_ln13_3_reg_314 = mul_ln13_3_fu_209_p2.read();
        sext_ln13_1_reg_304 = sext_ln13_1_fu_161_p1.read();
        sext_ln13_reg_298 = sext_ln13_fu_157_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_265 = i_fu_132_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_273 = k_fu_144_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_138_p2.read(), ap_const_lv1_0))) {
        zext_ln13_reg_278 = zext_ln13_fu_150_p1.read();
    }
}

void poly8::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (zext_ln13_fu_150_p1.read());
}

void poly8::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void poly8::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void poly8::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void poly8::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void poly8::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void poly8::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void poly8::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void poly8::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void poly8::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void poly8::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void poly8::thread_ap_return() {
    ap_return = out_r_q0.read();
}

void poly8::thread_b_address0() {
    b_address0 =  (sc_lv<7>) (zext_ln13_fu_150_p1.read());
}

void poly8::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void poly8::thread_c_address0() {
    c_address0 =  (sc_lv<7>) (zext_ln13_fu_150_p1.read());
}

void poly8::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void poly8::thread_grp_fu_226_p1() {
    grp_fu_226_p1 =  (sc_lv<10>) (ap_const_lv25_1B0);
}

void poly8::thread_grp_fu_226_p2() {
    grp_fu_226_p2 =  (sc_lv<15>) (ap_const_lv25_1FFCA00);
}

void poly8::thread_grp_fu_234_p2() {
    grp_fu_234_p2 =  (sc_lv<18>) (ap_const_lv32_10E00);
}

void poly8::thread_grp_fu_250_p0() {
    grp_fu_250_p0 =  (sc_lv<16>) (sext_ln13_1_reg_304.read());
}

void poly8::thread_i_fu_132_p2() {
    i_fu_132_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_104.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void poly8::thread_icmp_ln10_fu_126_p2() {
    icmp_ln10_fu_126_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_104.read() == ap_const_lv7_64);
}

void poly8::thread_icmp_ln12_fu_138_p2() {
    icmp_ln12_fu_138_p2 = (!k_0_reg_115.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_115.read() == ap_const_lv7_64);
}

void poly8::thread_k_fu_144_p2() {
    k_fu_144_p2 = (!k_0_reg_115.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_0_reg_115.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void poly8::thread_mul_ln13_2_fu_243_p0() {
    mul_ln13_2_fu_243_p0 =  (sc_lv<16>) (sext_ln13_fu_157_p1.read());
}

void poly8::thread_mul_ln13_2_fu_243_p1() {
    mul_ln13_2_fu_243_p1 =  (sc_lv<16>) (sext_ln13_fu_157_p1.read());
}

void poly8::thread_mul_ln13_3_fu_209_p2() {
    mul_ln13_3_fu_209_p2 = (!grp_fu_234_p3.read().is_01() || !mul_ln13_2_fu_243_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(grp_fu_234_p3.read()) * sc_bigint<32>(mul_ln13_2_fu_243_p2.read());
}

void poly8::thread_mul_ln13_4_fu_216_p0() {
    mul_ln13_4_fu_216_p0 =  (sc_lv<16>) (sext_ln13_reg_298.read());
}

void poly8::thread_mul_ln13_4_fu_216_p2() {
    mul_ln13_4_fu_216_p2 = (!mul_ln13_4_fu_216_p0.read().is_01() || !grp_fu_250_p3.read().is_01())? sc_lv<32>(): sc_bigint<16>(mul_ln13_4_fu_216_p0.read()) * sc_bigint<32>(grp_fu_250_p3.read());
}

void poly8::thread_out_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_address0 =  (sc_lv<7>) (zext_ln13_reg_278.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        out_r_address0 = "XXXXXXX";
    }
}

void poly8::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void poly8::thread_out_r_d0() {
    out_r_d0 = (!sext_ln13_reg_298.read().is_01() || !mul_ln13_4_fu_216_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln13_reg_298.read()) + sc_biguint<32>(mul_ln13_4_fu_216_p2.read()));
}

void poly8::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void poly8::thread_sext_ln13_1_fu_161_p0() {
    sext_ln13_1_fu_161_p0 = c_q0.read();
}

void poly8::thread_sext_ln13_1_fu_161_p1() {
    sext_ln13_1_fu_161_p1 = esl_sext<32,16>(sext_ln13_1_fu_161_p0.read());
}

void poly8::thread_sext_ln13_4_fu_177_p1() {
    sext_ln13_4_fu_177_p1 = esl_sext<20,19>(shl_ln_fu_169_p3.read());
}

void poly8::thread_sext_ln13_5_fu_189_p1() {
    sext_ln13_5_fu_189_p1 = esl_sext<20,17>(shl_ln13_1_fu_181_p3.read());
}

void poly8::thread_sext_ln13_fu_157_p1() {
    sext_ln13_fu_157_p1 = esl_sext<32,16>(a_q0.read());
}

void poly8::thread_shl_ln13_1_fu_181_p1() {
    shl_ln13_1_fu_181_p1 = c_q0.read();
}

void poly8::thread_shl_ln13_1_fu_181_p3() {
    shl_ln13_1_fu_181_p3 = esl_concat<16,1>(shl_ln13_1_fu_181_p1.read(), ap_const_lv1_0);
}

void poly8::thread_shl_ln_fu_169_p1() {
    shl_ln_fu_169_p1 = c_q0.read();
}

void poly8::thread_shl_ln_fu_169_p3() {
    shl_ln_fu_169_p3 = esl_concat<16,3>(shl_ln_fu_169_p1.read(), ap_const_lv3_0);
}

void poly8::thread_sub_ln13_fu_193_p2() {
    sub_ln13_fu_193_p2 = (!sext_ln13_4_fu_177_p1.read().is_01() || !sext_ln13_5_fu_189_p1.read().is_01())? sc_lv<20>(): (sc_bigint<20>(sext_ln13_4_fu_177_p1.read()) - sc_bigint<20>(sext_ln13_5_fu_189_p1.read()));
}

void poly8::thread_tmp_fu_199_p2() {
    tmp_fu_199_p2 = (!sub_ln13_fu_193_p2.read().is_01() || !ap_const_lv20_FED58.is_01())? sc_lv<20>(): (sc_biguint<20>(sub_ln13_fu_193_p2.read()) + sc_bigint<20>(ap_const_lv20_FED58));
}

void poly8::thread_zext_ln13_fu_150_p1() {
    zext_ln13_fu_150_p1 = esl_zext<64,7>(k_0_reg_115.read());
}

void poly8::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_126_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_138_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void poly8::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q0\" :  \"" << c_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_q0\" :  \"" << out_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

