// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _poly8_HH_
#define _poly8_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "poly8_mac_muladd_16s_10ns_15s_25_1_1.h"
#include "poly8_mac_muladd_16s_20s_18ns_32_1_1.h"
#include "poly8_mul_mul_16s_16s_32_1_1.h"
#include "poly8_mac_muladd_16s_25s_32ns_32_1_1.h"

namespace ap_rtl {

struct poly8 : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<16> > a_q0;
    sc_out< sc_lv<7> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<16> > b_q0;
    sc_out< sc_lv<7> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<16> > c_q0;
    sc_out< sc_lv<7> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;
    sc_in< sc_lv<32> > out_r_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    poly8(sc_module_name name);
    SC_HAS_PROCESS(poly8);

    ~poly8();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    poly8_mac_muladd_16s_10ns_15s_25_1_1<1,1,16,10,15,25>* poly8_mac_muladd_16s_10ns_15s_25_1_1_U1;
    poly8_mac_muladd_16s_20s_18ns_32_1_1<1,1,16,20,18,32>* poly8_mac_muladd_16s_20s_18ns_32_1_1_U2;
    poly8_mul_mul_16s_16s_32_1_1<1,1,16,16,32>* poly8_mul_mul_16s_16s_32_1_1_U3;
    poly8_mac_muladd_16s_25s_32ns_32_1_1<1,1,16,25,32,32>* poly8_mac_muladd_16s_25s_32ns_32_1_1_U4;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_fu_132_p2;
    sc_signal< sc_lv<7> > i_reg_265;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > k_fu_144_p2;
    sc_signal< sc_lv<7> > k_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln13_fu_150_p1;
    sc_signal< sc_lv<64> > zext_ln13_reg_278;
    sc_signal< sc_lv<1> > icmp_ln12_fu_138_p2;
    sc_signal< sc_lv<32> > sext_ln13_fu_157_p1;
    sc_signal< sc_lv<32> > sext_ln13_reg_298;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > sext_ln13_1_fu_161_p1;
    sc_signal< sc_lv<32> > sext_ln13_1_reg_304;
    sc_signal< sc_lv<25> > grp_fu_226_p3;
    sc_signal< sc_lv<25> > add_ln13_reg_309;
    sc_signal< sc_lv<32> > mul_ln13_3_fu_209_p2;
    sc_signal< sc_lv<32> > mul_ln13_3_reg_314;
    sc_signal< sc_lv<7> > i_0_reg_104;
    sc_signal< sc_lv<7> > k_0_reg_115;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln10_fu_126_p2;
    sc_signal< sc_lv<16> > sext_ln13_1_fu_161_p0;
    sc_signal< sc_lv<16> > shl_ln_fu_169_p1;
    sc_signal< sc_lv<19> > shl_ln_fu_169_p3;
    sc_signal< sc_lv<16> > shl_ln13_1_fu_181_p1;
    sc_signal< sc_lv<17> > shl_ln13_1_fu_181_p3;
    sc_signal< sc_lv<20> > sext_ln13_4_fu_177_p1;
    sc_signal< sc_lv<20> > sext_ln13_5_fu_189_p1;
    sc_signal< sc_lv<20> > sub_ln13_fu_193_p2;
    sc_signal< sc_lv<20> > tmp_fu_199_p2;
    sc_signal< sc_lv<32> > grp_fu_234_p3;
    sc_signal< sc_lv<32> > mul_ln13_2_fu_243_p2;
    sc_signal< sc_lv<16> > mul_ln13_4_fu_216_p0;
    sc_signal< sc_lv<32> > grp_fu_250_p3;
    sc_signal< sc_lv<32> > mul_ln13_4_fu_216_p2;
    sc_signal< sc_lv<10> > grp_fu_226_p1;
    sc_signal< sc_lv<15> > grp_fu_226_p2;
    sc_signal< sc_lv<18> > grp_fu_234_p2;
    sc_signal< sc_lv<16> > mul_ln13_2_fu_243_p0;
    sc_signal< sc_lv<16> > mul_ln13_2_fu_243_p1;
    sc_signal< sc_lv<16> > grp_fu_250_p0;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<20> ap_const_lv20_FED58;
    static const sc_lv<25> ap_const_lv25_1B0;
    static const sc_lv<25> ap_const_lv25_1FFCA00;
    static const sc_lv<32> ap_const_lv32_10E00;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_grp_fu_226_p1();
    void thread_grp_fu_226_p2();
    void thread_grp_fu_234_p2();
    void thread_grp_fu_250_p0();
    void thread_i_fu_132_p2();
    void thread_icmp_ln10_fu_126_p2();
    void thread_icmp_ln12_fu_138_p2();
    void thread_k_fu_144_p2();
    void thread_mul_ln13_2_fu_243_p0();
    void thread_mul_ln13_2_fu_243_p1();
    void thread_mul_ln13_3_fu_209_p2();
    void thread_mul_ln13_4_fu_216_p0();
    void thread_mul_ln13_4_fu_216_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_sext_ln13_1_fu_161_p0();
    void thread_sext_ln13_1_fu_161_p1();
    void thread_sext_ln13_4_fu_177_p1();
    void thread_sext_ln13_5_fu_189_p1();
    void thread_sext_ln13_fu_157_p1();
    void thread_shl_ln13_1_fu_181_p1();
    void thread_shl_ln13_1_fu_181_p3();
    void thread_shl_ln_fu_169_p1();
    void thread_shl_ln_fu_169_p3();
    void thread_sub_ln13_fu_193_p2();
    void thread_tmp_fu_199_p2();
    void thread_zext_ln13_fu_150_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
