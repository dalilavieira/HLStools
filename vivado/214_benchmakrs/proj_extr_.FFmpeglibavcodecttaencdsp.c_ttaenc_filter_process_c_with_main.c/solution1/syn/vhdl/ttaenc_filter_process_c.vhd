-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ttaenc_filter_process_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    qm_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qm_ce0 : OUT STD_LOGIC;
    qm_we0 : OUT STD_LOGIC;
    qm_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    qm_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    qm_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qm_ce1 : OUT STD_LOGIC;
    qm_we1 : OUT STD_LOGIC;
    qm_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    qm_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dx_ce0 : OUT STD_LOGIC;
    dx_we0 : OUT STD_LOGIC;
    dx_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dx_ce1 : OUT STD_LOGIC;
    dx_we1 : OUT STD_LOGIC;
    dx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dl_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dl_ce0 : OUT STD_LOGIC;
    dl_we0 : OUT STD_LOGIC;
    dl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dl_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dl_ce1 : OUT STD_LOGIC;
    dl_we1 : OUT STD_LOGIC;
    dl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dl_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    error_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    error_ce0 : OUT STD_LOGIC;
    error_we0 : OUT STD_LOGIC;
    error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    error_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_we0 : OUT STD_LOGIC;
    in_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shift : IN STD_LOGIC_VECTOR (31 downto 0);
    round : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ttaenc_filter_process_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ttaenc_filter_process_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=18,HLS_SYN_FF=797,HLS_SYN_LUT=1973,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal error_addr_reg_949 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal qm_addr_reg_979 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal qm_addr_8_reg_992 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_1_gep_fu_139_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_1_reg_997 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_9_reg_1002 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_10_reg_1007 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_11_reg_1012 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_12_reg_1017 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_13_reg_1027 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_14_reg_1032 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal dl_addr_1_reg_1067 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal dx_addr_15_reg_1072 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_16_reg_1078 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_2_gep_fu_310_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_2_reg_1084 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_3_gep_fu_319_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_3_reg_1089 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_4_gep_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_4_reg_1094 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_5_gep_fu_337_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_5_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_1_gep_fu_346_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_6_gep_fu_355_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_6_reg_1109 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_7_gep_fu_364_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_7_reg_1114 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_2_gep_fu_373_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal dx_addr_3_gep_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_load_6_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal qm_load_7_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_addr_4_gep_fu_391_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal dx_addr_5_gep_fu_400_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_6_gep_fu_409_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal dx_addr_7_gep_fu_418_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_15_gep_fu_427_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_addr_2_reg_1164 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_addr_3_reg_1169 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_17_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_18_reg_1180 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_16_gep_fu_472_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_load_3_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal qm_addr_17_gep_fu_481_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln27_1_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_1_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal dl_load_4_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal qm_addr_18_gep_fu_508_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_load_5_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal qm_addr_19_gep_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_addr_6_reg_1241 : STD_LOGIC_VECTOR (3 downto 0);
    signal dl_addr_7_reg_1246 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_1256 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal qm_addr_20_gep_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal qm_addr_21_gep_fu_553_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_2_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_2_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1281 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1286 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln27_5_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_5_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_7_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_7_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_3_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_3_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sub_ln42_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln42_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_addr_19_gep_fu_562_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_20_gep_fu_571_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal dx_addr_21_gep_fu_580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_2_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_3_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_1_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_2_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_3_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_1_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_2_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_3_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_1_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln33_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln35_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln36_fu_895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_1_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_664_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_1_fu_770_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_1_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln33_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_811_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln34_fu_818_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_3_fu_837_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_4_fu_842_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_5_fu_847_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_7_fu_852_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_4_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_3_fu_837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1_fu_864_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln35_fu_871_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln2_fu_882_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln36_fu_889_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_4_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_5_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_6_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_7_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln42_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_603 <= qm_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_603 <= qm_q0;
            end if; 
        end if;
    end process;

    reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_608 <= qm_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_608 <= qm_q1;
            end if; 
        end if;
    end process;

    reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_613 <= qm_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_613 <= qm_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln27_2_reg_1276 <= add_ln27_2_fu_796_p2;
                tmp_2_reg_1281 <= tmp_2_fu_829_p1(31 downto 31);
                tmp_3_reg_1286 <= grp_fu_595_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln27_3_reg_1301 <= add_ln27_3_fu_858_p2;
                mul_ln27_5_reg_1291 <= mul_ln27_5_fu_847_p2;
                mul_ln27_7_reg_1296 <= mul_ln27_7_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln27_reg_1251 <= add_ln27_fu_776_p2;
                dl_load_4_reg_1219 <= dl_q0;
                dl_load_5_reg_1230 <= dl_q1;
                mul_ln27_1_reg_1214 <= mul_ln27_1_fu_770_p2;
                tmp_1_reg_1261 <= grp_fu_595_p1(31 downto 31);
                trunc_ln_reg_1256 <= trunc_ln_fu_781_p1(31 downto 30);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                dl_load_3_reg_1191 <= dl_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln22_reg_988 <= icmp_ln22_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                qm_load_6_reg_1129 <= qm_q0;
                qm_load_7_reg_1134 <= qm_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_618 <= qm_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_622 <= qm_q0;
                reg_626 <= qm_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_630 <= dl_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_635 <= dl_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_640 <= dx_q0;
                reg_645 <= dx_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_670 <= grp_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                sub_ln40_reg_1306 <= sub_ln40_fu_927_p2;
                sub_ln42_reg_1312 <= sub_ln42_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_984 <= error_q0(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_674_p3, icmp_ln22_fu_682_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_682_p2 = ap_const_lv1_0) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((icmp_ln22_fu_682_p2 = ap_const_lv1_1) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_2_fu_688_p2 <= std_logic_vector(unsigned(reg_613) + unsigned(dx_q0));
    add_ln23_3_fu_695_p2 <= std_logic_vector(unsigned(reg_618) + unsigned(dx_q1));
    add_ln24_1_fu_709_p2 <= std_logic_vector(unsigned(reg_626) + unsigned(dx_q1));
    add_ln24_fu_702_p2 <= std_logic_vector(unsigned(reg_622) + unsigned(dx_q0));
    add_ln27_1_fu_791_p2 <= std_logic_vector(unsigned(reg_670) + unsigned(mul_ln27_1_reg_1214));
    add_ln27_2_fu_796_p2 <= std_logic_vector(unsigned(add_ln27_reg_1251) + unsigned(add_ln27_1_fu_791_p2));
    add_ln27_3_fu_858_p2 <= std_logic_vector(unsigned(mul_ln27_4_fu_842_p2) + unsigned(mul_ln27_3_fu_837_p2));
    add_ln27_4_fu_900_p2 <= std_logic_vector(unsigned(mul_ln27_7_reg_1296) + unsigned(reg_670));
    add_ln27_5_fu_905_p2 <= std_logic_vector(unsigned(mul_ln27_5_reg_1291) + unsigned(add_ln27_4_fu_900_p2));
    add_ln27_6_fu_910_p2 <= std_logic_vector(unsigned(add_ln27_3_reg_1301) + unsigned(add_ln27_5_fu_905_p2));
    add_ln27_7_fu_915_p2 <= std_logic_vector(unsigned(add_ln27_2_reg_1276) + unsigned(add_ln27_6_fu_910_p2));
    add_ln27_fu_776_p2 <= std_logic_vector(unsigned(reg_670) + unsigned(round));
    and_ln1_fu_864_p3 <= (tmp_2_reg_1281 & ap_const_lv2_0);
    and_ln2_fu_882_p3 <= (tmp_3_reg_1286 & ap_const_lv3_0);
    and_ln_fu_811_p3 <= (tmp_1_reg_1261 & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln42_fu_933_p2 <= std_logic_vector(shift_right(signed(add_ln27_7_fu_915_p2),to_integer(unsigned('0' & shift(31-1 downto 0)))));
    dl_addr_1_reg_1067 <= ap_const_lv64_1(4 - 1 downto 0);
    dl_addr_2_reg_1164 <= ap_const_lv64_2(4 - 1 downto 0);
    dl_addr_3_reg_1169 <= ap_const_lv64_3(4 - 1 downto 0);
    dl_addr_6_reg_1241 <= ap_const_lv64_6(4 - 1 downto 0);
    dl_addr_7_reg_1246 <= ap_const_lv64_7(4 - 1 downto 0);

    dl_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state9, dl_addr_2_reg_1164, dl_addr_6_reg_1241, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dl_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dl_address0 <= dl_addr_6_reg_1241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dl_address0 <= dl_addr_2_reg_1164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dl_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dl_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dl_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            dl_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dl_address0 <= "XXXX";
        end if; 
    end process;


    dl_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state16, ap_CS_fsm_state20, dl_addr_1_reg_1067, ap_CS_fsm_state9, dl_addr_3_reg_1169, dl_addr_7_reg_1246, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dl_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dl_address1 <= dl_addr_7_reg_1246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dl_address1 <= dl_addr_3_reg_1169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dl_address1 <= dl_addr_1_reg_1067;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dl_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dl_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dl_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dl_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dl_address1 <= "XXXX";
        end if; 
    end process;


    dl_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dl_ce0 <= ap_const_logic_1;
        else 
            dl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dl_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dl_ce1 <= ap_const_logic_1;
        else 
            dl_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dl_d0_assign_proc : process(ap_CS_fsm_state19, reg_635, ap_CS_fsm_state20, dl_load_3_reg_1191, sub_ln40_reg_1306, ap_CS_fsm_state21, ap_CS_fsm_state22, sub_ln39_fu_920_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dl_d0 <= sub_ln40_reg_1306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dl_d0 <= sub_ln39_fu_920_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dl_d0 <= dl_load_3_reg_1191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dl_d0 <= reg_635;
        else 
            dl_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dl_d1_assign_proc : process(in_r_q0, ap_CS_fsm_state19, reg_630, ap_CS_fsm_state20, dl_load_4_reg_1219, ap_CS_fsm_state21, ap_CS_fsm_state22, sub_ln40_1_fu_944_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dl_d1 <= sub_ln40_1_fu_944_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dl_d1 <= in_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dl_d1 <= dl_load_4_reg_1219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dl_d1 <= reg_630;
        else 
            dl_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dl_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            dl_we0 <= ap_const_logic_1;
        else 
            dl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dl_we1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            dl_we1 <= ap_const_logic_1;
        else 
            dl_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dx_addr_15_reg_1072 <= ap_const_lv64_1(4 - 1 downto 0);
    dx_addr_16_reg_1078 <= ap_const_lv64_2(4 - 1 downto 0);
    dx_addr_17_reg_1174 <= ap_const_lv64_3(4 - 1 downto 0);
    dx_addr_18_reg_1180 <= ap_const_lv64_4(4 - 1 downto 0);
    dx_addr_19_gep_fu_562_p3 <= ap_const_lv64_5(4 - 1 downto 0);
    dx_addr_1_gep_fu_346_p3 <= ap_const_lv64_1(4 - 1 downto 0);
    dx_addr_20_gep_fu_571_p3 <= ap_const_lv64_6(4 - 1 downto 0);
    dx_addr_21_gep_fu_580_p3 <= ap_const_lv64_7(4 - 1 downto 0);
    dx_addr_2_gep_fu_373_p3 <= ap_const_lv64_2(4 - 1 downto 0);
    dx_addr_3_gep_fu_382_p3 <= ap_const_lv64_3(4 - 1 downto 0);
    dx_addr_4_gep_fu_391_p3 <= ap_const_lv64_4(4 - 1 downto 0);
    dx_addr_5_gep_fu_400_p3 <= ap_const_lv64_5(4 - 1 downto 0);
    dx_addr_6_gep_fu_409_p3 <= ap_const_lv64_6(4 - 1 downto 0);
    dx_addr_7_gep_fu_418_p3 <= ap_const_lv64_7(4 - 1 downto 0);

    dx_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, dx_addr_16_reg_1078, dx_addr_2_gep_fu_373_p3, ap_CS_fsm_state13, dx_addr_4_gep_fu_391_p3, ap_CS_fsm_state14, dx_addr_6_gep_fu_409_p3, ap_CS_fsm_state15, dx_addr_18_reg_1180, dx_addr_20_gep_fu_571_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dx_address0 <= dx_addr_20_gep_fu_571_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dx_address0 <= dx_addr_18_reg_1180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dx_address0 <= dx_addr_16_reg_1078;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dx_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dx_address0 <= dx_addr_6_gep_fu_409_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dx_address0 <= dx_addr_4_gep_fu_391_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dx_address0 <= dx_addr_2_gep_fu_373_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dx_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dx_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dx_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dx_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dx_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dx_address0 <= "XXXX";
        end if; 
    end process;


    dx_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, dx_addr_15_reg_1072, dx_addr_1_gep_fu_346_p3, ap_CS_fsm_state13, dx_addr_3_gep_fu_382_p3, ap_CS_fsm_state14, dx_addr_5_gep_fu_400_p3, ap_CS_fsm_state15, dx_addr_7_gep_fu_418_p3, dx_addr_17_reg_1174, dx_addr_19_gep_fu_562_p3, dx_addr_21_gep_fu_580_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dx_address1 <= dx_addr_21_gep_fu_580_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dx_address1 <= dx_addr_19_gep_fu_562_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dx_address1 <= dx_addr_17_reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dx_address1 <= dx_addr_15_reg_1072;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dx_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dx_address1 <= dx_addr_7_gep_fu_418_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dx_address1 <= dx_addr_5_gep_fu_400_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dx_address1 <= dx_addr_3_gep_fu_382_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dx_address1 <= dx_addr_1_gep_fu_346_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dx_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dx_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dx_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dx_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dx_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dx_address1 <= "XXXX";
        end if; 
    end process;


    dx_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dx_ce0 <= ap_const_logic_1;
        else 
            dx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dx_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dx_ce1 <= ap_const_logic_1;
        else 
            dx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dx_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, reg_640, ap_CS_fsm_state20, or_ln33_fu_804_p2, sext_ln35_fu_877_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dx_d0 <= sext_ln35_fu_877_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dx_d0 <= or_ln33_fu_804_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dx_d0 <= reg_640;
        else 
            dx_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_d1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, reg_645, ap_CS_fsm_state20, sext_ln34_fu_824_p1, sext_ln36_fu_895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dx_d1 <= sext_ln36_fu_895_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dx_d1 <= sext_ln34_fu_824_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dx_d1 <= reg_645;
        else 
            dx_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dx_we0 <= ap_const_logic_1;
        else 
            dx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dx_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dx_we1 <= ap_const_logic_1;
        else 
            dx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    error_addr_reg_949 <= ap_const_lv64_0(4 - 1 downto 0);

    error_address0_assign_proc : process(ap_CS_fsm_state1, error_addr_reg_949, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            error_address0 <= error_addr_reg_949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            error_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            error_address0 <= "XXXX";
        end if; 
    end process;


    error_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            error_ce0 <= ap_const_logic_1;
        else 
            error_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    error_d0 <= sub_ln42_reg_1312;

    error_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            error_we0 <= ap_const_logic_1;
        else 
            error_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_595_p1 <= dl_q1;
    grp_fu_650_p2 <= std_logic_vector(unsigned(reg_603) + unsigned(dx_q0));
    grp_fu_657_p2 <= std_logic_vector(unsigned(reg_608) + unsigned(dx_q1));
    grp_fu_664_p0 <= qm_q0;
    grp_fu_664_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_664_p0) * signed(reg_630))), 32));
    icmp_ln22_fu_682_p2 <= "1" when (signed(error_q0) > signed(ap_const_lv32_0)) else "0";
    in_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_r_d0 <= sub_ln42_reg_1312;

    in_r_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_r_we0 <= ap_const_logic_1;
        else 
            in_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln27_1_fu_770_p0 <= reg_603;
    mul_ln27_1_fu_770_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_1_fu_770_p0) * signed(reg_635))), 32));
    mul_ln27_3_fu_837_p0 <= reg_603;
    mul_ln27_3_fu_837_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_3_fu_837_p0) * signed(dl_load_3_reg_1191))), 32));
    mul_ln27_4_fu_842_p0 <= reg_608;
    mul_ln27_4_fu_842_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_4_fu_842_p0) * signed(dl_load_4_reg_1219))), 32));
    mul_ln27_5_fu_847_p0 <= reg_613;
    mul_ln27_5_fu_847_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_5_fu_847_p0) * signed(dl_load_5_reg_1230))), 32));
    mul_ln27_7_fu_852_p0 <= qm_q1;
    mul_ln27_7_fu_852_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_7_fu_852_p0) * signed(reg_635))), 32));
    or_ln33_fu_804_p2 <= (sext_ln33_fu_801_p1 or ap_const_lv32_1);
    or_ln34_fu_818_p2 <= (ap_const_lv3_2 or and_ln_fu_811_p3);
    or_ln35_fu_871_p2 <= (ap_const_lv3_2 or and_ln1_fu_864_p3);
    or_ln36_fu_889_p2 <= (ap_const_lv4_4 or and_ln2_fu_882_p3);
    qm_addr_10_reg_1007 <= ap_const_lv64_3(4 - 1 downto 0);
    qm_addr_11_reg_1012 <= ap_const_lv64_4(4 - 1 downto 0);
    qm_addr_12_reg_1017 <= ap_const_lv64_5(4 - 1 downto 0);
    qm_addr_13_reg_1027 <= ap_const_lv64_6(4 - 1 downto 0);
    qm_addr_14_reg_1032 <= ap_const_lv64_7(4 - 1 downto 0);
    qm_addr_15_gep_fu_427_p3 <= ap_const_lv64_1(4 - 1 downto 0);
    qm_addr_16_gep_fu_472_p3 <= ap_const_lv64_2(4 - 1 downto 0);
    qm_addr_17_gep_fu_481_p3 <= ap_const_lv64_3(4 - 1 downto 0);
    qm_addr_18_gep_fu_508_p3 <= ap_const_lv64_4(4 - 1 downto 0);
    qm_addr_19_gep_fu_517_p3 <= ap_const_lv64_5(4 - 1 downto 0);
    qm_addr_1_gep_fu_139_p3 <= ap_const_lv64_1(4 - 1 downto 0);
    qm_addr_1_reg_997 <= ap_const_lv64_1(4 - 1 downto 0);
    qm_addr_20_gep_fu_544_p3 <= ap_const_lv64_6(4 - 1 downto 0);
    qm_addr_21_gep_fu_553_p3 <= ap_const_lv64_7(4 - 1 downto 0);
    qm_addr_2_gep_fu_310_p3 <= ap_const_lv64_2(4 - 1 downto 0);
    qm_addr_2_reg_1084 <= ap_const_lv64_2(4 - 1 downto 0);
    qm_addr_3_gep_fu_319_p3 <= ap_const_lv64_3(4 - 1 downto 0);
    qm_addr_3_reg_1089 <= ap_const_lv64_3(4 - 1 downto 0);
    qm_addr_4_gep_fu_328_p3 <= ap_const_lv64_4(4 - 1 downto 0);
    qm_addr_4_reg_1094 <= ap_const_lv64_4(4 - 1 downto 0);
    qm_addr_5_gep_fu_337_p3 <= ap_const_lv64_5(4 - 1 downto 0);
    qm_addr_5_reg_1099 <= ap_const_lv64_5(4 - 1 downto 0);
    qm_addr_6_gep_fu_355_p3 <= ap_const_lv64_6(4 - 1 downto 0);
    qm_addr_6_reg_1109 <= ap_const_lv64_6(4 - 1 downto 0);
    qm_addr_7_gep_fu_364_p3 <= ap_const_lv64_7(4 - 1 downto 0);
    qm_addr_7_reg_1114 <= ap_const_lv64_7(4 - 1 downto 0);
    qm_addr_8_reg_992 <= ap_const_lv64_1(4 - 1 downto 0);
    qm_addr_9_reg_1002 <= ap_const_lv64_2(4 - 1 downto 0);
    qm_addr_reg_979 <= ap_const_lv64_0(4 - 1 downto 0);

    qm_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state2, qm_addr_reg_979, tmp_fu_674_p3, tmp_reg_984, icmp_ln22_fu_682_p2, icmp_ln22_reg_988, qm_addr_9_reg_1002, qm_addr_11_reg_1012, qm_addr_13_reg_1027, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, qm_addr_2_gep_fu_310_p3, qm_addr_2_reg_1084, qm_addr_4_gep_fu_328_p3, qm_addr_4_reg_1094, qm_addr_6_gep_fu_355_p3, qm_addr_6_reg_1109, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, qm_addr_16_gep_fu_472_p3, qm_addr_18_gep_fu_508_p3, qm_addr_20_gep_fu_544_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            qm_address0 <= qm_addr_20_gep_fu_544_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            qm_address0 <= qm_addr_18_gep_fu_508_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            qm_address0 <= qm_addr_16_gep_fu_472_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            qm_address0 <= qm_addr_4_reg_1094;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qm_address0 <= qm_addr_2_reg_1084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            qm_address0 <= qm_addr_6_gep_fu_355_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            qm_address0 <= qm_addr_4_gep_fu_328_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            qm_address0 <= qm_addr_2_gep_fu_310_p3;
        elsif (((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_address0 <= qm_addr_6_reg_1109;
        elsif (((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_address0 <= qm_addr_13_reg_1027;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qm_address0 <= qm_addr_11_reg_1012;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            qm_address0 <= qm_addr_9_reg_1002;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            qm_address0 <= qm_addr_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qm_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            qm_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qm_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((((tmp_fu_674_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln22_fu_682_p2 = ap_const_lv1_1) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            qm_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            qm_address0 <= "XXXX";
        end if; 
    end process;


    qm_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state2, tmp_fu_674_p3, tmp_reg_984, icmp_ln22_fu_682_p2, icmp_ln22_reg_988, qm_addr_8_reg_992, qm_addr_1_gep_fu_139_p3, qm_addr_1_reg_997, qm_addr_10_reg_1007, qm_addr_12_reg_1017, qm_addr_14_reg_1032, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, qm_addr_3_gep_fu_319_p3, qm_addr_3_reg_1089, qm_addr_5_gep_fu_337_p3, qm_addr_5_reg_1099, qm_addr_7_gep_fu_364_p3, qm_addr_7_reg_1114, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, qm_addr_15_gep_fu_427_p3, qm_addr_17_gep_fu_481_p3, qm_addr_19_gep_fu_517_p3, qm_addr_21_gep_fu_553_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            qm_address1 <= qm_addr_21_gep_fu_553_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            qm_address1 <= qm_addr_19_gep_fu_517_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            qm_address1 <= qm_addr_17_gep_fu_481_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            qm_address1 <= qm_addr_15_gep_fu_427_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            qm_address1 <= qm_addr_5_reg_1099;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qm_address1 <= qm_addr_3_reg_1089;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            qm_address1 <= qm_addr_1_reg_997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            qm_address1 <= qm_addr_7_gep_fu_364_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            qm_address1 <= qm_addr_5_gep_fu_337_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            qm_address1 <= qm_addr_3_gep_fu_319_p3;
        elsif (((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_address1 <= qm_addr_7_reg_1114;
        elsif (((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_address1 <= qm_addr_14_reg_1032;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qm_address1 <= qm_addr_12_reg_1017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            qm_address1 <= qm_addr_10_reg_1007;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            qm_address1 <= qm_addr_8_reg_992;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qm_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            qm_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qm_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((tmp_fu_674_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            qm_address1 <= qm_addr_1_gep_fu_139_p3;
        elsif (((icmp_ln22_fu_682_p2 = ap_const_lv1_1) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            qm_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            qm_address1 <= "XXXX";
        end if; 
    end process;


    qm_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state2, tmp_fu_674_p3, tmp_reg_984, icmp_ln22_fu_682_p2, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_fu_674_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln22_fu_682_p2 = ap_const_lv1_1) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            qm_ce0 <= ap_const_logic_1;
        else 
            qm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    qm_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state2, tmp_fu_674_p3, tmp_reg_984, icmp_ln22_fu_682_p2, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_fu_674_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln22_fu_682_p2 = ap_const_lv1_1) and (tmp_fu_674_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            qm_ce1 <= ap_const_logic_1;
        else 
            qm_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    qm_d0_assign_proc : process(ap_CS_fsm_state6, tmp_reg_984, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_650_p2, add_ln23_2_fu_688_p2, add_ln24_fu_702_p2, sub_ln21_2_fu_716_p2, sub_ln20_fu_728_p2, sub_ln20_2_fu_742_p2, sub_ln21_fu_756_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            qm_d0 <= sub_ln21_fu_756_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qm_d0 <= sub_ln20_2_fu_742_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            qm_d0 <= sub_ln20_fu_728_p2;
        elsif (((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_d0 <= sub_ln21_2_fu_716_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qm_d0 <= add_ln24_fu_702_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            qm_d0 <= add_ln23_2_fu_688_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            qm_d0 <= grp_fu_650_p2;
        else 
            qm_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    qm_d1_assign_proc : process(ap_CS_fsm_state6, tmp_reg_984, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_657_p2, add_ln23_3_fu_695_p2, add_ln24_1_fu_709_p2, sub_ln21_3_fu_722_p2, sub_ln20_1_fu_735_p2, sub_ln20_3_fu_749_p2, sub_ln21_1_fu_763_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            qm_d1 <= sub_ln21_1_fu_763_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qm_d1 <= sub_ln20_3_fu_749_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            qm_d1 <= sub_ln20_1_fu_735_p2;
        elsif (((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qm_d1 <= sub_ln21_3_fu_722_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qm_d1 <= add_ln24_1_fu_709_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            qm_d1 <= add_ln23_3_fu_695_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            qm_d1 <= grp_fu_657_p2;
        else 
            qm_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    qm_we0_assign_proc : process(ap_CS_fsm_state6, tmp_reg_984, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            qm_we0 <= ap_const_logic_1;
        else 
            qm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    qm_we1_assign_proc : process(ap_CS_fsm_state6, tmp_reg_984, icmp_ln22_reg_988, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_reg_984 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln22_reg_988 = ap_const_lv1_1) and (tmp_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            qm_we1 <= ap_const_logic_1;
        else 
            qm_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln33_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1256),32));

        sext_ln34_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln34_fu_818_p2),32));

        sext_ln35_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln35_fu_871_p2),32));

        sext_ln36_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln36_fu_889_p2),32));

    sub_ln20_1_fu_735_p2 <= std_logic_vector(unsigned(reg_608) - unsigned(dx_q1));
    sub_ln20_2_fu_742_p2 <= std_logic_vector(unsigned(reg_613) - unsigned(dx_q0));
    sub_ln20_3_fu_749_p2 <= std_logic_vector(unsigned(reg_618) - unsigned(dx_q1));
    sub_ln20_fu_728_p2 <= std_logic_vector(unsigned(reg_603) - unsigned(dx_q0));
    sub_ln21_1_fu_763_p2 <= std_logic_vector(unsigned(reg_626) - unsigned(dx_q1));
    sub_ln21_2_fu_716_p2 <= std_logic_vector(unsigned(qm_load_6_reg_1129) - unsigned(dx_q0));
    sub_ln21_3_fu_722_p2 <= std_logic_vector(unsigned(qm_load_7_reg_1134) - unsigned(dx_q1));
    sub_ln21_fu_756_p2 <= std_logic_vector(unsigned(reg_622) - unsigned(dx_q0));
    sub_ln39_fu_920_p2 <= std_logic_vector(unsigned(in_r_q0) - unsigned(reg_635));
    sub_ln40_1_fu_944_p2 <= std_logic_vector(unsigned(sub_ln40_reg_1306) - unsigned(dl_load_5_reg_1230));
    sub_ln40_fu_927_p2 <= std_logic_vector(unsigned(sub_ln39_fu_920_p2) - unsigned(reg_630));
    sub_ln42_fu_938_p2 <= std_logic_vector(unsigned(in_r_q0) - unsigned(ashr_ln42_fu_933_p2));
    tmp_2_fu_829_p1 <= dl_q0;
    tmp_fu_674_p3 <= error_q0(31 downto 31);
    trunc_ln_fu_781_p1 <= dl_q0;
end behav;
