-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ff_snow_horizontal_compose97i is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_we0 : OUT STD_LOGIC;
    b_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_we1 : OUT STD_LOGIC;
    b_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce1 : OUT STD_LOGIC;
    temp_we1 : OUT STD_LOGIC;
    temp_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ff_snow_horizontal_compose97i is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ff_snow_horizontal_compose97i,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.104000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1245,HLS_SYN_LUT=2318,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_7FFFFFFE : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111110";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln_fu_384_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_reg_1047 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln2_reg_1057 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_fu_435_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal x_reg_1062 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln1_reg_1076 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal w2_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln22_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_2_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_2_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln26_fu_521_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln3_fu_529_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln3_reg_1129 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_load_3_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln3_reg_1164 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1_fu_598_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln1_reg_1169 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln22_fu_617_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln22_reg_1180 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln27_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln27_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln2_fu_720_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2_reg_1191 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln32_2_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_2_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln33_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln33_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln34_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln33_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln41_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln41_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_1_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_1_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_1_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_1_reg_1261 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_load_6_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln7_reg_1281 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_2_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_4_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_4_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln35_2_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_2_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_3_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_3_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_323 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal empty_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_phi_mux_x_1_phi_fu_349_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln28_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln28_1_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_2_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln41_1_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_1_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln23_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln24_1_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln30_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln28_1_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_419_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_1_fu_409_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln21_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_1_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_1_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_2_fu_497_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln22_1_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_fu_536_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln23_3_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln23_1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_4_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_606_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln23_2_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln24_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_1_fu_649_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln30_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_2_fu_672_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln27_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln27_1_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_1_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_700_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_1_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_727_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln28_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_fu_754_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln32_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_1_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln6_fu_782_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_fu_792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln34_fu_837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln34_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_2_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_3_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_3_fu_899_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln8_fu_927_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln35_1_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_983_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln38_2_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln39_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_1020_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln39_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_reg_335 <= add_ln34_4_reg_1296;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                empty_reg_335 <= add_ln32_2_reg_1207;
            end if; 
        end if;
    end process;

    reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_368 <= b_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_368 <= b_q0;
            end if; 
        end if;
    end process;

    reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_373 <= temp_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_373 <= temp_q1;
            end if; 
        end if;
    end process;

    x_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_0_reg_323 <= add_ln22_reg_1180;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_0_reg_323 <= ap_const_lv30_1;
            end if; 
        end if;
    end process;

    x_1_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                x_1_reg_345 <= x_2_reg_1291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_1_reg_345 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln22_reg_1180 <= add_ln22_fu_617_p2;
                b_load_3_reg_1159 <= b_q1;
                    shl_ln1_reg_1169(30 downto 1) <= shl_ln1_fu_598_p3(30 downto 1);
                trunc_ln3_reg_1164 <= add_ln23_4_fu_582_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_501_p2 = ap_const_lv1_1))) then
                add_ln23_1_reg_1110 <= add_ln23_1_fu_511_p2;
                add_ln23_2_reg_1115 <= add_ln23_2_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln23_reg_1091 <= add_ln23_fu_484_p2;
                w2_reg_1086 <= w2_fu_471_p1;
                    zext_ln22_reg_1097(29 downto 0) <= zext_ln22_fu_490_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln32_2_reg_1207 <= add_ln32_2_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln33_reg_1213 <= add_ln33_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln34_4_reg_1296 <= add_ln34_4_fu_902_p2;
                add_ln35_2_reg_1301 <= add_ln35_2_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln38_3_reg_1306 <= add_ln38_3_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sext_ln34_1_reg_1261 <= sext_ln34_1_fu_832_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_1))) then
                sext_ln34_reg_1221 <= sext_ln34_fu_812_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_1))) then
                sext_ln38_1_reg_1251 <= sext_ln38_1_fu_827_p1;
                sext_ln38_reg_1241 <= sext_ln38_fu_822_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_0))) then
                sext_ln41_reg_1231 <= sext_ln41_fu_817_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    shl_ln2_reg_1191(30 downto 1) <= shl_ln2_fu_720_p3(30 downto 1);
                sub_ln27_reg_1185 <= sub_ln27_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_0) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then
                    shl_ln3_reg_1129(30 downto 1) <= shl_ln3_fu_529_p3(30 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                temp_load_6_reg_1276 <= temp_q0;
                trunc_ln7_reg_1281 <= add_ln34_3_fu_866_p2(31 downto 4);
                x_2_reg_1291 <= x_2_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln1_reg_1076 <= add_ln21_fu_455_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then
                trunc_ln26_reg_1120 <= trunc_ln26_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln2_reg_1057 <= width(31 downto 1);
                trunc_ln_reg_1047 <= add_ln18_fu_378_p2(31 downto 1);
                x_reg_1062 <= x_fu_435_p3;
            end if;
        end if;
    end process;
    zext_ln22_reg_1097(31 downto 30) <= "00";
    shl_ln3_reg_1129(0) <= '0';
    shl_ln1_reg_1169(0) <= '0';
    shl_ln2_reg_1191(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln22_fu_501_p2, trunc_ln26_fu_521_p1, trunc_ln26_reg_1120, ap_CS_fsm_state14, icmp_ln33_fu_807_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_1) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_0) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln18_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(width));
    add_ln21_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(sub_ln21_1_fu_449_p2));
    add_ln22_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(x_0_reg_323));
    add_ln23_1_fu_511_p2 <= std_logic_vector(unsigned(add_ln23_reg_1091) + unsigned(zext_ln22_1_fu_493_p1));
    add_ln23_2_fu_516_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_493_p1) + unsigned(w2_reg_1086));
    add_ln23_3_fu_564_p2 <= std_logic_vector(unsigned(b_q1) + unsigned(b_q0));
    add_ln23_4_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(sub_ln23_1_fu_576_p2));
    add_ln23_fu_484_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(w2_fu_471_p1));
    add_ln24_1_fu_649_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(shl_ln1_reg_1169));
    add_ln24_fu_606_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFE) + signed(shl_ln1_fu_598_p3));
    add_ln27_1_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(sub_ln27_1_fu_688_p2));
    add_ln28_1_fu_754_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(shl_ln2_reg_1191));
    add_ln28_fu_727_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFE) + signed(shl_ln2_fu_720_p3));
    add_ln30_1_fu_536_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFE) + signed(shl_ln3_fu_529_p3));
    add_ln30_2_fu_672_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(shl_ln3_reg_1129));
    add_ln32_1_fu_776_p2 <= std_logic_vector(unsigned(temp_q0) + unsigned(add_ln32_fu_770_p2));
    add_ln32_2_fu_796_p2 <= std_logic_vector(signed(sext_ln32_fu_792_p1) + signed(temp_q1));
    add_ln32_fu_770_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(shl_ln32_fu_764_p2));
    add_ln33_fu_802_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(width));
    add_ln34_1_fu_854_p2 <= std_logic_vector(unsigned(temp_q1) + unsigned(temp_q0));
    add_ln34_2_fu_860_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(shl_ln34_fu_848_p2));
    add_ln34_3_fu_866_p2 <= std_logic_vector(unsigned(add_ln34_1_fu_854_p2) + unsigned(add_ln34_2_fu_860_p2));
    add_ln34_4_fu_902_p2 <= std_logic_vector(signed(sext_ln34_3_fu_899_p1) + signed(reg_373));
    add_ln35_1_fu_909_p2 <= std_logic_vector(unsigned(add_ln34_4_fu_902_p2) + unsigned(b_q1));
    add_ln35_2_fu_941_p2 <= std_logic_vector(signed(sext_ln35_1_fu_937_p1) + signed(temp_load_6_reg_1276));
    add_ln35_fu_882_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(x_1_reg_345));
    add_ln38_1_fu_971_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(shl_ln38_fu_965_p2));
    add_ln38_2_fu_977_p2 <= std_logic_vector(unsigned(temp_q0) + unsigned(add_ln38_1_fu_971_p2));
    add_ln38_3_fu_997_p2 <= std_logic_vector(signed(sext_ln38_2_fu_993_p1) + signed(temp_q1));
    add_ln39_1_fu_1034_p2 <= std_logic_vector(signed(sext_ln39_fu_1030_p1) + signed(reg_373));
    add_ln39_fu_1003_p2 <= std_logic_vector(unsigned(add_ln38_3_reg_1306) + unsigned(empty_reg_335));
    add_ln41_1_fu_958_p2 <= std_logic_vector(unsigned(temp_q1) + unsigned(sub_ln41_fu_952_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_x_1_phi_fu_349_p4 <= x_1_reg_345;

    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln22_fu_501_p2, trunc_ln26_fu_521_p1, sext_ln41_reg_1231, sext_ln38_1_reg_1251, sext_ln21_fu_394_p1, zext_ln23_fu_506_p1, sext_ln30_fu_524_p1, zext_ln27_fu_547_p1, sext_ln23_1_fu_560_p1, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_address0 <= sext_ln38_1_reg_1251(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            b_address0 <= sext_ln41_reg_1231(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address0 <= sext_ln23_1_fu_560_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_1) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then 
            b_address0 <= zext_ln27_fu_547_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_0) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0))) then 
            b_address0 <= sext_ln30_fu_524_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_501_p2 = ap_const_lv1_1))) then 
            b_address0 <= zext_ln23_fu_506_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address0 <= sext_ln21_fu_394_p1(10 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state13, sext_ln34_reg_1221, sext_ln38_reg_1241, sext_ln34_1_reg_1261, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, sext_ln27_fu_551_p1, sext_ln23_fu_556_p1, sext_ln35_fu_888_p1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_address1 <= sext_ln38_reg_1241(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            b_address1 <= sext_ln34_1_reg_1261(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_address1 <= sext_ln34_reg_1221(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            b_address1 <= sext_ln35_fu_888_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_address1 <= sext_ln23_fu_556_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_address1 <= sext_ln27_fu_551_p1(10 - 1 downto 0);
        else 
            b_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln22_fu_501_p2, trunc_ln26_fu_521_p1, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_1) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln26_fu_521_p1 = ap_const_lv1_0) and (icmp_ln22_fu_501_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_501_p2 = ap_const_lv1_1)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, add_ln41_1_fu_958_p2, add_ln39_1_fu_1034_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_d0 <= add_ln39_1_fu_1034_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            b_d0 <= add_ln41_1_fu_958_p2;
        else 
            b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_d1_assign_proc : process(add_ln32_2_reg_1207, ap_CS_fsm_state13, add_ln34_4_fu_902_p2, ap_CS_fsm_state17, add_ln35_2_reg_1301, add_ln38_3_reg_1306, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_d1 <= add_ln38_3_reg_1306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            b_d1 <= add_ln35_2_reg_1301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_d1 <= add_ln34_4_fu_902_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_d1 <= add_ln32_2_reg_1207;
        else 
            b_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_we0_assign_proc : process(trunc_ln26_reg_1120, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln26_reg_1120 = ap_const_lv1_1)))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we1_assign_proc : process(trunc_ln26_reg_1120, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (trunc_ln26_reg_1120 = ap_const_lv1_1)))) then 
            b_we1 <= ap_const_logic_1;
        else 
            b_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_357_p2 <= std_logic_vector(unsigned(zext_ln22_reg_1097) + unsigned(add_ln23_reg_1091));

    grp_fu_361_p1_assign_proc : process(ap_CS_fsm_state15, trunc_ln26_reg_1120, ap_CS_fsm_state14, icmp_ln33_fu_807_p2, ap_phi_mux_x_1_phi_fu_349_p4, x_1_reg_345)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_361_p1 <= x_1_reg_345;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_0)))) then 
            grp_fu_361_p1 <= ap_phi_mux_x_1_phi_fu_349_p4;
        else 
            grp_fu_361_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_361_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(grp_fu_361_p1));
    icmp_fu_429_p2 <= "1" when (signed(tmp_fu_419_p4) > signed(ap_const_lv30_0)) else "0";
    icmp_ln22_fu_501_p2 <= "1" when (signed(zext_ln22_2_fu_497_p1) < signed(trunc_ln2_reg_1057)) else "0";
    icmp_ln33_fu_807_p2 <= "1" when (signed(x_1_reg_345) < signed(add_ln33_reg_1213)) else "0";
    or_ln34_fu_837_p2 <= (x_1_reg_345 or ap_const_lv32_1);
        sext_ln21_1_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1076),32));

        sext_ln21_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_384_p4),64));

        sext_ln23_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_2_reg_1115),64));

        sext_ln23_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_1164),32));

        sext_ln23_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_1_reg_1110),64));

        sext_ln27_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_700_p4),32));

        sext_ln27_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_357_p2),64));

        sext_ln30_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_357_p2),64));

        sext_ln32_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_782_p4),32));

        sext_ln34_1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_361_p2),64));

        sext_ln34_2_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln34_fu_837_p2),64));

        sext_ln34_3_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_1281),32));

        sext_ln34_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_1_reg_345),64));

        sext_ln35_1_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_927_p4),32));

        sext_ln35_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_882_p2),64));

        sext_ln38_1_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_361_p2),64));

        sext_ln38_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_983_p4),32));

        sext_ln38_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_1_reg_345),64));

        sext_ln39_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1020_p4),32));

        sext_ln41_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_361_p2),64));

    shl_ln1_fu_598_p3 <= (x_0_reg_323 & ap_const_lv1_0);
    shl_ln21_fu_443_p2 <= std_logic_vector(shift_left(unsigned(b_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln23_fu_570_p2 <= std_logic_vector(shift_left(unsigned(add_ln23_3_fu_564_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln27_fu_682_p2 <= std_logic_vector(shift_left(unsigned(b_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln2_fu_720_p3 <= (x_reg_1062 & ap_const_lv1_0);
    shl_ln30_fu_659_p2 <= std_logic_vector(shift_left(unsigned(temp_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln32_fu_764_p2 <= std_logic_vector(shift_left(unsigned(temp_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln34_fu_848_p2 <= std_logic_vector(shift_left(unsigned(reg_373),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln35_fu_915_p2 <= std_logic_vector(shift_left(unsigned(add_ln35_1_fu_909_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln38_fu_965_p2 <= std_logic_vector(shift_left(unsigned(temp_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln39_fu_1008_p2 <= std_logic_vector(shift_left(unsigned(add_ln39_fu_1003_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln3_fu_529_p3 <= (x_reg_1062 & ap_const_lv1_0);
    shl_ln41_fu_946_p2 <= std_logic_vector(shift_left(unsigned(empty_reg_335),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sub_ln21_1_fu_449_p2 <= std_logic_vector(unsigned(shl_ln21_fu_443_p2) - unsigned(b_q0));
    sub_ln21_fu_477_p2 <= std_logic_vector(unsigned(b_q0) - unsigned(sext_ln21_1_fu_474_p1));
    sub_ln23_1_fu_576_p2 <= std_logic_vector(unsigned(shl_ln23_fu_570_p2) - unsigned(add_ln23_3_fu_564_p2));
    sub_ln23_fu_626_p2 <= std_logic_vector(unsigned(reg_368) - unsigned(sext_ln23_2_fu_623_p1));
    sub_ln24_1_fu_642_p2 <= std_logic_vector(unsigned(sub_ln24_fu_637_p2) - unsigned(sub_ln23_fu_626_p2));
    sub_ln24_fu_637_p2 <= std_logic_vector(unsigned(b_load_3_reg_1159) - unsigned(temp_q0));
    sub_ln27_1_fu_688_p2 <= std_logic_vector(unsigned(shl_ln27_fu_682_p2) - unsigned(b_q1));
    sub_ln27_fu_714_p2 <= std_logic_vector(unsigned(b_q0) - unsigned(sext_ln27_1_fu_710_p1));
    sub_ln28_1_fu_747_p2 <= std_logic_vector(unsigned(sub_ln28_fu_742_p2) - unsigned(temp_q1));
    sub_ln28_fu_742_p2 <= std_logic_vector(unsigned(reg_368) - unsigned(sub_ln27_reg_1185));
    sub_ln30_fu_665_p2 <= std_logic_vector(unsigned(b_q0) - unsigned(shl_ln30_fu_659_p2));
    sub_ln35_fu_921_p2 <= std_logic_vector(unsigned(shl_ln35_fu_915_p2) - unsigned(add_ln35_1_fu_909_p2));
    sub_ln39_fu_1014_p2 <= std_logic_vector(unsigned(shl_ln39_fu_1008_p2) - unsigned(add_ln39_fu_1003_p2));
    sub_ln41_fu_952_p2 <= std_logic_vector(unsigned(shl_ln41_fu_946_p2) - unsigned(empty_reg_335));

    temp_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, sext_ln38_1_fu_827_p1, sext_ln34_1_fu_832_p1, ap_CS_fsm_state7, zext_ln30_fu_542_p1, zext_ln24_fu_612_p1, zext_ln23_1_fu_633_p1, ap_CS_fsm_state10, zext_ln28_1_fu_759_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address0 <= sext_ln34_1_fu_832_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_address0 <= sext_ln38_1_fu_827_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= ap_const_lv64_1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= zext_ln28_1_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln23_1_fu_633_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_address0 <= zext_ln24_fu_612_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_address0 <= zext_ln30_fu_542_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, trunc_ln26_reg_1120, ap_CS_fsm_state11, sext_ln34_fu_812_p1, ap_CS_fsm_state14, icmp_ln33_fu_807_p2, sext_ln41_fu_817_p1, sext_ln38_fu_822_p1, ap_CS_fsm_state7, zext_ln24_1_fu_654_p1, zext_ln30_1_fu_677_p1, ap_CS_fsm_state8, zext_ln28_fu_733_p1, zext_ln27_1_fu_738_p1, ap_CS_fsm_state10, sext_ln34_2_fu_843_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address1 <= sext_ln34_2_fu_843_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_1))) then 
            temp_address1 <= sext_ln38_fu_822_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_0))) then 
            temp_address1 <= sext_ln41_fu_817_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_1))) then 
            temp_address1 <= sext_ln34_fu_812_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address1 <= zext_ln27_1_fu_738_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_address1 <= zext_ln28_fu_733_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_address1 <= zext_ln30_1_fu_677_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address1 <= zext_ln24_1_fu_654_p1(10 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, trunc_ln26_reg_1120, ap_CS_fsm_state11, ap_CS_fsm_state14, icmp_ln33_fu_807_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_0) and (trunc_ln26_reg_1120 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln33_fu_807_p2 = ap_const_lv1_1)))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10, sub_ln21_fu_477_p2, sub_ln23_fu_626_p2, sub_ln28_1_fu_747_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d0 <= sub_ln28_1_fu_747_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d0 <= sub_ln23_fu_626_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_d0 <= sub_ln21_fu_477_p2;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_d1_assign_proc : process(sub_ln27_reg_1185, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, sub_ln24_1_fu_642_p2, sub_ln30_fu_665_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d1 <= sub_ln27_reg_1185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_d1 <= sub_ln30_fu_665_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d1 <= sub_ln24_1_fu_642_p2;
        else 
            temp_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state3, trunc_ln26_reg_1120, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln26_reg_1120 = ap_const_lv1_1)))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(trunc_ln26_reg_1120, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln26_reg_1120 = ap_const_lv1_1)))) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_419_p4 <= width(31 downto 2);
    trunc_ln23_1_fu_409_p4 <= width(30 downto 1);
    trunc_ln26_fu_521_p1 <= width(1 - 1 downto 0);
    trunc_ln4_fu_1020_p4 <= sub_ln39_fu_1014_p2(31 downto 1);
    trunc_ln5_fu_700_p4 <= add_ln27_1_fu_694_p2(31 downto 2);
    trunc_ln6_fu_782_p4 <= add_ln32_1_fu_776_p2(31 downto 3);
    trunc_ln8_fu_927_p4 <= sub_ln35_fu_921_p2(31 downto 1);
    trunc_ln9_fu_983_p4 <= add_ln38_2_fu_977_p2(31 downto 3);
    trunc_ln_fu_384_p4 <= add_ln18_fu_378_p2(31 downto 1);
        w2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1047),32));

    x_2_fu_893_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(x_1_reg_345));
    x_fu_435_p3 <= 
        trunc_ln23_1_fu_409_p4 when (icmp_fu_429_p2(0) = '1') else 
        ap_const_lv30_1;
    zext_ln22_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_323),32));
    zext_ln22_2_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_323),31));
    zext_ln22_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_1062),32));
    zext_ln23_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_1169),64));
    zext_ln23_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_323),64));
    zext_ln24_1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_649_p2),64));
    zext_ln24_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_606_p2),64));
    zext_ln27_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_reg_1191),64));
    zext_ln27_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_1062),64));
    zext_ln28_1_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_754_p2),64));
    zext_ln28_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_727_p2),64));
    zext_ln30_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_672_p2),64));
    zext_ln30_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_536_p2),64));
end behav;
