-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity store_slice_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_linesize : IN STD_LOGIC_VECTOR (31 downto 0);
    src_linesize : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    log2_scale : IN STD_LOGIC_VECTOR (31 downto 0);
    dither_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dither_ce0 : OUT STD_LOGIC;
    dither_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dither_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dither_ce1 : OUT STD_LOGIC;
    dither_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of store_slice_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "store_slice_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.073444,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=561,HLS_SYN_LUT=2972,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv34_2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_const_lv34_3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000011";
    constant ap_const_lv34_4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_const_lv34_5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000101";
    constant ap_const_lv34_6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000110";
    constant ap_const_lv34_7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111001";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv26_3FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111111111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln31_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln31_1_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_1_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_395_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_reg_1374 : STD_LOGIC_VECTOR (30 downto 0);
    signal d_reg_1379 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln31_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dither_addr_reg_1384 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_1_reg_1389 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_2_reg_1394 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_3_reg_1399 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_4_reg_1404 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_5_reg_1409 : STD_LOGIC_VECTOR (5 downto 0);
    signal dither_addr_6_reg_1414 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln33_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln36_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln37_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln37_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_ln38_fu_867_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln38_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal or_ln39_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln39_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln40_fu_1049_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln40_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln41_2_fu_1157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_2_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_2_fu_1180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_2_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_15_fu_1311_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_15_reg_1507 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal y_0_reg_329 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln32_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_435_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_450_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_465_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_480_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_495_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_510_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_1_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_1_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln38_1_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln39_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln39_1_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_1_fu_1135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln41_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln41_1_fu_1256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_1_fu_1323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_2_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln36_2_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln37_2_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln38_2_fu_943_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln39_2_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln40_2_fu_1125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln41_2_fu_1251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln42_2_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_401_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln36_1_fu_414_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln37_1_fu_429_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln38_1_fu_444_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln39_1_fu_459_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln40_1_fu_474_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln41_1_fu_489_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln42_1_fu_504_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln33_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln33_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_544_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln33_1_fu_554_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_10_fu_560_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_570_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln33_1_fu_578_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln35_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_639_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_631_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_653_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_fu_621_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_1_fu_661_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln35_2_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln36_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_731_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_2_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_745_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln1_fu_713_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_3_fu_753_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln36_2_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln37_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_4_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_836_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln2_fu_804_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_5_fu_844_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln37_2_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_fu_873_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_913_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_6_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_927_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln3_fu_895_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_7_fu_935_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln38_2_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln39_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_1_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_8_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_996_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_1018_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln4_fu_986_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_9_fu_1026_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln39_2_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_1055_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln40_fu_1066_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1095_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_10_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_fu_1109_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln5_fu_1077_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_11_fu_1117_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln40_2_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln41_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_1146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln42_fu_1163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_1169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_1192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_1197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_12_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_1235_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln6_fu_1203_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal temp_13_fu_1243_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln42_fu_1260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_1_fu_1265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_14_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_1303_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln7_fu_1271_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    phi_mul1_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_352 <= add_ln31_reg_1361;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_352 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_340 <= add_ln31_1_reg_1366;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_340 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                x_0_reg_364 <= x_reg_1502;
            elsif (((icmp_ln31_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_364 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_0_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_329 <= y_reg_1374;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_329 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_1_reg_1366 <= add_ln31_1_fu_381_p2;
                add_ln31_reg_1361 <= add_ln31_fu_376_p2;
                y_reg_1374 <= y_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln41_2_reg_1487 <= add_ln41_2_fu_1157_p2;
                add_ln42_2_reg_1497 <= add_ln42_2_fu_1180_p2;
                x_reg_1502 <= x_fu_1186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_390_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    d_reg_1379(5 downto 3) <= zext_ln32_fu_409_p1(6 - 1 downto 0)(5 downto 3);
                    dither_addr_1_reg_1389(5 downto 3) <= tmp_2_fu_435_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_2_reg_1394(5 downto 3) <= tmp_3_fu_450_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_3_reg_1399(5 downto 3) <= tmp_4_fu_465_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_4_reg_1404(5 downto 3) <= tmp_5_fu_480_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_5_reg_1409(5 downto 3) <= tmp_6_fu_495_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_6_reg_1414(5 downto 3) <= tmp_7_fu_510_p3(6 - 1 downto 0)(5 downto 3);
                    dither_addr_reg_1384(5 downto 3) <= tmp_1_fu_420_p3(6 - 1 downto 0)(5 downto 3);
                    tmp_11_reg_1419(31 downto 3) <= tmp_11_fu_586_p3(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    or_ln36_reg_1432(31 downto 1) <= or_ln36_fu_685_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    or_ln37_reg_1442(0) <= or_ln37_fu_776_p2(0);    or_ln37_reg_1442(31 downto 2) <= or_ln37_fu_776_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    or_ln38_reg_1452(31 downto 2) <= or_ln38_fu_867_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    or_ln39_reg_1462(1 downto 0) <= or_ln39_fu_958_p2(1 downto 0);    or_ln39_reg_1462(31 downto 3) <= or_ln39_fu_958_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    or_ln40_reg_1472(1) <= or_ln40_fu_1049_p2(1);    or_ln40_reg_1472(31 downto 3) <= or_ln40_fu_1049_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                temp_15_reg_1507 <= temp_15_fu_1311_p3;
            end if;
        end if;
    end process;
    d_reg_1379(2 downto 0) <= "000";
    dither_addr_reg_1384(2 downto 0) <= "001";
    dither_addr_1_reg_1389(2 downto 0) <= "010";
    dither_addr_2_reg_1394(2 downto 0) <= "011";
    dither_addr_3_reg_1399(2 downto 0) <= "100";
    dither_addr_4_reg_1404(2 downto 0) <= "101";
    dither_addr_5_reg_1409(2 downto 0) <= "110";
    dither_addr_6_reg_1414(2 downto 0) <= "111";
    tmp_11_reg_1419(2 downto 0) <= "000";
    or_ln36_reg_1432(0) <= '1';
    or_ln37_reg_1442(1) <= '1';
    or_ln38_reg_1452(1 downto 0) <= "11";
    or_ln39_reg_1462(2) <= '1';
    or_ln40_reg_1472(0) <= '1';
    or_ln40_reg_1472(2) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_390_p2, ap_CS_fsm_state3, icmp_ln33_fu_594_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln33_fu_594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_381_p2 <= std_logic_vector(unsigned(phi_mul_reg_340) + unsigned(src_linesize));
    add_ln31_fu_376_p2 <= std_logic_vector(unsigned(phi_mul1_reg_352) + unsigned(dst_linesize));
    add_ln33_fu_526_p2 <= std_logic_vector(unsigned(width) + unsigned(ap_const_lv32_7));
    add_ln35_1_fu_615_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln35_fu_610_p2));
    add_ln35_2_fu_674_p2 <= std_logic_vector(unsigned(phi_mul1_reg_352) + unsigned(x_0_reg_364));
    add_ln35_fu_599_p2 <= std_logic_vector(unsigned(phi_mul_reg_340) + unsigned(x_0_reg_364));
    add_ln36_1_fu_707_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln36_fu_702_p2));
    add_ln36_2_fu_766_p2 <= std_logic_vector(unsigned(or_ln36_reg_1432) + unsigned(phi_mul1_reg_352));
    add_ln36_fu_691_p2 <= std_logic_vector(unsigned(or_ln36_fu_685_p2) + unsigned(phi_mul_reg_340));
    add_ln37_1_fu_798_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln37_fu_793_p2));
    add_ln37_2_fu_857_p2 <= std_logic_vector(unsigned(or_ln37_reg_1442) + unsigned(phi_mul1_reg_352));
    add_ln37_fu_782_p2 <= std_logic_vector(unsigned(or_ln37_fu_776_p2) + unsigned(phi_mul_reg_340));
    add_ln38_1_fu_889_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln38_fu_884_p2));
    add_ln38_2_fu_948_p2 <= std_logic_vector(unsigned(or_ln38_reg_1452) + unsigned(phi_mul1_reg_352));
    add_ln38_fu_873_p2 <= std_logic_vector(unsigned(or_ln38_fu_867_p2) + unsigned(phi_mul_reg_340));
    add_ln39_1_fu_980_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln39_fu_975_p2));
    add_ln39_2_fu_1039_p2 <= std_logic_vector(unsigned(or_ln39_reg_1462) + unsigned(phi_mul1_reg_352));
    add_ln39_fu_964_p2 <= std_logic_vector(unsigned(or_ln39_fu_958_p2) + unsigned(phi_mul_reg_340));
    add_ln40_1_fu_1071_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln40_fu_1066_p2));
    add_ln40_2_fu_1130_p2 <= std_logic_vector(unsigned(or_ln40_reg_1472) + unsigned(phi_mul1_reg_352));
    add_ln40_fu_1055_p2 <= std_logic_vector(unsigned(or_ln40_fu_1049_p2) + unsigned(phi_mul_reg_340));
    add_ln41_1_fu_1197_p2 <= std_logic_vector(unsigned(dither_q0) + unsigned(shl_ln41_fu_1192_p2));
    add_ln41_2_fu_1157_p2 <= std_logic_vector(unsigned(or_ln41_fu_1140_p2) + unsigned(phi_mul1_reg_352));
    add_ln41_fu_1146_p2 <= std_logic_vector(unsigned(or_ln41_fu_1140_p2) + unsigned(phi_mul_reg_340));
    add_ln42_1_fu_1265_p2 <= std_logic_vector(unsigned(dither_q1) + unsigned(shl_ln42_fu_1260_p2));
    add_ln42_2_fu_1180_p2 <= std_logic_vector(unsigned(or_ln42_fu_1163_p2) + unsigned(phi_mul1_reg_352));
    add_ln42_fu_1169_p2 <= std_logic_vector(unsigned(or_ln42_fu_1163_p2) + unsigned(phi_mul_reg_340));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_390_p2)
    begin
        if (((icmp_ln31_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_390_p2)
    begin
        if (((icmp_ln31_fu_390_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dither_address0_assign_proc : process(d_reg_1379, dither_addr_reg_1384, dither_addr_1_reg_1389, dither_addr_2_reg_1394, dither_addr_3_reg_1399, dither_addr_4_reg_1404, dither_addr_5_reg_1409, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dither_address0 <= dither_addr_5_reg_1409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dither_address0 <= dither_addr_4_reg_1404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dither_address0 <= dither_addr_3_reg_1399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dither_address0 <= dither_addr_2_reg_1394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dither_address0 <= dither_addr_1_reg_1389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dither_address0 <= dither_addr_reg_1384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dither_address0 <= d_reg_1379;
        else 
            dither_address0 <= "XXXXXX";
        end if; 
    end process;

    dither_address1 <= dither_addr_6_reg_1414;

    dither_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dither_ce0 <= ap_const_logic_1;
        else 
            dither_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dither_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dither_ce1 <= ap_const_logic_1;
        else 
            dither_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, sext_ln35_1_fu_680_p1, sext_ln36_1_fu_771_p1, sext_ln37_1_fu_862_p1, sext_ln38_1_fu_953_p1, sext_ln39_1_fu_1044_p1, sext_ln40_1_fu_1135_p1, sext_ln41_1_fu_1256_p1, sext_ln42_1_fu_1323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_address0 <= sext_ln42_1_fu_1323_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_address0 <= sext_ln41_1_fu_1256_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_address0 <= sext_ln40_1_fu_1135_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address0 <= sext_ln39_1_fu_1044_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address0 <= sext_ln38_1_fu_953_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address0 <= sext_ln37_1_fu_862_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address0 <= sext_ln36_1_fu_771_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= sext_ln35_1_fu_680_p1(3 - 1 downto 0);
        else 
            dst_address0 <= "XXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, sext_ln35_2_fu_669_p1, sext_ln36_2_fu_761_p1, sext_ln37_2_fu_852_p1, sext_ln38_2_fu_943_p1, sext_ln39_2_fu_1034_p1, sext_ln40_2_fu_1125_p1, sext_ln41_2_fu_1251_p1, sext_ln42_2_fu_1319_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_d0 <= sext_ln42_2_fu_1319_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_d0 <= sext_ln41_2_fu_1251_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_d0 <= sext_ln40_2_fu_1125_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_d0 <= sext_ln39_2_fu_1034_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_d0 <= sext_ln38_2_fu_943_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_d0 <= sext_ln37_2_fu_852_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_d0 <= sext_ln36_2_fu_761_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_d0 <= sext_ln35_2_fu_669_p1;
        else 
            dst_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln31_fu_390_p2 <= "1" when (signed(zext_ln31_fu_386_p1) < signed(height)) else "0";
    icmp_ln33_fu_594_p2 <= "1" when (x_0_reg_364 = tmp_11_reg_1419) else "0";
    or_ln36_1_fu_414_p2 <= (tmp_fu_401_p3 or ap_const_lv34_1);
    or_ln36_fu_685_p2 <= (x_0_reg_364 or ap_const_lv32_1);
    or_ln37_1_fu_429_p2 <= (tmp_fu_401_p3 or ap_const_lv34_2);
    or_ln37_fu_776_p2 <= (x_0_reg_364 or ap_const_lv32_2);
    or_ln38_1_fu_444_p2 <= (tmp_fu_401_p3 or ap_const_lv34_3);
    or_ln38_fu_867_p2 <= (x_0_reg_364 or ap_const_lv32_3);
    or_ln39_1_fu_459_p2 <= (tmp_fu_401_p3 or ap_const_lv34_4);
    or_ln39_fu_958_p2 <= (x_0_reg_364 or ap_const_lv32_4);
    or_ln40_1_fu_474_p2 <= (tmp_fu_401_p3 or ap_const_lv34_5);
    or_ln40_fu_1049_p2 <= (x_0_reg_364 or ap_const_lv32_5);
    or_ln41_1_fu_489_p2 <= (tmp_fu_401_p3 or ap_const_lv34_6);
    or_ln41_fu_1140_p2 <= (x_0_reg_364 or ap_const_lv32_6);
    or_ln42_1_fu_504_p2 <= (tmp_fu_401_p3 or ap_const_lv34_7);
    or_ln42_fu_1163_p2 <= (x_0_reg_364 or ap_const_lv32_7);
    p_lshr_fu_544_p4 <= sub_ln33_fu_539_p2(31 downto 3);
    select_ln33_1_fu_578_p3 <= 
        ap_const_lv29_0 when (tmp_8_fu_519_p3(0) = '1') else 
        select_ln33_fu_570_p3;
    select_ln33_fu_570_p3 <= 
        sub_ln33_1_fu_554_p2 when (tmp_9_fu_531_p3(0) = '1') else 
        tmp_10_fu_560_p4;
    select_ln35_fu_653_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_fu_647_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln36_fu_745_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_2_fu_739_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln37_fu_836_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_4_fu_830_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln38_fu_927_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_6_fu_921_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln39_fu_1018_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_8_fu_1012_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln40_fu_1109_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_10_fu_1103_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln41_fu_1235_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_12_fu_1229_p2(0) = '1') else 
        ap_const_lv26_0;
    select_ln42_fu_1303_p3 <= 
        ap_const_lv26_3FFFFFF when (temp_14_fu_1297_p2(0) = '1') else 
        ap_const_lv26_0;
        sext_ln35_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_2_fu_674_p2),64));

        sext_ln35_2_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_1_fu_661_p3),32));

        sext_ln35_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_599_p2),64));

        sext_ln36_1_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_2_fu_766_p2),64));

        sext_ln36_2_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_3_fu_753_p3),32));

        sext_ln36_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_691_p2),64));

        sext_ln37_1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_2_fu_857_p2),64));

        sext_ln37_2_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_5_fu_844_p3),32));

        sext_ln37_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_782_p2),64));

        sext_ln38_1_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_2_fu_948_p2),64));

        sext_ln38_2_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_7_fu_935_p3),32));

        sext_ln38_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_fu_873_p2),64));

        sext_ln39_1_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_2_fu_1039_p2),64));

        sext_ln39_2_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_9_fu_1026_p3),32));

        sext_ln39_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_fu_964_p2),64));

        sext_ln40_1_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_2_fu_1130_p2),64));

        sext_ln40_2_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_11_fu_1117_p3),32));

        sext_ln40_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_1055_p2),64));

        sext_ln41_1_fu_1256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_2_reg_1487),64));

        sext_ln41_2_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_13_fu_1243_p3),32));

        sext_ln41_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_fu_1146_p2),64));

        sext_ln42_1_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln42_2_reg_1497),64));

        sext_ln42_2_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_15_reg_1507),32));

        sext_ln42_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln42_fu_1169_p2),64));

    shl_ln35_fu_610_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln36_fu_702_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln37_fu_793_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln38_fu_884_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln39_fu_975_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln40_fu_1066_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln41_fu_1192_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));
    shl_ln42_fu_1260_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & log2_scale(31-1 downto 0)))));

    src_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, sext_ln35_fu_605_p1, sext_ln36_fu_697_p1, sext_ln37_fu_788_p1, sext_ln38_fu_879_p1, sext_ln39_fu_970_p1, sext_ln40_fu_1061_p1, sext_ln41_fu_1152_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            src_address0 <= sext_ln41_fu_1152_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            src_address0 <= sext_ln40_fu_1061_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            src_address0 <= sext_ln39_fu_970_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address0 <= sext_ln38_fu_879_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address0 <= sext_ln37_fu_788_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= sext_ln36_fu_697_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address0 <= sext_ln35_fu_605_p1(3 - 1 downto 0);
        else 
            src_address0 <= "XXX";
        end if; 
    end process;

    src_address1 <= sext_ln42_fu_1175_p1(3 - 1 downto 0);

    src_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln33_1_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(p_lshr_fu_544_p4));
    sub_ln33_fu_539_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFF9) - signed(width));
    temp_10_fu_1103_p2 <= (tmp_23_fu_1095_p3 xor ap_const_lv1_1);
    temp_11_fu_1117_p3 <= 
        select_ln40_fu_1109_p3 when (tmp_22_fu_1087_p3(0) = '1') else 
        trunc_ln5_fu_1077_p4;
    temp_12_fu_1229_p2 <= (tmp_25_fu_1221_p3 xor ap_const_lv1_1);
    temp_13_fu_1243_p3 <= 
        select_ln41_fu_1235_p3 when (tmp_24_fu_1213_p3(0) = '1') else 
        trunc_ln6_fu_1203_p4;
    temp_14_fu_1297_p2 <= (tmp_27_fu_1289_p3 xor ap_const_lv1_1);
    temp_15_fu_1311_p3 <= 
        select_ln42_fu_1303_p3 when (tmp_26_fu_1281_p3(0) = '1') else 
        trunc_ln7_fu_1271_p4;
    temp_1_fu_661_p3 <= 
        select_ln35_fu_653_p3 when (tmp_12_fu_631_p3(0) = '1') else 
        trunc_ln_fu_621_p4;
    temp_2_fu_739_p2 <= (tmp_15_fu_731_p3 xor ap_const_lv1_1);
    temp_3_fu_753_p3 <= 
        select_ln36_fu_745_p3 when (tmp_14_fu_723_p3(0) = '1') else 
        trunc_ln1_fu_713_p4;
    temp_4_fu_830_p2 <= (tmp_17_fu_822_p3 xor ap_const_lv1_1);
    temp_5_fu_844_p3 <= 
        select_ln37_fu_836_p3 when (tmp_16_fu_814_p3(0) = '1') else 
        trunc_ln2_fu_804_p4;
    temp_6_fu_921_p2 <= (tmp_19_fu_913_p3 xor ap_const_lv1_1);
    temp_7_fu_935_p3 <= 
        select_ln38_fu_927_p3 when (tmp_18_fu_905_p3(0) = '1') else 
        trunc_ln3_fu_895_p4;
    temp_8_fu_1012_p2 <= (tmp_21_fu_1004_p3 xor ap_const_lv1_1);
    temp_9_fu_1026_p3 <= 
        select_ln39_fu_1018_p3 when (tmp_20_fu_996_p3(0) = '1') else 
        trunc_ln4_fu_986_p4;
    temp_fu_647_p2 <= (tmp_13_fu_639_p3 xor ap_const_lv1_1);
    tmp_10_fu_560_p4 <= add_ln33_fu_526_p2(31 downto 3);
    tmp_11_fu_586_p3 <= (select_ln33_1_fu_578_p3 & ap_const_lv3_0);
    tmp_12_fu_631_p3 <= add_ln35_1_fu_615_p2(14 downto 14);
    tmp_13_fu_639_p3 <= add_ln35_1_fu_615_p2(31 downto 31);
    tmp_14_fu_723_p3 <= add_ln36_1_fu_707_p2(14 downto 14);
    tmp_15_fu_731_p3 <= add_ln36_1_fu_707_p2(31 downto 31);
    tmp_16_fu_814_p3 <= add_ln37_1_fu_798_p2(14 downto 14);
    tmp_17_fu_822_p3 <= add_ln37_1_fu_798_p2(31 downto 31);
    tmp_18_fu_905_p3 <= add_ln38_1_fu_889_p2(14 downto 14);
    tmp_19_fu_913_p3 <= add_ln38_1_fu_889_p2(31 downto 31);
    tmp_1_fu_420_p3 <= (ap_const_lv30_0 & or_ln36_1_fu_414_p2);
    tmp_20_fu_996_p3 <= add_ln39_1_fu_980_p2(14 downto 14);
    tmp_21_fu_1004_p3 <= add_ln39_1_fu_980_p2(31 downto 31);
    tmp_22_fu_1087_p3 <= add_ln40_1_fu_1071_p2(14 downto 14);
    tmp_23_fu_1095_p3 <= add_ln40_1_fu_1071_p2(31 downto 31);
    tmp_24_fu_1213_p3 <= add_ln41_1_fu_1197_p2(14 downto 14);
    tmp_25_fu_1221_p3 <= add_ln41_1_fu_1197_p2(31 downto 31);
    tmp_26_fu_1281_p3 <= add_ln42_1_fu_1265_p2(14 downto 14);
    tmp_27_fu_1289_p3 <= add_ln42_1_fu_1265_p2(31 downto 31);
    tmp_2_fu_435_p3 <= (ap_const_lv30_0 & or_ln37_1_fu_429_p2);
    tmp_3_fu_450_p3 <= (ap_const_lv30_0 & or_ln38_1_fu_444_p2);
    tmp_4_fu_465_p3 <= (ap_const_lv30_0 & or_ln39_1_fu_459_p2);
    tmp_5_fu_480_p3 <= (ap_const_lv30_0 & or_ln40_1_fu_474_p2);
    tmp_6_fu_495_p3 <= (ap_const_lv30_0 & or_ln41_1_fu_489_p2);
    tmp_7_fu_510_p3 <= (ap_const_lv30_0 & or_ln42_1_fu_504_p2);
    tmp_8_fu_519_p3 <= width(31 downto 31);
    tmp_9_fu_531_p3 <= add_ln33_fu_526_p2(31 downto 31);
    tmp_fu_401_p3 <= (y_0_reg_329 & ap_const_lv3_0);
    trunc_ln1_fu_713_p4 <= add_ln36_1_fu_707_p2(31 downto 6);
    trunc_ln2_fu_804_p4 <= add_ln37_1_fu_798_p2(31 downto 6);
    trunc_ln3_fu_895_p4 <= add_ln38_1_fu_889_p2(31 downto 6);
    trunc_ln4_fu_986_p4 <= add_ln39_1_fu_980_p2(31 downto 6);
    trunc_ln5_fu_1077_p4 <= add_ln40_1_fu_1071_p2(31 downto 6);
    trunc_ln6_fu_1203_p4 <= add_ln41_1_fu_1197_p2(31 downto 6);
    trunc_ln7_fu_1271_p4 <= add_ln42_1_fu_1265_p2(31 downto 6);
    trunc_ln_fu_621_p4 <= add_ln35_1_fu_615_p2(31 downto 6);
    x_fu_1186_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(x_0_reg_364));
    y_fu_395_p2 <= std_logic_vector(unsigned(y_0_reg_329) + unsigned(ap_const_lv31_1));
    zext_ln31_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_329),32));
    zext_ln32_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_401_p3),64));
end behav;
