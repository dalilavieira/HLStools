// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fe_tobytes,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.664000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=16,HLS_SYN_LUT=255,HLS_VERSION=2019_1}" *)

module fe_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        h_address0,
        h_ce0,
        h_we0,
        h_d0,
        h_q0,
        h_address1,
        h_ce1,
        h_we1,
        h_d1,
        h_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] s_address0;
output   s_ce0;
output   s_we0;
output  [31:0] s_d0;
output  [13:0] s_address1;
output   s_ce1;
output   s_we1;
output  [31:0] s_d1;
output  [9:0] h_address0;
output   h_ce0;
output   h_we0;
output  [31:0] h_d0;
input  [31:0] h_q0;
output  [9:0] h_address1;
output   h_ce1;
output   h_we1;
output  [31:0] h_d1;
input  [31:0] h_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] s_address0;
reg s_ce0;
reg s_we0;
reg[13:0] s_address1;
reg s_ce1;
reg s_we1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        s_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_address0 = 64'd0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        s_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_address1 = 64'd1;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        s_we1 = 1'b1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign h_address0 = 10'd0;

assign h_address1 = 10'd0;

assign h_ce0 = 1'b0;

assign h_ce1 = 1'b0;

assign h_d0 = 32'd0;

assign h_d1 = 32'd0;

assign h_we0 = 1'b0;

assign h_we1 = 1'b0;

assign s_d0 = 32'd0;

assign s_d1 = 32'd0;

endmodule //fe_tobytes
