-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ifwht is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    block_r_ce0 : OUT STD_LOGIC;
    block_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    block_r_ce1 : OUT STD_LOGIC;
    block_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_block_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_block_ce0 : OUT STD_LOGIC;
    output_block_we0 : OUT STD_LOGIC;
    output_block_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_block_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_block_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_block_ce1 : OUT STD_LOGIC;
    output_block_we1 : OUT STD_LOGIC;
    output_block_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_block_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    intra : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ifwht is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ifwht,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.205000,HLS_SYN_LAT=266,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1044,HLS_SYN_LUT=2546,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_80 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_block_addr_reg_899 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_378_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_912 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_load_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal block_load_1_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal block_load_2_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal block_load_3_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_975 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal block_load_4_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal block_load_5_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_1007 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_1_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_1_reg_1017 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_reg_1027 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln31_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln31_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln34_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln37_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln37_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln44_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln44_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln49_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln49_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln51_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_rec_cast2_fu_596_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_1_rec_cast2_reg_1080 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_block_addr_8_reg_1087 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_611_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1095 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln68_fu_617_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln68_reg_1100 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln66_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_block_addr_9_reg_1106 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_load_reg_1112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal output_block_load_1_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_reg_1124 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_addr_10_reg_1129 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_addr_11_reg_1135 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_load_2_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_block_load_3_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_block_addr_12_reg_1152 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_addr_13_reg_1157 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_load_4_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal output_block_load_5_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_block_addr_14_reg_1174 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_block_addr_15_reg_1179 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln69_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sub_ln72_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln72_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln75_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln75_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln78_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln78_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln89_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln89_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_fu_812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_1_reg_1233 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_block_addr_17_reg_1238 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln118_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_fu_846_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_1247 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_block_addr_16_reg_1252 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln104_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_0_rec_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_1_rec_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal d1_0_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal d_0_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_0_rec_cast_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal out_1_rec_cast_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln74_1_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln77_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln77_1_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln55_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln56_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln58_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln59_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln60_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln96_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln97_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln99_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln100_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln101_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln102_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln120_1_fu_884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln105_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln30_fu_384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln33_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln33_1_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln36_fu_422_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln36_1_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln39_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln39_1_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln33_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln50_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln45_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln71_fu_641_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln1_fu_649_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln74_fu_662_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln77_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_1_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln82_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln87_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln88_fu_774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln83_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_fu_818_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_822_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln119_fu_830_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln105_fu_852_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_856_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln105_fu_864_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_356_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln120_fu_874_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln120_fu_878_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d1_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                d1_0_reg_334 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                d1_0_reg_334 <= d_1_reg_1233;
            end if; 
        end if;
    end process;

    d_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                d_0_reg_345 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                d_0_reg_345 <= d_reg_1247;
            end if; 
        end if;
    end process;

    i_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_311 <= i_reg_912;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_311 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_1_rec_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_1_rec_reg_322 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (((icmp_ln104_fu_840_p2 = ap_const_lv1_1) and (icmp_ln92_reg_927 = ap_const_lv1_1)) or ((icmp_ln118_fu_806_p2 = ap_const_lv1_1) and (icmp_ln92_reg_927 = ap_const_lv1_0))))) then 
                out_1_rec_reg_322 <= i_1_reg_1095;
            end if; 
        end if;
    end process;

    tmp_0_rec_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                tmp_0_rec_reg_299 <= add_ln28_reg_1027;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_0_rec_reg_299 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln28_reg_1027 <= add_ln28_fu_466_p2;
                block_load_4_reg_995 <= block_r_q0;
                block_load_5_reg_1001 <= block_r_q1;
                    zext_ln39_1_reg_1017(4 downto 3) <= zext_ln39_1_fu_461_p1(4 downto 3);
                    zext_ln39_reg_1007(0) <= zext_ln39_fu_450_p1(0);    zext_ln39_reg_1007(4 downto 3) <= zext_ln39_fu_450_p1(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln46_reg_1068 <= add_ln46_fu_560_p2;
                add_ln51_reg_1074 <= add_ln51_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln84_reg_1218 <= add_ln84_fu_770_p2;
                add_ln89_reg_1224 <= add_ln89_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln95_reg_1208 <= add_ln95_fu_740_p2;
                add_ln98_reg_1213 <= add_ln98_fu_760_p2;
                sub_ln69_reg_1184 <= sub_ln69_fu_684_p2;
                sub_ln72_reg_1190 <= sub_ln72_fu_692_p2;
                sub_ln75_reg_1196 <= sub_ln75_fu_700_p2;
                sub_ln78_reg_1202 <= sub_ln78_fu_710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                block_load_1_reg_937 <= block_r_q1;
                block_load_reg_931 <= block_r_q0;
                    zext_ln33_1_reg_953(4 downto 2) <= zext_ln33_1_fu_417_p1(4 downto 2);
                    zext_ln33_reg_943(0) <= zext_ln33_fu_406_p1(0);    zext_ln33_reg_943(4 downto 2) <= zext_ln33_fu_406_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                block_load_2_reg_963 <= block_r_q0;
                block_load_3_reg_969 <= block_r_q1;
                    zext_ln36_1_reg_985(1) <= zext_ln36_1_fu_439_p1(1);    zext_ln36_1_reg_985(4 downto 3) <= zext_ln36_1_fu_439_p1(4 downto 3);
                    zext_ln36_reg_975(1 downto 0) <= zext_ln36_fu_428_p1(1 downto 0);    zext_ln36_reg_975(4 downto 3) <= zext_ln36_fu_428_p1(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                d_1_reg_1233 <= d_1_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                d_reg_1247 <= d_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_1_reg_1095 <= i_1_fu_611_p2;
                    out_1_rec_cast2_reg_1080(3 downto 0) <= out_1_rec_cast2_fu_596_p1(3 downto 0);
                    output_block_addr_8_reg_1087(3 downto 0) <= out_1_rec_cast_fu_600_p1(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_912 <= i_fu_378_p2;
                output_block_addr_reg_899 <= tmp_0_rec_cast_fu_366_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln92_reg_927 <= icmp_ln92_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    or_ln_reg_1124(3 downto 0) <= or_ln_fu_628_p3(3 downto 0);
                    output_block_addr_10_reg_1129(3 downto 0) <= zext_ln71_fu_636_p1(5 - 1 downto 0)(3 downto 0);
                output_block_addr_11_reg_1135 <= zext_ln71_1_fu_644_p1(5 - 1 downto 0);
                output_block_load_1_reg_1118 <= output_block_q1;
                output_block_load_reg_1112 <= output_block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    output_block_addr_12_reg_1152(3 downto 0) <= sext_ln74_fu_657_p1(5 - 1 downto 0)(3 downto 0);
                output_block_addr_13_reg_1157 <= sext_ln74_1_fu_667_p1(5 - 1 downto 0);
                output_block_load_2_reg_1140 <= output_block_q0;
                output_block_load_3_reg_1146 <= output_block_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    output_block_addr_14_reg_1174(3 downto 0) <= sext_ln77_fu_672_p1(5 - 1 downto 0)(3 downto 0);
                output_block_addr_15_reg_1179 <= sext_ln77_1_fu_676_p1(5 - 1 downto 0);
                output_block_load_4_reg_1162 <= output_block_q0;
                output_block_load_5_reg_1168 <= output_block_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_1) and (icmp_ln104_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                output_block_addr_16_reg_1252 <= zext_ln105_fu_869_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_927 = ap_const_lv1_0) and (icmp_ln118_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                output_block_addr_17_reg_1238 <= zext_ln119_fu_835_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_605_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    output_block_addr_9_reg_1106(3 downto 0) <= zext_ln68_fu_623_p1(5 - 1 downto 0)(3 downto 0);
                xor_ln68_reg_1100 <= xor_ln68_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sub_ln31_reg_1032 <= sub_ln31_fu_476_p2;
                sub_ln34_reg_1038 <= sub_ln34_fu_484_p2;
                sub_ln37_reg_1044 <= sub_ln37_fu_492_p2;
                sub_ln40_reg_1050 <= sub_ln40_fu_502_p2;
                sub_ln44_reg_1056 <= sub_ln44_fu_514_p2;
                sub_ln49_reg_1062 <= sub_ln49_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln30_reg_917(4 downto 1) <= zext_ln30_fu_390_p1(4 downto 1);
            end if;
        end if;
    end process;
    zext_ln30_reg_917(0) <= '1';
    zext_ln30_reg_917(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln33_reg_943(1) <= '1';
    zext_ln33_reg_943(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln33_1_reg_953(1 downto 0) <= "11";
    zext_ln33_1_reg_953(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_975(2) <= '1';
    zext_ln36_reg_975(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln36_1_reg_985(0) <= '1';
    zext_ln36_1_reg_985(2 downto 2) <= "1";
    zext_ln36_1_reg_985(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln39_reg_1007(2 downto 1) <= "11";
    zext_ln39_reg_1007(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln39_1_reg_1017(2 downto 0) <= "111";
    zext_ln39_1_reg_1017(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    out_1_rec_cast2_reg_1080(5 downto 4) <= "00";
    output_block_addr_8_reg_1087(4) <= '0';
    output_block_addr_9_reg_1106(4) <= '0';
    or_ln_reg_1124(4) <= '1';
    output_block_addr_10_reg_1129(4) <= '1';
    output_block_addr_12_reg_1152(4) <= '0';
    output_block_addr_14_reg_1174(4) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln28_fu_372_p2, icmp_ln92_reg_927, ap_CS_fsm_state10, icmp_ln66_fu_605_p2, ap_CS_fsm_state18, icmp_ln118_fu_806_p2, icmp_ln104_fu_840_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln28_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln66_fu_605_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (((icmp_ln104_fu_840_p2 = ap_const_lv1_1) and (icmp_ln92_reg_927 = ap_const_lv1_1)) or ((icmp_ln118_fu_806_p2 = ap_const_lv1_1) and (icmp_ln92_reg_927 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln92_reg_927 = ap_const_lv1_1) and (icmp_ln104_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln102_fu_801_p2 <= std_logic_vector(unsigned(add_ln89_reg_1224) + unsigned(add_ln84_reg_1218));
    add_ln105_fu_864_p2 <= std_logic_vector(unsigned(shl_ln_fu_856_p3) + unsigned(out_1_rec_cast2_reg_1080));
    add_ln119_fu_830_p2 <= std_logic_vector(unsigned(shl_ln1_fu_822_p3) + unsigned(out_1_rec_cast2_reg_1080));
    add_ln120_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv27_80) + unsigned(sext_ln120_fu_874_p1));
    add_ln28_fu_466_p2 <= std_logic_vector(unsigned(tmp_0_rec_reg_299) + unsigned(ap_const_lv5_8));
    add_ln30_fu_472_p2 <= std_logic_vector(unsigned(block_load_1_reg_937) + unsigned(block_load_reg_931));
    add_ln33_fu_480_p2 <= std_logic_vector(unsigned(block_load_3_reg_969) + unsigned(block_load_2_reg_963));
    add_ln36_fu_488_p2 <= std_logic_vector(unsigned(block_load_5_reg_1001) + unsigned(block_load_4_reg_995));
    add_ln39_fu_496_p2 <= std_logic_vector(unsigned(block_r_q1) + unsigned(block_r_q0));
    add_ln43_fu_508_p2 <= std_logic_vector(unsigned(add_ln33_fu_480_p2) + unsigned(add_ln30_fu_472_p2));
    add_ln46_fu_560_p2 <= std_logic_vector(unsigned(sub_ln34_reg_1038) + unsigned(sub_ln31_reg_1032));
    add_ln48_fu_520_p2 <= std_logic_vector(unsigned(add_ln39_fu_496_p2) + unsigned(add_ln36_fu_488_p2));
    add_ln51_fu_568_p2 <= std_logic_vector(unsigned(sub_ln40_reg_1050) + unsigned(sub_ln37_reg_1044));
    add_ln54_fu_532_p2 <= std_logic_vector(unsigned(add_ln48_fu_520_p2) + unsigned(add_ln43_fu_508_p2));
    add_ln57_fu_551_p2 <= std_logic_vector(unsigned(sub_ln49_reg_1062) + unsigned(sub_ln44_reg_1056));
    add_ln58_fu_572_p2 <= std_logic_vector(unsigned(sub_ln50_fu_564_p2) + unsigned(sub_ln45_fu_556_p2));
    add_ln61_fu_591_p2 <= std_logic_vector(unsigned(add_ln51_reg_1074) + unsigned(add_ln46_reg_1068));
    add_ln68_fu_680_p2 <= std_logic_vector(unsigned(output_block_load_1_reg_1118) + unsigned(output_block_load_reg_1112));
    add_ln71_fu_688_p2 <= std_logic_vector(unsigned(output_block_load_3_reg_1146) + unsigned(output_block_load_2_reg_1140));
    add_ln74_1_fu_696_p2 <= std_logic_vector(unsigned(output_block_load_5_reg_1168) + unsigned(output_block_load_4_reg_1162));
    add_ln74_fu_662_p2 <= std_logic_vector(unsigned(out_1_rec_cast2_reg_1080) + unsigned(ap_const_lv6_28));
    add_ln77_fu_704_p2 <= std_logic_vector(unsigned(output_block_q1) + unsigned(output_block_q0));
    add_ln81_fu_716_p2 <= std_logic_vector(unsigned(add_ln71_fu_688_p2) + unsigned(add_ln68_fu_680_p2));
    add_ln84_fu_770_p2 <= std_logic_vector(unsigned(sub_ln72_reg_1190) + unsigned(sub_ln69_reg_1184));
    add_ln86_fu_728_p2 <= std_logic_vector(unsigned(add_ln77_fu_704_p2) + unsigned(add_ln74_1_fu_696_p2));
    add_ln89_fu_778_p2 <= std_logic_vector(unsigned(sub_ln78_reg_1202) + unsigned(sub_ln75_reg_1196));
    add_ln95_fu_740_p2 <= std_logic_vector(unsigned(add_ln86_fu_728_p2) + unsigned(add_ln81_fu_716_p2));
    add_ln98_fu_760_p2 <= std_logic_vector(unsigned(sub_ln87_fu_734_p2) + unsigned(sub_ln82_fu_722_p2));
    add_ln99_fu_782_p2 <= std_logic_vector(unsigned(sub_ln88_fu_774_p2) + unsigned(sub_ln83_fu_766_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, icmp_ln66_fu_605_p2)
    begin
        if (((icmp_ln66_fu_605_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln66_fu_605_p2)
    begin
        if (((icmp_ln66_fu_605_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln33_fu_406_p1, ap_CS_fsm_state4, zext_ln36_fu_428_p1, ap_CS_fsm_state5, zext_ln39_fu_450_p1, tmp_0_rec_cast_fu_366_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_r_address0 <= zext_ln39_fu_450_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_r_address0 <= zext_ln36_fu_428_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_r_address0 <= zext_ln33_fu_406_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_r_address0 <= tmp_0_rec_cast_fu_366_p1(5 - 1 downto 0);
        else 
            block_r_address0 <= "XXXXX";
        end if; 
    end process;


    block_r_address1_assign_proc : process(ap_CS_fsm_state2, zext_ln30_fu_390_p1, ap_CS_fsm_state3, zext_ln33_1_fu_417_p1, ap_CS_fsm_state4, zext_ln36_1_fu_439_p1, ap_CS_fsm_state5, zext_ln39_1_fu_461_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_r_address1 <= zext_ln39_1_fu_461_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_r_address1 <= zext_ln36_1_fu_439_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_r_address1 <= zext_ln33_1_fu_417_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_r_address1 <= zext_ln30_fu_390_p1(5 - 1 downto 0);
        else 
            block_r_address1 <= "XXXXX";
        end if; 
    end process;


    block_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            block_r_ce0 <= ap_const_logic_1;
        else 
            block_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            block_r_ce1 <= ap_const_logic_1;
        else 
            block_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    d_1_fu_812_p2 <= std_logic_vector(unsigned(d1_0_reg_334) + unsigned(ap_const_lv4_1));
    d_fu_846_p2 <= std_logic_vector(unsigned(d_0_reg_345) + unsigned(ap_const_lv4_1));
    grp_fu_356_p4 <= output_block_q0(31 downto 6);
    i_1_fu_611_p2 <= std_logic_vector(unsigned(out_1_rec_reg_322) + unsigned(ap_const_lv4_1));
    i_fu_378_p2 <= std_logic_vector(unsigned(i_0_reg_311) + unsigned(ap_const_lv4_1));
    icmp_ln104_fu_840_p2 <= "1" when (d_0_reg_345 = ap_const_lv4_8) else "0";
    icmp_ln118_fu_806_p2 <= "1" when (d1_0_reg_334 = ap_const_lv4_8) else "0";
    icmp_ln28_fu_372_p2 <= "1" when (i_0_reg_311 = ap_const_lv4_8) else "0";
    icmp_ln66_fu_605_p2 <= "1" when (out_1_rec_reg_322 = ap_const_lv4_8) else "0";
    icmp_ln92_fu_395_p2 <= "1" when (intra = ap_const_lv32_0) else "0";
    or_ln1_fu_649_p3 <= (ap_const_lv2_2 & out_1_rec_reg_322);
    or_ln30_fu_384_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_1);
    or_ln33_1_fu_411_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_3);
    or_ln33_fu_400_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_2);
    or_ln36_1_fu_433_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_5);
    or_ln36_fu_422_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_4);
    or_ln39_1_fu_455_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_7);
    or_ln39_fu_444_p2 <= (tmp_0_rec_reg_299 or ap_const_lv5_6);
    or_ln_fu_628_p3 <= (ap_const_lv1_1 & out_1_rec_reg_322);
    out_1_rec_cast2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_1_rec_reg_322),6));
    out_1_rec_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_1_rec_reg_322),64));

    output_block_address0_assign_proc : process(output_block_addr_reg_899, icmp_ln92_reg_927, zext_ln33_reg_943, zext_ln36_reg_975, zext_ln39_reg_1007, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, output_block_addr_8_reg_1087, output_block_addr_9_reg_1106, ap_CS_fsm_state11, ap_CS_fsm_state12, output_block_addr_12_reg_1152, ap_CS_fsm_state13, output_block_addr_14_reg_1174, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, icmp_ln118_fu_806_p2, icmp_ln104_fu_840_p2, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state7, out_1_rec_cast_fu_600_p1, zext_ln71_fu_636_p1, sext_ln74_fu_657_p1, sext_ln77_fu_672_p1, zext_ln119_fu_835_p1, zext_ln105_fu_869_p1, ap_CS_fsm_state15)
    begin
        if (((icmp_ln92_reg_927 = ap_const_lv1_1) and (icmp_ln104_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            output_block_address0 <= zext_ln105_fu_869_p1(5 - 1 downto 0);
        elsif (((icmp_ln92_reg_927 = ap_const_lv1_0) and (icmp_ln118_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            output_block_address0 <= zext_ln119_fu_835_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_block_address0 <= output_block_addr_14_reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_block_address0 <= output_block_addr_12_reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_block_address0 <= output_block_addr_8_reg_1087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_block_address0 <= output_block_addr_9_reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_block_address0 <= sext_ln77_fu_672_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_block_address0 <= sext_ln74_fu_657_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_block_address0 <= zext_ln71_fu_636_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_block_address0 <= out_1_rec_cast_fu_600_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_block_address0 <= zext_ln39_reg_1007(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_block_address0 <= zext_ln36_reg_975(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_block_address0 <= zext_ln33_reg_943(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_block_address0 <= output_block_addr_reg_899;
        else 
            output_block_address0 <= "XXXXX";
        end if; 
    end process;


    output_block_address1_assign_proc : process(zext_ln30_reg_917, zext_ln33_1_reg_953, zext_ln36_1_reg_985, zext_ln39_1_reg_1017, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, output_block_addr_10_reg_1129, output_block_addr_11_reg_1135, ap_CS_fsm_state12, output_block_addr_13_reg_1157, ap_CS_fsm_state13, output_block_addr_15_reg_1179, ap_CS_fsm_state14, ap_CS_fsm_state16, output_block_addr_17_reg_1238, output_block_addr_16_reg_1252, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state7, zext_ln68_fu_623_p1, zext_ln71_1_fu_644_p1, sext_ln74_1_fu_667_p1, sext_ln77_1_fu_676_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_block_address1 <= output_block_addr_16_reg_1252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_block_address1 <= output_block_addr_17_reg_1238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_block_address1 <= output_block_addr_15_reg_1179;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_block_address1 <= output_block_addr_13_reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_block_address1 <= output_block_addr_11_reg_1135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_block_address1 <= output_block_addr_10_reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_block_address1 <= sext_ln77_1_fu_676_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_block_address1 <= sext_ln74_1_fu_667_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_block_address1 <= zext_ln71_1_fu_644_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_block_address1 <= zext_ln68_fu_623_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_block_address1 <= zext_ln39_1_reg_1017(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_block_address1 <= zext_ln36_1_reg_985(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_block_address1 <= zext_ln33_1_reg_953(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_block_address1 <= zext_ln30_reg_917(5 - 1 downto 0);
        else 
            output_block_address1 <= "XXXXX";
        end if; 
    end process;


    output_block_ce0_assign_proc : process(icmp_ln92_reg_927, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, icmp_ln118_fu_806_p2, icmp_ln104_fu_840_p2, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state7, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln92_reg_927 = ap_const_lv1_1) and (icmp_ln104_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln92_reg_927 = ap_const_lv1_0) and (icmp_ln118_fu_806_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            output_block_ce0 <= ap_const_logic_1;
        else 
            output_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_block_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_block_ce1 <= ap_const_logic_1;
        else 
            output_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_block_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14, add_ln95_reg_1208, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state7, add_ln54_fu_532_p2, sub_ln56_fu_546_p2, add_ln58_fu_572_p2, sub_ln60_fu_586_p2, sub_ln96_fu_746_p2, ap_CS_fsm_state15, add_ln99_fu_782_p2, sub_ln101_fu_796_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_block_d0 <= sub_ln101_fu_796_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_block_d0 <= add_ln99_fu_782_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_block_d0 <= add_ln95_reg_1208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_block_d0 <= sub_ln96_fu_746_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_block_d0 <= sub_ln60_fu_586_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_block_d0 <= add_ln58_fu_572_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_block_d0 <= sub_ln56_fu_546_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_block_d0 <= add_ln54_fu_532_p2;
        else 
            output_block_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_block_d1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14, add_ln98_reg_1213, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state7, sub_ln55_fu_539_p2, add_ln57_fu_551_p2, sub_ln59_fu_579_p2, add_ln61_fu_591_p2, sub_ln97_fu_753_p2, ap_CS_fsm_state15, sub_ln100_fu_789_p2, add_ln102_fu_801_p2, sext_ln120_1_fu_884_p1, sext_ln105_fu_889_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_block_d1 <= sext_ln105_fu_889_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_block_d1 <= sext_ln120_1_fu_884_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_block_d1 <= add_ln102_fu_801_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_block_d1 <= sub_ln100_fu_789_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_block_d1 <= add_ln98_reg_1213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_block_d1 <= sub_ln97_fu_753_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_block_d1 <= add_ln61_fu_591_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_block_d1 <= sub_ln59_fu_579_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_block_d1 <= add_ln57_fu_551_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_block_d1 <= sub_ln55_fu_539_p2;
        else 
            output_block_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_block_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state7, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_block_we0 <= ap_const_logic_1;
        else 
            output_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_block_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_block_we1 <= ap_const_logic_1;
        else 
            output_block_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln105_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_356_p4),32));

        sext_ln120_1_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln120_fu_878_p2),32));

        sext_ln120_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_356_p4),27));

        sext_ln71_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln68_reg_1100),5));

        sext_ln74_1_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln74_fu_662_p2),64));

        sext_ln74_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln1_fu_649_p3),64));

        sext_ln77_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln68_reg_1100),64));

        sext_ln77_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_reg_1124),64));

    shl_ln1_fu_822_p3 <= (trunc_ln119_fu_818_p1 & ap_const_lv3_0);
    shl_ln_fu_856_p3 <= (trunc_ln105_fu_852_p1 & ap_const_lv3_0);
    sub_ln100_fu_789_p2 <= std_logic_vector(unsigned(sub_ln83_fu_766_p2) - unsigned(sub_ln88_fu_774_p2));
    sub_ln101_fu_796_p2 <= std_logic_vector(unsigned(add_ln84_reg_1218) - unsigned(add_ln89_reg_1224));
    sub_ln31_fu_476_p2 <= std_logic_vector(unsigned(block_load_reg_931) - unsigned(block_load_1_reg_937));
    sub_ln34_fu_484_p2 <= std_logic_vector(unsigned(block_load_2_reg_963) - unsigned(block_load_3_reg_969));
    sub_ln37_fu_492_p2 <= std_logic_vector(unsigned(block_load_4_reg_995) - unsigned(block_load_5_reg_1001));
    sub_ln40_fu_502_p2 <= std_logic_vector(unsigned(block_r_q0) - unsigned(block_r_q1));
    sub_ln44_fu_514_p2 <= std_logic_vector(unsigned(add_ln30_fu_472_p2) - unsigned(add_ln33_fu_480_p2));
    sub_ln45_fu_556_p2 <= std_logic_vector(unsigned(sub_ln31_reg_1032) - unsigned(sub_ln34_reg_1038));
    sub_ln49_fu_526_p2 <= std_logic_vector(unsigned(add_ln36_fu_488_p2) - unsigned(add_ln39_fu_496_p2));
    sub_ln50_fu_564_p2 <= std_logic_vector(unsigned(sub_ln37_reg_1044) - unsigned(sub_ln40_reg_1050));
    sub_ln55_fu_539_p2 <= std_logic_vector(unsigned(add_ln43_fu_508_p2) - unsigned(add_ln48_fu_520_p2));
    sub_ln56_fu_546_p2 <= std_logic_vector(unsigned(sub_ln44_reg_1056) - unsigned(sub_ln49_reg_1062));
    sub_ln59_fu_579_p2 <= std_logic_vector(unsigned(sub_ln45_fu_556_p2) - unsigned(sub_ln50_fu_564_p2));
    sub_ln60_fu_586_p2 <= std_logic_vector(unsigned(add_ln46_reg_1068) - unsigned(add_ln51_reg_1074));
    sub_ln69_fu_684_p2 <= std_logic_vector(unsigned(output_block_load_reg_1112) - unsigned(output_block_load_1_reg_1118));
    sub_ln72_fu_692_p2 <= std_logic_vector(unsigned(output_block_load_2_reg_1140) - unsigned(output_block_load_3_reg_1146));
    sub_ln75_fu_700_p2 <= std_logic_vector(unsigned(output_block_load_4_reg_1162) - unsigned(output_block_load_5_reg_1168));
    sub_ln78_fu_710_p2 <= std_logic_vector(unsigned(output_block_q0) - unsigned(output_block_q1));
    sub_ln82_fu_722_p2 <= std_logic_vector(unsigned(add_ln68_fu_680_p2) - unsigned(add_ln71_fu_688_p2));
    sub_ln83_fu_766_p2 <= std_logic_vector(unsigned(sub_ln69_reg_1184) - unsigned(sub_ln72_reg_1190));
    sub_ln87_fu_734_p2 <= std_logic_vector(unsigned(add_ln74_1_fu_696_p2) - unsigned(add_ln77_fu_704_p2));
    sub_ln88_fu_774_p2 <= std_logic_vector(unsigned(sub_ln75_reg_1196) - unsigned(sub_ln78_reg_1202));
    sub_ln96_fu_746_p2 <= std_logic_vector(unsigned(add_ln81_fu_716_p2) - unsigned(add_ln86_fu_728_p2));
    sub_ln97_fu_753_p2 <= std_logic_vector(unsigned(sub_ln82_fu_722_p2) - unsigned(sub_ln87_fu_734_p2));
    tmp_0_rec_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_rec_reg_299),64));
    trunc_ln105_fu_852_p1 <= d_0_reg_345(3 - 1 downto 0);
    trunc_ln119_fu_818_p1 <= d1_0_reg_334(3 - 1 downto 0);
    xor_ln68_fu_617_p2 <= (out_1_rec_reg_322 xor ap_const_lv4_8);
    zext_ln105_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_864_p2),64));
    zext_ln119_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_fu_830_p2),64));
    zext_ln30_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_384_p2),64));
    zext_ln33_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln33_1_fu_411_p2),64));
    zext_ln33_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln33_fu_400_p2),64));
    zext_ln36_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_1_fu_433_p2),64));
    zext_ln36_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_422_p2),64));
    zext_ln39_1_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln39_1_fu_455_p2),64));
    zext_ln39_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln39_fu_444_p2),64));
    zext_ln68_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_fu_617_p2),64));
    zext_ln71_1_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln71_fu_641_p1),64));
    zext_ln71_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_628_p3),64));
end behav;
