// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "capidtmf_goertzel_result.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic capidtmf_goertzel_result::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<10> capidtmf_goertzel_result::ap_const_lv10_0 = "0000000000";
const sc_logic capidtmf_goertzel_result::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> capidtmf_goertzel_result::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";

capidtmf_goertzel_result::capidtmf_goertzel_result(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_buffer_r_address0);

    SC_METHOD(thread_buffer_r_address1);

    SC_METHOD(thread_buffer_r_ce0);

    SC_METHOD(thread_buffer_r_ce1);

    SC_METHOD(thread_buffer_r_d0);

    SC_METHOD(thread_buffer_r_d1);

    SC_METHOD(thread_buffer_r_we0);

    SC_METHOD(thread_buffer_r_we1);

    SC_METHOD(thread_coeffs_address0);

    SC_METHOD(thread_coeffs_address1);

    SC_METHOD(thread_coeffs_ce0);

    SC_METHOD(thread_coeffs_ce1);

    SC_METHOD(thread_coeffs_d0);

    SC_METHOD(thread_coeffs_d1);

    SC_METHOD(thread_coeffs_we0);

    SC_METHOD(thread_coeffs_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "capidtmf_goertzel_result_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "(port)buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_d0, "(port)buffer_r_d0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, buffer_r_address1, "(port)buffer_r_address1");
    sc_trace(mVcdFile, buffer_r_ce1, "(port)buffer_r_ce1");
    sc_trace(mVcdFile, buffer_r_we1, "(port)buffer_r_we1");
    sc_trace(mVcdFile, buffer_r_d1, "(port)buffer_r_d1");
    sc_trace(mVcdFile, buffer_r_q1, "(port)buffer_r_q1");
    sc_trace(mVcdFile, coeffs_address0, "(port)coeffs_address0");
    sc_trace(mVcdFile, coeffs_ce0, "(port)coeffs_ce0");
    sc_trace(mVcdFile, coeffs_we0, "(port)coeffs_we0");
    sc_trace(mVcdFile, coeffs_d0, "(port)coeffs_d0");
    sc_trace(mVcdFile, coeffs_q0, "(port)coeffs_q0");
    sc_trace(mVcdFile, coeffs_address1, "(port)coeffs_address1");
    sc_trace(mVcdFile, coeffs_ce1, "(port)coeffs_ce1");
    sc_trace(mVcdFile, coeffs_we1, "(port)coeffs_we1");
    sc_trace(mVcdFile, coeffs_d1, "(port)coeffs_d1");
    sc_trace(mVcdFile, coeffs_q1, "(port)coeffs_q1");
#endif

    }
    mHdltvinHandle.open("capidtmf_goertzel_result.hdltvin.dat");
    mHdltvoutHandle.open("capidtmf_goertzel_result.hdltvout.dat");
}

capidtmf_goertzel_result::~capidtmf_goertzel_result() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void capidtmf_goertzel_result::thread_ap_done() {
    ap_done = ap_start.read();
}

void capidtmf_goertzel_result::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void capidtmf_goertzel_result::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void capidtmf_goertzel_result::thread_buffer_r_address0() {
    buffer_r_address0 = ap_const_lv10_0;
}

void capidtmf_goertzel_result::thread_buffer_r_address1() {
    buffer_r_address1 = ap_const_lv10_0;
}

void capidtmf_goertzel_result::thread_buffer_r_ce0() {
    buffer_r_ce0 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_buffer_r_ce1() {
    buffer_r_ce1 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_buffer_r_d0() {
    buffer_r_d0 = ap_const_lv64_0;
}

void capidtmf_goertzel_result::thread_buffer_r_d1() {
    buffer_r_d1 = ap_const_lv64_0;
}

void capidtmf_goertzel_result::thread_buffer_r_we0() {
    buffer_r_we0 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_buffer_r_we1() {
    buffer_r_we1 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_coeffs_address0() {
    coeffs_address0 = ap_const_lv10_0;
}

void capidtmf_goertzel_result::thread_coeffs_address1() {
    coeffs_address1 = ap_const_lv10_0;
}

void capidtmf_goertzel_result::thread_coeffs_ce0() {
    coeffs_ce0 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_coeffs_ce1() {
    coeffs_ce1 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_coeffs_d0() {
    coeffs_d0 = ap_const_lv64_0;
}

void capidtmf_goertzel_result::thread_coeffs_d1() {
    coeffs_d1 = ap_const_lv64_0;
}

void capidtmf_goertzel_result::thread_coeffs_we0() {
    coeffs_we0 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_coeffs_we1() {
    coeffs_we1 = ap_const_logic_0;
}

void capidtmf_goertzel_result::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_address0\" :  \"" << buffer_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_ce0\" :  \"" << buffer_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_we0\" :  \"" << buffer_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_d0\" :  \"" << buffer_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buffer_r_q0\" :  \"" << buffer_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_address1\" :  \"" << buffer_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_ce1\" :  \"" << buffer_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_we1\" :  \"" << buffer_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buffer_r_d1\" :  \"" << buffer_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"buffer_r_q1\" :  \"" << buffer_r_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_address0\" :  \"" << coeffs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_ce0\" :  \"" << coeffs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_we0\" :  \"" << coeffs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_d0\" :  \"" << coeffs_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeffs_q0\" :  \"" << coeffs_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_address1\" :  \"" << coeffs_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_ce1\" :  \"" << coeffs_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_we1\" :  \"" << coeffs_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"coeffs_d1\" :  \"" << coeffs_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeffs_q1\" :  \"" << coeffs_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

