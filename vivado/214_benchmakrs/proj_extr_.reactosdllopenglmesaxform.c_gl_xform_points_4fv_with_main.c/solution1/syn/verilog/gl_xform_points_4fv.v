// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gl_xform_points_4fv,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.963700,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=2138,HLS_SYN_LUT=2706,HLS_VERSION=2019_1}" *)

module gl_xform_points_4fv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        q_address0,
        q_ce0,
        q_we0,
        q_d0,
        q_address1,
        q_ce1,
        q_we1,
        q_d1,
        m_address0,
        m_ce0,
        m_q0,
        m_address1,
        m_ce1,
        m_q1,
        p_address0,
        p_ce0,
        p_q0,
        p_address1,
        p_ce1,
        p_q1
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] n;
output  [10:0] q_address0;
output   q_ce0;
output   q_we0;
output  [31:0] q_d0;
output  [10:0] q_address1;
output   q_ce1;
output   q_we1;
output  [31:0] q_d1;
output  [3:0] m_address0;
output   m_ce0;
input  [31:0] m_q0;
output  [3:0] m_address1;
output   m_ce1;
input  [31:0] m_q1;
output  [10:0] p_address0;
output   p_ce0;
input  [31:0] p_q0;
output  [10:0] p_address1;
output   p_ce1;
input  [31:0] p_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] q_address0;
reg q_ce0;
reg q_we0;
reg[31:0] q_d0;
reg[10:0] q_address1;
reg q_ce1;
reg q_we1;
reg[31:0] q_d1;
reg[3:0] m_address0;
reg m_ce0;
reg[3:0] m_address1;
reg m_ce1;
reg[10:0] p_address0;
reg p_ce0;
reg[10:0] p_address1;
reg p_ce1;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_515;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state37;
reg   [31:0] reg_522;
reg   [31:0] reg_529;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state38;
reg   [31:0] reg_536;
reg   [31:0] reg_542;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state39;
reg   [31:0] reg_547;
reg   [31:0] reg_553;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state40;
reg   [31:0] reg_559;
reg   [31:0] reg_565;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state63;
reg   [31:0] reg_573;
reg   [31:0] reg_580;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state60;
wire   [31:0] grp_fu_479_p2;
reg   [31:0] reg_587;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_483_p2;
reg   [31:0] reg_593;
wire   [31:0] grp_fu_487_p2;
reg   [31:0] reg_599;
wire   [31:0] grp_fu_491_p2;
reg   [31:0] reg_604;
reg   [31:0] reg_609;
reg   [31:0] reg_614;
wire   [31:0] grp_fu_471_p2;
reg   [31:0] reg_619;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state74;
wire   [31:0] grp_fu_475_p2;
reg   [31:0] reg_626;
wire   [0:0] and_ln28_fu_716_p2;
reg   [0:0] and_ln28_reg_1241;
reg   [10:0] q_addr_2_reg_1245;
wire    ap_CS_fsm_state6;
reg   [10:0] q_addr_3_reg_1250;
reg   [10:0] p_addr_5_reg_1265;
reg   [10:0] p_addr_6_reg_1270;
wire   [10:0] i_2_fu_791_p2;
reg   [10:0] i_2_reg_1278;
reg   [10:0] q_addr_reg_1283;
reg   [10:0] q_addr_1_reg_1288;
reg   [10:0] p_addr_2_reg_1303;
wire   [10:0] i_fu_851_p2;
reg   [10:0] i_reg_1311;
wire   [0:0] icmp_ln30_fu_846_p2;
wire   [0:0] icmp_ln38_fu_786_p2;
wire   [0:0] and_ln49_2_fu_1037_p2;
reg   [0:0] and_ln49_2_reg_1356;
reg   [10:0] q_addr_6_reg_1360;
wire    ap_CS_fsm_state41;
reg   [10:0] q_addr_7_reg_1365;
reg   [10:0] p_addr_13_reg_1380;
reg   [10:0] p_addr_14_reg_1385;
wire   [10:0] i_4_fu_1112_p2;
reg   [10:0] i_4_reg_1393;
reg   [10:0] q_addr_4_reg_1398;
reg   [10:0] q_addr_5_reg_1403;
reg   [10:0] p_addr_9_reg_1418;
reg   [10:0] p_addr_10_reg_1423;
wire   [10:0] i_3_fu_1187_p2;
reg   [10:0] i_3_reg_1431;
reg   [10:0] i_1_reg_427;
wire    ap_CS_fsm_state23;
reg   [10:0] i_0_reg_438;
wire    ap_CS_fsm_state36;
reg   [10:0] i4_1_reg_449;
wire    ap_CS_fsm_state58;
reg   [10:0] i4_0_reg_460;
wire    ap_CS_fsm_state75;
wire   [63:0] zext_ln40_fu_734_p1;
wire   [63:0] tmp_60_fu_746_p3;
wire   [63:0] tmp_61_fu_762_p3;
wire   [63:0] tmp_62_fu_777_p3;
wire   [63:0] zext_ln32_fu_809_p1;
wire   [63:0] tmp_57_fu_821_p3;
wire   [63:0] tmp_58_fu_837_p3;
wire   [63:0] tmp_68_fu_1066_p3;
wire   [63:0] tmp_69_fu_1082_p3;
wire   [63:0] zext_ln61_fu_1055_p1;
wire   [63:0] tmp_70_fu_1098_p3;
wire   [63:0] tmp_64_fu_1141_p3;
wire   [63:0] tmp_65_fu_1157_p3;
wire   [63:0] zext_ln53_fu_1130_p1;
wire   [63:0] tmp_66_fu_1173_p3;
wire   [0:0] icmp_ln59_fu_1107_p2;
wire   [0:0] icmp_ln51_fu_1182_p2;
reg   [31:0] grp_fu_471_p0;
reg   [31:0] grp_fu_471_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state71;
reg   [31:0] grp_fu_475_p0;
reg   [31:0] grp_fu_475_p1;
reg   [31:0] grp_fu_479_p0;
reg   [31:0] grp_fu_479_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state64;
reg   [31:0] grp_fu_483_p0;
reg   [31:0] grp_fu_483_p1;
reg   [31:0] grp_fu_487_p0;
reg   [31:0] grp_fu_491_p0;
wire   [31:0] bitcast_ln28_fu_632_p1;
wire   [7:0] tmp_fu_636_p4;
wire   [22:0] trunc_ln28_fu_646_p1;
wire   [0:0] icmp_ln28_1_fu_656_p2;
wire   [0:0] icmp_ln28_fu_650_p2;
wire   [0:0] or_ln28_fu_662_p2;
wire   [0:0] grp_fu_495_p2;
wire   [31:0] bitcast_ln28_1_fu_674_p1;
wire   [7:0] tmp_25_fu_678_p4;
wire   [22:0] trunc_ln28_1_fu_688_p1;
wire   [0:0] icmp_ln28_3_fu_698_p2;
wire   [0:0] icmp_ln28_2_fu_692_p2;
wire   [0:0] or_ln28_1_fu_704_p2;
wire   [0:0] grp_fu_500_p2;
wire   [0:0] and_ln28_1_fu_668_p2;
wire   [0:0] and_ln28_2_fu_710_p2;
wire   [12:0] tmp_59_fu_726_p3;
wire   [12:0] or_ln41_fu_740_p2;
wire   [12:0] or_ln39_fu_756_p2;
wire   [12:0] or_ln39_1_fu_771_p2;
wire   [63:0] zext_ln38_fu_722_p1;
wire   [12:0] tmp_56_fu_801_p3;
wire   [12:0] or_ln33_fu_815_p2;
wire   [12:0] or_ln31_fu_831_p2;
wire   [63:0] zext_ln30_fu_797_p1;
wire   [31:0] bitcast_ln49_fu_857_p1;
wire   [7:0] tmp_27_fu_861_p4;
wire   [22:0] trunc_ln49_fu_871_p1;
wire   [0:0] icmp_ln49_1_fu_881_p2;
wire   [0:0] icmp_ln49_fu_875_p2;
wire   [0:0] or_ln49_fu_887_p2;
wire   [31:0] bitcast_ln49_1_fu_899_p1;
wire   [7:0] tmp_50_fu_903_p4;
wire   [22:0] trunc_ln49_1_fu_913_p1;
wire   [0:0] icmp_ln49_3_fu_923_p2;
wire   [0:0] icmp_ln49_2_fu_917_p2;
wire   [0:0] or_ln49_1_fu_929_p2;
wire   [31:0] bitcast_ln49_2_fu_941_p1;
wire   [7:0] tmp_52_fu_945_p4;
wire   [22:0] trunc_ln49_2_fu_955_p1;
wire   [0:0] icmp_ln49_5_fu_965_p2;
wire   [0:0] icmp_ln49_4_fu_959_p2;
wire   [0:0] or_ln49_2_fu_971_p2;
wire   [0:0] grp_fu_505_p2;
wire   [31:0] bitcast_ln49_3_fu_983_p1;
wire   [7:0] tmp_54_fu_987_p4;
wire   [22:0] trunc_ln49_3_fu_997_p1;
wire   [0:0] icmp_ln49_7_fu_1007_p2;
wire   [0:0] icmp_ln49_6_fu_1001_p2;
wire   [0:0] or_ln49_3_fu_1013_p2;
wire   [0:0] grp_fu_510_p2;
wire   [0:0] and_ln49_fu_893_p2;
wire   [0:0] and_ln49_1_fu_935_p2;
wire   [0:0] and_ln49_3_fu_977_p2;
wire   [0:0] and_ln49_4_fu_1019_p2;
wire   [0:0] and_ln49_6_fu_1031_p2;
wire   [0:0] and_ln49_5_fu_1025_p2;
wire   [12:0] tmp_67_fu_1047_p3;
wire   [12:0] or_ln61_fu_1060_p2;
wire   [12:0] or_ln62_fu_1076_p2;
wire   [12:0] or_ln60_fu_1092_p2;
wire   [63:0] zext_ln59_fu_1043_p1;
wire   [12:0] tmp_63_fu_1122_p3;
wire   [12:0] or_ln53_fu_1135_p2;
wire   [12:0] or_ln54_fu_1151_p2;
wire   [12:0] or_ln52_fu_1167_p2;
wire   [63:0] zext_ln51_fu_1118_p1;
reg   [74:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
end

gl_xform_points_4fv_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_471_p0),
    .din1(grp_fu_471_p1),
    .ce(1'b1),
    .dout(grp_fu_471_p2)
);

gl_xform_points_4fv_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fadd_32ns_32ns_32_4_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_475_p0),
    .din1(grp_fu_475_p1),
    .ce(1'b1),
    .dout(grp_fu_475_p2)
);

gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_479_p0),
    .din1(grp_fu_479_p1),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_483_p0),
    .din1(grp_fu_483_p1),
    .ce(1'b1),
    .dout(grp_fu_483_p2)
);

gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_487_p0),
    .din1(reg_565),
    .ce(1'b1),
    .dout(grp_fu_487_p2)
);

gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gl_xform_points_4fv_fmul_32ns_32ns_32_3_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_491_p0),
    .din1(reg_573),
    .ce(1'b1),
    .dout(grp_fu_491_p2)
);

gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_515),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_495_p2)
);

gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_522),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_500_p2)
);

gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_529),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_505_p2)
);

gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gl_xform_points_4fv_fcmp_32ns_32ns_1_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_536),
    .din1(32'd1065353216),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_510_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln49_2_fu_1037_p2) & (1'b1 == ap_CS_fsm_state40))) begin
        i4_0_reg_460 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        i4_0_reg_460 <= i_3_reg_1431;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln49_2_fu_1037_p2) & (1'b1 == ap_CS_fsm_state40))) begin
        i4_1_reg_449 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        i4_1_reg_449 <= i_4_reg_1393;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln28_fu_716_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_438 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_0_reg_438 <= i_reg_1311;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln28_fu_716_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_427 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_1_reg_427 <= i_2_reg_1278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_565 <= p_q1;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_565 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_573 <= p_q0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_573 <= p_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_580 <= p_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_580 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        and_ln28_reg_1241 <= and_ln28_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        and_ln49_2_reg_1356 <= and_ln49_2_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        i_2_reg_1278 <= i_2_fu_791_p2;
        p_addr_5_reg_1265[10 : 2] <= tmp_61_fu_762_p3[10 : 2];
        p_addr_6_reg_1270[10 : 2] <= tmp_62_fu_777_p3[10 : 2];
        q_addr_2_reg_1245[10 : 2] <= zext_ln40_fu_734_p1[10 : 2];
        q_addr_3_reg_1250[10 : 2] <= tmp_60_fu_746_p3[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41))) begin
        i_3_reg_1431 <= i_3_fu_1187_p2;
        p_addr_10_reg_1423[10 : 2] <= tmp_65_fu_1157_p3[10 : 2];
        p_addr_9_reg_1418[10 : 2] <= tmp_64_fu_1141_p3[10 : 2];
        q_addr_4_reg_1398[10 : 2] <= tmp_64_fu_1141_p3[10 : 2];
        q_addr_5_reg_1403[10 : 2] <= tmp_65_fu_1157_p3[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41))) begin
        i_4_reg_1393 <= i_4_fu_1112_p2;
        p_addr_13_reg_1380[10 : 2] <= tmp_68_fu_1066_p3[10 : 2];
        p_addr_14_reg_1385[10 : 2] <= tmp_69_fu_1082_p3[10 : 2];
        q_addr_6_reg_1360[10 : 2] <= tmp_68_fu_1066_p3[10 : 2];
        q_addr_7_reg_1365[10 : 2] <= tmp_69_fu_1082_p3[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_1311 <= i_fu_851_p2;
        p_addr_2_reg_1303[10 : 2] <= tmp_58_fu_837_p3[10 : 2];
        q_addr_1_reg_1288[10 : 2] <= tmp_57_fu_821_p3[10 : 2];
        q_addr_reg_1283[10 : 2] <= zext_ln32_fu_809_p1[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_515 <= m_q0;
        reg_522 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_529 <= m_q0;
        reg_536 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_542 <= m_q0;
        reg_547 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_553 <= m_q0;
        reg_559 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_587 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_593 <= grp_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_599 <= grp_fu_487_p2;
        reg_604 <= grp_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_609 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_614 <= grp_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_619 <= grp_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_626 <= grp_fu_475_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (((icmp_ln51_fu_1182_p2 == 1'd1) & (1'd1 == and_ln49_2_reg_1356)) | ((icmp_ln59_fu_1107_p2 == 1'd1) & (1'd0 == and_ln49_2_reg_1356))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) & (((icmp_ln51_fu_1182_p2 == 1'd1) & (1'd1 == and_ln49_2_reg_1356)) | ((icmp_ln59_fu_1107_p2 == 1'd1) & (1'd0 == and_ln49_2_reg_1356))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_471_p0 = reg_619;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_471_p0 = reg_587;
    end else begin
        grp_fu_471_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_471_p1 = reg_609;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_471_p1 = reg_587;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_471_p1 = reg_593;
    end else begin
        grp_fu_471_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_475_p0 = reg_626;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_475_p0 = reg_599;
    end else begin
        grp_fu_475_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_475_p1 = reg_614;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_475_p1 = reg_593;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_475_p1 = reg_604;
    end else begin
        grp_fu_475_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_479_p0 = reg_553;
    end else if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_479_p0 = reg_559;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_479_p0 = reg_542;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_479_p0 = reg_515;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_479_p0 = reg_529;
    end else begin
        grp_fu_479_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_479_p1 = reg_580;
    end else if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_479_p1 = reg_565;
    end else begin
        grp_fu_479_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_483_p0 = reg_529;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_483_p0 = reg_547;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_483_p0 = reg_559;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_483_p0 = reg_522;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_483_p0 = reg_536;
    end else begin
        grp_fu_483_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_483_p1 = reg_565;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_483_p1 = reg_580;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_483_p1 = reg_573;
    end else begin
        grp_fu_483_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_487_p0 = reg_515;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_487_p0 = reg_547;
    end else begin
        grp_fu_487_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_491_p0 = reg_522;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_491_p0 = reg_553;
    end else begin
        grp_fu_491_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        m_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        m_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        m_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_address0 = 64'd12;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        m_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        m_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        m_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_address1 = 64'd13;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        p_address0 = p_addr_9_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        p_address0 = p_addr_13_reg_1380;
    end else if (((1'd1 == and_ln49_2_reg_1356) & (icmp_ln51_fu_1182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        p_address0 = tmp_66_fu_1173_p3;
    end else if (((icmp_ln59_fu_1107_p2 == 1'd0) & (1'd0 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41))) begin
        p_address0 = tmp_70_fu_1098_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        p_address0 = p_addr_2_reg_1303;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_address0 = p_addr_6_reg_1270;
    end else if (((icmp_ln30_fu_846_p2 == 1'd0) & (1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        p_address0 = zext_ln32_fu_809_p1;
    end else if (((icmp_ln38_fu_786_p2 == 1'd0) & (1'd0 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        p_address0 = zext_ln40_fu_734_p1;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        p_address1 = p_addr_10_reg_1423;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        p_address1 = p_addr_14_reg_1385;
    end else if (((1'd1 == and_ln49_2_reg_1356) & (icmp_ln51_fu_1182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        p_address1 = zext_ln53_fu_1130_p1;
    end else if (((icmp_ln59_fu_1107_p2 == 1'd0) & (1'd0 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41))) begin
        p_address1 = zext_ln61_fu_1055_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_address1 = p_addr_5_reg_1265;
    end else if (((icmp_ln30_fu_846_p2 == 1'd0) & (1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        p_address1 = tmp_57_fu_821_p3;
    end else if (((icmp_ln38_fu_786_p2 == 1'd0) & (1'd0 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
        p_address1 = tmp_60_fu_746_p3;
    end else begin
        p_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state7) | ((1'd1 == and_ln49_2_reg_1356) & (icmp_ln51_fu_1182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((icmp_ln59_fu_1107_p2 == 1'd0) & (1'd0 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41)) | ((icmp_ln30_fu_846_p2 == 1'd0) & (1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln38_fu_786_p2 == 1'd0) & (1'd0 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6)))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state42) | ((1'd1 == and_ln49_2_reg_1356) & (icmp_ln51_fu_1182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((icmp_ln59_fu_1107_p2 == 1'd0) & (1'd0 == and_ln49_2_reg_1356) & (1'b1 == ap_CS_fsm_state41)) | ((icmp_ln30_fu_846_p2 == 1'd0) & (1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln38_fu_786_p2 == 1'd0) & (1'd0 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6)))) begin
        p_ce1 = 1'b1;
    end else begin
        p_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        q_address0 = q_addr_5_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        q_address0 = q_addr_6_reg_1360;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        q_address0 = q_addr_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        q_address0 = q_addr_2_reg_1245;
    end else begin
        q_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        q_address1 = q_addr_4_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        q_address1 = q_addr_7_reg_1365;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        q_address1 = q_addr_1_reg_1288;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        q_address1 = q_addr_3_reg_1250;
    end else begin
        q_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state60))) begin
        q_ce0 = 1'b1;
    end else begin
        q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23))) begin
        q_ce1 = 1'b1;
    end else begin
        q_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        q_d0 = p_q1;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23))) begin
        q_d0 = reg_619;
    end else begin
        q_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        q_d1 = reg_619;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23))) begin
        q_d1 = reg_626;
    end else begin
        q_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state60))) begin
        q_we0 = 1'b1;
    end else begin
        q_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23))) begin
        q_we1 = 1'b1;
    end else begin
        q_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln30_fu_846_p2 == 1'd0) & (1'd1 == and_ln28_reg_1241) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln30_fu_846_p2 == 1'd1) & (1'd1 == and_ln28_reg_1241)) | ((icmp_ln38_fu_786_p2 == 1'd1) & (1'd0 == and_ln28_reg_1241))))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (((icmp_ln51_fu_1182_p2 == 1'd1) & (1'd1 == and_ln49_2_reg_1356)) | ((icmp_ln59_fu_1107_p2 == 1'd1) & (1'd0 == and_ln49_2_reg_1356))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'd1 == and_ln49_2_reg_1356) & (icmp_ln51_fu_1182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln28_1_fu_668_p2 = (or_ln28_fu_662_p2 & grp_fu_495_p2);

assign and_ln28_2_fu_710_p2 = (or_ln28_1_fu_704_p2 & grp_fu_500_p2);

assign and_ln28_fu_716_p2 = (and_ln28_2_fu_710_p2 & and_ln28_1_fu_668_p2);

assign and_ln49_1_fu_935_p2 = (or_ln49_1_fu_929_p2 & grp_fu_500_p2);

assign and_ln49_2_fu_1037_p2 = (and_ln49_6_fu_1031_p2 & and_ln49_5_fu_1025_p2);

assign and_ln49_3_fu_977_p2 = (or_ln49_2_fu_971_p2 & grp_fu_505_p2);

assign and_ln49_4_fu_1019_p2 = (or_ln49_3_fu_1013_p2 & grp_fu_510_p2);

assign and_ln49_5_fu_1025_p2 = (and_ln49_fu_893_p2 & and_ln49_1_fu_935_p2);

assign and_ln49_6_fu_1031_p2 = (and_ln49_4_fu_1019_p2 & and_ln49_3_fu_977_p2);

assign and_ln49_fu_893_p2 = (or_ln49_fu_887_p2 & grp_fu_495_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln28_1_fu_674_p1 = reg_522;

assign bitcast_ln28_fu_632_p1 = reg_515;

assign bitcast_ln49_1_fu_899_p1 = reg_522;

assign bitcast_ln49_2_fu_941_p1 = reg_529;

assign bitcast_ln49_3_fu_983_p1 = reg_536;

assign bitcast_ln49_fu_857_p1 = reg_515;

assign i_2_fu_791_p2 = (i_1_reg_427 + 11'd1);

assign i_3_fu_1187_p2 = (i4_0_reg_460 + 11'd1);

assign i_4_fu_1112_p2 = (i4_1_reg_449 + 11'd1);

assign i_fu_851_p2 = (i_0_reg_438 + 11'd1);

assign icmp_ln28_1_fu_656_p2 = ((trunc_ln28_fu_646_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_692_p2 = ((tmp_25_fu_678_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_698_p2 = ((trunc_ln28_1_fu_688_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_650_p2 = ((tmp_fu_636_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_846_p2 = ((zext_ln30_fu_797_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_786_p2 = ((zext_ln38_fu_722_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_881_p2 = ((trunc_ln49_fu_871_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_917_p2 = ((tmp_50_fu_903_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_3_fu_923_p2 = ((trunc_ln49_1_fu_913_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_4_fu_959_p2 = ((tmp_52_fu_945_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_5_fu_965_p2 = ((trunc_ln49_2_fu_955_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_6_fu_1001_p2 = ((tmp_54_fu_987_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln49_7_fu_1007_p2 = ((trunc_ln49_3_fu_997_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_875_p2 = ((tmp_27_fu_861_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1182_p2 = ((zext_ln51_fu_1118_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1107_p2 = ((zext_ln59_fu_1043_p1 == n) ? 1'b1 : 1'b0);

assign or_ln28_1_fu_704_p2 = (icmp_ln28_3_fu_698_p2 | icmp_ln28_2_fu_692_p2);

assign or_ln28_fu_662_p2 = (icmp_ln28_fu_650_p2 | icmp_ln28_1_fu_656_p2);

assign or_ln31_fu_831_p2 = (tmp_56_fu_801_p3 | 13'd2);

assign or_ln33_fu_815_p2 = (tmp_56_fu_801_p3 | 13'd1);

assign or_ln39_1_fu_771_p2 = (tmp_59_fu_726_p3 | 13'd3);

assign or_ln39_fu_756_p2 = (tmp_59_fu_726_p3 | 13'd2);

assign or_ln41_fu_740_p2 = (tmp_59_fu_726_p3 | 13'd1);

assign or_ln49_1_fu_929_p2 = (icmp_ln49_3_fu_923_p2 | icmp_ln49_2_fu_917_p2);

assign or_ln49_2_fu_971_p2 = (icmp_ln49_5_fu_965_p2 | icmp_ln49_4_fu_959_p2);

assign or_ln49_3_fu_1013_p2 = (icmp_ln49_7_fu_1007_p2 | icmp_ln49_6_fu_1001_p2);

assign or_ln49_fu_887_p2 = (icmp_ln49_fu_875_p2 | icmp_ln49_1_fu_881_p2);

assign or_ln52_fu_1167_p2 = (tmp_63_fu_1122_p3 | 13'd1);

assign or_ln53_fu_1135_p2 = (tmp_63_fu_1122_p3 | 13'd2);

assign or_ln54_fu_1151_p2 = (tmp_63_fu_1122_p3 | 13'd3);

assign or_ln60_fu_1092_p2 = (tmp_67_fu_1047_p3 | 13'd1);

assign or_ln61_fu_1060_p2 = (tmp_67_fu_1047_p3 | 13'd2);

assign or_ln62_fu_1076_p2 = (tmp_67_fu_1047_p3 | 13'd3);

assign tmp_25_fu_678_p4 = {{bitcast_ln28_1_fu_674_p1[30:23]}};

assign tmp_27_fu_861_p4 = {{bitcast_ln49_fu_857_p1[30:23]}};

assign tmp_50_fu_903_p4 = {{bitcast_ln49_1_fu_899_p1[30:23]}};

assign tmp_52_fu_945_p4 = {{bitcast_ln49_2_fu_941_p1[30:23]}};

assign tmp_54_fu_987_p4 = {{bitcast_ln49_3_fu_983_p1[30:23]}};

assign tmp_56_fu_801_p3 = {{i_0_reg_438}, {2'd0}};

assign tmp_57_fu_821_p3 = {{51'd0}, {or_ln33_fu_815_p2}};

assign tmp_58_fu_837_p3 = {{51'd0}, {or_ln31_fu_831_p2}};

assign tmp_59_fu_726_p3 = {{i_1_reg_427}, {2'd0}};

assign tmp_60_fu_746_p3 = {{51'd0}, {or_ln41_fu_740_p2}};

assign tmp_61_fu_762_p3 = {{51'd0}, {or_ln39_fu_756_p2}};

assign tmp_62_fu_777_p3 = {{51'd0}, {or_ln39_1_fu_771_p2}};

assign tmp_63_fu_1122_p3 = {{i4_0_reg_460}, {2'd0}};

assign tmp_64_fu_1141_p3 = {{51'd0}, {or_ln53_fu_1135_p2}};

assign tmp_65_fu_1157_p3 = {{51'd0}, {or_ln54_fu_1151_p2}};

assign tmp_66_fu_1173_p3 = {{51'd0}, {or_ln52_fu_1167_p2}};

assign tmp_67_fu_1047_p3 = {{i4_1_reg_449}, {2'd0}};

assign tmp_68_fu_1066_p3 = {{51'd0}, {or_ln61_fu_1060_p2}};

assign tmp_69_fu_1082_p3 = {{51'd0}, {or_ln62_fu_1076_p2}};

assign tmp_70_fu_1098_p3 = {{51'd0}, {or_ln60_fu_1092_p2}};

assign tmp_fu_636_p4 = {{bitcast_ln28_fu_632_p1[30:23]}};

assign trunc_ln28_1_fu_688_p1 = bitcast_ln28_1_fu_674_p1[22:0];

assign trunc_ln28_fu_646_p1 = bitcast_ln28_fu_632_p1[22:0];

assign trunc_ln49_1_fu_913_p1 = bitcast_ln49_1_fu_899_p1[22:0];

assign trunc_ln49_2_fu_955_p1 = bitcast_ln49_2_fu_941_p1[22:0];

assign trunc_ln49_3_fu_997_p1 = bitcast_ln49_3_fu_983_p1[22:0];

assign trunc_ln49_fu_871_p1 = bitcast_ln49_fu_857_p1[22:0];

assign zext_ln30_fu_797_p1 = i_0_reg_438;

assign zext_ln32_fu_809_p1 = tmp_56_fu_801_p3;

assign zext_ln38_fu_722_p1 = i_1_reg_427;

assign zext_ln40_fu_734_p1 = tmp_59_fu_726_p3;

assign zext_ln51_fu_1118_p1 = i4_0_reg_460;

assign zext_ln53_fu_1130_p1 = tmp_63_fu_1122_p3;

assign zext_ln59_fu_1043_p1 = i4_1_reg_449;

assign zext_ln61_fu_1055_p1 = tmp_67_fu_1047_p3;

always @ (posedge ap_clk) begin
    q_addr_2_reg_1245[1:0] <= 2'b00;
    q_addr_3_reg_1250[1:0] <= 2'b01;
    p_addr_5_reg_1265[1:0] <= 2'b10;
    p_addr_6_reg_1270[1:0] <= 2'b11;
    q_addr_reg_1283[1:0] <= 2'b00;
    q_addr_1_reg_1288[1:0] <= 2'b01;
    p_addr_2_reg_1303[1:0] <= 2'b10;
    q_addr_6_reg_1360[1:0] <= 2'b10;
    q_addr_7_reg_1365[1:0] <= 2'b11;
    p_addr_13_reg_1380[1:0] <= 2'b10;
    p_addr_14_reg_1385[1:0] <= 2'b11;
    q_addr_4_reg_1398[1:0] <= 2'b10;
    q_addr_5_reg_1403[1:0] <= 2'b11;
    p_addr_9_reg_1418[1:0] <= 2'b10;
    p_addr_10_reg_1423[1:0] <= 2'b11;
end

endmodule //gl_xform_points_4fv
