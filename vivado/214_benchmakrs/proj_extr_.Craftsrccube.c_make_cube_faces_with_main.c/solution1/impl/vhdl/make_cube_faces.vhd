-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity make_cube_faces is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ao_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ao_ce0 : OUT STD_LOGIC;
    ao_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ao_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ao_ce1 : OUT STD_LOGIC;
    ao_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    light_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    light_ce0 : OUT STD_LOGIC;
    light_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    left_r : IN STD_LOGIC_VECTOR (31 downto 0);
    right_r : IN STD_LOGIC_VECTOR (31 downto 0);
    top : IN STD_LOGIC_VECTOR (31 downto 0);
    bottom : IN STD_LOGIC_VECTOR (31 downto 0);
    front : IN STD_LOGIC_VECTOR (31 downto 0);
    back : IN STD_LOGIC_VECTOR (31 downto 0);
    wleft : IN STD_LOGIC_VECTOR (31 downto 0);
    wright : IN STD_LOGIC_VECTOR (31 downto 0);
    wtop : IN STD_LOGIC_VECTOR (31 downto 0);
    wbottom : IN STD_LOGIC_VECTOR (31 downto 0);
    wfront : IN STD_LOGIC_VECTOR (31 downto 0);
    wback : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    z : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of make_cube_faces is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "make_cube_faces,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.348000,HLS_SYN_LAT=441,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=15,HLS_SYN_FF=2832,HLS_SYN_LUT=4438,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv64_7227278D4E1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000011100100010011100100111100011010100111000011011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3A000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111010000000000000000000000000";
    constant ap_const_lv32_3D7E0000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101011111100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal normals_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal normals_0_ce0 : STD_LOGIC;
    signal normals_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal normals_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal normals_1_ce0 : STD_LOGIC;
    signal normals_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal normals_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal normals_2_ce0 : STD_LOGIC;
    signal normals_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flipped_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal flipped_ce0 : STD_LOGIC;
    signal flipped_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indices_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal indices_ce0 : STD_LOGIC;
    signal indices_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal positions_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal positions_ce0 : STD_LOGIC;
    signal positions_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal positions_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal positions_ce1 : STD_LOGIC;
    signal positions_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal positions_address2 : STD_LOGIC_VECTOR (6 downto 0);
    signal positions_ce2 : STD_LOGIC;
    signal positions_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal uvs_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal uvs_ce0 : STD_LOGIC;
    signal uvs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal uvs_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal uvs_ce1 : STD_LOGIC;
    signal uvs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_812_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1707 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln61_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_reg_1712 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln60_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_847_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln68_reg_1725 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln66_fu_866_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln66_reg_1730 : STD_LOGIC_VECTOR (32 downto 0);
    signal ao_addr_2_reg_1745 : STD_LOGIC_VECTOR (4 downto 0);
    signal ao_addr_3_reg_1750 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln61_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln64_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln65_fu_1007_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln65_reg_1769 : STD_LOGIC_VECTOR (28 downto 0);
    signal ao_load_reg_1774 : STD_LOGIC_VECTOR (31 downto 0);
    signal ao_load_1_reg_1779 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ao_load_2_reg_1789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ao_load_3_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln66_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1815 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln66_1_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_1820 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_2_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_2_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_3_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_3_reg_1830 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal du_reg_1850 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dv_reg_1855 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln66_1_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_1_reg_1860 : STD_LOGIC_VECTOR (0 downto 0);
    signal normals_0_load_reg_1865 : STD_LOGIC_VECTOR (31 downto 0);
    signal normals_1_load_reg_1870 : STD_LOGIC_VECTOR (31 downto 0);
    signal normals_2_load_reg_1875 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_1101_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_reg_1880 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln60_fu_1107_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln60_reg_1885 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_fu_1111_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_reg_1891 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln71_fu_1117_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln71_reg_1896 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_fu_1123_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_reg_1901 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_fu_1129_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_reg_1906 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_fu_1135_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_reg_1911 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_fu_1141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_reg_1916 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_fu_1147_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_reg_1921 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_fu_1153_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_reg_1926 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_addr_reg_1931 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal v_fu_1179_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal v_reg_1939 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln67_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_1210_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln69_reg_1954 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_1_fu_1215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_1_reg_1959 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln71_1_fu_1220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln71_1_reg_1964 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_1_fu_1225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_1_reg_1969 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_1_fu_1230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln73_1_reg_1974 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_1_fu_1235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_1_reg_1979 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_1_fu_1240_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_1_reg_1984 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_1_fu_1245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_1_reg_1989 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_1_fu_1250_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_1_reg_1994 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln78_fu_1255_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln78_reg_1999 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_fu_1265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_reg_2004 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln69_1_fu_1419_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln69_1_reg_2009 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln69_fu_1424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_reg_2015 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_1_fu_1428_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln69_1_reg_2020 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal positions_load_reg_2040 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal positions_load_1_reg_2045 : STD_LOGIC_VECTOR (31 downto 0);
    signal positions_load_2_reg_2050 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_2055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_7_reg_2060 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_2065 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2070 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln75_2_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_2_reg_2085 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_2_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_2_reg_2090 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_1560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_2095 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln75_1_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_reg_2100 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2105 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_2110 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_1615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal select_ln76_fu_1633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal light_load_reg_2135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal faces_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal faces_ce0 : STD_LOGIC;
    signal faces_we0 : STD_LOGIC;
    signal faces_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal faces_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal faces_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal faces_ce1 : STD_LOGIC;
    signal faces_we1 : STD_LOGIC;
    signal faces_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tiles_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tiles_ce0 : STD_LOGIC;
    signal tiles_we0 : STD_LOGIC;
    signal tiles_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tiles_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tiles_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tiles_ce1 : STD_LOGIC;
    signal tiles_we1 : STD_LOGIC;
    signal tiles_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_720 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_1_rec_reg_732 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal v_0_reg_743 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln69_2_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_876_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_891_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_906_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_0_idx9_cast_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_3_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_1455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_1466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_1478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln76_1_fu_1483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_1_fu_1538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_1602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_1642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln72_fu_1646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln73_fu_1650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_1654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sext_ln69_1_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_1663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_1667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_1671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_0_idx_fu_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_754_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_758_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_766_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_771_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_783_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_823_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_835_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_fu_831_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln68_1_fu_843_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_853_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_2_fu_870_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_3_fu_885_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_4_fu_900_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln64_fu_929_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln64_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_1_fu_947_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t_fu_951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_921_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln64_1_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_973_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln65_fu_983_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_24_fu_993_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln65_fu_987_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln65_1_fu_1003_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal bitcast_ln66_fu_1019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln66_1_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1023_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_fu_1033_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_fu_1040_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_1_fu_1050_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln66_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_1_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_1_rec_cast_fu_1159_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal d_0_idx9_fu_1163_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln68_2_fu_1185_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_fu_1189_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln69_fu_1200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln69_fu_1206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_s_fu_1272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_1293_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_1297_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_1283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_1311_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_1315_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1339_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_1347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_1351_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_1307_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_1355_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1359_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_27_fu_1371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1365_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_1379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1383_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_1393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_1_fu_1401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_fu_1407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln69_fu_1415_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl2_cast_fu_1432_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln69_fu_1439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_2_fu_1449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_2_fu_1460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1471_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal lshr_ln75_fu_1490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln75_1_fu_1496_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1500_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln76_fu_1514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln76_1_fu_1520_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1524_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln75_fu_1542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1546_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_fu_1556_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln76_fu_1572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1576_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_1586_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln75_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_1610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_1628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_sitofp_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_sitofp_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component make_cube_faces_normals_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_normals_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_normals_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_flipped IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_indices IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_positions IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_uvs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_cube_faces_faces IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    normals_0_U : component make_cube_faces_normals_0
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => normals_0_address0,
        ce0 => normals_0_ce0,
        q0 => normals_0_q0);

    normals_1_U : component make_cube_faces_normals_1
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => normals_1_address0,
        ce0 => normals_1_ce0,
        q0 => normals_1_q0);

    normals_2_U : component make_cube_faces_normals_2
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => normals_2_address0,
        ce0 => normals_2_ce0,
        q0 => normals_2_q0);

    flipped_U : component make_cube_faces_flipped
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flipped_address0,
        ce0 => flipped_ce0,
        q0 => flipped_q0);

    indices_U : component make_cube_faces_indices
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indices_address0,
        ce0 => indices_ce0,
        q0 => indices_q0);

    positions_U : component make_cube_faces_positions
    generic map (
        DataWidth => 32,
        AddressRange => 72,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => positions_address0,
        ce0 => positions_ce0,
        q0 => positions_q0,
        address1 => positions_address1,
        ce1 => positions_ce1,
        q1 => positions_q1,
        address2 => positions_address2,
        ce2 => positions_ce2,
        q2 => positions_q2);

    uvs_U : component make_cube_faces_uvs
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => uvs_address0,
        ce0 => uvs_ce0,
        q0 => uvs_q0,
        address1 => uvs_address1,
        ce1 => uvs_ce1,
        q1 => uvs_q1);

    faces_U : component make_cube_faces_faces
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => faces_address0,
        ce0 => faces_ce0,
        we0 => faces_we0,
        d0 => faces_d0,
        q0 => faces_q0,
        address1 => faces_address1,
        ce1 => faces_ce1,
        we1 => faces_we1,
        d1 => faces_d1);

    tiles_U : component make_cube_faces_faces
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tiles_address0,
        ce0 => tiles_ce0,
        we0 => tiles_we0,
        d0 => tiles_d0,
        q0 => tiles_q0,
        address1 => tiles_address1,
        ce1 => tiles_ce1,
        we1 => tiles_we1,
        d1 => tiles_d1);

    make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U1 : component make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_754_p0,
        din1 => grp_fu_754_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_754_p2);

    make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U2 : component make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_758_p0,
        din1 => grp_fu_758_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p2);

    make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U3 : component make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_2065,
        din1 => z,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p2);

    make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U4 : component make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_766_p0,
        din1 => grp_fu_766_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_766_p2);

    make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U5 : component make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_771_p0,
        din1 => grp_fu_771_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_771_p2);

    make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U6 : component make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => positions_load_2_reg_2050,
        din1 => n,
        ce => ap_const_logic_1,
        dout => grp_fu_776_p2);

    make_cube_faces_sitofp_32ns_32_4_1_U7 : component make_cube_faces_sitofp_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln64_reg_1764,
        ce => ap_const_logic_1,
        dout => grp_fu_780_p1);

    make_cube_faces_sitofp_32s_32_4_1_U8 : component make_cube_faces_sitofp_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_783_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_783_p1);

    make_cube_faces_fcmp_32ns_32ns_1_2_1_U9 : component make_cube_faces_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_790,
        din1 => tmp_3_reg_1809,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_786_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_0_idx_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_1173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln61_reg_1755 = ap_const_lv1_0))) then 
                d_0_idx_fu_196 <= add_ln67_reg_1880;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_0_idx_fu_196 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    d_1_rec_reg_732_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                d_1_rec_reg_732 <= add_ln78_reg_1999;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_1_rec_reg_732 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_720_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln67_fu_1173_p2 = ap_const_lv1_1) or (icmp_ln61_reg_1755 = ap_const_lv1_1)))) then 
                i_0_reg_720 <= i_reg_1707;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_720 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    v_0_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                v_0_reg_743 <= v_reg_1939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                v_0_reg_743 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln67_reg_1880 <= add_ln67_fu_1101_p2;
                add_ln70_reg_1891 <= add_ln70_fu_1111_p2;
                add_ln71_reg_1896 <= add_ln71_fu_1117_p2;
                add_ln72_reg_1901 <= add_ln72_fu_1123_p2;
                add_ln73_reg_1906 <= add_ln73_fu_1129_p2;
                add_ln74_reg_1911 <= add_ln74_fu_1135_p2;
                add_ln75_reg_1916 <= add_ln75_fu_1141_p2;
                add_ln76_reg_1921 <= add_ln76_fu_1147_p2;
                add_ln77_reg_1926 <= add_ln77_fu_1153_p2;
                and_ln66_1_reg_1860 <= and_ln66_1_fu_1095_p2;
                du_reg_1850 <= grp_fu_766_p2;
                dv_reg_1855 <= grp_fu_771_p2;
                normals_0_load_reg_1865 <= normals_0_q0;
                normals_1_load_reg_1870 <= normals_1_q0;
                normals_2_load_reg_1875 <= normals_2_q0;
                trunc_ln60_reg_1885 <= trunc_ln60_fu_1107_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln69_1_reg_2009 <= add_ln69_1_fu_1419_p2;
                trunc_ln69_1_reg_2020 <= trunc_ln69_1_fu_1428_p1;
                trunc_ln69_reg_2015 <= trunc_ln69_fu_1424_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln67_fu_1173_p2 = ap_const_lv1_0) and (icmp_ln61_reg_1755 = ap_const_lv1_0))) then
                add_ln69_reg_1954 <= add_ln69_fu_1210_p2;
                add_ln70_1_reg_1959 <= add_ln70_1_fu_1215_p2;
                add_ln71_1_reg_1964 <= add_ln71_1_fu_1220_p2;
                add_ln72_1_reg_1969 <= add_ln72_1_fu_1225_p2;
                add_ln73_1_reg_1974 <= add_ln73_1_fu_1230_p2;
                add_ln74_1_reg_1979 <= add_ln74_1_fu_1235_p2;
                add_ln75_1_reg_1984 <= add_ln75_1_fu_1240_p2;
                add_ln76_1_reg_1989 <= add_ln76_1_fu_1245_p2;
                add_ln77_1_reg_1994 <= add_ln77_1_fu_1250_p2;
                add_ln78_reg_1999 <= add_ln78_fu_1255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    ao_addr_2_reg_1745(4 downto 2) <= tmp_20_fu_891_p3(5 - 1 downto 0)(4 downto 2);
                    ao_addr_3_reg_1750(4 downto 2) <= tmp_21_fu_906_p3(5 - 1 downto 0)(4 downto 2);
                icmp_ln61_reg_1755 <= icmp_ln61_fu_915_p2;
                    sub_ln68_reg_1725(6 downto 1) <= sub_ln68_fu_847_p2(6 downto 1);
                    zext_ln66_reg_1730(4 downto 2) <= zext_ln66_fu_866_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ao_load_1_reg_1779 <= ao_q1;
                ao_load_reg_1774 <= ao_q0;
                select_ln64_reg_1764 <= select_ln64_fu_965_p3;
                select_ln65_reg_1769 <= select_ln65_fu_1007_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ao_load_2_reg_1789 <= ao_q0;
                ao_load_3_reg_1794 <= ao_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln61_reg_1755 = ap_const_lv1_0))) then
                data_addr_reg_1931 <= d_0_idx9_cast_fu_1168_p1(10 - 1 downto 0);
                v_reg_1939 <= v_fu_1179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_1707 <= i_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln66_1_reg_1820 <= icmp_ln66_1_fu_1060_p2;
                icmp_ln66_2_reg_1825 <= icmp_ln66_2_fu_1066_p2;
                icmp_ln66_3_reg_1830 <= icmp_ln66_3_fu_1072_p2;
                icmp_ln66_reg_1815 <= icmp_ln66_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln75_1_reg_2100 <= icmp_ln75_1_fu_1566_p2;
                icmp_ln75_reg_2095 <= icmp_ln75_fu_1560_p2;
                icmp_ln76_1_reg_2110 <= icmp_ln76_1_fu_1596_p2;
                icmp_ln76_reg_2105 <= icmp_ln76_fu_1590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                icmp_ln75_2_reg_2085 <= icmp_ln75_2_fu_1508_p2;
                icmp_ln76_2_reg_2090 <= icmp_ln76_2_fu_1532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                light_load_reg_2135 <= light_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                positions_load_1_reg_2045 <= positions_q1;
                positions_load_2_reg_2050 <= positions_q2;
                positions_load_reg_2040 <= positions_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_790 <= grp_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_796 <= grp_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                select_ln66_reg_2004 <= select_ln66_fu_1265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_1_reg_1804 <= grp_fu_783_p1;
                tmp_reg_1799 <= grp_fu_780_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_3_reg_1809 <= grp_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_5_reg_2055 <= grp_fu_766_p2;
                tmp_7_reg_2060 <= grp_fu_771_p2;
                tmp_9_reg_2065 <= grp_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_s_reg_2070 <= grp_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_806_p2 = ap_const_lv1_0))) then
                    zext_ln61_reg_1712(2 downto 0) <= zext_ln61_fu_818_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln61_reg_1712(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    sub_ln68_reg_1725(0) <= '0';
    zext_ln66_reg_1730(1 downto 0) <= "00";
    zext_ln66_reg_1730(32 downto 5) <= "0000000000000000000000000000";
    ao_addr_2_reg_1745(1 downto 0) <= "01";
    ao_addr_3_reg_1750(1 downto 0) <= "10";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln60_fu_806_p2, ap_CS_fsm_state5, icmp_ln61_fu_915_p2, icmp_ln61_reg_1755, ap_CS_fsm_state14, icmp_ln67_fu_1173_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_806_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln61_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln67_fu_1173_p2 = ap_const_lv1_1) or (icmp_ln61_reg_1755 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_1315_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_1311_p1));
    add_ln67_fu_1101_p2 <= std_logic_vector(unsigned(ap_const_lv64_3C) + unsigned(d_0_idx_fu_196));
    add_ln68_fu_1189_p2 <= std_logic_vector(unsigned(sub_ln68_reg_1725) + unsigned(zext_ln68_2_fu_1185_p1));
    add_ln69_1_fu_1419_p2 <= std_logic_vector(unsigned(zext_ln66_reg_1730) + unsigned(sext_ln69_fu_1415_p1));
    add_ln69_fu_1210_p2 <= std_logic_vector(unsigned(zext_ln69_fu_1206_p1) + unsigned(trunc_ln60_reg_1885));
    add_ln70_1_fu_1215_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln70_reg_1891));
    add_ln70_2_fu_1449_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(sub_ln69_fu_1439_p2));
    add_ln70_fu_1111_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln71_1_fu_1220_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln71_reg_1896));
    add_ln71_2_fu_1460_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(sub_ln69_fu_1439_p2));
    add_ln71_fu_1117_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln72_1_fu_1225_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln72_reg_1901));
    add_ln72_fu_1123_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln73_1_fu_1230_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln73_reg_1906));
    add_ln73_fu_1129_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln74_1_fu_1235_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln74_reg_1911));
    add_ln74_fu_1135_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln75_1_fu_1240_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln75_reg_1916));
    add_ln75_fu_1141_p2 <= std_logic_vector(unsigned(ap_const_lv11_7) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln76_1_fu_1245_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln76_reg_1921));
    add_ln76_fu_1147_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln77_1_fu_1250_p2 <= std_logic_vector(unsigned(d_1_rec_cast_fu_1159_p1) + unsigned(add_ln77_reg_1926));
    add_ln77_fu_1153_p2 <= std_logic_vector(unsigned(ap_const_lv11_9) + unsigned(trunc_ln60_fu_1107_p1));
    add_ln78_fu_1255_p2 <= std_logic_vector(unsigned(ap_const_lv6_A) + unsigned(d_1_rec_reg_732));
    and_ln66_1_fu_1095_p2 <= (grp_fu_786_p2 and and_ln66_fu_1089_p2);
    and_ln66_fu_1089_p2 <= (or_ln66_fu_1081_p2 and or_ln66_1_fu_1085_p2);
    and_ln75_fu_1610_p2 <= (or_ln75_fu_1606_p2 and icmp_ln75_2_reg_2085);
    and_ln76_fu_1628_p2 <= (or_ln76_fu_1624_p2 and icmp_ln76_2_reg_2090);

    ao_address0_assign_proc : process(ap_CS_fsm_state5, ao_addr_2_reg_1745, ap_CS_fsm_state6, ap_CS_fsm_state33, zext_ln69_2_fu_861_p1, sext_ln69_1_fu_1658_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ao_address0 <= sext_ln69_1_fu_1658_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ao_address0 <= ao_addr_2_reg_1745;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ao_address0 <= zext_ln69_2_fu_861_p1(5 - 1 downto 0);
        else 
            ao_address0 <= "XXXXX";
        end if; 
    end process;


    ao_address1_assign_proc : process(ap_CS_fsm_state5, ao_addr_3_reg_1750, ap_CS_fsm_state6, tmp_19_fu_876_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ao_address1 <= ao_addr_3_reg_1750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ao_address1 <= tmp_19_fu_876_p3(5 - 1 downto 0);
        else 
            ao_address1 <= "XXXXX";
        end if; 
    end process;


    ao_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ao_ce0 <= ap_const_logic_1;
        else 
            ao_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ao_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ao_ce1 <= ap_const_logic_1;
        else 
            ao_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln60_fu_806_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_806_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln60_fu_806_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_806_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln66_1_fu_1037_p1 <= tmp_3_reg_1809;
    bitcast_ln66_fu_1019_p1 <= reg_790;
    bitcast_ln75_fu_1542_p1 <= uvs_q0;
    bitcast_ln76_fu_1572_p1 <= uvs_q1;
    d_0_idx9_cast_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_idx9_fu_1163_p2),64));
    d_0_idx9_fu_1163_p2 <= std_logic_vector(unsigned(trunc_ln60_reg_1885) + unsigned(d_1_rec_cast_fu_1159_p1));
    d_1_rec_cast_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_rec_reg_732),11));

    data_address0_assign_proc : process(ap_CS_fsm_state31, data_addr_reg_1931, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, zext_ln69_1_fu_1538_p1, zext_ln70_fu_1602_p1, zext_ln71_fu_1642_p1, ap_CS_fsm_state29, zext_ln72_fu_1646_p1, ap_CS_fsm_state30, zext_ln73_fu_1650_p1, zext_ln74_fu_1654_p1, ap_CS_fsm_state32, zext_ln75_fu_1663_p1, zext_ln76_fu_1667_p1, zext_ln77_fu_1671_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            data_address0 <= zext_ln77_fu_1671_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            data_address0 <= zext_ln76_fu_1667_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            data_address0 <= zext_ln75_fu_1663_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            data_address0 <= zext_ln74_fu_1654_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_address0 <= zext_ln73_fu_1650_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            data_address0 <= zext_ln72_fu_1646_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            data_address0 <= zext_ln71_fu_1642_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data_address0 <= zext_ln70_fu_1602_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_address0 <= zext_ln69_1_fu_1538_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data_address0 <= data_addr_reg_1931;
        else 
            data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_d0_assign_proc : process(ao_q0, reg_790, ap_CS_fsm_state31, reg_796, normals_0_load_reg_1865, normals_1_load_reg_1870, normals_2_load_reg_1875, tmp_s_reg_2070, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, light_load_reg_2135, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            data_d0 <= light_load_reg_2135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            data_d0 <= ao_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            data_d0 <= normals_2_load_reg_1875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            data_d0 <= normals_1_load_reg_1870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            data_d0 <= normals_0_load_reg_1865;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            data_d0 <= tmp_s_reg_2070;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            data_d0 <= reg_796;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            data_d0 <= reg_790;
        else 
            data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_we0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    faces_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln61_fu_818_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            faces_address0 <= zext_ln61_fu_818_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            faces_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            faces_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            faces_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            faces_address0 <= "XXX";
        end if; 
    end process;


    faces_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            faces_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            faces_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            faces_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            faces_address1 <= "XXX";
        end if; 
    end process;


    faces_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            faces_ce0 <= ap_const_logic_1;
        else 
            faces_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    faces_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            faces_ce1 <= ap_const_logic_1;
        else 
            faces_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    faces_d0_assign_proc : process(ap_CS_fsm_state1, left_r, top, front, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            faces_d0 <= front;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            faces_d0 <= top;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            faces_d0 <= left_r;
        else 
            faces_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    faces_d1_assign_proc : process(ap_CS_fsm_state1, right_r, bottom, back, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            faces_d1 <= back;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            faces_d1 <= bottom;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            faces_d1 <= right_r;
        else 
            faces_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    faces_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            faces_we0 <= ap_const_logic_1;
        else 
            faces_we0 <= ap_const_logic_0;
        end if; 
    end process;


    faces_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            faces_we1 <= ap_const_logic_1;
        else 
            faces_we1 <= ap_const_logic_0;
        end if; 
    end process;

    flipped_address0 <= sext_ln68_fu_1194_p1(6 - 1 downto 0);

    flipped_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flipped_ce0 <= ap_const_logic_1;
        else 
            flipped_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_754_p0_assign_proc : process(ao_load_reg_1774, ap_CS_fsm_state7, ao_load_2_reg_1789, du_reg_1850, tmp_5_reg_2055, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_754_p0 <= du_reg_1850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_754_p0 <= tmp_5_reg_2055;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_754_p0 <= ao_load_2_reg_1789;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_754_p0 <= ao_load_reg_1774;
        else 
            grp_fu_754_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_754_p1_assign_proc : process(x, ao_load_1_reg_1779, ap_CS_fsm_state7, ao_load_3_reg_1794, select_ln75_fu_1615_p3, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_754_p1 <= select_ln75_fu_1615_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_754_p1 <= x;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_754_p1 <= ao_load_3_reg_1794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_754_p1 <= ao_load_1_reg_1779;
        else 
            grp_fu_754_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_758_p0_assign_proc : process(dv_reg_1855, tmp_7_reg_2060, ap_CS_fsm_state28, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_758_p0 <= dv_reg_1855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_758_p0 <= tmp_7_reg_2060;
        else 
            grp_fu_758_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_758_p1_assign_proc : process(y, ap_CS_fsm_state28, select_ln76_fu_1633_p3, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_758_p1 <= select_ln76_fu_1633_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_758_p1 <= y;
        else 
            grp_fu_758_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_766_p0_assign_proc : process(tmp_reg_1799, ap_CS_fsm_state11, positions_load_reg_2040, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_766_p0 <= positions_load_reg_2040;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_766_p0 <= tmp_reg_1799;
        else 
            grp_fu_766_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_766_p1_assign_proc : process(n, ap_CS_fsm_state11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_766_p1 <= n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_766_p1 <= ap_const_lv32_3D800000;
        else 
            grp_fu_766_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_771_p0_assign_proc : process(tmp_1_reg_1804, ap_CS_fsm_state11, positions_load_1_reg_2045, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_771_p0 <= positions_load_1_reg_2045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_771_p0 <= tmp_1_reg_1804;
        else 
            grp_fu_771_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_771_p1_assign_proc : process(n, ap_CS_fsm_state11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_771_p1 <= n;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_771_p1 <= ap_const_lv32_3D800000;
        else 
            grp_fu_771_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_783_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln65_reg_1769),32));

    i_fu_812_p2 <= std_logic_vector(unsigned(i_0_reg_720) + unsigned(ap_const_lv3_1));
    icmp_ln60_fu_806_p2 <= "1" when (i_0_reg_720 = ap_const_lv3_6) else "0";
    icmp_ln61_fu_915_p2 <= "1" when (faces_q0 = ap_const_lv32_0) else "0";
    icmp_ln66_1_fu_1060_p2 <= "1" when (trunc_ln66_fu_1033_p1 = ap_const_lv23_0) else "0";
    icmp_ln66_2_fu_1066_p2 <= "0" when (tmp_10_fu_1040_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_3_fu_1072_p2 <= "1" when (trunc_ln66_1_fu_1050_p1 = ap_const_lv23_0) else "0";
    icmp_ln66_fu_1054_p2 <= "0" when (tmp_4_fu_1023_p4 = ap_const_lv8_FF) else "1";
    icmp_ln67_fu_1173_p2 <= "1" when (v_0_reg_743 = ap_const_lv3_6) else "0";
    icmp_ln75_1_fu_1566_p2 <= "1" when (trunc_ln75_fu_1556_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_2_fu_1508_p2 <= "0" when (tmp_26_fu_1500_p3 = ap_const_lv64_0) else "1";
    icmp_ln75_fu_1560_p2 <= "0" when (tmp_14_fu_1546_p4 = ap_const_lv8_FF) else "1";
    icmp_ln76_1_fu_1596_p2 <= "1" when (trunc_ln76_fu_1586_p1 = ap_const_lv23_0) else "0";
    icmp_ln76_2_fu_1532_p2 <= "0" when (tmp_29_fu_1524_p3 = ap_const_lv64_0) else "1";
    icmp_ln76_fu_1590_p2 <= "0" when (tmp_15_fu_1576_p4 = ap_const_lv8_FF) else "1";
    indices_address0 <= sext_ln68_fu_1194_p1(6 - 1 downto 0);

    indices_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            indices_ce0 <= ap_const_logic_1;
        else 
            indices_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_1321_p3 <= add_ln339_fu_1315_p2(8 downto 8);
    light_address0 <= sext_ln69_1_fu_1658_p1(5 - 1 downto 0);

    light_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            light_ce0 <= ap_const_logic_1;
        else 
            light_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln75_fu_1490_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_7227278D4E1B),to_integer(unsigned('0' & sext_ln75_fu_1478_p1(31-1 downto 0)))));
    lshr_ln76_fu_1514_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_7227278D4E1B),to_integer(unsigned('0' & or_ln76_1_fu_1483_p2(31-1 downto 0)))));
    mantissa_V_fu_1297_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_1293_p1) & ap_const_lv1_0);
    normals_0_address0 <= zext_ln61_reg_1712(3 - 1 downto 0);

    normals_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            normals_0_ce0 <= ap_const_logic_1;
        else 
            normals_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    normals_1_address0 <= zext_ln61_reg_1712(3 - 1 downto 0);

    normals_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            normals_1_ce0 <= ap_const_logic_1;
        else 
            normals_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    normals_2_address0 <= zext_ln61_reg_1712(3 - 1 downto 0);

    normals_2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            normals_2_ce0 <= ap_const_logic_1;
        else 
            normals_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln66_1_fu_1085_p2 <= (icmp_ln66_3_reg_1830 or icmp_ln66_2_reg_1825);
    or_ln66_2_fu_870_p2 <= (tmp_18_fu_853_p3 or ap_const_lv5_3);
    or_ln66_3_fu_885_p2 <= (tmp_18_fu_853_p3 or ap_const_lv5_1);
    or_ln66_4_fu_900_p2 <= (tmp_18_fu_853_p3 or ap_const_lv5_2);
    or_ln66_fu_1081_p2 <= (icmp_ln66_reg_1815 or icmp_ln66_1_reg_1820);
    or_ln69_fu_1200_p2 <= (d_1_rec_reg_732 or ap_const_lv6_1);
    or_ln75_fu_1606_p2 <= (icmp_ln75_reg_2095 or icmp_ln75_1_reg_2100);
    or_ln76_1_fu_1483_p2 <= (sext_ln75_fu_1478_p1 or ap_const_lv64_1);
    or_ln76_fu_1624_p2 <= (icmp_ln76_reg_2105 or icmp_ln76_1_reg_2110);
    p_Result_s_fu_1275_p3 <= p_Val2_s_fu_1272_p1(31 downto 31);
    p_Val2_4_fu_1393_p3 <= 
        zext_ln662_fu_1379_p1 when (isNeg_fu_1321_p3(0) = '1') else 
        tmp_25_fu_1383_p4;
    p_Val2_s_fu_1272_p1 <= select_ln66_reg_2004;
    p_and_f_fu_933_p3 <= (ap_const_lv28_0 & trunc_ln64_fu_929_p1);
    p_and_t_fu_951_p3 <= (ap_const_lv28_0 & trunc_ln64_1_fu_947_p1);
    p_shl2_cast_fu_1432_p3 <= (trunc_ln69_1_reg_2020 & ap_const_lv2_0);
    positions_address0 <= zext_ln69_3_fu_1444_p1(7 - 1 downto 0);
    positions_address1 <= zext_ln70_1_fu_1455_p1(7 - 1 downto 0);
    positions_address2 <= zext_ln71_1_fu_1466_p1(7 - 1 downto 0);

    positions_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            positions_ce0 <= ap_const_logic_1;
        else 
            positions_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    positions_ce1_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            positions_ce1 <= ap_const_logic_1;
        else 
            positions_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    positions_ce2_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            positions_ce2 <= ap_const_logic_1;
        else 
            positions_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_1365_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_1307_p1),to_integer(unsigned('0' & zext_ln1287_fu_1355_p1(31-1 downto 0)))));
    r_V_fu_1359_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_1297_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_1351_p1(25-1 downto 0)))));
    result_V_1_fu_1401_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_fu_1393_p3));
    select_ln59_fu_1407_p3 <= 
        result_V_1_fu_1401_p2 when (p_Result_s_fu_1275_p3(0) = '1') else 
        p_Val2_4_fu_1393_p3;
    select_ln64_fu_965_p3 <= 
        sub_ln64_1_fu_959_p2 when (tmp_22_fu_921_p3(0) = '1') else 
        p_and_f_fu_933_p3;
    select_ln65_fu_1007_p3 <= 
        sub_ln65_fu_987_p2 when (tmp_22_fu_921_p3(0) = '1') else 
        zext_ln65_1_fu_1003_p1;
    select_ln66_fu_1265_p3 <= 
        flipped_q0 when (and_ln66_1_reg_1860(0) = '1') else 
        indices_q0;
    select_ln75_fu_1615_p3 <= 
        ap_const_lv32_3A000000 when (and_ln75_fu_1610_p2(0) = '1') else 
        ap_const_lv32_3D7E0000;
    select_ln76_fu_1633_p3 <= 
        ap_const_lv32_3A000000 when (and_ln76_fu_1628_p2(0) = '1') else 
        ap_const_lv32_3D7E0000;
        sext_ln1311_1_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1339_p3),32));

        sext_ln1311_2_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1339_p3),25));

        sext_ln1311_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1329_p2),9));

        sext_ln68_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln68_fu_1189_p2),64));

        sext_ln69_1_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln69_1_reg_2009),64));

        sext_ln69_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln59_fu_1407_p3),33));

        sext_ln75_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_1471_p3),64));

    sub_ln1311_fu_1329_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_1283_p4));
    sub_ln64_1_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t_fu_951_p3));
    sub_ln64_fu_941_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tiles_q0));
    sub_ln65_fu_987_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(zext_ln65_fu_983_p1));
    sub_ln68_fu_847_p2 <= std_logic_vector(unsigned(zext_ln68_fu_831_p1) - unsigned(zext_ln68_1_fu_843_p1));
    sub_ln69_fu_1439_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_1432_p3) - unsigned(trunc_ln69_reg_2015));

    tiles_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, zext_ln61_reg_1712, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tiles_address0 <= zext_ln61_reg_1712(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tiles_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tiles_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tiles_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            tiles_address0 <= "XXX";
        end if; 
    end process;


    tiles_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tiles_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tiles_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tiles_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            tiles_address1 <= "XXX";
        end if; 
    end process;


    tiles_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tiles_ce0 <= ap_const_logic_1;
        else 
            tiles_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tiles_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tiles_ce1 <= ap_const_logic_1;
        else 
            tiles_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tiles_d0_assign_proc : process(ap_CS_fsm_state1, wleft, wtop, wfront, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tiles_d0 <= wfront;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tiles_d0 <= wtop;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tiles_d0 <= wleft;
        else 
            tiles_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tiles_d1_assign_proc : process(ap_CS_fsm_state1, wright, wbottom, wback, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tiles_d1 <= wback;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tiles_d1 <= wbottom;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tiles_d1 <= wright;
        else 
            tiles_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tiles_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tiles_we0 <= ap_const_logic_1;
        else 
            tiles_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tiles_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            tiles_we1 <= ap_const_logic_1;
        else 
            tiles_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1040_p4 <= bitcast_ln66_1_fu_1037_p1(30 downto 23);
    tmp_14_fu_1546_p4 <= bitcast_ln75_fu_1542_p1(30 downto 23);
    tmp_15_fu_1576_p4 <= bitcast_ln76_fu_1572_p1(30 downto 23);
    tmp_16_fu_823_p3 <= (i_0_reg_720 & ap_const_lv3_0);
    tmp_17_fu_835_p3 <= (i_0_reg_720 & ap_const_lv1_0);
    tmp_18_fu_853_p3 <= (i_0_reg_720 & ap_const_lv2_0);
    tmp_19_fu_876_p3 <= (ap_const_lv59_0 & or_ln66_2_fu_870_p2);
    tmp_20_fu_891_p3 <= (ap_const_lv59_0 & or_ln66_3_fu_885_p2);
    tmp_21_fu_906_p3 <= (ap_const_lv59_0 & or_ln66_4_fu_900_p2);
    tmp_22_fu_921_p3 <= tiles_q0(31 downto 31);
    tmp_23_fu_973_p4 <= sub_ln64_fu_941_p2(31 downto 4);
    tmp_24_fu_993_p4 <= tiles_q0(31 downto 4);
    tmp_25_fu_1383_p4 <= r_V_1_fu_1365_p2(55 downto 24);
    tmp_26_fu_1500_p3 <= (ap_const_lv63_0 & trunc_ln75_1_fu_1496_p1);
    tmp_27_fu_1371_p3 <= r_V_fu_1359_p2(24 downto 24);
    tmp_28_fu_1471_p3 <= (add_ln69_1_reg_2009 & ap_const_lv1_0);
    tmp_29_fu_1524_p3 <= (ap_const_lv63_0 & trunc_ln76_1_fu_1520_p1);
    tmp_4_fu_1023_p4 <= bitcast_ln66_fu_1019_p1(30 downto 23);
    tmp_V_1_fu_1293_p1 <= p_Val2_s_fu_1272_p1(23 - 1 downto 0);
    tmp_V_fu_1283_p4 <= p_Val2_s_fu_1272_p1(30 downto 23);
    trunc_ln60_fu_1107_p1 <= d_0_idx_fu_196(11 - 1 downto 0);
    trunc_ln64_1_fu_947_p1 <= sub_ln64_fu_941_p2(4 - 1 downto 0);
    trunc_ln64_fu_929_p1 <= tiles_q0(4 - 1 downto 0);
    trunc_ln66_1_fu_1050_p1 <= bitcast_ln66_1_fu_1037_p1(23 - 1 downto 0);
    trunc_ln66_fu_1033_p1 <= bitcast_ln66_fu_1019_p1(23 - 1 downto 0);
    trunc_ln69_1_fu_1428_p1 <= add_ln69_1_fu_1419_p2(6 - 1 downto 0);
    trunc_ln69_fu_1424_p1 <= add_ln69_1_fu_1419_p2(8 - 1 downto 0);
    trunc_ln75_1_fu_1496_p1 <= lshr_ln75_fu_1490_p2(1 - 1 downto 0);
    trunc_ln75_fu_1556_p1 <= bitcast_ln75_fu_1542_p1(23 - 1 downto 0);
    trunc_ln76_1_fu_1520_p1 <= lshr_ln76_fu_1514_p2(1 - 1 downto 0);
    trunc_ln76_fu_1586_p1 <= bitcast_ln76_fu_1572_p1(23 - 1 downto 0);
    ush_fu_1339_p3 <= 
        sext_ln1311_fu_1335_p1 when (isNeg_fu_1321_p3(0) = '1') else 
        add_ln339_fu_1315_p2;
    uvs_address0 <= sext_ln75_fu_1478_p1(6 - 1 downto 0);
    uvs_address1 <= or_ln76_1_fu_1483_p2(6 - 1 downto 0);

    uvs_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            uvs_ce0 <= ap_const_logic_1;
        else 
            uvs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    uvs_ce1_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            uvs_ce1 <= ap_const_logic_1;
        else 
            uvs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_1179_p2 <= std_logic_vector(unsigned(v_0_reg_743) + unsigned(ap_const_lv3_1));
    zext_ln1287_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_1347_p1),79));
    zext_ln339_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_1283_p4),9));
    zext_ln61_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_720),64));
    zext_ln65_1_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_993_p4),29));
    zext_ln65_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_973_p4),29));
    zext_ln662_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1371_p3),32));
    zext_ln66_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_853_p3),33));
    zext_ln682_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_1297_p4),79));
    zext_ln68_1_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_835_p3),7));
    zext_ln68_2_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_0_reg_743),7));
    zext_ln68_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_823_p3),7));
    zext_ln69_1_fu_1538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_reg_1954),64));
    zext_ln69_2_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_853_p3),64));
    zext_ln69_3_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln69_fu_1439_p2),64));
    zext_ln69_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln69_fu_1200_p2),11));
    zext_ln70_1_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_2_fu_1449_p2),64));
    zext_ln70_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_reg_1959),64));
    zext_ln71_1_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_2_fu_1460_p2),64));
    zext_ln71_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_1_reg_1964),64));
    zext_ln72_fu_1646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_1_reg_1969),64));
    zext_ln73_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_1_reg_1974),64));
    zext_ln74_fu_1654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_1_reg_1979),64));
    zext_ln75_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_reg_1984),64));
    zext_ln76_fu_1667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_reg_1989),64));
    zext_ln77_fu_1671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_1_reg_1994),64));
end behav;
