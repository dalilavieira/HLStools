-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resolveResolved is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    baselevel : IN STD_LOGIC_VECTOR (31 downto 0);
    pcls_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pcls_ce0 : OUT STD_LOGIC;
    pcls_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    plevel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    plevel_ce0 : OUT STD_LOGIC;
    plevel_we0 : OUT STD_LOGIC;
    plevel_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sos : IN STD_LOGIC_VECTOR (31 downto 0);
    eos : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of resolveResolved is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "resolveResolved,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.449000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=342,HLS_SYN_LUT=368,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pcls_addr_2_reg_241 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln36_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_reg_249 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln34_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln39_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_reg_263 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln39_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln39_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln39_reg_277 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln51_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln51_1_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln57_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln57_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_111 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_in_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_0_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln51_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln51_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_1_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_211 : BOOLEAN;
    signal ap_condition_208 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_141_p2 = ap_const_lv1_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    j1_0_reg_131 <= eos;
                elsif ((ap_const_boolean_1 = ap_condition_211)) then 
                    j1_0_reg_131 <= j_2_fu_209_p2;
                end if;
            end if; 
        end if;
    end process;

    j_0_in_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_141_p2 = ap_const_lv1_1)) then
                if ((ap_const_boolean_1 = ap_condition_208)) then 
                    j_0_in_reg_121 <= j_reg_268;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    j_0_in_reg_121 <= j_1_reg_111;
                end if;
            end if; 
        end if;
    end process;

    j_1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln51_reg_290 = ap_const_lv1_0) or ((icmp_ln51_1_reg_294 = ap_const_lv1_0) or ((icmp_ln57_reg_298 = ap_const_lv1_1) or (grp_fu_141_p2 = ap_const_lv1_0)))))) then 
                j_1_reg_111 <= i_fu_215_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_1_reg_111 <= sos;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln36_reg_259 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln51_1_reg_294 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln36_reg_259 = ap_const_lv1_0) or ((or_ln39_reg_273 = ap_const_lv1_1) or (grp_fu_141_p2 = ap_const_lv1_0))))) then
                icmp_ln51_reg_290 <= icmp_ln51_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln57_reg_298 <= icmp_ln57_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_268 <= j_fu_173_p2;
                or_ln39_reg_273 <= or_ln39_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                pcls_addr_2_reg_241 <= sext_ln51_fu_147_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sext_ln36_reg_249 <= sext_ln36_fu_157_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln39_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln39_reg_277 <= sext_ln39_fu_189_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sext_ln57_reg_302 <= sext_ln57_fu_204_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                xor_ln39_reg_263 <= xor_ln39_fu_167_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln34_fu_152_p2, grp_fu_141_p2, icmp_ln36_reg_259, ap_CS_fsm_state3, or_ln39_reg_273, icmp_ln51_fu_194_p2, icmp_ln51_reg_290, ap_CS_fsm_state5, icmp_ln51_1_reg_294, ap_CS_fsm_state6, icmp_ln57_reg_298, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln34_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((((or_ln39_reg_273 = ap_const_lv1_1) and (icmp_ln51_fu_194_p2 = ap_const_lv1_0)) or ((icmp_ln51_fu_194_p2 = ap_const_lv1_0) and (grp_fu_141_p2 = ap_const_lv1_0))) or ((icmp_ln51_fu_194_p2 = ap_const_lv1_0) and (icmp_ln36_reg_259 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((((icmp_ln51_fu_194_p2 = ap_const_lv1_1) and (or_ln39_reg_273 = ap_const_lv1_1)) or ((icmp_ln51_fu_194_p2 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_0))) or ((icmp_ln51_fu_194_p2 = ap_const_lv1_1) and (icmp_ln36_reg_259 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln51_reg_290 = ap_const_lv1_0) or ((icmp_ln51_1_reg_294 = ap_const_lv1_0) or ((icmp_ln57_reg_298 = ap_const_lv1_1) or (grp_fu_141_p2 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_condition_208_assign_proc : process(icmp_ln36_reg_259, or_ln39_reg_273, ap_CS_fsm_state5)
    begin
                ap_condition_208 <= ((icmp_ln36_reg_259 = ap_const_lv1_1) and (or_ln39_reg_273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5));
    end process;


    ap_condition_211_assign_proc : process(icmp_ln51_reg_290, icmp_ln51_1_reg_294, icmp_ln57_reg_298, ap_CS_fsm_state8)
    begin
                ap_condition_211 <= ((icmp_ln51_reg_290 = ap_const_lv1_1) and (icmp_ln51_1_reg_294 = ap_const_lv1_1) and (icmp_ln57_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_152_p2)
    begin
        if (((icmp_ln34_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_152_p2)
    begin
        if (((icmp_ln34_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_141_p2 <= "1" when (pcls_q0 = ap_const_lv32_0) else "0";
    i_fu_215_p2 <= std_logic_vector(signed(j_1_reg_111) + signed(ap_const_lv32_1));
    icmp_ln34_fu_152_p1 <= eos;
    icmp_ln34_fu_152_p2 <= "1" when (signed(j_1_reg_111) > signed(icmp_ln34_fu_152_p1)) else "0";
    icmp_ln39_1_fu_179_p2 <= "1" when (signed(j_fu_173_p2) < signed(sos)) else "0";
    icmp_ln39_fu_162_p2 <= "1" when (signed(sos) < signed(j_1_reg_111)) else "0";
    icmp_ln51_fu_194_p1 <= eos;
    icmp_ln51_fu_194_p2 <= "1" when (j_1_reg_111 = icmp_ln51_fu_194_p1) else "0";
    icmp_ln57_fu_199_p2 <= "1" when (signed(j1_0_reg_131) < signed(sos)) else "0";
    j_2_fu_209_p2 <= std_logic_vector(signed(j1_0_reg_131) + signed(ap_const_lv32_FFFFFFFF));
    j_fu_173_p2 <= std_logic_vector(unsigned(j_0_in_reg_121) + unsigned(ap_const_lv32_FFFFFFFF));
    or_ln39_fu_184_p2 <= (xor_ln39_reg_263 or icmp_ln39_1_fu_179_p2);

    pcls_address0_assign_proc : process(pcls_addr_2_reg_241, sext_ln36_fu_157_p1, ap_CS_fsm_state2, ap_CS_fsm_state4, sext_ln39_fu_189_p1, ap_CS_fsm_state5, ap_CS_fsm_state7, sext_ln57_fu_204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pcls_address0 <= sext_ln57_fu_204_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pcls_address0 <= pcls_addr_2_reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pcls_address0 <= sext_ln39_fu_189_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pcls_address0 <= sext_ln36_fu_157_p1(8 - 1 downto 0);
        else 
            pcls_address0 <= "XXXXXXXX";
        end if; 
    end process;


    pcls_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pcls_ce0 <= ap_const_logic_1;
        else 
            pcls_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plevel_address0_assign_proc : process(sext_ln36_reg_249, grp_fu_141_p2, icmp_ln36_reg_259, or_ln39_reg_273, sext_ln39_reg_277, ap_CS_fsm_state5, sext_ln57_reg_302, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            plevel_address0 <= sext_ln57_reg_302(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (((or_ln39_reg_273 = ap_const_lv1_1) and (icmp_ln36_reg_259 = ap_const_lv1_1)) or ((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_0))))) then 
            plevel_address0 <= sext_ln36_reg_249(8 - 1 downto 0);
        elsif (((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_1) and (or_ln39_reg_273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            plevel_address0 <= sext_ln39_reg_277(8 - 1 downto 0);
        else 
            plevel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    plevel_ce0_assign_proc : process(grp_fu_141_p2, icmp_ln36_reg_259, or_ln39_reg_273, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_1) and (or_ln39_reg_273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (((or_ln39_reg_273 = ap_const_lv1_1) and (icmp_ln36_reg_259 = ap_const_lv1_1)) or ((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_0)))))) then 
            plevel_ce0 <= ap_const_logic_1;
        else 
            plevel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    plevel_d0 <= baselevel;

    plevel_we0_assign_proc : process(grp_fu_141_p2, icmp_ln36_reg_259, or_ln39_reg_273, icmp_ln51_reg_290, ap_CS_fsm_state5, icmp_ln51_1_reg_294, icmp_ln57_reg_298, ap_CS_fsm_state8)
    begin
        if ((((icmp_ln51_reg_290 = ap_const_lv1_1) and (icmp_ln51_1_reg_294 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_1) and (icmp_ln57_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_1) and (or_ln39_reg_273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (((or_ln39_reg_273 = ap_const_lv1_1) and (icmp_ln36_reg_259 = ap_const_lv1_1)) or ((icmp_ln36_reg_259 = ap_const_lv1_1) and (grp_fu_141_p2 = ap_const_lv1_0)))))) then 
            plevel_we0 <= ap_const_logic_1;
        else 
            plevel_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln36_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_1_reg_111),64));

        sext_ln39_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_173_p2),64));

    sext_ln51_fu_147_p0 <= eos;
        sext_ln51_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln51_fu_147_p0),64));

        sext_ln57_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j1_0_reg_131),64));

    xor_ln39_fu_167_p2 <= (icmp_ln39_fu_162_p2 xor ap_const_lv1_1);
end behav;
