// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="resolveResolved,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.449000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=342,HLS_SYN_LUT=368,HLS_VERSION=2019_1}" *)

module resolveResolved (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        baselevel,
        pcls_address0,
        pcls_ce0,
        pcls_q0,
        plevel_address0,
        plevel_ce0,
        plevel_we0,
        plevel_d0,
        sos,
        eos
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] baselevel;
output  [7:0] pcls_address0;
output   pcls_ce0;
input  [31:0] pcls_q0;
output  [7:0] plevel_address0;
output   plevel_ce0;
output   plevel_we0;
output  [31:0] plevel_d0;
input  [31:0] sos;
input  [31:0] eos;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] pcls_address0;
reg pcls_ce0;
reg[7:0] plevel_address0;
reg plevel_ce0;
reg plevel_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] pcls_addr_2_reg_241;
wire  signed [63:0] sext_ln36_fu_157_p1;
reg  signed [63:0] sext_ln36_reg_249;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln34_fu_152_p2;
wire   [0:0] grp_fu_141_p2;
reg   [0:0] icmp_ln36_reg_259;
wire    ap_CS_fsm_state3;
wire   [0:0] xor_ln39_fu_167_p2;
reg   [0:0] xor_ln39_reg_263;
wire  signed [31:0] j_fu_173_p2;
reg  signed [31:0] j_reg_268;
wire    ap_CS_fsm_state4;
wire   [0:0] or_ln39_fu_184_p2;
reg   [0:0] or_ln39_reg_273;
wire  signed [63:0] sext_ln39_fu_189_p1;
reg  signed [63:0] sext_ln39_reg_277;
wire   [0:0] icmp_ln51_fu_194_p2;
reg   [0:0] icmp_ln51_reg_290;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln51_1_reg_294;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln57_fu_199_p2;
reg   [0:0] icmp_ln57_reg_298;
wire    ap_CS_fsm_state7;
wire  signed [63:0] sext_ln57_fu_204_p1;
reg  signed [63:0] sext_ln57_reg_302;
wire   [31:0] j_2_fu_209_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] i_fu_215_p2;
reg  signed [31:0] j_1_reg_111;
reg   [31:0] j_0_in_reg_121;
reg  signed [31:0] j1_0_reg_131;
wire  signed [63:0] sext_ln51_fu_147_p1;
wire  signed [31:0] sext_ln51_fu_147_p0;
wire  signed [31:0] icmp_ln34_fu_152_p1;
wire   [0:0] icmp_ln39_fu_162_p2;
wire   [0:0] icmp_ln39_1_fu_179_p2;
wire  signed [31:0] icmp_ln51_fu_194_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_condition_211;
reg    ap_condition_208;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_fu_141_p2 == 1'd1)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            j1_0_reg_131 <= eos;
        end else if ((1'b1 == ap_condition_211)) begin
            j1_0_reg_131 <= j_2_fu_209_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_fu_141_p2 == 1'd1)) begin
        if ((1'b1 == ap_condition_208)) begin
            j_0_in_reg_121 <= j_reg_268;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            j_0_in_reg_121 <= j_1_reg_111;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln51_reg_290 == 1'd0) | ((icmp_ln51_1_reg_294 == 1'd0) | ((icmp_ln57_reg_298 == 1'd1) | (grp_fu_141_p2 == 1'd0)))))) begin
        j_1_reg_111 <= i_fu_215_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_1_reg_111 <= sos;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln36_reg_259 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln51_1_reg_294 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((icmp_ln36_reg_259 == 1'd0) | ((or_ln39_reg_273 == 1'd1) | (grp_fu_141_p2 == 1'd0))))) begin
        icmp_ln51_reg_290 <= icmp_ln51_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln57_reg_298 <= icmp_ln57_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_268 <= j_fu_173_p2;
        or_ln39_reg_273 <= or_ln39_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pcls_addr_2_reg_241 <= sext_ln51_fu_147_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln36_reg_249 <= sext_ln36_fu_157_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln39_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln39_reg_277 <= sext_ln39_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln57_reg_302 <= sext_ln57_fu_204_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        xor_ln39_reg_263 <= xor_ln39_fu_167_p2;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pcls_address0 = sext_ln57_fu_204_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pcls_address0 = pcls_addr_2_reg_241;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pcls_address0 = sext_ln39_fu_189_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pcls_address0 = sext_ln36_fu_157_p1;
    end else begin
        pcls_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        pcls_ce0 = 1'b1;
    end else begin
        pcls_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        plevel_address0 = sext_ln57_reg_302;
    end else if (((1'b1 == ap_CS_fsm_state5) & (((or_ln39_reg_273 == 1'd1) & (icmp_ln36_reg_259 == 1'd1)) | ((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd0))))) begin
        plevel_address0 = sext_ln36_reg_249;
    end else if (((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd1) & (or_ln39_reg_273 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        plevel_address0 = sext_ln39_reg_277;
    end else begin
        plevel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd1) & (or_ln39_reg_273 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (((or_ln39_reg_273 == 1'd1) & (icmp_ln36_reg_259 == 1'd1)) | ((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd0)))))) begin
        plevel_ce0 = 1'b1;
    end else begin
        plevel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln51_reg_290 == 1'd1) & (icmp_ln51_1_reg_294 == 1'd1) & (grp_fu_141_p2 == 1'd1) & (icmp_ln57_reg_298 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd1) & (or_ln39_reg_273 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (((or_ln39_reg_273 == 1'd1) & (icmp_ln36_reg_259 == 1'd1)) | ((icmp_ln36_reg_259 == 1'd1) & (grp_fu_141_p2 == 1'd0)))))) begin
        plevel_we0 = 1'b1;
    end else begin
        plevel_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln34_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((((or_ln39_reg_273 == 1'd1) & (icmp_ln51_fu_194_p2 == 1'd0)) | ((icmp_ln51_fu_194_p2 == 1'd0) & (grp_fu_141_p2 == 1'd0))) | ((icmp_ln51_fu_194_p2 == 1'd0) & (icmp_ln36_reg_259 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state5) & ((((icmp_ln51_fu_194_p2 == 1'd1) & (or_ln39_reg_273 == 1'd1)) | ((icmp_ln51_fu_194_p2 == 1'd1) & (grp_fu_141_p2 == 1'd0))) | ((icmp_ln51_fu_194_p2 == 1'd1) & (icmp_ln36_reg_259 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln51_reg_290 == 1'd0) | ((icmp_ln51_1_reg_294 == 1'd0) | ((icmp_ln57_reg_298 == 1'd1) | (grp_fu_141_p2 == 1'd0)))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_condition_208 = ((icmp_ln36_reg_259 == 1'd1) & (or_ln39_reg_273 == 1'd0) & (1'b1 == ap_CS_fsm_state5));
end

always @ (*) begin
    ap_condition_211 = ((icmp_ln51_reg_290 == 1'd1) & (icmp_ln51_1_reg_294 == 1'd1) & (icmp_ln57_reg_298 == 1'd0) & (1'b1 == ap_CS_fsm_state8));
end

assign grp_fu_141_p2 = ((pcls_q0 == 32'd0) ? 1'b1 : 1'b0);

assign i_fu_215_p2 = ($signed(j_1_reg_111) + $signed(32'd1));

assign icmp_ln34_fu_152_p1 = eos;

assign icmp_ln34_fu_152_p2 = (($signed(j_1_reg_111) > $signed(icmp_ln34_fu_152_p1)) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_179_p2 = (($signed(j_fu_173_p2) < $signed(sos)) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_162_p2 = (($signed(sos) < $signed(j_1_reg_111)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_194_p1 = eos;

assign icmp_ln51_fu_194_p2 = ((j_1_reg_111 == icmp_ln51_fu_194_p1) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_199_p2 = (($signed(j1_0_reg_131) < $signed(sos)) ? 1'b1 : 1'b0);

assign j_2_fu_209_p2 = ($signed(j1_0_reg_131) + $signed(32'd4294967295));

assign j_fu_173_p2 = ($signed(j_0_in_reg_121) + $signed(32'd4294967295));

assign or_ln39_fu_184_p2 = (xor_ln39_reg_263 | icmp_ln39_1_fu_179_p2);

assign plevel_d0 = baselevel;

assign sext_ln36_fu_157_p1 = j_1_reg_111;

assign sext_ln39_fu_189_p1 = j_fu_173_p2;

assign sext_ln51_fu_147_p0 = eos;

assign sext_ln51_fu_147_p1 = sext_ln51_fu_147_p0;

assign sext_ln57_fu_204_p1 = j1_0_reg_131;

assign xor_ln39_fu_167_p2 = (icmp_ln39_fu_162_p2 ^ 1'd1);

endmodule //resolveResolved
