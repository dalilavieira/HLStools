-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity m4x4_multiply_by_m4x4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of m4x4_multiply_by_m4x4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "m4x4_multiply_by_m4x4,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=192,HLS_SYN_FF=2929,HLS_SYN_LUT=3427,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_addr_reg_854 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_1_reg_864 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dst_load_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_1_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_2_reg_906 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_3_reg_916 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_2_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dst_load_2_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_3_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_3_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_4_reg_963 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_5_reg_968 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_4_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal src_load_5_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_4_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_5_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_6_reg_1015 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_7_reg_1020 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_6_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal src_load_7_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_6_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_7_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_8_reg_1067 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_9_reg_1072 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_8_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal src_load_9_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_8_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_9_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_10_reg_1119 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_11_reg_1124 : STD_LOGIC_VECTOR (9 downto 0);
    signal src_load_10_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal src_load_11_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_10_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_11_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_12_reg_1171 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_13_reg_1176 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln22_1_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_1_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_1_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_1_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_12_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_13_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_12_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_13_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_addr_14_reg_1253 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_addr_15_reg_1258 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln24_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mul_ln24_1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_1_reg_1268 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_1_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_1_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_14_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_load_15_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_14_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_load_15_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_ln25_1_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_1_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_1_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_1_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_1_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_1_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_1_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_1_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_1_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_1_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_1_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_1_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_1_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_1_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_reg_1440 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_1_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_1_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_1_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_1_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_1_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_1_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_1_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_1_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal dst2_1_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_1_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_1_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_1_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_2_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_2_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_2_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_2_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_2_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_2_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_2_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_2_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_3_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_3_reg_1540 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_3_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_3_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_3_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_3_reg_1550 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_3_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_3_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst1_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst2_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst3_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst0_1_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal mul_ln22_2_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_3_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_2_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_3_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_2_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_3_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_2_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_3_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_2_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_3_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_2_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_3_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_2_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_3_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_2_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_3_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_2_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_3_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_2_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_3_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_2_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_3_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_2_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_3_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_2_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_3_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_2_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_3_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_2_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_3_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_786_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln22_1_reg_1191 <= add_ln22_1_fu_364_p2;
                add_ln23_1_reg_1206 <= add_ln23_1_fu_386_p2;
                dst_load_12_reg_1237 <= dst_q0;
                dst_load_13_reg_1245 <= dst_q1;
                mul_ln22_1_reg_1186 <= mul_ln22_1_fu_352_p2;
                mul_ln22_reg_1181 <= mul_ln22_fu_348_p2;
                mul_ln23_1_reg_1201 <= mul_ln23_1_fu_374_p2;
                mul_ln23_reg_1196 <= mul_ln23_fu_370_p2;
                src_load_12_reg_1211 <= src_q0;
                src_load_13_reg_1219 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln24_1_reg_1273 <= add_ln24_1_fu_428_p2;
                dst_load_14_reg_1294 <= dst_q0;
                dst_load_15_reg_1302 <= dst_q1;
                mul_ln24_1_reg_1268 <= mul_ln24_1_fu_416_p2;
                mul_ln24_reg_1263 <= mul_ln24_fu_412_p2;
                src_load_14_reg_1278 <= src_q0;
                src_load_15_reg_1286 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln25_1_reg_1320 <= add_ln25_1_fu_460_p2;
                add_ln28_1_reg_1335 <= add_ln28_1_fu_482_p2;
                add_ln29_1_reg_1350 <= add_ln29_1_fu_504_p2;
                add_ln30_1_reg_1365 <= add_ln30_1_fu_526_p2;
                add_ln31_1_reg_1380 <= add_ln31_1_fu_548_p2;
                add_ln34_1_reg_1395 <= add_ln34_1_fu_570_p2;
                add_ln35_1_reg_1410 <= add_ln35_1_fu_592_p2;
                add_ln36_1_reg_1425 <= add_ln36_1_fu_614_p2;
                add_ln37_1_reg_1440 <= add_ln37_1_fu_636_p2;
                add_ln40_1_reg_1455 <= add_ln40_1_fu_658_p2;
                add_ln41_1_reg_1470 <= add_ln41_1_fu_680_p2;
                add_ln42_1_reg_1485 <= add_ln42_1_fu_702_p2;
                add_ln43_1_reg_1500 <= add_ln43_1_fu_724_p2;
                mul_ln25_1_reg_1315 <= mul_ln25_1_fu_448_p2;
                mul_ln25_reg_1310 <= mul_ln25_fu_444_p2;
                mul_ln28_1_reg_1330 <= mul_ln28_1_fu_470_p2;
                mul_ln28_reg_1325 <= mul_ln28_fu_466_p2;
                mul_ln29_1_reg_1345 <= mul_ln29_1_fu_492_p2;
                mul_ln29_reg_1340 <= mul_ln29_fu_488_p2;
                mul_ln30_1_reg_1360 <= mul_ln30_1_fu_514_p2;
                mul_ln30_reg_1355 <= mul_ln30_fu_510_p2;
                mul_ln31_1_reg_1375 <= mul_ln31_1_fu_536_p2;
                mul_ln31_reg_1370 <= mul_ln31_fu_532_p2;
                mul_ln34_1_reg_1390 <= mul_ln34_1_fu_558_p2;
                mul_ln34_reg_1385 <= mul_ln34_fu_554_p2;
                mul_ln35_1_reg_1405 <= mul_ln35_1_fu_580_p2;
                mul_ln35_reg_1400 <= mul_ln35_fu_576_p2;
                mul_ln36_1_reg_1420 <= mul_ln36_1_fu_602_p2;
                mul_ln36_reg_1415 <= mul_ln36_fu_598_p2;
                mul_ln37_1_reg_1435 <= mul_ln37_1_fu_624_p2;
                mul_ln37_reg_1430 <= mul_ln37_fu_620_p2;
                mul_ln40_1_reg_1450 <= mul_ln40_1_fu_646_p2;
                mul_ln40_reg_1445 <= mul_ln40_fu_642_p2;
                mul_ln41_1_reg_1465 <= mul_ln41_1_fu_668_p2;
                mul_ln41_reg_1460 <= mul_ln41_fu_664_p2;
                mul_ln42_1_reg_1480 <= mul_ln42_1_fu_690_p2;
                mul_ln42_reg_1475 <= mul_ln42_fu_686_p2;
                mul_ln43_1_reg_1495 <= mul_ln43_1_fu_712_p2;
                mul_ln43_reg_1490 <= mul_ln43_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                dst0_2_reg_1520 <= dst0_2_fu_781_p2;
                dst0_3_reg_1540 <= dst0_3_fu_817_p2;
                dst1_1_reg_1505 <= dst1_1_fu_754_p2;
                dst1_2_reg_1525 <= dst1_2_fu_790_p2;
                dst1_3_reg_1545 <= dst1_3_fu_826_p2;
                dst2_1_reg_1510 <= dst2_1_fu_763_p2;
                dst2_2_reg_1530 <= dst2_2_fu_799_p2;
                dst2_3_reg_1550 <= dst2_3_fu_835_p2;
                dst3_1_reg_1515 <= dst3_1_fu_772_p2;
                dst3_2_reg_1535 <= dst3_2_fu_808_p2;
                dst3_3_reg_1555 <= dst3_3_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                dst_load_10_reg_1155 <= dst_q0;
                dst_load_11_reg_1163 <= dst_q1;
                src_load_10_reg_1129 <= src_q0;
                src_load_11_reg_1137 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                dst_load_1_reg_893 <= dst_q1;
                dst_load_reg_877 <= dst_q0;
                src_load_1_reg_885 <= src_q1;
                src_load_reg_869 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                dst_load_2_reg_929 <= dst_q0;
                dst_load_3_reg_945 <= dst_q1;
                src_load_2_reg_921 <= src_q0;
                src_load_3_reg_937 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dst_load_4_reg_999 <= dst_q0;
                dst_load_5_reg_1007 <= dst_q1;
                src_load_4_reg_973 <= src_q0;
                src_load_5_reg_981 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dst_load_6_reg_1051 <= dst_q0;
                dst_load_7_reg_1059 <= dst_q1;
                src_load_6_reg_1025 <= src_q0;
                src_load_7_reg_1033 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                dst_load_8_reg_1103 <= dst_q0;
                dst_load_9_reg_1111 <= dst_q1;
                src_load_8_reg_1077 <= src_q0;
                src_load_9_reg_1085 <= src_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_1_fu_364_p2 <= std_logic_vector(unsigned(mul_ln22_2_fu_356_p2) + unsigned(mul_ln22_3_fu_360_p2));
    add_ln22_fu_392_p2 <= std_logic_vector(unsigned(mul_ln22_1_reg_1186) + unsigned(mul_ln22_reg_1181));
    add_ln23_1_fu_386_p2 <= std_logic_vector(unsigned(mul_ln23_2_fu_378_p2) + unsigned(mul_ln23_3_fu_382_p2));
    add_ln23_fu_402_p2 <= std_logic_vector(unsigned(mul_ln23_1_reg_1201) + unsigned(mul_ln23_reg_1196));
    add_ln24_1_fu_428_p2 <= std_logic_vector(unsigned(mul_ln24_2_fu_420_p2) + unsigned(mul_ln24_3_fu_424_p2));
    add_ln24_fu_434_p2 <= std_logic_vector(unsigned(mul_ln24_1_reg_1268) + unsigned(mul_ln24_reg_1263));
    add_ln25_1_fu_460_p2 <= std_logic_vector(unsigned(mul_ln25_2_fu_452_p2) + unsigned(mul_ln25_3_fu_456_p2));
    add_ln25_fu_730_p2 <= std_logic_vector(unsigned(mul_ln25_1_reg_1315) + unsigned(mul_ln25_reg_1310));
    add_ln28_1_fu_482_p2 <= std_logic_vector(unsigned(mul_ln28_2_fu_474_p2) + unsigned(mul_ln28_3_fu_478_p2));
    add_ln28_fu_740_p2 <= std_logic_vector(unsigned(mul_ln28_1_reg_1330) + unsigned(mul_ln28_reg_1325));
    add_ln29_1_fu_504_p2 <= std_logic_vector(unsigned(mul_ln29_2_fu_496_p2) + unsigned(mul_ln29_3_fu_500_p2));
    add_ln29_fu_750_p2 <= std_logic_vector(unsigned(mul_ln29_1_reg_1345) + unsigned(mul_ln29_reg_1340));
    add_ln30_1_fu_526_p2 <= std_logic_vector(unsigned(mul_ln30_2_fu_518_p2) + unsigned(mul_ln30_3_fu_522_p2));
    add_ln30_fu_759_p2 <= std_logic_vector(unsigned(mul_ln30_1_reg_1360) + unsigned(mul_ln30_reg_1355));
    add_ln31_1_fu_548_p2 <= std_logic_vector(unsigned(mul_ln31_2_fu_540_p2) + unsigned(mul_ln31_3_fu_544_p2));
    add_ln31_fu_768_p2 <= std_logic_vector(unsigned(mul_ln31_1_reg_1375) + unsigned(mul_ln31_reg_1370));
    add_ln34_1_fu_570_p2 <= std_logic_vector(unsigned(mul_ln34_2_fu_562_p2) + unsigned(mul_ln34_3_fu_566_p2));
    add_ln34_fu_777_p2 <= std_logic_vector(unsigned(mul_ln34_1_reg_1390) + unsigned(mul_ln34_reg_1385));
    add_ln35_1_fu_592_p2 <= std_logic_vector(unsigned(mul_ln35_2_fu_584_p2) + unsigned(mul_ln35_3_fu_588_p2));
    add_ln35_fu_786_p2 <= std_logic_vector(unsigned(mul_ln35_1_reg_1405) + unsigned(mul_ln35_reg_1400));
    add_ln36_1_fu_614_p2 <= std_logic_vector(unsigned(mul_ln36_2_fu_606_p2) + unsigned(mul_ln36_3_fu_610_p2));
    add_ln36_fu_795_p2 <= std_logic_vector(unsigned(mul_ln36_1_reg_1420) + unsigned(mul_ln36_reg_1415));
    add_ln37_1_fu_636_p2 <= std_logic_vector(unsigned(mul_ln37_2_fu_628_p2) + unsigned(mul_ln37_3_fu_632_p2));
    add_ln37_fu_804_p2 <= std_logic_vector(unsigned(mul_ln37_1_reg_1435) + unsigned(mul_ln37_reg_1430));
    add_ln40_1_fu_658_p2 <= std_logic_vector(unsigned(mul_ln40_2_fu_650_p2) + unsigned(mul_ln40_3_fu_654_p2));
    add_ln40_fu_813_p2 <= std_logic_vector(unsigned(mul_ln40_1_reg_1450) + unsigned(mul_ln40_reg_1445));
    add_ln41_1_fu_680_p2 <= std_logic_vector(unsigned(mul_ln41_2_fu_672_p2) + unsigned(mul_ln41_3_fu_676_p2));
    add_ln41_fu_822_p2 <= std_logic_vector(unsigned(mul_ln41_1_reg_1465) + unsigned(mul_ln41_reg_1460));
    add_ln42_1_fu_702_p2 <= std_logic_vector(unsigned(mul_ln42_2_fu_694_p2) + unsigned(mul_ln42_3_fu_698_p2));
    add_ln42_fu_831_p2 <= std_logic_vector(unsigned(mul_ln42_1_reg_1480) + unsigned(mul_ln42_reg_1475));
    add_ln43_1_fu_724_p2 <= std_logic_vector(unsigned(mul_ln43_2_fu_716_p2) + unsigned(mul_ln43_3_fu_720_p2));
    add_ln43_fu_840_p2 <= std_logic_vector(unsigned(mul_ln43_1_reg_1495) + unsigned(mul_ln43_reg_1490));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dst0_1_fu_744_p2 <= std_logic_vector(unsigned(add_ln28_1_reg_1335) + unsigned(add_ln28_fu_740_p2));
    dst0_2_fu_781_p2 <= std_logic_vector(unsigned(add_ln34_1_reg_1395) + unsigned(add_ln34_fu_777_p2));
    dst0_3_fu_817_p2 <= std_logic_vector(unsigned(add_ln40_1_reg_1455) + unsigned(add_ln40_fu_813_p2));
    dst0_fu_396_p2 <= std_logic_vector(unsigned(add_ln22_1_reg_1191) + unsigned(add_ln22_fu_392_p2));
    dst1_1_fu_754_p2 <= std_logic_vector(unsigned(add_ln29_1_reg_1350) + unsigned(add_ln29_fu_750_p2));
    dst1_2_fu_790_p2 <= std_logic_vector(unsigned(add_ln35_1_reg_1410) + unsigned(add_ln35_fu_786_p2));
    dst1_3_fu_826_p2 <= std_logic_vector(unsigned(add_ln41_1_reg_1470) + unsigned(add_ln41_fu_822_p2));
    dst1_fu_406_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_1206) + unsigned(add_ln23_fu_402_p2));
    dst2_1_fu_763_p2 <= std_logic_vector(unsigned(add_ln30_1_reg_1365) + unsigned(add_ln30_fu_759_p2));
    dst2_2_fu_799_p2 <= std_logic_vector(unsigned(add_ln36_1_reg_1425) + unsigned(add_ln36_fu_795_p2));
    dst2_3_fu_835_p2 <= std_logic_vector(unsigned(add_ln42_1_reg_1485) + unsigned(add_ln42_fu_831_p2));
    dst2_fu_438_p2 <= std_logic_vector(unsigned(add_ln24_1_reg_1273) + unsigned(add_ln24_fu_434_p2));
    dst3_1_fu_772_p2 <= std_logic_vector(unsigned(add_ln31_1_reg_1380) + unsigned(add_ln31_fu_768_p2));
    dst3_2_fu_808_p2 <= std_logic_vector(unsigned(add_ln37_1_reg_1440) + unsigned(add_ln37_fu_804_p2));
    dst3_3_fu_844_p2 <= std_logic_vector(unsigned(add_ln43_1_reg_1500) + unsigned(add_ln43_fu_840_p2));
    dst3_fu_734_p2 <= std_logic_vector(unsigned(add_ln25_1_reg_1320) + unsigned(add_ln25_fu_730_p2));
    dst_addr_10_reg_1119 <= ap_const_lv64_A(10 - 1 downto 0);
    dst_addr_11_reg_1124 <= ap_const_lv64_E(10 - 1 downto 0);
    dst_addr_12_reg_1171 <= ap_const_lv64_3(10 - 1 downto 0);
    dst_addr_13_reg_1176 <= ap_const_lv64_7(10 - 1 downto 0);
    dst_addr_14_reg_1253 <= ap_const_lv64_B(10 - 1 downto 0);
    dst_addr_15_reg_1258 <= ap_const_lv64_F(10 - 1 downto 0);
    dst_addr_1_reg_864 <= ap_const_lv64_4(10 - 1 downto 0);
    dst_addr_2_reg_906 <= ap_const_lv64_8(10 - 1 downto 0);
    dst_addr_3_reg_916 <= ap_const_lv64_C(10 - 1 downto 0);
    dst_addr_4_reg_963 <= ap_const_lv64_1(10 - 1 downto 0);
    dst_addr_5_reg_968 <= ap_const_lv64_5(10 - 1 downto 0);
    dst_addr_6_reg_1015 <= ap_const_lv64_9(10 - 1 downto 0);
    dst_addr_7_reg_1020 <= ap_const_lv64_D(10 - 1 downto 0);
    dst_addr_8_reg_1067 <= ap_const_lv64_2(10 - 1 downto 0);
    dst_addr_9_reg_1072 <= ap_const_lv64_6(10 - 1 downto 0);
    dst_addr_reg_854 <= ap_const_lv64_0(10 - 1 downto 0);

    dst_address0_assign_proc : process(ap_CS_fsm_state1, dst_addr_reg_854, ap_CS_fsm_state2, dst_addr_2_reg_906, ap_CS_fsm_state3, dst_addr_4_reg_963, ap_CS_fsm_state4, dst_addr_6_reg_1015, ap_CS_fsm_state5, dst_addr_8_reg_1067, ap_CS_fsm_state6, dst_addr_10_reg_1119, ap_CS_fsm_state7, dst_addr_12_reg_1171, ap_CS_fsm_state8, dst_addr_14_reg_1253, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dst_address0 <= dst_addr_14_reg_1253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_address0 <= dst_addr_12_reg_1171;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_address0 <= dst_addr_10_reg_1119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address0 <= dst_addr_8_reg_1067;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_address0 <= dst_addr_6_reg_1015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_address0 <= dst_addr_4_reg_963;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_address0 <= dst_addr_2_reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_address0 <= dst_addr_reg_854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address0 <= ap_const_lv64_B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address0 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address0 <= ap_const_lv64_A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= ap_const_lv64_9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_address0 <= ap_const_lv64_1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_address0 <= ap_const_lv64_8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dst_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            dst_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_state1, dst_addr_1_reg_864, ap_CS_fsm_state2, dst_addr_3_reg_916, ap_CS_fsm_state3, dst_addr_5_reg_968, ap_CS_fsm_state4, dst_addr_7_reg_1020, ap_CS_fsm_state5, dst_addr_9_reg_1072, ap_CS_fsm_state6, dst_addr_11_reg_1124, ap_CS_fsm_state7, dst_addr_13_reg_1176, ap_CS_fsm_state8, dst_addr_15_reg_1258, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_address1 <= dst_addr_15_reg_1258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dst_address1 <= dst_addr_13_reg_1176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_address1 <= dst_addr_11_reg_1124;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_address1 <= dst_addr_9_reg_1072;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address1 <= dst_addr_7_reg_1020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_address1 <= dst_addr_5_reg_968;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_address1 <= dst_addr_3_reg_916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_address1 <= dst_addr_1_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address1 <= ap_const_lv64_F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address1 <= ap_const_lv64_7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address1 <= ap_const_lv64_E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address1 <= ap_const_lv64_6(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address1 <= ap_const_lv64_D(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_address1 <= ap_const_lv64_5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_address1 <= ap_const_lv64_C(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dst_address1 <= ap_const_lv64_4(10 - 1 downto 0);
        else 
            dst_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, dst2_1_reg_1510, dst0_2_reg_1520, dst2_2_reg_1530, dst0_3_reg_1540, dst2_3_reg_1550, dst0_fu_396_p2, dst2_fu_438_p2, dst0_1_fu_744_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dst_d0 <= dst2_3_reg_1550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_d0 <= dst0_3_reg_1540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_d0 <= dst2_2_reg_1530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_d0 <= dst0_2_reg_1520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_d0 <= dst2_1_reg_1510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_d0 <= dst0_1_fu_744_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_d0 <= dst2_fu_438_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_d0 <= dst0_fu_396_p2;
        else 
            dst_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_state9, dst1_1_reg_1505, ap_CS_fsm_state11, dst3_1_reg_1515, dst1_2_reg_1525, dst3_2_reg_1535, dst1_3_reg_1545, dst3_3_reg_1555, dst1_fu_406_p2, dst3_fu_734_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_d1 <= dst3_3_reg_1555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dst_d1 <= dst1_3_reg_1545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_d1 <= dst3_2_reg_1535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_d1 <= dst1_2_reg_1525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_d1 <= dst3_1_reg_1515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_d1 <= dst1_1_reg_1505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_d1 <= dst3_fu_734_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_d1 <= dst1_fu_406_p2;
        else 
            dst_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln22_1_fu_352_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_1_reg_893) * signed(src_load_1_reg_885))), 32));
    mul_ln22_2_fu_356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_2_reg_929) * signed(src_load_2_reg_921))), 32));
    mul_ln22_3_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_3_reg_945) * signed(src_load_3_reg_937))), 32));
    mul_ln22_fu_348_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_reg_877) * signed(src_load_reg_869))), 32));
    mul_ln23_1_fu_374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_5_reg_981) * signed(dst_load_1_reg_893))), 32));
    mul_ln23_2_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_6_reg_1025) * signed(dst_load_2_reg_929))), 32));
    mul_ln23_3_fu_382_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_7_reg_1033) * signed(dst_load_3_reg_945))), 32));
    mul_ln23_fu_370_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_4_reg_973) * signed(dst_load_reg_877))), 32));
    mul_ln24_1_fu_416_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_9_reg_1085) * signed(dst_load_1_reg_893))), 32));
    mul_ln24_2_fu_420_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_10_reg_1129) * signed(dst_load_2_reg_929))), 32));
    mul_ln24_3_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_11_reg_1137) * signed(dst_load_3_reg_945))), 32));
    mul_ln24_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_8_reg_1077) * signed(dst_load_reg_877))), 32));
    mul_ln25_1_fu_448_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_13_reg_1219) * signed(dst_load_1_reg_893))), 32));
    mul_ln25_2_fu_452_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_14_reg_1278) * signed(dst_load_2_reg_929))), 32));
    mul_ln25_3_fu_456_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_15_reg_1286) * signed(dst_load_3_reg_945))), 32));
    mul_ln25_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_12_reg_1211) * signed(dst_load_reg_877))), 32));
    mul_ln28_1_fu_470_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_5_reg_1007) * signed(src_load_1_reg_885))), 32));
    mul_ln28_2_fu_474_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_6_reg_1051) * signed(src_load_2_reg_921))), 32));
    mul_ln28_3_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_7_reg_1059) * signed(src_load_3_reg_937))), 32));
    mul_ln28_fu_466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_4_reg_999) * signed(src_load_reg_869))), 32));
    mul_ln29_1_fu_492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_5_reg_981) * signed(dst_load_5_reg_1007))), 32));
    mul_ln29_2_fu_496_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_6_reg_1025) * signed(dst_load_6_reg_1051))), 32));
    mul_ln29_3_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_7_reg_1033) * signed(dst_load_7_reg_1059))), 32));
    mul_ln29_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_4_reg_973) * signed(dst_load_4_reg_999))), 32));
    mul_ln30_1_fu_514_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_9_reg_1085) * signed(dst_load_5_reg_1007))), 32));
    mul_ln30_2_fu_518_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_10_reg_1129) * signed(dst_load_6_reg_1051))), 32));
    mul_ln30_3_fu_522_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_11_reg_1137) * signed(dst_load_7_reg_1059))), 32));
    mul_ln30_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_8_reg_1077) * signed(dst_load_4_reg_999))), 32));
    mul_ln31_1_fu_536_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_13_reg_1219) * signed(dst_load_5_reg_1007))), 32));
    mul_ln31_2_fu_540_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_14_reg_1278) * signed(dst_load_6_reg_1051))), 32));
    mul_ln31_3_fu_544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_15_reg_1286) * signed(dst_load_7_reg_1059))), 32));
    mul_ln31_fu_532_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_12_reg_1211) * signed(dst_load_4_reg_999))), 32));
    mul_ln34_1_fu_558_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_9_reg_1111) * signed(src_load_1_reg_885))), 32));
    mul_ln34_2_fu_562_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_10_reg_1155) * signed(src_load_2_reg_921))), 32));
    mul_ln34_3_fu_566_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_11_reg_1163) * signed(src_load_3_reg_937))), 32));
    mul_ln34_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_8_reg_1103) * signed(src_load_reg_869))), 32));
    mul_ln35_1_fu_580_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_5_reg_981) * signed(dst_load_9_reg_1111))), 32));
    mul_ln35_2_fu_584_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_6_reg_1025) * signed(dst_load_10_reg_1155))), 32));
    mul_ln35_3_fu_588_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_7_reg_1033) * signed(dst_load_11_reg_1163))), 32));
    mul_ln35_fu_576_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_4_reg_973) * signed(dst_load_8_reg_1103))), 32));
    mul_ln36_1_fu_602_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_9_reg_1085) * signed(dst_load_9_reg_1111))), 32));
    mul_ln36_2_fu_606_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_10_reg_1129) * signed(dst_load_10_reg_1155))), 32));
    mul_ln36_3_fu_610_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_11_reg_1137) * signed(dst_load_11_reg_1163))), 32));
    mul_ln36_fu_598_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_8_reg_1077) * signed(dst_load_8_reg_1103))), 32));
    mul_ln37_1_fu_624_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_13_reg_1219) * signed(dst_load_9_reg_1111))), 32));
    mul_ln37_2_fu_628_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_14_reg_1278) * signed(dst_load_10_reg_1155))), 32));
    mul_ln37_3_fu_632_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_15_reg_1286) * signed(dst_load_11_reg_1163))), 32));
    mul_ln37_fu_620_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_12_reg_1211) * signed(dst_load_8_reg_1103))), 32));
    mul_ln40_1_fu_646_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_13_reg_1245) * signed(src_load_1_reg_885))), 32));
    mul_ln40_2_fu_650_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_14_reg_1294) * signed(src_load_2_reg_921))), 32));
    mul_ln40_3_fu_654_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_15_reg_1302) * signed(src_load_3_reg_937))), 32));
    mul_ln40_fu_642_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dst_load_12_reg_1237) * signed(src_load_reg_869))), 32));
    mul_ln41_1_fu_668_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_5_reg_981) * signed(dst_load_13_reg_1245))), 32));
    mul_ln41_2_fu_672_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_6_reg_1025) * signed(dst_load_14_reg_1294))), 32));
    mul_ln41_3_fu_676_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_7_reg_1033) * signed(dst_load_15_reg_1302))), 32));
    mul_ln41_fu_664_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_4_reg_973) * signed(dst_load_12_reg_1237))), 32));
    mul_ln42_1_fu_690_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_9_reg_1085) * signed(dst_load_13_reg_1245))), 32));
    mul_ln42_2_fu_694_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_10_reg_1129) * signed(dst_load_14_reg_1294))), 32));
    mul_ln42_3_fu_698_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_11_reg_1137) * signed(dst_load_15_reg_1302))), 32));
    mul_ln42_fu_686_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_8_reg_1077) * signed(dst_load_12_reg_1237))), 32));
    mul_ln43_1_fu_712_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_13_reg_1219) * signed(dst_load_13_reg_1245))), 32));
    mul_ln43_2_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_14_reg_1278) * signed(dst_load_14_reg_1294))), 32));
    mul_ln43_3_fu_720_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_15_reg_1286) * signed(dst_load_15_reg_1302))), 32));
    mul_ln43_fu_708_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(src_load_12_reg_1211) * signed(dst_load_12_reg_1237))), 32));

    src_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            src_address0 <= ap_const_lv64_E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            src_address0 <= ap_const_lv64_C(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address0 <= ap_const_lv64_A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address0 <= ap_const_lv64_8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= ap_const_lv64_6(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address0 <= ap_const_lv64_4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            src_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            src_address1 <= ap_const_lv64_F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            src_address1 <= ap_const_lv64_D(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address1 <= ap_const_lv64_B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address1 <= ap_const_lv64_9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address1 <= ap_const_lv64_7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address1 <= ap_const_lv64_5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            src_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
