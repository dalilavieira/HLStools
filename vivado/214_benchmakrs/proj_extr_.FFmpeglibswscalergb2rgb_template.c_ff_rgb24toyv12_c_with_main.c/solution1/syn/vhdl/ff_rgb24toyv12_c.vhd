-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ff_rgb24toyv12_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ydst_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ydst_ce0 : OUT STD_LOGIC;
    ydst_we0 : OUT STD_LOGIC;
    ydst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    udst_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    udst_ce0 : OUT STD_LOGIC;
    udst_we0 : OUT STD_LOGIC;
    udst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    vdst_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    vdst_ce0 : OUT STD_LOGIC;
    vdst_we0 : OUT STD_LOGIC;
    vdst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    lumStride : IN STD_LOGIC_VECTOR (31 downto 0);
    chromStride : IN STD_LOGIC_VECTOR (31 downto 0);
    srcStride : IN STD_LOGIC_VECTOR (31 downto 0);
    rgb2yuv_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rgb2yuv_ce0 : OUT STD_LOGIC;
    rgb2yuv_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ff_rgb24toyv12_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ff_rgb24toyv12_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=986,HLS_SYN_LUT=1924,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ry_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_970 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln60_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln60_reg_976 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln82_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln82_reg_981 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln82_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln82_reg_986 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_reg_996 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln37_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln40_fu_560_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln40_reg_1010 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_573_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_reg_1018 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln1_fu_595_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln39_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln40_fu_603_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln40_reg_1029 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_fu_609_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_reg_1037 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_fu_656_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_reg_1058 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln62_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln72_fu_665_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_reg_1068 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1079 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_2_fu_694_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_2_reg_1084 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln57_fu_770_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln57_reg_1105 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_fu_788_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_2_reg_1113 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln2_fu_810_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln2_reg_1118 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln65_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln66_fu_818_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln66_reg_1124 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln82_fu_850_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_fu_855_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln84_fu_860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln79_fu_945_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_reg_1182 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_0_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_03_rec_reg_300 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_rec_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_rec_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_336 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_reg_347 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln40_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal V_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_453_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln1_fu_465_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln37_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln37_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_505_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln37_fu_515_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_521_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_531_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln37_1_fu_539_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln39_fu_564_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln40_1_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_2_fu_591_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln2_fu_583_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln41_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_fu_630_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln62_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_3_fu_652_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_4_fu_661_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_fu_670_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_1_fu_675_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln37_1_fu_685_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_698_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_1_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_1_fu_718_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_fu_728_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_1_fu_733_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln50_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln57_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln65_fu_779_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln66_fu_794_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_1_fu_806_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln3_fu_798_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_1_fu_824_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln67_fu_834_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln67_fu_840_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_fu_871_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_1_fu_876_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_fu_886_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln74_1_fu_891_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_fu_901_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_1_fu_906_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_fu_916_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln76_1_fu_921_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_1_fu_931_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln79_fu_940_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_555_p2 = ap_const_lv1_0))) then 
                i_0_reg_336 <= ap_const_lv30_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_336 <= i_reg_1018;
            end if; 
        end if;
    end process;

    i_1_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_647_p2 = ap_const_lv1_0) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0) and (icmp_ln37_reg_1006 = ap_const_lv1_0))) then 
                i_1_reg_347 <= ap_const_lv30_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_347 <= i_2_reg_1113;
            end if; 
        end if;
    end process;

    p_01_rec_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_0))) then 
                p_01_rec_reg_312 <= add_ln83_fu_855_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_01_rec_reg_312 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_03_rec_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_0))) then 
                p_03_rec_reg_300 <= add_ln82_fu_850_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_03_rec_reg_300 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_0_rec_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_0))) then 
                p_0_rec_reg_324 <= add_ln84_fu_860_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_0_rec_reg_324 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_364 <= src_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_364 <= src_q0;
            end if; 
        end if;
    end process;

    y_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_0))) then 
                y_0_reg_288 <= y_fu_865_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                y_0_reg_288 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln48_reg_1079 <= add_ln48_fu_689_p2;
                trunc_ln37_2_reg_1084 <= trunc_ln37_2_fu_694_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln57_reg_1105 <= add_ln57_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_647_p2 = ap_const_lv1_0) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0) and (icmp_ln37_reg_1006 = ap_const_lv1_0))) then
                add_ln66_reg_1058 <= add_ln66_fu_656_p2;
                add_ln72_reg_1068 <= add_ln72_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln79_reg_1182 <= add_ln79_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_2_reg_1113 <= i_2_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln37_reg_1006 = ap_const_lv1_0))) then
                i_reg_1018 <= i_fu_573_p2;
                trunc_ln40_reg_1010 <= trunc_ln40_fu_560_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln37_reg_1006 <= icmp_ln37_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_369 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_391 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_395 <= grp_fu_385_p2;
                reg_409 <= grp_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_413 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ry_reg_964 <= rgb2yuv_q0;
                sext_ln82_reg_986 <= sext_ln82_fu_449_p1;
                    sext_ln83_reg_991(63 downto 1) <= sext_ln83_fu_461_p1(63 downto 1);
                    sext_ln84_reg_996(63 downto 1) <= sext_ln84_fu_473_p1(63 downto 1);
                    tmp_3_reg_1001(31 downto 1) <= tmp_3_fu_547_p3(31 downto 1);
                trunc_ln60_reg_976 <= trunc_ln60_fu_441_p1;
                trunc_ln82_reg_981 <= trunc_ln82_fu_445_p1;
                trunc_ln_reg_970 <= width(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln39_fu_568_p2 = ap_const_lv1_1) and (icmp_ln37_reg_1006 = ap_const_lv1_0))) then
                    sub_ln40_reg_1029(10 downto 1) <= sub_ln40_fu_603_p2(10 downto 1);
                trunc_ln37_reg_1037 <= trunc_ln37_fu_609_p1;
                    zext_ln1_reg_1023(10 downto 1) <= zext_ln1_fu_595_p3(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_1))) then
                    sub_ln66_reg_1124(10 downto 1) <= sub_ln66_fu_818_p2(10 downto 1);
                    zext_ln2_reg_1118(10 downto 1) <= zext_ln2_fu_810_p3(10 downto 1);
            end if;
        end if;
    end process;
    sext_ln83_reg_991(0) <= '0';
    sext_ln84_reg_996(0) <= '0';
    tmp_3_reg_1001(0) <= '0';
    zext_ln1_reg_1023(0) <= '0';
    sub_ln40_reg_1029(0) <= '0';
    zext_ln2_reg_1118(0) <= '0';
    sub_ln66_reg_1124(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln37_reg_1006, ap_CS_fsm_state4, icmp_ln39_fu_568_p2, icmp_ln62_fu_647_p2, ap_CS_fsm_state10, icmp_ln65_fu_783_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln37_reg_1006 = ap_const_lv1_1) or ((icmp_ln62_fu_647_p2 = ap_const_lv1_1) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_647_p2 = ap_const_lv1_0) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0) and (icmp_ln37_reg_1006 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln65_fu_783_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    V_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv32_80) + unsigned(reg_409));
    add_ln37_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(height));
    add_ln40_fu_613_p2 <= std_logic_vector(unsigned(sub_ln40_fu_603_p2) + unsigned(trunc_ln37_fu_609_p1));
    add_ln41_fu_630_p2 <= std_logic_vector(unsigned(or_ln41_fu_624_p2) + unsigned(trunc_ln37_fu_609_p1));
    add_ln42_1_fu_675_p2 <= std_logic_vector(unsigned(add_ln42_fu_670_p2) + unsigned(trunc_ln37_reg_1037));
    add_ln42_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(sub_ln40_reg_1029));
    add_ln48_fu_689_p2 <= std_logic_vector(unsigned(trunc_ln40_reg_1010) + unsigned(trunc_ln37_1_fu_685_p1));
    add_ln50_fu_756_p2 <= std_logic_vector(unsigned(zext_ln1_reg_1023) + unsigned(trunc_ln37_2_reg_1084));
    add_ln52_1_fu_703_p2 <= std_logic_vector(unsigned(add_ln52_fu_698_p2) + unsigned(trunc_ln37_reg_1037));
    add_ln52_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(sub_ln40_reg_1029));
    add_ln53_1_fu_718_p2 <= std_logic_vector(unsigned(add_ln53_fu_713_p2) + unsigned(trunc_ln37_reg_1037));
    add_ln53_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(sub_ln40_reg_1029));
    add_ln54_1_fu_733_p2 <= std_logic_vector(unsigned(add_ln54_fu_728_p2) + unsigned(trunc_ln37_reg_1037));
    add_ln54_fu_728_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(sub_ln40_reg_1029));
    add_ln57_fu_770_p2 <= std_logic_vector(unsigned(or_ln57_fu_765_p2) + unsigned(trunc_ln37_2_reg_1084));
    add_ln66_1_fu_824_p2 <= std_logic_vector(unsigned(sub_ln66_fu_818_p2) + unsigned(add_ln66_reg_1058));
    add_ln66_fu_656_p2 <= std_logic_vector(unsigned(trunc_ln82_reg_981) + unsigned(trunc_ln37_3_fu_652_p1));
    add_ln67_fu_840_p2 <= std_logic_vector(unsigned(or_ln67_fu_834_p2) + unsigned(add_ln66_reg_1058));
    add_ln68_1_fu_876_p2 <= std_logic_vector(unsigned(add_ln68_fu_871_p2) + unsigned(add_ln66_reg_1058));
    add_ln68_fu_871_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(sub_ln66_reg_1124));
    add_ln72_1_fu_931_p2 <= std_logic_vector(unsigned(zext_ln2_reg_1118) + unsigned(add_ln72_reg_1068));
    add_ln72_fu_665_p2 <= std_logic_vector(unsigned(trunc_ln60_reg_976) + unsigned(trunc_ln37_4_fu_661_p1));
    add_ln74_1_fu_891_p2 <= std_logic_vector(unsigned(add_ln74_fu_886_p2) + unsigned(add_ln66_reg_1058));
    add_ln74_fu_886_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(sub_ln66_reg_1124));
    add_ln75_1_fu_906_p2 <= std_logic_vector(unsigned(add_ln75_fu_901_p2) + unsigned(add_ln66_reg_1058));
    add_ln75_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(sub_ln66_reg_1124));
    add_ln76_1_fu_921_p2 <= std_logic_vector(unsigned(add_ln76_fu_916_p2) + unsigned(add_ln66_reg_1058));
    add_ln76_fu_916_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(sub_ln66_reg_1124));
    add_ln79_fu_945_p2 <= std_logic_vector(unsigned(or_ln79_fu_940_p2) + unsigned(add_ln72_reg_1068));
    add_ln82_fu_850_p2 <= std_logic_vector(signed(sext_ln82_reg_986) + signed(p_03_rec_reg_300));
    add_ln83_fu_855_p2 <= std_logic_vector(signed(sext_ln83_reg_991) + signed(p_01_rec_reg_312));
    add_ln84_fu_860_p2 <= std_logic_vector(signed(sext_ln84_reg_996) + signed(p_0_rec_reg_324));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(icmp_ln37_reg_1006, ap_CS_fsm_state4, icmp_ln39_fu_568_p2, icmp_ln62_fu_647_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln37_reg_1006 = ap_const_lv1_1) or ((icmp_ln62_fu_647_p2 = ap_const_lv1_1) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln37_reg_1006, ap_CS_fsm_state4, icmp_ln39_fu_568_p2, icmp_ln62_fu_647_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln37_reg_1006 = ap_const_lv1_1) or ((icmp_ln62_fu_647_p2 = ap_const_lv1_1) and (icmp_ln39_fu_568_p2 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_358_p2 <= std_logic_vector(unsigned(src_q1) + unsigned(src_q0));
    grp_fu_373_p2 <= std_logic_vector(unsigned(src_q0) + unsigned(reg_369));
    grp_fu_379_p2 <= std_logic_vector(unsigned(reg_364) + unsigned(grp_fu_373_p2));
    grp_fu_385_p2 <= std_logic_vector(unsigned(reg_364) + unsigned(grp_fu_358_p2));
    grp_fu_399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_391) * signed(ry_reg_964))), 32));
    grp_fu_404_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_395) * signed(ry_reg_964))), 32));
    grp_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(reg_409));
    grp_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(reg_413));
    i_2_fu_788_p2 <= std_logic_vector(unsigned(i_1_reg_347) + unsigned(ap_const_lv30_1));
    i_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(i_0_reg_336));
    icmp_ln37_fu_555_p2 <= "1" when (y_0_reg_288 = tmp_3_reg_1001) else "0";
    icmp_ln39_fu_568_p2 <= "1" when (signed(zext_ln39_fu_564_p1) < signed(trunc_ln_reg_970)) else "0";
    icmp_ln62_fu_647_p2 <= "1" when (or_ln62_fu_641_p2 = height) else "0";
    icmp_ln65_fu_783_p2 <= "1" when (signed(zext_ln65_fu_779_p1) < signed(trunc_ln_reg_970)) else "0";
    or_ln41_fu_624_p2 <= (sub_ln40_fu_603_p2 or ap_const_lv11_1);
    or_ln57_fu_765_p2 <= (zext_ln1_reg_1023 or ap_const_lv11_1);
    or_ln62_fu_641_p2 <= (y_0_reg_288 or ap_const_lv32_1);
    or_ln67_fu_834_p2 <= (sub_ln66_fu_818_p2 or ap_const_lv11_1);
    or_ln79_fu_940_p2 <= (zext_ln2_reg_1118 or ap_const_lv11_1);
    p_lshr_fu_505_p4 <= xor_ln37_fu_499_p2(31 downto 1);
    rgb2yuv_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    rgb2yuv_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rgb2yuv_ce0 <= ap_const_logic_1;
        else 
            rgb2yuv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln37_1_fu_539_p3 <= 
        ap_const_lv31_0 when (tmp_fu_477_p3(0) = '1') else 
        select_ln37_fu_531_p3;
    select_ln37_fu_531_p3 <= 
        sub_ln37_fu_515_p2 when (tmp_1_fu_491_p3(0) = '1') else 
        tmp_2_fu_521_p4;
        sext_ln82_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(chromStride),64));

        sext_ln83_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_453_p3),64));

        sext_ln84_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_465_p3),64));

    shl_ln1_fu_465_p3 <= (srcStride & ap_const_lv1_0);
    shl_ln2_fu_583_p3 <= (trunc_ln40_1_fu_579_p1 & ap_const_lv3_0);
    shl_ln3_fu_798_p3 <= (trunc_ln66_fu_794_p1 & ap_const_lv3_0);
    shl_ln_fu_453_p3 <= (lumStride & ap_const_lv1_0);

    src_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state10, zext_ln40_fu_619_p1, zext_ln42_fu_680_p1, zext_ln53_fu_723_p1, zext_ln66_fu_829_p1, zext_ln68_fu_881_p1, zext_ln75_fu_911_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            src_address0 <= zext_ln75_fu_911_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            src_address0 <= zext_ln68_fu_881_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            src_address0 <= zext_ln66_fu_829_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address0 <= zext_ln53_fu_723_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address0 <= zext_ln42_fu_680_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= zext_ln40_fu_619_p1(10 - 1 downto 0);
        else 
            src_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state10, zext_ln41_fu_636_p1, zext_ln52_fu_708_p1, zext_ln54_fu_738_p1, zext_ln67_fu_845_p1, zext_ln74_fu_896_p1, zext_ln76_fu_926_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            src_address1 <= zext_ln76_fu_926_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            src_address1 <= zext_ln74_fu_896_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            src_address1 <= zext_ln67_fu_845_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address1 <= zext_ln54_fu_738_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address1 <= zext_ln52_fu_708_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address1 <= zext_ln41_fu_636_p1(10 - 1 downto 0);
        else 
            src_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln37_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_505_p4));
    sub_ln40_fu_603_p2 <= std_logic_vector(unsigned(shl_ln2_fu_583_p3) - unsigned(zext_ln1_fu_595_p3));
    sub_ln66_fu_818_p2 <= std_logic_vector(unsigned(shl_ln3_fu_798_p3) - unsigned(zext_ln2_fu_810_p3));
    tmp_1_fu_491_p3 <= add_ln37_fu_485_p2(31 downto 31);
    tmp_2_fu_521_p4 <= add_ln37_fu_485_p2(31 downto 1);
    tmp_3_fu_547_p3 <= (select_ln37_1_fu_539_p3 & ap_const_lv1_0);
    tmp_fu_477_p3 <= height(31 downto 31);
    trunc_ln37_1_fu_685_p1 <= p_03_rec_reg_300(11 - 1 downto 0);
    trunc_ln37_2_fu_694_p1 <= p_01_rec_reg_312(11 - 1 downto 0);
    trunc_ln37_3_fu_652_p1 <= p_0_rec_reg_324(11 - 1 downto 0);
    trunc_ln37_4_fu_661_p1 <= p_01_rec_reg_312(11 - 1 downto 0);
    trunc_ln37_fu_609_p1 <= p_0_rec_reg_324(11 - 1 downto 0);
    trunc_ln40_1_fu_579_p1 <= i_0_reg_336(8 - 1 downto 0);
    trunc_ln40_2_fu_591_p1 <= i_0_reg_336(10 - 1 downto 0);
    trunc_ln40_fu_560_p1 <= i_0_reg_336(11 - 1 downto 0);
    trunc_ln60_fu_441_p1 <= lumStride(11 - 1 downto 0);
    trunc_ln66_1_fu_806_p1 <= i_1_reg_347(10 - 1 downto 0);
    trunc_ln66_fu_794_p1 <= i_1_reg_347(8 - 1 downto 0);
    trunc_ln82_fu_445_p1 <= srcStride(11 - 1 downto 0);
    udst_address0 <= zext_ln48_fu_751_p1(10 - 1 downto 0);

    udst_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            udst_ce0 <= ap_const_logic_1;
        else 
            udst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    udst_d0 <= V_fu_743_p2;

    udst_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            udst_we0 <= ap_const_logic_1;
        else 
            udst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    vdst_address0 <= zext_ln48_fu_751_p1(10 - 1 downto 0);

    vdst_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vdst_ce0 <= ap_const_logic_1;
        else 
            vdst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vdst_d0 <= V_fu_743_p2;

    vdst_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            vdst_we0 <= ap_const_logic_1;
        else 
            vdst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln37_fu_499_p2 <= (height xor ap_const_lv32_FFFFFFFF);
    y_fu_865_p2 <= std_logic_vector(unsigned(y_0_reg_288) + unsigned(ap_const_lv32_2));

    ydst_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15, zext_ln50_fu_760_p1, zext_ln57_fu_775_p1, zext_ln72_fu_935_p1, zext_ln79_fu_950_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ydst_address0 <= zext_ln79_fu_950_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ydst_address0 <= zext_ln72_fu_935_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ydst_address0 <= zext_ln57_fu_775_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ydst_address0 <= zext_ln50_fu_760_p1(10 - 1 downto 0);
        else 
            ydst_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    ydst_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ydst_ce0 <= ap_const_logic_1;
        else 
            ydst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ydst_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15, grp_fu_417_p2, grp_fu_424_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ydst_d0 <= grp_fu_424_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ydst_d0 <= grp_fu_417_p2;
        else 
            ydst_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ydst_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ydst_we0 <= ap_const_logic_1;
        else 
            ydst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1_fu_595_p3 <= (trunc_ln40_2_fu_591_p1 & ap_const_lv1_0);
    zext_ln2_fu_810_p3 <= (trunc_ln66_1_fu_806_p1 & ap_const_lv1_0);
    zext_ln39_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_336),31));
    zext_ln40_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_613_p2),64));
    zext_ln41_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_630_p2),64));
    zext_ln42_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_675_p2),64));
    zext_ln48_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1079),64));
    zext_ln50_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_756_p2),64));
    zext_ln52_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_fu_703_p2),64));
    zext_ln53_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_1_fu_718_p2),64));
    zext_ln54_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_733_p2),64));
    zext_ln57_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_1105),64));
    zext_ln65_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_347),31));
    zext_ln66_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_1_fu_824_p2),64));
    zext_ln67_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_840_p2),64));
    zext_ln68_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_1_fu_876_p2),64));
    zext_ln72_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_1_fu_931_p2),64));
    zext_ln74_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_1_fu_891_p2),64));
    zext_ln75_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_906_p2),64));
    zext_ln76_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_fu_921_p2),64));
    zext_ln79_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_reg_1182),64));
end behav;
