// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ff_rgb24toyv12_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=986,HLS_SYN_LUT=1924,HLS_VERSION=2019_1}" *)

module ff_rgb24toyv12_c (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        ydst_address0,
        ydst_ce0,
        ydst_we0,
        ydst_d0,
        udst_address0,
        udst_ce0,
        udst_we0,
        udst_d0,
        vdst_address0,
        vdst_ce0,
        vdst_we0,
        vdst_d0,
        width,
        height,
        lumStride,
        chromStride,
        srcStride,
        rgb2yuv_address0,
        rgb2yuv_ce0,
        rgb2yuv_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] src_address0;
output   src_ce0;
input  [31:0] src_q0;
output  [9:0] src_address1;
output   src_ce1;
input  [31:0] src_q1;
output  [9:0] ydst_address0;
output   ydst_ce0;
output   ydst_we0;
output  [31:0] ydst_d0;
output  [9:0] udst_address0;
output   udst_ce0;
output   udst_we0;
output  [31:0] udst_d0;
output  [9:0] vdst_address0;
output   vdst_ce0;
output   vdst_we0;
output  [31:0] vdst_d0;
input  [31:0] width;
input  [31:0] height;
input  [31:0] lumStride;
input  [31:0] chromStride;
input  [31:0] srcStride;
output  [9:0] rgb2yuv_address0;
output   rgb2yuv_ce0;
input  [31:0] rgb2yuv_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] src_address0;
reg src_ce0;
reg[9:0] src_address1;
reg src_ce1;
reg[9:0] ydst_address0;
reg ydst_ce0;
reg ydst_we0;
reg[31:0] ydst_d0;
reg udst_ce0;
reg udst_we0;
reg vdst_ce0;
reg vdst_we0;
reg rgb2yuv_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_364;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [31:0] reg_369;
wire  signed [31:0] grp_fu_379_p2;
reg  signed [31:0] reg_391;
wire  signed [31:0] grp_fu_385_p2;
reg  signed [31:0] reg_395;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_399_p2;
reg   [31:0] reg_409;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] reg_413;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state2;
reg  signed [31:0] ry_reg_964;
reg   [30:0] trunc_ln_reg_970;
wire   [10:0] trunc_ln60_fu_441_p1;
reg   [10:0] trunc_ln60_reg_976;
wire   [10:0] trunc_ln82_fu_445_p1;
reg   [10:0] trunc_ln82_reg_981;
wire  signed [63:0] sext_ln82_fu_449_p1;
reg  signed [63:0] sext_ln82_reg_986;
wire  signed [63:0] sext_ln83_fu_461_p1;
reg  signed [63:0] sext_ln83_reg_991;
wire  signed [63:0] sext_ln84_fu_473_p1;
reg  signed [63:0] sext_ln84_reg_996;
wire   [31:0] tmp_3_fu_547_p3;
reg   [31:0] tmp_3_reg_1001;
wire   [0:0] icmp_ln37_fu_555_p2;
reg   [0:0] icmp_ln37_reg_1006;
wire    ap_CS_fsm_state3;
wire   [10:0] trunc_ln40_fu_560_p1;
reg   [10:0] trunc_ln40_reg_1010;
wire    ap_CS_fsm_state4;
wire   [29:0] i_fu_573_p2;
reg   [29:0] i_reg_1018;
wire   [10:0] zext_ln1_fu_595_p3;
reg   [10:0] zext_ln1_reg_1023;
wire   [0:0] icmp_ln39_fu_568_p2;
wire   [10:0] sub_ln40_fu_603_p2;
reg   [10:0] sub_ln40_reg_1029;
wire   [10:0] trunc_ln37_fu_609_p1;
reg   [10:0] trunc_ln37_reg_1037;
wire   [10:0] add_ln66_fu_656_p2;
reg   [10:0] add_ln66_reg_1058;
wire   [0:0] icmp_ln62_fu_647_p2;
wire   [10:0] add_ln72_fu_665_p2;
reg   [10:0] add_ln72_reg_1068;
wire   [10:0] add_ln48_fu_689_p2;
reg   [10:0] add_ln48_reg_1079;
wire   [10:0] trunc_ln37_2_fu_694_p1;
reg   [10:0] trunc_ln37_2_reg_1084;
wire   [10:0] add_ln57_fu_770_p2;
reg   [10:0] add_ln57_reg_1105;
wire   [29:0] i_2_fu_788_p2;
reg   [29:0] i_2_reg_1113;
wire    ap_CS_fsm_state10;
wire   [10:0] zext_ln2_fu_810_p3;
reg   [10:0] zext_ln2_reg_1118;
wire   [0:0] icmp_ln65_fu_783_p2;
wire   [10:0] sub_ln66_fu_818_p2;
reg   [10:0] sub_ln66_reg_1124;
wire   [63:0] add_ln82_fu_850_p2;
wire   [63:0] add_ln83_fu_855_p2;
wire   [63:0] add_ln84_fu_860_p2;
wire   [31:0] y_fu_865_p2;
wire   [10:0] add_ln79_fu_945_p2;
reg   [10:0] add_ln79_reg_1182;
reg   [31:0] y_0_reg_288;
reg   [63:0] p_03_rec_reg_300;
reg   [63:0] p_01_rec_reg_312;
reg   [63:0] p_0_rec_reg_324;
reg   [29:0] i_0_reg_336;
wire    ap_CS_fsm_state9;
reg   [29:0] i_1_reg_347;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln40_fu_619_p1;
wire   [63:0] zext_ln41_fu_636_p1;
wire   [63:0] zext_ln42_fu_680_p1;
wire   [63:0] zext_ln52_fu_708_p1;
wire   [63:0] zext_ln53_fu_723_p1;
wire   [63:0] zext_ln54_fu_738_p1;
wire   [63:0] zext_ln48_fu_751_p1;
wire   [63:0] zext_ln50_fu_760_p1;
wire   [63:0] zext_ln57_fu_775_p1;
wire   [63:0] zext_ln66_fu_829_p1;
wire   [63:0] zext_ln67_fu_845_p1;
wire   [63:0] zext_ln68_fu_881_p1;
wire   [63:0] zext_ln74_fu_896_p1;
wire   [63:0] zext_ln75_fu_911_p1;
wire   [63:0] zext_ln76_fu_926_p1;
wire   [63:0] zext_ln72_fu_935_p1;
wire   [63:0] zext_ln79_fu_950_p1;
wire   [31:0] V_fu_743_p2;
wire   [31:0] grp_fu_417_p2;
wire   [31:0] grp_fu_424_p2;
wire   [31:0] grp_fu_373_p2;
wire   [31:0] grp_fu_358_p2;
wire   [32:0] shl_ln_fu_453_p3;
wire   [32:0] shl_ln1_fu_465_p3;
wire   [31:0] add_ln37_fu_485_p2;
wire   [31:0] xor_ln37_fu_499_p2;
wire   [30:0] p_lshr_fu_505_p4;
wire   [0:0] tmp_1_fu_491_p3;
wire   [30:0] sub_ln37_fu_515_p2;
wire   [30:0] tmp_2_fu_521_p4;
wire   [0:0] tmp_fu_477_p3;
wire   [30:0] select_ln37_fu_531_p3;
wire   [30:0] select_ln37_1_fu_539_p3;
wire   [30:0] zext_ln39_fu_564_p1;
wire   [7:0] trunc_ln40_1_fu_579_p1;
wire   [9:0] trunc_ln40_2_fu_591_p1;
wire   [10:0] shl_ln2_fu_583_p3;
wire   [10:0] add_ln40_fu_613_p2;
wire   [10:0] or_ln41_fu_624_p2;
wire   [10:0] add_ln41_fu_630_p2;
wire   [31:0] or_ln62_fu_641_p2;
wire   [10:0] trunc_ln37_3_fu_652_p1;
wire   [10:0] trunc_ln37_4_fu_661_p1;
wire   [10:0] add_ln42_fu_670_p2;
wire   [10:0] add_ln42_1_fu_675_p2;
wire   [10:0] trunc_ln37_1_fu_685_p1;
wire   [10:0] add_ln52_fu_698_p2;
wire   [10:0] add_ln52_1_fu_703_p2;
wire   [10:0] add_ln53_fu_713_p2;
wire   [10:0] add_ln53_1_fu_718_p2;
wire   [10:0] add_ln54_fu_728_p2;
wire   [10:0] add_ln54_1_fu_733_p2;
wire   [10:0] add_ln50_fu_756_p2;
wire   [10:0] or_ln57_fu_765_p2;
wire   [30:0] zext_ln65_fu_779_p1;
wire   [7:0] trunc_ln66_fu_794_p1;
wire   [9:0] trunc_ln66_1_fu_806_p1;
wire   [10:0] shl_ln3_fu_798_p3;
wire   [10:0] add_ln66_1_fu_824_p2;
wire   [10:0] or_ln67_fu_834_p2;
wire   [10:0] add_ln67_fu_840_p2;
wire   [10:0] add_ln68_fu_871_p2;
wire   [10:0] add_ln68_1_fu_876_p2;
wire   [10:0] add_ln74_fu_886_p2;
wire   [10:0] add_ln74_1_fu_891_p2;
wire   [10:0] add_ln75_fu_901_p2;
wire   [10:0] add_ln75_1_fu_906_p2;
wire   [10:0] add_ln76_fu_916_p2;
wire   [10:0] add_ln76_1_fu_921_p2;
wire   [10:0] add_ln72_1_fu_931_p2;
wire   [10:0] or_ln79_fu_940_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln37_fu_555_p2 == 1'd0))) begin
        i_0_reg_336 <= 30'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_336 <= i_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln62_fu_647_p2 == 1'd0) & (icmp_ln39_fu_568_p2 == 1'd0) & (icmp_ln37_reg_1006 == 1'd0))) begin
        i_1_reg_347 <= 30'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_347 <= i_2_reg_1113;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd0))) begin
        p_01_rec_reg_312 <= add_ln83_fu_855_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_01_rec_reg_312 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd0))) begin
        p_03_rec_reg_300 <= add_ln82_fu_850_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_03_rec_reg_300 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd0))) begin
        p_0_rec_reg_324 <= add_ln84_fu_860_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0_rec_reg_324 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_364 <= src_q1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_364 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd0))) begin
        y_0_reg_288 <= y_fu_865_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_0_reg_288 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln48_reg_1079 <= add_ln48_fu_689_p2;
        trunc_ln37_2_reg_1084 <= trunc_ln37_2_fu_694_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln57_reg_1105 <= add_ln57_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln62_fu_647_p2 == 1'd0) & (icmp_ln39_fu_568_p2 == 1'd0) & (icmp_ln37_reg_1006 == 1'd0))) begin
        add_ln66_reg_1058 <= add_ln66_fu_656_p2;
        add_ln72_reg_1068 <= add_ln72_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln79_reg_1182 <= add_ln79_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_1113 <= i_2_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln37_reg_1006 == 1'd0))) begin
        i_reg_1018 <= i_fu_573_p2;
        trunc_ln40_reg_1010 <= trunc_ln40_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln37_reg_1006 <= icmp_ln37_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_369 <= src_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_391 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_395 <= grp_fu_385_p2;
        reg_409 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_413 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ry_reg_964 <= rgb2yuv_q0;
        sext_ln82_reg_986 <= sext_ln82_fu_449_p1;
        sext_ln83_reg_991[63 : 1] <= sext_ln83_fu_461_p1[63 : 1];
        sext_ln84_reg_996[63 : 1] <= sext_ln84_fu_473_p1[63 : 1];
        tmp_3_reg_1001[31 : 1] <= tmp_3_fu_547_p3[31 : 1];
        trunc_ln60_reg_976 <= trunc_ln60_fu_441_p1;
        trunc_ln82_reg_981 <= trunc_ln82_fu_445_p1;
        trunc_ln_reg_970 <= {{width[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_568_p2 == 1'd1) & (icmp_ln37_reg_1006 == 1'd0))) begin
        sub_ln40_reg_1029[10 : 1] <= sub_ln40_fu_603_p2[10 : 1];
        trunc_ln37_reg_1037 <= trunc_ln37_fu_609_p1;
        zext_ln1_reg_1023[10 : 1] <= zext_ln1_fu_595_p3[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd1))) begin
        sub_ln66_reg_1124[10 : 1] <= sub_ln66_fu_818_p2[10 : 1];
        zext_ln2_reg_1118[10 : 1] <= zext_ln2_fu_810_p3[10 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln37_reg_1006 == 1'd1) | ((icmp_ln62_fu_647_p2 == 1'd1) & (icmp_ln39_fu_568_p2 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln37_reg_1006 == 1'd1) | ((icmp_ln62_fu_647_p2 == 1'd1) & (icmp_ln39_fu_568_p2 == 1'd0))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        rgb2yuv_ce0 = 1'b1;
    end else begin
        rgb2yuv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        src_address0 = zext_ln75_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        src_address0 = zext_ln68_fu_881_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        src_address0 = zext_ln66_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address0 = zext_ln53_fu_723_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_address0 = zext_ln42_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = zext_ln40_fu_619_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        src_address1 = zext_ln76_fu_926_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        src_address1 = zext_ln74_fu_896_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        src_address1 = zext_ln67_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address1 = zext_ln54_fu_738_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_address1 = zext_ln52_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address1 = zext_ln41_fu_636_p1;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        udst_ce0 = 1'b1;
    end else begin
        udst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        udst_we0 = 1'b1;
    end else begin
        udst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vdst_ce0 = 1'b1;
    end else begin
        vdst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        vdst_we0 = 1'b1;
    end else begin
        vdst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ydst_address0 = zext_ln79_fu_950_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        ydst_address0 = zext_ln72_fu_935_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ydst_address0 = zext_ln57_fu_775_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ydst_address0 = zext_ln50_fu_760_p1;
    end else begin
        ydst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        ydst_ce0 = 1'b1;
    end else begin
        ydst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        ydst_d0 = grp_fu_424_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        ydst_d0 = grp_fu_417_p2;
    end else begin
        ydst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        ydst_we0 = 1'b1;
    end else begin
        ydst_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln37_reg_1006 == 1'd1) | ((icmp_ln62_fu_647_p2 == 1'd1) & (icmp_ln39_fu_568_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln62_fu_647_p2 == 1'd0) & (icmp_ln39_fu_568_p2 == 1'd0) & (icmp_ln37_reg_1006 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln65_fu_783_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_fu_743_p2 = (32'd128 + reg_409);

assign add_ln37_fu_485_p2 = (32'd1 + height);

assign add_ln40_fu_613_p2 = (sub_ln40_fu_603_p2 + trunc_ln37_fu_609_p1);

assign add_ln41_fu_630_p2 = (or_ln41_fu_624_p2 + trunc_ln37_fu_609_p1);

assign add_ln42_1_fu_675_p2 = (add_ln42_fu_670_p2 + trunc_ln37_reg_1037);

assign add_ln42_fu_670_p2 = (11'd2 + sub_ln40_reg_1029);

assign add_ln48_fu_689_p2 = (trunc_ln40_reg_1010 + trunc_ln37_1_fu_685_p1);

assign add_ln50_fu_756_p2 = (zext_ln1_reg_1023 + trunc_ln37_2_reg_1084);

assign add_ln52_1_fu_703_p2 = (add_ln52_fu_698_p2 + trunc_ln37_reg_1037);

assign add_ln52_fu_698_p2 = (11'd3 + sub_ln40_reg_1029);

assign add_ln53_1_fu_718_p2 = (add_ln53_fu_713_p2 + trunc_ln37_reg_1037);

assign add_ln53_fu_713_p2 = (11'd4 + sub_ln40_reg_1029);

assign add_ln54_1_fu_733_p2 = (add_ln54_fu_728_p2 + trunc_ln37_reg_1037);

assign add_ln54_fu_728_p2 = (11'd5 + sub_ln40_reg_1029);

assign add_ln57_fu_770_p2 = (or_ln57_fu_765_p2 + trunc_ln37_2_reg_1084);

assign add_ln66_1_fu_824_p2 = (sub_ln66_fu_818_p2 + add_ln66_reg_1058);

assign add_ln66_fu_656_p2 = (trunc_ln82_reg_981 + trunc_ln37_3_fu_652_p1);

assign add_ln67_fu_840_p2 = (or_ln67_fu_834_p2 + add_ln66_reg_1058);

assign add_ln68_1_fu_876_p2 = (add_ln68_fu_871_p2 + add_ln66_reg_1058);

assign add_ln68_fu_871_p2 = (11'd2 + sub_ln66_reg_1124);

assign add_ln72_1_fu_931_p2 = (zext_ln2_reg_1118 + add_ln72_reg_1068);

assign add_ln72_fu_665_p2 = (trunc_ln60_reg_976 + trunc_ln37_4_fu_661_p1);

assign add_ln74_1_fu_891_p2 = (add_ln74_fu_886_p2 + add_ln66_reg_1058);

assign add_ln74_fu_886_p2 = (11'd3 + sub_ln66_reg_1124);

assign add_ln75_1_fu_906_p2 = (add_ln75_fu_901_p2 + add_ln66_reg_1058);

assign add_ln75_fu_901_p2 = (11'd4 + sub_ln66_reg_1124);

assign add_ln76_1_fu_921_p2 = (add_ln76_fu_916_p2 + add_ln66_reg_1058);

assign add_ln76_fu_916_p2 = (11'd5 + sub_ln66_reg_1124);

assign add_ln79_fu_945_p2 = (or_ln79_fu_940_p2 + add_ln72_reg_1068);

assign add_ln82_fu_850_p2 = ($signed(sext_ln82_reg_986) + $signed(p_03_rec_reg_300));

assign add_ln83_fu_855_p2 = ($signed(sext_ln83_reg_991) + $signed(p_01_rec_reg_312));

assign add_ln84_fu_860_p2 = ($signed(sext_ln84_reg_996) + $signed(p_0_rec_reg_324));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_358_p2 = (src_q1 + src_q0);

assign grp_fu_373_p2 = (src_q0 + reg_369);

assign grp_fu_379_p2 = (reg_364 + grp_fu_373_p2);

assign grp_fu_385_p2 = (reg_364 + grp_fu_358_p2);

assign grp_fu_399_p2 = ($signed(reg_391) * $signed(ry_reg_964));

assign grp_fu_404_p2 = ($signed(reg_395) * $signed(ry_reg_964));

assign grp_fu_417_p2 = (32'd16 + reg_409);

assign grp_fu_424_p2 = (32'd16 + reg_413);

assign i_2_fu_788_p2 = (i_1_reg_347 + 30'd1);

assign i_fu_573_p2 = (30'd1 + i_0_reg_336);

assign icmp_ln37_fu_555_p2 = ((y_0_reg_288 == tmp_3_reg_1001) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_568_p2 = (($signed(zext_ln39_fu_564_p1) < $signed(trunc_ln_reg_970)) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_647_p2 = ((or_ln62_fu_641_p2 == height) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_783_p2 = (($signed(zext_ln65_fu_779_p1) < $signed(trunc_ln_reg_970)) ? 1'b1 : 1'b0);

assign or_ln41_fu_624_p2 = (sub_ln40_fu_603_p2 | 11'd1);

assign or_ln57_fu_765_p2 = (zext_ln1_reg_1023 | 11'd1);

assign or_ln62_fu_641_p2 = (y_0_reg_288 | 32'd1);

assign or_ln67_fu_834_p2 = (sub_ln66_fu_818_p2 | 11'd1);

assign or_ln79_fu_940_p2 = (zext_ln2_reg_1118 | 11'd1);

assign p_lshr_fu_505_p4 = {{xor_ln37_fu_499_p2[31:1]}};

assign rgb2yuv_address0 = 64'd0;

assign select_ln37_1_fu_539_p3 = ((tmp_fu_477_p3[0:0] === 1'b1) ? 31'd0 : select_ln37_fu_531_p3);

assign select_ln37_fu_531_p3 = ((tmp_1_fu_491_p3[0:0] === 1'b1) ? sub_ln37_fu_515_p2 : tmp_2_fu_521_p4);

assign sext_ln82_fu_449_p1 = $signed(chromStride);

assign sext_ln83_fu_461_p1 = $signed(shl_ln_fu_453_p3);

assign sext_ln84_fu_473_p1 = $signed(shl_ln1_fu_465_p3);

assign shl_ln1_fu_465_p3 = {{srcStride}, {1'd0}};

assign shl_ln2_fu_583_p3 = {{trunc_ln40_1_fu_579_p1}, {3'd0}};

assign shl_ln3_fu_798_p3 = {{trunc_ln66_fu_794_p1}, {3'd0}};

assign shl_ln_fu_453_p3 = {{lumStride}, {1'd0}};

assign sub_ln37_fu_515_p2 = (31'd0 - p_lshr_fu_505_p4);

assign sub_ln40_fu_603_p2 = (shl_ln2_fu_583_p3 - zext_ln1_fu_595_p3);

assign sub_ln66_fu_818_p2 = (shl_ln3_fu_798_p3 - zext_ln2_fu_810_p3);

assign tmp_1_fu_491_p3 = add_ln37_fu_485_p2[32'd31];

assign tmp_2_fu_521_p4 = {{add_ln37_fu_485_p2[31:1]}};

assign tmp_3_fu_547_p3 = {{select_ln37_1_fu_539_p3}, {1'd0}};

assign tmp_fu_477_p3 = height[32'd31];

assign trunc_ln37_1_fu_685_p1 = p_03_rec_reg_300[10:0];

assign trunc_ln37_2_fu_694_p1 = p_01_rec_reg_312[10:0];

assign trunc_ln37_3_fu_652_p1 = p_0_rec_reg_324[10:0];

assign trunc_ln37_4_fu_661_p1 = p_01_rec_reg_312[10:0];

assign trunc_ln37_fu_609_p1 = p_0_rec_reg_324[10:0];

assign trunc_ln40_1_fu_579_p1 = i_0_reg_336[7:0];

assign trunc_ln40_2_fu_591_p1 = i_0_reg_336[9:0];

assign trunc_ln40_fu_560_p1 = i_0_reg_336[10:0];

assign trunc_ln60_fu_441_p1 = lumStride[10:0];

assign trunc_ln66_1_fu_806_p1 = i_1_reg_347[9:0];

assign trunc_ln66_fu_794_p1 = i_1_reg_347[7:0];

assign trunc_ln82_fu_445_p1 = srcStride[10:0];

assign udst_address0 = zext_ln48_fu_751_p1;

assign udst_d0 = V_fu_743_p2;

assign vdst_address0 = zext_ln48_fu_751_p1;

assign vdst_d0 = V_fu_743_p2;

assign xor_ln37_fu_499_p2 = (height ^ 32'd4294967295);

assign y_fu_865_p2 = (y_0_reg_288 + 32'd2);

assign zext_ln1_fu_595_p3 = {{trunc_ln40_2_fu_591_p1}, {1'd0}};

assign zext_ln2_fu_810_p3 = {{trunc_ln66_1_fu_806_p1}, {1'd0}};

assign zext_ln39_fu_564_p1 = i_0_reg_336;

assign zext_ln40_fu_619_p1 = add_ln40_fu_613_p2;

assign zext_ln41_fu_636_p1 = add_ln41_fu_630_p2;

assign zext_ln42_fu_680_p1 = add_ln42_1_fu_675_p2;

assign zext_ln48_fu_751_p1 = add_ln48_reg_1079;

assign zext_ln50_fu_760_p1 = add_ln50_fu_756_p2;

assign zext_ln52_fu_708_p1 = add_ln52_1_fu_703_p2;

assign zext_ln53_fu_723_p1 = add_ln53_1_fu_718_p2;

assign zext_ln54_fu_738_p1 = add_ln54_1_fu_733_p2;

assign zext_ln57_fu_775_p1 = add_ln57_reg_1105;

assign zext_ln65_fu_779_p1 = i_1_reg_347;

assign zext_ln66_fu_829_p1 = add_ln66_1_fu_824_p2;

assign zext_ln67_fu_845_p1 = add_ln67_fu_840_p2;

assign zext_ln68_fu_881_p1 = add_ln68_1_fu_876_p2;

assign zext_ln72_fu_935_p1 = add_ln72_1_fu_931_p2;

assign zext_ln74_fu_896_p1 = add_ln74_1_fu_891_p2;

assign zext_ln75_fu_911_p1 = add_ln75_1_fu_906_p2;

assign zext_ln76_fu_926_p1 = add_ln76_1_fu_921_p2;

assign zext_ln79_fu_950_p1 = add_ln79_reg_1182;

always @ (posedge ap_clk) begin
    sext_ln83_reg_991[0] <= 1'b0;
    sext_ln84_reg_996[0] <= 1'b0;
    tmp_3_reg_1001[0] <= 1'b0;
    zext_ln1_reg_1023[0] <= 1'b0;
    sub_ln40_reg_1029[0] <= 1'b0;
    zext_ln2_reg_1118[0] <= 1'b0;
    sub_ln66_reg_1124[0] <= 1'b0;
end

endmodule //ff_rgb24toyv12_c
