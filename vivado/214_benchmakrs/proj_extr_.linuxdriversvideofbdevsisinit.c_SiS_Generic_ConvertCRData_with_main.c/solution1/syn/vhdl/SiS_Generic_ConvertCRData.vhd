-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SiS_Generic_ConvertCRData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SiS_Pr_dummy : IN STD_LOGIC_VECTOR (31 downto 0);
    crdata_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    crdata_ce0 : OUT STD_LOGIC;
    crdata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    crdata_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    crdata_ce1 : OUT STD_LOGIC;
    crdata_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    xres : IN STD_LOGIC_VECTOR (31 downto 0);
    yres : IN STD_LOGIC_VECTOR (31 downto 0);
    var_xres : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_xres_ap_vld : OUT STD_LOGIC;
    var_left_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_left_margin_ap_vld : OUT STD_LOGIC;
    var_right_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_right_margin_ap_vld : OUT STD_LOGIC;
    var_hsync_len : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_hsync_len_ap_vld : OUT STD_LOGIC;
    var_yres : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_yres_ap_vld : OUT STD_LOGIC;
    var_upper_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_upper_margin_ap_vld : OUT STD_LOGIC;
    var_lower_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_lower_margin_ap_vld : OUT STD_LOGIC;
    var_vsync_len : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_vsync_len_ap_vld : OUT STD_LOGIC;
    writeres : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SiS_Generic_ConvertCRData is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SiS_Generic_ConvertCRData,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.477000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=670,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv15_7FE8 : STD_LOGIC_VECTOR (14 downto 0) := "111111111101000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv15_18 : STD_LOGIC_VECTOR (14 downto 0) := "000000000011000";
    constant ap_const_lv15_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_951 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_961 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln40_fu_386_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln40_reg_971 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln49_2_fu_390_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln49_2_reg_986 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln40_fu_422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln40_reg_1006 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln57_1_fu_506_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln57_1_reg_1011 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_6_fu_535_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_6_reg_1016 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln62_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln62_reg_1021 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln64_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln64_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_fu_578_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_reg_1045 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_6_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_fu_638_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln92_reg_1101 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_1_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_01_phi_fu_342_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_394_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal E_fu_405_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_fu_432_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln49_1_fu_436_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal HBE_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln56_fu_464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_1_fu_468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_fu_472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln57_fu_488_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln57_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln57_fu_484_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_fu_494_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln57_fu_498_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal HRE_fu_457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln59_fu_510_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_1_fu_514_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_1_fu_517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln60_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln40_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_neg_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln60_fu_543_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xres_assign_fu_565_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_649_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln66_fu_656_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_673_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln85_fu_689_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal E_1_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_705_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln92_fu_714_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_733_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln85_cast1_fu_682_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln104_fu_740_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_1_fu_744_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_3_fu_748_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln105_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_760_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln105_fu_766_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln108_fu_778_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal VRE_fu_782_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln109_fu_789_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln109_1_fu_793_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_4_fu_796_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln110_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln110_fu_808_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_7_fu_814_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln105_fu_774_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln92_1_fu_729_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln112_fu_831_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln110_1_fu_827_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal D_fu_837_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln119_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_2_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln119_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln119_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_642_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln119_fu_878_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln119_1_fu_886_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln66_fu_660_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln119_2_fu_899_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln119_3_fu_907_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_666_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln119_4_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln119_5_fu_928_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((icmp_ln64_fu_559_p2 = ap_const_lv1_1)) then 
                    p_0_reg_329 <= xres;
                elsif ((icmp_ln64_fu_559_p2 = ap_const_lv1_0)) then 
                    p_0_reg_329 <= zext_ln64_fu_573_p1;
                end if;
            end if; 
        end if;
    end process;

    reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_356 <= crdata_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_356 <= crdata_q1;
            end if; 
        end if;
    end process;

    reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_361 <= crdata_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_361 <= crdata_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln65_reg_1045 <= add_ln65_fu_578_p2;
                tmp_10_reg_1066 <= crdata_q0(1 downto 1);
                tmp_11_reg_1076 <= crdata_q1(2 downto 2);
                tmp_12_reg_1081 <= crdata_q1(7 downto 7);
                tmp_13_reg_1086 <= crdata_q0(3 downto 3);
                tmp_15_reg_1091 <= crdata_q0(4 downto 4);
                tmp_16_reg_1096 <= crdata_q0(5 downto 5);
                tmp_6_reg_1055 <= crdata_q1(1 downto 1);
                tmp_9_reg_1061 <= crdata_q1(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln64_reg_1026 <= icmp_ln64_fu_559_p2;
                sext_ln57_1_reg_1011 <= sext_ln57_1_fu_506_p1;
                sub_ln40_reg_1006 <= sub_ln40_fu_422_p2;
                sub_ln62_reg_1021 <= sub_ln62_fu_553_p2;
                temp_6_reg_1016 <= temp_6_fu_535_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_2_reg_961 <= crdata_q0(7 downto 6);
                tmp_reg_951 <= crdata_q0(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_5_reg_991 <= crdata_q1(2 downto 2);
                trunc_ln40_reg_971 <= trunc_ln40_fu_386_p1;
                trunc_ln49_2_reg_986 <= trunc_ln49_2_fu_390_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln92_reg_1101 <= trunc_ln92_fu_638_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    D_fu_837_p2 <= std_logic_vector(unsigned(sub_ln112_fu_831_p2) - unsigned(zext_ln110_1_fu_827_p1));
    E_1_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(zext_ln85_fu_689_p1));
    E_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(zext_ln36_fu_401_p1));
    F_fu_718_p2 <= std_logic_vector(unsigned(zext_ln92_fu_714_p1) - unsigned(zext_ln85_fu_689_p1));
    HBE_fu_448_p4 <= ((trunc_ln49_2_reg_986 & tmp_4_fu_440_p3) & trunc_ln49_fu_432_p1);
    HRE_fu_457_p3 <= (tmp_5_reg_991 & trunc_ln49_1_fu_436_p1);
    VRE_fu_782_p3 <= (tmp_16_reg_1096 & trunc_ln108_fu_778_p1);
    add_ln65_fu_578_p2 <= std_logic_vector(signed(sext_ln57_1_reg_1011) + signed(sub_ln62_reg_1021));
    add_ln66_fu_660_p2 <= std_logic_vector(signed(ap_const_lv15_7FE8) + signed(sext_ln66_fu_656_p1));
    and_ln119_fu_872_p2 <= (or_ln119_fu_866_p2 and icmp_ln119_fu_848_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_01_phi_fu_342_p4_assign_proc : process(yres, icmp_ln64_reg_1026, zext_ln85_1_fu_699_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
            if ((icmp_ln64_reg_1026 = ap_const_lv1_1)) then 
                ap_phi_mux_p_01_phi_fu_342_p4 <= yres;
            elsif ((icmp_ln64_reg_1026 = ap_const_lv1_0)) then 
                ap_phi_mux_p_01_phi_fu_342_p4 <= zext_ln85_1_fu_699_p1;
            else 
                ap_phi_mux_p_01_phi_fu_342_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_01_phi_fu_342_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    crdata_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            crdata_address0 <= ap_const_lv64_C(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            crdata_address0 <= ap_const_lv64_A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crdata_address0 <= ap_const_lv64_D(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crdata_address0 <= ap_const_lv64_5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            crdata_address0 <= ap_const_lv64_4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            crdata_address0 <= ap_const_lv64_E(10 - 1 downto 0);
        else 
            crdata_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    crdata_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            crdata_address1 <= ap_const_lv64_9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            crdata_address1 <= ap_const_lv64_8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            crdata_address1 <= ap_const_lv64_7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            crdata_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            crdata_address1 <= ap_const_lv64_F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            crdata_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            crdata_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    crdata_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            crdata_ce0 <= ap_const_logic_1;
        else 
            crdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    crdata_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            crdata_ce1 <= ap_const_logic_1;
        else 
            crdata_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln105_fu_754_p2 <= "1" when (signed(temp_3_fu_748_p2) > signed(ap_const_lv10_0)) else "0";
    icmp_ln110_fu_802_p2 <= "1" when (signed(temp_4_fu_796_p2) > signed(ap_const_lv6_0)) else "0";
    icmp_ln119_1_fu_854_p2 <= "1" when (ap_phi_mux_p_01_phi_fu_342_p4 = ap_const_lv32_F0) else "0";
    icmp_ln119_2_fu_860_p2 <= "1" when (ap_phi_mux_p_01_phi_fu_342_p4 = ap_const_lv32_C8) else "0";
    icmp_ln119_fu_848_p2 <= "1" when (p_0_reg_329 = ap_const_lv32_140) else "0";
    icmp_ln57_fu_478_p2 <= "1" when (signed(temp_fu_472_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln60_fu_523_p2 <= "1" when (signed(temp_1_fu_517_p2) > signed(ap_const_lv7_0)) else "0";
    icmp_ln64_fu_559_p2 <= "1" when (writeres = ap_const_lv32_0) else "0";
    or_ln119_fu_866_p2 <= (icmp_ln119_2_fu_860_p2 or icmp_ln119_1_fu_854_p2);
    p_neg_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv12_3) - unsigned(sext_ln40_fu_428_p1));
    select_ln105_fu_766_p3 <= 
        temp_3_fu_748_p2 when (icmp_ln105_fu_754_p2(0) = '1') else 
        xor_ln105_fu_760_p2;
    select_ln119_1_fu_886_p3 <= 
        select_ln119_fu_878_p3 when (icmp_ln119_fu_848_p2(0) = '1') else 
        tmp_8_fu_642_p3;
    select_ln119_2_fu_899_p3 <= 
        ap_const_lv15_8 when (and_ln119_fu_872_p2(0) = '1') else 
        add_ln66_fu_660_p2;
    select_ln119_3_fu_907_p3 <= 
        select_ln119_2_fu_899_p3 when (icmp_ln119_fu_848_p2(0) = '1') else 
        add_ln66_fu_660_p2;
    select_ln119_4_fu_920_p3 <= 
        ap_const_lv10_30 when (and_ln119_fu_872_p2(0) = '1') else 
        shl_ln1_fu_666_p3;
    select_ln119_5_fu_928_p3 <= 
        select_ln119_4_fu_920_p3 when (icmp_ln119_fu_848_p2(0) = '1') else 
        shl_ln1_fu_666_p3;
    select_ln119_fu_878_p3 <= 
        ap_const_lv15_18 when (and_ln119_fu_872_p2(0) = '1') else 
        tmp_8_fu_642_p3;
    select_ln57_fu_498_p3 <= 
        sext_ln57_fu_484_p1 when (icmp_ln57_fu_478_p2(0) = '1') else 
        zext_ln57_fu_494_p1;
        sext_ln40_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln40_fu_422_p2),12));

        sext_ln57_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln57_fu_498_p3),12));

        sext_ln57_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_fu_472_p2),10));

        sext_ln66_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_649_p3),15));

        sext_ln92_1_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(F_fu_718_p2),13));

    shl_ln1_fu_666_p3 <= (temp_6_reg_1016 & ap_const_lv3_0);
    shl_ln_fu_649_p3 <= (sub_ln40_reg_1006 & ap_const_lv3_0);
    sub_ln112_fu_831_p2 <= std_logic_vector(unsigned(zext_ln105_fu_774_p1) - unsigned(sext_ln92_1_fu_729_p1));
    sub_ln40_fu_422_p2 <= std_logic_vector(unsigned(zext_ln40_fu_418_p1) - unsigned(E_fu_405_p2));
    sub_ln62_fu_553_p2 <= std_logic_vector(unsigned(p_neg_fu_547_p2) - unsigned(zext_ln60_fu_543_p1));
    temp_1_fu_517_p2 <= std_logic_vector(unsigned(zext_ln59_fu_510_p1) - unsigned(zext_ln59_1_fu_514_p1));
    temp_3_fu_748_p2 <= std_logic_vector(unsigned(zext_ln104_fu_740_p1) - unsigned(zext_ln104_1_fu_744_p1));
    temp_4_fu_796_p2 <= std_logic_vector(unsigned(zext_ln109_fu_789_p1) - unsigned(zext_ln109_1_fu_793_p1));
    temp_6_fu_535_p3 <= 
        temp_1_fu_517_p2 when (icmp_ln60_fu_523_p2(0) = '1') else 
        xor_ln60_fu_529_p2;
    temp_7_fu_814_p3 <= 
        temp_4_fu_796_p2 when (icmp_ln110_fu_802_p2(0) = '1') else 
        xor_ln110_fu_808_p2;
    temp_fu_472_p2 <= std_logic_vector(unsigned(zext_ln56_fu_464_p1) - unsigned(zext_ln56_1_fu_468_p1));
    tmp_14_fu_705_p5 <= (((tmp_13_reg_1086 & tmp_12_reg_1081) & tmp_11_reg_1076) & reg_361);
    tmp_1_fu_394_p3 <= (tmp_reg_951 & reg_356);
    tmp_3_fu_411_p3 <= (tmp_2_reg_961 & reg_361);
    tmp_4_fu_440_p3 <= crdata_q0(7 downto 7);
    tmp_7_fu_733_p3 <= (tmp_15_reg_1091 & crdata_q0);
    tmp_8_fu_642_p3 <= (add_ln65_reg_1045 & ap_const_lv3_0);
    tmp_s_fu_673_p5 <= (((tmp_10_reg_1066 & tmp_9_reg_1061) & tmp_6_reg_1055) & reg_356);
    trunc_ln108_fu_778_p1 <= crdata_q1(4 - 1 downto 0);
    trunc_ln40_fu_386_p1 <= crdata_q0(6 - 1 downto 0);
    trunc_ln49_1_fu_436_p1 <= crdata_q0(5 - 1 downto 0);
    trunc_ln49_2_fu_390_p1 <= crdata_q1(2 - 1 downto 0);
    trunc_ln49_fu_432_p1 <= crdata_q1(5 - 1 downto 0);
    trunc_ln92_fu_638_p1 <= crdata_q1(5 - 1 downto 0);
    var_hsync_len <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln119_5_fu_928_p3),32));

    var_hsync_len_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_hsync_len_ap_vld <= ap_const_logic_1;
        else 
            var_hsync_len_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        var_left_margin <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln119_1_fu_886_p3),32));


    var_left_margin_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_left_margin_ap_vld <= ap_const_logic_1;
        else 
            var_left_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        var_lower_margin <= std_logic_vector(IEEE.numeric_std.resize(signed(F_fu_718_p2),32));


    var_lower_margin_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_lower_margin_ap_vld <= ap_const_logic_1;
        else 
            var_lower_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        var_right_margin <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln119_3_fu_907_p3),32));


    var_right_margin_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_right_margin_ap_vld <= ap_const_logic_1;
        else 
            var_right_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        var_upper_margin <= std_logic_vector(IEEE.numeric_std.resize(signed(D_fu_837_p2),32));


    var_upper_margin_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_upper_margin_ap_vld <= ap_const_logic_1;
        else 
            var_upper_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_vsync_len <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_7_fu_814_p3),32));

    var_vsync_len_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            var_vsync_len_ap_vld <= ap_const_logic_1;
        else 
            var_vsync_len_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_xres <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xres_assign_fu_565_p3),32));

    var_xres_ap_vld_assign_proc : process(ap_CS_fsm_state4, icmp_ln64_fu_559_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln64_fu_559_p2 = ap_const_lv1_0))) then 
            var_xres_ap_vld <= ap_const_logic_1;
        else 
            var_xres_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_yres <= std_logic_vector(IEEE.numeric_std.resize(unsigned(E_1_fu_693_p2),32));

    var_yres_ap_vld_assign_proc : process(icmp_ln64_reg_1026, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln64_reg_1026 = ap_const_lv1_0))) then 
            var_yres_ap_vld <= ap_const_logic_1;
        else 
            var_yres_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_fu_760_p2 <= (temp_3_fu_748_p2 xor ap_const_lv10_200);
    xor_ln110_fu_808_p2 <= (temp_4_fu_796_p2 xor ap_const_lv6_20);
    xor_ln57_fu_488_p2 <= (temp_fu_472_p2 xor ap_const_lv9_100);
    xor_ln60_fu_529_p2 <= (temp_1_fu_517_p2 xor ap_const_lv7_40);
    xres_assign_fu_565_p3 <= (E_fu_405_p2 & ap_const_lv3_0);
    zext_ln104_1_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln85_cast1_fu_682_p3),10));
    zext_ln104_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_733_p3),10));
    zext_ln105_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln105_fu_766_p3),13));
    zext_ln109_1_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln92_reg_1101),6));
    zext_ln109_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(VRE_fu_782_p3),6));
    zext_ln110_1_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_7_fu_814_p3),13));
    zext_ln36_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_394_p3),11));
    zext_ln40_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_411_p3),11));
    zext_ln56_1_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_356),9));
    zext_ln56_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HBE_fu_448_p4),9));
    zext_ln57_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln57_fu_488_p2),10));
    zext_ln59_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln40_reg_971),7));
    zext_ln59_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(HRE_fu_457_p3),7));
    zext_ln60_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_6_fu_535_p3),12));
    zext_ln64_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xres_assign_fu_565_p3),32));
    zext_ln85_1_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(E_1_fu_693_p2),32));
    zext_ln85_cast1_fu_682_p3 <= (tmp_6_reg_1055 & reg_356);
    zext_ln85_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_673_p5),12));
    zext_ln92_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_705_p5),12));
end behav;
