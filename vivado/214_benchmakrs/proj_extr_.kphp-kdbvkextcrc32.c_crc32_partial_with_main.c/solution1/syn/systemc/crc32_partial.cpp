// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crc32_partial.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crc32_partial::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crc32_partial::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> crc32_partial::ap_ST_fsm_state1 = "1";
const sc_lv<2> crc32_partial::ap_ST_fsm_state2 = "10";
const sc_lv<32> crc32_partial::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crc32_partial::ap_const_lv32_1 = "1";
const sc_lv<1> crc32_partial::ap_const_lv1_1 = "1";
const sc_lv<32> crc32_partial::ap_const_lv32_5 = "101";
const sc_lv<32> crc32_partial::ap_const_lv32_1F = "11111";
const sc_lv<32> crc32_partial::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> crc32_partial::ap_const_lv32_4 = "100";
const sc_lv<32> crc32_partial::ap_const_lv32_3 = "11";
const sc_lv<32> crc32_partial::ap_const_lv32_2 = "10";
const sc_lv<32> crc32_partial::ap_const_lv32_10 = "10000";
const sc_lv<32> crc32_partial::ap_const_lv32_8 = "1000";
const sc_lv<1> crc32_partial::ap_const_lv1_0 = "0";
const sc_lv<7> crc32_partial::ap_const_lv7_0 = "0000000";
const bool crc32_partial::ap_const_boolean_1 = true;

crc32_partial::crc32_partial(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_87_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_87_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_87_p2 );
    sensitive << ( select_ln49_fu_169_p3 );
    sensitive << ( trunc_ln54_fu_177_p1 );
    sensitive << ( zext_ln55_fu_190_p1 );

    SC_METHOD(thread_crc_assign_2_fu_180_p4);
    sensitive << ( select_ln49_fu_169_p3 );

    SC_METHOD(thread_crc_assign_fu_155_p4);
    sensitive << ( select_ln39_fu_140_p3 );

    SC_METHOD(thread_data_address0);

    SC_METHOD(thread_data_address1);

    SC_METHOD(thread_data_ce0);

    SC_METHOD(thread_data_ce1);

    SC_METHOD(thread_data_d0);

    SC_METHOD(thread_data_d1);

    SC_METHOD(thread_data_we0);

    SC_METHOD(thread_data_we1);

    SC_METHOD(thread_icmp_ln25_fu_87_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( x_0_reg_64 );

    SC_METHOD(thread_or_ln39_1_fu_134_p2);
    sensitive << ( or_ln39_fu_120_p2 );
    sensitive << ( tmp_fu_99_p3 );

    SC_METHOD(thread_or_ln39_fu_120_p2);
    sensitive << ( tmp_2_fu_113_p3 );
    sensitive << ( tmp_1_fu_106_p3 );

    SC_METHOD(thread_select_ln39_1_fu_126_p3);
    sensitive << ( or_ln39_fu_120_p2 );

    SC_METHOD(thread_select_ln39_fu_140_p3);
    sensitive << ( p_0_reg_54 );
    sensitive << ( or_ln39_1_fu_134_p2 );
    sensitive << ( select_ln39_1_fu_126_p3 );

    SC_METHOD(thread_select_ln49_fu_169_p3);
    sensitive << ( select_ln39_fu_140_p3 );
    sensitive << ( tmp_3_fu_148_p3 );
    sensitive << ( zext_ln50_fu_165_p1 );

    SC_METHOD(thread_tmp_1_fu_106_p3);
    sensitive << ( len );

    SC_METHOD(thread_tmp_2_fu_113_p3);
    sensitive << ( len );

    SC_METHOD(thread_tmp_3_fu_148_p3);
    sensitive << ( len );

    SC_METHOD(thread_tmp_fu_99_p3);
    sensitive << ( len );

    SC_METHOD(thread_trunc_ln54_fu_177_p1);
    sensitive << ( len );

    SC_METHOD(thread_trunc_ln_fu_73_p4);
    sensitive << ( len );

    SC_METHOD(thread_x_1_fu_93_p2);
    sensitive << ( x_0_reg_64 );

    SC_METHOD(thread_x_fu_83_p1);
    sensitive << ( trunc_ln_fu_73_p4 );

    SC_METHOD(thread_zext_ln50_fu_165_p1);
    sensitive << ( crc_assign_fu_155_p4 );

    SC_METHOD(thread_zext_ln55_fu_190_p1);
    sensitive << ( crc_assign_2_fu_180_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_87_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crc32_partial_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_we0, "(port)data_we0");
    sc_trace(mVcdFile, data_d0, "(port)data_d0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, data_address1, "(port)data_address1");
    sc_trace(mVcdFile, data_ce1, "(port)data_ce1");
    sc_trace(mVcdFile, data_we1, "(port)data_we1");
    sc_trace(mVcdFile, data_d1, "(port)data_d1");
    sc_trace(mVcdFile, data_q1, "(port)data_q1");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, crc, "(port)crc");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_fu_83_p1, "x_fu_83_p1");
    sc_trace(mVcdFile, x_1_fu_93_p2, "x_1_fu_93_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln25_fu_87_p2, "icmp_ln25_fu_87_p2");
    sc_trace(mVcdFile, p_0_reg_54, "p_0_reg_54");
    sc_trace(mVcdFile, x_0_reg_64, "x_0_reg_64");
    sc_trace(mVcdFile, trunc_ln_fu_73_p4, "trunc_ln_fu_73_p4");
    sc_trace(mVcdFile, tmp_2_fu_113_p3, "tmp_2_fu_113_p3");
    sc_trace(mVcdFile, tmp_1_fu_106_p3, "tmp_1_fu_106_p3");
    sc_trace(mVcdFile, or_ln39_fu_120_p2, "or_ln39_fu_120_p2");
    sc_trace(mVcdFile, tmp_fu_99_p3, "tmp_fu_99_p3");
    sc_trace(mVcdFile, or_ln39_1_fu_134_p2, "or_ln39_1_fu_134_p2");
    sc_trace(mVcdFile, select_ln39_1_fu_126_p3, "select_ln39_1_fu_126_p3");
    sc_trace(mVcdFile, select_ln39_fu_140_p3, "select_ln39_fu_140_p3");
    sc_trace(mVcdFile, crc_assign_fu_155_p4, "crc_assign_fu_155_p4");
    sc_trace(mVcdFile, tmp_3_fu_148_p3, "tmp_3_fu_148_p3");
    sc_trace(mVcdFile, zext_ln50_fu_165_p1, "zext_ln50_fu_165_p1");
    sc_trace(mVcdFile, select_ln49_fu_169_p3, "select_ln49_fu_169_p3");
    sc_trace(mVcdFile, crc_assign_2_fu_180_p4, "crc_assign_2_fu_180_p4");
    sc_trace(mVcdFile, trunc_ln54_fu_177_p1, "trunc_ln54_fu_177_p1");
    sc_trace(mVcdFile, zext_ln55_fu_190_p1, "zext_ln55_fu_190_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crc32_partial.hdltvin.dat");
    mHdltvoutHandle.open("crc32_partial.hdltvout.dat");
}

crc32_partial::~crc32_partial() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void crc32_partial::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_87_p2.read(), ap_const_lv1_1))) {
        p_0_reg_54 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_54 = crc.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_87_p2.read(), ap_const_lv1_1))) {
        x_0_reg_64 = x_1_fu_93_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_0_reg_64 = x_fu_83_p1.read();
    }
}

void crc32_partial::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crc32_partial::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crc32_partial::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_87_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crc32_partial::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crc32_partial::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_87_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crc32_partial::thread_ap_return() {
    ap_return = (!trunc_ln54_fu_177_p1.read()[0].is_01())? sc_lv<32>(): ((trunc_ln54_fu_177_p1.read()[0].to_bool())? zext_ln55_fu_190_p1.read(): select_ln49_fu_169_p3.read());
}

void crc32_partial::thread_crc_assign_2_fu_180_p4() {
    crc_assign_2_fu_180_p4 = select_ln49_fu_169_p3.read().range(31, 8);
}

void crc32_partial::thread_crc_assign_fu_155_p4() {
    crc_assign_fu_155_p4 = select_ln39_fu_140_p3.read().range(31, 16);
}

void crc32_partial::thread_data_address0() {
    data_address0 = ap_const_lv7_0;
}

void crc32_partial::thread_data_address1() {
    data_address1 = ap_const_lv7_0;
}

void crc32_partial::thread_data_ce0() {
    data_ce0 = ap_const_logic_0;
}

void crc32_partial::thread_data_ce1() {
    data_ce1 = ap_const_logic_0;
}

void crc32_partial::thread_data_d0() {
    data_d0 = ap_const_lv32_0;
}

void crc32_partial::thread_data_d1() {
    data_d1 = ap_const_lv32_0;
}

void crc32_partial::thread_data_we0() {
    data_we0 = ap_const_logic_0;
}

void crc32_partial::thread_data_we1() {
    data_we1 = ap_const_logic_0;
}

void crc32_partial::thread_icmp_ln25_fu_87_p2() {
    icmp_ln25_fu_87_p2 = (!x_0_reg_64.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(x_0_reg_64.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void crc32_partial::thread_or_ln39_1_fu_134_p2() {
    or_ln39_1_fu_134_p2 = (or_ln39_fu_120_p2.read() | tmp_fu_99_p3.read());
}

void crc32_partial::thread_or_ln39_fu_120_p2() {
    or_ln39_fu_120_p2 = (tmp_2_fu_113_p3.read() | tmp_1_fu_106_p3.read());
}

void crc32_partial::thread_select_ln39_1_fu_126_p3() {
    select_ln39_1_fu_126_p3 = (!or_ln39_fu_120_p2.read()[0].is_01())? sc_lv<32>(): ((or_ln39_fu_120_p2.read()[0].to_bool())? ap_const_lv32_0: ap_const_lv32_0);
}

void crc32_partial::thread_select_ln39_fu_140_p3() {
    select_ln39_fu_140_p3 = (!or_ln39_1_fu_134_p2.read()[0].is_01())? sc_lv<32>(): ((or_ln39_1_fu_134_p2.read()[0].to_bool())? select_ln39_1_fu_126_p3.read(): p_0_reg_54.read());
}

void crc32_partial::thread_select_ln49_fu_169_p3() {
    select_ln49_fu_169_p3 = (!tmp_3_fu_148_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_3_fu_148_p3.read()[0].to_bool())? zext_ln50_fu_165_p1.read(): select_ln39_fu_140_p3.read());
}

void crc32_partial::thread_tmp_1_fu_106_p3() {
    tmp_1_fu_106_p3 = len.read().range(3, 3);
}

void crc32_partial::thread_tmp_2_fu_113_p3() {
    tmp_2_fu_113_p3 = len.read().range(2, 2);
}

void crc32_partial::thread_tmp_3_fu_148_p3() {
    tmp_3_fu_148_p3 = len.read().range(1, 1);
}

void crc32_partial::thread_tmp_fu_99_p3() {
    tmp_fu_99_p3 = len.read().range(4, 4);
}

void crc32_partial::thread_trunc_ln54_fu_177_p1() {
    trunc_ln54_fu_177_p1 = len.read().range(1-1, 0);
}

void crc32_partial::thread_trunc_ln_fu_73_p4() {
    trunc_ln_fu_73_p4 = len.read().range(31, 5);
}

void crc32_partial::thread_x_1_fu_93_p2() {
    x_1_fu_93_p2 = (!x_0_reg_64.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(x_0_reg_64.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void crc32_partial::thread_x_fu_83_p1() {
    x_fu_83_p1 = esl_sext<32,27>(trunc_ln_fu_73_p4.read());
}

void crc32_partial::thread_zext_ln50_fu_165_p1() {
    zext_ln50_fu_165_p1 = esl_zext<32,16>(crc_assign_fu_155_p4.read());
}

void crc32_partial::thread_zext_ln55_fu_190_p1() {
    zext_ln55_fu_190_p1 = esl_zext<32,24>(crc_assign_2_fu_180_p4.read());
}

void crc32_partial::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_87_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void crc32_partial::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_address0\" :  \"" << data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_ce0\" :  \"" << data_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_we0\" :  \"" << data_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_d0\" :  \"" << data_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_q0\" :  \"" << data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_address1\" :  \"" << data_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_ce1\" :  \"" << data_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_we1\" :  \"" << data_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_d1\" :  \"" << data_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_q1\" :  \"" << data_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"len\" :  \"" << len.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"crc\" :  \"" << crc.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

