// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _crc32_partial_HH_
#define _crc32_partial_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct crc32_partial : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > data_address0;
    sc_out< sc_logic > data_ce0;
    sc_out< sc_logic > data_we0;
    sc_out< sc_lv<32> > data_d0;
    sc_in< sc_lv<32> > data_q0;
    sc_out< sc_lv<7> > data_address1;
    sc_out< sc_logic > data_ce1;
    sc_out< sc_logic > data_we1;
    sc_out< sc_lv<32> > data_d1;
    sc_in< sc_lv<32> > data_q1;
    sc_in< sc_lv<32> > len;
    sc_in< sc_lv<32> > crc;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    crc32_partial(sc_module_name name);
    SC_HAS_PROCESS(crc32_partial);

    ~crc32_partial();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > x_fu_83_p1;
    sc_signal< sc_lv<32> > x_1_fu_93_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln25_fu_87_p2;
    sc_signal< sc_lv<32> > p_0_reg_54;
    sc_signal< sc_lv<32> > x_0_reg_64;
    sc_signal< sc_lv<27> > trunc_ln_fu_73_p4;
    sc_signal< sc_lv<1> > tmp_2_fu_113_p3;
    sc_signal< sc_lv<1> > tmp_1_fu_106_p3;
    sc_signal< sc_lv<1> > or_ln39_fu_120_p2;
    sc_signal< sc_lv<1> > tmp_fu_99_p3;
    sc_signal< sc_lv<1> > or_ln39_1_fu_134_p2;
    sc_signal< sc_lv<32> > select_ln39_1_fu_126_p3;
    sc_signal< sc_lv<32> > select_ln39_fu_140_p3;
    sc_signal< sc_lv<16> > crc_assign_fu_155_p4;
    sc_signal< sc_lv<1> > tmp_3_fu_148_p3;
    sc_signal< sc_lv<32> > zext_ln50_fu_165_p1;
    sc_signal< sc_lv<32> > select_ln49_fu_169_p3;
    sc_signal< sc_lv<24> > crc_assign_2_fu_180_p4;
    sc_signal< sc_lv<1> > trunc_ln54_fu_177_p1;
    sc_signal< sc_lv<32> > zext_ln55_fu_190_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_crc_assign_2_fu_180_p4();
    void thread_crc_assign_fu_155_p4();
    void thread_data_address0();
    void thread_data_address1();
    void thread_data_ce0();
    void thread_data_ce1();
    void thread_data_d0();
    void thread_data_d1();
    void thread_data_we0();
    void thread_data_we1();
    void thread_icmp_ln25_fu_87_p2();
    void thread_or_ln39_1_fu_134_p2();
    void thread_or_ln39_fu_120_p2();
    void thread_select_ln39_1_fu_126_p3();
    void thread_select_ln39_fu_140_p3();
    void thread_select_ln49_fu_169_p3();
    void thread_tmp_1_fu_106_p3();
    void thread_tmp_2_fu_113_p3();
    void thread_tmp_3_fu_148_p3();
    void thread_tmp_fu_99_p3();
    void thread_trunc_ln54_fu_177_p1();
    void thread_trunc_ln_fu_73_p4();
    void thread_x_1_fu_93_p2();
    void thread_x_fu_83_p1();
    void thread_zext_ln50_fu_165_p1();
    void thread_zext_ln55_fu_190_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
