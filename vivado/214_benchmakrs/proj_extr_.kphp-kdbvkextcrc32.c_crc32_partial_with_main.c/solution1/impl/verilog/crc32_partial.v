// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crc32_partial,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.509000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=200,HLS_VERSION=2019_1}" *)

module crc32_partial (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        data_q0,
        data_address1,
        data_ce1,
        data_we1,
        data_d1,
        data_q1,
        len,
        crc,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
input  [31:0] data_q0;
output  [6:0] data_address1;
output   data_ce1;
output   data_we1;
output  [31:0] data_d1;
input  [31:0] data_q1;
input  [31:0] len;
input  [31:0] crc;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] x_fu_83_p1;
wire   [31:0] x_1_fu_93_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_87_p2;
reg   [31:0] p_0_reg_54;
reg   [31:0] x_0_reg_64;
wire   [26:0] trunc_ln_fu_73_p4;
wire   [0:0] tmp_2_fu_113_p3;
wire   [0:0] tmp_1_fu_106_p3;
wire   [0:0] or_ln39_fu_120_p2;
wire   [0:0] tmp_fu_99_p3;
wire   [0:0] or_ln39_1_fu_134_p2;
wire   [31:0] select_ln39_1_fu_126_p3;
wire   [31:0] select_ln39_fu_140_p3;
wire   [15:0] crc_assign_fu_155_p4;
wire   [0:0] tmp_3_fu_148_p3;
wire   [31:0] zext_ln50_fu_165_p1;
wire   [31:0] select_ln49_fu_169_p3;
wire   [23:0] crc_assign_2_fu_180_p4;
wire   [0:0] trunc_ln54_fu_177_p1;
wire   [31:0] zext_ln55_fu_190_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_54 <= 32'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_54 <= crc;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_64 <= x_1_fu_93_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_64 <= x_fu_83_p1;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((trunc_ln54_fu_177_p1[0:0] === 1'b1) ? zext_ln55_fu_190_p1 : select_ln49_fu_169_p3);

assign crc_assign_2_fu_180_p4 = {{select_ln49_fu_169_p3[31:8]}};

assign crc_assign_fu_155_p4 = {{select_ln39_fu_140_p3[31:16]}};

assign data_address0 = 7'd0;

assign data_address1 = 7'd0;

assign data_ce0 = 1'b0;

assign data_ce1 = 1'b0;

assign data_d0 = 32'd0;

assign data_d1 = 32'd0;

assign data_we0 = 1'b0;

assign data_we1 = 1'b0;

assign icmp_ln25_fu_87_p2 = (($signed(x_0_reg_64) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign or_ln39_1_fu_134_p2 = (tmp_fu_99_p3 | or_ln39_fu_120_p2);

assign or_ln39_fu_120_p2 = (tmp_2_fu_113_p3 | tmp_1_fu_106_p3);

assign select_ln39_1_fu_126_p3 = ((or_ln39_fu_120_p2[0:0] === 1'b1) ? 32'd0 : 32'd0);

assign select_ln39_fu_140_p3 = ((or_ln39_1_fu_134_p2[0:0] === 1'b1) ? select_ln39_1_fu_126_p3 : p_0_reg_54);

assign select_ln49_fu_169_p3 = ((tmp_3_fu_148_p3[0:0] === 1'b1) ? zext_ln50_fu_165_p1 : select_ln39_fu_140_p3);

assign tmp_1_fu_106_p3 = len[32'd3];

assign tmp_2_fu_113_p3 = len[32'd2];

assign tmp_3_fu_148_p3 = len[32'd1];

assign tmp_fu_99_p3 = len[32'd4];

assign trunc_ln54_fu_177_p1 = len[0:0];

assign trunc_ln_fu_73_p4 = {{len[31:5]}};

assign x_1_fu_93_p2 = ($signed(x_0_reg_64) + $signed(32'd4294967295));

assign x_fu_83_p1 = $signed(trunc_ln_fu_73_p4);

assign zext_ln50_fu_165_p1 = crc_assign_fu_155_p4;

assign zext_ln55_fu_190_p1 = crc_assign_2_fu_180_p4;

endmodule //crc32_partial
