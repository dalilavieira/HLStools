-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crc32_partial is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce1 : OUT STD_LOGIC;
    data_we1 : OUT STD_LOGIC;
    data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    crc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crc32_partial is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crc32_partial,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.509000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=200,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln25_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_reg_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_73_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_113_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_99_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_1_fu_126_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_fu_140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal crc_assign_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_fu_169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal crc_assign_2_fu_180_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln54_fu_177_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_54 <= ap_const_lv32_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_reg_54 <= crc;
            end if; 
        end if;
    end process;

    x_0_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_87_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_64 <= x_1_fu_93_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_64 <= x_fu_83_p1;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln25_fu_87_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln25_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_87_p2)
    begin
        if (((icmp_ln25_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_87_p2)
    begin
        if (((icmp_ln25_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        zext_ln55_fu_190_p1 when (trunc_ln54_fu_177_p1(0) = '1') else 
        select_ln49_fu_169_p3;
    crc_assign_2_fu_180_p4 <= select_ln49_fu_169_p3(31 downto 8);
    crc_assign_fu_155_p4 <= select_ln39_fu_140_p3(31 downto 16);
    data_address0 <= ap_const_lv7_0;
    data_address1 <= ap_const_lv7_0;
    data_ce0 <= ap_const_logic_0;
    data_ce1 <= ap_const_logic_0;
    data_d0 <= ap_const_lv32_0;
    data_d1 <= ap_const_lv32_0;
    data_we0 <= ap_const_logic_0;
    data_we1 <= ap_const_logic_0;
    icmp_ln25_fu_87_p2 <= "1" when (signed(x_0_reg_64) > signed(ap_const_lv32_0)) else "0";
    or_ln39_1_fu_134_p2 <= (tmp_fu_99_p3 or or_ln39_fu_120_p2);
    or_ln39_fu_120_p2 <= (tmp_2_fu_113_p3 or tmp_1_fu_106_p3);
    select_ln39_1_fu_126_p3 <= 
        ap_const_lv32_0 when (or_ln39_fu_120_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln39_fu_140_p3 <= 
        select_ln39_1_fu_126_p3 when (or_ln39_1_fu_134_p2(0) = '1') else 
        p_0_reg_54;
    select_ln49_fu_169_p3 <= 
        zext_ln50_fu_165_p1 when (tmp_3_fu_148_p3(0) = '1') else 
        select_ln39_fu_140_p3;
    tmp_1_fu_106_p3 <= len(3 downto 3);
    tmp_2_fu_113_p3 <= len(2 downto 2);
    tmp_3_fu_148_p3 <= len(1 downto 1);
    tmp_fu_99_p3 <= len(4 downto 4);
    trunc_ln54_fu_177_p1 <= len(1 - 1 downto 0);
    trunc_ln_fu_73_p4 <= len(31 downto 5);
    x_1_fu_93_p2 <= std_logic_vector(unsigned(x_0_reg_64) + unsigned(ap_const_lv32_FFFFFFFF));
        x_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_73_p4),32));

    zext_ln50_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(crc_assign_fu_155_p4),32));
    zext_ln55_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(crc_assign_2_fu_180_p4),32));
end behav;
