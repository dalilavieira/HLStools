-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_depth : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_hdata_re_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fft_hdata_re_ce0 : OUT STD_LOGIC;
    fft_hdata_re_we0 : OUT STD_LOGIC;
    fft_hdata_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fft_hdata_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fft_hdata_im_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    fft_hdata_im_ce0 : OUT STD_LOGIC;
    fft_hdata_im_we0 : OUT STD_LOGIC;
    fft_hdata_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_linesize_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_linesize_ce0 : OUT STD_LOGIC;
    in_linesize_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    h : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    plane : IN STD_LOGIC_VECTOR (31 downto 0);
    scale : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of get_input is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "get_input,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=21,HLS_SYN_FF=2176,HLS_SYN_LUT=3151,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln66_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln33_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal iw_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal iw_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ih_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ih_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1344 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_4_fu_749_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_4_reg_1348 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_linesize_addr_reg_1354 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_12_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_12_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln47_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln47_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_11_fu_782_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_11_reg_1379 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln67_1_fu_788_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln67_1_reg_1384 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_1_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln70_1_reg_1394 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln70_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_1_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_1_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_10_fu_824_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_10_reg_1415 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln69_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_3_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_3_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_hdata_re_addr_3_reg_1430 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln74_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln74_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal x_14_fu_876_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_14_reg_1443 : STD_LOGIC_VECTOR (30 downto 0);
    signal fft_hdata_re_addr_9_reg_1448 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln74_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_1_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln80_1_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln79_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_18_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_18_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln85_fu_922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln85_reg_1466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_14_fu_936_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_14_reg_1474 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln85_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln94_reg_1484 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_15_fu_951_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_15_reg_1492 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln86_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_1_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_1_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln94_1_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln94_1_reg_1510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln92_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln61_1_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_1_reg_1518 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_19_fu_1008_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_19_reg_1526 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln93_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln94_1_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_1_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_17_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_9_fu_1049_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_9_reg_1549 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln34_1_fu_1055_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln34_1_reg_1554 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_fu_1059_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_fu_1068_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln37_1_reg_1564 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal mul_ln37_fu_1073_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_reg_1576 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_1091_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_1585 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln36_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_3_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_3_reg_1595 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_hdata_re_addr_1_reg_1600 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln41_fu_1134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_reg_1605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal x_11_fu_1143_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_11_reg_1613 : STD_LOGIC_VECTOR (30 downto 0);
    signal fft_hdata_re_addr_5_reg_1618 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln41_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_2_fu_1173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_2_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln46_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_16_fu_1178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_16_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_reg_1636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal y_13_fu_1203_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_13_reg_1644 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln52_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln61_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_13_fu_1218_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_13_reg_1662 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln53_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_1_fu_1235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_1_reg_1672 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_17_fu_1255_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_17_reg_1680 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln60_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_1_fu_1271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_1_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_16_fu_1276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_reg_361 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_5_reg_372 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal x_6_reg_383 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal x_7_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal y_4_reg_403 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul4_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_8_reg_426 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal y_5_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_9_reg_457 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal y_0_reg_468 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_0_reg_479 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal x_1_reg_490 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal x_2_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal y_1_reg_510 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_533 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal x_4_reg_544 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sext_ln34_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln70_2_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln70_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln80_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_1_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln80_1_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln87_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln87_1_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln94_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln94_1_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_2_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_1125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_1_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_1_fu_1184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_1_fu_1241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_1_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_fu_590_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_2_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln29_1_fu_610_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln29_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln29_2_fu_630_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_3_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_1_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_1_fu_652_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_1_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_4_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln29_4_fu_672_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln29_2_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln29_5_fu_692_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_5_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_3_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_720_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_fu_725_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_fu_725_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln37_1_fu_737_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_1_fu_737_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln37_2_cast_fu_729_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln37_3_cast_fu_741_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_12_fu_755_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln67_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln70_fu_806_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln70_fu_830_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_2_fu_834_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln70_1_fu_839_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_4_fu_843_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln80_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln75_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln85_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln86_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_957_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln94_1_fu_984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_1_fu_994_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln93_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_fu_1003_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_1040_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_fu_1064_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln37_fu_1073_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_fu_1082_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_2_fu_1097_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_2_fu_1101_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln37_1_fu_1106_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_5_fu_1110_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_1_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln46_fu_1168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_1189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_fu_1194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_fu_1209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_1213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_1246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_1250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component get_input_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    get_input_fmul_32ns_32ns_32_3_max_dsp_1_U1 : component get_input_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_580,
        din1 => scale,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    phi_mul4_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_946_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_mul4_reg_414 <= add_ln85_reg_1466;
            elsif (((icmp_ln66_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul4_reg_414 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                phi_mul_reg_521 <= add_ln52_reg_1636;
            elsif (((icmp_ln33_fu_1044_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul_reg_521 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                x_0_reg_479 <= x_reg_1585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                x_0_reg_479 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    x_1_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_1086_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                x_1_reg_490 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                x_1_reg_490 <= x_11_reg_1613;
            end if; 
        end if;
    end process;

    x_2_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                x_2_reg_501 <= x_16_reg_1631;
            elsif (((icmp_ln41_fu_1138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                x_2_reg_501 <= x_12_reg_1359;
            end if; 
        end if;
    end process;

    x_3_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln52_fu_1198_p2 = ap_const_lv1_1))) then 
                x_3_reg_533 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                x_3_reg_533 <= x_13_reg_1662;
            end if; 
        end if;
    end process;

    x_4_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln59_fu_989_p2 = ap_const_lv1_1) and (icmp_ln32_reg_1344 = ap_const_lv1_1))) then 
                x_4_reg_544 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                x_4_reg_544 <= x_17_reg_1680;
            end if; 
        end if;
    end process;

    x_5_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                x_5_reg_372 <= x_10_reg_1415;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_5_reg_372 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    x_6_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_6_reg_383 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                x_6_reg_383 <= x_14_reg_1443;
            end if; 
        end if;
    end process;

    x_7_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_7_reg_394 <= x_18_reg_1461;
            elsif (((icmp_ln74_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                x_7_reg_394 <= x_12_reg_1359;
            end if; 
        end if;
    end process;

    x_8_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln85_fu_931_p2 = ap_const_lv1_1))) then 
                x_8_reg_426 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                x_8_reg_426 <= x_15_reg_1492;
            end if; 
        end if;
    end process;

    x_9_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1344 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln92_fu_979_p2 = ap_const_lv1_1))) then 
                x_9_reg_457 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x_9_reg_457 <= x_19_reg_1526;
            end if; 
        end if;
    end process;

    y_0_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln32_fu_714_p2 = ap_const_lv1_1))) then 
                y_0_reg_468 <= ap_const_lv31_0;
            elsif (((icmp_ln46_fu_1168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                y_0_reg_468 <= y_9_reg_1549;
            end if; 
        end if;
    end process;

    y_1_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_1213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                y_1_reg_510 <= y_13_reg_1644;
            elsif (((icmp_ln33_fu_1044_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                y_1_reg_510 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    y_2_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_1250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                y_2_reg_447 <= y_16_fu_1276_p2;
            elsif (((icmp_ln52_fu_1198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                y_2_reg_447 <= grp_fu_563_p2;
            end if; 
        end if;
    end process;

    y_3_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_714_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_3_reg_361 <= ap_const_lv31_0;
            elsif (((icmp_ln79_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                y_3_reg_361 <= y_11_reg_1379;
            end if; 
        end if;
    end process;

    y_4_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_946_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                y_4_reg_403 <= y_14_reg_1474;
            elsif (((icmp_ln66_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_4_reg_403 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    y_5_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_1003_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                y_5_reg_437 <= y_17_fu_1029_p2;
            elsif (((icmp_ln85_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                y_5_reg_437 <= grp_fu_563_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln37_1_reg_1576 <= add_ln37_1_fu_1077_p2;
                mul_ln37_1_reg_1564 <= mul_ln37_1_fu_1068_p2;
                mul_ln37_reg_1569 <= mul_ln37_fu_1073_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln36_fu_1086_p2 = ap_const_lv1_1))) then
                add_ln37_3_reg_1595 <= add_ln37_3_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln37_4_reg_1348(10 downto 1) <= add_ln37_4_fu_749_p2(10 downto 1);
                add_ln47_reg_1365 <= add_ln47_fu_761_p2;
                icmp_ln32_reg_1344 <= icmp_ln32_fu_714_p2;
                ih_reg_1333 <= ih_fu_706_p3;
                in_linesize_addr_reg_1354 <= sext_ln34_fu_720_p1(7 - 1 downto 0);
                iw_reg_1325 <= iw_fu_644_p3;
                sub_ln47_reg_1370 <= sub_ln47_fu_767_p2;
                x_12_reg_1359 <= x_12_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln33_fu_1044_p2 = ap_const_lv1_1))) then
                add_ln37_reg_1559 <= add_ln37_fu_1059_p2;
                trunc_ln34_1_reg_1554 <= trunc_ln34_1_fu_1055_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln46_fu_1168_p2 = ap_const_lv1_1))) then
                add_ln47_2_reg_1626 <= add_ln47_2_fu_1173_p2;
                x_16_reg_1631 <= x_16_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln52_reg_1636 <= add_ln52_fu_1189_p2;
                y_13_reg_1644 <= y_13_fu_1203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln53_fu_1213_p2 = ap_const_lv1_1))) then
                add_ln54_1_reg_1672 <= add_ln54_1_fu_1235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln60_fu_1250_p2 = ap_const_lv1_1))) then
                add_ln61_1_reg_1690 <= add_ln61_1_fu_1271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln70_1_reg_1406 <= add_ln70_1_fu_810_p2;
                mul_ln70_1_reg_1394 <= mul_ln70_1_fu_801_p2;
                mul_ln70_reg_1399 <= mul_ln70_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln69_fu_819_p2 = ap_const_lv1_1))) then
                add_ln70_3_reg_1425 <= add_ln70_3_fu_853_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_777_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln70_reg_1389 <= add_ln70_fu_792_p2;
                trunc_ln67_1_reg_1384 <= trunc_ln67_1_fu_788_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln79_fu_901_p2 = ap_const_lv1_1))) then
                add_ln80_1_reg_1456 <= add_ln80_1_fu_906_p2;
                x_18_reg_1461 <= x_18_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln85_reg_1466 <= add_ln85_fu_922_p2;
                y_14_reg_1474 <= y_14_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln86_fu_946_p2 = ap_const_lv1_1))) then
                add_ln87_1_reg_1502 <= add_ln87_1_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln93_fu_1003_p2 = ap_const_lv1_1))) then
                add_ln94_1_reg_1536 <= add_ln94_1_fu_1024_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_1086_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                fft_hdata_re_addr_1_reg_1600 <= sext_ln42_fu_1125_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                fft_hdata_re_addr_3_reg_1430 <= sext_ln75_fu_858_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_1138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                fft_hdata_re_addr_5_reg_1618 <= sext_ln47_fu_1153_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln74_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                fft_hdata_re_addr_9_reg_1448 <= sext_ln80_fu_886_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln59_fu_989_p2 = ap_const_lv1_1) and (icmp_ln32_reg_1344 = ap_const_lv1_1))) then
                mul_ln61_1_reg_1518 <= mul_ln61_1_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                mul_ln61_reg_1654 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1344 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln92_fu_979_p2 = ap_const_lv1_1))) then
                mul_ln94_1_reg_1510 <= mul_ln94_1_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                mul_ln94_reg_1484 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln66_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln33_fu_1044_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then
                reg_576 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_580 <= in_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_585 <= grp_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_10_reg_1415 <= x_10_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                x_11_reg_1613 <= x_11_fu_1143_p2;
                    zext_ln41_reg_1605(30 downto 0) <= zext_ln41_fu_1134_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                x_13_reg_1662 <= x_13_fu_1218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                x_14_reg_1443 <= x_14_fu_876_p2;
                    zext_ln74_reg_1435(30 downto 0) <= zext_ln74_fu_867_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                x_15_reg_1492 <= x_15_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                x_17_reg_1680 <= x_17_fu_1255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                x_19_reg_1526 <= x_19_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                x_reg_1585 <= x_fu_1091_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_11_reg_1379 <= y_11_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                y_9_reg_1549 <= y_9_fu_1049_p2;
            end if;
        end if;
    end process;
    add_ln37_4_reg_1348(0) <= '0';
    zext_ln74_reg_1435(31) <= '0';
    zext_ln41_reg_1605(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_777_p2, ap_CS_fsm_state20, icmp_ln33_fu_1044_p2, icmp_ln32_fu_714_p2, icmp_ln32_reg_1344, ap_CS_fsm_state4, icmp_ln69_fu_819_p2, ap_CS_fsm_state10, icmp_ln74_fu_871_p2, ap_CS_fsm_state12, icmp_ln79_fu_901_p2, ap_CS_fsm_state14, icmp_ln85_fu_931_p2, ap_CS_fsm_state15, icmp_ln86_fu_946_p2, ap_CS_fsm_state17, icmp_ln92_fu_979_p2, icmp_ln59_fu_989_p2, ap_CS_fsm_state18, icmp_ln93_fu_1003_p2, ap_CS_fsm_state22, icmp_ln36_fu_1086_p2, ap_CS_fsm_state28, icmp_ln41_fu_1138_p2, ap_CS_fsm_state30, icmp_ln46_fu_1168_p2, ap_CS_fsm_state32, icmp_ln52_fu_1198_p2, ap_CS_fsm_state33, icmp_ln53_fu_1213_p2, ap_CS_fsm_state35, icmp_ln60_fu_1250_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln32_fu_714_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((icmp_ln32_fu_714_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln69_fu_819_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln74_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln79_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln85_fu_931_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln86_fu_946_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((icmp_ln59_fu_989_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_1)) or ((icmp_ln92_fu_979_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln59_fu_989_p2 = ap_const_lv1_1) and (icmp_ln32_reg_1344 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln93_fu_1003_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln33_fu_1044_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln36_fu_1086_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln41_fu_1138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln46_fu_1168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln52_fu_1198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln53_fu_1213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln60_fu_1250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln37_1_fu_1077_p2 <= std_logic_vector(unsigned(mul_ln37_fu_1073_p2) + unsigned(iw_reg_1325));
    add_ln37_2_fu_1101_p2 <= std_logic_vector(unsigned(trunc_ln37_2_fu_1097_p1) + unsigned(mul_ln37_1_reg_1564));
    add_ln37_3_fu_1120_p2 <= std_logic_vector(unsigned(zext_ln36_fu_1082_p1) + unsigned(add_ln37_1_reg_1576));
    add_ln37_4_fu_749_p2 <= std_logic_vector(unsigned(sext_ln37_2_cast_fu_729_p3) + unsigned(sext_ln37_3_cast_fu_741_p3));
    add_ln37_5_fu_1110_p2 <= std_logic_vector(unsigned(add_ln37_4_reg_1348) + unsigned(sext_ln37_1_fu_1106_p1));
    add_ln37_fu_1059_p2 <= std_logic_vector(unsigned(zext_ln33_fu_1040_p1) + unsigned(ih_reg_1333));
    add_ln42_fu_1158_p2 <= std_logic_vector(unsigned(zext_ln41_reg_1605) + unsigned(mul_ln37_reg_1569));
    add_ln47_1_fu_1149_p2 <= std_logic_vector(unsigned(sub_ln47_reg_1370) + unsigned(mul_ln37_reg_1569));
    add_ln47_2_fu_1173_p2 <= std_logic_vector(unsigned(x_2_reg_501) + unsigned(mul_ln37_reg_1569));
    add_ln47_fu_761_p1 <= n;
    add_ln47_fu_761_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(add_ln47_fu_761_p1));
    add_ln52_fu_1189_p1 <= n;
    add_ln52_fu_1189_p2 <= std_logic_vector(unsigned(phi_mul_reg_521) + unsigned(add_ln52_fu_1189_p1));
    add_ln54_1_fu_1235_p2 <= std_logic_vector(unsigned(zext_ln53_fu_1209_p1) + unsigned(phi_mul_reg_521));
    add_ln54_fu_1224_p2 <= std_logic_vector(unsigned(zext_ln53_fu_1209_p1) + unsigned(reg_576));
    add_ln61_1_fu_1271_p2 <= std_logic_vector(unsigned(zext_ln60_fu_1246_p1) + unsigned(mul_ln61_1_reg_1518));
    add_ln61_fu_1261_p2 <= std_logic_vector(unsigned(zext_ln60_fu_1246_p1) + unsigned(mul_ln61_reg_1654));
    add_ln70_1_fu_810_p2 <= std_logic_vector(unsigned(mul_ln70_fu_806_p2) + unsigned(iw_reg_1325));
    add_ln70_2_fu_834_p2 <= std_logic_vector(unsigned(trunc_ln70_fu_830_p1) + unsigned(mul_ln70_1_reg_1394));
    add_ln70_3_fu_853_p2 <= std_logic_vector(unsigned(zext_ln69_fu_815_p1) + unsigned(add_ln70_1_reg_1406));
    add_ln70_4_fu_843_p2 <= std_logic_vector(unsigned(add_ln37_4_reg_1348) + unsigned(sext_ln70_1_fu_839_p1));
    add_ln70_fu_792_p2 <= std_logic_vector(unsigned(zext_ln66_fu_773_p1) + unsigned(ih_reg_1333));
    add_ln75_fu_891_p2 <= std_logic_vector(unsigned(zext_ln74_reg_1435) + unsigned(mul_ln70_reg_1399));
    add_ln80_1_fu_906_p2 <= std_logic_vector(unsigned(x_7_reg_394) + unsigned(mul_ln70_reg_1399));
    add_ln80_fu_882_p2 <= std_logic_vector(unsigned(sub_ln47_reg_1370) + unsigned(mul_ln70_reg_1399));
    add_ln85_fu_922_p1 <= n;
    add_ln85_fu_922_p2 <= std_logic_vector(unsigned(phi_mul4_reg_414) + unsigned(add_ln85_fu_922_p1));
    add_ln87_1_fu_968_p2 <= std_logic_vector(unsigned(zext_ln86_fu_942_p1) + unsigned(phi_mul4_reg_414));
    add_ln87_fu_957_p2 <= std_logic_vector(unsigned(zext_ln86_fu_942_p1) + unsigned(reg_576));
    add_ln94_1_fu_1024_p2 <= std_logic_vector(unsigned(zext_ln93_fu_999_p1) + unsigned(mul_ln94_1_reg_1510));
    add_ln94_fu_1014_p2 <= std_logic_vector(unsigned(zext_ln93_fu_999_p1) + unsigned(mul_ln94_reg_1484));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(icmp_ln32_reg_1344, ap_CS_fsm_state17, icmp_ln92_fu_979_p2, icmp_ln59_fu_989_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((icmp_ln59_fu_989_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_1)) or ((icmp_ln92_fu_979_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln32_reg_1344, ap_CS_fsm_state17, icmp_ln92_fu_979_p2, icmp_ln59_fu_989_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((icmp_ln59_fu_989_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_1)) or ((icmp_ln92_fu_979_p2 = ap_const_lv1_0) and (icmp_ln32_reg_1344 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    fft_hdata_im_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, sext_ln70_fu_862_p1, sext_ln75_1_fu_895_p1, sext_ln80_1_fu_917_p1, sext_ln87_1_fu_974_p1, sext_ln94_1_fu_1035_p1, sext_ln37_fu_1129_p1, sext_ln42_1_fu_1162_p1, sext_ln47_1_fu_1184_p1, sext_ln54_1_fu_1241_p1, sext_ln61_1_fu_1282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fft_hdata_im_address0 <= sext_ln61_1_fu_1282_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fft_hdata_im_address0 <= sext_ln54_1_fu_1241_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            fft_hdata_im_address0 <= sext_ln47_1_fu_1184_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            fft_hdata_im_address0 <= sext_ln42_1_fu_1162_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fft_hdata_im_address0 <= sext_ln37_fu_1129_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fft_hdata_im_address0 <= sext_ln94_1_fu_1035_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fft_hdata_im_address0 <= sext_ln87_1_fu_974_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fft_hdata_im_address0 <= sext_ln80_1_fu_917_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fft_hdata_im_address0 <= sext_ln75_1_fu_895_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fft_hdata_im_address0 <= sext_ln70_fu_862_p1(4 - 1 downto 0);
        else 
            fft_hdata_im_address0 <= "XXXX";
        end if; 
    end process;


    fft_hdata_im_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fft_hdata_im_ce0 <= ap_const_logic_1;
        else 
            fft_hdata_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fft_hdata_im_d0 <= ap_const_lv32_0;

    fft_hdata_im_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fft_hdata_im_we0 <= ap_const_logic_1;
        else 
            fft_hdata_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_hdata_re_address0_assign_proc : process(fft_hdata_re_addr_3_reg_1430, ap_CS_fsm_state10, fft_hdata_re_addr_9_reg_1448, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, fft_hdata_re_addr_1_reg_1600, ap_CS_fsm_state28, fft_hdata_re_addr_5_reg_1618, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36, sext_ln70_fu_862_p1, sext_ln75_1_fu_895_p1, sext_ln80_1_fu_917_p1, sext_ln87_fu_963_p1, sext_ln87_1_fu_974_p1, sext_ln94_fu_1019_p1, sext_ln94_1_fu_1035_p1, sext_ln37_fu_1129_p1, sext_ln42_1_fu_1162_p1, sext_ln47_1_fu_1184_p1, sext_ln54_fu_1230_p1, sext_ln54_1_fu_1241_p1, sext_ln61_fu_1266_p1, sext_ln61_1_fu_1282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fft_hdata_re_address0 <= sext_ln61_1_fu_1282_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fft_hdata_re_address0 <= sext_ln61_fu_1266_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            fft_hdata_re_address0 <= sext_ln54_1_fu_1241_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fft_hdata_re_address0 <= sext_ln54_fu_1230_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            fft_hdata_re_address0 <= sext_ln47_1_fu_1184_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            fft_hdata_re_address0 <= fft_hdata_re_addr_5_reg_1618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            fft_hdata_re_address0 <= sext_ln42_1_fu_1162_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            fft_hdata_re_address0 <= fft_hdata_re_addr_1_reg_1600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            fft_hdata_re_address0 <= sext_ln37_fu_1129_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fft_hdata_re_address0 <= sext_ln94_1_fu_1035_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fft_hdata_re_address0 <= sext_ln94_fu_1019_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            fft_hdata_re_address0 <= sext_ln87_1_fu_974_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fft_hdata_re_address0 <= sext_ln87_fu_963_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fft_hdata_re_address0 <= sext_ln80_1_fu_917_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fft_hdata_re_address0 <= fft_hdata_re_addr_9_reg_1448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fft_hdata_re_address0 <= sext_ln75_1_fu_895_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fft_hdata_re_address0 <= fft_hdata_re_addr_3_reg_1430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fft_hdata_re_address0 <= sext_ln70_fu_862_p1(4 - 1 downto 0);
        else 
            fft_hdata_re_address0 <= "XXXX";
        end if; 
    end process;


    fft_hdata_re_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fft_hdata_re_ce0 <= ap_const_logic_1;
        else 
            fft_hdata_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_hdata_re_d0_assign_proc : process(fft_hdata_re_q0, reg_585, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            fft_hdata_re_d0 <= fft_hdata_re_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fft_hdata_re_d0 <= reg_585;
        else 
            fft_hdata_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_hdata_re_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            fft_hdata_re_we0 <= ap_const_logic_1;
        else 
            fft_hdata_re_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_559_p1 <= n;
    grp_fu_559_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ih_reg_1333) * signed(grp_fu_559_p1))), 32));
    grp_fu_563_p0 <= n;
    grp_fu_563_p2 <= std_logic_vector(signed(grp_fu_563_p0) - signed(ih_reg_1333));
    grp_fu_567_p2 <= std_logic_vector(unsigned(add_ln47_reg_1365) - unsigned(ih_reg_1333));
    grp_fu_571_p1 <= n;
    grp_fu_571_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_567_p2) * signed(grp_fu_571_p1))), 32));
    icmp_ln32_fu_714_p2 <= "1" when (s_depth = ap_const_lv32_8) else "0";
    icmp_ln33_fu_1044_p2 <= "1" when (signed(zext_ln33_fu_1040_p1) < signed(h)) else "0";
    icmp_ln36_fu_1086_p2 <= "1" when (signed(zext_ln36_fu_1082_p1) < signed(w)) else "0";
    icmp_ln41_fu_1138_p2 <= "1" when (signed(zext_ln41_fu_1134_p1) < signed(iw_reg_1325)) else "0";
    icmp_ln46_fu_1168_p1 <= n;
    icmp_ln46_fu_1168_p2 <= "1" when (signed(x_2_reg_501) < signed(icmp_ln46_fu_1168_p1)) else "0";
    icmp_ln52_fu_1198_p2 <= "1" when (signed(zext_ln52_fu_1194_p1) < signed(ih_reg_1333)) else "0";
    icmp_ln53_fu_1213_p1 <= n;
    icmp_ln53_fu_1213_p2 <= "1" when (signed(zext_ln53_fu_1209_p1) < signed(icmp_ln53_fu_1213_p1)) else "0";
    icmp_ln59_fu_989_p1 <= n;
    icmp_ln59_fu_989_p2 <= "1" when (signed(y_2_reg_447) < signed(icmp_ln59_fu_989_p1)) else "0";
    icmp_ln60_fu_1250_p1 <= n;
    icmp_ln60_fu_1250_p2 <= "1" when (signed(zext_ln60_fu_1246_p1) < signed(icmp_ln60_fu_1250_p1)) else "0";
    icmp_ln66_fu_777_p2 <= "1" when (signed(zext_ln66_fu_773_p1) < signed(h)) else "0";
    icmp_ln69_fu_819_p2 <= "1" when (signed(zext_ln69_fu_815_p1) < signed(w)) else "0";
    icmp_ln74_fu_871_p2 <= "1" when (signed(zext_ln74_fu_867_p1) < signed(iw_reg_1325)) else "0";
    icmp_ln79_fu_901_p1 <= n;
    icmp_ln79_fu_901_p2 <= "1" when (signed(x_7_reg_394) < signed(icmp_ln79_fu_901_p1)) else "0";
    icmp_ln85_fu_931_p2 <= "1" when (signed(zext_ln85_fu_927_p1) < signed(ih_reg_1333)) else "0";
    icmp_ln86_fu_946_p1 <= n;
    icmp_ln86_fu_946_p2 <= "1" when (signed(zext_ln86_fu_942_p1) < signed(icmp_ln86_fu_946_p1)) else "0";
    icmp_ln92_fu_979_p1 <= n;
    icmp_ln92_fu_979_p2 <= "1" when (signed(y_5_reg_437) < signed(icmp_ln92_fu_979_p1)) else "0";
    icmp_ln93_fu_1003_p1 <= n;
    icmp_ln93_fu_1003_p2 <= "1" when (signed(zext_ln93_fu_999_p1) < signed(icmp_ln93_fu_1003_p1)) else "0";
    ih_fu_706_p3 <= 
        sub_ln29_5_fu_686_p2 when (tmp_3_fu_658_p3(0) = '1') else 
        zext_ln29_3_fu_702_p1;

    in_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, sext_ln70_2_fu_848_p1, sext_ln37_2_fu_1115_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            in_data_address0 <= sext_ln37_2_fu_1115_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_data_address0 <= sext_ln70_2_fu_848_p1(10 - 1 downto 0);
        else 
            in_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_linesize_address0 <= in_linesize_addr_reg_1354;

    in_linesize_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            in_linesize_ce0 <= ap_const_logic_1;
        else 
            in_linesize_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iw_fu_644_p3 <= 
        sub_ln29_3_fu_624_p2 when (tmp_2_fu_596_p3(0) = '1') else 
        zext_ln29_1_fu_640_p1;
    lshr_ln29_1_fu_610_p4 <= sub_ln29_2_fu_604_p2(31 downto 1);
    lshr_ln29_2_fu_630_p4 <= sub_ln29_fu_590_p2(31 downto 1);
    lshr_ln29_4_fu_672_p4 <= sub_ln29_4_fu_666_p2(31 downto 1);
    lshr_ln29_5_fu_692_p4 <= sub_ln29_1_fu_652_p2(31 downto 1);
    mul_ln37_1_fu_1068_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln34_fu_1064_p1) * signed(trunc_ln34_1_reg_1554))), 5));
    mul_ln37_fu_1073_p0 <= n;
    mul_ln37_fu_1073_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln37_fu_1073_p0) * signed(add_ln37_reg_1559))), 32));
    mul_ln61_1_fu_994_p1 <= n;
    mul_ln61_1_fu_994_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(y_2_reg_447) * signed(mul_ln61_1_fu_994_p1))), 32));
    mul_ln70_1_fu_801_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln67_fu_797_p1) * signed(trunc_ln67_1_reg_1384))), 5));
    mul_ln70_fu_806_p0 <= n;
    mul_ln70_fu_806_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln70_fu_806_p0) * signed(add_ln70_reg_1389))), 32));
    mul_ln94_1_fu_984_p1 <= n;
    mul_ln94_1_fu_984_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(y_5_reg_437) * signed(mul_ln94_1_fu_984_p1))), 32));
    sext_ln34_fu_720_p0 <= plane;
        sext_ln34_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln34_fu_720_p0),64));

        sext_ln37_1_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_2_fu_1101_p2),11));

    sext_ln37_2_cast_fu_729_p3 <= (trunc_ln37_fu_725_p1 & ap_const_lv3_0);
        sext_ln37_2_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_5_fu_1110_p2),64));

    sext_ln37_3_cast_fu_741_p3 <= (trunc_ln37_1_fu_737_p1 & ap_const_lv1_0);
        sext_ln37_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_3_reg_1595),64));

        sext_ln42_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln42_fu_1158_p2),64));

        sext_ln42_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_1_reg_1576),64));

        sext_ln47_1_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_2_reg_1626),64));

        sext_ln47_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_1_fu_1149_p2),64));

        sext_ln54_1_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_1_reg_1672),64));

        sext_ln54_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_1224_p2),64));

        sext_ln61_1_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln61_1_reg_1690),64));

        sext_ln61_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln61_fu_1261_p2),64));

        sext_ln70_1_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_2_fu_834_p2),11));

        sext_ln70_2_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_4_fu_843_p2),64));

        sext_ln70_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_3_reg_1425),64));

        sext_ln75_1_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln75_fu_891_p2),64));

        sext_ln75_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_1_reg_1406),64));

        sext_ln80_1_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln80_1_reg_1456),64));

        sext_ln80_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln80_fu_882_p2),64));

        sext_ln87_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln87_1_reg_1502),64));

        sext_ln87_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln87_fu_957_p2),64));

        sext_ln94_1_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln94_1_reg_1536),64));

        sext_ln94_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln94_fu_1014_p2),64));

    sub_ln29_1_fu_652_p0 <= n;
    sub_ln29_1_fu_652_p2 <= std_logic_vector(signed(sub_ln29_1_fu_652_p0) - signed(h));
    sub_ln29_2_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln29_fu_590_p2));
    sub_ln29_3_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln29_fu_620_p1));
    sub_ln29_4_fu_666_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln29_1_fu_652_p2));
    sub_ln29_5_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln29_2_fu_682_p1));
    sub_ln29_fu_590_p0 <= n;
    sub_ln29_fu_590_p2 <= std_logic_vector(signed(sub_ln29_fu_590_p0) - signed(w));
    sub_ln47_fu_767_p2 <= std_logic_vector(unsigned(add_ln47_fu_761_p2) - unsigned(iw_fu_644_p3));
    tmp_2_fu_596_p3 <= sub_ln29_fu_590_p2(31 downto 31);
    tmp_3_fu_658_p3 <= sub_ln29_1_fu_652_p2(31 downto 31);
    trunc_ln34_1_fu_1055_p1 <= y_0_reg_468(5 - 1 downto 0);
    trunc_ln34_fu_1064_p1 <= in_linesize_q0(5 - 1 downto 0);
    trunc_ln37_1_fu_737_p0 <= plane;
    trunc_ln37_1_fu_737_p1 <= trunc_ln37_1_fu_737_p0(10 - 1 downto 0);
    trunc_ln37_2_fu_1097_p1 <= x_0_reg_479(5 - 1 downto 0);
    trunc_ln37_fu_725_p0 <= plane;
    trunc_ln37_fu_725_p1 <= trunc_ln37_fu_725_p0(8 - 1 downto 0);
    trunc_ln67_1_fu_788_p1 <= y_3_reg_361(5 - 1 downto 0);
    trunc_ln67_fu_797_p1 <= in_linesize_q0(5 - 1 downto 0);
    trunc_ln70_fu_830_p1 <= x_5_reg_372(5 - 1 downto 0);
    x_10_fu_824_p2 <= std_logic_vector(unsigned(x_5_reg_372) + unsigned(ap_const_lv31_1));
    x_11_fu_1143_p2 <= std_logic_vector(unsigned(x_1_reg_490) + unsigned(ap_const_lv31_1));
    x_12_fu_755_p0 <= n;
    x_12_fu_755_p2 <= std_logic_vector(signed(x_12_fu_755_p0) - signed(iw_fu_644_p3));
    x_13_fu_1218_p2 <= std_logic_vector(unsigned(x_3_reg_533) + unsigned(ap_const_lv31_1));
    x_14_fu_876_p2 <= std_logic_vector(unsigned(x_6_reg_383) + unsigned(ap_const_lv31_1));
    x_15_fu_951_p2 <= std_logic_vector(unsigned(x_8_reg_426) + unsigned(ap_const_lv31_1));
    x_16_fu_1178_p2 <= std_logic_vector(unsigned(x_2_reg_501) + unsigned(ap_const_lv32_1));
    x_17_fu_1255_p2 <= std_logic_vector(unsigned(x_4_reg_544) + unsigned(ap_const_lv31_1));
    x_18_fu_911_p2 <= std_logic_vector(unsigned(x_7_reg_394) + unsigned(ap_const_lv32_1));
    x_19_fu_1008_p2 <= std_logic_vector(unsigned(x_9_reg_457) + unsigned(ap_const_lv31_1));
    x_fu_1091_p2 <= std_logic_vector(unsigned(x_0_reg_479) + unsigned(ap_const_lv31_1));
    y_11_fu_782_p2 <= std_logic_vector(unsigned(y_3_reg_361) + unsigned(ap_const_lv31_1));
    y_13_fu_1203_p2 <= std_logic_vector(unsigned(y_1_reg_510) + unsigned(ap_const_lv31_1));
    y_14_fu_936_p2 <= std_logic_vector(unsigned(y_4_reg_403) + unsigned(ap_const_lv31_1));
    y_16_fu_1276_p2 <= std_logic_vector(signed(y_2_reg_447) + signed(ap_const_lv32_1));
    y_17_fu_1029_p2 <= std_logic_vector(signed(y_5_reg_437) + signed(ap_const_lv32_1));
    y_9_fu_1049_p2 <= std_logic_vector(unsigned(y_0_reg_468) + unsigned(ap_const_lv31_1));
    zext_ln29_1_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln29_2_fu_630_p4),32));
    zext_ln29_2_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln29_4_fu_672_p4),32));
    zext_ln29_3_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln29_5_fu_692_p4),32));
    zext_ln29_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln29_1_fu_610_p4),32));
    zext_ln33_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_468),32));
    zext_ln36_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_479),32));
    zext_ln41_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_490),32));
    zext_ln52_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_510),32));
    zext_ln53_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_3_reg_533),32));
    zext_ln60_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_4_reg_544),32));
    zext_ln66_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_reg_361),32));
    zext_ln69_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_5_reg_372),32));
    zext_ln74_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_6_reg_383),32));
    zext_ln85_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_4_reg_403),32));
    zext_ln86_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_8_reg_426),32));
    zext_ln93_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_9_reg_457),32));
end behav;
