// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "RCC_GetClocksFreq.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic RCC_GetClocksFreq::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic RCC_GetClocksFreq::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state1 = "1";
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state2 = "10";
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state3 = "100";
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state4 = "1000";
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state5 = "10000";
const sc_lv<6> RCC_GetClocksFreq::ap_ST_fsm_state6 = "100000";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_1 = "1";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_5 = "101";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_2 = "10";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_3 = "11";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_4 = "100";
const sc_lv<32> RCC_GetClocksFreq::ap_const_lv32_1F = "11111";
const bool RCC_GetClocksFreq::ap_const_boolean_1 = true;

RCC_GetClocksFreq::RCC_GetClocksFreq(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RCC_Clocks_ADCCLK_Frequency);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( trunc_ln_fu_125_p4 );

    SC_METHOD(thread_RCC_Clocks_ADCCLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_RCC_Clocks_CECCLK_Frequency);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_CECCLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_HCLK_Frequency_o);
    sensitive << ( RCC_Clocks_SYSCLK_Frequency_i );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RCC_Clocks_HCLK_Frequency_o_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RCC_Clocks_I2C1CLK_Frequency);
    sensitive << ( RCC_Clocks_SYSCLK_Frequency_i );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_I2C1CLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_PCLK_Frequency_o);
    sensitive << ( RCC_Clocks_HCLK_Frequency_i );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_RCC_Clocks_PCLK_Frequency_o_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_RCC_Clocks_SYSCLK_Frequency_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RCC_Clocks_SYSCLK_Frequency_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RCC_Clocks_USART1CLK_Frequency);
    sensitive << ( RCC_Clocks_PCLK_Frequency_i );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RCC_Clocks_USART1CLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RCC_Clocks_USART2CLK_Frequency);
    sensitive << ( RCC_Clocks_PCLK_Frequency_i );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_USART2CLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_USBCLK_Frequency);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RCC_Clocks_USBCLK_Frequency_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_trunc_ln_fu_125_p4);
    sensitive << ( RCC_Clocks_PCLK_Frequency_i );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "RCC_GetClocksFreq_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, RCC_Clocks_SYSCLK_Frequency_i, "(port)RCC_Clocks_SYSCLK_Frequency_i");
    sc_trace(mVcdFile, RCC_Clocks_SYSCLK_Frequency_o, "(port)RCC_Clocks_SYSCLK_Frequency_o");
    sc_trace(mVcdFile, RCC_Clocks_SYSCLK_Frequency_o_ap_vld, "(port)RCC_Clocks_SYSCLK_Frequency_o_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_HCLK_Frequency_i, "(port)RCC_Clocks_HCLK_Frequency_i");
    sc_trace(mVcdFile, RCC_Clocks_HCLK_Frequency_o, "(port)RCC_Clocks_HCLK_Frequency_o");
    sc_trace(mVcdFile, RCC_Clocks_HCLK_Frequency_o_ap_vld, "(port)RCC_Clocks_HCLK_Frequency_o_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_PCLK_Frequency_i, "(port)RCC_Clocks_PCLK_Frequency_i");
    sc_trace(mVcdFile, RCC_Clocks_PCLK_Frequency_o, "(port)RCC_Clocks_PCLK_Frequency_o");
    sc_trace(mVcdFile, RCC_Clocks_PCLK_Frequency_o_ap_vld, "(port)RCC_Clocks_PCLK_Frequency_o_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_ADCCLK_Frequency, "(port)RCC_Clocks_ADCCLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_ADCCLK_Frequency_ap_vld, "(port)RCC_Clocks_ADCCLK_Frequency_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_CECCLK_Frequency, "(port)RCC_Clocks_CECCLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_CECCLK_Frequency_ap_vld, "(port)RCC_Clocks_CECCLK_Frequency_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_I2C1CLK_Frequency, "(port)RCC_Clocks_I2C1CLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_I2C1CLK_Frequency_ap_vld, "(port)RCC_Clocks_I2C1CLK_Frequency_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_USART1CLK_Frequency, "(port)RCC_Clocks_USART1CLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_USART1CLK_Frequency_ap_vld, "(port)RCC_Clocks_USART1CLK_Frequency_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_USART2CLK_Frequency, "(port)RCC_Clocks_USART2CLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_USART2CLK_Frequency_ap_vld, "(port)RCC_Clocks_USART2CLK_Frequency_ap_vld");
    sc_trace(mVcdFile, RCC_Clocks_USBCLK_Frequency, "(port)RCC_Clocks_USBCLK_Frequency");
    sc_trace(mVcdFile, RCC_Clocks_USBCLK_Frequency_ap_vld, "(port)RCC_Clocks_USBCLK_Frequency_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, trunc_ln_fu_125_p4, "trunc_ln_fu_125_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("RCC_GetClocksFreq.hdltvin.dat");
    mHdltvoutHandle.open("RCC_GetClocksFreq.hdltvout.dat");
}

RCC_GetClocksFreq::~RCC_GetClocksFreq() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void RCC_GetClocksFreq::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_ADCCLK_Frequency() {
    RCC_Clocks_ADCCLK_Frequency = esl_sext<32,30>(trunc_ln_fu_125_p4.read());
}

void RCC_GetClocksFreq::thread_RCC_Clocks_ADCCLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RCC_Clocks_ADCCLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_ADCCLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_CECCLK_Frequency() {
    RCC_Clocks_CECCLK_Frequency = ap_const_lv32_0;
}

void RCC_GetClocksFreq::thread_RCC_Clocks_CECCLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RCC_Clocks_CECCLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_CECCLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_HCLK_Frequency_o() {
    RCC_Clocks_HCLK_Frequency_o = RCC_Clocks_SYSCLK_Frequency_i.read();
}

void RCC_GetClocksFreq::thread_RCC_Clocks_HCLK_Frequency_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RCC_Clocks_HCLK_Frequency_o_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_HCLK_Frequency_o_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_I2C1CLK_Frequency() {
    RCC_Clocks_I2C1CLK_Frequency = RCC_Clocks_SYSCLK_Frequency_i.read();
}

void RCC_GetClocksFreq::thread_RCC_Clocks_I2C1CLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RCC_Clocks_I2C1CLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_I2C1CLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_PCLK_Frequency_o() {
    RCC_Clocks_PCLK_Frequency_o = RCC_Clocks_HCLK_Frequency_i.read();
}

void RCC_GetClocksFreq::thread_RCC_Clocks_PCLK_Frequency_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RCC_Clocks_PCLK_Frequency_o_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_PCLK_Frequency_o_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_SYSCLK_Frequency_o() {
    RCC_Clocks_SYSCLK_Frequency_o = ap_const_lv32_0;
}

void RCC_GetClocksFreq::thread_RCC_Clocks_SYSCLK_Frequency_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RCC_Clocks_SYSCLK_Frequency_o_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_SYSCLK_Frequency_o_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USART1CLK_Frequency() {
    RCC_Clocks_USART1CLK_Frequency = RCC_Clocks_PCLK_Frequency_i.read();
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USART1CLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RCC_Clocks_USART1CLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_USART1CLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USART2CLK_Frequency() {
    RCC_Clocks_USART2CLK_Frequency = RCC_Clocks_PCLK_Frequency_i.read();
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USART2CLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RCC_Clocks_USART2CLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_USART2CLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USBCLK_Frequency() {
    RCC_Clocks_USBCLK_Frequency = ap_const_lv32_0;
}

void RCC_GetClocksFreq::thread_RCC_Clocks_USBCLK_Frequency_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RCC_Clocks_USBCLK_Frequency_ap_vld = ap_const_logic_1;
    } else {
        RCC_Clocks_USBCLK_Frequency_ap_vld = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void RCC_GetClocksFreq::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void RCC_GetClocksFreq::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void RCC_GetClocksFreq::thread_trunc_ln_fu_125_p4() {
    trunc_ln_fu_125_p4 = RCC_Clocks_PCLK_Frequency_i.read().range(31, 2);
}

void RCC_GetClocksFreq::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void RCC_GetClocksFreq::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RCC_Clocks_SYSCLK_Frequency_i\" :  \"" << RCC_Clocks_SYSCLK_Frequency_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_SYSCLK_Frequency_o\" :  \"" << RCC_Clocks_SYSCLK_Frequency_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_SYSCLK_Frequency_o_ap_vld\" :  \"" << RCC_Clocks_SYSCLK_Frequency_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RCC_Clocks_HCLK_Frequency_i\" :  \"" << RCC_Clocks_HCLK_Frequency_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_HCLK_Frequency_o\" :  \"" << RCC_Clocks_HCLK_Frequency_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_HCLK_Frequency_o_ap_vld\" :  \"" << RCC_Clocks_HCLK_Frequency_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RCC_Clocks_PCLK_Frequency_i\" :  \"" << RCC_Clocks_PCLK_Frequency_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_PCLK_Frequency_o\" :  \"" << RCC_Clocks_PCLK_Frequency_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_PCLK_Frequency_o_ap_vld\" :  \"" << RCC_Clocks_PCLK_Frequency_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_ADCCLK_Frequency\" :  \"" << RCC_Clocks_ADCCLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_ADCCLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_ADCCLK_Frequency_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_CECCLK_Frequency\" :  \"" << RCC_Clocks_CECCLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_CECCLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_CECCLK_Frequency_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_I2C1CLK_Frequency\" :  \"" << RCC_Clocks_I2C1CLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_I2C1CLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_I2C1CLK_Frequency_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USART1CLK_Frequency\" :  \"" << RCC_Clocks_USART1CLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USART1CLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_USART1CLK_Frequency_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USART2CLK_Frequency\" :  \"" << RCC_Clocks_USART2CLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USART2CLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_USART2CLK_Frequency_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USBCLK_Frequency\" :  \"" << RCC_Clocks_USBCLK_Frequency.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RCC_Clocks_USBCLK_Frequency_ap_vld\" :  \"" << RCC_Clocks_USBCLK_Frequency_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

