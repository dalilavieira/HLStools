// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _RCC_GetClocksFreq_HH_
#define _RCC_GetClocksFreq_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct RCC_GetClocksFreq : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > RCC_Clocks_SYSCLK_Frequency_i;
    sc_out< sc_lv<32> > RCC_Clocks_SYSCLK_Frequency_o;
    sc_out< sc_logic > RCC_Clocks_SYSCLK_Frequency_o_ap_vld;
    sc_in< sc_lv<32> > RCC_Clocks_HCLK_Frequency_i;
    sc_out< sc_lv<32> > RCC_Clocks_HCLK_Frequency_o;
    sc_out< sc_logic > RCC_Clocks_HCLK_Frequency_o_ap_vld;
    sc_in< sc_lv<32> > RCC_Clocks_PCLK_Frequency_i;
    sc_out< sc_lv<32> > RCC_Clocks_PCLK_Frequency_o;
    sc_out< sc_logic > RCC_Clocks_PCLK_Frequency_o_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_ADCCLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_ADCCLK_Frequency_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_CECCLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_CECCLK_Frequency_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_I2C1CLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_I2C1CLK_Frequency_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_USART1CLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_USART1CLK_Frequency_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_USART2CLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_USART2CLK_Frequency_ap_vld;
    sc_out< sc_lv<32> > RCC_Clocks_USBCLK_Frequency;
    sc_out< sc_logic > RCC_Clocks_USBCLK_Frequency_ap_vld;


    // Module declarations
    RCC_GetClocksFreq(sc_module_name name);
    SC_HAS_PROCESS(RCC_GetClocksFreq);

    ~RCC_GetClocksFreq();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<30> > trunc_ln_fu_125_p4;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RCC_Clocks_ADCCLK_Frequency();
    void thread_RCC_Clocks_ADCCLK_Frequency_ap_vld();
    void thread_RCC_Clocks_CECCLK_Frequency();
    void thread_RCC_Clocks_CECCLK_Frequency_ap_vld();
    void thread_RCC_Clocks_HCLK_Frequency_o();
    void thread_RCC_Clocks_HCLK_Frequency_o_ap_vld();
    void thread_RCC_Clocks_I2C1CLK_Frequency();
    void thread_RCC_Clocks_I2C1CLK_Frequency_ap_vld();
    void thread_RCC_Clocks_PCLK_Frequency_o();
    void thread_RCC_Clocks_PCLK_Frequency_o_ap_vld();
    void thread_RCC_Clocks_SYSCLK_Frequency_o();
    void thread_RCC_Clocks_SYSCLK_Frequency_o_ap_vld();
    void thread_RCC_Clocks_USART1CLK_Frequency();
    void thread_RCC_Clocks_USART1CLK_Frequency_ap_vld();
    void thread_RCC_Clocks_USART2CLK_Frequency();
    void thread_RCC_Clocks_USART2CLK_Frequency_ap_vld();
    void thread_RCC_Clocks_USBCLK_Frequency();
    void thread_RCC_Clocks_USBCLK_Frequency_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_trunc_ln_fu_125_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
