// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getPixelColorRGBA16.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getPixelColorRGBA16::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getPixelColorRGBA16::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> getPixelColorRGBA16::ap_ST_fsm_state1 = "1";
const sc_lv<4> getPixelColorRGBA16::ap_ST_fsm_state2 = "10";
const sc_lv<4> getPixelColorRGBA16::ap_ST_fsm_state3 = "100";
const sc_lv<4> getPixelColorRGBA16::ap_ST_fsm_state4 = "1000";
const sc_lv<32> getPixelColorRGBA16::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getPixelColorRGBA16::ap_const_lv32_1 = "1";
const sc_lv<32> getPixelColorRGBA16::ap_const_lv32_2 = "10";
const sc_lv<1> getPixelColorRGBA16::ap_const_lv1_1 = "1";
const sc_lv<7> getPixelColorRGBA16::ap_const_lv7_0 = "0000000";
const sc_lv<32> getPixelColorRGBA16::ap_const_lv32_3 = "11";
const sc_lv<7> getPixelColorRGBA16::ap_const_lv7_55 = "1010101";
const sc_lv<1> getPixelColorRGBA16::ap_const_lv1_0 = "0";
const sc_lv<64> getPixelColorRGBA16::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> getPixelColorRGBA16::ap_const_lv32_10 = "10000";
const sc_lv<11> getPixelColorRGBA16::ap_const_lv11_1 = "1";
const sc_lv<16> getPixelColorRGBA16::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<16> getPixelColorRGBA16::ap_const_lv16_0 = "0000000000000000";
const sc_lv<10> getPixelColorRGBA16::ap_const_lv10_0 = "0000000000";
const bool getPixelColorRGBA16::ap_const_boolean_1 = true;

getPixelColorRGBA16::getPixelColorRGBA16(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( or_ln30_fu_272_p2 );

    SC_METHOD(thread_a_we0);
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_195_p6);
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( p_0_reg_191 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_phi_mux_p_0_phi_fu_195_p6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_245_p3 );

    SC_METHOD(thread_b_we0);
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_g_address0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_g_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_g_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_245_p3 );

    SC_METHOD(thread_g_we0);
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln25_fu_206_p2);
    sensitive << ( mode_bitdepth_q0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln27_fu_212_p2);
    sensitive << ( mode_colortype_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln30_1_fu_266_p2);
    sensitive << ( mode_key_r_q0 );
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln30_fu_256_p1 );

    SC_METHOD(thread_icmp_ln30_fu_260_p2);
    sensitive << ( mode_key_defined_q0 );
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln29_fu_229_p1 );

    SC_METHOD(thread_in_r_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln29_1_fu_240_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_r_ce1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mode_bitdepth_address0);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mode_bitdepth_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mode_colortype_address0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mode_colortype_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mode_key_b_address0);

    SC_METHOD(thread_mode_key_b_address1);

    SC_METHOD(thread_mode_key_b_ce0);

    SC_METHOD(thread_mode_key_b_ce1);

    SC_METHOD(thread_mode_key_b_d0);

    SC_METHOD(thread_mode_key_b_d1);

    SC_METHOD(thread_mode_key_b_we0);

    SC_METHOD(thread_mode_key_b_we1);

    SC_METHOD(thread_mode_key_defined_address0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mode_key_defined_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mode_key_g_address0);

    SC_METHOD(thread_mode_key_g_address1);

    SC_METHOD(thread_mode_key_g_ce0);

    SC_METHOD(thread_mode_key_g_ce1);

    SC_METHOD(thread_mode_key_g_d0);

    SC_METHOD(thread_mode_key_g_d1);

    SC_METHOD(thread_mode_key_g_we0);

    SC_METHOD(thread_mode_key_g_we1);

    SC_METHOD(thread_mode_key_r_address0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mode_key_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_or_ln29_fu_234_p2);
    sensitive << ( shl_ln_fu_221_p3 );

    SC_METHOD(thread_or_ln30_fu_272_p2);
    sensitive << ( icmp_ln30_1_fu_266_p2 );
    sensitive << ( icmp_ln30_fu_260_p2 );

    SC_METHOD(thread_r_address0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_245_p3 );

    SC_METHOD(thread_r_we0);
    sensitive << ( icmp_ln25_reg_336 );
    sensitive << ( icmp_ln27_reg_340 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_shl_ln_fu_221_p3);
    sensitive << ( trunc_ln29_fu_218_p1 );

    SC_METHOD(thread_tmp_fu_245_p3);
    sensitive << ( in_r_q0 );
    sensitive << ( in_r_q1 );

    SC_METHOD(thread_trunc_ln29_fu_218_p1);
    sensitive << ( i );

    SC_METHOD(thread_zext_ln29_1_fu_240_p1);
    sensitive << ( or_ln29_fu_234_p2 );

    SC_METHOD(thread_zext_ln29_fu_229_p1);
    sensitive << ( shl_ln_fu_221_p3 );

    SC_METHOD(thread_zext_ln30_fu_256_p1);
    sensitive << ( tmp_fu_245_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_206_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getPixelColorRGBA16_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, r_address0, "(port)r_address0");
    sc_trace(mVcdFile, r_ce0, "(port)r_ce0");
    sc_trace(mVcdFile, r_we0, "(port)r_we0");
    sc_trace(mVcdFile, r_d0, "(port)r_d0");
    sc_trace(mVcdFile, g_address0, "(port)g_address0");
    sc_trace(mVcdFile, g_ce0, "(port)g_ce0");
    sc_trace(mVcdFile, g_we0, "(port)g_we0");
    sc_trace(mVcdFile, g_d0, "(port)g_d0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_we0, "(port)b_we0");
    sc_trace(mVcdFile, b_d0, "(port)b_d0");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_we0, "(port)a_we0");
    sc_trace(mVcdFile, a_d0, "(port)a_d0");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, in_r_address1, "(port)in_r_address1");
    sc_trace(mVcdFile, in_r_ce1, "(port)in_r_ce1");
    sc_trace(mVcdFile, in_r_q1, "(port)in_r_q1");
    sc_trace(mVcdFile, i, "(port)i");
    sc_trace(mVcdFile, mode_bitdepth_address0, "(port)mode_bitdepth_address0");
    sc_trace(mVcdFile, mode_bitdepth_ce0, "(port)mode_bitdepth_ce0");
    sc_trace(mVcdFile, mode_bitdepth_q0, "(port)mode_bitdepth_q0");
    sc_trace(mVcdFile, mode_colortype_address0, "(port)mode_colortype_address0");
    sc_trace(mVcdFile, mode_colortype_ce0, "(port)mode_colortype_ce0");
    sc_trace(mVcdFile, mode_colortype_q0, "(port)mode_colortype_q0");
    sc_trace(mVcdFile, mode_key_r_address0, "(port)mode_key_r_address0");
    sc_trace(mVcdFile, mode_key_r_ce0, "(port)mode_key_r_ce0");
    sc_trace(mVcdFile, mode_key_r_q0, "(port)mode_key_r_q0");
    sc_trace(mVcdFile, mode_key_g_address0, "(port)mode_key_g_address0");
    sc_trace(mVcdFile, mode_key_g_ce0, "(port)mode_key_g_ce0");
    sc_trace(mVcdFile, mode_key_g_we0, "(port)mode_key_g_we0");
    sc_trace(mVcdFile, mode_key_g_d0, "(port)mode_key_g_d0");
    sc_trace(mVcdFile, mode_key_g_q0, "(port)mode_key_g_q0");
    sc_trace(mVcdFile, mode_key_g_address1, "(port)mode_key_g_address1");
    sc_trace(mVcdFile, mode_key_g_ce1, "(port)mode_key_g_ce1");
    sc_trace(mVcdFile, mode_key_g_we1, "(port)mode_key_g_we1");
    sc_trace(mVcdFile, mode_key_g_d1, "(port)mode_key_g_d1");
    sc_trace(mVcdFile, mode_key_g_q1, "(port)mode_key_g_q1");
    sc_trace(mVcdFile, mode_key_b_address0, "(port)mode_key_b_address0");
    sc_trace(mVcdFile, mode_key_b_ce0, "(port)mode_key_b_ce0");
    sc_trace(mVcdFile, mode_key_b_we0, "(port)mode_key_b_we0");
    sc_trace(mVcdFile, mode_key_b_d0, "(port)mode_key_b_d0");
    sc_trace(mVcdFile, mode_key_b_q0, "(port)mode_key_b_q0");
    sc_trace(mVcdFile, mode_key_b_address1, "(port)mode_key_b_address1");
    sc_trace(mVcdFile, mode_key_b_ce1, "(port)mode_key_b_ce1");
    sc_trace(mVcdFile, mode_key_b_we1, "(port)mode_key_b_we1");
    sc_trace(mVcdFile, mode_key_b_d1, "(port)mode_key_b_d1");
    sc_trace(mVcdFile, mode_key_b_q1, "(port)mode_key_b_q1");
    sc_trace(mVcdFile, mode_key_defined_address0, "(port)mode_key_defined_address0");
    sc_trace(mVcdFile, mode_key_defined_ce0, "(port)mode_key_defined_ce0");
    sc_trace(mVcdFile, mode_key_defined_q0, "(port)mode_key_defined_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln25_fu_206_p2, "icmp_ln25_fu_206_p2");
    sc_trace(mVcdFile, icmp_ln25_reg_336, "icmp_ln25_reg_336");
    sc_trace(mVcdFile, icmp_ln27_fu_212_p2, "icmp_ln27_fu_212_p2");
    sc_trace(mVcdFile, icmp_ln27_reg_340, "icmp_ln27_reg_340");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_195_p6, "ap_phi_mux_p_0_phi_fu_195_p6");
    sc_trace(mVcdFile, p_0_reg_191, "p_0_reg_191");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln29_fu_229_p1, "zext_ln29_fu_229_p1");
    sc_trace(mVcdFile, zext_ln29_1_fu_240_p1, "zext_ln29_1_fu_240_p1");
    sc_trace(mVcdFile, tmp_fu_245_p3, "tmp_fu_245_p3");
    sc_trace(mVcdFile, trunc_ln29_fu_218_p1, "trunc_ln29_fu_218_p1");
    sc_trace(mVcdFile, shl_ln_fu_221_p3, "shl_ln_fu_221_p3");
    sc_trace(mVcdFile, or_ln29_fu_234_p2, "or_ln29_fu_234_p2");
    sc_trace(mVcdFile, zext_ln30_fu_256_p1, "zext_ln30_fu_256_p1");
    sc_trace(mVcdFile, icmp_ln30_1_fu_266_p2, "icmp_ln30_1_fu_266_p2");
    sc_trace(mVcdFile, icmp_ln30_fu_260_p2, "icmp_ln30_fu_260_p2");
    sc_trace(mVcdFile, or_ln30_fu_272_p2, "or_ln30_fu_272_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("getPixelColorRGBA16.hdltvin.dat");
    mHdltvoutHandle.open("getPixelColorRGBA16.hdltvout.dat");
}

getPixelColorRGBA16::~getPixelColorRGBA16() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void getPixelColorRGBA16::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_206_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(icmp_ln27_fu_212_p2.read(), ap_const_lv1_0)))) {
        p_0_reg_191 = ap_const_lv7_55;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        p_0_reg_191 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        icmp_ln25_reg_336 = icmp_ln25_fu_206_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        icmp_ln27_reg_340 = icmp_ln27_fu_212_p2.read();
    }
}

void getPixelColorRGBA16::thread_a_address0() {
    a_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_a_d0() {
    a_d0 = (!or_ln30_fu_272_p2.read()[0].is_01())? sc_lv<16>(): ((or_ln30_fu_272_p2.read()[0].to_bool())? ap_const_lv16_FFFF: ap_const_lv16_0);
}

void getPixelColorRGBA16::thread_a_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        a_we0 = ap_const_logic_1;
    } else {
        a_we0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getPixelColorRGBA16::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void getPixelColorRGBA16::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void getPixelColorRGBA16::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void getPixelColorRGBA16::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_ap_phi_mux_p_0_phi_fu_195_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        ap_phi_mux_p_0_phi_fu_195_p6 = ap_const_lv7_0;
    } else {
        ap_phi_mux_p_0_phi_fu_195_p6 = p_0_reg_191.read();
    }
}

void getPixelColorRGBA16::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_ap_return() {
    ap_return = esl_zext<32,7>(ap_phi_mux_p_0_phi_fu_195_p6.read());
}

void getPixelColorRGBA16::thread_b_address0() {
    b_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_b_d0() {
    b_d0 = tmp_fu_245_p3.read();
}

void getPixelColorRGBA16::thread_b_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        b_we0 = ap_const_logic_1;
    } else {
        b_we0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_g_address0() {
    g_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_g_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        g_ce0 = ap_const_logic_1;
    } else {
        g_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_g_d0() {
    g_d0 = tmp_fu_245_p3.read();
}

void getPixelColorRGBA16::thread_g_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        g_we0 = ap_const_logic_1;
    } else {
        g_we0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_icmp_ln25_fu_206_p2() {
    icmp_ln25_fu_206_p2 = (!mode_bitdepth_q0.read().is_01() || !ap_const_lv32_10.is_01())? sc_lv<1>(): sc_lv<1>(mode_bitdepth_q0.read() == ap_const_lv32_10);
}

void getPixelColorRGBA16::thread_icmp_ln27_fu_212_p2() {
    icmp_ln27_fu_212_p2 = (!mode_colortype_q0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(mode_colortype_q0.read() == ap_const_lv32_0);
}

void getPixelColorRGBA16::thread_icmp_ln30_1_fu_266_p2() {
    icmp_ln30_1_fu_266_p2 = (!zext_ln30_fu_256_p1.read().is_01() || !mode_key_r_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln30_fu_256_p1.read() != mode_key_r_q0.read());
}

void getPixelColorRGBA16::thread_icmp_ln30_fu_260_p2() {
    icmp_ln30_fu_260_p2 = (!mode_key_defined_q0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(mode_key_defined_q0.read() == ap_const_lv32_0);
}

void getPixelColorRGBA16::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<10>) (zext_ln29_fu_229_p1.read());
}

void getPixelColorRGBA16::thread_in_r_address1() {
    in_r_address1 =  (sc_lv<10>) (zext_ln29_1_fu_240_p1.read());
}

void getPixelColorRGBA16::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_in_r_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_ce1 = ap_const_logic_1;
    } else {
        in_r_ce1 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_mode_bitdepth_address0() {
    mode_bitdepth_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_mode_bitdepth_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mode_bitdepth_ce0 = ap_const_logic_1;
    } else {
        mode_bitdepth_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_mode_colortype_address0() {
    mode_colortype_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_mode_colortype_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mode_colortype_ce0 = ap_const_logic_1;
    } else {
        mode_colortype_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_mode_key_b_address0() {
    mode_key_b_address0 = ap_const_lv10_0;
}

void getPixelColorRGBA16::thread_mode_key_b_address1() {
    mode_key_b_address1 = ap_const_lv10_0;
}

void getPixelColorRGBA16::thread_mode_key_b_ce0() {
    mode_key_b_ce0 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_b_ce1() {
    mode_key_b_ce1 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_b_d0() {
    mode_key_b_d0 = ap_const_lv32_0;
}

void getPixelColorRGBA16::thread_mode_key_b_d1() {
    mode_key_b_d1 = ap_const_lv32_0;
}

void getPixelColorRGBA16::thread_mode_key_b_we0() {
    mode_key_b_we0 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_b_we1() {
    mode_key_b_we1 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_defined_address0() {
    mode_key_defined_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_mode_key_defined_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mode_key_defined_ce0 = ap_const_logic_1;
    } else {
        mode_key_defined_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_mode_key_g_address0() {
    mode_key_g_address0 = ap_const_lv10_0;
}

void getPixelColorRGBA16::thread_mode_key_g_address1() {
    mode_key_g_address1 = ap_const_lv10_0;
}

void getPixelColorRGBA16::thread_mode_key_g_ce0() {
    mode_key_g_ce0 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_g_ce1() {
    mode_key_g_ce1 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_g_d0() {
    mode_key_g_d0 = ap_const_lv32_0;
}

void getPixelColorRGBA16::thread_mode_key_g_d1() {
    mode_key_g_d1 = ap_const_lv32_0;
}

void getPixelColorRGBA16::thread_mode_key_g_we0() {
    mode_key_g_we0 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_g_we1() {
    mode_key_g_we1 = ap_const_logic_0;
}

void getPixelColorRGBA16::thread_mode_key_r_address0() {
    mode_key_r_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_mode_key_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mode_key_r_ce0 = ap_const_logic_1;
    } else {
        mode_key_r_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_or_ln29_fu_234_p2() {
    or_ln29_fu_234_p2 = (shl_ln_fu_221_p3.read() | ap_const_lv11_1);
}

void getPixelColorRGBA16::thread_or_ln30_fu_272_p2() {
    or_ln30_fu_272_p2 = (icmp_ln30_1_fu_266_p2.read() | icmp_ln30_fu_260_p2.read());
}

void getPixelColorRGBA16::thread_r_address0() {
    r_address0 =  (sc_lv<10>) (ap_const_lv64_0);
}

void getPixelColorRGBA16::thread_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_ce0 = ap_const_logic_1;
    } else {
        r_ce0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_r_d0() {
    r_d0 = tmp_fu_245_p3.read();
}

void getPixelColorRGBA16::thread_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_reg_336.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_ln27_reg_340.read(), ap_const_lv1_1))) {
        r_we0 = ap_const_logic_1;
    } else {
        r_we0 = ap_const_logic_0;
    }
}

void getPixelColorRGBA16::thread_shl_ln_fu_221_p3() {
    shl_ln_fu_221_p3 = esl_concat<10,1>(trunc_ln29_fu_218_p1.read(), ap_const_lv1_0);
}

void getPixelColorRGBA16::thread_tmp_fu_245_p3() {
    tmp_fu_245_p3 = esl_concat<8,8>(in_r_q0.read(), in_r_q1.read());
}

void getPixelColorRGBA16::thread_trunc_ln29_fu_218_p1() {
    trunc_ln29_fu_218_p1 = i.read().range(10-1, 0);
}

void getPixelColorRGBA16::thread_zext_ln29_1_fu_240_p1() {
    zext_ln29_1_fu_240_p1 = esl_zext<64,11>(or_ln29_fu_234_p2.read());
}

void getPixelColorRGBA16::thread_zext_ln29_fu_229_p1() {
    zext_ln29_fu_229_p1 = esl_zext<64,11>(shl_ln_fu_221_p3.read());
}

void getPixelColorRGBA16::thread_zext_ln30_fu_256_p1() {
    zext_ln30_fu_256_p1 = esl_zext<32,16>(tmp_fu_245_p3.read());
}

void getPixelColorRGBA16::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_206_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void getPixelColorRGBA16::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_address0\" :  \"" << r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_ce0\" :  \"" << r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_we0\" :  \"" << r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"r_d0\" :  \"" << r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_address0\" :  \"" << g_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_ce0\" :  \"" << g_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_we0\" :  \"" << g_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"g_d0\" :  \"" << g_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_we0\" :  \"" << b_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_d0\" :  \"" << b_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_we0\" :  \"" << a_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_d0\" :  \"" << a_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address1\" :  \"" << in_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce1\" :  \"" << in_r_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q1\" :  \"" << in_r_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i\" :  \"" << i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_bitdepth_address0\" :  \"" << mode_bitdepth_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_bitdepth_ce0\" :  \"" << mode_bitdepth_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_bitdepth_q0\" :  \"" << mode_bitdepth_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_colortype_address0\" :  \"" << mode_colortype_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_colortype_ce0\" :  \"" << mode_colortype_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_colortype_q0\" :  \"" << mode_colortype_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_r_address0\" :  \"" << mode_key_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_r_ce0\" :  \"" << mode_key_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_r_q0\" :  \"" << mode_key_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_address0\" :  \"" << mode_key_g_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_ce0\" :  \"" << mode_key_g_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_we0\" :  \"" << mode_key_g_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_d0\" :  \"" << mode_key_g_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_g_q0\" :  \"" << mode_key_g_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_address1\" :  \"" << mode_key_g_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_ce1\" :  \"" << mode_key_g_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_we1\" :  \"" << mode_key_g_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_g_d1\" :  \"" << mode_key_g_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_g_q1\" :  \"" << mode_key_g_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_address0\" :  \"" << mode_key_b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_ce0\" :  \"" << mode_key_b_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_we0\" :  \"" << mode_key_b_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_d0\" :  \"" << mode_key_b_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_b_q0\" :  \"" << mode_key_b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_address1\" :  \"" << mode_key_b_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_ce1\" :  \"" << mode_key_b_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_we1\" :  \"" << mode_key_b_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_b_d1\" :  \"" << mode_key_b_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_b_q1\" :  \"" << mode_key_b_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_defined_address0\" :  \"" << mode_key_defined_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mode_key_defined_ce0\" :  \"" << mode_key_defined_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode_key_defined_q0\" :  \"" << mode_key_defined_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

