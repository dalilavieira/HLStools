// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ip22zilog_convert_to_zs,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=209,HLS_VERSION=2019_1}" *)

module ip22zilog_convert_to_zs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        up_curregs_address0,
        up_curregs_ce0,
        up_curregs_we0,
        up_curregs_d0,
        up_curregs_q0,
        up_curregs_address1,
        up_curregs_ce1,
        up_curregs_we1,
        up_curregs_d1,
        up_curregs_q1,
        up_parity_mask,
        up_parity_mask_ap_vld,
        up_port_read_status_mask,
        up_port_read_status_mask_ap_vld,
        up_port_ignore_status_mask,
        up_port_ignore_status_mask_ap_vld,
        cflag,
        iflag,
        brg
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] up_curregs_address0;
output   up_curregs_ce0;
output   up_curregs_we0;
output  [31:0] up_curregs_d0;
input  [31:0] up_curregs_q0;
output  [6:0] up_curregs_address1;
output   up_curregs_ce1;
output   up_curregs_we1;
output  [31:0] up_curregs_d1;
input  [31:0] up_curregs_q1;
output  [31:0] up_parity_mask;
output   up_parity_mask_ap_vld;
output  [31:0] up_port_read_status_mask;
output   up_port_read_status_mask_ap_vld;
output  [31:0] up_port_ignore_status_mask;
output   up_port_ignore_status_mask_ap_vld;
input  [31:0] cflag;
input  [31:0] iflag;
input  [31:0] brg;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] up_curregs_address0;
reg up_curregs_ce0;
reg up_curregs_we0;
reg[31:0] up_curregs_d0;
reg[6:0] up_curregs_address1;
reg up_curregs_ce1;
reg up_curregs_we1;
reg[31:0] up_curregs_d1;
reg up_parity_mask_ap_vld;
reg up_port_read_status_mask_ap_vld;
reg[31:0] up_port_ignore_status_mask;
reg up_port_ignore_status_mask_ap_vld;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_132;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [31:0] reg_139;
wire   [6:0] up_curregs_addr_reg_192;
wire    ap_CS_fsm_state2;
wire   [6:0] up_curregs_addr_1_reg_204;
wire   [6:0] up_curregs_addr_2_reg_209;
reg   [7:0] trunc_ln74_1_reg_214;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state3;
wire   [31:0] and_ln_fu_158_p4;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] zext_ln73_fu_173_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] zext_ln74_fu_188_p1;
wire   [27:0] tmp_fu_144_p4;
wire   [1:0] trunc_ln103_fu_154_p1;
wire   [7:0] trunc_ln73_fu_169_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_132 <= up_curregs_q0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_132 <= up_curregs_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_139 <= up_curregs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln74_1_reg_214 <= {{brg[15:8]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        up_curregs_address0 = up_curregs_addr_2_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        up_curregs_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        up_curregs_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        up_curregs_address0 = up_curregs_addr_reg_192;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        up_curregs_address0 = 64'd0;
    end else begin
        up_curregs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        up_curregs_address1 = up_curregs_addr_1_reg_204;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        up_curregs_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        up_curregs_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        up_curregs_address1 = 64'd4;
    end else begin
        up_curregs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        up_curregs_ce0 = 1'b1;
    end else begin
        up_curregs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        up_curregs_ce1 = 1'b1;
    end else begin
        up_curregs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        up_curregs_d0 = reg_132;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        up_curregs_d0 = reg_139;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        up_curregs_d0 = up_curregs_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        up_curregs_d0 = and_ln_fu_158_p4;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        up_curregs_d0 = 32'd0;
    end else begin
        up_curregs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        up_curregs_d1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        up_curregs_d1 = zext_ln74_fu_188_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        up_curregs_d1 = zext_ln73_fu_173_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        up_curregs_d1 = reg_132;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        up_curregs_d1 = up_curregs_q1;
    end else begin
        up_curregs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        up_curregs_we0 = 1'b1;
    end else begin
        up_curregs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        up_curregs_we1 = 1'b1;
    end else begin
        up_curregs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        up_parity_mask_ap_vld = 1'b1;
    end else begin
        up_parity_mask_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        up_port_ignore_status_mask = 32'd255;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        up_port_ignore_status_mask = 32'd0;
    end else begin
        up_port_ignore_status_mask = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13))) begin
        up_port_ignore_status_mask_ap_vld = 1'b1;
    end else begin
        up_port_ignore_status_mask_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        up_port_read_status_mask_ap_vld = 1'b1;
    end else begin
        up_port_read_status_mask_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln_fu_158_p4 = {{{tmp_fu_144_p4}, {2'd0}}, {trunc_ln103_fu_154_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign tmp_fu_144_p4 = {{up_curregs_q1[31:4]}};

assign trunc_ln103_fu_154_p1 = up_curregs_q1[1:0];

assign trunc_ln73_fu_169_p1 = brg[7:0];

assign up_curregs_addr_1_reg_204 = 64'd3;

assign up_curregs_addr_2_reg_209 = 64'd5;

assign up_curregs_addr_reg_192 = 64'd0;

assign up_parity_mask = 32'd255;

assign up_port_read_status_mask = 32'd0;

assign zext_ln73_fu_173_p1 = trunc_ln73_fu_169_p1;

assign zext_ln74_fu_188_p1 = trunc_ln74_1_reg_214;

endmodule //ip22zilog_convert_to_zs
