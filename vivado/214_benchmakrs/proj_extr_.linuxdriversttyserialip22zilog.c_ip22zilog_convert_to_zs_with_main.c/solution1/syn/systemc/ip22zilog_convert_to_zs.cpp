// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ip22zilog_convert_to_zs.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ip22zilog_convert_to_zs::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ip22zilog_convert_to_zs::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state1 = "1";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state2 = "10";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state3 = "100";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state4 = "1000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state5 = "10000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state6 = "100000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> ip22zilog_convert_to_zs::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_5 = "101";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_6 = "110";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_7 = "111";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_A = "1010";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_B = "1011";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_1 = "1";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_8 = "1000";
const sc_lv<64> ip22zilog_convert_to_zs::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> ip22zilog_convert_to_zs::ap_const_lv64_4 = "100";
const sc_lv<64> ip22zilog_convert_to_zs::ap_const_lv64_3 = "11";
const sc_lv<64> ip22zilog_convert_to_zs::ap_const_lv64_5 = "101";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_FF = "11111111";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_C = "1100";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_2 = "10";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_3 = "11";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_4 = "100";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_9 = "1001";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_1F = "11111";
const sc_lv<2> ip22zilog_convert_to_zs::ap_const_lv2_0 = "00";
const sc_lv<32> ip22zilog_convert_to_zs::ap_const_lv32_F = "1111";
const bool ip22zilog_convert_to_zs::ap_const_boolean_1 = true;

ip22zilog_convert_to_zs::ip22zilog_convert_to_zs(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln_fu_158_p4);
    sensitive << ( tmp_fu_144_p4 );
    sensitive << ( trunc_ln103_fu_154_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp_fu_144_p4);
    sensitive << ( up_curregs_q1 );

    SC_METHOD(thread_trunc_ln103_fu_154_p1);
    sensitive << ( up_curregs_q1 );

    SC_METHOD(thread_trunc_ln73_fu_169_p1);
    sensitive << ( brg );

    SC_METHOD(thread_up_curregs_addr_1_reg_204);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_up_curregs_addr_2_reg_209);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_up_curregs_addr_reg_192);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_up_curregs_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( up_curregs_addr_reg_192 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( up_curregs_addr_2_reg_209 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_up_curregs_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( up_curregs_addr_1_reg_204 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_up_curregs_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_up_curregs_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_up_curregs_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( up_curregs_q0 );
    sensitive << ( reg_132 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_139 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( and_ln_fu_158_p4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_up_curregs_d1);
    sensitive << ( up_curregs_q1 );
    sensitive << ( reg_132 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln73_fu_173_p1 );
    sensitive << ( zext_ln74_fu_188_p1 );

    SC_METHOD(thread_up_curregs_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_up_curregs_we1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_up_parity_mask);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_up_parity_mask_ap_vld);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_up_port_ignore_status_mask);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_up_port_ignore_status_mask_ap_vld);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_up_port_read_status_mask);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_up_port_read_status_mask_ap_vld);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_zext_ln73_fu_173_p1);
    sensitive << ( trunc_ln73_fu_169_p1 );

    SC_METHOD(thread_zext_ln74_fu_188_p1);
    sensitive << ( trunc_ln74_1_reg_214 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ip22zilog_convert_to_zs_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, up_curregs_address0, "(port)up_curregs_address0");
    sc_trace(mVcdFile, up_curregs_ce0, "(port)up_curregs_ce0");
    sc_trace(mVcdFile, up_curregs_we0, "(port)up_curregs_we0");
    sc_trace(mVcdFile, up_curregs_d0, "(port)up_curregs_d0");
    sc_trace(mVcdFile, up_curregs_q0, "(port)up_curregs_q0");
    sc_trace(mVcdFile, up_curregs_address1, "(port)up_curregs_address1");
    sc_trace(mVcdFile, up_curregs_ce1, "(port)up_curregs_ce1");
    sc_trace(mVcdFile, up_curregs_we1, "(port)up_curregs_we1");
    sc_trace(mVcdFile, up_curregs_d1, "(port)up_curregs_d1");
    sc_trace(mVcdFile, up_curregs_q1, "(port)up_curregs_q1");
    sc_trace(mVcdFile, up_parity_mask, "(port)up_parity_mask");
    sc_trace(mVcdFile, up_parity_mask_ap_vld, "(port)up_parity_mask_ap_vld");
    sc_trace(mVcdFile, up_port_read_status_mask, "(port)up_port_read_status_mask");
    sc_trace(mVcdFile, up_port_read_status_mask_ap_vld, "(port)up_port_read_status_mask_ap_vld");
    sc_trace(mVcdFile, up_port_ignore_status_mask, "(port)up_port_ignore_status_mask");
    sc_trace(mVcdFile, up_port_ignore_status_mask_ap_vld, "(port)up_port_ignore_status_mask_ap_vld");
    sc_trace(mVcdFile, cflag, "(port)cflag");
    sc_trace(mVcdFile, iflag, "(port)iflag");
    sc_trace(mVcdFile, brg, "(port)brg");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_132, "reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, reg_139, "reg_139");
    sc_trace(mVcdFile, up_curregs_addr_reg_192, "up_curregs_addr_reg_192");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, up_curregs_addr_1_reg_204, "up_curregs_addr_1_reg_204");
    sc_trace(mVcdFile, up_curregs_addr_2_reg_209, "up_curregs_addr_2_reg_209");
    sc_trace(mVcdFile, trunc_ln74_1_reg_214, "trunc_ln74_1_reg_214");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, and_ln_fu_158_p4, "and_ln_fu_158_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln73_fu_173_p1, "zext_ln73_fu_173_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln74_fu_188_p1, "zext_ln74_fu_188_p1");
    sc_trace(mVcdFile, tmp_fu_144_p4, "tmp_fu_144_p4");
    sc_trace(mVcdFile, trunc_ln103_fu_154_p1, "trunc_ln103_fu_154_p1");
    sc_trace(mVcdFile, trunc_ln73_fu_169_p1, "trunc_ln73_fu_169_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ip22zilog_convert_to_zs.hdltvin.dat");
    mHdltvoutHandle.open("ip22zilog_convert_to_zs.hdltvout.dat");
}

ip22zilog_convert_to_zs::~ip22zilog_convert_to_zs() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ip22zilog_convert_to_zs::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        reg_132 = up_curregs_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        reg_132 = up_curregs_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        reg_139 = up_curregs_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        trunc_ln74_1_reg_214 = brg.read().range(15, 8);
    }
}

void ip22zilog_convert_to_zs::thread_and_ln_fu_158_p4() {
    and_ln_fu_158_p4 = esl_concat<30,2>(esl_concat<28,2>(tmp_fu_144_p4.read(), ap_const_lv2_0), trunc_ln103_fu_154_p1.read());
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void ip22zilog_convert_to_zs::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void ip22zilog_convert_to_zs::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_tmp_fu_144_p4() {
    tmp_fu_144_p4 = up_curregs_q1.read().range(31, 4);
}

void ip22zilog_convert_to_zs::thread_trunc_ln103_fu_154_p1() {
    trunc_ln103_fu_154_p1 = up_curregs_q1.read().range(2-1, 0);
}

void ip22zilog_convert_to_zs::thread_trunc_ln73_fu_169_p1() {
    trunc_ln73_fu_169_p1 = brg.read().range(8-1, 0);
}

void ip22zilog_convert_to_zs::thread_up_curregs_addr_1_reg_204() {
    up_curregs_addr_1_reg_204 =  (sc_lv<7>) (ap_const_lv64_3);
}

void ip22zilog_convert_to_zs::thread_up_curregs_addr_2_reg_209() {
    up_curregs_addr_2_reg_209 =  (sc_lv<7>) (ap_const_lv64_5);
}

void ip22zilog_convert_to_zs::thread_up_curregs_addr_reg_192() {
    up_curregs_addr_reg_192 =  (sc_lv<7>) (ap_const_lv64_0);
}

void ip22zilog_convert_to_zs::thread_up_curregs_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        up_curregs_address0 = up_curregs_addr_2_reg_209.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        up_curregs_address0 =  (sc_lv<7>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        up_curregs_address0 =  (sc_lv<7>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        up_curregs_address0 = up_curregs_addr_reg_192.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        up_curregs_address0 =  (sc_lv<7>) (ap_const_lv64_0);
    } else {
        up_curregs_address0 = "XXXXXXX";
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        up_curregs_address1 = up_curregs_addr_1_reg_204.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        up_curregs_address1 =  (sc_lv<7>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        up_curregs_address1 =  (sc_lv<7>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        up_curregs_address1 =  (sc_lv<7>) (ap_const_lv64_4);
    } else {
        up_curregs_address1 = "XXXXXXX";
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        up_curregs_ce0 = ap_const_logic_1;
    } else {
        up_curregs_ce0 = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        up_curregs_ce1 = ap_const_logic_1;
    } else {
        up_curregs_ce1 = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        up_curregs_d0 = reg_132.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        up_curregs_d0 = reg_139.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        up_curregs_d0 = up_curregs_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        up_curregs_d0 = and_ln_fu_158_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        up_curregs_d0 = ap_const_lv32_0;
    } else {
        up_curregs_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        up_curregs_d1 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        up_curregs_d1 = zext_ln74_fu_188_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        up_curregs_d1 = zext_ln73_fu_173_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        up_curregs_d1 = reg_132.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        up_curregs_d1 = up_curregs_q1.read();
    } else {
        up_curregs_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        up_curregs_we0 = ap_const_logic_1;
    } else {
        up_curregs_we0 = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_curregs_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        up_curregs_we1 = ap_const_logic_1;
    } else {
        up_curregs_we1 = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_parity_mask() {
    up_parity_mask = ap_const_lv32_FF;
}

void ip22zilog_convert_to_zs::thread_up_parity_mask_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        up_parity_mask_ap_vld = ap_const_logic_1;
    } else {
        up_parity_mask_ap_vld = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_port_ignore_status_mask() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        up_port_ignore_status_mask = ap_const_lv32_FF;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        up_port_ignore_status_mask = ap_const_lv32_0;
    } else {
        up_port_ignore_status_mask =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ip22zilog_convert_to_zs::thread_up_port_ignore_status_mask_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        up_port_ignore_status_mask_ap_vld = ap_const_logic_1;
    } else {
        up_port_ignore_status_mask_ap_vld = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_up_port_read_status_mask() {
    up_port_read_status_mask = ap_const_lv32_0;
}

void ip22zilog_convert_to_zs::thread_up_port_read_status_mask_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        up_port_read_status_mask_ap_vld = ap_const_logic_1;
    } else {
        up_port_read_status_mask_ap_vld = ap_const_logic_0;
    }
}

void ip22zilog_convert_to_zs::thread_zext_ln73_fu_173_p1() {
    zext_ln73_fu_173_p1 = esl_zext<32,8>(trunc_ln73_fu_169_p1.read());
}

void ip22zilog_convert_to_zs::thread_zext_ln74_fu_188_p1() {
    zext_ln74_fu_188_p1 = esl_zext<32,8>(trunc_ln74_1_reg_214.read());
}

void ip22zilog_convert_to_zs::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void ip22zilog_convert_to_zs::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_address0\" :  \"" << up_curregs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_ce0\" :  \"" << up_curregs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_we0\" :  \"" << up_curregs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_d0\" :  \"" << up_curregs_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"up_curregs_q0\" :  \"" << up_curregs_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_address1\" :  \"" << up_curregs_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_ce1\" :  \"" << up_curregs_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_we1\" :  \"" << up_curregs_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_curregs_d1\" :  \"" << up_curregs_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"up_curregs_q1\" :  \"" << up_curregs_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_parity_mask\" :  \"" << up_parity_mask.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_parity_mask_ap_vld\" :  \"" << up_parity_mask_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_port_read_status_mask\" :  \"" << up_port_read_status_mask.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_port_read_status_mask_ap_vld\" :  \"" << up_port_read_status_mask_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_port_ignore_status_mask\" :  \"" << up_port_ignore_status_mask.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"up_port_ignore_status_mask_ap_vld\" :  \"" << up_port_ignore_status_mask_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cflag\" :  \"" << cflag.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iflag\" :  \"" << iflag.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"brg\" :  \"" << brg.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

