// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="imsttfb_check_var,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.126000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=993,HLS_SYN_LUT=1281,HLS_VERSION=2019_1}" *)

module imsttfb_check_var (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        var_bits_per_pixel,
        var_xres_virtual,
        var_xres,
        var_yres_virtual_i,
        var_yres_virtual_o,
        var_yres_virtual_o_ap_vld,
        var_yres,
        var_vmode,
        var_vmode_ap_vld,
        var_height,
        var_height_ap_vld,
        var_width,
        var_width_ap_vld,
        var_left_margin,
        var_left_margin_ap_vld,
        var_right_margin,
        var_right_margin_ap_vld,
        var_upper_margin,
        var_upper_margin_ap_vld,
        var_lower_margin,
        var_lower_margin_ap_vld,
        var_hsync_len,
        var_hsync_len_ap_vld,
        var_vsync_len,
        var_vsync_len_ap_vld,
        var_transp_offset,
        var_transp_offset_ap_vld,
        var_transp_length,
        var_transp_length_ap_vld,
        var_transp_msb_right,
        var_transp_msb_right_ap_vld,
        var_blue_length,
        var_blue_length_ap_vld,
        var_blue_msb_right,
        var_blue_msb_right_ap_vld,
        var_blue_offset,
        var_blue_offset_ap_vld,
        var_green_offset,
        var_green_offset_ap_vld,
        var_green_length_i,
        var_green_length_o,
        var_green_length_o_ap_vld,
        var_green_msb_right,
        var_green_msb_right_ap_vld,
        var_red_offset,
        var_red_offset_ap_vld,
        var_red_length,
        var_red_length_ap_vld,
        var_red_msb_right,
        var_red_msb_right_ap_vld,
        var_nonstd,
        info_fix_smem_len,
        ap_return
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 73'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 73'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 73'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] var_bits_per_pixel;
input  [31:0] var_xres_virtual;
input  [31:0] var_xres;
input  [31:0] var_yres_virtual_i;
output  [31:0] var_yres_virtual_o;
output   var_yres_virtual_o_ap_vld;
input  [31:0] var_yres;
output  [31:0] var_vmode;
output   var_vmode_ap_vld;
output  [31:0] var_height;
output   var_height_ap_vld;
output  [31:0] var_width;
output   var_width_ap_vld;
output  [31:0] var_left_margin;
output   var_left_margin_ap_vld;
output  [31:0] var_right_margin;
output   var_right_margin_ap_vld;
output  [31:0] var_upper_margin;
output   var_upper_margin_ap_vld;
output  [31:0] var_lower_margin;
output   var_lower_margin_ap_vld;
output  [31:0] var_hsync_len;
output   var_hsync_len_ap_vld;
output  [31:0] var_vsync_len;
output   var_vsync_len_ap_vld;
output  [31:0] var_transp_offset;
output   var_transp_offset_ap_vld;
output  [31:0] var_transp_length;
output   var_transp_length_ap_vld;
output  [31:0] var_transp_msb_right;
output   var_transp_msb_right_ap_vld;
output  [31:0] var_blue_length;
output   var_blue_length_ap_vld;
output  [31:0] var_blue_msb_right;
output   var_blue_msb_right_ap_vld;
output  [31:0] var_blue_offset;
output   var_blue_offset_ap_vld;
output  [31:0] var_green_offset;
output   var_green_offset_ap_vld;
input  [31:0] var_green_length_i;
output  [31:0] var_green_length_o;
output   var_green_length_o_ap_vld;
output  [31:0] var_green_msb_right;
output   var_green_msb_right_ap_vld;
output  [31:0] var_red_offset;
output   var_red_offset_ap_vld;
output  [31:0] var_red_length;
output   var_red_length_ap_vld;
output  [31:0] var_red_msb_right;
output   var_red_msb_right_ap_vld;
input  [31:0] var_nonstd;
input  [31:0] info_fix_smem_len;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] var_yres_virtual_o;
reg var_yres_virtual_o_ap_vld;
reg var_vmode_ap_vld;
reg var_height_ap_vld;
reg var_width_ap_vld;
reg var_left_margin_ap_vld;
reg var_right_margin_ap_vld;
reg var_upper_margin_ap_vld;
reg var_lower_margin_ap_vld;
reg var_hsync_len_ap_vld;
reg var_vsync_len_ap_vld;
reg[31:0] var_transp_offset;
reg var_transp_offset_ap_vld;
reg[31:0] var_transp_length;
reg var_transp_length_ap_vld;
reg var_transp_msb_right_ap_vld;
reg[31:0] var_blue_length;
reg var_blue_length_ap_vld;
reg var_blue_msb_right_ap_vld;
reg var_blue_offset_ap_vld;
reg[31:0] var_green_offset;
reg var_green_offset_ap_vld;
reg[31:0] var_green_length_o;
reg var_green_length_o_ap_vld;
reg var_green_msb_right_ap_vld;
reg[31:0] var_red_offset;
reg var_red_offset_ap_vld;
reg[31:0] var_red_length;
reg var_red_length_ap_vld;
reg var_red_msb_right_ap_vld;

(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] var_bits_per_pixel_r_read_fu_90_p2;
wire   [0:0] empty_9_fu_358_p2;
reg   [0:0] empty_9_reg_468;
wire   [0:0] icmp_ln34_fu_364_p2;
reg   [0:0] icmp_ln34_reg_483;
reg  signed [31:0] var_yres_virtual_rea_reg_487;
wire   [0:0] icmp_ln34_1_fu_370_p2;
reg   [0:0] icmp_ln34_1_reg_500;
wire   [0:0] icmp_ln34_2_fu_376_p2;
reg   [0:0] icmp_ln34_2_reg_504;
wire   [31:0] zext_ln41_fu_392_p1;
reg   [31:0] zext_ln41_reg_508;
wire  signed [31:0] mul_ln41_fu_396_p2;
reg  signed [31:0] mul_ln41_reg_513;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln41_fu_406_p2;
reg   [0:0] icmp_ln41_reg_524;
wire  signed [31:0] mul_ln41_2_fu_412_p2;
reg  signed [31:0] mul_ln41_2_reg_528;
wire   [0:0] icmp_ln41_1_fu_420_p2;
reg   [0:0] icmp_ln41_1_reg_533;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln90_fu_431_p2;
reg   [0:0] icmp_ln90_reg_540;
wire   [31:0] grp_fu_440_p2;
wire    ap_CS_fsm_state38;
wire   [0:0] icmp_ln57_fu_425_p2;
wire   [31:0] select_ln93_fu_455_p3;
wire    ap_CS_fsm_state73;
wire   [0:0] empty_4_fu_328_p2;
wire   [0:0] empty_fu_322_p2;
wire   [0:0] empty_6_fu_340_p2;
wire   [0:0] empty_5_fu_334_p2;
wire   [0:0] empty_8_fu_352_p2;
wire   [0:0] empty_7_fu_346_p2;
wire  signed [31:0] icmp_ln34_fu_364_p0;
wire  signed [31:0] icmp_ln34_fu_364_p1;
wire  signed [31:0] icmp_ln34_1_fu_370_p0;
wire  signed [31:0] icmp_ln34_1_fu_370_p1;
wire   [28:0] trunc_ln_fu_382_p4;
wire  signed [31:0] mul_ln41_fu_396_p0;
wire   [28:0] mul_ln41_fu_396_p1;
wire  signed [31:0] mul_ln41_1_fu_402_p1;
wire   [31:0] mul_ln41_1_fu_402_p2;
wire   [28:0] mul_ln41_2_fu_412_p1;
wire  signed [31:0] mul_ln41_3_fu_416_p1;
wire   [31:0] mul_ln41_3_fu_416_p2;
wire  signed [31:0] icmp_ln90_fu_431_p0;
wire   [31:0] grp_fu_440_p0;
wire   [31:0] grp_fu_445_p2;
wire   [0:0] icmp_ln93_fu_450_p2;
reg    grp_fu_440_ap_start;
wire    grp_fu_440_ap_done;
reg    grp_fu_445_ap_start;
wire    grp_fu_445_ap_done;
reg   [72:0] ap_NS_fsm;
wire   [31:0] mul_ln41_fu_396_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 73'd1;
end

imsttfb_check_var_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imsttfb_check_var_sdiv_32ns_32ns_32_36_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_440_ap_start),
    .done(grp_fu_440_ap_done),
    .din0(grp_fu_440_p0),
    .din1(var_bits_per_pixel),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

imsttfb_check_var_sdiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
imsttfb_check_var_sdiv_32ns_32s_32_36_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_445_ap_start),
    .done(grp_fu_445_ap_done),
    .din0(grp_fu_440_p2),
    .din1(var_xres_virtual),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_9_reg_468 <= empty_9_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln34_fu_364_p2 == 1'd0) & (empty_9_fu_358_p2 == 1'd1))) begin
        icmp_ln34_1_reg_500 <= icmp_ln34_1_fu_370_p2;
        var_yres_virtual_rea_reg_487 <= var_yres_virtual_i;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln34_1_fu_370_p2 == 1'd0) & (icmp_ln34_fu_364_p2 == 1'd0) & (empty_9_fu_358_p2 == 1'd1))) begin
        icmp_ln34_2_reg_504 <= icmp_ln34_2_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (empty_9_fu_358_p2 == 1'd1))) begin
        icmp_ln34_reg_483 <= icmp_ln34_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_reg_524 == 1'd0))) begin
        icmp_ln41_1_reg_533 <= icmp_ln41_1_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln41_reg_524 <= icmp_ln41_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0))) begin
        icmp_ln90_reg_540 <= icmp_ln90_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln41_fu_406_p2 == 1'd0))) begin
        mul_ln41_2_reg_528 <= mul_ln41_2_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln34_1_fu_370_p2 == 1'd0) & (icmp_ln34_fu_364_p2 == 1'd0) & (icmp_ln34_2_fu_376_p2 == 1'd1) & (empty_9_fu_358_p2 == 1'd1))) begin
        mul_ln41_reg_513 <= mul_ln41_fu_396_p2;
        zext_ln41_reg_508[28 : 0] <= zext_ln41_fu_392_p1[28 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln90_fu_431_p2 == 1'd1))) begin
        grp_fu_440_ap_start = 1'b1;
    end else begin
        grp_fu_440_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_445_ap_start = 1'b1;
    end else begin
        grp_fu_445_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16))) begin
        var_blue_length = 32'd5;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_blue_length = 32'd8;
    end else begin
        var_blue_length = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_blue_length_ap_vld = 1'b1;
    end else begin
        var_blue_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_blue_msb_right_ap_vld = 1'b1;
    end else begin
        var_blue_msb_right_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_blue_offset_ap_vld = 1'b1;
    end else begin
        var_blue_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16))) begin
        var_green_length_o = 32'd5;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_green_length_o = 32'd8;
    end else begin
        var_green_length_o = var_green_length_i;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_green_length_o_ap_vld = 1'b1;
    end else begin
        var_green_length_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_green_msb_right_ap_vld = 1'b1;
    end else begin
        var_green_msb_right_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8))) begin
        var_green_offset = 32'd0;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln57_fu_425_p2 == 1'd1) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)))) begin
        var_green_offset = 32'd5;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_green_offset = 32'd8;
    end else begin
        var_green_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln57_fu_425_p2 == 1'd1) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_green_offset_ap_vld = 1'b1;
    end else begin
        var_green_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_height_ap_vld = 1'b1;
    end else begin
        var_height_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_hsync_len_ap_vld = 1'b1;
    end else begin
        var_hsync_len_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_left_margin_ap_vld = 1'b1;
    end else begin
        var_left_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_lower_margin_ap_vld = 1'b1;
    end else begin
        var_lower_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln57_fu_425_p2 == 1'd1) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)))) begin
        var_red_length = 32'd5;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_red_length = 32'd8;
    end else begin
        var_red_length = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln57_fu_425_p2 == 1'd1) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_red_length_ap_vld = 1'b1;
    end else begin
        var_red_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_red_msb_right_ap_vld = 1'b1;
    end else begin
        var_red_msb_right_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8))) begin
        var_red_offset = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16))) begin
        var_red_offset = 32'd10;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_red_offset = 32'd16;
    end else begin
        var_red_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_425_p2 == 1'd0) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_red_offset_ap_vld = 1'b1;
    end else begin
        var_red_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_right_margin_ap_vld = 1'b1;
    end else begin
        var_right_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)))) begin
        var_transp_length = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32))) begin
        var_transp_length = 32'd8;
    end else begin
        var_transp_length = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_transp_length_ap_vld = 1'b1;
    end else begin
        var_transp_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_transp_msb_right_ap_vld = 1'b1;
    end else begin
        var_transp_msb_right_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)))) begin
        var_transp_offset = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32))) begin
        var_transp_offset = 32'd24;
    end else begin
        var_transp_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd8)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd16)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd24)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln41_1_fu_420_p2 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (var_bits_per_pixel_r_read_fu_90_p2 == 32'd32)))) begin
        var_transp_offset_ap_vld = 1'b1;
    end else begin
        var_transp_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_upper_margin_ap_vld = 1'b1;
    end else begin
        var_upper_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_vmode_ap_vld = 1'b1;
    end else begin
        var_vmode_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_vsync_len_ap_vld = 1'b1;
    end else begin
        var_vsync_len_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_width_ap_vld = 1'b1;
    end else begin
        var_width_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln90_reg_540 == 1'd1) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_yres_virtual_o = select_ln93_fu_455_p3;
    end else begin
        var_yres_virtual_o = var_yres_virtual_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln41_1_reg_533 == 1'd0) & (icmp_ln41_reg_524 == 1'd0) & (icmp_ln34_1_reg_500 == 1'd0) & (icmp_ln34_reg_483 == 1'd0) & (icmp_ln90_reg_540 == 1'd1) & (icmp_ln34_2_reg_504 == 1'd1) & (empty_9_reg_468 == 1'd1))) begin
        var_yres_virtual_o_ap_vld = 1'b1;
    end else begin
        var_yres_virtual_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((empty_9_fu_358_p2 == 1'd0) | ((icmp_ln34_fu_364_p2 == 1'd1) | ((icmp_ln34_2_fu_376_p2 == 1'd0) | (icmp_ln34_1_fu_370_p2 == 1'd1)))))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln34_1_fu_370_p2 == 1'd0) & (icmp_ln34_fu_364_p2 == 1'd0) & (icmp_ln34_2_fu_376_p2 == 1'd1) & (empty_9_fu_358_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln41_reg_524 == 1'd1) | ((icmp_ln90_fu_431_p2 == 1'd0) | (icmp_ln41_1_fu_420_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_return = 32'd0;

assign empty_4_fu_328_p2 = ((var_bits_per_pixel == 32'd24) ? 1'b1 : 1'b0);

assign empty_5_fu_334_p2 = (empty_fu_322_p2 | empty_4_fu_328_p2);

assign empty_6_fu_340_p2 = ((var_bits_per_pixel == 32'd16) ? 1'b1 : 1'b0);

assign empty_7_fu_346_p2 = (empty_6_fu_340_p2 | empty_5_fu_334_p2);

assign empty_8_fu_352_p2 = ((var_bits_per_pixel == 32'd8) ? 1'b1 : 1'b0);

assign empty_9_fu_358_p2 = (empty_8_fu_352_p2 | empty_7_fu_346_p2);

assign empty_fu_322_p2 = ((var_bits_per_pixel == 32'd32) ? 1'b1 : 1'b0);

assign grp_fu_440_p0 = info_fix_smem_len << 32'd3;

assign icmp_ln34_1_fu_370_p0 = var_yres_virtual_i;

assign icmp_ln34_1_fu_370_p1 = var_yres;

assign icmp_ln34_1_fu_370_p2 = (($signed(icmp_ln34_1_fu_370_p0) < $signed(icmp_ln34_1_fu_370_p1)) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_376_p2 = ((var_nonstd == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_364_p0 = var_xres_virtual;

assign icmp_ln34_fu_364_p1 = var_xres;

assign icmp_ln34_fu_364_p2 = (($signed(icmp_ln34_fu_364_p0) < $signed(icmp_ln34_fu_364_p1)) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_420_p2 = (($signed(mul_ln41_3_fu_416_p2) > $signed(info_fix_smem_len)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_406_p2 = (($signed(mul_ln41_1_fu_402_p2) > $signed(info_fix_smem_len)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_425_p2 = ((var_green_length_i == 32'd6) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_431_p0 = var_yres;

assign icmp_ln90_fu_431_p2 = ((icmp_ln90_fu_431_p0 == var_yres_virtual_rea_reg_487) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_450_p2 = (($signed(grp_fu_445_p2) < $signed(var_yres_virtual_rea_reg_487)) ? 1'b1 : 1'b0);

assign mul_ln41_1_fu_402_p1 = var_xres;

assign mul_ln41_1_fu_402_p2 = ($signed(mul_ln41_reg_513) * $signed(mul_ln41_1_fu_402_p1));

assign mul_ln41_2_fu_412_p1 = zext_ln41_reg_508;

assign mul_ln41_2_fu_412_p2 = ($signed(var_yres_virtual_rea_reg_487) * $signed({{1'b0}, {mul_ln41_2_fu_412_p1}}));

assign mul_ln41_3_fu_416_p1 = var_xres_virtual;

assign mul_ln41_3_fu_416_p2 = ($signed(mul_ln41_2_reg_528) * $signed(mul_ln41_3_fu_416_p1));

assign mul_ln41_fu_396_p0 = var_yres;

assign mul_ln41_fu_396_p1 = mul_ln41_fu_396_p10;

assign mul_ln41_fu_396_p10 = trunc_ln_fu_382_p4;

assign mul_ln41_fu_396_p2 = ($signed(mul_ln41_fu_396_p0) * $signed({{1'b0}, {mul_ln41_fu_396_p1}}));

assign select_ln93_fu_455_p3 = ((icmp_ln93_fu_450_p2[0:0] === 1'b1) ? var_yres_virtual_rea_reg_487 : grp_fu_445_p2);

assign trunc_ln_fu_382_p4 = {{var_bits_per_pixel[31:3]}};

assign var_bits_per_pixel_r_read_fu_90_p2 = var_bits_per_pixel;

assign var_blue_msb_right = 32'd0;

assign var_blue_offset = 32'd0;

assign var_green_msb_right = 32'd0;

assign var_height = 32'd4294967295;

assign var_hsync_len = 32'd8;

assign var_left_margin = 32'd16;

assign var_lower_margin = 32'd16;

assign var_red_msb_right = 32'd0;

assign var_right_margin = 32'd16;

assign var_transp_msb_right = 32'd0;

assign var_upper_margin = 32'd16;

assign var_vmode = 32'd0;

assign var_vsync_len = 32'd8;

assign var_width = 32'd4294967295;

assign zext_ln41_fu_392_p1 = trunc_ln_fu_382_p4;

always @ (posedge ap_clk) begin
    zext_ln41_reg_508[31:29] <= 3'b000;
end

endmodule //imsttfb_check_var
