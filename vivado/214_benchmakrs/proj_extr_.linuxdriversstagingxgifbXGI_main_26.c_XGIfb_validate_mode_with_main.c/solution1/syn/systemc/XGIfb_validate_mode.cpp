// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "XGIfb_validate_mode.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic XGIfb_validate_mode::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic XGIfb_validate_mode::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> XGIfb_validate_mode::ap_ST_fsm_state1 = "1";
const sc_lv<2> XGIfb_validate_mode::ap_ST_fsm_state2 = "10";
const sc_lv<32> XGIfb_validate_mode::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> XGIfb_validate_mode::ap_const_lv1_1 = "1";
const sc_lv<32> XGIfb_validate_mode::ap_const_lv32_1 = "1";
const sc_lv<1> XGIfb_validate_mode::ap_const_lv1_0 = "0";
const sc_lv<32> XGIfb_validate_mode::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> XGIfb_validate_mode::ap_const_lv32_82 = "10000010";
const sc_lv<32> XGIfb_validate_mode::ap_const_lv32_1F = "11111";
const bool XGIfb_validate_mode::ap_const_boolean_1 = true;

XGIfb_validate_mode::XGIfb_validate_mode(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_65);
    sensitive << ( grp_fu_88_p2 );
    sensitive << ( icmp_ln50_reg_119 );
    sensitive << ( icmp_ln51_reg_123 );
    sensitive << ( tmp_reg_127 );

    SC_METHOD(thread_ap_condition_74);
    sensitive << ( grp_fu_88_p2 );
    sensitive << ( icmp_ln50_reg_119 );
    sensitive << ( icmp_ln51_reg_123 );
    sensitive << ( tmp_reg_127 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_UnifiedRetVal_phi_fu_81_p4);
    sensitive << ( myindex );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_condition_65 );
    sensitive << ( ap_condition_74 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_88_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xgifb_info_chip );
    sensitive << ( icmp_ln50_reg_119 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln51_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xgifb_info_display2 );
    sensitive << ( grp_fu_88_p2 );

    SC_METHOD(thread_or_ln56_fu_100_p2);
    sensitive << ( xgifb_info_lvds_data_LVDSHDE );
    sensitive << ( xgifb_info_lvds_data_LVDSVDE );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "XGIfb_validate_mode_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, xgifb_info_chip, "(port)xgifb_info_chip");
    sc_trace(mVcdFile, xgifb_info_display2, "(port)xgifb_info_display2");
    sc_trace(mVcdFile, xgifb_info_video_size, "(port)xgifb_info_video_size");
    sc_trace(mVcdFile, xgifb_info_TV_type, "(port)xgifb_info_TV_type");
    sc_trace(mVcdFile, xgifb_info_hasVB, "(port)xgifb_info_hasVB");
    sc_trace(mVcdFile, xgifb_info_lvds_data_LVDSHDE, "(port)xgifb_info_lvds_data_LVDSHDE");
    sc_trace(mVcdFile, xgifb_info_lvds_data_LVDSVDE, "(port)xgifb_info_lvds_data_LVDSVDE");
    sc_trace(mVcdFile, xgifb_info_hw_info_ulCRT2LCDType, "(port)xgifb_info_hw_info_ulCRT2LCDType");
    sc_trace(mVcdFile, xgifb_info_hw_info_ulExternalChip, "(port)xgifb_info_hw_info_ulExternalChip");
    sc_trace(mVcdFile, myindex, "(port)myindex");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_88_p2, "grp_fu_88_p2");
    sc_trace(mVcdFile, icmp_ln50_reg_119, "icmp_ln50_reg_119");
    sc_trace(mVcdFile, icmp_ln51_fu_94_p2, "icmp_ln51_fu_94_p2");
    sc_trace(mVcdFile, icmp_ln51_reg_123, "icmp_ln51_reg_123");
    sc_trace(mVcdFile, tmp_reg_127, "tmp_reg_127");
    sc_trace(mVcdFile, ap_phi_mux_UnifiedRetVal_phi_fu_81_p4, "ap_phi_mux_UnifiedRetVal_phi_fu_81_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, or_ln56_fu_100_p2, "or_ln56_fu_100_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_65, "ap_condition_65");
    sc_trace(mVcdFile, ap_condition_74, "ap_condition_74");
#endif

    }
    mHdltvinHandle.open("XGIfb_validate_mode.hdltvin.dat");
    mHdltvoutHandle.open("XGIfb_validate_mode.hdltvout.dat");
}

XGIfb_validate_mode::~XGIfb_validate_mode() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void XGIfb_validate_mode::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        icmp_ln50_reg_119 = grp_fu_88_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(grp_fu_88_p2.read(), ap_const_lv1_1))) {
        icmp_ln51_reg_123 = icmp_ln51_fu_94_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(grp_fu_88_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln51_fu_94_p2.read(), ap_const_lv1_1))) {
        tmp_reg_127 = or_ln56_fu_100_p2.read().range(31, 31);
    }
}

void XGIfb_validate_mode::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void XGIfb_validate_mode::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void XGIfb_validate_mode::thread_ap_condition_65() {
    ap_condition_65 = (((esl_seteq<1,1,1>(icmp_ln50_reg_119.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(tmp_reg_127.read(), ap_const_lv1_0)) || 
  (esl_seteq<1,1,1>(icmp_ln50_reg_119.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(icmp_ln51_reg_123.read(), ap_const_lv1_0))) || (esl_seteq<1,1,1>(grp_fu_88_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(icmp_ln50_reg_119.read(), ap_const_lv1_0)));
}

void XGIfb_validate_mode::thread_ap_condition_74() {
    ap_condition_74 = ((esl_seteq<1,1,1>(icmp_ln50_reg_119.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(icmp_ln51_reg_123.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_127.read())) || (esl_seteq<1,1,1>(icmp_ln50_reg_119.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(grp_fu_88_p2.read(), ap_const_lv1_0)));
}

void XGIfb_validate_mode::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void XGIfb_validate_mode::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void XGIfb_validate_mode::thread_ap_phi_mux_UnifiedRetVal_phi_fu_81_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(ap_condition_74.read(), ap_const_boolean_1)) {
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = ap_const_lv32_FFFFFFFF;
        } else if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = myindex.read();
        } else {
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void XGIfb_validate_mode::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void XGIfb_validate_mode::thread_ap_return() {
    ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_81_p4.read();
}

void XGIfb_validate_mode::thread_grp_fu_88_p2() {
    grp_fu_88_p2 = (!xgifb_info_chip.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(xgifb_info_chip.read() == ap_const_lv32_0);
}

void XGIfb_validate_mode::thread_icmp_ln51_fu_94_p2() {
    icmp_ln51_fu_94_p2 = (!xgifb_info_display2.read().is_01() || !ap_const_lv32_82.is_01())? sc_lv<1>(): sc_lv<1>(xgifb_info_display2.read() == ap_const_lv32_82);
}

void XGIfb_validate_mode::thread_or_ln56_fu_100_p2() {
    or_ln56_fu_100_p2 = (xgifb_info_lvds_data_LVDSHDE.read() | xgifb_info_lvds_data_LVDSVDE.read());
}

void XGIfb_validate_mode::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void XGIfb_validate_mode::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_chip\" :  \"" << xgifb_info_chip.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_display2\" :  \"" << xgifb_info_display2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_video_size\" :  \"" << xgifb_info_video_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_TV_type\" :  \"" << xgifb_info_TV_type.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_hasVB\" :  \"" << xgifb_info_hasVB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_lvds_data_LVDSHDE\" :  \"" << xgifb_info_lvds_data_LVDSHDE.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_lvds_data_LVDSVDE\" :  \"" << xgifb_info_lvds_data_LVDSVDE.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_hw_info_ulCRT2LCDType\" :  \"" << xgifb_info_hw_info_ulCRT2LCDType.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"xgifb_info_hw_info_ulExternalChip\" :  \"" << xgifb_info_hw_info_ulExternalChip.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myindex\" :  \"" << myindex.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

