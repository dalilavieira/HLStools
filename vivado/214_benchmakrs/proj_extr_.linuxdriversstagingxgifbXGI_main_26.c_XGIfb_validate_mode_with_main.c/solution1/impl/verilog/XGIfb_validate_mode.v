// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="XGIfb_validate_mode,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.546000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=110,HLS_VERSION=2019_1}" *)

module XGIfb_validate_mode (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xgifb_info_chip,
        xgifb_info_display2,
        xgifb_info_video_size,
        xgifb_info_TV_type,
        xgifb_info_hasVB,
        xgifb_info_lvds_data_LVDSHDE,
        xgifb_info_lvds_data_LVDSVDE,
        xgifb_info_hw_info_ulCRT2LCDType,
        xgifb_info_hw_info_ulExternalChip,
        myindex,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] xgifb_info_chip;
input  [31:0] xgifb_info_display2;
input  [63:0] xgifb_info_video_size;
input  [31:0] xgifb_info_TV_type;
input  [31:0] xgifb_info_hasVB;
input  [31:0] xgifb_info_lvds_data_LVDSHDE;
input  [31:0] xgifb_info_lvds_data_LVDSVDE;
input  [31:0] xgifb_info_hw_info_ulCRT2LCDType;
input  [31:0] xgifb_info_hw_info_ulExternalChip;
input  [31:0] myindex;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_fu_88_p2;
reg   [0:0] icmp_ln50_reg_119;
wire   [0:0] icmp_ln51_fu_94_p2;
reg   [0:0] icmp_ln51_reg_123;
reg   [0:0] tmp_reg_127;
reg   [31:0] ap_phi_mux_UnifiedRetVal_phi_fu_81_p4;
wire    ap_CS_fsm_state2;
wire   [31:0] or_ln56_fu_100_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_65;
reg    ap_condition_74;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln50_reg_119 <= grp_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (grp_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln51_reg_123 <= icmp_ln51_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln51_fu_94_p2 == 1'd1) & (grp_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_127 <= or_ln56_fu_100_p2[32'd31];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_74)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = 32'd4294967295;
        end else if ((1'b1 == ap_condition_65)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = myindex;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_condition_65 = ((((icmp_ln51_reg_123 == 1'd0) & (icmp_ln50_reg_119 == 1'd1)) | ((tmp_reg_127 == 1'd0) & (icmp_ln50_reg_119 == 1'd1))) | ((icmp_ln50_reg_119 == 1'd0) & (grp_fu_88_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_74 = (((icmp_ln50_reg_119 == 1'd0) & (grp_fu_88_p2 == 1'd0)) | ((tmp_reg_127 == 1'd1) & (icmp_ln51_reg_123 == 1'd1) & (icmp_ln50_reg_119 == 1'd1)));
end

assign ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_81_p4;

assign grp_fu_88_p2 = ((xgifb_info_chip == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_94_p2 = ((xgifb_info_display2 == 32'd130) ? 1'b1 : 1'b0);

assign or_ln56_fu_100_p2 = (xgifb_info_lvds_data_LVDSVDE | xgifb_info_lvds_data_LVDSHDE);

endmodule //XGIfb_validate_mode
