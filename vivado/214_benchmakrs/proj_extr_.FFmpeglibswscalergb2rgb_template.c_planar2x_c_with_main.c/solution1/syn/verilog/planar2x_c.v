// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="planar2x_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.128000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=1017,HLS_SYN_LUT=1589,HLS_VERSION=2019_1}" *)

module planar2x_c (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        srcWidth,
        srcHeight,
        srcStride,
        dstStride
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] src_address0;
output   src_ce0;
input  [31:0] src_q0;
output  [2:0] src_address1;
output   src_ce1;
input  [31:0] src_q1;
output  [2:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [31:0] dst_d0;
output  [2:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [31:0] dst_d1;
input  [31:0] srcWidth;
input  [31:0] srcHeight;
input  [31:0] srcStride;
input  [31:0] dstStride;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] src_address0;
reg src_ce0;
reg[2:0] src_address1;
reg src_ce1;
reg[2:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[31:0] dst_d0;
reg[2:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[31:0] dst_d1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg   [31:0] src_load_reg_1392;
wire   [4:0] trunc_ln24_fu_421_p1;
reg   [4:0] trunc_ln24_reg_1397;
wire  signed [31:0] add_ln24_fu_425_p2;
reg  signed [31:0] add_ln24_reg_1402;
wire   [30:0] x_fu_440_p2;
reg   [30:0] x_reg_1413;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln24_fu_435_p2;
wire   [4:0] add_ln28_1_fu_556_p2;
reg   [4:0] add_ln28_1_reg_1433;
wire    ap_CS_fsm_state5;
wire   [4:0] add_ln28_2_fu_588_p2;
reg   [4:0] add_ln28_2_reg_1439;
wire   [4:0] trunc_ln32_fu_594_p1;
reg   [4:0] trunc_ln32_reg_1445;
wire  signed [62:0] p_cast8_fu_602_p1;
reg  signed [62:0] p_cast8_reg_1453;
wire  signed [4:0] grp_fu_1353_p3;
reg  signed [4:0] add_ln32_1_reg_1458;
wire  signed [62:0] sext_ln32_fu_649_p1;
reg  signed [62:0] sext_ln32_reg_1465;
wire  signed [4:0] trunc_ln32_2_fu_652_p1;
reg  signed [4:0] trunc_ln32_2_reg_1470;
wire   [4:0] mul_ln32_1_fu_655_p2;
reg   [4:0] mul_ln32_1_reg_1476;
wire   [4:0] add_ln45_fu_661_p2;
reg   [4:0] add_ln45_reg_1483;
wire   [4:0] add_ln32_2_fu_667_p2;
reg   [4:0] add_ln32_2_reg_1488;
wire    ap_CS_fsm_state6;
wire   [4:0] p_sum_fu_686_p2;
reg   [4:0] p_sum_reg_1498;
reg   [2:0] dst_addr_4_reg_1509;
wire  signed [62:0] add_ln35_fu_701_p2;
reg  signed [62:0] add_ln35_reg_1517;
wire   [0:0] icmp_ln32_fu_696_p2;
reg   [31:0] src_load_5_reg_1527;
wire    ap_CS_fsm_state7;
reg   [29:0] trunc_ln6_reg_1532;
wire   [30:0] x_3_fu_794_p2;
reg   [30:0] x_3_reg_1540;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln38_fu_789_p2;
wire   [3:0] trunc_ln39_1_fu_841_p1;
reg   [3:0] trunc_ln39_1_reg_1555;
wire   [4:0] add_ln41_1_fu_845_p2;
reg   [4:0] add_ln41_1_reg_1560;
wire   [4:0] add_ln41_3_fu_856_p2;
reg   [4:0] add_ln41_3_reg_1565;
wire   [62:0] add_ln47_fu_886_p2;
reg   [62:0] add_ln47_reg_1580;
wire   [30:0] y_fu_891_p2;
reg   [30:0] y_reg_1585;
reg   [29:0] trunc_ln8_reg_1590;
wire    ap_CS_fsm_state10;
wire   [4:0] add_ln40_3_fu_992_p2;
reg   [4:0] add_ln40_3_reg_1595;
wire   [4:0] add_ln41_6_fu_1002_p2;
reg   [4:0] add_ln41_6_reg_1600;
wire   [4:0] add_ln42_1_fu_1007_p2;
reg   [4:0] add_ln42_1_reg_1605;
wire    ap_CS_fsm_state11;
reg   [29:0] trunc_ln_reg_1620;
wire    ap_CS_fsm_state12;
reg   [29:0] trunc_ln10_reg_1625;
wire    ap_CS_fsm_state14;
wire   [4:0] add_ln45_2_fu_1171_p2;
reg   [4:0] add_ln45_2_reg_1630;
wire   [30:0] x_4_fu_1192_p2;
reg   [30:0] x_4_reg_1638;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln54_fu_1187_p2;
wire   [3:0] trunc_ln55_1_fu_1228_p1;
reg   [3:0] trunc_ln55_1_reg_1653;
reg   [29:0] trunc_ln12_reg_1663;
wire    ap_CS_fsm_state17;
(* use_dsp48 = "no" *) wire   [4:0] add_ln56_2_fu_1331_p2;
reg   [4:0] add_ln56_2_reg_1668;
reg   [30:0] x_0_reg_341;
wire    ap_CS_fsm_state4;
reg   [31:0] src_load_10_reg_353;
wire    ap_CS_fsm_state15;
reg   [30:0] y_0_reg_363;
reg   [62:0] p_01_rec_reg_375;
reg  signed [62:0] p_0_rec_reg_387;
reg   [30:0] x_1_reg_399;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
reg   [30:0] x_2_reg_410;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln25_fu_446_p1;
wire   [63:0] zext_ln25_1_fu_451_p1;
wire  signed [63:0] sext_ln28_fu_456_p1;
wire  signed [63:0] sext_ln25_1_fu_507_p1;
wire  signed [63:0] sext_ln26_fu_551_p1;
wire  signed [63:0] sext_ln28_1_fu_583_p1;
wire  signed [63:0] p_0_rec_cast_fu_681_p1;
wire   [63:0] p_sum_cast_fu_691_p1;
wire  signed [63:0] sext_ln35_1_fu_706_p1;
wire   [63:0] zext_ln36_fu_780_p1;
wire   [63:0] zext_ln39_fu_814_p1;
wire   [63:0] zext_ln39_1_fu_836_p1;
wire   [63:0] zext_ln44_fu_871_p1;
wire   [63:0] zext_ln44_1_fu_881_p1;
wire   [63:0] zext_ln39_2_fu_948_p1;
wire   [63:0] zext_ln40_fu_1016_p1;
wire   [63:0] zext_ln41_fu_1020_p1;
wire   [63:0] zext_ln41_1_fu_1024_p1;
wire   [63:0] zext_ln41_2_fu_1061_p1;
wire   [63:0] zext_ln42_fu_1097_p1;
wire   [63:0] zext_ln44_2_fu_1138_p1;
wire   [63:0] zext_ln45_fu_1179_p1;
wire   [63:0] zext_ln55_fu_1207_p1;
wire   [63:0] zext_ln55_1_fu_1223_p1;
wire   [63:0] zext_ln58_fu_1236_p1;
wire   [63:0] zext_ln55_2_fu_1292_p1;
wire   [63:0] zext_ln56_fu_1340_p1;
wire   [63:0] zext_ln58_1_fu_1348_p1;
wire    ap_CS_fsm_state19;
wire  signed [31:0] sext_ln25_fu_488_p1;
wire  signed [31:0] sext_ln26_1_fu_540_p1;
wire  signed [31:0] sext_ln35_fu_739_p1;
wire  signed [31:0] sext_ln36_fu_772_p1;
wire  signed [31:0] sext_ln39_fu_925_p1;
wire  signed [31:0] sext_ln40_fu_1012_p1;
wire  signed [31:0] sext_ln41_fu_1056_p1;
wire  signed [31:0] sext_ln42_fu_1093_p1;
wire  signed [31:0] sext_ln44_fu_1129_p1;
wire  signed [31:0] sext_ln45_fu_1175_p1;
wire  signed [31:0] sext_ln55_fu_1269_p1;
wire  signed [31:0] sext_ln56_fu_1336_p1;
wire   [31:0] zext_ln24_fu_431_p1;
wire   [31:0] shl_ln25_fu_460_p2;
wire   [31:0] sub_ln25_fu_466_p2;
wire   [31:0] add_ln25_1_fu_472_p2;
wire   [29:0] trunc_ln1_fu_478_p4;
wire   [31:0] shl_ln_fu_493_p3;
wire   [31:0] or_ln25_fu_501_p2;
wire   [31:0] shl_ln26_fu_512_p2;
wire   [31:0] sub_ln26_fu_518_p2;
wire   [31:0] add_ln26_fu_524_p2;
wire   [29:0] trunc_ln2_fu_530_p4;
wire   [31:0] add_ln26_1_fu_545_p2;
wire   [3:0] trunc_ln28_fu_566_p1;
wire   [31:0] shl_ln28_fu_561_p2;
wire   [31:0] add_ln28_fu_577_p2;
wire   [4:0] trunc_ln3_fu_569_p3;
wire   [31:0] shl_ln32_fu_597_p2;
wire   [3:0] empty_fu_606_p1;
wire   [30:0] tmp_fu_617_p4;
wire   [4:0] trunc_ln32_1_fu_632_p1;
wire   [0:0] icmp_fu_626_p2;
wire   [4:0] add_ln32_fu_635_p2;
wire  signed [31:0] sext_ln32_fu_649_p0;
wire  signed [31:0] trunc_ln32_2_fu_652_p0;
wire  signed [4:0] select_ln32_fu_641_p3;
wire   [4:0] empty_4_fu_677_p1;
wire   [31:0] y_0_cast_fu_673_p1;
wire   [31:0] shl_ln35_fu_711_p2;
wire   [31:0] sub_ln35_fu_717_p2;
wire   [31:0] add_ln35_1_fu_723_p2;
wire   [29:0] trunc_ln5_fu_729_p4;
wire   [31:0] shl_ln36_fu_744_p2;
wire   [31:0] sub_ln36_fu_750_p2;
wire   [31:0] add_ln36_fu_756_p2;
wire   [4:0] add_ln36_1_fu_776_p2;
wire   [31:0] zext_ln38_fu_785_p1;
wire   [4:0] trunc_ln39_fu_800_p1;
wire   [4:0] empty_5_fu_804_p1;
wire   [4:0] add_ln39_fu_808_p2;
wire   [4:0] add_ln39_1_fu_819_p2;
wire   [4:0] add_ln39_2_fu_825_p2;
wire   [4:0] add_ln39_3_fu_830_p2;
wire   [4:0] add_ln41_2_fu_851_p2;
wire   [4:0] empty_6_fu_862_p1;
wire   [4:0] add_ln44_fu_866_p2;
wire   [4:0] add_ln44_1_fu_876_p2;
wire   [31:0] shl_ln39_fu_897_p2;
wire   [31:0] sub_ln39_fu_903_p2;
wire   [31:0] add_ln39_4_fu_909_p2;
wire   [29:0] trunc_ln7_fu_915_p4;
wire   [4:0] trunc_ln39_4_fu_930_p3;
wire   [4:0] or_ln39_fu_937_p2;
wire   [4:0] add_ln39_5_fu_943_p2;
wire   [31:0] shl_ln40_fu_953_p2;
wire   [31:0] sub_ln40_fu_959_p2;
wire   [31:0] add_ln40_fu_965_p2;
wire   [4:0] add_ln40_1_fu_981_p2;
wire   [4:0] add_ln40_2_fu_987_p2;
wire   [4:0] add_ln41_5_fu_997_p2;
wire   [31:0] shl_ln41_fu_1028_p2;
wire   [31:0] sub_ln41_fu_1034_p2;
wire   [31:0] add_ln41_4_fu_1040_p2;
wire   [29:0] trunc_ln9_fu_1046_p4;
wire   [31:0] shl_ln42_fu_1065_p2;
wire   [31:0] sub_ln42_fu_1071_p2;
wire   [31:0] add_ln42_fu_1077_p2;
wire   [31:0] shl_ln44_fu_1101_p2;
wire   [31:0] sub_ln44_fu_1107_p2;
wire   [31:0] add_ln44_2_fu_1113_p2;
wire   [29:0] trunc_ln4_fu_1119_p4;
wire   [4:0] add_ln44_3_fu_1134_p2;
wire   [31:0] shl_ln45_fu_1143_p2;
wire   [31:0] sub_ln45_fu_1149_p2;
wire   [31:0] add_ln45_1_fu_1155_p2;
wire   [31:0] zext_ln54_fu_1183_p1;
wire   [4:0] trunc_ln55_fu_1198_p1;
wire   [4:0] add_ln55_fu_1202_p2;
wire   [4:0] add_ln55_5_fu_1212_p2;
wire   [4:0] add_ln55_2_fu_1218_p2;
wire   [4:0] add_ln58_fu_1232_p2;
wire   [31:0] shl_ln55_fu_1241_p2;
wire   [31:0] sub_ln55_fu_1247_p2;
wire   [31:0] add_ln55_3_fu_1253_p2;
wire   [29:0] trunc_ln11_fu_1259_p4;
wire   [4:0] trunc_ln55_2_fu_1274_p3;
wire   [4:0] or_ln55_fu_1281_p2;
(* use_dsp48 = "no" *) wire   [4:0] add_ln55_4_fu_1287_p2;
wire   [31:0] shl_ln56_fu_1297_p2;
wire   [31:0] sub_ln56_fu_1303_p2;
wire   [31:0] add_ln56_fu_1309_p2;
wire   [4:0] add_ln56_1_fu_1325_p2;
(* use_dsp48 = "no" *) wire   [4:0] add_ln58_1_fu_1344_p2;
wire  signed [4:0] grp_fu_1353_p1;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

planar2x_c_mac_muladd_5s_5s_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
planar2x_c_mac_muladd_5s_5s_5ns_5_1_1_U1(
    .din0(select_ln32_fu_641_p3),
    .din1(grp_fu_1353_p1),
    .din2(trunc_ln32_fu_594_p1),
    .dout(grp_fu_1353_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_01_rec_reg_375 <= add_ln47_reg_1580;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_01_rec_reg_375 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_0_rec_reg_387 <= add_ln35_reg_1517;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_0_rec_reg_387 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        src_load_10_reg_353 <= src_load_5_reg_1527;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_load_10_reg_353 <= src_load_reg_1392;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_0_reg_341 <= x_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_0_reg_341 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        x_1_reg_399 <= x_3_reg_1540;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_1_reg_399 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        x_2_reg_410 <= x_4_reg_1638;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_696_p2 == 1'd0))) begin
        x_2_reg_410 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        y_0_reg_363 <= y_reg_1585;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_0_reg_363 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_1402 <= add_ln24_fu_425_p2;
        src_load_reg_1392 <= src_q0;
        trunc_ln24_reg_1397 <= trunc_ln24_fu_421_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln28_1_reg_1433 <= add_ln28_1_fu_556_p2;
        add_ln28_2_reg_1439[4 : 1] <= add_ln28_2_fu_588_p2[4 : 1];
        add_ln32_1_reg_1458 <= grp_fu_1353_p3;
        add_ln32_2_reg_1488 <= add_ln32_2_fu_667_p2;
        add_ln45_reg_1483 <= add_ln45_fu_661_p2;
        mul_ln32_1_reg_1476 <= mul_ln32_1_fu_655_p2;
        p_cast8_reg_1453[62 : 1] <= p_cast8_fu_602_p1[62 : 1];
        sext_ln32_reg_1465 <= sext_ln32_fu_649_p1;
        trunc_ln32_2_reg_1470 <= trunc_ln32_2_fu_652_p1;
        trunc_ln32_reg_1445 <= trunc_ln32_fu_594_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_696_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln35_reg_1517 <= add_ln35_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln40_3_reg_1595 <= add_ln40_3_fu_992_p2;
        add_ln41_6_reg_1600 <= add_ln41_6_fu_1002_p2;
        add_ln42_1_reg_1605 <= add_ln42_1_fu_1007_p2;
        trunc_ln8_reg_1590 <= {{add_ln40_fu_965_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln41_1_reg_1560 <= add_ln41_1_fu_845_p2;
        add_ln41_3_reg_1565 <= add_ln41_3_fu_856_p2;
        trunc_ln39_1_reg_1555 <= trunc_ln39_1_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln45_2_reg_1630 <= add_ln45_2_fu_1171_p2;
        trunc_ln10_reg_1625 <= {{add_ln45_1_fu_1155_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0))) begin
        add_ln47_reg_1580 <= add_ln47_fu_886_p2;
        y_reg_1585 <= y_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln56_2_reg_1668 <= add_ln56_2_fu_1331_p2;
        trunc_ln12_reg_1663 <= {{add_ln56_fu_1309_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_addr_4_reg_1509 <= p_sum_cast_fu_691_p1;
        p_sum_reg_1498 <= p_sum_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        src_load_5_reg_1527 <= src_q0;
        trunc_ln6_reg_1532 <= {{add_ln36_fu_756_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_1187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        trunc_ln55_1_reg_1653 <= trunc_ln55_1_fu_1228_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln_reg_1620 <= {{add_ln42_fu_1077_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_3_reg_1540 <= x_3_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_4_reg_1638 <= x_4_fu_1192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_1413 <= x_fu_440_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dst_address0 = zext_ln56_fu_1340_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_address0 = zext_ln45_fu_1179_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_address0 = zext_ln42_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_address0 = zext_ln40_fu_1016_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address0 = zext_ln36_fu_780_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = p_sum_cast_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = sext_ln25_1_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_address0 = 64'd0;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dst_address1 = zext_ln58_1_fu_1348_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dst_address1 = zext_ln55_2_fu_1292_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_address1 = zext_ln44_2_fu_1138_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_address1 = zext_ln41_2_fu_1061_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_address1 = zext_ln39_2_fu_948_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_address1 = dst_addr_4_reg_1509;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address1 = sext_ln28_1_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address1 = sext_ln26_fu_551_p1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dst_d0 = sext_ln56_fu_1336_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_d0 = sext_ln45_fu_1175_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dst_d0 = sext_ln42_fu_1093_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_d0 = sext_ln40_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_d0 = sext_ln36_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_d0 = src_load_10_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_d0 = sext_ln25_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_d0 = src_q0;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dst_d1 = src_q1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dst_d1 = sext_ln55_fu_1269_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dst_d1 = sext_ln44_fu_1129_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dst_d1 = sext_ln41_fu_1056_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_d1 = sext_ln39_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_d1 = sext_ln35_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_d1 = src_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_d1 = sext_ln26_1_fu_540_p1;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_696_p2 == 1'd0)))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        src_address0 = zext_ln55_1_fu_1223_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        src_address0 = zext_ln41_1_fu_1024_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0))) begin
        src_address0 = zext_ln44_1_fu_881_p1;
    end else if (((icmp_ln38_fu_789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        src_address0 = zext_ln39_1_fu_836_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address0 = sext_ln35_1_fu_706_p1;
    end else if (((icmp_ln24_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        src_address0 = sext_ln28_fu_456_p1;
    end else if (((icmp_ln24_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_address0 = zext_ln25_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        src_address0 = 64'd0;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln54_fu_1187_p2 == 1'd0))) begin
        src_address1 = zext_ln58_fu_1236_p1;
    end else if (((icmp_ln54_fu_1187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        src_address1 = zext_ln55_fu_1207_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        src_address1 = zext_ln41_fu_1020_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0))) begin
        src_address1 = zext_ln44_fu_871_p1;
    end else if (((icmp_ln38_fu_789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        src_address1 = zext_ln39_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address1 = p_0_rec_cast_fu_681_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address1 = zext_ln25_1_fu_451_p1;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln24_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln24_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0)) | ((icmp_ln38_fu_789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln54_fu_1187_p2 == 1'd0)) | ((icmp_ln54_fu_1187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0)) | ((icmp_ln38_fu_789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_696_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_789_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln54_fu_1187_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_425_p2 = ($signed(32'd4294967295) + $signed(srcWidth));

assign add_ln25_1_fu_472_p2 = (src_q1 + sub_ln25_fu_466_p2);

assign add_ln26_1_fu_545_p2 = (32'd2 + shl_ln_fu_493_p3);

assign add_ln26_fu_524_p2 = (src_q0 + sub_ln26_fu_518_p2);

assign add_ln28_1_fu_556_p2 = ($signed(5'd31) + $signed(trunc_ln24_reg_1397));

assign add_ln28_2_fu_588_p2 = ($signed(5'd31) + $signed(trunc_ln3_fu_569_p3));

assign add_ln28_fu_577_p2 = ($signed(32'd4294967295) + $signed(shl_ln28_fu_561_p2));

assign add_ln32_2_fu_667_p2 = (add_ln28_2_fu_588_p2 + trunc_ln32_fu_594_p1);

assign add_ln32_fu_635_p2 = ($signed(5'd31) + $signed(trunc_ln32_1_fu_632_p1));

assign add_ln35_1_fu_723_p2 = (sub_ln35_fu_717_p2 + src_q0);

assign add_ln35_fu_701_p2 = ($signed(p_0_rec_reg_387) + $signed(sext_ln32_reg_1465));

assign add_ln36_1_fu_776_p2 = (trunc_ln32_reg_1445 + p_sum_reg_1498);

assign add_ln36_fu_756_p2 = (sub_ln36_fu_750_p2 + src_q1);

assign add_ln39_1_fu_819_p2 = (5'd1 + trunc_ln39_fu_800_p1);

assign add_ln39_2_fu_825_p2 = ($signed(trunc_ln32_2_reg_1470) + $signed(add_ln39_1_fu_819_p2));

assign add_ln39_3_fu_830_p2 = (add_ln39_2_fu_825_p2 + empty_5_fu_804_p1);

assign add_ln39_4_fu_909_p2 = (sub_ln39_fu_903_p2 + src_q0);

assign add_ln39_5_fu_943_p2 = (or_ln39_fu_937_p2 + p_sum_reg_1498);

assign add_ln39_fu_808_p2 = (trunc_ln39_fu_800_p1 + empty_5_fu_804_p1);

assign add_ln40_1_fu_981_p2 = (5'd2 + trunc_ln39_4_fu_930_p3);

assign add_ln40_2_fu_987_p2 = (add_ln40_1_fu_981_p2 + trunc_ln32_reg_1445);

assign add_ln40_3_fu_992_p2 = (add_ln40_2_fu_987_p2 + p_sum_reg_1498);

assign add_ln40_fu_965_p2 = (sub_ln40_fu_959_p2 + src_q1);

assign add_ln41_1_fu_845_p2 = (add_ln39_1_fu_819_p2 + empty_5_fu_804_p1);

assign add_ln41_2_fu_851_p2 = ($signed(trunc_ln32_2_reg_1470) + $signed(trunc_ln39_fu_800_p1));

assign add_ln41_3_fu_856_p2 = (add_ln41_2_fu_851_p2 + empty_5_fu_804_p1);

assign add_ln41_4_fu_1040_p2 = (sub_ln41_fu_1034_p2 + src_q1);

assign add_ln41_5_fu_997_p2 = (or_ln39_fu_937_p2 + trunc_ln32_reg_1445);

assign add_ln41_6_fu_1002_p2 = (add_ln41_5_fu_997_p2 + p_sum_reg_1498);

assign add_ln42_1_fu_1007_p2 = (add_ln40_1_fu_981_p2 + p_sum_reg_1498);

assign add_ln42_fu_1077_p2 = (sub_ln42_fu_1071_p2 + src_q0);

assign add_ln44_1_fu_876_p2 = (add_ln45_reg_1483 + empty_6_fu_862_p1);

assign add_ln44_2_fu_1113_p2 = (sub_ln44_fu_1107_p2 + src_q0);

assign add_ln44_3_fu_1134_p2 = (add_ln28_2_reg_1439 + p_sum_reg_1498);

assign add_ln44_fu_866_p2 = (add_ln28_1_reg_1433 + empty_6_fu_862_p1);

assign add_ln45_1_fu_1155_p2 = (sub_ln45_fu_1149_p2 + src_q1);

assign add_ln45_2_fu_1171_p2 = (add_ln32_2_reg_1488 + p_sum_reg_1498);

assign add_ln45_fu_661_p2 = ($signed(add_ln28_1_fu_556_p2) + $signed(trunc_ln32_2_fu_652_p1));

assign add_ln47_fu_886_p2 = ($signed(p_01_rec_reg_375) + $signed(p_cast8_reg_1453));

assign add_ln55_2_fu_1218_p2 = (mul_ln32_1_reg_1476 + add_ln55_5_fu_1212_p2);

assign add_ln55_3_fu_1253_p2 = (src_q0 + sub_ln55_fu_1247_p2);

assign add_ln55_4_fu_1287_p2 = ($signed(add_ln32_1_reg_1458) + $signed(or_ln55_fu_1281_p2));

assign add_ln55_5_fu_1212_p2 = (5'd1 + trunc_ln55_fu_1198_p1);

assign add_ln55_fu_1202_p2 = (mul_ln32_1_reg_1476 + trunc_ln55_fu_1198_p1);

assign add_ln56_1_fu_1325_p2 = (5'd2 + trunc_ln55_2_fu_1274_p3);

assign add_ln56_2_fu_1331_p2 = ($signed(add_ln32_1_reg_1458) + $signed(add_ln56_1_fu_1325_p2));

assign add_ln56_fu_1309_p2 = (src_q1 + sub_ln56_fu_1303_p2);

assign add_ln58_1_fu_1344_p2 = ($signed(add_ln32_1_reg_1458) + $signed(add_ln28_2_reg_1439));

assign add_ln58_fu_1232_p2 = (mul_ln32_1_reg_1476 + add_ln28_1_reg_1433);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_4_fu_677_p1 = p_01_rec_reg_375[4:0];

assign empty_5_fu_804_p1 = p_0_rec_reg_387[4:0];

assign empty_6_fu_862_p1 = p_0_rec_reg_387[4:0];

assign empty_fu_606_p1 = dstStride[3:0];

assign grp_fu_1353_p1 = {{empty_fu_606_p1}, {1'd0}};

assign icmp_fu_626_p2 = (($signed(tmp_fu_617_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_435_p2 = (($signed(zext_ln24_fu_431_p1) < $signed(add_ln24_reg_1402)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_696_p2 = (($signed(y_0_cast_fu_673_p1) < $signed(srcHeight)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_789_p2 = (($signed(zext_ln38_fu_785_p1) < $signed(add_ln24_reg_1402)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1187_p2 = (($signed(zext_ln54_fu_1183_p1) < $signed(add_ln24_reg_1402)) ? 1'b1 : 1'b0);

assign mul_ln32_1_fu_655_p2 = ($signed(trunc_ln32_2_fu_652_p1) * $signed(select_ln32_fu_641_p3));

assign or_ln25_fu_501_p2 = (shl_ln_fu_493_p3 | 32'd1);

assign or_ln39_fu_937_p2 = (trunc_ln39_4_fu_930_p3 | 5'd1);

assign or_ln55_fu_1281_p2 = (trunc_ln55_2_fu_1274_p3 | 5'd1);

assign p_0_rec_cast_fu_681_p1 = p_0_rec_reg_387;

assign p_cast8_fu_602_p1 = $signed(shl_ln32_fu_597_p2);

assign p_sum_cast_fu_691_p1 = p_sum_fu_686_p2;

assign p_sum_fu_686_p2 = (empty_4_fu_677_p1 + trunc_ln32_reg_1445);

assign select_ln32_fu_641_p3 = ((icmp_fu_626_p2[0:0] === 1'b1) ? add_ln32_fu_635_p2 : 5'd0);

assign sext_ln25_1_fu_507_p1 = $signed(or_ln25_fu_501_p2);

assign sext_ln25_fu_488_p1 = $signed(trunc_ln1_fu_478_p4);

assign sext_ln26_1_fu_540_p1 = $signed(trunc_ln2_fu_530_p4);

assign sext_ln26_fu_551_p1 = $signed(add_ln26_1_fu_545_p2);

assign sext_ln28_1_fu_583_p1 = $signed(add_ln28_fu_577_p2);

assign sext_ln28_fu_456_p1 = add_ln24_reg_1402;

assign sext_ln32_fu_649_p0 = srcStride;

assign sext_ln32_fu_649_p1 = sext_ln32_fu_649_p0;

assign sext_ln35_1_fu_706_p1 = add_ln35_fu_701_p2;

assign sext_ln35_fu_739_p1 = $signed(trunc_ln5_fu_729_p4);

assign sext_ln36_fu_772_p1 = $signed(trunc_ln6_reg_1532);

assign sext_ln39_fu_925_p1 = $signed(trunc_ln7_fu_915_p4);

assign sext_ln40_fu_1012_p1 = $signed(trunc_ln8_reg_1590);

assign sext_ln41_fu_1056_p1 = $signed(trunc_ln9_fu_1046_p4);

assign sext_ln42_fu_1093_p1 = $signed(trunc_ln_reg_1620);

assign sext_ln44_fu_1129_p1 = $signed(trunc_ln4_fu_1119_p4);

assign sext_ln45_fu_1175_p1 = $signed(trunc_ln10_reg_1625);

assign sext_ln55_fu_1269_p1 = $signed(trunc_ln11_fu_1259_p4);

assign sext_ln56_fu_1336_p1 = $signed(trunc_ln12_reg_1663);

assign shl_ln25_fu_460_p2 = src_q0 << 32'd2;

assign shl_ln26_fu_512_p2 = src_q1 << 32'd2;

assign shl_ln28_fu_561_p2 = srcWidth << 32'd1;

assign shl_ln32_fu_597_p2 = dstStride << 32'd1;

assign shl_ln35_fu_711_p2 = src_q1 << 32'd2;

assign shl_ln36_fu_744_p2 = src_q0 << 32'd2;

assign shl_ln39_fu_897_p2 = src_q1 << 32'd2;

assign shl_ln40_fu_953_p2 = src_q0 << 32'd2;

assign shl_ln41_fu_1028_p2 = src_q0 << 32'd2;

assign shl_ln42_fu_1065_p2 = src_q1 << 32'd2;

assign shl_ln44_fu_1101_p2 = src_q1 << 32'd2;

assign shl_ln45_fu_1143_p2 = src_q0 << 32'd2;

assign shl_ln55_fu_1241_p2 = src_q1 << 32'd2;

assign shl_ln56_fu_1297_p2 = src_q0 << 32'd2;

assign shl_ln_fu_493_p3 = {{x_0_reg_341}, {1'd0}};

assign sub_ln25_fu_466_p2 = (shl_ln25_fu_460_p2 - src_q0);

assign sub_ln26_fu_518_p2 = (shl_ln26_fu_512_p2 - src_q1);

assign sub_ln35_fu_717_p2 = (shl_ln35_fu_711_p2 - src_q1);

assign sub_ln36_fu_750_p2 = (shl_ln36_fu_744_p2 - src_q0);

assign sub_ln39_fu_903_p2 = (shl_ln39_fu_897_p2 - src_q1);

assign sub_ln40_fu_959_p2 = (shl_ln40_fu_953_p2 - src_q0);

assign sub_ln41_fu_1034_p2 = (shl_ln41_fu_1028_p2 - src_q0);

assign sub_ln42_fu_1071_p2 = (shl_ln42_fu_1065_p2 - src_q1);

assign sub_ln44_fu_1107_p2 = (shl_ln44_fu_1101_p2 - src_q1);

assign sub_ln45_fu_1149_p2 = (shl_ln45_fu_1143_p2 - src_q0);

assign sub_ln55_fu_1247_p2 = (shl_ln55_fu_1241_p2 - src_q1);

assign sub_ln56_fu_1303_p2 = (shl_ln56_fu_1297_p2 - src_q0);

assign tmp_fu_617_p4 = {{srcHeight[31:1]}};

assign trunc_ln11_fu_1259_p4 = {{add_ln55_3_fu_1253_p2[31:2]}};

assign trunc_ln1_fu_478_p4 = {{add_ln25_1_fu_472_p2[31:2]}};

assign trunc_ln24_fu_421_p1 = srcWidth[4:0];

assign trunc_ln28_fu_566_p1 = srcWidth[3:0];

assign trunc_ln2_fu_530_p4 = {{add_ln26_fu_524_p2[31:2]}};

assign trunc_ln32_1_fu_632_p1 = srcHeight[4:0];

assign trunc_ln32_2_fu_652_p0 = srcStride;

assign trunc_ln32_2_fu_652_p1 = trunc_ln32_2_fu_652_p0[4:0];

assign trunc_ln32_fu_594_p1 = dstStride[4:0];

assign trunc_ln39_1_fu_841_p1 = x_1_reg_399[3:0];

assign trunc_ln39_4_fu_930_p3 = {{trunc_ln39_1_reg_1555}, {1'd0}};

assign trunc_ln39_fu_800_p1 = x_1_reg_399[4:0];

assign trunc_ln3_fu_569_p3 = {{trunc_ln28_fu_566_p1}, {1'd0}};

assign trunc_ln4_fu_1119_p4 = {{add_ln44_2_fu_1113_p2[31:2]}};

assign trunc_ln55_1_fu_1228_p1 = x_2_reg_410[3:0];

assign trunc_ln55_2_fu_1274_p3 = {{trunc_ln55_1_reg_1653}, {1'd0}};

assign trunc_ln55_fu_1198_p1 = x_2_reg_410[4:0];

assign trunc_ln5_fu_729_p4 = {{add_ln35_1_fu_723_p2[31:2]}};

assign trunc_ln7_fu_915_p4 = {{add_ln39_4_fu_909_p2[31:2]}};

assign trunc_ln9_fu_1046_p4 = {{add_ln41_4_fu_1040_p2[31:2]}};

assign x_3_fu_794_p2 = (x_1_reg_399 + 31'd1);

assign x_4_fu_1192_p2 = (x_2_reg_410 + 31'd1);

assign x_fu_440_p2 = (x_0_reg_341 + 31'd1);

assign y_0_cast_fu_673_p1 = y_0_reg_363;

assign y_fu_891_p2 = (31'd1 + y_0_reg_363);

assign zext_ln24_fu_431_p1 = x_0_reg_341;

assign zext_ln25_1_fu_451_p1 = x_fu_440_p2;

assign zext_ln25_fu_446_p1 = x_0_reg_341;

assign zext_ln36_fu_780_p1 = add_ln36_1_fu_776_p2;

assign zext_ln38_fu_785_p1 = x_1_reg_399;

assign zext_ln39_1_fu_836_p1 = add_ln39_3_fu_830_p2;

assign zext_ln39_2_fu_948_p1 = add_ln39_5_fu_943_p2;

assign zext_ln39_fu_814_p1 = add_ln39_fu_808_p2;

assign zext_ln40_fu_1016_p1 = add_ln40_3_reg_1595;

assign zext_ln41_1_fu_1024_p1 = add_ln41_3_reg_1565;

assign zext_ln41_2_fu_1061_p1 = add_ln41_6_reg_1600;

assign zext_ln41_fu_1020_p1 = add_ln41_1_reg_1560;

assign zext_ln42_fu_1097_p1 = add_ln42_1_reg_1605;

assign zext_ln44_1_fu_881_p1 = add_ln44_1_fu_876_p2;

assign zext_ln44_2_fu_1138_p1 = add_ln44_3_fu_1134_p2;

assign zext_ln44_fu_871_p1 = add_ln44_fu_866_p2;

assign zext_ln45_fu_1179_p1 = add_ln45_2_reg_1630;

assign zext_ln54_fu_1183_p1 = x_2_reg_410;

assign zext_ln55_1_fu_1223_p1 = add_ln55_2_fu_1218_p2;

assign zext_ln55_2_fu_1292_p1 = add_ln55_4_fu_1287_p2;

assign zext_ln55_fu_1207_p1 = add_ln55_fu_1202_p2;

assign zext_ln56_fu_1340_p1 = add_ln56_2_reg_1668;

assign zext_ln58_1_fu_1348_p1 = add_ln58_1_fu_1344_p2;

assign zext_ln58_fu_1236_p1 = add_ln58_fu_1232_p2;

always @ (posedge ap_clk) begin
    add_ln28_2_reg_1439[0] <= 1'b1;
    p_cast8_reg_1453[0] <= 1'b0;
end

endmodule //planar2x_c
