-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sbr_autocorrelate_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    phi_ce0 : OUT STD_LOGIC;
    phi_we0 : OUT STD_LOGIC;
    phi_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    phi_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    phi_ce1 : OUT STD_LOGIC;
    phi_we1 : OUT STD_LOGIC;
    phi_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sbr_autocorrelate_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sbr_autocorrelate_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.102600,HLS_SYN_LAT=544,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=2589,HLS_SYN_LUT=2429,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001100";
    constant ap_const_lv64_4D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001110";
    constant ap_const_lv64_4F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001111";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln21_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_720 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_load_13_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_15_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_2_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_sum1_0_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_sum1_0_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_sum2_0_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_sum2_0_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_sum0_0_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_334 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_559_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_599_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_540_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln22_fu_553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln25_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_580_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_fu_593_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_346_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_350_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_354_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1_U1 : component sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        opcode => grp_fu_346_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1_U2 : component sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        opcode => grp_fu_350_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1_U3 : component sbr_autocorrelate_c_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_354_p0,
        din1 => grp_fu_354_p1,
        opcode => grp_fu_354_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U4 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U5 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_369_p0,
        din1 => grp_fu_369_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U6 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => grp_fu_373_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U7 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U8 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_458,
        din1 => empty_reg_256,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1_U9 : component sbr_autocorrelate_c_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_467,
        din1 => empty_2_reg_266,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_2_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                empty_2_reg_266 <= reg_476;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                empty_2_reg_266 <= reg_402;
            end if; 
        end if;
    end process;

    empty_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                empty_reg_256 <= x_load_13_reg_735;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                empty_reg_256 <= reg_413;
            end if; 
        end if;
    end process;

    i_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_reg_334 <= i_reg_720;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_334 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    imag_sum1_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                imag_sum1_0_reg_276 <= reg_516;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                imag_sum1_0_reg_276 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    imag_sum2_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                imag_sum2_0_reg_300 <= grp_fu_350_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                imag_sum2_0_reg_300 <= reg_451;
            end if; 
        end if;
    end process;

    real_sum0_0_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                real_sum0_0_reg_322 <= reg_502;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                real_sum0_0_reg_322 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    real_sum1_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                real_sum1_0_reg_288 <= reg_509;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                real_sum1_0_reg_288 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    real_sum2_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                real_sum2_0_reg_311 <= grp_fu_346_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                real_sum2_0_reg_311 <= reg_443;
            end if; 
        end if;
    end process;

    reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_393 <= x_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_393 <= x_q0;
            end if; 
        end if;
    end process;

    reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                reg_402 <= x_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_402 <= x_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_reg_720 <= i_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_413 <= x_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_420 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_426 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_432 <= grp_fu_373_p2;
                reg_438 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_443 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_451 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_458 <= x_q0;
                reg_467 <= x_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_476 <= x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_484 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_490 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_496 <= grp_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_502 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_509 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_516 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_522 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_528 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_13_reg_772 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_15_reg_767 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_33_reg_742 <= grp_fu_383_p2;
                tmp_34_reg_747 <= grp_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_40_reg_752 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                x_load_13_reg_735 <= x_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_load_2_reg_628 <= x_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, icmp_ln21_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_574_p2 <= std_logic_vector(unsigned(i_0_reg_334) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_346_opcode_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state28, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state21, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_346_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_346_opcode <= ap_const_lv2_0;
        else 
            grp_fu_346_opcode <= "XX";
        end if; 
    end process;


    grp_fu_346_p0_assign_proc : process(ap_CS_fsm_state30, reg_420, ap_CS_fsm_state31, reg_443, ap_CS_fsm_state35, ap_CS_fsm_state28, reg_484, ap_CS_fsm_state17, reg_502, ap_CS_fsm_state34, reg_522, ap_CS_fsm_state21, reg_528, imag_sum1_0_reg_276, real_sum2_0_reg_311, real_sum0_0_reg_322, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_346_p0 <= reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_346_p0 <= reg_522;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_346_p0 <= reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_346_p0 <= reg_443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_346_p0 <= imag_sum1_0_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_346_p0 <= real_sum2_0_reg_311;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_346_p0 <= real_sum0_0_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_346_p0 <= reg_484;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_346_p0 <= reg_420;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p1_assign_proc : process(ap_CS_fsm_state30, reg_420, ap_CS_fsm_state31, reg_426, reg_432, ap_CS_fsm_state35, ap_CS_fsm_state28, reg_484, ap_CS_fsm_state17, reg_490, reg_496, reg_502, ap_CS_fsm_state34, reg_522, ap_CS_fsm_state21, tmp_15_reg_767, ap_CS_fsm_state36, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_346_p1 <= reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_346_p1 <= reg_432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_346_p1 <= tmp_15_reg_767;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_346_p1 <= reg_484;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_fu_346_p1 <= reg_420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_346_p1 <= reg_522;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_346_p1 <= reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_346_p1 <= reg_490;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_346_p1 <= reg_426;
        else 
            grp_fu_346_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_opcode_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_350_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_350_opcode <= ap_const_lv2_0;
        else 
            grp_fu_350_opcode <= "XX";
        end if; 
    end process;


    grp_fu_350_p0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, reg_432, ap_CS_fsm_state35, reg_451, ap_CS_fsm_state17, reg_496, reg_509, ap_CS_fsm_state34, ap_CS_fsm_state21, imag_sum1_0_reg_276, real_sum1_0_reg_288, imag_sum2_0_reg_300, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_350_p0 <= reg_509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_350_p0 <= reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_350_p0 <= imag_sum1_0_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_350_p0 <= imag_sum2_0_reg_300;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_350_p0 <= real_sum1_0_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_350_p0 <= reg_496;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_350_p0 <= reg_432;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31, reg_426, reg_438, ap_CS_fsm_state35, ap_CS_fsm_state17, reg_490, reg_509, ap_CS_fsm_state34, ap_CS_fsm_state21, reg_528, tmp_40_reg_752, tmp_13_reg_772, ap_CS_fsm_state7, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_350_p1 <= tmp_13_reg_772;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_350_p1 <= reg_490;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_350_p1 <= reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_350_p1 <= reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_350_p1 <= reg_509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_350_p1 <= tmp_40_reg_752;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_350_p1 <= reg_438;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_354_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_354_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_354_opcode <= ap_const_lv2_0;
        else 
            grp_fu_354_opcode <= "XX";
        end if; 
    end process;


    grp_fu_354_p0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state21, tmp_33_reg_742, imag_sum1_0_reg_276)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_354_p0 <= imag_sum1_0_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_354_p0 <= tmp_33_reg_742;
        else 
            grp_fu_354_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_354_p1_assign_proc : process(ap_CS_fsm_state17, reg_516, ap_CS_fsm_state21, tmp_34_reg_747)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_354_p1 <= reg_516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_354_p1 <= tmp_34_reg_747;
        else 
            grp_fu_354_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(reg_393, reg_402, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_458, ap_CS_fsm_state14, ap_CS_fsm_state28, x_load_2_reg_628, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_365_p0 <= x_load_2_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_365_p0 <= reg_402;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_365_p0 <= reg_458;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_365_p0 <= reg_393;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(reg_393, reg_402, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_458, reg_476, ap_CS_fsm_state14, ap_CS_fsm_state28, x_load_2_reg_628, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_365_p1 <= x_load_2_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_365_p1 <= reg_476;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_365_p1 <= reg_458;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_365_p1 <= reg_393;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_365_p1 <= reg_402;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p0_assign_proc : process(reg_393, reg_402, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_467, ap_CS_fsm_state14, ap_CS_fsm_state28, x_load_2_reg_628, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_369_p0 <= reg_402;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_369_p0 <= reg_393;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_369_p0 <= reg_467;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_369_p0 <= x_load_2_reg_628;
        else 
            grp_fu_369_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_369_p1_assign_proc : process(reg_413, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_458, reg_467, reg_476, ap_CS_fsm_state14, ap_CS_fsm_state28, x_load_13_reg_735, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_369_p1 <= reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_369_p1 <= reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_369_p1 <= x_load_13_reg_735;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_369_p1 <= reg_467;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_369_p1 <= reg_413;
        else 
            grp_fu_369_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_p0_assign_proc : process(reg_393, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_458, ap_CS_fsm_state14, x_load_2_reg_628, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_373_p0 <= x_load_2_reg_628;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_373_p0 <= reg_458;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_373_p0 <= reg_393;
        else 
            grp_fu_373_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_373_p1_assign_proc : process(reg_413, ap_CS_fsm_state31, ap_CS_fsm_state29, reg_467, ap_CS_fsm_state14, x_load_13_reg_735, empty_2_reg_266, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_373_p1 <= reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_373_p1 <= x_load_13_reg_735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_373_p1 <= empty_2_reg_266;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_373_p1 <= reg_413;
        else 
            grp_fu_373_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(reg_402, ap_CS_fsm_state29, reg_467, ap_CS_fsm_state14, x_load_2_reg_628, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_377_p0 <= reg_402;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_377_p0 <= reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_377_p0 <= x_load_2_reg_628;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(reg_402, ap_CS_fsm_state29, reg_476, ap_CS_fsm_state14, empty_reg_256, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_377_p1 <= reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_377_p1 <= empty_reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_377_p1 <= reg_402;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_568_p2 <= std_logic_vector(unsigned(i_0_reg_334) + unsigned(ap_const_lv6_1));
    icmp_ln21_fu_534_p2 <= "1" when (i_0_reg_334 = ap_const_lv6_26) else "0";
    or_ln22_fu_553_p2 <= (tmp_42_fu_540_p3 or ap_const_lv7_1);
    or_ln25_fu_593_p2 <= (tmp_44_fu_580_p3 or ap_const_lv7_1);

    phi_address0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            phi_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            phi_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            phi_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            phi_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            phi_address0 <= "XXXX";
        end if; 
    end process;


    phi_address1_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            phi_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            phi_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            phi_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            phi_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        else 
            phi_address1 <= "XXXX";
        end if; 
    end process;


    phi_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            phi_ce0 <= ap_const_logic_1;
        else 
            phi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    phi_ce1_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            phi_ce1 <= ap_const_logic_1;
        else 
            phi_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    phi_d0_assign_proc : process(reg_443, ap_CS_fsm_state38, ap_CS_fsm_state39, reg_451, ap_CS_fsm_state12, real_sum2_0_reg_311, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            phi_d0 <= reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            phi_d0 <= reg_443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            phi_d0 <= real_sum2_0_reg_311;
        else 
            phi_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    phi_d1_assign_proc : process(reg_443, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, imag_sum2_0_reg_300, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            phi_d1 <= reg_443;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            phi_d1 <= imag_sum2_0_reg_300;
        else 
            phi_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    phi_we0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, icmp_ln21_fu_534_p2, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            phi_we0 <= ap_const_logic_1;
        else 
            phi_we0 <= ap_const_logic_0;
        end if; 
    end process;


    phi_we1_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state12, icmp_ln21_fu_534_p2, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            phi_we1 <= ap_const_logic_1;
        else 
            phi_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_42_fu_540_p3 <= (i_0_reg_334 & ap_const_lv1_0);
    tmp_43_fu_559_p3 <= (ap_const_lv57_0 & or_ln22_fu_553_p2);
    tmp_44_fu_580_p3 <= (add_ln25_fu_574_p2 & ap_const_lv1_0);
    tmp_45_fu_599_p3 <= (ap_const_lv57_0 & or_ln25_fu_593_p2);

    x_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state12, icmp_ln21_fu_534_p2, zext_ln22_fu_548_p1, zext_ln25_fu_588_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            x_address0 <= ap_const_lv64_4F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_address0 <= zext_ln25_fu_588_p1(7 - 1 downto 0);
        elsif (((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x_address0 <= ap_const_lv64_4C(7 - 1 downto 0);
        elsif (((icmp_ln21_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x_address0 <= zext_ln22_fu_548_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address0 <= ap_const_lv64_1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXX";
        end if; 
    end process;


    x_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state13, ap_CS_fsm_state12, icmp_ln21_fu_534_p2, tmp_43_fu_559_p3, tmp_45_fu_599_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_address1 <= ap_const_lv64_4D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x_address1 <= ap_const_lv64_4E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_address1 <= tmp_45_fu_599_p3(7 - 1 downto 0);
        elsif (((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif (((icmp_ln21_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x_address1 <= tmp_43_fu_559_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address1 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address1 <= ap_const_lv64_4(7 - 1 downto 0);
        else 
            x_address1 <= "XXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_CS_fsm_state12, icmp_ln21_fu_534_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state13, ap_CS_fsm_state12, icmp_ln21_fu_534_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln21_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln22_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_540_p3),64));
    zext_ln25_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_580_p3),64));
end behav;
