-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_re_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_re_ce0 : OUT STD_LOGIC;
    out_re_we0 : OUT STD_LOGIC;
    out_re_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_re_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_re_ce1 : OUT STD_LOGIC;
    out_re_we1 : OUT STD_LOGIC;
    out_re_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_im_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_im_ce0 : OUT STD_LOGIC;
    out_im_we0 : OUT STD_LOGIC;
    out_im_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_im_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_im_ce1 : OUT STD_LOGIC;
    out_im_we1 : OUT STD_LOGIC;
    out_im_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_re_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_re_ce0 : OUT STD_LOGIC;
    in_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_re_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_re_ce1 : OUT STD_LOGIC;
    in_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_im_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_im_ce0 : OUT STD_LOGIC;
    in_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_im_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_im_ce1 : OUT STD_LOGIC;
    in_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    exptab_re_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    exptab_re_ce0 : OUT STD_LOGIC;
    exptab_re_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    exptab_re_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    exptab_re_ce1 : OUT STD_LOGIC;
    exptab_re_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    exptab_im_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    exptab_im_ce0 : OUT STD_LOGIC;
    exptab_im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    exptab_im_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    exptab_im_ce1 : OUT STD_LOGIC;
    exptab_im_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft5,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=934,HLS_SYN_LUT=1918,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_re_load_1_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_im_load_1_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln22_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln24_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln24_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln25_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln25_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln28_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln28_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_2_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_2_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal exptab_re_load_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal exptab_re_load_1_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal exptab_im_load_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal exptab_im_load_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln37_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln37_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln58_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln58_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln31_1_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_3_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_1_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln34_1_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln35_1_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_1_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln38_1_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_1_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_1_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln44_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_1_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln49_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln43_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln22_reg_669 <= add_ln22_fu_312_p2;
                add_ln23_reg_676 <= add_ln23_fu_317_p2;
                add_ln26_reg_694 <= add_ln26_fu_332_p2;
                add_ln27_reg_701 <= add_ln27_fu_338_p2;
                add_ln32_2_reg_719 <= add_ln32_2_fu_361_p2;
                exptab_im_load_1_reg_748 <= exptab_im_q1;
                exptab_im_load_reg_740 <= exptab_im_q0;
                exptab_re_load_1_reg_732 <= exptab_re_q1;
                exptab_re_load_reg_724 <= exptab_re_q0;
                sub_ln24_reg_682 <= sub_ln24_fu_322_p2;
                sub_ln25_reg_688 <= sub_ln25_fu_327_p2;
                sub_ln28_reg_707 <= sub_ln28_fu_344_p2;
                sub_ln29_reg_713 <= sub_ln29_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln40_reg_792 <= add_ln40_fu_482_p2;
                add_ln41_reg_798 <= add_ln41_fu_496_p2;
                sub_ln34_reg_756 <= sub_ln34_fu_398_p2;
                sub_ln35_reg_762 <= sub_ln35_fu_412_p2;
                sub_ln36_reg_768 <= sub_ln36_fu_426_p2;
                sub_ln37_reg_774 <= sub_ln37_fu_440_p2;
                sub_ln38_reg_780 <= sub_ln38_fu_454_p2;
                sub_ln39_reg_786 <= sub_ln39_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln57_reg_804 <= add_ln57_fu_558_p2;
                add_ln58_reg_809 <= add_ln58_fu_564_p2;
                add_ln59_reg_814 <= add_ln59_fu_570_p2;
                add_ln60_reg_819 <= add_ln60_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                in_im_load_1_reg_622 <= in_im_q1;
                in_re_load_1_reg_616 <= in_re_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_304 <= in_re_q0;
                reg_308 <= in_im_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln22_fu_312_p2 <= std_logic_vector(unsigned(in_re_load_1_reg_616) + unsigned(reg_304));
    add_ln23_fu_317_p2 <= std_logic_vector(unsigned(in_im_load_1_reg_622) + unsigned(reg_308));
    add_ln26_fu_332_p2 <= std_logic_vector(unsigned(in_re_q1) + unsigned(in_re_q0));
    add_ln27_fu_338_p2 <= std_logic_vector(unsigned(in_im_q1) + unsigned(in_im_q0));
    add_ln31_1_fu_372_p2 <= std_logic_vector(unsigned(add_ln31_fu_367_p2) + unsigned(add_ln26_reg_694));
    add_ln31_fu_367_p2 <= std_logic_vector(unsigned(in_re_q0) + unsigned(add_ln22_reg_669));
    add_ln32_1_fu_356_p2 <= std_logic_vector(unsigned(in_im_q1) + unsigned(in_im_load_1_reg_622));
    add_ln32_2_fu_361_p2 <= std_logic_vector(unsigned(add_ln32_1_fu_356_p2) + unsigned(in_im_q0));
    add_ln32_3_fu_384_p2 <= std_logic_vector(unsigned(add_ln32_2_reg_719) + unsigned(add_ln32_fu_378_p2));
    add_ln32_fu_378_p2 <= std_logic_vector(unsigned(reg_308) + unsigned(in_im_q0));
    add_ln40_fu_482_p2 <= std_logic_vector(unsigned(mul_ln40_1_fu_478_p2) + unsigned(mul_ln40_fu_474_p2));
    add_ln41_fu_496_p2 <= std_logic_vector(unsigned(mul_ln41_1_fu_492_p2) + unsigned(mul_ln41_fu_488_p2));
    add_ln53_1_fu_518_p2 <= std_logic_vector(unsigned(add_ln40_reg_792) + unsigned(sub_ln36_reg_768));
    add_ln53_fu_522_p2 <= std_logic_vector(unsigned(add_ln53_1_fu_518_p2) + unsigned(reg_304));
    add_ln54_fu_529_p2 <= std_logic_vector(unsigned(reg_308) + unsigned(sub_ln44_fu_506_p2));
    add_ln55_fu_536_p2 <= std_logic_vector(unsigned(reg_304) + unsigned(sub_ln48_fu_510_p2));
    add_ln56_1_fu_543_p2 <= std_logic_vector(unsigned(sub_ln39_reg_786) + unsigned(sub_ln35_reg_762));
    add_ln56_fu_547_p2 <= std_logic_vector(unsigned(add_ln56_1_fu_543_p2) + unsigned(reg_308));
    add_ln57_1_fu_554_p2 <= std_logic_vector(unsigned(sub_ln38_reg_780) + unsigned(sub_ln34_reg_756));
    add_ln57_fu_558_p2 <= std_logic_vector(unsigned(add_ln57_1_fu_554_p2) + unsigned(reg_304));
    add_ln58_fu_564_p2 <= std_logic_vector(unsigned(reg_308) + unsigned(sub_ln49_fu_514_p2));
    add_ln59_fu_570_p2 <= std_logic_vector(unsigned(reg_304) + unsigned(sub_ln43_fu_502_p2));
    add_ln60_1_fu_576_p2 <= std_logic_vector(unsigned(add_ln41_reg_798) + unsigned(sub_ln37_reg_774));
    add_ln60_fu_580_p2 <= std_logic_vector(unsigned(add_ln60_1_fu_576_p2) + unsigned(reg_308));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exptab_im_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    exptab_im_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    exptab_im_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exptab_im_ce0 <= ap_const_logic_1;
        else 
            exptab_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exptab_im_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exptab_im_ce1 <= ap_const_logic_1;
        else 
            exptab_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exptab_re_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    exptab_re_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    exptab_re_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exptab_re_ce0 <= ap_const_logic_1;
        else 
            exptab_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exptab_re_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            exptab_re_ce1 <= ap_const_logic_1;
        else 
            exptab_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_im_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_im_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_im_address0 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_im_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        else 
            in_im_address0 <= "XXXXXXX";
        end if; 
    end process;


    in_im_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_im_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_im_address1 <= ap_const_lv64_C(7 - 1 downto 0);
        else 
            in_im_address1 <= "XXXXXXX";
        end if; 
    end process;


    in_im_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            in_im_ce0 <= ap_const_logic_1;
        else 
            in_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_im_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            in_im_ce1 <= ap_const_logic_1;
        else 
            in_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_re_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_re_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_re_address0 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_re_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        else 
            in_re_address0 <= "XXXXXXX";
        end if; 
    end process;


    in_re_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_re_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_re_address1 <= ap_const_lv64_C(7 - 1 downto 0);
        else 
            in_re_address1 <= "XXXXXXX";
        end if; 
    end process;


    in_re_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            in_re_ce0 <= ap_const_logic_1;
        else 
            in_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_re_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            in_re_ce1 <= ap_const_logic_1;
        else 
            in_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln34_1_fu_394_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_1_reg_732) * signed(add_ln22_reg_669))), 32));
    mul_ln34_fu_390_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_reg_724) * signed(add_ln26_reg_694))), 32));
    mul_ln35_1_fu_408_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_1_reg_732) * signed(add_ln23_reg_676))), 32));
    mul_ln35_fu_404_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_reg_724) * signed(add_ln27_reg_701))), 32));
    mul_ln36_1_fu_422_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_1_reg_732) * signed(add_ln26_reg_694))), 32));
    mul_ln36_fu_418_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_reg_724) * signed(add_ln22_reg_669))), 32));
    mul_ln37_1_fu_436_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_1_reg_732) * signed(add_ln27_reg_701))), 32));
    mul_ln37_fu_432_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_re_load_reg_724) * signed(add_ln23_reg_676))), 32));
    mul_ln38_1_fu_450_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_1_reg_748) * signed(sub_ln25_reg_688))), 32));
    mul_ln38_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_reg_740) * signed(sub_ln29_reg_713))), 32));
    mul_ln39_1_fu_464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_1_reg_748) * signed(sub_ln24_reg_682))), 32));
    mul_ln39_fu_460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_reg_740) * signed(sub_ln28_reg_707))), 32));
    mul_ln40_1_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_1_reg_748) * signed(sub_ln29_reg_713))), 32));
    mul_ln40_fu_474_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_reg_740) * signed(sub_ln25_reg_688))), 32));
    mul_ln41_1_fu_492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_1_reg_748) * signed(sub_ln28_reg_707))), 32));
    mul_ln41_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(exptab_im_load_reg_740) * signed(sub_ln24_reg_682))), 32));

    out_im_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_im_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_im_address0 <= ap_const_lv64_1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_im_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_im_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_im_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_im_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_im_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        else 
            out_im_address1 <= "XXXXXXX";
        end if; 
    end process;


    out_im_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_im_ce0 <= ap_const_logic_1;
        else 
            out_im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_im_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_im_ce1 <= ap_const_logic_1;
        else 
            out_im_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_im_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln60_reg_819, ap_CS_fsm_state6, add_ln32_3_fu_384_p2, add_ln54_fu_529_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_im_d0 <= add_ln60_reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_im_d0 <= add_ln54_fu_529_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_im_d0 <= add_ln32_3_fu_384_p2;
        else 
            out_im_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_im_d1_assign_proc : process(ap_CS_fsm_state5, add_ln58_reg_809, ap_CS_fsm_state6, add_ln56_fu_547_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_im_d1 <= add_ln58_reg_809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_im_d1 <= add_ln56_fu_547_p2;
        else 
            out_im_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_im_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_im_we0 <= ap_const_logic_1;
        else 
            out_im_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_im_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_im_we1 <= ap_const_logic_1;
        else 
            out_im_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_re_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_re_address0 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_re_address0 <= ap_const_lv64_1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_re_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            out_re_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_re_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_re_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_re_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        else 
            out_re_address1 <= "XXXXXXX";
        end if; 
    end process;


    out_re_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_re_ce0 <= ap_const_logic_1;
        else 
            out_re_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_re_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_re_ce1 <= ap_const_logic_1;
        else 
            out_re_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_re_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln59_reg_814, ap_CS_fsm_state6, add_ln31_1_fu_372_p2, add_ln53_fu_522_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_re_d0 <= add_ln59_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_re_d0 <= add_ln53_fu_522_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_re_d0 <= add_ln31_1_fu_372_p2;
        else 
            out_re_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_re_d1_assign_proc : process(add_ln57_reg_804, ap_CS_fsm_state5, ap_CS_fsm_state6, add_ln55_fu_536_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_re_d1 <= add_ln57_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_re_d1 <= add_ln55_fu_536_p2;
        else 
            out_re_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_re_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_re_we0 <= ap_const_logic_1;
        else 
            out_re_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_re_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_re_we1 <= ap_const_logic_1;
        else 
            out_re_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln24_fu_322_p2 <= std_logic_vector(unsigned(reg_304) - unsigned(in_re_load_1_reg_616));
    sub_ln25_fu_327_p2 <= std_logic_vector(unsigned(reg_308) - unsigned(in_im_load_1_reg_622));
    sub_ln28_fu_344_p2 <= std_logic_vector(unsigned(in_re_q0) - unsigned(in_re_q1));
    sub_ln29_fu_350_p2 <= std_logic_vector(unsigned(in_im_q0) - unsigned(in_im_q1));
    sub_ln34_fu_398_p2 <= std_logic_vector(unsigned(mul_ln34_fu_390_p2) - unsigned(mul_ln34_1_fu_394_p2));
    sub_ln35_fu_412_p2 <= std_logic_vector(unsigned(mul_ln35_fu_404_p2) - unsigned(mul_ln35_1_fu_408_p2));
    sub_ln36_fu_426_p2 <= std_logic_vector(unsigned(mul_ln36_fu_418_p2) - unsigned(mul_ln36_1_fu_422_p2));
    sub_ln37_fu_440_p2 <= std_logic_vector(unsigned(mul_ln37_fu_432_p2) - unsigned(mul_ln37_1_fu_436_p2));
    sub_ln38_fu_454_p2 <= std_logic_vector(unsigned(mul_ln38_fu_446_p2) - unsigned(mul_ln38_1_fu_450_p2));
    sub_ln39_fu_468_p2 <= std_logic_vector(unsigned(mul_ln39_fu_460_p2) - unsigned(mul_ln39_1_fu_464_p2));
    sub_ln43_fu_502_p2 <= std_logic_vector(unsigned(sub_ln36_reg_768) - unsigned(add_ln40_reg_792));
    sub_ln44_fu_506_p2 <= std_logic_vector(unsigned(sub_ln37_reg_774) - unsigned(add_ln41_reg_798));
    sub_ln48_fu_510_p2 <= std_logic_vector(unsigned(sub_ln34_reg_756) - unsigned(sub_ln38_reg_780));
    sub_ln49_fu_514_p2 <= std_logic_vector(unsigned(sub_ln35_reg_762) - unsigned(sub_ln39_reg_786));
end behav;
