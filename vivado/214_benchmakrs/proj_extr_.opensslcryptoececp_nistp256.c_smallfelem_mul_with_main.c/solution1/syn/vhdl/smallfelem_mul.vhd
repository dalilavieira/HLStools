-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity smallfelem_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    small1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    small1_ce0 : OUT STD_LOGIC;
    small1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    small1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    small1_ce1 : OUT STD_LOGIC;
    small1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    small2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    small2_ce0 : OUT STD_LOGIC;
    small2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    small2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    small2_ce1 : OUT STD_LOGIC;
    small2_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of smallfelem_mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "smallfelem_mul,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.747500,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=853,HLS_SYN_LUT=1201,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal small1_load_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal small2_load_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal small2_load_1_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal small1_load_1_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal small2_load_2_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal small1_load_2_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_2_fu_267_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln59_2_reg_802 : STD_LOGIC_VECTOR (1 downto 0);
    signal small2_load_3_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal small1_load_3_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal high_1_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_1_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_3_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_3_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_6_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_6_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_9_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_9_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_1_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_1_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_4_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln83_4_reg_858 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_10_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_10_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_1_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_1_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_5_fu_538_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln101_5_reg_873 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_13_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_13_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_14_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_14_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_3_fu_594_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln113_3_reg_888 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_15_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_15_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln119_1_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln119_1_reg_903 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln101_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln113_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln41_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal high_2_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_239_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_fu_259_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal high_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_5_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln59_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_7_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_8_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_323_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln58_fu_343_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_11_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_12_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_372_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln70_fu_392_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln101_3_fu_518_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln76_fu_412_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_fu_432_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln101_4_fu_528_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln101_1_fu_534_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln101_fu_524_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln94_fu_484_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln100_fu_504_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln113_2_fu_584_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln113_fu_590_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln88_fu_464_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln106_fu_556_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln112_fu_576_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln59_1_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln83_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_3_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_5_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_2_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln101_2_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln101_2_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln113_1_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_1_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_10_reg_863 <= a_10_fu_452_p2;
                a_13_reg_878 <= a_13_fu_544_p2;
                a_14_reg_883 <= a_14_fu_564_p2;
                a_15_reg_893 <= a_15_fu_600_p2;
                a_3_reg_823 <= a_3_fu_291_p2;
                a_4_reg_833 <= a_4_fu_311_p2;
                a_6_reg_843 <= a_6_fu_360_p2;
                a_9_reg_848 <= a_9_fu_420_p2;
                add_ln101_1_reg_868 <= add_ln101_1_fu_512_p2;
                add_ln101_5_reg_873 <= add_ln101_5_fu_538_p2;
                add_ln113_3_reg_888 <= add_ln113_3_fu_594_p2;
                add_ln119_1_reg_903 <= add_ln119_1_fu_612_p2;
                add_ln59_3_reg_838 <= add_ln59_3_fu_354_p2;
                add_ln83_1_reg_853 <= add_ln83_1_fu_440_p2;
                add_ln83_4_reg_858 <= add_ln83_4_fu_446_p2;
                high_1_reg_828 <= high_1_fu_303_p3;
                tmp_15_reg_898 <= a_15_fu_600_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                a_1_reg_776 <= a_1_fu_227_p2;
                a_2_reg_781 <= a_2_fu_247_p2;
                a_reg_766 <= a_fu_215_p2;
                add_ln59_2_reg_802 <= add_ln59_2_fu_267_p2;
                small1_load_2_reg_794 <= small1_q0;
                small1_load_3_reg_815 <= small1_q1;
                small2_load_2_reg_786 <= small2_q0;
                small2_load_3_reg_807 <= small2_q1;
                tmp_reg_771 <= a_fu_215_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln101_reg_908 <= add_ln101_fu_659_p2;
                add_ln113_reg_913 <= add_ln113_fu_672_p2;
                add_ln119_reg_918 <= add_ln119_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                small1_load_1_reg_738 <= small1_q1;
                small1_load_reg_714 <= small1_q0;
                small2_load_1_reg_730 <= small2_q1;
                small2_load_reg_722 <= small2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_10_fu_452_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_1_reg_738) * signed(small2_load_3_reg_807))), 32));
    a_11_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_2_reg_794) * signed(small2_load_2_reg_786))), 32));
    a_12_fu_492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_3_reg_815) * signed(small2_load_1_reg_730))), 32));
    a_13_fu_544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_2_reg_794) * signed(small2_load_3_reg_807))), 32));
    a_14_fu_564_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_3_reg_815) * signed(small2_load_2_reg_786))), 32));
    a_15_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_3_reg_815) * signed(small2_load_3_reg_807))), 32));
    a_1_fu_227_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_reg_714) * signed(small2_load_1_reg_730))), 32));
    a_2_fu_247_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_1_reg_738) * signed(small2_load_reg_722))), 32));
    a_3_fu_291_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_reg_714) * signed(small2_load_2_reg_786))), 32));
    a_4_fu_311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_1_reg_738) * signed(small2_load_1_reg_730))), 32));
    a_5_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_2_reg_794) * signed(small2_load_reg_722))), 32));
    a_6_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_reg_714) * signed(small2_load_3_reg_807))), 32));
    a_7_fu_380_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_1_reg_738) * signed(small2_load_2_reg_786))), 32));
    a_8_fu_400_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_2_reg_794) * signed(small2_load_1_reg_730))), 32));
    a_9_fu_420_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_3_reg_815) * signed(small2_load_reg_722))), 32));
    a_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(small1_load_reg_714) * signed(small2_load_reg_722))), 32));
    add_ln101_1_fu_512_p2 <= std_logic_vector(unsigned(a_11_fu_472_p2) + unsigned(a_12_fu_492_p2));
    add_ln101_2_fu_652_p2 <= std_logic_vector(unsigned(add_ln101_1_reg_868) + unsigned(a_10_reg_863));
    add_ln101_3_fu_518_p2 <= std_logic_vector(unsigned(select_ln64_fu_372_p3) + unsigned(select_ln70_fu_392_p3));
    add_ln101_4_fu_528_p2 <= std_logic_vector(unsigned(select_ln76_fu_412_p3) + unsigned(select_ln82_fu_432_p3));
    add_ln101_5_fu_538_p2 <= std_logic_vector(signed(sext_ln101_1_fu_534_p1) + signed(sext_ln101_fu_524_p1));
    add_ln101_fu_659_p2 <= std_logic_vector(signed(sext_ln101_2_fu_656_p1) + signed(add_ln101_2_fu_652_p2));
    add_ln113_1_fu_665_p2 <= std_logic_vector(unsigned(a_13_reg_878) + unsigned(a_14_reg_883));
    add_ln113_2_fu_584_p2 <= std_logic_vector(unsigned(select_ln94_fu_484_p3) + unsigned(select_ln100_fu_504_p3));
    add_ln113_3_fu_594_p2 <= std_logic_vector(signed(sext_ln113_fu_590_p1) + signed(select_ln88_fu_464_p3));
    add_ln113_fu_672_p2 <= std_logic_vector(signed(sext_ln113_1_fu_669_p1) + signed(add_ln113_1_fu_665_p2));
    add_ln119_1_fu_612_p2 <= std_logic_vector(unsigned(select_ln106_fu_556_p3) + unsigned(select_ln112_fu_576_p3));
    add_ln119_fu_681_p2 <= std_logic_vector(signed(sext_ln119_fu_678_p1) + signed(a_15_reg_893));
    add_ln41_1_fu_280_p2 <= std_logic_vector(unsigned(a_1_reg_776) + unsigned(high_fu_273_p3));
    add_ln41_fu_285_p2 <= std_logic_vector(unsigned(add_ln41_1_fu_280_p2) + unsigned(a_2_reg_781));
    add_ln59_1_fu_618_p2 <= std_logic_vector(unsigned(a_3_reg_823) + unsigned(a_4_reg_833));
    add_ln59_2_fu_267_p2 <= std_logic_vector(unsigned(select_ln34_fu_239_p3) + unsigned(select_ln40_fu_259_p3));
    add_ln59_3_fu_354_p2 <= std_logic_vector(signed(sext_ln59_fu_351_p1) + signed(a_5_fu_331_p2));
    add_ln59_fu_622_p2 <= std_logic_vector(unsigned(add_ln59_3_reg_838) + unsigned(add_ln59_1_fu_618_p2));
    add_ln83_1_fu_440_p2 <= std_logic_vector(unsigned(a_7_fu_380_p2) + unsigned(a_8_fu_400_p2));
    add_ln83_2_fu_628_p2 <= std_logic_vector(unsigned(add_ln83_1_reg_853) + unsigned(a_6_reg_843));
    add_ln83_3_fu_632_p2 <= std_logic_vector(unsigned(a_9_reg_848) + unsigned(high_1_reg_828));
    add_ln83_4_fu_446_p2 <= std_logic_vector(unsigned(select_ln52_fu_323_p3) + unsigned(select_ln58_fu_343_p3));
    add_ln83_5_fu_639_p2 <= std_logic_vector(signed(sext_ln83_fu_636_p1) + signed(add_ln83_3_fu_632_p2));
    add_ln83_fu_645_p2 <= std_logic_vector(unsigned(add_ln83_5_fu_639_p2) + unsigned(add_ln83_2_fu_628_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    high_1_fu_303_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_3_fu_295_p3(0) = '1') else 
        ap_const_lv32_0;
    high_2_fu_686_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_15_reg_898(0) = '1') else 
        ap_const_lv32_0;
    high_fu_273_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_reg_771(0) = '1') else 
        ap_const_lv32_0;

    out_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_address0 <= ap_const_lv64_6(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address0 <= ap_const_lv64_4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_address1 <= ap_const_lv64_7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_address1 <= ap_const_lv64_5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            out_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(a_reg_766, ap_CS_fsm_state4, add_ln101_reg_908, ap_CS_fsm_state5, add_ln119_reg_918, ap_CS_fsm_state6, ap_CS_fsm_state7, add_ln59_fu_622_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_d0 <= add_ln119_reg_918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_d0 <= add_ln101_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_d0 <= add_ln59_fu_622_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_d0 <= a_reg_766;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln113_reg_913, ap_CS_fsm_state6, ap_CS_fsm_state7, add_ln41_fu_285_p2, add_ln83_fu_645_p2, high_2_fu_686_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_r_d1 <= high_2_fu_686_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_d1 <= add_ln113_reg_913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_r_d1 <= add_ln83_fu_645_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_d1 <= add_ln41_fu_285_p2;
        else 
            out_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln100_fu_504_p3 <= 
        ap_const_lv2_3 when (tmp_12_fu_496_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln106_fu_556_p3 <= 
        ap_const_lv2_3 when (tmp_13_fu_548_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln112_fu_576_p3 <= 
        ap_const_lv2_3 when (tmp_14_fu_568_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln34_fu_239_p3 <= 
        ap_const_lv2_3 when (tmp_1_fu_231_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln40_fu_259_p3 <= 
        ap_const_lv2_3 when (tmp_2_fu_251_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln52_fu_323_p3 <= 
        ap_const_lv2_3 when (tmp_4_fu_315_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln58_fu_343_p3 <= 
        ap_const_lv2_3 when (tmp_5_fu_335_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln64_fu_372_p3 <= 
        ap_const_lv2_3 when (tmp_6_fu_364_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln70_fu_392_p3 <= 
        ap_const_lv2_3 when (tmp_7_fu_384_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln76_fu_412_p3 <= 
        ap_const_lv2_3 when (tmp_8_fu_404_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln82_fu_432_p3 <= 
        ap_const_lv2_3 when (tmp_9_fu_424_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln88_fu_464_p3 <= 
        ap_const_lv3_7 when (tmp_10_fu_456_p3(0) = '1') else 
        ap_const_lv3_0;
    select_ln94_fu_484_p3 <= 
        ap_const_lv2_3 when (tmp_11_fu_476_p3(0) = '1') else 
        ap_const_lv2_0;
        sext_ln101_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln101_4_fu_528_p2),3));

        sext_ln101_2_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln101_5_reg_873),32));

        sext_ln101_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln101_3_fu_518_p2),3));

        sext_ln113_1_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln113_3_reg_888),32));

        sext_ln113_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln113_2_fu_584_p2),3));

        sext_ln119_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_1_reg_903),32));

        sext_ln59_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_2_reg_802),32));

        sext_ln83_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln83_4_reg_858),32));


    small1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small1_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            small1_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            small1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    small1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small1_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            small1_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            small1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    small1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            small1_ce0 <= ap_const_logic_1;
        else 
            small1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    small1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            small1_ce1 <= ap_const_logic_1;
        else 
            small1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    small2_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small2_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            small2_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            small2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    small2_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            small2_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            small2_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            small2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    small2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            small2_ce0 <= ap_const_logic_1;
        else 
            small2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    small2_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            small2_ce1 <= ap_const_logic_1;
        else 
            small2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_456_p3 <= a_10_fu_452_p2(31 downto 31);
    tmp_11_fu_476_p3 <= a_11_fu_472_p2(31 downto 31);
    tmp_12_fu_496_p3 <= a_12_fu_492_p2(31 downto 31);
    tmp_13_fu_548_p3 <= a_13_fu_544_p2(31 downto 31);
    tmp_14_fu_568_p3 <= a_14_fu_564_p2(31 downto 31);
    tmp_1_fu_231_p3 <= a_1_fu_227_p2(31 downto 31);
    tmp_2_fu_251_p3 <= a_2_fu_247_p2(31 downto 31);
    tmp_3_fu_295_p3 <= a_3_fu_291_p2(31 downto 31);
    tmp_4_fu_315_p3 <= a_4_fu_311_p2(31 downto 31);
    tmp_5_fu_335_p3 <= a_5_fu_331_p2(31 downto 31);
    tmp_6_fu_364_p3 <= a_6_fu_360_p2(31 downto 31);
    tmp_7_fu_384_p3 <= a_7_fu_380_p2(31 downto 31);
    tmp_8_fu_404_p3 <= a_8_fu_400_p2(31 downto 31);
    tmp_9_fu_424_p3 <= a_9_fu_420_p2(31 downto 31);
end behav;
