

================================================================
== Vivado HLS Report for 'RCC_GetClocksFreq'
================================================================
* Date:           Sat May 23 20:15:02 2020

* Version:        2019.1 (Build 2552052 on Fri May 24 15:28:33 MDT 2019)
* Project:        proj_extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c
* Solution:       solution1
* Product family: kintex7
* Target device:  xc7k160t-fbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     0.000|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    5|    5|    5|    5|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_SYSCLK_Frequency, i32 0)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:55]   --->   Operation 7 'write' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 0.00>
ST_2 : Operation 8 [1/1] (0.00ns)   --->   "%RCC_Clocks_SYSCLK_Fr = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_SYSCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:92]   --->   Operation 8 'read' 'RCC_Clocks_SYSCLK_Fr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 9 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_HCLK_Frequency, i32 %RCC_Clocks_SYSCLK_Fr)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:92]   --->   Operation 9 'write' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 0.00>
ST_3 : Operation 10 [1/1] (0.00ns)   --->   "%RCC_Clocks_HCLK_Freq = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_HCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:99]   --->   Operation 10 'read' 'RCC_Clocks_HCLK_Freq' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 11 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_PCLK_Frequency, i32 %RCC_Clocks_HCLK_Freq)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:99]   --->   Operation 11 'write' <Predicate = true> <Delay = 0.00>

State 4 <SV = 3> <Delay = 0.00>
ST_4 : Operation 12 [1/1] (0.00ns)   --->   "%RCC_Clocks_PCLK_Freq = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_PCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:117]   --->   Operation 12 'read' 'RCC_Clocks_PCLK_Freq' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 13 [1/1] (0.00ns)   --->   "%trunc_ln = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %RCC_Clocks_PCLK_Freq, i32 2, i32 31)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:117]   --->   Operation 13 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 14 [1/1] (0.00ns)   --->   "%sext_ln117 = sext i30 %trunc_ln to i32" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:117]   --->   Operation 14 'sext' 'sext_ln117' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 15 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_ADCCLK_Frequency, i32 %sext_ln117)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:117]   --->   Operation 15 'write' <Predicate = true> <Delay = 0.00>

State 5 <SV = 4> <Delay = 0.00>
ST_5 : Operation 16 [1/1] (0.00ns)   --->   "%RCC_Clocks_PCLK_Freq_1 = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_PCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:150]   --->   Operation 16 'read' 'RCC_Clocks_PCLK_Freq_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 17 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_USART1CLK_Frequency, i32 %RCC_Clocks_PCLK_Freq_1)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:150]   --->   Operation 17 'write' <Predicate = true> <Delay = 0.00>

State 6 <SV = 5> <Delay = 0.00>
ST_6 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_SYSCLK_Frequency), !map !147"   --->   Operation 18 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_HCLK_Frequency), !map !151"   --->   Operation 19 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_PCLK_Frequency), !map !155"   --->   Operation 20 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_ADCCLK_Frequency), !map !159"   --->   Operation 21 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_CECCLK_Frequency), !map !163"   --->   Operation 22 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 23 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_I2C1CLK_Frequency), !map !167"   --->   Operation 23 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 24 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_USART1CLK_Frequency), !map !171"   --->   Operation 24 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 25 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_USART2CLK_Frequency), !map !175"   --->   Operation 25 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 26 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32* %RCC_Clocks_USBCLK_Frequency), !map !179"   --->   Operation 26 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([18 x i8]* @RCC_GetClocksFreq_st) nounwind"   --->   Operation 27 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 28 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_CECCLK_Frequency, i32 0)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:131]   --->   Operation 28 'write' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 29 [1/1] (0.00ns)   --->   "%RCC_Clocks_SYSCLK_Fr_1 = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_SYSCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:143]   --->   Operation 29 'read' 'RCC_Clocks_SYSCLK_Fr_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 30 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_I2C1CLK_Frequency, i32 %RCC_Clocks_SYSCLK_Fr_1)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:143]   --->   Operation 30 'write' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 31 [1/1] (0.00ns)   --->   "%RCC_Clocks_PCLK_Freq_2 = call i32 @_ssdm_op_Read.ap_auto.volatile.i32P(i32* %RCC_Clocks_PCLK_Frequency)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:172]   --->   Operation 31 'read' 'RCC_Clocks_PCLK_Freq_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 32 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_USART2CLK_Frequency, i32 %RCC_Clocks_PCLK_Freq_2)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:172]   --->   Operation 32 'write' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 33 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.volatile.i32P(i32* %RCC_Clocks_USBCLK_Frequency, i32 0)" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:199]   --->   Operation 33 'write' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 34 [1/1] (0.00ns)   --->   "ret void" [extr_.anypixelfirmwaredisplayThirdPartySPLsrcstm32f0xx_rcc.c_RCC_GetClocksFreq_with_main.c:201]   --->   Operation 34 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0ns
The critical path consists of the following:

 <State 2>: 0ns
The critical path consists of the following:

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 0ns
The critical path consists of the following:

 <State 5>: 0ns
The critical path consists of the following:

 <State 6>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
