// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="draw_box,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.792250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=163,HLS_SYN_LUT=555,HLS_VERSION=2019_1}" *)

module draw_box (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_w,
        a_h,
        a_data_address0,
        a_data_ce0,
        a_data_we0,
        a_data_d0,
        a_data_q0,
        a_data_address1,
        a_data_ce1,
        a_data_we1,
        a_data_d1,
        a_data_q1,
        x1,
        y1,
        x2,
        y2,
        r,
        g,
        b
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_w;
input  [31:0] a_h;
output  [16:0] a_data_address0;
output   a_data_ce0;
output   a_data_we0;
output  [31:0] a_data_d0;
input  [31:0] a_data_q0;
output  [16:0] a_data_address1;
output   a_data_ce1;
output   a_data_we1;
output  [31:0] a_data_d1;
input  [31:0] a_data_q1;
input  [31:0] x1;
input  [31:0] y1;
input  [31:0] x2;
input  [31:0] y2;
input  [31:0] r;
input  [31:0] g;
input  [31:0] b;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] i_2_fu_128_p3;
wire   [31:0] select_ln25_fu_166_p3;
reg   [31:0] select_ln25_reg_283;
wire   [31:0] i_fu_210_p3;
reg   [31:0] i_reg_288;
wire   [31:0] select_ln30_fu_248_p3;
reg   [31:0] select_ln30_reg_293;
wire   [31:0] i_3_fu_261_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln32_fu_256_p2;
wire   [31:0] i_4_fu_272_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln42_fu_267_p2;
reg   [31:0] i_0_reg_74;
reg   [31:0] i_1_reg_83;
wire   [0:0] tmp_fu_92_p3;
wire   [30:0] trunc_ln22_fu_100_p1;
wire   [30:0] select_ln22_fu_104_p3;
wire   [31:0] zext_ln22_fu_112_p1;
wire   [0:0] icmp_ln23_fu_116_p2;
wire   [31:0] add_ln23_fu_122_p2;
wire   [0:0] tmp_1_fu_136_p3;
wire   [30:0] trunc_ln24_fu_144_p1;
wire   [30:0] select_ln24_fu_148_p3;
wire   [31:0] zext_ln24_fu_156_p1;
wire   [0:0] icmp_ln25_fu_160_p2;
wire   [0:0] tmp_2_fu_174_p3;
wire   [30:0] trunc_ln27_fu_182_p1;
wire   [30:0] select_ln27_fu_186_p3;
wire   [31:0] zext_ln27_fu_194_p1;
wire   [0:0] icmp_ln28_fu_198_p2;
wire   [31:0] add_ln28_fu_204_p2;
wire   [0:0] tmp_3_fu_218_p3;
wire   [30:0] trunc_ln29_fu_226_p1;
wire   [30:0] select_ln29_fu_230_p3;
wire   [31:0] zext_ln29_fu_238_p1;
wire   [0:0] icmp_ln30_fu_242_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_74 <= i_3_fu_261_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_74 <= i_2_fu_128_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_83 <= i_reg_288;
    end else if (((icmp_ln42_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_83 <= i_4_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_288 <= i_fu_210_p3;
        select_ln25_reg_283 <= select_ln25_fu_166_p3;
        select_ln30_reg_293 <= select_ln30_fu_248_p3;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln32_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln42_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_data_address0 = 17'd0;

assign a_data_address1 = 17'd0;

assign a_data_ce0 = 1'b0;

assign a_data_ce1 = 1'b0;

assign a_data_d0 = 32'd0;

assign a_data_d1 = 32'd0;

assign a_data_we0 = 1'b0;

assign a_data_we1 = 1'b0;

assign add_ln23_fu_122_p2 = ($signed(32'd4294967295) + $signed(a_w));

assign add_ln28_fu_204_p2 = ($signed(32'd4294967295) + $signed(a_h));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_2_fu_128_p3 = ((icmp_ln23_fu_116_p2[0:0] === 1'b1) ? zext_ln22_fu_112_p1 : add_ln23_fu_122_p2);

assign i_3_fu_261_p2 = (i_0_reg_74 + 32'd1);

assign i_4_fu_272_p2 = (i_1_reg_83 + 32'd1);

assign i_fu_210_p3 = ((icmp_ln28_fu_198_p2[0:0] === 1'b1) ? zext_ln27_fu_194_p1 : add_ln28_fu_204_p2);

assign icmp_ln23_fu_116_p2 = (($signed(zext_ln22_fu_112_p1) < $signed(a_w)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_160_p2 = (($signed(zext_ln24_fu_156_p1) < $signed(a_w)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_198_p2 = (($signed(zext_ln27_fu_194_p1) < $signed(a_h)) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_242_p2 = (($signed(zext_ln29_fu_238_p1) < $signed(a_h)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_256_p2 = (($signed(i_0_reg_74) > $signed(select_ln25_reg_283)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_267_p2 = (($signed(i_1_reg_83) > $signed(select_ln30_reg_293)) ? 1'b1 : 1'b0);

assign select_ln22_fu_104_p3 = ((tmp_fu_92_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln22_fu_100_p1);

assign select_ln24_fu_148_p3 = ((tmp_1_fu_136_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln24_fu_144_p1);

assign select_ln25_fu_166_p3 = ((icmp_ln25_fu_160_p2[0:0] === 1'b1) ? zext_ln24_fu_156_p1 : add_ln23_fu_122_p2);

assign select_ln27_fu_186_p3 = ((tmp_2_fu_174_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln27_fu_182_p1);

assign select_ln29_fu_230_p3 = ((tmp_3_fu_218_p3[0:0] === 1'b1) ? 31'd0 : trunc_ln29_fu_226_p1);

assign select_ln30_fu_248_p3 = ((icmp_ln30_fu_242_p2[0:0] === 1'b1) ? zext_ln29_fu_238_p1 : add_ln28_fu_204_p2);

assign tmp_1_fu_136_p3 = x2[32'd31];

assign tmp_2_fu_174_p3 = y1[32'd31];

assign tmp_3_fu_218_p3 = y2[32'd31];

assign tmp_fu_92_p3 = x1[32'd31];

assign trunc_ln22_fu_100_p1 = x1[30:0];

assign trunc_ln24_fu_144_p1 = x2[30:0];

assign trunc_ln27_fu_182_p1 = y1[30:0];

assign trunc_ln29_fu_226_p1 = y2[30:0];

assign zext_ln22_fu_112_p1 = select_ln22_fu_104_p3;

assign zext_ln24_fu_156_p1 = select_ln24_fu_148_p3;

assign zext_ln27_fu_194_p1 = select_ln27_fu_186_p3;

assign zext_ln29_fu_238_p1 = select_ln29_fu_230_p3;

endmodule //draw_box
