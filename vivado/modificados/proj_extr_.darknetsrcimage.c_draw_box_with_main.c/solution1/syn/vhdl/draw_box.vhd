-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity draw_box is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_w : IN STD_LOGIC_VECTOR (31 downto 0);
    a_h : IN STD_LOGIC_VECTOR (31 downto 0);
    a_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    a_data_ce0 : OUT STD_LOGIC;
    a_data_we0 : OUT STD_LOGIC;
    a_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    a_data_ce1 : OUT STD_LOGIC;
    a_data_we1 : OUT STD_LOGIC;
    a_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x2 : IN STD_LOGIC_VECTOR (31 downto 0);
    y2 : IN STD_LOGIC_VECTOR (31 downto 0);
    r : IN STD_LOGIC_VECTOR (31 downto 0);
    g : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of draw_box is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "draw_box,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.792250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=163,HLS_SYN_LUT=555,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln25_fu_166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln25_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_210_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_fu_248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln32_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln42_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_83 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_92_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_fu_100_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln22_fu_104_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln22_fu_112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_144_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln24_fu_148_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln24_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_182_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln27_fu_186_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln27_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln29_fu_226_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln29_fu_230_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln29_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_74 <= i_3_fu_261_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_74 <= i_2_fu_128_p3;
            end if; 
        end if;
    end process;

    i_1_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_83 <= i_reg_288;
            elsif (((icmp_ln42_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_83 <= i_4_fu_272_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_reg_288 <= i_fu_210_p3;
                select_ln25_reg_283 <= select_ln25_fu_166_p3;
                select_ln30_reg_293 <= select_ln30_fu_248_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln32_fu_256_p2, ap_CS_fsm_state3, icmp_ln42_fu_267_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln42_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_data_address0 <= ap_const_lv17_0;
    a_data_address1 <= ap_const_lv17_0;
    a_data_ce0 <= ap_const_logic_0;
    a_data_ce1 <= ap_const_logic_0;
    a_data_d0 <= ap_const_lv32_0;
    a_data_d1 <= ap_const_lv32_0;
    a_data_we0 <= ap_const_logic_0;
    a_data_we1 <= ap_const_logic_0;
    add_ln23_fu_122_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_w));
    add_ln28_fu_204_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_h));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln42_fu_267_p2)
    begin
        if (((icmp_ln42_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln42_fu_267_p2)
    begin
        if (((icmp_ln42_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_128_p3 <= 
        zext_ln22_fu_112_p1 when (icmp_ln23_fu_116_p2(0) = '1') else 
        add_ln23_fu_122_p2;
    i_3_fu_261_p2 <= std_logic_vector(unsigned(i_0_reg_74) + unsigned(ap_const_lv32_1));
    i_4_fu_272_p2 <= std_logic_vector(unsigned(i_1_reg_83) + unsigned(ap_const_lv32_1));
    i_fu_210_p3 <= 
        zext_ln27_fu_194_p1 when (icmp_ln28_fu_198_p2(0) = '1') else 
        add_ln28_fu_204_p2;
    icmp_ln23_fu_116_p2 <= "1" when (signed(zext_ln22_fu_112_p1) < signed(a_w)) else "0";
    icmp_ln25_fu_160_p2 <= "1" when (signed(zext_ln24_fu_156_p1) < signed(a_w)) else "0";
    icmp_ln28_fu_198_p2 <= "1" when (signed(zext_ln27_fu_194_p1) < signed(a_h)) else "0";
    icmp_ln30_fu_242_p2 <= "1" when (signed(zext_ln29_fu_238_p1) < signed(a_h)) else "0";
    icmp_ln32_fu_256_p2 <= "1" when (signed(i_0_reg_74) > signed(select_ln25_reg_283)) else "0";
    icmp_ln42_fu_267_p2 <= "1" when (signed(i_1_reg_83) > signed(select_ln30_reg_293)) else "0";
    select_ln22_fu_104_p3 <= 
        ap_const_lv31_0 when (tmp_fu_92_p3(0) = '1') else 
        trunc_ln22_fu_100_p1;
    select_ln24_fu_148_p3 <= 
        ap_const_lv31_0 when (tmp_1_fu_136_p3(0) = '1') else 
        trunc_ln24_fu_144_p1;
    select_ln25_fu_166_p3 <= 
        zext_ln24_fu_156_p1 when (icmp_ln25_fu_160_p2(0) = '1') else 
        add_ln23_fu_122_p2;
    select_ln27_fu_186_p3 <= 
        ap_const_lv31_0 when (tmp_2_fu_174_p3(0) = '1') else 
        trunc_ln27_fu_182_p1;
    select_ln29_fu_230_p3 <= 
        ap_const_lv31_0 when (tmp_3_fu_218_p3(0) = '1') else 
        trunc_ln29_fu_226_p1;
    select_ln30_fu_248_p3 <= 
        zext_ln29_fu_238_p1 when (icmp_ln30_fu_242_p2(0) = '1') else 
        add_ln28_fu_204_p2;
    tmp_1_fu_136_p3 <= x2(31 downto 31);
    tmp_2_fu_174_p3 <= y1(31 downto 31);
    tmp_3_fu_218_p3 <= y2(31 downto 31);
    tmp_fu_92_p3 <= x1(31 downto 31);
    trunc_ln22_fu_100_p1 <= x1(31 - 1 downto 0);
    trunc_ln24_fu_144_p1 <= x2(31 - 1 downto 0);
    trunc_ln27_fu_182_p1 <= y1(31 - 1 downto 0);
    trunc_ln29_fu_226_p1 <= y2(31 - 1 downto 0);
    zext_ln22_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_104_p3),32));
    zext_ln24_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_148_p3),32));
    zext_ln27_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_fu_186_p3),32));
    zext_ln29_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_fu_230_p3),32));
end behav;
