// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "draw_box.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic draw_box::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic draw_box::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> draw_box::ap_ST_fsm_state1 = "1";
const sc_lv<3> draw_box::ap_ST_fsm_state2 = "10";
const sc_lv<3> draw_box::ap_ST_fsm_state3 = "100";
const sc_lv<32> draw_box::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> draw_box::ap_const_lv32_1 = "1";
const sc_lv<1> draw_box::ap_const_lv1_0 = "0";
const sc_lv<32> draw_box::ap_const_lv32_2 = "10";
const sc_lv<1> draw_box::ap_const_lv1_1 = "1";
const sc_lv<32> draw_box::ap_const_lv32_1F = "11111";
const sc_lv<31> draw_box::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> draw_box::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<17> draw_box::ap_const_lv17_0 = "00000000000000000";
const bool draw_box::ap_const_boolean_1 = true;

draw_box::draw_box(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_data_address0);

    SC_METHOD(thread_a_data_address1);

    SC_METHOD(thread_a_data_ce0);

    SC_METHOD(thread_a_data_ce1);

    SC_METHOD(thread_a_data_d0);

    SC_METHOD(thread_a_data_d1);

    SC_METHOD(thread_a_data_we0);

    SC_METHOD(thread_a_data_we1);

    SC_METHOD(thread_add_ln23_fu_122_p2);
    sensitive << ( a_w );

    SC_METHOD(thread_add_ln28_fu_204_p2);
    sensitive << ( a_h );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln42_fu_267_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln42_fu_267_p2 );

    SC_METHOD(thread_i_2_fu_128_p3);
    sensitive << ( zext_ln22_fu_112_p1 );
    sensitive << ( icmp_ln23_fu_116_p2 );
    sensitive << ( add_ln23_fu_122_p2 );

    SC_METHOD(thread_i_3_fu_261_p2);
    sensitive << ( i_0_reg_74 );

    SC_METHOD(thread_i_4_fu_272_p2);
    sensitive << ( i_1_reg_83 );

    SC_METHOD(thread_i_fu_210_p3);
    sensitive << ( zext_ln27_fu_194_p1 );
    sensitive << ( icmp_ln28_fu_198_p2 );
    sensitive << ( add_ln28_fu_204_p2 );

    SC_METHOD(thread_icmp_ln23_fu_116_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_w );
    sensitive << ( zext_ln22_fu_112_p1 );

    SC_METHOD(thread_icmp_ln25_fu_160_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_w );
    sensitive << ( zext_ln24_fu_156_p1 );

    SC_METHOD(thread_icmp_ln28_fu_198_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_h );
    sensitive << ( zext_ln27_fu_194_p1 );

    SC_METHOD(thread_icmp_ln30_fu_242_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_h );
    sensitive << ( zext_ln29_fu_238_p1 );

    SC_METHOD(thread_icmp_ln32_fu_256_p2);
    sensitive << ( select_ln25_reg_283 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_74 );

    SC_METHOD(thread_icmp_ln42_fu_267_p2);
    sensitive << ( select_ln30_reg_293 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_1_reg_83 );

    SC_METHOD(thread_select_ln22_fu_104_p3);
    sensitive << ( tmp_fu_92_p3 );
    sensitive << ( trunc_ln22_fu_100_p1 );

    SC_METHOD(thread_select_ln24_fu_148_p3);
    sensitive << ( tmp_1_fu_136_p3 );
    sensitive << ( trunc_ln24_fu_144_p1 );

    SC_METHOD(thread_select_ln25_fu_166_p3);
    sensitive << ( add_ln23_fu_122_p2 );
    sensitive << ( zext_ln24_fu_156_p1 );
    sensitive << ( icmp_ln25_fu_160_p2 );

    SC_METHOD(thread_select_ln27_fu_186_p3);
    sensitive << ( tmp_2_fu_174_p3 );
    sensitive << ( trunc_ln27_fu_182_p1 );

    SC_METHOD(thread_select_ln29_fu_230_p3);
    sensitive << ( tmp_3_fu_218_p3 );
    sensitive << ( trunc_ln29_fu_226_p1 );

    SC_METHOD(thread_select_ln30_fu_248_p3);
    sensitive << ( add_ln28_fu_204_p2 );
    sensitive << ( zext_ln29_fu_238_p1 );
    sensitive << ( icmp_ln30_fu_242_p2 );

    SC_METHOD(thread_tmp_1_fu_136_p3);
    sensitive << ( x2 );

    SC_METHOD(thread_tmp_2_fu_174_p3);
    sensitive << ( y1 );

    SC_METHOD(thread_tmp_3_fu_218_p3);
    sensitive << ( y2 );

    SC_METHOD(thread_tmp_fu_92_p3);
    sensitive << ( x1 );

    SC_METHOD(thread_trunc_ln22_fu_100_p1);
    sensitive << ( x1 );

    SC_METHOD(thread_trunc_ln24_fu_144_p1);
    sensitive << ( x2 );

    SC_METHOD(thread_trunc_ln27_fu_182_p1);
    sensitive << ( y1 );

    SC_METHOD(thread_trunc_ln29_fu_226_p1);
    sensitive << ( y2 );

    SC_METHOD(thread_zext_ln22_fu_112_p1);
    sensitive << ( select_ln22_fu_104_p3 );

    SC_METHOD(thread_zext_ln24_fu_156_p1);
    sensitive << ( select_ln24_fu_148_p3 );

    SC_METHOD(thread_zext_ln27_fu_194_p1);
    sensitive << ( select_ln27_fu_186_p3 );

    SC_METHOD(thread_zext_ln29_fu_238_p1);
    sensitive << ( select_ln29_fu_230_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln32_fu_256_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln42_fu_267_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "draw_box_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_w, "(port)a_w");
    sc_trace(mVcdFile, a_h, "(port)a_h");
    sc_trace(mVcdFile, a_data_address0, "(port)a_data_address0");
    sc_trace(mVcdFile, a_data_ce0, "(port)a_data_ce0");
    sc_trace(mVcdFile, a_data_we0, "(port)a_data_we0");
    sc_trace(mVcdFile, a_data_d0, "(port)a_data_d0");
    sc_trace(mVcdFile, a_data_q0, "(port)a_data_q0");
    sc_trace(mVcdFile, a_data_address1, "(port)a_data_address1");
    sc_trace(mVcdFile, a_data_ce1, "(port)a_data_ce1");
    sc_trace(mVcdFile, a_data_we1, "(port)a_data_we1");
    sc_trace(mVcdFile, a_data_d1, "(port)a_data_d1");
    sc_trace(mVcdFile, a_data_q1, "(port)a_data_q1");
    sc_trace(mVcdFile, x1, "(port)x1");
    sc_trace(mVcdFile, y1, "(port)y1");
    sc_trace(mVcdFile, x2, "(port)x2");
    sc_trace(mVcdFile, y2, "(port)y2");
    sc_trace(mVcdFile, r, "(port)r");
    sc_trace(mVcdFile, g, "(port)g");
    sc_trace(mVcdFile, b, "(port)b");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_2_fu_128_p3, "i_2_fu_128_p3");
    sc_trace(mVcdFile, select_ln25_fu_166_p3, "select_ln25_fu_166_p3");
    sc_trace(mVcdFile, select_ln25_reg_283, "select_ln25_reg_283");
    sc_trace(mVcdFile, i_fu_210_p3, "i_fu_210_p3");
    sc_trace(mVcdFile, i_reg_288, "i_reg_288");
    sc_trace(mVcdFile, select_ln30_fu_248_p3, "select_ln30_fu_248_p3");
    sc_trace(mVcdFile, select_ln30_reg_293, "select_ln30_reg_293");
    sc_trace(mVcdFile, i_3_fu_261_p2, "i_3_fu_261_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln32_fu_256_p2, "icmp_ln32_fu_256_p2");
    sc_trace(mVcdFile, i_4_fu_272_p2, "i_4_fu_272_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln42_fu_267_p2, "icmp_ln42_fu_267_p2");
    sc_trace(mVcdFile, i_0_reg_74, "i_0_reg_74");
    sc_trace(mVcdFile, i_1_reg_83, "i_1_reg_83");
    sc_trace(mVcdFile, tmp_fu_92_p3, "tmp_fu_92_p3");
    sc_trace(mVcdFile, trunc_ln22_fu_100_p1, "trunc_ln22_fu_100_p1");
    sc_trace(mVcdFile, select_ln22_fu_104_p3, "select_ln22_fu_104_p3");
    sc_trace(mVcdFile, zext_ln22_fu_112_p1, "zext_ln22_fu_112_p1");
    sc_trace(mVcdFile, icmp_ln23_fu_116_p2, "icmp_ln23_fu_116_p2");
    sc_trace(mVcdFile, add_ln23_fu_122_p2, "add_ln23_fu_122_p2");
    sc_trace(mVcdFile, tmp_1_fu_136_p3, "tmp_1_fu_136_p3");
    sc_trace(mVcdFile, trunc_ln24_fu_144_p1, "trunc_ln24_fu_144_p1");
    sc_trace(mVcdFile, select_ln24_fu_148_p3, "select_ln24_fu_148_p3");
    sc_trace(mVcdFile, zext_ln24_fu_156_p1, "zext_ln24_fu_156_p1");
    sc_trace(mVcdFile, icmp_ln25_fu_160_p2, "icmp_ln25_fu_160_p2");
    sc_trace(mVcdFile, tmp_2_fu_174_p3, "tmp_2_fu_174_p3");
    sc_trace(mVcdFile, trunc_ln27_fu_182_p1, "trunc_ln27_fu_182_p1");
    sc_trace(mVcdFile, select_ln27_fu_186_p3, "select_ln27_fu_186_p3");
    sc_trace(mVcdFile, zext_ln27_fu_194_p1, "zext_ln27_fu_194_p1");
    sc_trace(mVcdFile, icmp_ln28_fu_198_p2, "icmp_ln28_fu_198_p2");
    sc_trace(mVcdFile, add_ln28_fu_204_p2, "add_ln28_fu_204_p2");
    sc_trace(mVcdFile, tmp_3_fu_218_p3, "tmp_3_fu_218_p3");
    sc_trace(mVcdFile, trunc_ln29_fu_226_p1, "trunc_ln29_fu_226_p1");
    sc_trace(mVcdFile, select_ln29_fu_230_p3, "select_ln29_fu_230_p3");
    sc_trace(mVcdFile, zext_ln29_fu_238_p1, "zext_ln29_fu_238_p1");
    sc_trace(mVcdFile, icmp_ln30_fu_242_p2, "icmp_ln30_fu_242_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("draw_box.hdltvin.dat");
    mHdltvoutHandle.open("draw_box.hdltvout.dat");
}

draw_box::~draw_box() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void draw_box::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_fu_256_p2.read(), ap_const_lv1_0))) {
        i_0_reg_74 = i_3_fu_261_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_74 = i_2_fu_128_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_fu_256_p2.read(), ap_const_lv1_1))) {
        i_1_reg_83 = i_reg_288.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_267_p2.read()))) {
        i_1_reg_83 = i_4_fu_272_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_288 = i_fu_210_p3.read();
        select_ln25_reg_283 = select_ln25_fu_166_p3.read();
        select_ln30_reg_293 = select_ln30_fu_248_p3.read();
    }
}

void draw_box::thread_a_data_address0() {
    a_data_address0 = ap_const_lv17_0;
}

void draw_box::thread_a_data_address1() {
    a_data_address1 = ap_const_lv17_0;
}

void draw_box::thread_a_data_ce0() {
    a_data_ce0 = ap_const_logic_0;
}

void draw_box::thread_a_data_ce1() {
    a_data_ce1 = ap_const_logic_0;
}

void draw_box::thread_a_data_d0() {
    a_data_d0 = ap_const_lv32_0;
}

void draw_box::thread_a_data_d1() {
    a_data_d1 = ap_const_lv32_0;
}

void draw_box::thread_a_data_we0() {
    a_data_we0 = ap_const_logic_0;
}

void draw_box::thread_a_data_we1() {
    a_data_we1 = ap_const_logic_0;
}

void draw_box::thread_add_ln23_fu_122_p2() {
    add_ln23_fu_122_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !a_w.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(a_w.read()));
}

void draw_box::thread_add_ln28_fu_204_p2() {
    add_ln28_fu_204_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !a_h.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(a_h.read()));
}

void draw_box::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void draw_box::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void draw_box::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void draw_box::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln42_fu_267_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void draw_box::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void draw_box::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln42_fu_267_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void draw_box::thread_i_2_fu_128_p3() {
    i_2_fu_128_p3 = (!icmp_ln23_fu_116_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln23_fu_116_p2.read()[0].to_bool())? zext_ln22_fu_112_p1.read(): add_ln23_fu_122_p2.read());
}

void draw_box::thread_i_3_fu_261_p2() {
    i_3_fu_261_p2 = (!i_0_reg_74.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_reg_74.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void draw_box::thread_i_4_fu_272_p2() {
    i_4_fu_272_p2 = (!i_1_reg_83.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_1_reg_83.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void draw_box::thread_i_fu_210_p3() {
    i_fu_210_p3 = (!icmp_ln28_fu_198_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln28_fu_198_p2.read()[0].to_bool())? zext_ln27_fu_194_p1.read(): add_ln28_fu_204_p2.read());
}

void draw_box::thread_icmp_ln23_fu_116_p2() {
    icmp_ln23_fu_116_p2 = (!zext_ln22_fu_112_p1.read().is_01() || !a_w.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln22_fu_112_p1.read()) < sc_bigint<32>(a_w.read()));
}

void draw_box::thread_icmp_ln25_fu_160_p2() {
    icmp_ln25_fu_160_p2 = (!zext_ln24_fu_156_p1.read().is_01() || !a_w.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln24_fu_156_p1.read()) < sc_bigint<32>(a_w.read()));
}

void draw_box::thread_icmp_ln28_fu_198_p2() {
    icmp_ln28_fu_198_p2 = (!zext_ln27_fu_194_p1.read().is_01() || !a_h.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln27_fu_194_p1.read()) < sc_bigint<32>(a_h.read()));
}

void draw_box::thread_icmp_ln30_fu_242_p2() {
    icmp_ln30_fu_242_p2 = (!zext_ln29_fu_238_p1.read().is_01() || !a_h.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln29_fu_238_p1.read()) < sc_bigint<32>(a_h.read()));
}

void draw_box::thread_icmp_ln32_fu_256_p2() {
    icmp_ln32_fu_256_p2 = (!i_0_reg_74.read().is_01() || !select_ln25_reg_283.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_reg_74.read()) > sc_bigint<32>(select_ln25_reg_283.read()));
}

void draw_box::thread_icmp_ln42_fu_267_p2() {
    icmp_ln42_fu_267_p2 = (!i_1_reg_83.read().is_01() || !select_ln30_reg_293.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_1_reg_83.read()) > sc_bigint<32>(select_ln30_reg_293.read()));
}

void draw_box::thread_select_ln22_fu_104_p3() {
    select_ln22_fu_104_p3 = (!tmp_fu_92_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_fu_92_p3.read()[0].to_bool())? ap_const_lv31_0: trunc_ln22_fu_100_p1.read());
}

void draw_box::thread_select_ln24_fu_148_p3() {
    select_ln24_fu_148_p3 = (!tmp_1_fu_136_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_1_fu_136_p3.read()[0].to_bool())? ap_const_lv31_0: trunc_ln24_fu_144_p1.read());
}

void draw_box::thread_select_ln25_fu_166_p3() {
    select_ln25_fu_166_p3 = (!icmp_ln25_fu_160_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln25_fu_160_p2.read()[0].to_bool())? zext_ln24_fu_156_p1.read(): add_ln23_fu_122_p2.read());
}

void draw_box::thread_select_ln27_fu_186_p3() {
    select_ln27_fu_186_p3 = (!tmp_2_fu_174_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_2_fu_174_p3.read()[0].to_bool())? ap_const_lv31_0: trunc_ln27_fu_182_p1.read());
}

void draw_box::thread_select_ln29_fu_230_p3() {
    select_ln29_fu_230_p3 = (!tmp_3_fu_218_p3.read()[0].is_01())? sc_lv<31>(): ((tmp_3_fu_218_p3.read()[0].to_bool())? ap_const_lv31_0: trunc_ln29_fu_226_p1.read());
}

void draw_box::thread_select_ln30_fu_248_p3() {
    select_ln30_fu_248_p3 = (!icmp_ln30_fu_242_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln30_fu_242_p2.read()[0].to_bool())? zext_ln29_fu_238_p1.read(): add_ln28_fu_204_p2.read());
}

void draw_box::thread_tmp_1_fu_136_p3() {
    tmp_1_fu_136_p3 = x2.read().range(31, 31);
}

void draw_box::thread_tmp_2_fu_174_p3() {
    tmp_2_fu_174_p3 = y1.read().range(31, 31);
}

void draw_box::thread_tmp_3_fu_218_p3() {
    tmp_3_fu_218_p3 = y2.read().range(31, 31);
}

void draw_box::thread_tmp_fu_92_p3() {
    tmp_fu_92_p3 = x1.read().range(31, 31);
}

void draw_box::thread_trunc_ln22_fu_100_p1() {
    trunc_ln22_fu_100_p1 = x1.read().range(31-1, 0);
}

void draw_box::thread_trunc_ln24_fu_144_p1() {
    trunc_ln24_fu_144_p1 = x2.read().range(31-1, 0);
}

void draw_box::thread_trunc_ln27_fu_182_p1() {
    trunc_ln27_fu_182_p1 = y1.read().range(31-1, 0);
}

void draw_box::thread_trunc_ln29_fu_226_p1() {
    trunc_ln29_fu_226_p1 = y2.read().range(31-1, 0);
}

void draw_box::thread_zext_ln22_fu_112_p1() {
    zext_ln22_fu_112_p1 = esl_zext<32,31>(select_ln22_fu_104_p3.read());
}

void draw_box::thread_zext_ln24_fu_156_p1() {
    zext_ln24_fu_156_p1 = esl_zext<32,31>(select_ln24_fu_148_p3.read());
}

void draw_box::thread_zext_ln27_fu_194_p1() {
    zext_ln27_fu_194_p1 = esl_zext<32,31>(select_ln27_fu_186_p3.read());
}

void draw_box::thread_zext_ln29_fu_238_p1() {
    zext_ln29_fu_238_p1 = esl_zext<32,31>(select_ln29_fu_230_p3.read());
}

void draw_box::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln32_fu_256_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln42_fu_267_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void draw_box::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_w\" :  \"" << a_w.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_h\" :  \"" << a_h.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_address0\" :  \"" << a_data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_ce0\" :  \"" << a_data_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_we0\" :  \"" << a_data_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_d0\" :  \"" << a_data_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_data_q0\" :  \"" << a_data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_address1\" :  \"" << a_data_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_ce1\" :  \"" << a_data_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_we1\" :  \"" << a_data_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_data_d1\" :  \"" << a_data_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_data_q1\" :  \"" << a_data_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x1\" :  \"" << x1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y1\" :  \"" << y1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x2\" :  \"" << x2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y2\" :  \"" << y2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"r\" :  \"" << r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"g\" :  \"" << g.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

