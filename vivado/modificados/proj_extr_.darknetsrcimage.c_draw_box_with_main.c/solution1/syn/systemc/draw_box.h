// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _draw_box_HH_
#define _draw_box_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct draw_box : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > a_w;
    sc_in< sc_lv<32> > a_h;
    sc_out< sc_lv<17> > a_data_address0;
    sc_out< sc_logic > a_data_ce0;
    sc_out< sc_logic > a_data_we0;
    sc_out< sc_lv<32> > a_data_d0;
    sc_in< sc_lv<32> > a_data_q0;
    sc_out< sc_lv<17> > a_data_address1;
    sc_out< sc_logic > a_data_ce1;
    sc_out< sc_logic > a_data_we1;
    sc_out< sc_lv<32> > a_data_d1;
    sc_in< sc_lv<32> > a_data_q1;
    sc_in< sc_lv<32> > x1;
    sc_in< sc_lv<32> > y1;
    sc_in< sc_lv<32> > x2;
    sc_in< sc_lv<32> > y2;
    sc_in< sc_lv<32> > r;
    sc_in< sc_lv<32> > g;
    sc_in< sc_lv<32> > b;


    // Module declarations
    draw_box(sc_module_name name);
    SC_HAS_PROCESS(draw_box);

    ~draw_box();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > i_2_fu_128_p3;
    sc_signal< sc_lv<32> > select_ln25_fu_166_p3;
    sc_signal< sc_lv<32> > select_ln25_reg_283;
    sc_signal< sc_lv<32> > i_fu_210_p3;
    sc_signal< sc_lv<32> > i_reg_288;
    sc_signal< sc_lv<32> > select_ln30_fu_248_p3;
    sc_signal< sc_lv<32> > select_ln30_reg_293;
    sc_signal< sc_lv<32> > i_3_fu_261_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln32_fu_256_p2;
    sc_signal< sc_lv<32> > i_4_fu_272_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln42_fu_267_p2;
    sc_signal< sc_lv<32> > i_0_reg_74;
    sc_signal< sc_lv<32> > i_1_reg_83;
    sc_signal< sc_lv<1> > tmp_fu_92_p3;
    sc_signal< sc_lv<31> > trunc_ln22_fu_100_p1;
    sc_signal< sc_lv<31> > select_ln22_fu_104_p3;
    sc_signal< sc_lv<32> > zext_ln22_fu_112_p1;
    sc_signal< sc_lv<1> > icmp_ln23_fu_116_p2;
    sc_signal< sc_lv<32> > add_ln23_fu_122_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_136_p3;
    sc_signal< sc_lv<31> > trunc_ln24_fu_144_p1;
    sc_signal< sc_lv<31> > select_ln24_fu_148_p3;
    sc_signal< sc_lv<32> > zext_ln24_fu_156_p1;
    sc_signal< sc_lv<1> > icmp_ln25_fu_160_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_174_p3;
    sc_signal< sc_lv<31> > trunc_ln27_fu_182_p1;
    sc_signal< sc_lv<31> > select_ln27_fu_186_p3;
    sc_signal< sc_lv<32> > zext_ln27_fu_194_p1;
    sc_signal< sc_lv<1> > icmp_ln28_fu_198_p2;
    sc_signal< sc_lv<32> > add_ln28_fu_204_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_218_p3;
    sc_signal< sc_lv<31> > trunc_ln29_fu_226_p1;
    sc_signal< sc_lv<31> > select_ln29_fu_230_p3;
    sc_signal< sc_lv<32> > zext_ln29_fu_238_p1;
    sc_signal< sc_lv<1> > icmp_ln30_fu_242_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<17> ap_const_lv17_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_data_address0();
    void thread_a_data_address1();
    void thread_a_data_ce0();
    void thread_a_data_ce1();
    void thread_a_data_d0();
    void thread_a_data_d1();
    void thread_a_data_we0();
    void thread_a_data_we1();
    void thread_add_ln23_fu_122_p2();
    void thread_add_ln28_fu_204_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_2_fu_128_p3();
    void thread_i_3_fu_261_p2();
    void thread_i_4_fu_272_p2();
    void thread_i_fu_210_p3();
    void thread_icmp_ln23_fu_116_p2();
    void thread_icmp_ln25_fu_160_p2();
    void thread_icmp_ln28_fu_198_p2();
    void thread_icmp_ln30_fu_242_p2();
    void thread_icmp_ln32_fu_256_p2();
    void thread_icmp_ln42_fu_267_p2();
    void thread_select_ln22_fu_104_p3();
    void thread_select_ln24_fu_148_p3();
    void thread_select_ln25_fu_166_p3();
    void thread_select_ln27_fu_186_p3();
    void thread_select_ln29_fu_230_p3();
    void thread_select_ln30_fu_248_p3();
    void thread_tmp_1_fu_136_p3();
    void thread_tmp_2_fu_174_p3();
    void thread_tmp_3_fu_218_p3();
    void thread_tmp_fu_92_p3();
    void thread_trunc_ln22_fu_100_p1();
    void thread_trunc_ln24_fu_144_p1();
    void thread_trunc_ln27_fu_182_p1();
    void thread_trunc_ln29_fu_226_p1();
    void thread_zext_ln22_fu_112_p1();
    void thread_zext_ln24_fu_156_p1();
    void thread_zext_ln27_fu_194_p1();
    void thread_zext_ln29_fu_238_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
