// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="make_cube_faces,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.348000,HLS_SYN_LAT=441,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=15,HLS_SYN_FF=2832,HLS_SYN_LUT=4438,HLS_VERSION=2019_1}" *)

module make_cube_faces (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        ao_address0,
        ao_ce0,
        ao_q0,
        ao_address1,
        ao_ce1,
        ao_q1,
        light_address0,
        light_ce0,
        light_q0,
        left_r,
        right_r,
        top,
        bottom,
        front,
        back,
        wleft,
        wright,
        wtop,
        wbottom,
        wfront,
        wback,
        x,
        y,
        z,
        n
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
output  [4:0] ao_address0;
output   ao_ce0;
input  [31:0] ao_q0;
output  [4:0] ao_address1;
output   ao_ce1;
input  [31:0] ao_q1;
output  [4:0] light_address0;
output   light_ce0;
input  [31:0] light_q0;
input  [31:0] left_r;
input  [31:0] right_r;
input  [31:0] top;
input  [31:0] bottom;
input  [31:0] front;
input  [31:0] back;
input  [31:0] wleft;
input  [31:0] wright;
input  [31:0] wtop;
input  [31:0] wbottom;
input  [31:0] wfront;
input  [31:0] wback;
input  [31:0] x;
input  [31:0] y;
input  [31:0] z;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] data_address0;
reg data_ce0;
reg data_we0;
reg[31:0] data_d0;
reg[4:0] ao_address0;
reg ao_ce0;
reg[4:0] ao_address1;
reg ao_ce1;
reg light_ce0;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] normals_0_address0;
reg    normals_0_ce0;
wire   [31:0] normals_0_q0;
wire   [2:0] normals_1_address0;
reg    normals_1_ce0;
wire   [31:0] normals_1_q0;
wire   [2:0] normals_2_address0;
reg    normals_2_ce0;
wire   [31:0] normals_2_q0;
wire   [5:0] flipped_address0;
reg    flipped_ce0;
wire   [31:0] flipped_q0;
wire   [5:0] indices_address0;
reg    indices_ce0;
wire   [31:0] indices_q0;
wire   [6:0] positions_address0;
reg    positions_ce0;
wire   [31:0] positions_q0;
wire   [6:0] positions_address1;
reg    positions_ce1;
wire   [31:0] positions_q1;
wire   [6:0] positions_address2;
reg    positions_ce2;
wire   [31:0] positions_q2;
wire   [5:0] uvs_address0;
reg    uvs_ce0;
wire   [31:0] uvs_q0;
wire   [5:0] uvs_address1;
reg    uvs_ce1;
wire   [31:0] uvs_q1;
wire   [31:0] grp_fu_754_p2;
reg   [31:0] reg_790;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state31;
wire   [31:0] grp_fu_758_p2;
reg   [31:0] reg_796;
wire    ap_CS_fsm_state3;
wire   [2:0] i_fu_812_p2;
reg   [2:0] i_reg_1707;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln61_fu_818_p1;
reg   [63:0] zext_ln61_reg_1712;
wire   [0:0] icmp_ln60_fu_806_p2;
wire   [6:0] sub_ln68_fu_847_p2;
reg   [6:0] sub_ln68_reg_1725;
wire    ap_CS_fsm_state5;
wire   [32:0] zext_ln66_fu_866_p1;
reg   [32:0] zext_ln66_reg_1730;
reg   [4:0] ao_addr_2_reg_1745;
reg   [4:0] ao_addr_3_reg_1750;
wire   [0:0] icmp_ln61_fu_915_p2;
reg   [0:0] icmp_ln61_reg_1755;
wire   [31:0] select_ln64_fu_965_p3;
reg   [31:0] select_ln64_reg_1764;
wire    ap_CS_fsm_state6;
wire   [28:0] select_ln65_fu_1007_p3;
reg   [28:0] select_ln65_reg_1769;
reg   [31:0] ao_load_reg_1774;
reg   [31:0] ao_load_1_reg_1779;
wire    ap_CS_fsm_state7;
reg   [31:0] ao_load_2_reg_1789;
reg   [31:0] ao_load_3_reg_1794;
wire   [31:0] grp_fu_780_p1;
reg   [31:0] tmp_reg_1799;
wire   [31:0] grp_fu_783_p1;
reg   [31:0] tmp_1_reg_1804;
reg   [31:0] tmp_3_reg_1809;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln66_fu_1054_p2;
reg   [0:0] icmp_ln66_reg_1815;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln66_1_fu_1060_p2;
reg   [0:0] icmp_ln66_1_reg_1820;
wire   [0:0] icmp_ln66_2_fu_1066_p2;
reg   [0:0] icmp_ln66_2_reg_1825;
wire   [0:0] icmp_ln66_3_fu_1072_p2;
reg   [0:0] icmp_ln66_3_reg_1830;
wire   [31:0] grp_fu_766_p2;
reg   [31:0] du_reg_1850;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_771_p2;
reg   [31:0] dv_reg_1855;
wire   [0:0] and_ln66_1_fu_1095_p2;
reg   [0:0] and_ln66_1_reg_1860;
reg   [31:0] normals_0_load_reg_1865;
reg   [31:0] normals_1_load_reg_1870;
reg   [31:0] normals_2_load_reg_1875;
wire   [63:0] add_ln67_fu_1101_p2;
reg   [63:0] add_ln67_reg_1880;
wire   [10:0] trunc_ln60_fu_1107_p1;
reg   [10:0] trunc_ln60_reg_1885;
wire   [10:0] add_ln70_fu_1111_p2;
reg   [10:0] add_ln70_reg_1891;
wire   [10:0] add_ln71_fu_1117_p2;
reg   [10:0] add_ln71_reg_1896;
wire   [10:0] add_ln72_fu_1123_p2;
reg   [10:0] add_ln72_reg_1901;
wire   [10:0] add_ln73_fu_1129_p2;
reg   [10:0] add_ln73_reg_1906;
wire   [10:0] add_ln74_fu_1135_p2;
reg   [10:0] add_ln74_reg_1911;
wire   [10:0] add_ln75_fu_1141_p2;
reg   [10:0] add_ln75_reg_1916;
wire   [10:0] add_ln76_fu_1147_p2;
reg   [10:0] add_ln76_reg_1921;
wire   [10:0] add_ln77_fu_1153_p2;
reg   [10:0] add_ln77_reg_1926;
reg   [9:0] data_addr_reg_1931;
wire    ap_CS_fsm_state14;
wire   [2:0] v_fu_1179_p2;
reg   [2:0] v_reg_1939;
wire   [0:0] icmp_ln67_fu_1173_p2;
wire   [10:0] add_ln69_fu_1210_p2;
reg   [10:0] add_ln69_reg_1954;
wire   [10:0] add_ln70_1_fu_1215_p2;
reg   [10:0] add_ln70_1_reg_1959;
wire   [10:0] add_ln71_1_fu_1220_p2;
reg   [10:0] add_ln71_1_reg_1964;
wire   [10:0] add_ln72_1_fu_1225_p2;
reg   [10:0] add_ln72_1_reg_1969;
wire   [10:0] add_ln73_1_fu_1230_p2;
reg   [10:0] add_ln73_1_reg_1974;
wire   [10:0] add_ln74_1_fu_1235_p2;
reg   [10:0] add_ln74_1_reg_1979;
wire   [10:0] add_ln75_1_fu_1240_p2;
reg   [10:0] add_ln75_1_reg_1984;
wire   [10:0] add_ln76_1_fu_1245_p2;
reg   [10:0] add_ln76_1_reg_1989;
wire   [10:0] add_ln77_1_fu_1250_p2;
reg   [10:0] add_ln77_1_reg_1994;
wire   [5:0] add_ln78_fu_1255_p2;
reg   [5:0] add_ln78_reg_1999;
wire   [31:0] select_ln66_fu_1265_p3;
reg   [31:0] select_ln66_reg_2004;
wire    ap_CS_fsm_state15;
wire  signed [32:0] add_ln69_1_fu_1419_p2;
reg  signed [32:0] add_ln69_1_reg_2009;
wire    ap_CS_fsm_state16;
wire   [7:0] trunc_ln69_fu_1424_p1;
reg   [7:0] trunc_ln69_reg_2015;
wire   [5:0] trunc_ln69_1_fu_1428_p1;
reg   [5:0] trunc_ln69_1_reg_2020;
wire    ap_CS_fsm_state17;
reg   [31:0] positions_load_reg_2040;
wire    ap_CS_fsm_state18;
reg   [31:0] positions_load_1_reg_2045;
reg   [31:0] positions_load_2_reg_2050;
reg   [31:0] tmp_5_reg_2055;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_7_reg_2060;
wire   [31:0] grp_fu_776_p2;
reg   [31:0] tmp_9_reg_2065;
wire   [31:0] grp_fu_762_p2;
reg   [31:0] tmp_s_reg_2070;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln75_2_fu_1508_p2;
reg   [0:0] icmp_ln75_2_reg_2085;
wire   [0:0] icmp_ln76_2_fu_1532_p2;
reg   [0:0] icmp_ln76_2_reg_2090;
wire   [0:0] icmp_ln75_fu_1560_p2;
reg   [0:0] icmp_ln75_reg_2095;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln75_1_fu_1566_p2;
reg   [0:0] icmp_ln75_1_reg_2100;
wire   [0:0] icmp_ln76_fu_1590_p2;
reg   [0:0] icmp_ln76_reg_2105;
wire   [0:0] icmp_ln76_1_fu_1596_p2;
reg   [0:0] icmp_ln76_1_reg_2110;
wire   [31:0] select_ln75_fu_1615_p3;
wire    ap_CS_fsm_state28;
wire   [31:0] select_ln76_fu_1633_p3;
wire    ap_CS_fsm_state33;
reg   [31:0] light_load_reg_2135;
wire    ap_CS_fsm_state34;
reg   [2:0] faces_address0;
reg    faces_ce0;
reg    faces_we0;
reg   [31:0] faces_d0;
wire   [31:0] faces_q0;
reg   [2:0] faces_address1;
reg    faces_ce1;
reg    faces_we1;
reg   [31:0] faces_d1;
reg   [2:0] tiles_address0;
reg    tiles_ce0;
reg    tiles_we0;
reg   [31:0] tiles_d0;
wire   [31:0] tiles_q0;
reg   [2:0] tiles_address1;
reg    tiles_ce1;
reg    tiles_we1;
reg   [31:0] tiles_d1;
reg   [2:0] i_0_reg_720;
reg   [5:0] d_1_rec_reg_732;
wire    ap_CS_fsm_state35;
reg   [2:0] v_0_reg_743;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln69_2_fu_861_p1;
wire   [63:0] tmp_19_fu_876_p3;
wire   [63:0] tmp_20_fu_891_p3;
wire   [63:0] tmp_21_fu_906_p3;
wire   [63:0] d_0_idx9_cast_fu_1168_p1;
wire  signed [63:0] sext_ln68_fu_1194_p1;
wire   [63:0] zext_ln69_3_fu_1444_p1;
wire   [63:0] zext_ln70_1_fu_1455_p1;
wire   [63:0] zext_ln71_1_fu_1466_p1;
wire  signed [63:0] sext_ln75_fu_1478_p1;
wire   [63:0] or_ln76_1_fu_1483_p2;
wire   [63:0] zext_ln69_1_fu_1538_p1;
wire   [63:0] zext_ln70_fu_1602_p1;
wire   [63:0] zext_ln71_fu_1642_p1;
wire    ap_CS_fsm_state29;
wire   [63:0] zext_ln72_fu_1646_p1;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln73_fu_1650_p1;
wire   [63:0] zext_ln74_fu_1654_p1;
wire    ap_CS_fsm_state32;
wire  signed [63:0] sext_ln69_1_fu_1658_p1;
wire   [63:0] zext_ln75_fu_1663_p1;
wire   [63:0] zext_ln76_fu_1667_p1;
wire   [63:0] zext_ln77_fu_1671_p1;
reg   [63:0] d_0_idx_fu_196;
reg   [31:0] grp_fu_754_p0;
reg   [31:0] grp_fu_754_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_758_p0;
reg   [31:0] grp_fu_758_p1;
reg   [31:0] grp_fu_766_p0;
reg   [31:0] grp_fu_766_p1;
wire    ap_CS_fsm_state19;
reg   [31:0] grp_fu_771_p0;
reg   [31:0] grp_fu_771_p1;
wire  signed [31:0] grp_fu_783_p0;
wire   [5:0] tmp_16_fu_823_p3;
wire   [3:0] tmp_17_fu_835_p3;
wire   [6:0] zext_ln68_fu_831_p1;
wire   [6:0] zext_ln68_1_fu_843_p1;
wire   [4:0] tmp_18_fu_853_p3;
wire   [4:0] or_ln66_2_fu_870_p2;
wire   [4:0] or_ln66_3_fu_885_p2;
wire   [4:0] or_ln66_4_fu_900_p2;
wire   [3:0] trunc_ln64_fu_929_p1;
wire   [31:0] sub_ln64_fu_941_p2;
wire   [3:0] trunc_ln64_1_fu_947_p1;
wire   [31:0] p_and_t_fu_951_p3;
wire   [0:0] tmp_22_fu_921_p3;
wire   [31:0] sub_ln64_1_fu_959_p2;
wire   [31:0] p_and_f_fu_933_p3;
wire   [27:0] tmp_23_fu_973_p4;
wire   [28:0] zext_ln65_fu_983_p1;
wire   [27:0] tmp_24_fu_993_p4;
wire   [28:0] sub_ln65_fu_987_p2;
wire   [28:0] zext_ln65_1_fu_1003_p1;
wire   [31:0] bitcast_ln66_fu_1019_p1;
wire   [31:0] bitcast_ln66_1_fu_1037_p1;
wire   [7:0] tmp_4_fu_1023_p4;
wire   [22:0] trunc_ln66_fu_1033_p1;
wire   [7:0] tmp_10_fu_1040_p4;
wire   [22:0] trunc_ln66_1_fu_1050_p1;
wire   [0:0] or_ln66_fu_1081_p2;
wire   [0:0] or_ln66_1_fu_1085_p2;
wire   [0:0] and_ln66_fu_1089_p2;
wire   [0:0] grp_fu_786_p2;
wire   [10:0] d_1_rec_cast_fu_1159_p1;
wire   [10:0] d_0_idx9_fu_1163_p2;
wire   [6:0] zext_ln68_2_fu_1185_p1;
wire   [6:0] add_ln68_fu_1189_p2;
wire   [5:0] or_ln69_fu_1200_p2;
wire   [10:0] zext_ln69_fu_1206_p1;
wire   [31:0] p_Val2_s_fu_1272_p1;
wire   [22:0] tmp_V_1_fu_1293_p1;
wire   [24:0] mantissa_V_fu_1297_p4;
wire   [7:0] tmp_V_fu_1283_p4;
wire   [8:0] zext_ln339_fu_1311_p1;
wire   [8:0] add_ln339_fu_1315_p2;
wire   [7:0] sub_ln1311_fu_1329_p2;
wire   [0:0] isNeg_fu_1321_p3;
wire  signed [8:0] sext_ln1311_fu_1335_p1;
wire  signed [8:0] ush_fu_1339_p3;
wire  signed [31:0] sext_ln1311_1_fu_1347_p1;
wire  signed [24:0] sext_ln1311_2_fu_1351_p1;
wire   [78:0] zext_ln682_fu_1307_p1;
wire   [78:0] zext_ln1287_fu_1355_p1;
wire   [24:0] r_V_fu_1359_p2;
wire   [0:0] tmp_27_fu_1371_p3;
wire   [78:0] r_V_1_fu_1365_p2;
wire   [31:0] zext_ln662_fu_1379_p1;
wire   [31:0] tmp_25_fu_1383_p4;
wire   [31:0] p_Val2_4_fu_1393_p3;
wire   [0:0] p_Result_s_fu_1275_p3;
wire   [31:0] result_V_1_fu_1401_p2;
wire   [31:0] select_ln59_fu_1407_p3;
wire  signed [32:0] sext_ln69_fu_1415_p1;
wire   [7:0] p_shl2_cast_fu_1432_p3;
wire   [7:0] sub_ln69_fu_1439_p2;
wire   [7:0] add_ln70_2_fu_1449_p2;
wire   [7:0] add_ln71_2_fu_1460_p2;
wire   [33:0] tmp_28_fu_1471_p3;
wire   [63:0] lshr_ln75_fu_1490_p2;
wire   [0:0] trunc_ln75_1_fu_1496_p1;
wire   [63:0] tmp_26_fu_1500_p3;
wire   [63:0] lshr_ln76_fu_1514_p2;
wire   [0:0] trunc_ln76_1_fu_1520_p1;
wire   [63:0] tmp_29_fu_1524_p3;
wire   [31:0] bitcast_ln75_fu_1542_p1;
wire   [7:0] tmp_14_fu_1546_p4;
wire   [22:0] trunc_ln75_fu_1556_p1;
wire   [31:0] bitcast_ln76_fu_1572_p1;
wire   [7:0] tmp_15_fu_1576_p4;
wire   [22:0] trunc_ln76_fu_1586_p1;
wire   [0:0] or_ln75_fu_1606_p2;
wire   [0:0] and_ln75_fu_1610_p2;
wire   [0:0] or_ln76_fu_1624_p2;
wire   [0:0] and_ln76_fu_1628_p2;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
end

make_cube_faces_normals_0 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
normals_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(normals_0_address0),
    .ce0(normals_0_ce0),
    .q0(normals_0_q0)
);

make_cube_faces_normals_1 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
normals_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(normals_1_address0),
    .ce0(normals_1_ce0),
    .q0(normals_1_q0)
);

make_cube_faces_normals_2 #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
normals_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(normals_2_address0),
    .ce0(normals_2_ce0),
    .q0(normals_2_q0)
);

make_cube_faces_flipped #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
flipped_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(flipped_address0),
    .ce0(flipped_ce0),
    .q0(flipped_q0)
);

make_cube_faces_indices #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
indices_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(indices_address0),
    .ce0(indices_ce0),
    .q0(indices_q0)
);

make_cube_faces_positions #(
    .DataWidth( 32 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
positions_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(positions_address0),
    .ce0(positions_ce0),
    .q0(positions_q0),
    .address1(positions_address1),
    .ce1(positions_ce1),
    .q1(positions_q1),
    .address2(positions_address2),
    .ce2(positions_ce2),
    .q2(positions_q2)
);

make_cube_faces_uvs #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
uvs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(uvs_address0),
    .ce0(uvs_ce0),
    .q0(uvs_q0),
    .address1(uvs_address1),
    .ce1(uvs_ce1),
    .q1(uvs_q1)
);

make_cube_faces_faces #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
faces_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(faces_address0),
    .ce0(faces_ce0),
    .we0(faces_we0),
    .d0(faces_d0),
    .q0(faces_q0),
    .address1(faces_address1),
    .ce1(faces_ce1),
    .we1(faces_we1),
    .d1(faces_d1)
);

make_cube_faces_faces #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
tiles_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tiles_address0),
    .ce0(tiles_ce0),
    .we0(tiles_we0),
    .d0(tiles_d0),
    .q0(tiles_q0),
    .address1(tiles_address1),
    .ce1(tiles_ce1),
    .we1(tiles_we1),
    .d1(tiles_d1)
);

make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_754_p0),
    .din1(grp_fu_754_p1),
    .ce(1'b1),
    .dout(grp_fu_754_p2)
);

make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_758_p0),
    .din1(grp_fu_758_p1),
    .ce(1'b1),
    .dout(grp_fu_758_p2)
);

make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fadd_32ns_32ns_32_4_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_2065),
    .din1(z),
    .ce(1'b1),
    .dout(grp_fu_762_p2)
);

make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_766_p0),
    .din1(grp_fu_766_p1),
    .ce(1'b1),
    .dout(grp_fu_766_p2)
);

make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_771_p0),
    .din1(grp_fu_771_p1),
    .ce(1'b1),
    .dout(grp_fu_771_p2)
);

make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_fmul_32ns_32ns_32_3_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(positions_load_2_reg_2050),
    .din1(n),
    .ce(1'b1),
    .dout(grp_fu_776_p2)
);

make_cube_faces_sitofp_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_sitofp_32ns_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln64_reg_1764),
    .ce(1'b1),
    .dout(grp_fu_780_p1)
);

make_cube_faces_sitofp_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
make_cube_faces_sitofp_32s_32_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_783_p0),
    .ce(1'b1),
    .dout(grp_fu_783_p1)
);

make_cube_faces_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
make_cube_faces_fcmp_32ns_32ns_1_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_790),
    .din1(tmp_3_reg_1809),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_786_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_1173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln61_reg_1755 == 1'd0))) begin
        d_0_idx_fu_196 <= add_ln67_reg_1880;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_0_idx_fu_196 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        d_1_rec_reg_732 <= add_ln78_reg_1999;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        d_1_rec_reg_732 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln67_fu_1173_p2 == 1'd1) | (icmp_ln61_reg_1755 == 1'd1)))) begin
        i_0_reg_720 <= i_reg_1707;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_720 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        v_0_reg_743 <= v_reg_1939;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        v_0_reg_743 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln67_reg_1880 <= add_ln67_fu_1101_p2;
        add_ln70_reg_1891 <= add_ln70_fu_1111_p2;
        add_ln71_reg_1896 <= add_ln71_fu_1117_p2;
        add_ln72_reg_1901 <= add_ln72_fu_1123_p2;
        add_ln73_reg_1906 <= add_ln73_fu_1129_p2;
        add_ln74_reg_1911 <= add_ln74_fu_1135_p2;
        add_ln75_reg_1916 <= add_ln75_fu_1141_p2;
        add_ln76_reg_1921 <= add_ln76_fu_1147_p2;
        add_ln77_reg_1926 <= add_ln77_fu_1153_p2;
        and_ln66_1_reg_1860 <= and_ln66_1_fu_1095_p2;
        du_reg_1850 <= grp_fu_766_p2;
        dv_reg_1855 <= grp_fu_771_p2;
        normals_0_load_reg_1865 <= normals_0_q0;
        normals_1_load_reg_1870 <= normals_1_q0;
        normals_2_load_reg_1875 <= normals_2_q0;
        trunc_ln60_reg_1885 <= trunc_ln60_fu_1107_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln69_1_reg_2009 <= add_ln69_1_fu_1419_p2;
        trunc_ln69_1_reg_2020 <= trunc_ln69_1_fu_1428_p1;
        trunc_ln69_reg_2015 <= trunc_ln69_fu_1424_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln67_fu_1173_p2 == 1'd0) & (icmp_ln61_reg_1755 == 1'd0))) begin
        add_ln69_reg_1954 <= add_ln69_fu_1210_p2;
        add_ln70_1_reg_1959 <= add_ln70_1_fu_1215_p2;
        add_ln71_1_reg_1964 <= add_ln71_1_fu_1220_p2;
        add_ln72_1_reg_1969 <= add_ln72_1_fu_1225_p2;
        add_ln73_1_reg_1974 <= add_ln73_1_fu_1230_p2;
        add_ln74_1_reg_1979 <= add_ln74_1_fu_1235_p2;
        add_ln75_1_reg_1984 <= add_ln75_1_fu_1240_p2;
        add_ln76_1_reg_1989 <= add_ln76_1_fu_1245_p2;
        add_ln77_1_reg_1994 <= add_ln77_1_fu_1250_p2;
        add_ln78_reg_1999 <= add_ln78_fu_1255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ao_addr_2_reg_1745[4 : 2] <= tmp_20_fu_891_p3[4 : 2];
        ao_addr_3_reg_1750[4 : 2] <= tmp_21_fu_906_p3[4 : 2];
        icmp_ln61_reg_1755 <= icmp_ln61_fu_915_p2;
        sub_ln68_reg_1725[6 : 1] <= sub_ln68_fu_847_p2[6 : 1];
        zext_ln66_reg_1730[4 : 2] <= zext_ln66_fu_866_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ao_load_1_reg_1779 <= ao_q1;
        ao_load_reg_1774 <= ao_q0;
        select_ln64_reg_1764 <= select_ln64_fu_965_p3;
        select_ln65_reg_1769 <= select_ln65_fu_1007_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ao_load_2_reg_1789 <= ao_q0;
        ao_load_3_reg_1794 <= ao_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln61_reg_1755 == 1'd0))) begin
        data_addr_reg_1931 <= d_0_idx9_cast_fu_1168_p1;
        v_reg_1939 <= v_fu_1179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_1707 <= i_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln66_1_reg_1820 <= icmp_ln66_1_fu_1060_p2;
        icmp_ln66_2_reg_1825 <= icmp_ln66_2_fu_1066_p2;
        icmp_ln66_3_reg_1830 <= icmp_ln66_3_fu_1072_p2;
        icmp_ln66_reg_1815 <= icmp_ln66_fu_1054_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln75_1_reg_2100 <= icmp_ln75_1_fu_1566_p2;
        icmp_ln75_reg_2095 <= icmp_ln75_fu_1560_p2;
        icmp_ln76_1_reg_2110 <= icmp_ln76_1_fu_1596_p2;
        icmp_ln76_reg_2105 <= icmp_ln76_fu_1590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        icmp_ln75_2_reg_2085 <= icmp_ln75_2_fu_1508_p2;
        icmp_ln76_2_reg_2090 <= icmp_ln76_2_fu_1532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        light_load_reg_2135 <= light_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        positions_load_1_reg_2045 <= positions_q1;
        positions_load_2_reg_2050 <= positions_q2;
        positions_load_reg_2040 <= positions_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_790 <= grp_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_796 <= grp_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        select_ln66_reg_2004 <= select_ln66_fu_1265_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_1_reg_1804 <= grp_fu_783_p1;
        tmp_reg_1799 <= grp_fu_780_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_3_reg_1809 <= grp_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_5_reg_2055 <= grp_fu_766_p2;
        tmp_7_reg_2060 <= grp_fu_771_p2;
        tmp_9_reg_2065 <= grp_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_s_reg_2070 <= grp_fu_762_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_806_p2 == 1'd0))) begin
        zext_ln61_reg_1712[2 : 0] <= zext_ln61_fu_818_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ao_address0 = sext_ln69_1_fu_1658_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ao_address0 = ao_addr_2_reg_1745;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ao_address0 = zext_ln69_2_fu_861_p1;
    end else begin
        ao_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ao_address1 = ao_addr_3_reg_1750;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ao_address1 = tmp_19_fu_876_p3;
    end else begin
        ao_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        ao_ce0 = 1'b1;
    end else begin
        ao_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        ao_ce1 = 1'b1;
    end else begin
        ao_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_806_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_806_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        data_address0 = zext_ln77_fu_1671_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        data_address0 = zext_ln76_fu_1667_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        data_address0 = zext_ln75_fu_1663_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        data_address0 = zext_ln74_fu_1654_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        data_address0 = zext_ln73_fu_1650_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        data_address0 = zext_ln72_fu_1646_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        data_address0 = zext_ln71_fu_1642_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        data_address0 = zext_ln70_fu_1602_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        data_address0 = zext_ln69_1_fu_1538_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        data_address0 = data_addr_reg_1931;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state31))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        data_d0 = light_load_reg_2135;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        data_d0 = ao_q0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        data_d0 = normals_2_load_reg_1875;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        data_d0 = normals_1_load_reg_1870;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        data_d0 = normals_0_load_reg_1865;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        data_d0 = tmp_s_reg_2070;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27))) begin
        data_d0 = reg_796;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26))) begin
        data_d0 = reg_790;
    end else begin
        data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state31))) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        faces_address0 = zext_ln61_fu_818_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        faces_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        faces_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faces_address0 = 64'd0;
    end else begin
        faces_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        faces_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        faces_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faces_address1 = 64'd1;
    end else begin
        faces_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faces_ce0 = 1'b1;
    end else begin
        faces_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faces_ce1 = 1'b1;
    end else begin
        faces_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        faces_d0 = front;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        faces_d0 = top;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faces_d0 = left_r;
    end else begin
        faces_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        faces_d1 = back;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        faces_d1 = bottom;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        faces_d1 = right_r;
    end else begin
        faces_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faces_we0 = 1'b1;
    end else begin
        faces_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        faces_we1 = 1'b1;
    end else begin
        faces_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        flipped_ce0 = 1'b1;
    end else begin
        flipped_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_754_p0 = du_reg_1850;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_754_p0 = tmp_5_reg_2055;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_754_p0 = ao_load_2_reg_1789;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_754_p0 = ao_load_reg_1774;
    end else begin
        grp_fu_754_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_754_p1 = select_ln75_fu_1615_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_754_p1 = x;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_754_p1 = ao_load_3_reg_1794;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_754_p1 = ao_load_1_reg_1779;
    end else begin
        grp_fu_754_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_758_p0 = dv_reg_1855;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_758_p0 = tmp_7_reg_2060;
    end else begin
        grp_fu_758_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_758_p1 = select_ln76_fu_1633_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_758_p1 = y;
    end else begin
        grp_fu_758_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_766_p0 = positions_load_reg_2040;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_766_p0 = tmp_reg_1799;
    end else begin
        grp_fu_766_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_766_p1 = n;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_766_p1 = 32'd1031798784;
    end else begin
        grp_fu_766_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_771_p0 = positions_load_1_reg_2045;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_771_p0 = tmp_1_reg_1804;
    end else begin
        grp_fu_771_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_771_p1 = n;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_771_p1 = 32'd1031798784;
    end else begin
        grp_fu_771_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        indices_ce0 = 1'b1;
    end else begin
        indices_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        light_ce0 = 1'b1;
    end else begin
        light_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        normals_0_ce0 = 1'b1;
    end else begin
        normals_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        normals_1_ce0 = 1'b1;
    end else begin
        normals_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        normals_2_ce0 = 1'b1;
    end else begin
        normals_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        positions_ce0 = 1'b1;
    end else begin
        positions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        positions_ce1 = 1'b1;
    end else begin
        positions_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        positions_ce2 = 1'b1;
    end else begin
        positions_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tiles_address0 = zext_ln61_reg_1712;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tiles_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiles_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tiles_address0 = 64'd0;
    end else begin
        tiles_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tiles_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiles_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tiles_address1 = 64'd1;
    end else begin
        tiles_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tiles_ce0 = 1'b1;
    end else begin
        tiles_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tiles_ce1 = 1'b1;
    end else begin
        tiles_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tiles_d0 = wfront;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiles_d0 = wtop;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tiles_d0 = wleft;
    end else begin
        tiles_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tiles_d1 = wback;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tiles_d1 = wbottom;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tiles_d1 = wright;
    end else begin
        tiles_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tiles_we0 = 1'b1;
    end else begin
        tiles_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        tiles_we1 = 1'b1;
    end else begin
        tiles_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        uvs_ce0 = 1'b1;
    end else begin
        uvs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        uvs_ce1 = 1'b1;
    end else begin
        uvs_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_806_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln61_fu_915_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln67_fu_1173_p2 == 1'd1) | (icmp_ln61_reg_1755 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln339_fu_1315_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_1311_p1));

assign add_ln67_fu_1101_p2 = (64'd60 + d_0_idx_fu_196);

assign add_ln68_fu_1189_p2 = (sub_ln68_reg_1725 + zext_ln68_2_fu_1185_p1);

assign add_ln69_1_fu_1419_p2 = ($signed(zext_ln66_reg_1730) + $signed(sext_ln69_fu_1415_p1));

assign add_ln69_fu_1210_p2 = (zext_ln69_fu_1206_p1 + trunc_ln60_reg_1885);

assign add_ln70_1_fu_1215_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln70_reg_1891);

assign add_ln70_2_fu_1449_p2 = (8'd1 + sub_ln69_fu_1439_p2);

assign add_ln70_fu_1111_p2 = (11'd2 + trunc_ln60_fu_1107_p1);

assign add_ln71_1_fu_1220_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln71_reg_1896);

assign add_ln71_2_fu_1460_p2 = (8'd2 + sub_ln69_fu_1439_p2);

assign add_ln71_fu_1117_p2 = (11'd3 + trunc_ln60_fu_1107_p1);

assign add_ln72_1_fu_1225_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln72_reg_1901);

assign add_ln72_fu_1123_p2 = (11'd4 + trunc_ln60_fu_1107_p1);

assign add_ln73_1_fu_1230_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln73_reg_1906);

assign add_ln73_fu_1129_p2 = (11'd5 + trunc_ln60_fu_1107_p1);

assign add_ln74_1_fu_1235_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln74_reg_1911);

assign add_ln74_fu_1135_p2 = (11'd6 + trunc_ln60_fu_1107_p1);

assign add_ln75_1_fu_1240_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln75_reg_1916);

assign add_ln75_fu_1141_p2 = (11'd7 + trunc_ln60_fu_1107_p1);

assign add_ln76_1_fu_1245_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln76_reg_1921);

assign add_ln76_fu_1147_p2 = (11'd8 + trunc_ln60_fu_1107_p1);

assign add_ln77_1_fu_1250_p2 = (d_1_rec_cast_fu_1159_p1 + add_ln77_reg_1926);

assign add_ln77_fu_1153_p2 = (11'd9 + trunc_ln60_fu_1107_p1);

assign add_ln78_fu_1255_p2 = (6'd10 + d_1_rec_reg_732);

assign and_ln66_1_fu_1095_p2 = (grp_fu_786_p2 & and_ln66_fu_1089_p2);

assign and_ln66_fu_1089_p2 = (or_ln66_fu_1081_p2 & or_ln66_1_fu_1085_p2);

assign and_ln75_fu_1610_p2 = (or_ln75_fu_1606_p2 & icmp_ln75_2_reg_2085);

assign and_ln76_fu_1628_p2 = (or_ln76_fu_1624_p2 & icmp_ln76_2_reg_2090);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln66_1_fu_1037_p1 = tmp_3_reg_1809;

assign bitcast_ln66_fu_1019_p1 = reg_790;

assign bitcast_ln75_fu_1542_p1 = uvs_q0;

assign bitcast_ln76_fu_1572_p1 = uvs_q1;

assign d_0_idx9_cast_fu_1168_p1 = d_0_idx9_fu_1163_p2;

assign d_0_idx9_fu_1163_p2 = (trunc_ln60_reg_1885 + d_1_rec_cast_fu_1159_p1);

assign d_1_rec_cast_fu_1159_p1 = d_1_rec_reg_732;

assign flipped_address0 = sext_ln68_fu_1194_p1;

assign grp_fu_783_p0 = $signed(select_ln65_reg_1769);

assign i_fu_812_p2 = (i_0_reg_720 + 3'd1);

assign icmp_ln60_fu_806_p2 = ((i_0_reg_720 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_915_p2 = ((faces_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_1060_p2 = ((trunc_ln66_fu_1033_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_2_fu_1066_p2 = ((tmp_10_fu_1040_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_3_fu_1072_p2 = ((trunc_ln66_1_fu_1050_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1054_p2 = ((tmp_4_fu_1023_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1173_p2 = ((v_0_reg_743 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_1566_p2 = ((trunc_ln75_fu_1556_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_2_fu_1508_p2 = ((tmp_26_fu_1500_p3 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1560_p2 = ((tmp_14_fu_1546_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_1596_p2 = ((trunc_ln76_fu_1586_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln76_2_fu_1532_p2 = ((tmp_29_fu_1524_p3 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1590_p2 = ((tmp_15_fu_1576_p4 != 8'd255) ? 1'b1 : 1'b0);

assign indices_address0 = sext_ln68_fu_1194_p1;

assign isNeg_fu_1321_p3 = add_ln339_fu_1315_p2[32'd8];

assign light_address0 = sext_ln69_1_fu_1658_p1;

assign lshr_ln75_fu_1490_p2 = 64'd125512492863003 >> sext_ln75_fu_1478_p1;

assign lshr_ln76_fu_1514_p2 = 64'd125512492863003 >> or_ln76_1_fu_1483_p2;

assign mantissa_V_fu_1297_p4 = {{{{1'd1}, {tmp_V_1_fu_1293_p1}}}, {1'd0}};

assign normals_0_address0 = zext_ln61_reg_1712;

assign normals_1_address0 = zext_ln61_reg_1712;

assign normals_2_address0 = zext_ln61_reg_1712;

assign or_ln66_1_fu_1085_p2 = (icmp_ln66_3_reg_1830 | icmp_ln66_2_reg_1825);

assign or_ln66_2_fu_870_p2 = (tmp_18_fu_853_p3 | 5'd3);

assign or_ln66_3_fu_885_p2 = (tmp_18_fu_853_p3 | 5'd1);

assign or_ln66_4_fu_900_p2 = (tmp_18_fu_853_p3 | 5'd2);

assign or_ln66_fu_1081_p2 = (icmp_ln66_reg_1815 | icmp_ln66_1_reg_1820);

assign or_ln69_fu_1200_p2 = (d_1_rec_reg_732 | 6'd1);

assign or_ln75_fu_1606_p2 = (icmp_ln75_reg_2095 | icmp_ln75_1_reg_2100);

assign or_ln76_1_fu_1483_p2 = (sext_ln75_fu_1478_p1 | 64'd1);

assign or_ln76_fu_1624_p2 = (icmp_ln76_reg_2105 | icmp_ln76_1_reg_2110);

assign p_Result_s_fu_1275_p3 = p_Val2_s_fu_1272_p1[32'd31];

assign p_Val2_4_fu_1393_p3 = ((isNeg_fu_1321_p3[0:0] === 1'b1) ? zext_ln662_fu_1379_p1 : tmp_25_fu_1383_p4);

assign p_Val2_s_fu_1272_p1 = select_ln66_reg_2004;

assign p_and_f_fu_933_p3 = {{28'd0}, {trunc_ln64_fu_929_p1}};

assign p_and_t_fu_951_p3 = {{28'd0}, {trunc_ln64_1_fu_947_p1}};

assign p_shl2_cast_fu_1432_p3 = {{trunc_ln69_1_reg_2020}, {2'd0}};

assign positions_address0 = zext_ln69_3_fu_1444_p1;

assign positions_address1 = zext_ln70_1_fu_1455_p1;

assign positions_address2 = zext_ln71_1_fu_1466_p1;

assign r_V_1_fu_1365_p2 = zext_ln682_fu_1307_p1 << zext_ln1287_fu_1355_p1;

assign r_V_fu_1359_p2 = mantissa_V_fu_1297_p4 >> sext_ln1311_2_fu_1351_p1;

assign result_V_1_fu_1401_p2 = (32'd0 - p_Val2_4_fu_1393_p3);

assign select_ln59_fu_1407_p3 = ((p_Result_s_fu_1275_p3[0:0] === 1'b1) ? result_V_1_fu_1401_p2 : p_Val2_4_fu_1393_p3);

assign select_ln64_fu_965_p3 = ((tmp_22_fu_921_p3[0:0] === 1'b1) ? sub_ln64_1_fu_959_p2 : p_and_f_fu_933_p3);

assign select_ln65_fu_1007_p3 = ((tmp_22_fu_921_p3[0:0] === 1'b1) ? sub_ln65_fu_987_p2 : zext_ln65_1_fu_1003_p1);

assign select_ln66_fu_1265_p3 = ((and_ln66_1_reg_1860[0:0] === 1'b1) ? flipped_q0 : indices_q0);

assign select_ln75_fu_1615_p3 = ((and_ln75_fu_1610_p2[0:0] === 1'b1) ? 32'd973078528 : 32'd1031667712);

assign select_ln76_fu_1633_p3 = ((and_ln76_fu_1628_p2[0:0] === 1'b1) ? 32'd973078528 : 32'd1031667712);

assign sext_ln1311_1_fu_1347_p1 = ush_fu_1339_p3;

assign sext_ln1311_2_fu_1351_p1 = ush_fu_1339_p3;

assign sext_ln1311_fu_1335_p1 = $signed(sub_ln1311_fu_1329_p2);

assign sext_ln68_fu_1194_p1 = $signed(add_ln68_fu_1189_p2);

assign sext_ln69_1_fu_1658_p1 = add_ln69_1_reg_2009;

assign sext_ln69_fu_1415_p1 = $signed(select_ln59_fu_1407_p3);

assign sext_ln75_fu_1478_p1 = $signed(tmp_28_fu_1471_p3);

assign sub_ln1311_fu_1329_p2 = (8'd127 - tmp_V_fu_1283_p4);

assign sub_ln64_1_fu_959_p2 = (32'd0 - p_and_t_fu_951_p3);

assign sub_ln64_fu_941_p2 = (32'd0 - tiles_q0);

assign sub_ln65_fu_987_p2 = (29'd0 - zext_ln65_fu_983_p1);

assign sub_ln68_fu_847_p2 = (zext_ln68_fu_831_p1 - zext_ln68_1_fu_843_p1);

assign sub_ln69_fu_1439_p2 = (p_shl2_cast_fu_1432_p3 - trunc_ln69_reg_2015);

assign tmp_10_fu_1040_p4 = {{bitcast_ln66_1_fu_1037_p1[30:23]}};

assign tmp_14_fu_1546_p4 = {{bitcast_ln75_fu_1542_p1[30:23]}};

assign tmp_15_fu_1576_p4 = {{bitcast_ln76_fu_1572_p1[30:23]}};

assign tmp_16_fu_823_p3 = {{i_0_reg_720}, {3'd0}};

assign tmp_17_fu_835_p3 = {{i_0_reg_720}, {1'd0}};

assign tmp_18_fu_853_p3 = {{i_0_reg_720}, {2'd0}};

assign tmp_19_fu_876_p3 = {{59'd0}, {or_ln66_2_fu_870_p2}};

assign tmp_20_fu_891_p3 = {{59'd0}, {or_ln66_3_fu_885_p2}};

assign tmp_21_fu_906_p3 = {{59'd0}, {or_ln66_4_fu_900_p2}};

assign tmp_22_fu_921_p3 = tiles_q0[32'd31];

assign tmp_23_fu_973_p4 = {{sub_ln64_fu_941_p2[31:4]}};

assign tmp_24_fu_993_p4 = {{tiles_q0[31:4]}};

assign tmp_25_fu_1383_p4 = {{r_V_1_fu_1365_p2[55:24]}};

assign tmp_26_fu_1500_p3 = {{63'd0}, {trunc_ln75_1_fu_1496_p1}};

assign tmp_27_fu_1371_p3 = r_V_fu_1359_p2[32'd24];

assign tmp_28_fu_1471_p3 = {{add_ln69_1_reg_2009}, {1'd0}};

assign tmp_29_fu_1524_p3 = {{63'd0}, {trunc_ln76_1_fu_1520_p1}};

assign tmp_4_fu_1023_p4 = {{bitcast_ln66_fu_1019_p1[30:23]}};

assign tmp_V_1_fu_1293_p1 = p_Val2_s_fu_1272_p1[22:0];

assign tmp_V_fu_1283_p4 = {{p_Val2_s_fu_1272_p1[30:23]}};

assign trunc_ln60_fu_1107_p1 = d_0_idx_fu_196[10:0];

assign trunc_ln64_1_fu_947_p1 = sub_ln64_fu_941_p2[3:0];

assign trunc_ln64_fu_929_p1 = tiles_q0[3:0];

assign trunc_ln66_1_fu_1050_p1 = bitcast_ln66_1_fu_1037_p1[22:0];

assign trunc_ln66_fu_1033_p1 = bitcast_ln66_fu_1019_p1[22:0];

assign trunc_ln69_1_fu_1428_p1 = add_ln69_1_fu_1419_p2[5:0];

assign trunc_ln69_fu_1424_p1 = add_ln69_1_fu_1419_p2[7:0];

assign trunc_ln75_1_fu_1496_p1 = lshr_ln75_fu_1490_p2[0:0];

assign trunc_ln75_fu_1556_p1 = bitcast_ln75_fu_1542_p1[22:0];

assign trunc_ln76_1_fu_1520_p1 = lshr_ln76_fu_1514_p2[0:0];

assign trunc_ln76_fu_1586_p1 = bitcast_ln76_fu_1572_p1[22:0];

assign ush_fu_1339_p3 = ((isNeg_fu_1321_p3[0:0] === 1'b1) ? sext_ln1311_fu_1335_p1 : add_ln339_fu_1315_p2);

assign uvs_address0 = sext_ln75_fu_1478_p1;

assign uvs_address1 = or_ln76_1_fu_1483_p2;

assign v_fu_1179_p2 = (v_0_reg_743 + 3'd1);

assign zext_ln1287_fu_1355_p1 = $unsigned(sext_ln1311_1_fu_1347_p1);

assign zext_ln339_fu_1311_p1 = tmp_V_fu_1283_p4;

assign zext_ln61_fu_818_p1 = i_0_reg_720;

assign zext_ln65_1_fu_1003_p1 = tmp_24_fu_993_p4;

assign zext_ln65_fu_983_p1 = tmp_23_fu_973_p4;

assign zext_ln662_fu_1379_p1 = tmp_27_fu_1371_p3;

assign zext_ln66_fu_866_p1 = tmp_18_fu_853_p3;

assign zext_ln682_fu_1307_p1 = mantissa_V_fu_1297_p4;

assign zext_ln68_1_fu_843_p1 = tmp_17_fu_835_p3;

assign zext_ln68_2_fu_1185_p1 = v_0_reg_743;

assign zext_ln68_fu_831_p1 = tmp_16_fu_823_p3;

assign zext_ln69_1_fu_1538_p1 = add_ln69_reg_1954;

assign zext_ln69_2_fu_861_p1 = tmp_18_fu_853_p3;

assign zext_ln69_3_fu_1444_p1 = sub_ln69_fu_1439_p2;

assign zext_ln69_fu_1206_p1 = or_ln69_fu_1200_p2;

assign zext_ln70_1_fu_1455_p1 = add_ln70_2_fu_1449_p2;

assign zext_ln70_fu_1602_p1 = add_ln70_1_reg_1959;

assign zext_ln71_1_fu_1466_p1 = add_ln71_2_fu_1460_p2;

assign zext_ln71_fu_1642_p1 = add_ln71_1_reg_1964;

assign zext_ln72_fu_1646_p1 = add_ln72_1_reg_1969;

assign zext_ln73_fu_1650_p1 = add_ln73_1_reg_1974;

assign zext_ln74_fu_1654_p1 = add_ln74_1_reg_1979;

assign zext_ln75_fu_1663_p1 = add_ln75_1_reg_1984;

assign zext_ln76_fu_1667_p1 = add_ln76_1_reg_1989;

assign zext_ln77_fu_1671_p1 = add_ln77_1_reg_1994;

always @ (posedge ap_clk) begin
    zext_ln61_reg_1712[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln68_reg_1725[0] <= 1'b0;
    zext_ln66_reg_1730[1:0] <= 2'b00;
    zext_ln66_reg_1730[32:5] <= 28'b0000000000000000000000000000;
    ao_addr_2_reg_1745[1:0] <= 2'b01;
    ao_addr_3_reg_1750[1:0] <= 2'b10;
end

endmodule //make_cube_faces
