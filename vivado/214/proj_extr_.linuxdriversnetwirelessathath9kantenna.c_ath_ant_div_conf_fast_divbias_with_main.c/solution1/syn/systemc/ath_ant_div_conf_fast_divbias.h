// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ath_ant_div_conf_fast_divbias_HH_
#define _ath_ant_div_conf_fast_divbias_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ath_ant_div_conf_fast_divbias : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > ant_conf_div_group;
    sc_in< sc_lv<32> > ant_conf_main_lna_conf;
    sc_in< sc_lv<32> > ant_conf_alt_lna_conf;
    sc_out< sc_lv<32> > ant_conf_fast_div_bias;
    sc_out< sc_logic > ant_conf_fast_div_bias_ap_vld;
    sc_out< sc_lv<32> > ant_conf_alt_gaintb;
    sc_out< sc_logic > ant_conf_alt_gaintb_ap_vld;
    sc_out< sc_lv<32> > ant_conf_main_gaintb;
    sc_out< sc_logic > ant_conf_main_gaintb_ap_vld;
    sc_in< sc_lv<32> > antcomb_ant_ratio;
    sc_in< sc_lv<32> > antcomb_fast_div_bias;
    sc_in< sc_lv<32> > antcomb_scan;
    sc_in< sc_lv<32> > alt_ratio;


    // Module declarations
    ath_ant_div_conf_fast_divbias(sc_module_name name);
    SC_HAS_PROCESS(ath_ant_div_conf_fast_divbias);

    ~ath_ant_div_conf_fast_divbias();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln25_fu_164_p2;
    sc_signal< sc_lv<1> > icmp_ln25_reg_253;
    sc_signal< sc_lv<1> > icmp_ln82_1_fu_170_p2;
    sc_signal< sc_lv<1> > icmp_ln82_1_reg_257;
    sc_signal< sc_lv<1> > icmp_ln68_fu_188_p2;
    sc_signal< sc_lv<1> > icmp_ln68_reg_265;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln127_fu_206_p2;
    sc_signal< sc_lv<1> > icmp_ln127_reg_284;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln183_fu_224_p2;
    sc_signal< sc_lv<1> > icmp_ln183_reg_315;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln185_fu_230_p2;
    sc_signal< sc_lv<32> > or_ln27_fu_182_p2;
    sc_signal< sc_lv<32> > or_ln70_fu_200_p2;
    sc_signal< sc_lv<1> > grp_fu_154_p2;
    sc_signal< sc_lv<32> > or_ln129_fu_218_p2;
    sc_signal< sc_lv<1> > grp_fu_159_p2;
    sc_signal< sc_lv<1> > grp_fu_148_p2;
    sc_signal< sc_lv<32> > or_ln186_fu_242_p2;
    sc_signal< sc_lv<32> > shl_ln27_fu_176_p2;
    sc_signal< sc_lv<32> > shl_ln70_fu_194_p2;
    sc_signal< sc_lv<32> > shl_ln129_fu_212_p2;
    sc_signal< sc_lv<32> > shl_ln186_fu_236_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3D;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<32> ap_const_lv32_3B;
    static const sc_lv<32> ap_const_lv32_31;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_21;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_39;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ant_conf_alt_gaintb();
    void thread_ant_conf_alt_gaintb_ap_vld();
    void thread_ant_conf_fast_div_bias();
    void thread_ant_conf_fast_div_bias_ap_vld();
    void thread_ant_conf_main_gaintb();
    void thread_ant_conf_main_gaintb_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_148_p2();
    void thread_grp_fu_154_p2();
    void thread_grp_fu_159_p2();
    void thread_icmp_ln127_fu_206_p2();
    void thread_icmp_ln183_fu_224_p2();
    void thread_icmp_ln185_fu_230_p2();
    void thread_icmp_ln25_fu_164_p2();
    void thread_icmp_ln68_fu_188_p2();
    void thread_icmp_ln82_1_fu_170_p2();
    void thread_or_ln129_fu_218_p2();
    void thread_or_ln186_fu_242_p2();
    void thread_or_ln27_fu_182_p2();
    void thread_or_ln70_fu_200_p2();
    void thread_shl_ln129_fu_212_p2();
    void thread_shl_ln186_fu_236_p2();
    void thread_shl_ln27_fu_176_p2();
    void thread_shl_ln70_fu_194_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
