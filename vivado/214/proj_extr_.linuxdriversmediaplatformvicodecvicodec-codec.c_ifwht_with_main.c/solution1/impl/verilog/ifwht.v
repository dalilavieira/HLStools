// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ifwht,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.205000,HLS_SYN_LAT=266,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1044,HLS_SYN_LUT=2546,HLS_VERSION=2019_1}" *)

module ifwht (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_r_address0,
        block_r_ce0,
        block_r_q0,
        block_r_address1,
        block_r_ce1,
        block_r_q1,
        output_block_address0,
        output_block_ce0,
        output_block_we0,
        output_block_d0,
        output_block_q0,
        output_block_address1,
        output_block_ce1,
        output_block_we1,
        output_block_d1,
        output_block_q1,
        intra
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] block_r_address0;
output   block_r_ce0;
input  [31:0] block_r_q0;
output  [4:0] block_r_address1;
output   block_r_ce1;
input  [31:0] block_r_q1;
output  [4:0] output_block_address0;
output   output_block_ce0;
output   output_block_we0;
output  [31:0] output_block_d0;
input  [31:0] output_block_q0;
output  [4:0] output_block_address1;
output   output_block_ce1;
output   output_block_we1;
output  [31:0] output_block_d1;
input  [31:0] output_block_q1;
input  [31:0] intra;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] block_r_address0;
reg block_r_ce0;
reg[4:0] block_r_address1;
reg block_r_ce1;
reg[4:0] output_block_address0;
reg output_block_ce0;
reg output_block_we0;
reg[31:0] output_block_d0;
reg[4:0] output_block_address1;
reg output_block_ce1;
reg output_block_we1;
reg[31:0] output_block_d1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] output_block_addr_reg_899;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_378_p2;
reg   [3:0] i_reg_912;
wire   [63:0] zext_ln30_fu_390_p1;
reg   [63:0] zext_ln30_reg_917;
wire   [0:0] icmp_ln28_fu_372_p2;
wire   [0:0] icmp_ln92_fu_395_p2;
reg   [0:0] icmp_ln92_reg_927;
reg   [31:0] block_load_reg_931;
wire    ap_CS_fsm_state3;
reg   [31:0] block_load_1_reg_937;
wire   [63:0] zext_ln33_fu_406_p1;
reg   [63:0] zext_ln33_reg_943;
wire   [63:0] zext_ln33_1_fu_417_p1;
reg   [63:0] zext_ln33_1_reg_953;
reg   [31:0] block_load_2_reg_963;
wire    ap_CS_fsm_state4;
reg   [31:0] block_load_3_reg_969;
wire   [63:0] zext_ln36_fu_428_p1;
reg   [63:0] zext_ln36_reg_975;
wire   [63:0] zext_ln36_1_fu_439_p1;
reg   [63:0] zext_ln36_1_reg_985;
reg   [31:0] block_load_4_reg_995;
wire    ap_CS_fsm_state5;
reg   [31:0] block_load_5_reg_1001;
wire   [63:0] zext_ln39_fu_450_p1;
reg   [63:0] zext_ln39_reg_1007;
wire   [63:0] zext_ln39_1_fu_461_p1;
reg   [63:0] zext_ln39_1_reg_1017;
wire   [4:0] add_ln28_fu_466_p2;
reg   [4:0] add_ln28_reg_1027;
wire   [31:0] sub_ln31_fu_476_p2;
reg   [31:0] sub_ln31_reg_1032;
wire    ap_CS_fsm_state6;
wire   [31:0] sub_ln34_fu_484_p2;
reg   [31:0] sub_ln34_reg_1038;
wire   [31:0] sub_ln37_fu_492_p2;
reg   [31:0] sub_ln37_reg_1044;
wire   [31:0] sub_ln40_fu_502_p2;
reg   [31:0] sub_ln40_reg_1050;
wire   [31:0] sub_ln44_fu_514_p2;
reg   [31:0] sub_ln44_reg_1056;
wire   [31:0] sub_ln49_fu_526_p2;
reg   [31:0] sub_ln49_reg_1062;
wire   [31:0] add_ln46_fu_560_p2;
reg   [31:0] add_ln46_reg_1068;
wire    ap_CS_fsm_state8;
wire   [31:0] add_ln51_fu_568_p2;
reg   [31:0] add_ln51_reg_1074;
wire   [5:0] out_1_rec_cast2_fu_596_p1;
reg   [5:0] out_1_rec_cast2_reg_1080;
wire    ap_CS_fsm_state10;
reg   [4:0] output_block_addr_8_reg_1087;
wire   [3:0] i_1_fu_611_p2;
reg   [3:0] i_1_reg_1095;
wire  signed [3:0] xor_ln68_fu_617_p2;
reg  signed [3:0] xor_ln68_reg_1100;
wire   [0:0] icmp_ln66_fu_605_p2;
reg   [4:0] output_block_addr_9_reg_1106;
reg   [31:0] output_block_load_reg_1112;
wire    ap_CS_fsm_state11;
reg   [31:0] output_block_load_1_reg_1118;
wire  signed [4:0] or_ln_fu_628_p3;
reg  signed [4:0] or_ln_reg_1124;
reg   [4:0] output_block_addr_10_reg_1129;
reg   [4:0] output_block_addr_11_reg_1135;
reg   [31:0] output_block_load_2_reg_1140;
wire    ap_CS_fsm_state12;
reg   [31:0] output_block_load_3_reg_1146;
reg   [4:0] output_block_addr_12_reg_1152;
reg   [4:0] output_block_addr_13_reg_1157;
reg   [31:0] output_block_load_4_reg_1162;
wire    ap_CS_fsm_state13;
reg   [31:0] output_block_load_5_reg_1168;
reg   [4:0] output_block_addr_14_reg_1174;
reg   [4:0] output_block_addr_15_reg_1179;
wire   [31:0] sub_ln69_fu_684_p2;
reg   [31:0] sub_ln69_reg_1184;
wire    ap_CS_fsm_state14;
wire   [31:0] sub_ln72_fu_692_p2;
reg   [31:0] sub_ln72_reg_1190;
wire   [31:0] sub_ln75_fu_700_p2;
reg   [31:0] sub_ln75_reg_1196;
wire   [31:0] sub_ln78_fu_710_p2;
reg   [31:0] sub_ln78_reg_1202;
wire   [31:0] add_ln95_fu_740_p2;
reg   [31:0] add_ln95_reg_1208;
wire   [31:0] add_ln98_fu_760_p2;
reg   [31:0] add_ln98_reg_1213;
wire   [31:0] add_ln84_fu_770_p2;
reg   [31:0] add_ln84_reg_1218;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln89_fu_778_p2;
reg   [31:0] add_ln89_reg_1224;
wire   [3:0] d_1_fu_812_p2;
reg   [3:0] d_1_reg_1233;
wire    ap_CS_fsm_state18;
reg   [4:0] output_block_addr_17_reg_1238;
wire   [0:0] icmp_ln118_fu_806_p2;
wire   [3:0] d_fu_846_p2;
reg   [3:0] d_reg_1247;
reg   [4:0] output_block_addr_16_reg_1252;
wire   [0:0] icmp_ln104_fu_840_p2;
reg   [4:0] tmp_0_rec_reg_299;
wire    ap_CS_fsm_state9;
reg   [3:0] i_0_reg_311;
reg   [3:0] out_1_rec_reg_322;
reg   [3:0] d1_0_reg_334;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state17;
reg   [3:0] d_0_reg_345;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_0_rec_cast_fu_366_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] out_1_rec_cast_fu_600_p1;
wire   [63:0] zext_ln68_fu_623_p1;
wire   [63:0] zext_ln71_fu_636_p1;
wire   [63:0] zext_ln71_1_fu_644_p1;
wire  signed [63:0] sext_ln74_fu_657_p1;
wire  signed [63:0] sext_ln74_1_fu_667_p1;
wire  signed [63:0] sext_ln77_fu_672_p1;
wire  signed [63:0] sext_ln77_1_fu_676_p1;
wire   [63:0] zext_ln119_fu_835_p1;
wire   [63:0] zext_ln105_fu_869_p1;
wire   [31:0] add_ln54_fu_532_p2;
wire   [31:0] sub_ln55_fu_539_p2;
wire   [31:0] sub_ln56_fu_546_p2;
wire   [31:0] add_ln57_fu_551_p2;
wire   [31:0] add_ln58_fu_572_p2;
wire   [31:0] sub_ln59_fu_579_p2;
wire   [31:0] sub_ln60_fu_586_p2;
wire   [31:0] add_ln61_fu_591_p2;
wire   [31:0] sub_ln96_fu_746_p2;
wire   [31:0] sub_ln97_fu_753_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] add_ln99_fu_782_p2;
wire   [31:0] sub_ln100_fu_789_p2;
wire   [31:0] sub_ln101_fu_796_p2;
wire   [31:0] add_ln102_fu_801_p2;
wire  signed [31:0] sext_ln120_1_fu_884_p1;
wire  signed [31:0] sext_ln105_fu_889_p1;
wire   [4:0] or_ln30_fu_384_p2;
wire   [4:0] or_ln33_fu_400_p2;
wire   [4:0] or_ln33_1_fu_411_p2;
wire   [4:0] or_ln36_fu_422_p2;
wire   [4:0] or_ln36_1_fu_433_p2;
wire   [4:0] or_ln39_fu_444_p2;
wire   [4:0] or_ln39_1_fu_455_p2;
wire   [31:0] add_ln33_fu_480_p2;
wire   [31:0] add_ln30_fu_472_p2;
wire   [31:0] add_ln39_fu_496_p2;
wire   [31:0] add_ln36_fu_488_p2;
wire   [31:0] add_ln48_fu_520_p2;
wire   [31:0] add_ln43_fu_508_p2;
wire   [31:0] sub_ln50_fu_564_p2;
wire   [31:0] sub_ln45_fu_556_p2;
wire  signed [4:0] sext_ln71_fu_641_p1;
wire   [5:0] or_ln1_fu_649_p3;
wire   [5:0] add_ln74_fu_662_p2;
wire   [31:0] add_ln71_fu_688_p2;
wire   [31:0] add_ln68_fu_680_p2;
wire   [31:0] add_ln77_fu_704_p2;
wire   [31:0] add_ln74_1_fu_696_p2;
wire   [31:0] add_ln86_fu_728_p2;
wire   [31:0] add_ln81_fu_716_p2;
wire   [31:0] sub_ln82_fu_722_p2;
wire   [31:0] sub_ln87_fu_734_p2;
wire   [31:0] sub_ln88_fu_774_p2;
wire   [31:0] sub_ln83_fu_766_p2;
wire   [2:0] trunc_ln119_fu_818_p1;
wire   [5:0] shl_ln1_fu_822_p3;
wire   [5:0] add_ln119_fu_830_p2;
wire   [2:0] trunc_ln105_fu_852_p1;
wire   [5:0] shl_ln_fu_856_p3;
wire   [5:0] add_ln105_fu_864_p2;
wire   [25:0] grp_fu_356_p4;
wire  signed [26:0] sext_ln120_fu_874_p1;
wire   [26:0] add_ln120_fu_878_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        d1_0_reg_334 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        d1_0_reg_334 <= d_1_reg_1233;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        d_0_reg_345 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        d_0_reg_345 <= d_reg_1247;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_311 <= i_reg_912;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_311 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_1_rec_reg_322 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (((icmp_ln104_fu_840_p2 == 1'd1) & (icmp_ln92_reg_927 == 1'd1)) | ((icmp_ln118_fu_806_p2 == 1'd1) & (icmp_ln92_reg_927 == 1'd0))))) begin
        out_1_rec_reg_322 <= i_1_reg_1095;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_0_rec_reg_299 <= add_ln28_reg_1027;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_0_rec_reg_299 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln28_reg_1027 <= add_ln28_fu_466_p2;
        block_load_4_reg_995 <= block_r_q0;
        block_load_5_reg_1001 <= block_r_q1;
        zext_ln39_1_reg_1017[4 : 3] <= zext_ln39_1_fu_461_p1[4 : 3];
        zext_ln39_reg_1007[0] <= zext_ln39_fu_450_p1[0];
zext_ln39_reg_1007[4 : 3] <= zext_ln39_fu_450_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln46_reg_1068 <= add_ln46_fu_560_p2;
        add_ln51_reg_1074 <= add_ln51_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln84_reg_1218 <= add_ln84_fu_770_p2;
        add_ln89_reg_1224 <= add_ln89_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln95_reg_1208 <= add_ln95_fu_740_p2;
        add_ln98_reg_1213 <= add_ln98_fu_760_p2;
        sub_ln69_reg_1184 <= sub_ln69_fu_684_p2;
        sub_ln72_reg_1190 <= sub_ln72_fu_692_p2;
        sub_ln75_reg_1196 <= sub_ln75_fu_700_p2;
        sub_ln78_reg_1202 <= sub_ln78_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_load_1_reg_937 <= block_r_q1;
        block_load_reg_931 <= block_r_q0;
        zext_ln33_1_reg_953[4 : 2] <= zext_ln33_1_fu_417_p1[4 : 2];
        zext_ln33_reg_943[0] <= zext_ln33_fu_406_p1[0];
zext_ln33_reg_943[4 : 2] <= zext_ln33_fu_406_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_load_2_reg_963 <= block_r_q0;
        block_load_3_reg_969 <= block_r_q1;
        zext_ln36_1_reg_985[1] <= zext_ln36_1_fu_439_p1[1];
zext_ln36_1_reg_985[4 : 3] <= zext_ln36_1_fu_439_p1[4 : 3];
        zext_ln36_reg_975[1 : 0] <= zext_ln36_fu_428_p1[1 : 0];
zext_ln36_reg_975[4 : 3] <= zext_ln36_fu_428_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        d_1_reg_1233 <= d_1_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        d_reg_1247 <= d_fu_846_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_1095 <= i_1_fu_611_p2;
        out_1_rec_cast2_reg_1080[3 : 0] <= out_1_rec_cast2_fu_596_p1[3 : 0];
        output_block_addr_8_reg_1087[3 : 0] <= out_1_rec_cast_fu_600_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_912 <= i_fu_378_p2;
        output_block_addr_reg_899 <= tmp_0_rec_cast_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln92_reg_927 <= icmp_ln92_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        or_ln_reg_1124[3 : 0] <= or_ln_fu_628_p3[3 : 0];
        output_block_addr_10_reg_1129[3 : 0] <= zext_ln71_fu_636_p1[3 : 0];
        output_block_addr_11_reg_1135 <= zext_ln71_1_fu_644_p1;
        output_block_load_1_reg_1118 <= output_block_q1;
        output_block_load_reg_1112 <= output_block_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_addr_12_reg_1152[3 : 0] <= sext_ln74_fu_657_p1[3 : 0];
        output_block_addr_13_reg_1157 <= sext_ln74_1_fu_667_p1;
        output_block_load_2_reg_1140 <= output_block_q0;
        output_block_load_3_reg_1146 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_addr_14_reg_1174[3 : 0] <= sext_ln77_fu_672_p1[3 : 0];
        output_block_addr_15_reg_1179 <= sext_ln77_1_fu_676_p1;
        output_block_load_4_reg_1162 <= output_block_q0;
        output_block_load_5_reg_1168 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd1) & (icmp_ln104_fu_840_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output_block_addr_16_reg_1252 <= zext_ln105_fu_869_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_927 == 1'd0) & (icmp_ln118_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output_block_addr_17_reg_1238 <= zext_ln119_fu_835_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_605_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_block_addr_9_reg_1106[3 : 0] <= zext_ln68_fu_623_p1[3 : 0];
        xor_ln68_reg_1100 <= xor_ln68_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln31_reg_1032 <= sub_ln31_fu_476_p2;
        sub_ln34_reg_1038 <= sub_ln34_fu_484_p2;
        sub_ln37_reg_1044 <= sub_ln37_fu_492_p2;
        sub_ln40_reg_1050 <= sub_ln40_fu_502_p2;
        sub_ln44_reg_1056 <= sub_ln44_fu_514_p2;
        sub_ln49_reg_1062 <= sub_ln49_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln30_reg_917[4 : 1] <= zext_ln30_fu_390_p1[4 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address0 = zext_ln39_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address0 = zext_ln36_fu_428_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address0 = zext_ln33_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address0 = tmp_0_rec_cast_fu_366_p1;
    end else begin
        block_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address1 = zext_ln39_1_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address1 = zext_ln36_1_fu_439_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address1 = zext_ln33_1_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address1 = zext_ln30_fu_390_p1;
    end else begin
        block_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce0 = 1'b1;
    end else begin
        block_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce1 = 1'b1;
    end else begin
        block_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_927 == 1'd1) & (icmp_ln104_fu_840_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output_block_address0 = zext_ln105_fu_869_p1;
    end else if (((icmp_ln92_reg_927 == 1'd0) & (icmp_ln118_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        output_block_address0 = zext_ln119_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address0 = output_block_addr_14_reg_1174;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address0 = output_block_addr_12_reg_1152;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_address0 = output_block_addr_8_reg_1087;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address0 = output_block_addr_9_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address0 = sext_ln77_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address0 = sext_ln74_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address0 = zext_ln71_fu_636_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address0 = out_1_rec_cast_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address0 = zext_ln39_reg_1007;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_address0 = zext_ln36_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_address0 = zext_ln33_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_block_address0 = output_block_addr_reg_899;
    end else begin
        output_block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_address1 = output_block_addr_16_reg_1252;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_address1 = output_block_addr_17_reg_1238;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address1 = output_block_addr_15_reg_1179;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address1 = output_block_addr_13_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_address1 = output_block_addr_11_reg_1135;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address1 = output_block_addr_10_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address1 = sext_ln77_1_fu_676_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address1 = sext_ln74_1_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address1 = zext_ln71_1_fu_644_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address1 = zext_ln68_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address1 = zext_ln39_1_reg_1017;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_address1 = zext_ln36_1_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_address1 = zext_ln33_1_reg_953;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_block_address1 = zext_ln30_reg_917;
    end else begin
        output_block_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln92_reg_927 == 1'd1) & (icmp_ln104_fu_840_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((icmp_ln92_reg_927 == 1'd0) & (icmp_ln118_fu_806_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)))) begin
        output_block_ce0 = 1'b1;
    end else begin
        output_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_block_ce1 = 1'b1;
    end else begin
        output_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d0 = sub_ln101_fu_796_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_d0 = add_ln99_fu_782_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_d0 = add_ln95_reg_1208;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_d0 = sub_ln96_fu_746_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d0 = sub_ln60_fu_586_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_d0 = add_ln58_fu_572_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_d0 = sub_ln56_fu_546_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_block_d0 = add_ln54_fu_532_p2;
    end else begin
        output_block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_d1 = sext_ln105_fu_889_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_d1 = sext_ln120_1_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d1 = add_ln102_fu_801_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_d1 = sub_ln100_fu_789_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_d1 = add_ln98_reg_1213;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_d1 = sub_ln97_fu_753_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d1 = add_ln61_fu_591_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_d1 = sub_ln59_fu_579_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_d1 = add_ln57_fu_551_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_block_d1 = sub_ln55_fu_539_p2;
    end else begin
        output_block_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_block_we0 = 1'b1;
    end else begin
        output_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_block_we1 = 1'b1;
    end else begin
        output_block_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln66_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (((icmp_ln104_fu_840_p2 == 1'd1) & (icmp_ln92_reg_927 == 1'd1)) | ((icmp_ln118_fu_806_p2 == 1'd1) & (icmp_ln92_reg_927 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln92_reg_927 == 1'd1) & (icmp_ln104_fu_840_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_801_p2 = (add_ln89_reg_1224 + add_ln84_reg_1218);

assign add_ln105_fu_864_p2 = (shl_ln_fu_856_p3 + out_1_rec_cast2_reg_1080);

assign add_ln119_fu_830_p2 = (shl_ln1_fu_822_p3 + out_1_rec_cast2_reg_1080);

assign add_ln120_fu_878_p2 = ($signed(27'd128) + $signed(sext_ln120_fu_874_p1));

assign add_ln28_fu_466_p2 = (tmp_0_rec_reg_299 + 5'd8);

assign add_ln30_fu_472_p2 = (block_load_1_reg_937 + block_load_reg_931);

assign add_ln33_fu_480_p2 = (block_load_3_reg_969 + block_load_2_reg_963);

assign add_ln36_fu_488_p2 = (block_load_5_reg_1001 + block_load_4_reg_995);

assign add_ln39_fu_496_p2 = (block_r_q1 + block_r_q0);

assign add_ln43_fu_508_p2 = (add_ln33_fu_480_p2 + add_ln30_fu_472_p2);

assign add_ln46_fu_560_p2 = (sub_ln34_reg_1038 + sub_ln31_reg_1032);

assign add_ln48_fu_520_p2 = (add_ln39_fu_496_p2 + add_ln36_fu_488_p2);

assign add_ln51_fu_568_p2 = (sub_ln40_reg_1050 + sub_ln37_reg_1044);

assign add_ln54_fu_532_p2 = (add_ln48_fu_520_p2 + add_ln43_fu_508_p2);

assign add_ln57_fu_551_p2 = (sub_ln49_reg_1062 + sub_ln44_reg_1056);

assign add_ln58_fu_572_p2 = (sub_ln50_fu_564_p2 + sub_ln45_fu_556_p2);

assign add_ln61_fu_591_p2 = (add_ln51_reg_1074 + add_ln46_reg_1068);

assign add_ln68_fu_680_p2 = (output_block_load_1_reg_1118 + output_block_load_reg_1112);

assign add_ln71_fu_688_p2 = (output_block_load_3_reg_1146 + output_block_load_2_reg_1140);

assign add_ln74_1_fu_696_p2 = (output_block_load_5_reg_1168 + output_block_load_4_reg_1162);

assign add_ln74_fu_662_p2 = ($signed(out_1_rec_cast2_reg_1080) + $signed(6'd40));

assign add_ln77_fu_704_p2 = (output_block_q1 + output_block_q0);

assign add_ln81_fu_716_p2 = (add_ln71_fu_688_p2 + add_ln68_fu_680_p2);

assign add_ln84_fu_770_p2 = (sub_ln72_reg_1190 + sub_ln69_reg_1184);

assign add_ln86_fu_728_p2 = (add_ln77_fu_704_p2 + add_ln74_1_fu_696_p2);

assign add_ln89_fu_778_p2 = (sub_ln78_reg_1202 + sub_ln75_reg_1196);

assign add_ln95_fu_740_p2 = (add_ln86_fu_728_p2 + add_ln81_fu_716_p2);

assign add_ln98_fu_760_p2 = (sub_ln87_fu_734_p2 + sub_ln82_fu_722_p2);

assign add_ln99_fu_782_p2 = (sub_ln88_fu_774_p2 + sub_ln83_fu_766_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign d_1_fu_812_p2 = (d1_0_reg_334 + 4'd1);

assign d_fu_846_p2 = (d_0_reg_345 + 4'd1);

assign grp_fu_356_p4 = {{output_block_q0[31:6]}};

assign i_1_fu_611_p2 = (out_1_rec_reg_322 + 4'd1);

assign i_fu_378_p2 = (i_0_reg_311 + 4'd1);

assign icmp_ln104_fu_840_p2 = ((d_0_reg_345 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_806_p2 = ((d1_0_reg_334 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_372_p2 = ((i_0_reg_311 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_605_p2 = ((out_1_rec_reg_322 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_395_p2 = ((intra == 32'd0) ? 1'b1 : 1'b0);

assign or_ln1_fu_649_p3 = {{2'd2}, {out_1_rec_reg_322}};

assign or_ln30_fu_384_p2 = (tmp_0_rec_reg_299 | 5'd1);

assign or_ln33_1_fu_411_p2 = (tmp_0_rec_reg_299 | 5'd3);

assign or_ln33_fu_400_p2 = (tmp_0_rec_reg_299 | 5'd2);

assign or_ln36_1_fu_433_p2 = (tmp_0_rec_reg_299 | 5'd5);

assign or_ln36_fu_422_p2 = (tmp_0_rec_reg_299 | 5'd4);

assign or_ln39_1_fu_455_p2 = (tmp_0_rec_reg_299 | 5'd7);

assign or_ln39_fu_444_p2 = (tmp_0_rec_reg_299 | 5'd6);

assign or_ln_fu_628_p3 = {{1'd1}, {out_1_rec_reg_322}};

assign out_1_rec_cast2_fu_596_p1 = out_1_rec_reg_322;

assign out_1_rec_cast_fu_600_p1 = out_1_rec_reg_322;

assign sext_ln105_fu_889_p1 = $signed(grp_fu_356_p4);

assign sext_ln120_1_fu_884_p1 = $signed(add_ln120_fu_878_p2);

assign sext_ln120_fu_874_p1 = $signed(grp_fu_356_p4);

assign sext_ln71_fu_641_p1 = xor_ln68_reg_1100;

assign sext_ln74_1_fu_667_p1 = $signed(add_ln74_fu_662_p2);

assign sext_ln74_fu_657_p1 = $signed(or_ln1_fu_649_p3);

assign sext_ln77_1_fu_676_p1 = xor_ln68_reg_1100;

assign sext_ln77_fu_672_p1 = or_ln_reg_1124;

assign shl_ln1_fu_822_p3 = {{trunc_ln119_fu_818_p1}, {3'd0}};

assign shl_ln_fu_856_p3 = {{trunc_ln105_fu_852_p1}, {3'd0}};

assign sub_ln100_fu_789_p2 = (sub_ln83_fu_766_p2 - sub_ln88_fu_774_p2);

assign sub_ln101_fu_796_p2 = (add_ln84_reg_1218 - add_ln89_reg_1224);

assign sub_ln31_fu_476_p2 = (block_load_reg_931 - block_load_1_reg_937);

assign sub_ln34_fu_484_p2 = (block_load_2_reg_963 - block_load_3_reg_969);

assign sub_ln37_fu_492_p2 = (block_load_4_reg_995 - block_load_5_reg_1001);

assign sub_ln40_fu_502_p2 = (block_r_q0 - block_r_q1);

assign sub_ln44_fu_514_p2 = (add_ln30_fu_472_p2 - add_ln33_fu_480_p2);

assign sub_ln45_fu_556_p2 = (sub_ln31_reg_1032 - sub_ln34_reg_1038);

assign sub_ln49_fu_526_p2 = (add_ln36_fu_488_p2 - add_ln39_fu_496_p2);

assign sub_ln50_fu_564_p2 = (sub_ln37_reg_1044 - sub_ln40_reg_1050);

assign sub_ln55_fu_539_p2 = (add_ln43_fu_508_p2 - add_ln48_fu_520_p2);

assign sub_ln56_fu_546_p2 = (sub_ln44_reg_1056 - sub_ln49_reg_1062);

assign sub_ln59_fu_579_p2 = (sub_ln45_fu_556_p2 - sub_ln50_fu_564_p2);

assign sub_ln60_fu_586_p2 = (add_ln46_reg_1068 - add_ln51_reg_1074);

assign sub_ln69_fu_684_p2 = (output_block_load_reg_1112 - output_block_load_1_reg_1118);

assign sub_ln72_fu_692_p2 = (output_block_load_2_reg_1140 - output_block_load_3_reg_1146);

assign sub_ln75_fu_700_p2 = (output_block_load_4_reg_1162 - output_block_load_5_reg_1168);

assign sub_ln78_fu_710_p2 = (output_block_q0 - output_block_q1);

assign sub_ln82_fu_722_p2 = (add_ln68_fu_680_p2 - add_ln71_fu_688_p2);

assign sub_ln83_fu_766_p2 = (sub_ln69_reg_1184 - sub_ln72_reg_1190);

assign sub_ln87_fu_734_p2 = (add_ln74_1_fu_696_p2 - add_ln77_fu_704_p2);

assign sub_ln88_fu_774_p2 = (sub_ln75_reg_1196 - sub_ln78_reg_1202);

assign sub_ln96_fu_746_p2 = (add_ln81_fu_716_p2 - add_ln86_fu_728_p2);

assign sub_ln97_fu_753_p2 = (sub_ln82_fu_722_p2 - sub_ln87_fu_734_p2);

assign tmp_0_rec_cast_fu_366_p1 = tmp_0_rec_reg_299;

assign trunc_ln105_fu_852_p1 = d_0_reg_345[2:0];

assign trunc_ln119_fu_818_p1 = d1_0_reg_334[2:0];

assign xor_ln68_fu_617_p2 = (out_1_rec_reg_322 ^ 4'd8);

assign zext_ln105_fu_869_p1 = add_ln105_fu_864_p2;

assign zext_ln119_fu_835_p1 = add_ln119_fu_830_p2;

assign zext_ln30_fu_390_p1 = or_ln30_fu_384_p2;

assign zext_ln33_1_fu_417_p1 = or_ln33_1_fu_411_p2;

assign zext_ln33_fu_406_p1 = or_ln33_fu_400_p2;

assign zext_ln36_1_fu_439_p1 = or_ln36_1_fu_433_p2;

assign zext_ln36_fu_428_p1 = or_ln36_fu_422_p2;

assign zext_ln39_1_fu_461_p1 = or_ln39_1_fu_455_p2;

assign zext_ln39_fu_450_p1 = or_ln39_fu_444_p2;

assign zext_ln68_fu_623_p1 = $unsigned(xor_ln68_fu_617_p2);

assign zext_ln71_1_fu_644_p1 = $unsigned(sext_ln71_fu_641_p1);

assign zext_ln71_fu_636_p1 = $unsigned(or_ln_fu_628_p3);

always @ (posedge ap_clk) begin
    zext_ln30_reg_917[0] <= 1'b1;
    zext_ln30_reg_917[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln33_reg_943[1] <= 1'b1;
    zext_ln33_reg_943[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln33_1_reg_953[1:0] <= 2'b11;
    zext_ln33_1_reg_953[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_975[2] <= 1'b1;
    zext_ln36_reg_975[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln36_1_reg_985[0] <= 1'b1;
    zext_ln36_1_reg_985[2:2] <= 1'b1;
    zext_ln36_1_reg_985[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_1007[2:1] <= 2'b11;
    zext_ln39_reg_1007[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln39_1_reg_1017[2:0] <= 3'b111;
    zext_ln39_1_reg_1017[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    out_1_rec_cast2_reg_1080[5:4] <= 2'b00;
    output_block_addr_8_reg_1087[4] <= 1'b0;
    output_block_addr_9_reg_1106[4] <= 1'b0;
    or_ln_reg_1124[4] <= 1'b1;
    output_block_addr_10_reg_1129[4] <= 1'b1;
    output_block_addr_12_reg_1152[4] <= 1'b0;
    output_block_addr_14_reg_1174[4] <= 1'b1;
end

endmodule //ifwht
