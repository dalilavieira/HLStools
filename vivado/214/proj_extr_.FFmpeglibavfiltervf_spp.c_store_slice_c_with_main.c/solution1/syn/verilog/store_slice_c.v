// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="store_slice_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.073444,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=561,HLS_SYN_LUT=2972,HLS_VERSION=2019_1}" *)

module store_slice_c (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        dst_linesize,
        src_linesize,
        width,
        height,
        log2_scale,
        dither_address0,
        dither_ce0,
        dither_q0,
        dither_address1,
        dither_ce1,
        dither_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [31:0] dst_d0;
output  [2:0] src_address0;
output   src_ce0;
input  [31:0] src_q0;
output  [2:0] src_address1;
output   src_ce1;
input  [31:0] src_q1;
input  [31:0] dst_linesize;
input  [31:0] src_linesize;
input  [31:0] width;
input  [31:0] height;
input  [31:0] log2_scale;
output  [5:0] dither_address0;
output   dither_ce0;
input  [31:0] dither_q0;
output  [5:0] dither_address1;
output   dither_ce1;
input  [31:0] dither_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[31:0] dst_d0;
reg[2:0] src_address0;
reg src_ce0;
reg src_ce1;
reg[5:0] dither_address0;
reg dither_ce0;
reg dither_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] add_ln31_fu_376_p2;
reg   [31:0] add_ln31_reg_1361;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln31_1_fu_381_p2;
reg   [31:0] add_ln31_1_reg_1366;
wire   [30:0] y_fu_395_p2;
reg   [30:0] y_reg_1374;
reg   [5:0] d_reg_1379;
wire   [0:0] icmp_ln31_fu_390_p2;
reg   [5:0] dither_addr_reg_1384;
reg   [5:0] dither_addr_1_reg_1389;
reg   [5:0] dither_addr_2_reg_1394;
reg   [5:0] dither_addr_3_reg_1399;
reg   [5:0] dither_addr_4_reg_1404;
reg   [5:0] dither_addr_5_reg_1409;
reg   [5:0] dither_addr_6_reg_1414;
wire   [31:0] tmp_11_fu_586_p3;
reg   [31:0] tmp_11_reg_1419;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln33_fu_594_p2;
wire   [31:0] or_ln36_fu_685_p2;
reg   [31:0] or_ln36_reg_1432;
wire    ap_CS_fsm_state4;
wire   [31:0] or_ln37_fu_776_p2;
reg   [31:0] or_ln37_reg_1442;
wire    ap_CS_fsm_state5;
wire   [31:0] or_ln38_fu_867_p2;
reg   [31:0] or_ln38_reg_1452;
wire    ap_CS_fsm_state6;
wire   [31:0] or_ln39_fu_958_p2;
reg   [31:0] or_ln39_reg_1462;
wire    ap_CS_fsm_state7;
wire   [31:0] or_ln40_fu_1049_p2;
reg   [31:0] or_ln40_reg_1472;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln41_2_fu_1157_p2;
reg   [31:0] add_ln41_2_reg_1487;
wire   [31:0] add_ln42_2_fu_1180_p2;
reg   [31:0] add_ln42_2_reg_1497;
wire   [31:0] x_fu_1186_p2;
reg   [31:0] x_reg_1502;
wire   [25:0] temp_15_fu_1311_p3;
reg   [25:0] temp_15_reg_1507;
wire    ap_CS_fsm_state10;
reg   [30:0] y_0_reg_329;
reg   [31:0] phi_mul_reg_340;
reg   [31:0] phi_mul1_reg_352;
reg   [31:0] x_0_reg_364;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln32_fu_409_p1;
wire   [63:0] tmp_1_fu_420_p3;
wire   [63:0] tmp_2_fu_435_p3;
wire   [63:0] tmp_3_fu_450_p3;
wire   [63:0] tmp_4_fu_465_p3;
wire   [63:0] tmp_5_fu_480_p3;
wire   [63:0] tmp_6_fu_495_p3;
wire   [63:0] tmp_7_fu_510_p3;
wire  signed [63:0] sext_ln35_fu_605_p1;
wire  signed [63:0] sext_ln35_1_fu_680_p1;
wire  signed [63:0] sext_ln36_fu_697_p1;
wire  signed [63:0] sext_ln36_1_fu_771_p1;
wire  signed [63:0] sext_ln37_fu_788_p1;
wire  signed [63:0] sext_ln37_1_fu_862_p1;
wire  signed [63:0] sext_ln38_fu_879_p1;
wire  signed [63:0] sext_ln38_1_fu_953_p1;
wire  signed [63:0] sext_ln39_fu_970_p1;
wire  signed [63:0] sext_ln39_1_fu_1044_p1;
wire  signed [63:0] sext_ln40_fu_1061_p1;
wire  signed [63:0] sext_ln40_1_fu_1135_p1;
wire  signed [63:0] sext_ln41_fu_1152_p1;
wire  signed [63:0] sext_ln42_fu_1175_p1;
wire  signed [63:0] sext_ln41_1_fu_1256_p1;
wire  signed [63:0] sext_ln42_1_fu_1323_p1;
wire  signed [31:0] sext_ln35_2_fu_669_p1;
wire  signed [31:0] sext_ln36_2_fu_761_p1;
wire  signed [31:0] sext_ln37_2_fu_852_p1;
wire  signed [31:0] sext_ln38_2_fu_943_p1;
wire  signed [31:0] sext_ln39_2_fu_1034_p1;
wire  signed [31:0] sext_ln40_2_fu_1125_p1;
wire  signed [31:0] sext_ln41_2_fu_1251_p1;
wire  signed [31:0] sext_ln42_2_fu_1319_p1;
wire   [31:0] zext_ln31_fu_386_p1;
wire   [33:0] tmp_fu_401_p3;
wire   [33:0] or_ln36_1_fu_414_p2;
wire   [33:0] or_ln37_1_fu_429_p2;
wire   [33:0] or_ln38_1_fu_444_p2;
wire   [33:0] or_ln39_1_fu_459_p2;
wire   [33:0] or_ln40_1_fu_474_p2;
wire   [33:0] or_ln41_1_fu_489_p2;
wire   [33:0] or_ln42_1_fu_504_p2;
wire   [31:0] add_ln33_fu_526_p2;
wire   [31:0] sub_ln33_fu_539_p2;
wire   [28:0] p_lshr_fu_544_p4;
wire   [0:0] tmp_9_fu_531_p3;
wire   [28:0] sub_ln33_1_fu_554_p2;
wire   [28:0] tmp_10_fu_560_p4;
wire   [0:0] tmp_8_fu_519_p3;
wire   [28:0] select_ln33_fu_570_p3;
wire   [28:0] select_ln33_1_fu_578_p3;
wire   [31:0] add_ln35_fu_599_p2;
wire   [31:0] shl_ln35_fu_610_p2;
wire   [31:0] add_ln35_1_fu_615_p2;
wire   [0:0] tmp_13_fu_639_p3;
wire   [0:0] temp_fu_647_p2;
wire   [0:0] tmp_12_fu_631_p3;
wire   [25:0] select_ln35_fu_653_p3;
wire   [25:0] trunc_ln_fu_621_p4;
wire   [25:0] temp_1_fu_661_p3;
wire   [31:0] add_ln35_2_fu_674_p2;
wire   [31:0] add_ln36_fu_691_p2;
wire   [31:0] shl_ln36_fu_702_p2;
wire   [31:0] add_ln36_1_fu_707_p2;
wire   [0:0] tmp_15_fu_731_p3;
wire   [0:0] temp_2_fu_739_p2;
wire   [0:0] tmp_14_fu_723_p3;
wire   [25:0] select_ln36_fu_745_p3;
wire   [25:0] trunc_ln1_fu_713_p4;
wire   [25:0] temp_3_fu_753_p3;
wire   [31:0] add_ln36_2_fu_766_p2;
wire   [31:0] add_ln37_fu_782_p2;
wire   [31:0] shl_ln37_fu_793_p2;
wire   [31:0] add_ln37_1_fu_798_p2;
wire   [0:0] tmp_17_fu_822_p3;
wire   [0:0] temp_4_fu_830_p2;
wire   [0:0] tmp_16_fu_814_p3;
wire   [25:0] select_ln37_fu_836_p3;
wire   [25:0] trunc_ln2_fu_804_p4;
wire   [25:0] temp_5_fu_844_p3;
wire   [31:0] add_ln37_2_fu_857_p2;
wire   [31:0] add_ln38_fu_873_p2;
wire   [31:0] shl_ln38_fu_884_p2;
wire   [31:0] add_ln38_1_fu_889_p2;
wire   [0:0] tmp_19_fu_913_p3;
wire   [0:0] temp_6_fu_921_p2;
wire   [0:0] tmp_18_fu_905_p3;
wire   [25:0] select_ln38_fu_927_p3;
wire   [25:0] trunc_ln3_fu_895_p4;
wire   [25:0] temp_7_fu_935_p3;
wire   [31:0] add_ln38_2_fu_948_p2;
wire   [31:0] add_ln39_fu_964_p2;
wire   [31:0] shl_ln39_fu_975_p2;
wire   [31:0] add_ln39_1_fu_980_p2;
wire   [0:0] tmp_21_fu_1004_p3;
wire   [0:0] temp_8_fu_1012_p2;
wire   [0:0] tmp_20_fu_996_p3;
wire   [25:0] select_ln39_fu_1018_p3;
wire   [25:0] trunc_ln4_fu_986_p4;
wire   [25:0] temp_9_fu_1026_p3;
wire   [31:0] add_ln39_2_fu_1039_p2;
wire   [31:0] add_ln40_fu_1055_p2;
wire   [31:0] shl_ln40_fu_1066_p2;
wire   [31:0] add_ln40_1_fu_1071_p2;
wire   [0:0] tmp_23_fu_1095_p3;
wire   [0:0] temp_10_fu_1103_p2;
wire   [0:0] tmp_22_fu_1087_p3;
wire   [25:0] select_ln40_fu_1109_p3;
wire   [25:0] trunc_ln5_fu_1077_p4;
wire   [25:0] temp_11_fu_1117_p3;
wire   [31:0] add_ln40_2_fu_1130_p2;
wire   [31:0] or_ln41_fu_1140_p2;
wire   [31:0] add_ln41_fu_1146_p2;
wire   [31:0] or_ln42_fu_1163_p2;
wire   [31:0] add_ln42_fu_1169_p2;
wire   [31:0] shl_ln41_fu_1192_p2;
wire   [31:0] add_ln41_1_fu_1197_p2;
wire   [0:0] tmp_25_fu_1221_p3;
wire   [0:0] temp_12_fu_1229_p2;
wire   [0:0] tmp_24_fu_1213_p3;
wire   [25:0] select_ln41_fu_1235_p3;
wire   [25:0] trunc_ln6_fu_1203_p4;
wire   [25:0] temp_13_fu_1243_p3;
wire   [31:0] shl_ln42_fu_1260_p2;
wire   [31:0] add_ln42_1_fu_1265_p2;
wire   [0:0] tmp_27_fu_1289_p3;
wire   [0:0] temp_14_fu_1297_p2;
wire   [0:0] tmp_26_fu_1281_p3;
wire   [25:0] select_ln42_fu_1303_p3;
wire   [25:0] trunc_ln7_fu_1271_p4;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_352 <= add_ln31_reg_1361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_352 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_340 <= add_ln31_1_reg_1366;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_340 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_0_reg_364 <= x_reg_1502;
    end else if (((icmp_ln31_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_364 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_329 <= y_reg_1374;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_0_reg_329 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln31_1_reg_1366 <= add_ln31_1_fu_381_p2;
        add_ln31_reg_1361 <= add_ln31_fu_376_p2;
        y_reg_1374 <= y_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln41_2_reg_1487 <= add_ln41_2_fu_1157_p2;
        add_ln42_2_reg_1497 <= add_ln42_2_fu_1180_p2;
        x_reg_1502 <= x_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        d_reg_1379[5 : 3] <= zext_ln32_fu_409_p1[5 : 3];
        dither_addr_1_reg_1389[5 : 3] <= tmp_2_fu_435_p3[5 : 3];
        dither_addr_2_reg_1394[5 : 3] <= tmp_3_fu_450_p3[5 : 3];
        dither_addr_3_reg_1399[5 : 3] <= tmp_4_fu_465_p3[5 : 3];
        dither_addr_4_reg_1404[5 : 3] <= tmp_5_fu_480_p3[5 : 3];
        dither_addr_5_reg_1409[5 : 3] <= tmp_6_fu_495_p3[5 : 3];
        dither_addr_6_reg_1414[5 : 3] <= tmp_7_fu_510_p3[5 : 3];
        dither_addr_reg_1384[5 : 3] <= tmp_1_fu_420_p3[5 : 3];
        tmp_11_reg_1419[31 : 3] <= tmp_11_fu_586_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_ln36_reg_1432[31 : 1] <= or_ln36_fu_685_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_ln37_reg_1442[0] <= or_ln37_fu_776_p2[0];
or_ln37_reg_1442[31 : 2] <= or_ln37_fu_776_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln38_reg_1452[31 : 2] <= or_ln38_fu_867_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln39_reg_1462[1 : 0] <= or_ln39_fu_958_p2[1 : 0];
or_ln39_reg_1462[31 : 3] <= or_ln39_fu_958_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        or_ln40_reg_1472[1] <= or_ln40_fu_1049_p2[1];
or_ln40_reg_1472[31 : 3] <= or_ln40_fu_1049_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_15_reg_1507 <= temp_15_fu_1311_p3;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dither_address0 = dither_addr_5_reg_1409;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dither_address0 = dither_addr_4_reg_1404;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dither_address0 = dither_addr_3_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dither_address0 = dither_addr_2_reg_1394;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dither_address0 = dither_addr_1_reg_1389;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dither_address0 = dither_addr_reg_1384;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dither_address0 = d_reg_1379;
    end else begin
        dither_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        dither_ce0 = 1'b1;
    end else begin
        dither_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dither_ce1 = 1'b1;
    end else begin
        dither_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_address0 = sext_ln42_1_fu_1323_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_address0 = sext_ln41_1_fu_1256_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dst_address0 = sext_ln40_1_fu_1135_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address0 = sext_ln39_1_fu_1044_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_address0 = sext_ln38_1_fu_953_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = sext_ln37_1_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address0 = sext_ln36_1_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = sext_ln35_1_fu_680_p1;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_d0 = sext_ln42_2_fu_1319_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_d0 = sext_ln41_2_fu_1251_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dst_d0 = sext_ln40_2_fu_1125_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_d0 = sext_ln39_2_fu_1034_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_d0 = sext_ln38_2_fu_943_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_d0 = sext_ln37_2_fu_852_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_d0 = sext_ln36_2_fu_761_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_d0 = sext_ln35_2_fu_669_p1;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        src_address0 = sext_ln41_fu_1152_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        src_address0 = sext_ln40_fu_1061_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        src_address0 = sext_ln39_fu_970_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address0 = sext_ln38_fu_879_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_address0 = sext_ln37_fu_788_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = sext_ln36_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address0 = sext_ln35_fu_605_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln33_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_381_p2 = (phi_mul_reg_340 + src_linesize);

assign add_ln31_fu_376_p2 = (phi_mul1_reg_352 + dst_linesize);

assign add_ln33_fu_526_p2 = (width + 32'd7);

assign add_ln35_1_fu_615_p2 = (dither_q0 + shl_ln35_fu_610_p2);

assign add_ln35_2_fu_674_p2 = (phi_mul1_reg_352 + x_0_reg_364);

assign add_ln35_fu_599_p2 = (phi_mul_reg_340 + x_0_reg_364);

assign add_ln36_1_fu_707_p2 = (dither_q0 + shl_ln36_fu_702_p2);

assign add_ln36_2_fu_766_p2 = (or_ln36_reg_1432 + phi_mul1_reg_352);

assign add_ln36_fu_691_p2 = (or_ln36_fu_685_p2 + phi_mul_reg_340);

assign add_ln37_1_fu_798_p2 = (dither_q0 + shl_ln37_fu_793_p2);

assign add_ln37_2_fu_857_p2 = (or_ln37_reg_1442 + phi_mul1_reg_352);

assign add_ln37_fu_782_p2 = (or_ln37_fu_776_p2 + phi_mul_reg_340);

assign add_ln38_1_fu_889_p2 = (dither_q0 + shl_ln38_fu_884_p2);

assign add_ln38_2_fu_948_p2 = (or_ln38_reg_1452 + phi_mul1_reg_352);

assign add_ln38_fu_873_p2 = (or_ln38_fu_867_p2 + phi_mul_reg_340);

assign add_ln39_1_fu_980_p2 = (dither_q0 + shl_ln39_fu_975_p2);

assign add_ln39_2_fu_1039_p2 = (or_ln39_reg_1462 + phi_mul1_reg_352);

assign add_ln39_fu_964_p2 = (or_ln39_fu_958_p2 + phi_mul_reg_340);

assign add_ln40_1_fu_1071_p2 = (dither_q0 + shl_ln40_fu_1066_p2);

assign add_ln40_2_fu_1130_p2 = (or_ln40_reg_1472 + phi_mul1_reg_352);

assign add_ln40_fu_1055_p2 = (or_ln40_fu_1049_p2 + phi_mul_reg_340);

assign add_ln41_1_fu_1197_p2 = (dither_q0 + shl_ln41_fu_1192_p2);

assign add_ln41_2_fu_1157_p2 = (or_ln41_fu_1140_p2 + phi_mul1_reg_352);

assign add_ln41_fu_1146_p2 = (or_ln41_fu_1140_p2 + phi_mul_reg_340);

assign add_ln42_1_fu_1265_p2 = (dither_q1 + shl_ln42_fu_1260_p2);

assign add_ln42_2_fu_1180_p2 = (or_ln42_fu_1163_p2 + phi_mul1_reg_352);

assign add_ln42_fu_1169_p2 = (or_ln42_fu_1163_p2 + phi_mul_reg_340);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dither_address1 = dither_addr_6_reg_1414;

assign icmp_ln31_fu_390_p2 = (($signed(zext_ln31_fu_386_p1) < $signed(height)) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_594_p2 = ((x_0_reg_364 == tmp_11_reg_1419) ? 1'b1 : 1'b0);

assign or_ln36_1_fu_414_p2 = (tmp_fu_401_p3 | 34'd1);

assign or_ln36_fu_685_p2 = (x_0_reg_364 | 32'd1);

assign or_ln37_1_fu_429_p2 = (tmp_fu_401_p3 | 34'd2);

assign or_ln37_fu_776_p2 = (x_0_reg_364 | 32'd2);

assign or_ln38_1_fu_444_p2 = (tmp_fu_401_p3 | 34'd3);

assign or_ln38_fu_867_p2 = (x_0_reg_364 | 32'd3);

assign or_ln39_1_fu_459_p2 = (tmp_fu_401_p3 | 34'd4);

assign or_ln39_fu_958_p2 = (x_0_reg_364 | 32'd4);

assign or_ln40_1_fu_474_p2 = (tmp_fu_401_p3 | 34'd5);

assign or_ln40_fu_1049_p2 = (x_0_reg_364 | 32'd5);

assign or_ln41_1_fu_489_p2 = (tmp_fu_401_p3 | 34'd6);

assign or_ln41_fu_1140_p2 = (x_0_reg_364 | 32'd6);

assign or_ln42_1_fu_504_p2 = (tmp_fu_401_p3 | 34'd7);

assign or_ln42_fu_1163_p2 = (x_0_reg_364 | 32'd7);

assign p_lshr_fu_544_p4 = {{sub_ln33_fu_539_p2[31:3]}};

assign select_ln33_1_fu_578_p3 = ((tmp_8_fu_519_p3[0:0] === 1'b1) ? 29'd0 : select_ln33_fu_570_p3);

assign select_ln33_fu_570_p3 = ((tmp_9_fu_531_p3[0:0] === 1'b1) ? sub_ln33_1_fu_554_p2 : tmp_10_fu_560_p4);

assign select_ln35_fu_653_p3 = ((temp_fu_647_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln36_fu_745_p3 = ((temp_2_fu_739_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln37_fu_836_p3 = ((temp_4_fu_830_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln38_fu_927_p3 = ((temp_6_fu_921_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln39_fu_1018_p3 = ((temp_8_fu_1012_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln40_fu_1109_p3 = ((temp_10_fu_1103_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln41_fu_1235_p3 = ((temp_12_fu_1229_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign select_ln42_fu_1303_p3 = ((temp_14_fu_1297_p2[0:0] === 1'b1) ? 26'd67108863 : 26'd0);

assign sext_ln35_1_fu_680_p1 = $signed(add_ln35_2_fu_674_p2);

assign sext_ln35_2_fu_669_p1 = $signed(temp_1_fu_661_p3);

assign sext_ln35_fu_605_p1 = $signed(add_ln35_fu_599_p2);

assign sext_ln36_1_fu_771_p1 = $signed(add_ln36_2_fu_766_p2);

assign sext_ln36_2_fu_761_p1 = $signed(temp_3_fu_753_p3);

assign sext_ln36_fu_697_p1 = $signed(add_ln36_fu_691_p2);

assign sext_ln37_1_fu_862_p1 = $signed(add_ln37_2_fu_857_p2);

assign sext_ln37_2_fu_852_p1 = $signed(temp_5_fu_844_p3);

assign sext_ln37_fu_788_p1 = $signed(add_ln37_fu_782_p2);

assign sext_ln38_1_fu_953_p1 = $signed(add_ln38_2_fu_948_p2);

assign sext_ln38_2_fu_943_p1 = $signed(temp_7_fu_935_p3);

assign sext_ln38_fu_879_p1 = $signed(add_ln38_fu_873_p2);

assign sext_ln39_1_fu_1044_p1 = $signed(add_ln39_2_fu_1039_p2);

assign sext_ln39_2_fu_1034_p1 = $signed(temp_9_fu_1026_p3);

assign sext_ln39_fu_970_p1 = $signed(add_ln39_fu_964_p2);

assign sext_ln40_1_fu_1135_p1 = $signed(add_ln40_2_fu_1130_p2);

assign sext_ln40_2_fu_1125_p1 = $signed(temp_11_fu_1117_p3);

assign sext_ln40_fu_1061_p1 = $signed(add_ln40_fu_1055_p2);

assign sext_ln41_1_fu_1256_p1 = $signed(add_ln41_2_reg_1487);

assign sext_ln41_2_fu_1251_p1 = $signed(temp_13_fu_1243_p3);

assign sext_ln41_fu_1152_p1 = $signed(add_ln41_fu_1146_p2);

assign sext_ln42_1_fu_1323_p1 = $signed(add_ln42_2_reg_1497);

assign sext_ln42_2_fu_1319_p1 = $signed(temp_15_reg_1507);

assign sext_ln42_fu_1175_p1 = $signed(add_ln42_fu_1169_p2);

assign shl_ln35_fu_610_p2 = src_q0 << log2_scale;

assign shl_ln36_fu_702_p2 = src_q0 << log2_scale;

assign shl_ln37_fu_793_p2 = src_q0 << log2_scale;

assign shl_ln38_fu_884_p2 = src_q0 << log2_scale;

assign shl_ln39_fu_975_p2 = src_q0 << log2_scale;

assign shl_ln40_fu_1066_p2 = src_q0 << log2_scale;

assign shl_ln41_fu_1192_p2 = src_q0 << log2_scale;

assign shl_ln42_fu_1260_p2 = src_q1 << log2_scale;

assign src_address1 = sext_ln42_fu_1175_p1;

assign sub_ln33_1_fu_554_p2 = (29'd0 - p_lshr_fu_544_p4);

assign sub_ln33_fu_539_p2 = ($signed(32'd4294967289) - $signed(width));

assign temp_10_fu_1103_p2 = (tmp_23_fu_1095_p3 ^ 1'd1);

assign temp_11_fu_1117_p3 = ((tmp_22_fu_1087_p3[0:0] === 1'b1) ? select_ln40_fu_1109_p3 : trunc_ln5_fu_1077_p4);

assign temp_12_fu_1229_p2 = (tmp_25_fu_1221_p3 ^ 1'd1);

assign temp_13_fu_1243_p3 = ((tmp_24_fu_1213_p3[0:0] === 1'b1) ? select_ln41_fu_1235_p3 : trunc_ln6_fu_1203_p4);

assign temp_14_fu_1297_p2 = (tmp_27_fu_1289_p3 ^ 1'd1);

assign temp_15_fu_1311_p3 = ((tmp_26_fu_1281_p3[0:0] === 1'b1) ? select_ln42_fu_1303_p3 : trunc_ln7_fu_1271_p4);

assign temp_1_fu_661_p3 = ((tmp_12_fu_631_p3[0:0] === 1'b1) ? select_ln35_fu_653_p3 : trunc_ln_fu_621_p4);

assign temp_2_fu_739_p2 = (tmp_15_fu_731_p3 ^ 1'd1);

assign temp_3_fu_753_p3 = ((tmp_14_fu_723_p3[0:0] === 1'b1) ? select_ln36_fu_745_p3 : trunc_ln1_fu_713_p4);

assign temp_4_fu_830_p2 = (tmp_17_fu_822_p3 ^ 1'd1);

assign temp_5_fu_844_p3 = ((tmp_16_fu_814_p3[0:0] === 1'b1) ? select_ln37_fu_836_p3 : trunc_ln2_fu_804_p4);

assign temp_6_fu_921_p2 = (tmp_19_fu_913_p3 ^ 1'd1);

assign temp_7_fu_935_p3 = ((tmp_18_fu_905_p3[0:0] === 1'b1) ? select_ln38_fu_927_p3 : trunc_ln3_fu_895_p4);

assign temp_8_fu_1012_p2 = (tmp_21_fu_1004_p3 ^ 1'd1);

assign temp_9_fu_1026_p3 = ((tmp_20_fu_996_p3[0:0] === 1'b1) ? select_ln39_fu_1018_p3 : trunc_ln4_fu_986_p4);

assign temp_fu_647_p2 = (tmp_13_fu_639_p3 ^ 1'd1);

assign tmp_10_fu_560_p4 = {{add_ln33_fu_526_p2[31:3]}};

assign tmp_11_fu_586_p3 = {{select_ln33_1_fu_578_p3}, {3'd0}};

assign tmp_12_fu_631_p3 = add_ln35_1_fu_615_p2[32'd14];

assign tmp_13_fu_639_p3 = add_ln35_1_fu_615_p2[32'd31];

assign tmp_14_fu_723_p3 = add_ln36_1_fu_707_p2[32'd14];

assign tmp_15_fu_731_p3 = add_ln36_1_fu_707_p2[32'd31];

assign tmp_16_fu_814_p3 = add_ln37_1_fu_798_p2[32'd14];

assign tmp_17_fu_822_p3 = add_ln37_1_fu_798_p2[32'd31];

assign tmp_18_fu_905_p3 = add_ln38_1_fu_889_p2[32'd14];

assign tmp_19_fu_913_p3 = add_ln38_1_fu_889_p2[32'd31];

assign tmp_1_fu_420_p3 = {{30'd0}, {or_ln36_1_fu_414_p2}};

assign tmp_20_fu_996_p3 = add_ln39_1_fu_980_p2[32'd14];

assign tmp_21_fu_1004_p3 = add_ln39_1_fu_980_p2[32'd31];

assign tmp_22_fu_1087_p3 = add_ln40_1_fu_1071_p2[32'd14];

assign tmp_23_fu_1095_p3 = add_ln40_1_fu_1071_p2[32'd31];

assign tmp_24_fu_1213_p3 = add_ln41_1_fu_1197_p2[32'd14];

assign tmp_25_fu_1221_p3 = add_ln41_1_fu_1197_p2[32'd31];

assign tmp_26_fu_1281_p3 = add_ln42_1_fu_1265_p2[32'd14];

assign tmp_27_fu_1289_p3 = add_ln42_1_fu_1265_p2[32'd31];

assign tmp_2_fu_435_p3 = {{30'd0}, {or_ln37_1_fu_429_p2}};

assign tmp_3_fu_450_p3 = {{30'd0}, {or_ln38_1_fu_444_p2}};

assign tmp_4_fu_465_p3 = {{30'd0}, {or_ln39_1_fu_459_p2}};

assign tmp_5_fu_480_p3 = {{30'd0}, {or_ln40_1_fu_474_p2}};

assign tmp_6_fu_495_p3 = {{30'd0}, {or_ln41_1_fu_489_p2}};

assign tmp_7_fu_510_p3 = {{30'd0}, {or_ln42_1_fu_504_p2}};

assign tmp_8_fu_519_p3 = width[32'd31];

assign tmp_9_fu_531_p3 = add_ln33_fu_526_p2[32'd31];

assign tmp_fu_401_p3 = {{y_0_reg_329}, {3'd0}};

assign trunc_ln1_fu_713_p4 = {{add_ln36_1_fu_707_p2[31:6]}};

assign trunc_ln2_fu_804_p4 = {{add_ln37_1_fu_798_p2[31:6]}};

assign trunc_ln3_fu_895_p4 = {{add_ln38_1_fu_889_p2[31:6]}};

assign trunc_ln4_fu_986_p4 = {{add_ln39_1_fu_980_p2[31:6]}};

assign trunc_ln5_fu_1077_p4 = {{add_ln40_1_fu_1071_p2[31:6]}};

assign trunc_ln6_fu_1203_p4 = {{add_ln41_1_fu_1197_p2[31:6]}};

assign trunc_ln7_fu_1271_p4 = {{add_ln42_1_fu_1265_p2[31:6]}};

assign trunc_ln_fu_621_p4 = {{add_ln35_1_fu_615_p2[31:6]}};

assign x_fu_1186_p2 = (32'd8 + x_0_reg_364);

assign y_fu_395_p2 = (y_0_reg_329 + 31'd1);

assign zext_ln31_fu_386_p1 = y_0_reg_329;

assign zext_ln32_fu_409_p1 = tmp_fu_401_p3;

always @ (posedge ap_clk) begin
    d_reg_1379[2:0] <= 3'b000;
    dither_addr_reg_1384[2:0] <= 3'b001;
    dither_addr_1_reg_1389[2:0] <= 3'b010;
    dither_addr_2_reg_1394[2:0] <= 3'b011;
    dither_addr_3_reg_1399[2:0] <= 3'b100;
    dither_addr_4_reg_1404[2:0] <= 3'b101;
    dither_addr_5_reg_1409[2:0] <= 3'b110;
    dither_addr_6_reg_1414[2:0] <= 3'b111;
    tmp_11_reg_1419[2:0] <= 3'b000;
    or_ln36_reg_1432[0] <= 1'b1;
    or_ln37_reg_1442[1] <= 1'b1;
    or_ln38_reg_1452[1:0] <= 2'b11;
    or_ln39_reg_1462[2] <= 1'b1;
    or_ln40_reg_1472[0] <= 1'b1;
    or_ln40_reg_1472[2] <= 1'b1;
end

endmodule //store_slice_c
