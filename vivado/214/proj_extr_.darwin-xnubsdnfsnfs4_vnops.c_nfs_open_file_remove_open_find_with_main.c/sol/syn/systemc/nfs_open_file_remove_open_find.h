// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _nfs_open_file_remove_open_find_HH_
#define _nfs_open_file_remove_open_find_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct nfs_open_file_remove_open_find : public sc_module {
    // Port declarations 32
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > nofp_nof_access;
    sc_in< sc_lv<32> > nofp_nof_deny;
    sc_in< sc_lv<32> > nofp_nof_r;
    sc_in< sc_lv<32> > nofp_nof_d_r;
    sc_in< sc_lv<32> > nofp_nof_rw;
    sc_in< sc_lv<32> > nofp_nof_d_rw;
    sc_in< sc_lv<32> > nofp_nof_r_dw;
    sc_in< sc_lv<32> > nofp_nof_d_r_dw;
    sc_in< sc_lv<32> > nofp_nof_rw_dw;
    sc_in< sc_lv<32> > nofp_nof_d_rw_dw;
    sc_in< sc_lv<32> > nofp_nof_r_drw;
    sc_in< sc_lv<32> > nofp_nof_d_r_drw;
    sc_in< sc_lv<32> > nofp_nof_w;
    sc_in< sc_lv<32> > nofp_nof_d_w;
    sc_in< sc_lv<32> > nofp_nof_w_dw;
    sc_in< sc_lv<32> > nofp_nof_d_w_dw;
    sc_in< sc_lv<32> > nofp_nof_w_drw;
    sc_in< sc_lv<32> > nofp_nof_d_w_drw;
    sc_in< sc_lv<32> > nofp_nof_rw_drw;
    sc_in< sc_lv<32> > nofp_nof_d_rw_drw;
    sc_in< sc_lv<32> > accessMode;
    sc_in< sc_lv<32> > denyMode;
    sc_out< sc_lv<32> > newAccessMode;
    sc_out< sc_logic > newAccessMode_ap_vld;
    sc_out< sc_lv<32> > newDenyMode;
    sc_out< sc_logic > newDenyMode_ap_vld;
    sc_out< sc_lv<32> > delegated;
    sc_out< sc_logic > delegated_ap_vld;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    nfs_open_file_remove_open_find(sc_module_name name);
    SC_HAS_PROCESS(nfs_open_file_remove_open_find);

    ~nfs_open_file_remove_open_find();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<32> > or_ln75_fu_149_p2;
    sc_signal< sc_lv<1> > icmp_ln74_fu_125_p2;
    sc_signal< sc_lv<1> > icmp_ln84_fu_131_p2;
    sc_signal< sc_lv<1> > xor_ln74_fu_161_p2;
    sc_signal< sc_lv<1> > icmp_ln75_1_fu_173_p2;
    sc_signal< sc_lv<1> > and_ln75_fu_179_p2;
    sc_signal< sc_lv<1> > icmp_ln94_fu_143_p2;
    sc_signal< sc_lv<1> > xor_ln75_fu_185_p2;
    sc_signal< sc_lv<1> > and_ln84_fu_167_p2;
    sc_signal< sc_lv<1> > icmp_ln75_fu_155_p2;
    sc_signal< sc_lv<1> > icmp_ln76_fu_137_p2;
    sc_signal< sc_lv<1> > or_ln75_1_fu_197_p2;
    sc_signal< sc_lv<1> > and_ln75_1_fu_191_p2;
    sc_signal< sc_lv<1> > and_ln75_2_fu_203_p2;
    sc_signal< sc_lv<1> > select_ln75_fu_209_p3;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_and_ln75_1_fu_191_p2();
    void thread_and_ln75_2_fu_203_p2();
    void thread_and_ln75_fu_179_p2();
    void thread_and_ln84_fu_167_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_delegated();
    void thread_delegated_ap_vld();
    void thread_icmp_ln74_fu_125_p2();
    void thread_icmp_ln75_1_fu_173_p2();
    void thread_icmp_ln75_fu_155_p2();
    void thread_icmp_ln76_fu_137_p2();
    void thread_icmp_ln84_fu_131_p2();
    void thread_icmp_ln94_fu_143_p2();
    void thread_newAccessMode();
    void thread_newAccessMode_ap_vld();
    void thread_newDenyMode();
    void thread_newDenyMode_ap_vld();
    void thread_or_ln75_1_fu_197_p2();
    void thread_or_ln75_fu_149_p2();
    void thread_select_ln75_fu_209_p3();
    void thread_xor_ln74_fu_161_p2();
    void thread_xor_ln75_fu_185_p2();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
