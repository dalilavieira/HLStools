// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "nfs_open_file_remove_open_find.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nfs_open_file_remove_open_find::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nfs_open_file_remove_open_find::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> nfs_open_file_remove_open_find::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> nfs_open_file_remove_open_find::ap_const_lv1_1 = "1";
const sc_lv<1> nfs_open_file_remove_open_find::ap_const_lv1_0 = "0";
const bool nfs_open_file_remove_open_find::ap_const_boolean_1 = true;

nfs_open_file_remove_open_find::nfs_open_file_remove_open_find(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln75_1_fu_191_p2);
    sensitive << ( icmp_ln94_fu_143_p2 );
    sensitive << ( xor_ln75_fu_185_p2 );

    SC_METHOD(thread_and_ln75_2_fu_203_p2);
    sensitive << ( icmp_ln75_fu_155_p2 );
    sensitive << ( icmp_ln76_fu_137_p2 );

    SC_METHOD(thread_and_ln75_fu_179_p2);
    sensitive << ( icmp_ln74_fu_125_p2 );
    sensitive << ( icmp_ln75_1_fu_173_p2 );

    SC_METHOD(thread_and_ln84_fu_167_p2);
    sensitive << ( icmp_ln84_fu_131_p2 );
    sensitive << ( xor_ln74_fu_161_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_delegated);
    sensitive << ( ap_start );
    sensitive << ( select_ln75_fu_209_p3 );

    SC_METHOD(thread_delegated_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_icmp_ln74_fu_125_p2);
    sensitive << ( ap_start );
    sensitive << ( denyMode );

    SC_METHOD(thread_icmp_ln75_1_fu_173_p2);
    sensitive << ( ap_start );
    sensitive << ( accessMode );

    SC_METHOD(thread_icmp_ln75_fu_155_p2);
    sensitive << ( ap_start );
    sensitive << ( or_ln75_fu_149_p2 );
    sensitive << ( or_ln75_1_fu_197_p2 );

    SC_METHOD(thread_icmp_ln76_fu_137_p2);
    sensitive << ( ap_start );
    sensitive << ( nofp_nof_d_r );
    sensitive << ( or_ln75_1_fu_197_p2 );

    SC_METHOD(thread_icmp_ln84_fu_131_p2);
    sensitive << ( ap_start );
    sensitive << ( accessMode );

    SC_METHOD(thread_icmp_ln94_fu_143_p2);
    sensitive << ( ap_start );
    sensitive << ( nofp_nof_d_r_drw );
    sensitive << ( or_ln75_1_fu_197_p2 );

    SC_METHOD(thread_newAccessMode);
    sensitive << ( ap_start );
    sensitive << ( nofp_nof_access );

    SC_METHOD(thread_newAccessMode_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_newDenyMode);
    sensitive << ( ap_start );
    sensitive << ( nofp_nof_deny );

    SC_METHOD(thread_newDenyMode_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_or_ln75_1_fu_197_p2);
    sensitive << ( and_ln75_fu_179_p2 );
    sensitive << ( and_ln84_fu_167_p2 );

    SC_METHOD(thread_or_ln75_fu_149_p2);
    sensitive << ( accessMode );
    sensitive << ( denyMode );

    SC_METHOD(thread_select_ln75_fu_209_p3);
    sensitive << ( or_ln75_1_fu_197_p2 );
    sensitive << ( and_ln75_1_fu_191_p2 );
    sensitive << ( and_ln75_2_fu_203_p2 );

    SC_METHOD(thread_xor_ln74_fu_161_p2);
    sensitive << ( icmp_ln74_fu_125_p2 );

    SC_METHOD(thread_xor_ln75_fu_185_p2);
    sensitive << ( and_ln75_fu_179_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nfs_open_file_remove_open_find_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, nofp_nof_access, "(port)nofp_nof_access");
    sc_trace(mVcdFile, nofp_nof_deny, "(port)nofp_nof_deny");
    sc_trace(mVcdFile, nofp_nof_r, "(port)nofp_nof_r");
    sc_trace(mVcdFile, nofp_nof_d_r, "(port)nofp_nof_d_r");
    sc_trace(mVcdFile, nofp_nof_rw, "(port)nofp_nof_rw");
    sc_trace(mVcdFile, nofp_nof_d_rw, "(port)nofp_nof_d_rw");
    sc_trace(mVcdFile, nofp_nof_r_dw, "(port)nofp_nof_r_dw");
    sc_trace(mVcdFile, nofp_nof_d_r_dw, "(port)nofp_nof_d_r_dw");
    sc_trace(mVcdFile, nofp_nof_rw_dw, "(port)nofp_nof_rw_dw");
    sc_trace(mVcdFile, nofp_nof_d_rw_dw, "(port)nofp_nof_d_rw_dw");
    sc_trace(mVcdFile, nofp_nof_r_drw, "(port)nofp_nof_r_drw");
    sc_trace(mVcdFile, nofp_nof_d_r_drw, "(port)nofp_nof_d_r_drw");
    sc_trace(mVcdFile, nofp_nof_w, "(port)nofp_nof_w");
    sc_trace(mVcdFile, nofp_nof_d_w, "(port)nofp_nof_d_w");
    sc_trace(mVcdFile, nofp_nof_w_dw, "(port)nofp_nof_w_dw");
    sc_trace(mVcdFile, nofp_nof_d_w_dw, "(port)nofp_nof_d_w_dw");
    sc_trace(mVcdFile, nofp_nof_w_drw, "(port)nofp_nof_w_drw");
    sc_trace(mVcdFile, nofp_nof_d_w_drw, "(port)nofp_nof_d_w_drw");
    sc_trace(mVcdFile, nofp_nof_rw_drw, "(port)nofp_nof_rw_drw");
    sc_trace(mVcdFile, nofp_nof_d_rw_drw, "(port)nofp_nof_d_rw_drw");
    sc_trace(mVcdFile, accessMode, "(port)accessMode");
    sc_trace(mVcdFile, denyMode, "(port)denyMode");
    sc_trace(mVcdFile, newAccessMode, "(port)newAccessMode");
    sc_trace(mVcdFile, newAccessMode_ap_vld, "(port)newAccessMode_ap_vld");
    sc_trace(mVcdFile, newDenyMode, "(port)newDenyMode");
    sc_trace(mVcdFile, newDenyMode_ap_vld, "(port)newDenyMode_ap_vld");
    sc_trace(mVcdFile, delegated, "(port)delegated");
    sc_trace(mVcdFile, delegated_ap_vld, "(port)delegated_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, or_ln75_fu_149_p2, "or_ln75_fu_149_p2");
    sc_trace(mVcdFile, icmp_ln74_fu_125_p2, "icmp_ln74_fu_125_p2");
    sc_trace(mVcdFile, icmp_ln84_fu_131_p2, "icmp_ln84_fu_131_p2");
    sc_trace(mVcdFile, xor_ln74_fu_161_p2, "xor_ln74_fu_161_p2");
    sc_trace(mVcdFile, icmp_ln75_1_fu_173_p2, "icmp_ln75_1_fu_173_p2");
    sc_trace(mVcdFile, and_ln75_fu_179_p2, "and_ln75_fu_179_p2");
    sc_trace(mVcdFile, icmp_ln94_fu_143_p2, "icmp_ln94_fu_143_p2");
    sc_trace(mVcdFile, xor_ln75_fu_185_p2, "xor_ln75_fu_185_p2");
    sc_trace(mVcdFile, and_ln84_fu_167_p2, "and_ln84_fu_167_p2");
    sc_trace(mVcdFile, icmp_ln75_fu_155_p2, "icmp_ln75_fu_155_p2");
    sc_trace(mVcdFile, icmp_ln76_fu_137_p2, "icmp_ln76_fu_137_p2");
    sc_trace(mVcdFile, or_ln75_1_fu_197_p2, "or_ln75_1_fu_197_p2");
    sc_trace(mVcdFile, and_ln75_1_fu_191_p2, "and_ln75_1_fu_191_p2");
    sc_trace(mVcdFile, and_ln75_2_fu_203_p2, "and_ln75_2_fu_203_p2");
    sc_trace(mVcdFile, select_ln75_fu_209_p3, "select_ln75_fu_209_p3");
#endif

    }
    mHdltvinHandle.open("nfs_open_file_remove_open_find.hdltvin.dat");
    mHdltvoutHandle.open("nfs_open_file_remove_open_find.hdltvout.dat");
}

nfs_open_file_remove_open_find::~nfs_open_file_remove_open_find() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void nfs_open_file_remove_open_find::thread_and_ln75_1_fu_191_p2() {
    and_ln75_1_fu_191_p2 = (icmp_ln94_fu_143_p2.read() & xor_ln75_fu_185_p2.read());
}

void nfs_open_file_remove_open_find::thread_and_ln75_2_fu_203_p2() {
    and_ln75_2_fu_203_p2 = (icmp_ln75_fu_155_p2.read() & icmp_ln76_fu_137_p2.read());
}

void nfs_open_file_remove_open_find::thread_and_ln75_fu_179_p2() {
    and_ln75_fu_179_p2 = (icmp_ln74_fu_125_p2.read() & icmp_ln75_1_fu_173_p2.read());
}

void nfs_open_file_remove_open_find::thread_and_ln84_fu_167_p2() {
    and_ln84_fu_167_p2 = (icmp_ln84_fu_131_p2.read() & xor_ln74_fu_161_p2.read());
}

void nfs_open_file_remove_open_find::thread_ap_done() {
    ap_done = ap_start.read();
}

void nfs_open_file_remove_open_find::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void nfs_open_file_remove_open_find::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void nfs_open_file_remove_open_find::thread_delegated() {
    delegated = esl_zext<32,1>(select_ln75_fu_209_p3.read());
}

void nfs_open_file_remove_open_find::thread_delegated_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        delegated_ap_vld = ap_const_logic_1;
    } else {
        delegated_ap_vld = ap_const_logic_0;
    }
}

void nfs_open_file_remove_open_find::thread_icmp_ln74_fu_125_p2() {
    icmp_ln74_fu_125_p2 = (!denyMode.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(denyMode.read() == ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_icmp_ln75_1_fu_173_p2() {
    icmp_ln75_1_fu_173_p2 = (!accessMode.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(accessMode.read() != ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_icmp_ln75_fu_155_p2() {
    icmp_ln75_fu_155_p2 = (!or_ln75_fu_149_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln75_fu_149_p2.read() == ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_icmp_ln76_fu_137_p2() {
    icmp_ln76_fu_137_p2 = (!nofp_nof_d_r.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(nofp_nof_d_r.read() != ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_icmp_ln84_fu_131_p2() {
    icmp_ln84_fu_131_p2 = (!accessMode.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(accessMode.read() == ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_icmp_ln94_fu_143_p2() {
    icmp_ln94_fu_143_p2 = (!nofp_nof_d_r_drw.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(nofp_nof_d_r_drw.read() != ap_const_lv32_0);
}

void nfs_open_file_remove_open_find::thread_newAccessMode() {
    newAccessMode = nofp_nof_access.read();
}

void nfs_open_file_remove_open_find::thread_newAccessMode_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        newAccessMode_ap_vld = ap_const_logic_1;
    } else {
        newAccessMode_ap_vld = ap_const_logic_0;
    }
}

void nfs_open_file_remove_open_find::thread_newDenyMode() {
    newDenyMode = nofp_nof_deny.read();
}

void nfs_open_file_remove_open_find::thread_newDenyMode_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        newDenyMode_ap_vld = ap_const_logic_1;
    } else {
        newDenyMode_ap_vld = ap_const_logic_0;
    }
}

void nfs_open_file_remove_open_find::thread_or_ln75_1_fu_197_p2() {
    or_ln75_1_fu_197_p2 = (and_ln75_fu_179_p2.read() | and_ln84_fu_167_p2.read());
}

void nfs_open_file_remove_open_find::thread_or_ln75_fu_149_p2() {
    or_ln75_fu_149_p2 = (denyMode.read() | accessMode.read());
}

void nfs_open_file_remove_open_find::thread_select_ln75_fu_209_p3() {
    select_ln75_fu_209_p3 = (!or_ln75_1_fu_197_p2.read()[0].is_01())? sc_lv<1>(): ((or_ln75_1_fu_197_p2.read()[0].to_bool())? and_ln75_1_fu_191_p2.read(): and_ln75_2_fu_203_p2.read());
}

void nfs_open_file_remove_open_find::thread_xor_ln74_fu_161_p2() {
    xor_ln74_fu_161_p2 = (icmp_ln74_fu_125_p2.read() ^ ap_const_lv1_1);
}

void nfs_open_file_remove_open_find::thread_xor_ln75_fu_185_p2() {
    xor_ln75_fu_185_p2 = (and_ln75_fu_179_p2.read() ^ ap_const_lv1_1);
}

void nfs_open_file_remove_open_find::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_access\" :  \"" << nofp_nof_access.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_deny\" :  \"" << nofp_nof_deny.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_r\" :  \"" << nofp_nof_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_r\" :  \"" << nofp_nof_d_r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_rw\" :  \"" << nofp_nof_rw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_rw\" :  \"" << nofp_nof_d_rw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_r_dw\" :  \"" << nofp_nof_r_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_r_dw\" :  \"" << nofp_nof_d_r_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_rw_dw\" :  \"" << nofp_nof_rw_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_rw_dw\" :  \"" << nofp_nof_d_rw_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_r_drw\" :  \"" << nofp_nof_r_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_r_drw\" :  \"" << nofp_nof_d_r_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_w\" :  \"" << nofp_nof_w.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_w\" :  \"" << nofp_nof_d_w.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_w_dw\" :  \"" << nofp_nof_w_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_w_dw\" :  \"" << nofp_nof_d_w_dw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_w_drw\" :  \"" << nofp_nof_w_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_w_drw\" :  \"" << nofp_nof_d_w_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_rw_drw\" :  \"" << nofp_nof_rw_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nofp_nof_d_rw_drw\" :  \"" << nofp_nof_d_rw_drw.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"accessMode\" :  \"" << accessMode.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"denyMode\" :  \"" << denyMode.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"newAccessMode\" :  \"" << newAccessMode.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"newAccessMode_ap_vld\" :  \"" << newAccessMode_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"newDenyMode\" :  \"" << newDenyMode.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"newDenyMode_ap_vld\" :  \"" << newDenyMode_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"delegated\" :  \"" << delegated.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"delegated_ap_vld\" :  \"" << delegated_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

