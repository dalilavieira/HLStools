// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft5,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=934,HLS_SYN_LUT=1918,HLS_VERSION=2019_1}" *)

module fft5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_re_address0,
        out_re_ce0,
        out_re_we0,
        out_re_d0,
        out_re_address1,
        out_re_ce1,
        out_re_we1,
        out_re_d1,
        out_im_address0,
        out_im_ce0,
        out_im_we0,
        out_im_d0,
        out_im_address1,
        out_im_ce1,
        out_im_we1,
        out_im_d1,
        in_re_address0,
        in_re_ce0,
        in_re_q0,
        in_re_address1,
        in_re_ce1,
        in_re_q1,
        in_im_address0,
        in_im_ce0,
        in_im_q0,
        in_im_address1,
        in_im_ce1,
        in_im_q1,
        exptab_re_address0,
        exptab_re_ce0,
        exptab_re_q0,
        exptab_re_address1,
        exptab_re_ce1,
        exptab_re_q1,
        exptab_im_address0,
        exptab_im_ce0,
        exptab_im_q0,
        exptab_im_address1,
        exptab_im_ce1,
        exptab_im_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] out_re_address0;
output   out_re_ce0;
output   out_re_we0;
output  [31:0] out_re_d0;
output  [6:0] out_re_address1;
output   out_re_ce1;
output   out_re_we1;
output  [31:0] out_re_d1;
output  [6:0] out_im_address0;
output   out_im_ce0;
output   out_im_we0;
output  [31:0] out_im_d0;
output  [6:0] out_im_address1;
output   out_im_ce1;
output   out_im_we1;
output  [31:0] out_im_d1;
output  [6:0] in_re_address0;
output   in_re_ce0;
input  [31:0] in_re_q0;
output  [6:0] in_re_address1;
output   in_re_ce1;
input  [31:0] in_re_q1;
output  [6:0] in_im_address0;
output   in_im_ce0;
input  [31:0] in_im_q0;
output  [6:0] in_im_address1;
output   in_im_ce1;
input  [31:0] in_im_q1;
output  [0:0] exptab_re_address0;
output   exptab_re_ce0;
input  [31:0] exptab_re_q0;
output  [0:0] exptab_re_address1;
output   exptab_re_ce1;
input  [31:0] exptab_re_q1;
output  [0:0] exptab_im_address0;
output   exptab_im_ce0;
input  [31:0] exptab_im_q0;
output  [0:0] exptab_im_address1;
output   exptab_im_ce1;
input  [31:0] exptab_im_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] out_re_address0;
reg out_re_ce0;
reg out_re_we0;
reg[31:0] out_re_d0;
reg[6:0] out_re_address1;
reg out_re_ce1;
reg out_re_we1;
reg[31:0] out_re_d1;
reg[6:0] out_im_address0;
reg out_im_ce0;
reg out_im_we0;
reg[31:0] out_im_d0;
reg[6:0] out_im_address1;
reg out_im_ce1;
reg out_im_we1;
reg[31:0] out_im_d1;
reg[6:0] in_re_address0;
reg in_re_ce0;
reg[6:0] in_re_address1;
reg in_re_ce1;
reg[6:0] in_im_address0;
reg in_im_ce0;
reg[6:0] in_im_address1;
reg in_im_ce1;
reg exptab_re_ce0;
reg exptab_re_ce1;
reg exptab_im_ce0;
reg exptab_im_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_304;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [31:0] reg_308;
reg   [31:0] in_re_load_1_reg_616;
reg   [31:0] in_im_load_1_reg_622;
wire    ap_CS_fsm_state3;
wire  signed [31:0] add_ln22_fu_312_p2;
reg  signed [31:0] add_ln22_reg_669;
wire  signed [31:0] add_ln23_fu_317_p2;
reg  signed [31:0] add_ln23_reg_676;
wire  signed [31:0] sub_ln24_fu_322_p2;
reg  signed [31:0] sub_ln24_reg_682;
wire  signed [31:0] sub_ln25_fu_327_p2;
reg  signed [31:0] sub_ln25_reg_688;
wire  signed [31:0] add_ln26_fu_332_p2;
reg  signed [31:0] add_ln26_reg_694;
wire  signed [31:0] add_ln27_fu_338_p2;
reg  signed [31:0] add_ln27_reg_701;
wire  signed [31:0] sub_ln28_fu_344_p2;
reg  signed [31:0] sub_ln28_reg_707;
wire  signed [31:0] sub_ln29_fu_350_p2;
reg  signed [31:0] sub_ln29_reg_713;
wire   [31:0] add_ln32_2_fu_361_p2;
reg   [31:0] add_ln32_2_reg_719;
reg  signed [31:0] exptab_re_load_reg_724;
reg  signed [31:0] exptab_re_load_1_reg_732;
reg  signed [31:0] exptab_im_load_reg_740;
reg  signed [31:0] exptab_im_load_1_reg_748;
wire   [31:0] sub_ln34_fu_398_p2;
reg   [31:0] sub_ln34_reg_756;
wire   [31:0] sub_ln35_fu_412_p2;
reg   [31:0] sub_ln35_reg_762;
wire   [31:0] sub_ln36_fu_426_p2;
reg   [31:0] sub_ln36_reg_768;
wire   [31:0] sub_ln37_fu_440_p2;
reg   [31:0] sub_ln37_reg_774;
wire   [31:0] sub_ln38_fu_454_p2;
reg   [31:0] sub_ln38_reg_780;
wire   [31:0] sub_ln39_fu_468_p2;
reg   [31:0] sub_ln39_reg_786;
wire   [31:0] add_ln40_fu_482_p2;
reg   [31:0] add_ln40_reg_792;
wire   [31:0] add_ln41_fu_496_p2;
reg   [31:0] add_ln41_reg_798;
wire   [31:0] add_ln57_fu_558_p2;
reg   [31:0] add_ln57_reg_804;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln58_fu_564_p2;
reg   [31:0] add_ln58_reg_809;
wire   [31:0] add_ln59_fu_570_p2;
reg   [31:0] add_ln59_reg_814;
wire   [31:0] add_ln60_fu_580_p2;
reg   [31:0] add_ln60_reg_819;
wire    ap_CS_fsm_state6;
wire   [31:0] add_ln31_1_fu_372_p2;
wire   [31:0] add_ln53_fu_522_p2;
wire   [31:0] add_ln55_fu_536_p2;
wire   [31:0] add_ln32_3_fu_384_p2;
wire   [31:0] add_ln54_fu_529_p2;
wire   [31:0] add_ln56_fu_547_p2;
wire   [31:0] add_ln32_1_fu_356_p2;
wire   [31:0] add_ln31_fu_367_p2;
wire   [31:0] add_ln32_fu_378_p2;
wire   [31:0] mul_ln34_fu_390_p2;
wire   [31:0] mul_ln34_1_fu_394_p2;
wire   [31:0] mul_ln35_fu_404_p2;
wire   [31:0] mul_ln35_1_fu_408_p2;
wire   [31:0] mul_ln36_fu_418_p2;
wire   [31:0] mul_ln36_1_fu_422_p2;
wire   [31:0] mul_ln37_fu_432_p2;
wire   [31:0] mul_ln37_1_fu_436_p2;
wire   [31:0] mul_ln38_fu_446_p2;
wire   [31:0] mul_ln38_1_fu_450_p2;
wire   [31:0] mul_ln39_fu_460_p2;
wire   [31:0] mul_ln39_1_fu_464_p2;
wire   [31:0] mul_ln40_1_fu_478_p2;
wire   [31:0] mul_ln40_fu_474_p2;
wire   [31:0] mul_ln41_1_fu_492_p2;
wire   [31:0] mul_ln41_fu_488_p2;
wire   [31:0] add_ln53_1_fu_518_p2;
wire   [31:0] sub_ln44_fu_506_p2;
wire   [31:0] sub_ln48_fu_510_p2;
wire   [31:0] add_ln56_1_fu_543_p2;
wire   [31:0] add_ln57_1_fu_554_p2;
wire   [31:0] sub_ln49_fu_514_p2;
wire   [31:0] sub_ln43_fu_502_p2;
wire   [31:0] add_ln60_1_fu_576_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln22_reg_669 <= add_ln22_fu_312_p2;
        add_ln23_reg_676 <= add_ln23_fu_317_p2;
        add_ln26_reg_694 <= add_ln26_fu_332_p2;
        add_ln27_reg_701 <= add_ln27_fu_338_p2;
        add_ln32_2_reg_719 <= add_ln32_2_fu_361_p2;
        exptab_im_load_1_reg_748 <= exptab_im_q1;
        exptab_im_load_reg_740 <= exptab_im_q0;
        exptab_re_load_1_reg_732 <= exptab_re_q1;
        exptab_re_load_reg_724 <= exptab_re_q0;
        sub_ln24_reg_682 <= sub_ln24_fu_322_p2;
        sub_ln25_reg_688 <= sub_ln25_fu_327_p2;
        sub_ln28_reg_707 <= sub_ln28_fu_344_p2;
        sub_ln29_reg_713 <= sub_ln29_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln40_reg_792 <= add_ln40_fu_482_p2;
        add_ln41_reg_798 <= add_ln41_fu_496_p2;
        sub_ln34_reg_756 <= sub_ln34_fu_398_p2;
        sub_ln35_reg_762 <= sub_ln35_fu_412_p2;
        sub_ln36_reg_768 <= sub_ln36_fu_426_p2;
        sub_ln37_reg_774 <= sub_ln37_fu_440_p2;
        sub_ln38_reg_780 <= sub_ln38_fu_454_p2;
        sub_ln39_reg_786 <= sub_ln39_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln57_reg_804 <= add_ln57_fu_558_p2;
        add_ln58_reg_809 <= add_ln58_fu_564_p2;
        add_ln59_reg_814 <= add_ln59_fu_570_p2;
        add_ln60_reg_819 <= add_ln60_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_im_load_1_reg_622 <= in_im_q1;
        in_re_load_1_reg_616 <= in_re_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_304 <= in_re_q0;
        reg_308 <= in_im_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exptab_im_ce0 = 1'b1;
    end else begin
        exptab_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exptab_im_ce1 = 1'b1;
    end else begin
        exptab_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exptab_re_ce0 = 1'b1;
    end else begin
        exptab_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exptab_re_ce1 = 1'b1;
    end else begin
        exptab_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_im_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_im_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_im_address0 = 64'd3;
    end else begin
        in_im_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_im_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_im_address1 = 64'd12;
    end else begin
        in_im_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_im_ce0 = 1'b1;
    end else begin
        in_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_im_ce1 = 1'b1;
    end else begin
        in_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_re_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_re_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_re_address0 = 64'd3;
    end else begin
        in_re_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_re_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_re_address1 = 64'd12;
    end else begin
        in_re_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_re_ce0 = 1'b1;
    end else begin
        in_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_re_ce1 = 1'b1;
    end else begin
        in_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_im_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_im_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_im_address0 = 64'd0;
    end else begin
        out_im_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_im_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_im_address1 = 64'd2;
    end else begin
        out_im_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_im_ce0 = 1'b1;
    end else begin
        out_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_im_ce1 = 1'b1;
    end else begin
        out_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_im_d0 = add_ln60_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_im_d0 = add_ln54_fu_529_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_im_d0 = add_ln32_3_fu_384_p2;
    end else begin
        out_im_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_im_d1 = add_ln58_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_im_d1 = add_ln56_fu_547_p2;
    end else begin
        out_im_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_im_we0 = 1'b1;
    end else begin
        out_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_im_we1 = 1'b1;
    end else begin
        out_im_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_re_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_re_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_re_address0 = 64'd0;
    end else begin
        out_re_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_re_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_re_address1 = 64'd2;
    end else begin
        out_re_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_re_ce0 = 1'b1;
    end else begin
        out_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_re_ce1 = 1'b1;
    end else begin
        out_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_re_d0 = add_ln59_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_re_d0 = add_ln53_fu_522_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_re_d0 = add_ln31_1_fu_372_p2;
    end else begin
        out_re_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_re_d1 = add_ln57_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_re_d1 = add_ln55_fu_536_p2;
    end else begin
        out_re_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_re_we0 = 1'b1;
    end else begin
        out_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_re_we1 = 1'b1;
    end else begin
        out_re_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_312_p2 = (in_re_load_1_reg_616 + reg_304);

assign add_ln23_fu_317_p2 = (in_im_load_1_reg_622 + reg_308);

assign add_ln26_fu_332_p2 = (in_re_q1 + in_re_q0);

assign add_ln27_fu_338_p2 = (in_im_q1 + in_im_q0);

assign add_ln31_1_fu_372_p2 = ($signed(add_ln31_fu_367_p2) + $signed(add_ln26_reg_694));

assign add_ln31_fu_367_p2 = ($signed(in_re_q0) + $signed(add_ln22_reg_669));

assign add_ln32_1_fu_356_p2 = (in_im_q1 + in_im_load_1_reg_622);

assign add_ln32_2_fu_361_p2 = (add_ln32_1_fu_356_p2 + in_im_q0);

assign add_ln32_3_fu_384_p2 = (add_ln32_2_reg_719 + add_ln32_fu_378_p2);

assign add_ln32_fu_378_p2 = (reg_308 + in_im_q0);

assign add_ln40_fu_482_p2 = (mul_ln40_1_fu_478_p2 + mul_ln40_fu_474_p2);

assign add_ln41_fu_496_p2 = (mul_ln41_1_fu_492_p2 + mul_ln41_fu_488_p2);

assign add_ln53_1_fu_518_p2 = (add_ln40_reg_792 + sub_ln36_reg_768);

assign add_ln53_fu_522_p2 = (add_ln53_1_fu_518_p2 + reg_304);

assign add_ln54_fu_529_p2 = (reg_308 + sub_ln44_fu_506_p2);

assign add_ln55_fu_536_p2 = (reg_304 + sub_ln48_fu_510_p2);

assign add_ln56_1_fu_543_p2 = (sub_ln39_reg_786 + sub_ln35_reg_762);

assign add_ln56_fu_547_p2 = (add_ln56_1_fu_543_p2 + reg_308);

assign add_ln57_1_fu_554_p2 = (sub_ln38_reg_780 + sub_ln34_reg_756);

assign add_ln57_fu_558_p2 = (add_ln57_1_fu_554_p2 + reg_304);

assign add_ln58_fu_564_p2 = (reg_308 + sub_ln49_fu_514_p2);

assign add_ln59_fu_570_p2 = (reg_304 + sub_ln43_fu_502_p2);

assign add_ln60_1_fu_576_p2 = (add_ln41_reg_798 + sub_ln37_reg_774);

assign add_ln60_fu_580_p2 = (add_ln60_1_fu_576_p2 + reg_308);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign exptab_im_address0 = 64'd0;

assign exptab_im_address1 = 64'd1;

assign exptab_re_address0 = 64'd0;

assign exptab_re_address1 = 64'd1;

assign mul_ln34_1_fu_394_p2 = ($signed(exptab_re_load_1_reg_732) * $signed(add_ln22_reg_669));

assign mul_ln34_fu_390_p2 = ($signed(exptab_re_load_reg_724) * $signed(add_ln26_reg_694));

assign mul_ln35_1_fu_408_p2 = ($signed(exptab_re_load_1_reg_732) * $signed(add_ln23_reg_676));

assign mul_ln35_fu_404_p2 = ($signed(exptab_re_load_reg_724) * $signed(add_ln27_reg_701));

assign mul_ln36_1_fu_422_p2 = ($signed(exptab_re_load_1_reg_732) * $signed(add_ln26_reg_694));

assign mul_ln36_fu_418_p2 = ($signed(exptab_re_load_reg_724) * $signed(add_ln22_reg_669));

assign mul_ln37_1_fu_436_p2 = ($signed(exptab_re_load_1_reg_732) * $signed(add_ln27_reg_701));

assign mul_ln37_fu_432_p2 = ($signed(exptab_re_load_reg_724) * $signed(add_ln23_reg_676));

assign mul_ln38_1_fu_450_p2 = ($signed(exptab_im_load_1_reg_748) * $signed(sub_ln25_reg_688));

assign mul_ln38_fu_446_p2 = ($signed(exptab_im_load_reg_740) * $signed(sub_ln29_reg_713));

assign mul_ln39_1_fu_464_p2 = ($signed(exptab_im_load_1_reg_748) * $signed(sub_ln24_reg_682));

assign mul_ln39_fu_460_p2 = ($signed(exptab_im_load_reg_740) * $signed(sub_ln28_reg_707));

assign mul_ln40_1_fu_478_p2 = ($signed(exptab_im_load_1_reg_748) * $signed(sub_ln29_reg_713));

assign mul_ln40_fu_474_p2 = ($signed(exptab_im_load_reg_740) * $signed(sub_ln25_reg_688));

assign mul_ln41_1_fu_492_p2 = ($signed(exptab_im_load_1_reg_748) * $signed(sub_ln28_reg_707));

assign mul_ln41_fu_488_p2 = ($signed(exptab_im_load_reg_740) * $signed(sub_ln24_reg_682));

assign sub_ln24_fu_322_p2 = (reg_304 - in_re_load_1_reg_616);

assign sub_ln25_fu_327_p2 = (reg_308 - in_im_load_1_reg_622);

assign sub_ln28_fu_344_p2 = (in_re_q0 - in_re_q1);

assign sub_ln29_fu_350_p2 = (in_im_q0 - in_im_q1);

assign sub_ln34_fu_398_p2 = (mul_ln34_fu_390_p2 - mul_ln34_1_fu_394_p2);

assign sub_ln35_fu_412_p2 = (mul_ln35_fu_404_p2 - mul_ln35_1_fu_408_p2);

assign sub_ln36_fu_426_p2 = (mul_ln36_fu_418_p2 - mul_ln36_1_fu_422_p2);

assign sub_ln37_fu_440_p2 = (mul_ln37_fu_432_p2 - mul_ln37_1_fu_436_p2);

assign sub_ln38_fu_454_p2 = (mul_ln38_fu_446_p2 - mul_ln38_1_fu_450_p2);

assign sub_ln39_fu_468_p2 = (mul_ln39_fu_460_p2 - mul_ln39_1_fu_464_p2);

assign sub_ln43_fu_502_p2 = (sub_ln36_reg_768 - add_ln40_reg_792);

assign sub_ln44_fu_506_p2 = (sub_ln37_reg_774 - add_ln41_reg_798);

assign sub_ln48_fu_510_p2 = (sub_ln34_reg_756 - sub_ln38_reg_780);

assign sub_ln49_fu_514_p2 = (sub_ln35_reg_762 - sub_ln39_reg_786);

endmodule //fft5
