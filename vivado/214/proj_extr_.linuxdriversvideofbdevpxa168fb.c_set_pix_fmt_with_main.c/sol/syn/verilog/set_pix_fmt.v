// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="set_pix_fmt,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.119000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=195,HLS_VERSION=2019_1}" *)

module set_pix_fmt (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        var_bits_per_pixel,
        var_bits_per_pixel_ap_vld,
        var_transp_offset,
        var_transp_offset_ap_vld,
        var_transp_length,
        var_transp_length_ap_vld,
        var_blue_offset,
        var_blue_offset_ap_vld,
        var_blue_length,
        var_blue_length_ap_vld,
        var_green_offset,
        var_green_offset_ap_vld,
        var_green_length,
        var_green_length_ap_vld,
        var_red_offset,
        var_red_offset_ap_vld,
        var_red_length,
        var_red_length_ap_vld,
        pix_fmt
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] var_bits_per_pixel;
output   var_bits_per_pixel_ap_vld;
output  [31:0] var_transp_offset;
output   var_transp_offset_ap_vld;
output  [31:0] var_transp_length;
output   var_transp_length_ap_vld;
output  [31:0] var_blue_offset;
output   var_blue_offset_ap_vld;
output  [31:0] var_blue_length;
output   var_blue_length_ap_vld;
output  [31:0] var_green_offset;
output   var_green_offset_ap_vld;
output  [31:0] var_green_length;
output   var_green_length_ap_vld;
output  [31:0] var_red_offset;
output   var_red_offset_ap_vld;
output  [31:0] var_red_length;
output   var_red_length_ap_vld;
input  [31:0] pix_fmt;

reg[31:0] var_bits_per_pixel;
reg var_bits_per_pixel_ap_vld;
reg[31:0] var_transp_offset;
reg var_transp_offset_ap_vld;
reg[31:0] var_transp_length;
reg var_transp_length_ap_vld;
reg[31:0] var_blue_offset;
reg var_blue_offset_ap_vld;
reg[31:0] var_blue_length;
reg var_blue_length_ap_vld;
reg[31:0] var_green_offset;
reg var_green_offset_ap_vld;
reg[31:0] var_green_length;
reg var_green_length_ap_vld;
reg[31:0] var_red_offset;
reg var_red_offset_ap_vld;
reg[31:0] var_red_length;
reg var_red_length_ap_vld;

wire   [31:0] pix_fmt_read_read_fu_70_p2;

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_bits_per_pixel = 32'd16;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)))) begin
        var_bits_per_pixel = 32'd24;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)))) begin
        var_bits_per_pixel = 32'd32;
    end else if (((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1))) begin
        var_bits_per_pixel = 32'd8;
    end else begin
        var_bits_per_pixel = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_bits_per_pixel_ap_vld = 1'b1;
    end else begin
        var_bits_per_pixel_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_blue_length = 32'd5;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_blue_length = 32'd8;
    end else begin
        var_blue_length = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_blue_length_ap_vld = 1'b1;
    end else begin
        var_blue_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1))) begin
        var_blue_offset = 32'd11;
    end else if (((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1))) begin
        var_blue_offset = 32'd10;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)))) begin
        var_blue_offset = 32'd16;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_blue_offset = 32'd0;
    end else begin
        var_blue_offset = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_blue_offset_ap_vld = 1'b1;
    end else begin
        var_blue_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)))) begin
        var_green_length = 32'd6;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_green_length = 32'd5;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_green_length = 32'd8;
    end else begin
        var_green_length = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_green_length_ap_vld = 1'b1;
    end else begin
        var_green_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_green_offset = 32'd5;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)))) begin
        var_green_offset = 32'd8;
    end else if (((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1))) begin
        var_green_offset = 32'd0;
    end else begin
        var_green_offset = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_green_offset_ap_vld = 1'b1;
    end else begin
        var_green_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_red_length = 32'd5;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_red_length = 32'd8;
    end else begin
        var_red_length = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_red_length_ap_vld = 1'b1;
    end else begin
        var_red_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1))) begin
        var_red_offset = 32'd11;
    end else if (((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1))) begin
        var_red_offset = 32'd10;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)))) begin
        var_red_offset = 32'd16;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_red_offset = 32'd0;
    end else begin
        var_red_offset = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_red_offset_ap_vld = 1'b1;
    end else begin
        var_red_offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_transp_length = 32'd1;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)))) begin
        var_transp_length = 32'd8;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_transp_length = 32'd0;
    end else begin
        var_transp_length = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_transp_length_ap_vld = 1'b1;
    end else begin
        var_transp_length_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)))) begin
        var_transp_offset = 32'd15;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)))) begin
        var_transp_offset = 32'd24;
    end else if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_transp_offset = 32'd0;
    end else begin
        var_transp_offset = 'bx;
    end
end

always @ (*) begin
    if ((((pix_fmt_read_read_fu_70_p2 == 32'd130) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd135) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd131) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd136) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd129) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd134) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd128) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd133) & (ap_start == 1'b1)) | ((pix_fmt_read_read_fu_70_p2 == 32'd132) & (ap_start == 1'b1)))) begin
        var_transp_offset_ap_vld = 1'b1;
    end else begin
        var_transp_offset_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign pix_fmt_read_read_fu_70_p2 = pix_fmt;

endmodule //set_pix_fmt
