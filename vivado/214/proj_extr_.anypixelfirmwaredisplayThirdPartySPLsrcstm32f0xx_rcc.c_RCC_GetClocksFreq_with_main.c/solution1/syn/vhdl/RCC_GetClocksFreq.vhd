-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RCC_GetClocksFreq is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RCC_Clocks_SYSCLK_Frequency_i : IN STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_SYSCLK_Frequency_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_SYSCLK_Frequency_o_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_HCLK_Frequency_i : IN STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_HCLK_Frequency_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_HCLK_Frequency_o_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_PCLK_Frequency_i : IN STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_PCLK_Frequency_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_PCLK_Frequency_o_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_ADCCLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_ADCCLK_Frequency_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_CECCLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_CECCLK_Frequency_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_I2C1CLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_I2C1CLK_Frequency_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_USART1CLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_USART1CLK_Frequency_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_USART2CLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_USART2CLK_Frequency_ap_vld : OUT STD_LOGIC;
    RCC_Clocks_USBCLK_Frequency : OUT STD_LOGIC_VECTOR (31 downto 0);
    RCC_Clocks_USBCLK_Frequency_ap_vld : OUT STD_LOGIC );
end;


architecture behav of RCC_GetClocksFreq is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RCC_GetClocksFreq,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=38,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln_fu_125_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
        RCC_Clocks_ADCCLK_Frequency <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_125_p4),32));


    RCC_Clocks_ADCCLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RCC_Clocks_ADCCLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_ADCCLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_CECCLK_Frequency <= ap_const_lv32_0;

    RCC_Clocks_CECCLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RCC_Clocks_CECCLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_CECCLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_HCLK_Frequency_o <= RCC_Clocks_SYSCLK_Frequency_i;

    RCC_Clocks_HCLK_Frequency_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RCC_Clocks_HCLK_Frequency_o_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_HCLK_Frequency_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_I2C1CLK_Frequency <= RCC_Clocks_SYSCLK_Frequency_i;

    RCC_Clocks_I2C1CLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RCC_Clocks_I2C1CLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_I2C1CLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_PCLK_Frequency_o <= RCC_Clocks_HCLK_Frequency_i;

    RCC_Clocks_PCLK_Frequency_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RCC_Clocks_PCLK_Frequency_o_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_PCLK_Frequency_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_SYSCLK_Frequency_o <= ap_const_lv32_0;

    RCC_Clocks_SYSCLK_Frequency_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            RCC_Clocks_SYSCLK_Frequency_o_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_SYSCLK_Frequency_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_USART1CLK_Frequency <= RCC_Clocks_PCLK_Frequency_i;

    RCC_Clocks_USART1CLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RCC_Clocks_USART1CLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_USART1CLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_USART2CLK_Frequency <= RCC_Clocks_PCLK_Frequency_i;

    RCC_Clocks_USART2CLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RCC_Clocks_USART2CLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_USART2CLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    RCC_Clocks_USBCLK_Frequency <= ap_const_lv32_0;

    RCC_Clocks_USBCLK_Frequency_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RCC_Clocks_USBCLK_Frequency_ap_vld <= ap_const_logic_1;
        else 
            RCC_Clocks_USBCLK_Frequency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_125_p4 <= RCC_Clocks_PCLK_Frequency_i(31 downto 2);
end behav;
