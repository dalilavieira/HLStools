// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="RCC_GetClocksFreq,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=38,HLS_VERSION=2019_1}" *)

module RCC_GetClocksFreq (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RCC_Clocks_SYSCLK_Frequency_i,
        RCC_Clocks_SYSCLK_Frequency_o,
        RCC_Clocks_SYSCLK_Frequency_o_ap_vld,
        RCC_Clocks_HCLK_Frequency_i,
        RCC_Clocks_HCLK_Frequency_o,
        RCC_Clocks_HCLK_Frequency_o_ap_vld,
        RCC_Clocks_PCLK_Frequency_i,
        RCC_Clocks_PCLK_Frequency_o,
        RCC_Clocks_PCLK_Frequency_o_ap_vld,
        RCC_Clocks_ADCCLK_Frequency,
        RCC_Clocks_ADCCLK_Frequency_ap_vld,
        RCC_Clocks_CECCLK_Frequency,
        RCC_Clocks_CECCLK_Frequency_ap_vld,
        RCC_Clocks_I2C1CLK_Frequency,
        RCC_Clocks_I2C1CLK_Frequency_ap_vld,
        RCC_Clocks_USART1CLK_Frequency,
        RCC_Clocks_USART1CLK_Frequency_ap_vld,
        RCC_Clocks_USART2CLK_Frequency,
        RCC_Clocks_USART2CLK_Frequency_ap_vld,
        RCC_Clocks_USBCLK_Frequency,
        RCC_Clocks_USBCLK_Frequency_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] RCC_Clocks_SYSCLK_Frequency_i;
output  [31:0] RCC_Clocks_SYSCLK_Frequency_o;
output   RCC_Clocks_SYSCLK_Frequency_o_ap_vld;
input  [31:0] RCC_Clocks_HCLK_Frequency_i;
output  [31:0] RCC_Clocks_HCLK_Frequency_o;
output   RCC_Clocks_HCLK_Frequency_o_ap_vld;
input  [31:0] RCC_Clocks_PCLK_Frequency_i;
output  [31:0] RCC_Clocks_PCLK_Frequency_o;
output   RCC_Clocks_PCLK_Frequency_o_ap_vld;
output  [31:0] RCC_Clocks_ADCCLK_Frequency;
output   RCC_Clocks_ADCCLK_Frequency_ap_vld;
output  [31:0] RCC_Clocks_CECCLK_Frequency;
output   RCC_Clocks_CECCLK_Frequency_ap_vld;
output  [31:0] RCC_Clocks_I2C1CLK_Frequency;
output   RCC_Clocks_I2C1CLK_Frequency_ap_vld;
output  [31:0] RCC_Clocks_USART1CLK_Frequency;
output   RCC_Clocks_USART1CLK_Frequency_ap_vld;
output  [31:0] RCC_Clocks_USART2CLK_Frequency;
output   RCC_Clocks_USART2CLK_Frequency_ap_vld;
output  [31:0] RCC_Clocks_USBCLK_Frequency;
output   RCC_Clocks_USBCLK_Frequency_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg RCC_Clocks_SYSCLK_Frequency_o_ap_vld;
reg RCC_Clocks_HCLK_Frequency_o_ap_vld;
reg RCC_Clocks_PCLK_Frequency_o_ap_vld;
reg RCC_Clocks_ADCCLK_Frequency_ap_vld;
reg RCC_Clocks_CECCLK_Frequency_ap_vld;
reg RCC_Clocks_I2C1CLK_Frequency_ap_vld;
reg RCC_Clocks_USART1CLK_Frequency_ap_vld;
reg RCC_Clocks_USART2CLK_Frequency_ap_vld;
reg RCC_Clocks_USBCLK_Frequency_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [29:0] trunc_ln_fu_125_p4;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RCC_Clocks_ADCCLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_ADCCLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RCC_Clocks_CECCLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_CECCLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RCC_Clocks_HCLK_Frequency_o_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_HCLK_Frequency_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RCC_Clocks_I2C1CLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_I2C1CLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RCC_Clocks_PCLK_Frequency_o_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_PCLK_Frequency_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        RCC_Clocks_SYSCLK_Frequency_o_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_SYSCLK_Frequency_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        RCC_Clocks_USART1CLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_USART1CLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RCC_Clocks_USART2CLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_USART2CLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RCC_Clocks_USBCLK_Frequency_ap_vld = 1'b1;
    end else begin
        RCC_Clocks_USBCLK_Frequency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RCC_Clocks_ADCCLK_Frequency = $signed(trunc_ln_fu_125_p4);

assign RCC_Clocks_CECCLK_Frequency = 32'd0;

assign RCC_Clocks_HCLK_Frequency_o = RCC_Clocks_SYSCLK_Frequency_i;

assign RCC_Clocks_I2C1CLK_Frequency = RCC_Clocks_SYSCLK_Frequency_i;

assign RCC_Clocks_PCLK_Frequency_o = RCC_Clocks_HCLK_Frequency_i;

assign RCC_Clocks_SYSCLK_Frequency_o = 32'd0;

assign RCC_Clocks_USART1CLK_Frequency = RCC_Clocks_PCLK_Frequency_i;

assign RCC_Clocks_USART2CLK_Frequency = RCC_Clocks_PCLK_Frequency_i;

assign RCC_Clocks_USBCLK_Frequency = 32'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign trunc_ln_fu_125_p4 = {{RCC_Clocks_PCLK_Frequency_i[31:2]}};

endmodule //RCC_GetClocksFreq
