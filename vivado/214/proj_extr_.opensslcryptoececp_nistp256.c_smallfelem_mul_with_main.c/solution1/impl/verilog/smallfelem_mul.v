// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="smallfelem_mul,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.747500,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=48,HLS_SYN_FF=853,HLS_SYN_LUT=1201,HLS_VERSION=2019_1}" *)

module smallfelem_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        small1_address0,
        small1_ce0,
        small1_q0,
        small1_address1,
        small1_ce1,
        small1_q1,
        small2_address0,
        small2_ce0,
        small2_q0,
        small2_address1,
        small2_ce1,
        small2_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
output  [9:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [31:0] out_r_d1;
output  [9:0] small1_address0;
output   small1_ce0;
input  [31:0] small1_q0;
output  [9:0] small1_address1;
output   small1_ce1;
input  [31:0] small1_q1;
output  [9:0] small2_address0;
output   small2_ce0;
input  [31:0] small2_q0;
output  [9:0] small2_address1;
output   small2_ce1;
input  [31:0] small2_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[31:0] out_r_d0;
reg[9:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[31:0] out_r_d1;
reg[9:0] small1_address0;
reg small1_ce0;
reg[9:0] small1_address1;
reg small1_ce1;
reg[9:0] small2_address0;
reg small2_ce0;
reg[9:0] small2_address1;
reg small2_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] small1_load_reg_714;
wire    ap_CS_fsm_state2;
reg  signed [31:0] small2_load_reg_722;
reg  signed [31:0] small2_load_1_reg_730;
reg  signed [31:0] small1_load_1_reg_738;
wire   [31:0] a_fu_215_p2;
reg   [31:0] a_reg_766;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_reg_771;
wire   [31:0] a_1_fu_227_p2;
reg   [31:0] a_1_reg_776;
wire   [31:0] a_2_fu_247_p2;
reg   [31:0] a_2_reg_781;
reg  signed [31:0] small2_load_2_reg_786;
reg  signed [31:0] small1_load_2_reg_794;
wire   [1:0] add_ln59_2_fu_267_p2;
reg   [1:0] add_ln59_2_reg_802;
reg  signed [31:0] small2_load_3_reg_807;
reg  signed [31:0] small1_load_3_reg_815;
wire   [31:0] a_3_fu_291_p2;
reg   [31:0] a_3_reg_823;
wire    ap_CS_fsm_state4;
wire   [31:0] high_1_fu_303_p3;
reg   [31:0] high_1_reg_828;
wire   [31:0] a_4_fu_311_p2;
reg   [31:0] a_4_reg_833;
wire   [31:0] add_ln59_3_fu_354_p2;
reg   [31:0] add_ln59_3_reg_838;
wire   [31:0] a_6_fu_360_p2;
reg   [31:0] a_6_reg_843;
wire   [31:0] a_9_fu_420_p2;
reg   [31:0] a_9_reg_848;
wire   [31:0] add_ln83_1_fu_440_p2;
reg   [31:0] add_ln83_1_reg_853;
wire   [1:0] add_ln83_4_fu_446_p2;
reg   [1:0] add_ln83_4_reg_858;
wire   [31:0] a_10_fu_452_p2;
reg   [31:0] a_10_reg_863;
wire   [31:0] add_ln101_1_fu_512_p2;
reg   [31:0] add_ln101_1_reg_868;
wire   [2:0] add_ln101_5_fu_538_p2;
reg   [2:0] add_ln101_5_reg_873;
wire   [31:0] a_13_fu_544_p2;
reg   [31:0] a_13_reg_878;
wire   [31:0] a_14_fu_564_p2;
reg   [31:0] a_14_reg_883;
wire   [2:0] add_ln113_3_fu_594_p2;
reg   [2:0] add_ln113_3_reg_888;
wire   [31:0] a_15_fu_600_p2;
reg   [31:0] a_15_reg_893;
reg   [0:0] tmp_15_reg_898;
wire   [1:0] add_ln119_1_fu_612_p2;
reg   [1:0] add_ln119_1_reg_903;
wire   [31:0] add_ln101_fu_659_p2;
reg   [31:0] add_ln101_reg_908;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln113_fu_672_p2;
reg   [31:0] add_ln113_reg_913;
wire   [31:0] add_ln119_fu_681_p2;
reg   [31:0] add_ln119_reg_918;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [31:0] add_ln41_fu_285_p2;
wire   [31:0] add_ln59_fu_622_p2;
wire   [31:0] add_ln83_fu_645_p2;
wire   [31:0] high_2_fu_686_p3;
wire   [0:0] tmp_1_fu_231_p3;
wire   [0:0] tmp_2_fu_251_p3;
wire   [1:0] select_ln34_fu_239_p3;
wire   [1:0] select_ln40_fu_259_p3;
wire   [31:0] high_fu_273_p3;
wire   [31:0] add_ln41_1_fu_280_p2;
wire   [0:0] tmp_3_fu_295_p3;
wire   [0:0] tmp_4_fu_315_p3;
wire   [31:0] a_5_fu_331_p2;
wire   [0:0] tmp_5_fu_335_p3;
wire  signed [31:0] sext_ln59_fu_351_p1;
wire   [0:0] tmp_6_fu_364_p3;
wire   [31:0] a_7_fu_380_p2;
wire   [0:0] tmp_7_fu_384_p3;
wire   [31:0] a_8_fu_400_p2;
wire   [0:0] tmp_8_fu_404_p3;
wire   [0:0] tmp_9_fu_424_p3;
wire   [1:0] select_ln52_fu_323_p3;
wire   [1:0] select_ln58_fu_343_p3;
wire   [0:0] tmp_10_fu_456_p3;
wire   [31:0] a_11_fu_472_p2;
wire   [0:0] tmp_11_fu_476_p3;
wire   [31:0] a_12_fu_492_p2;
wire   [0:0] tmp_12_fu_496_p3;
wire   [1:0] select_ln64_fu_372_p3;
wire   [1:0] select_ln70_fu_392_p3;
wire   [1:0] add_ln101_3_fu_518_p2;
wire   [1:0] select_ln76_fu_412_p3;
wire   [1:0] select_ln82_fu_432_p3;
wire   [1:0] add_ln101_4_fu_528_p2;
wire  signed [2:0] sext_ln101_1_fu_534_p1;
wire  signed [2:0] sext_ln101_fu_524_p1;
wire   [0:0] tmp_13_fu_548_p3;
wire   [0:0] tmp_14_fu_568_p3;
wire   [1:0] select_ln94_fu_484_p3;
wire   [1:0] select_ln100_fu_504_p3;
wire   [1:0] add_ln113_2_fu_584_p2;
wire  signed [2:0] sext_ln113_fu_590_p1;
wire   [2:0] select_ln88_fu_464_p3;
wire   [1:0] select_ln106_fu_556_p3;
wire   [1:0] select_ln112_fu_576_p3;
wire   [31:0] add_ln59_1_fu_618_p2;
wire  signed [31:0] sext_ln83_fu_636_p1;
wire   [31:0] add_ln83_3_fu_632_p2;
wire   [31:0] add_ln83_5_fu_639_p2;
wire   [31:0] add_ln83_2_fu_628_p2;
wire  signed [31:0] sext_ln101_2_fu_656_p1;
wire   [31:0] add_ln101_2_fu_652_p2;
wire  signed [31:0] sext_ln113_1_fu_669_p1;
wire   [31:0] add_ln113_1_fu_665_p2;
wire  signed [31:0] sext_ln119_fu_678_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_10_reg_863 <= a_10_fu_452_p2;
        a_13_reg_878 <= a_13_fu_544_p2;
        a_14_reg_883 <= a_14_fu_564_p2;
        a_15_reg_893 <= a_15_fu_600_p2;
        a_3_reg_823 <= a_3_fu_291_p2;
        a_4_reg_833 <= a_4_fu_311_p2;
        a_6_reg_843 <= a_6_fu_360_p2;
        a_9_reg_848 <= a_9_fu_420_p2;
        add_ln101_1_reg_868 <= add_ln101_1_fu_512_p2;
        add_ln101_5_reg_873 <= add_ln101_5_fu_538_p2;
        add_ln113_3_reg_888 <= add_ln113_3_fu_594_p2;
        add_ln119_1_reg_903 <= add_ln119_1_fu_612_p2;
        add_ln59_3_reg_838 <= add_ln59_3_fu_354_p2;
        add_ln83_1_reg_853 <= add_ln83_1_fu_440_p2;
        add_ln83_4_reg_858 <= add_ln83_4_fu_446_p2;
        high_1_reg_828 <= high_1_fu_303_p3;
        tmp_15_reg_898 <= a_15_fu_600_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_1_reg_776 <= a_1_fu_227_p2;
        a_2_reg_781 <= a_2_fu_247_p2;
        a_reg_766 <= a_fu_215_p2;
        add_ln59_2_reg_802 <= add_ln59_2_fu_267_p2;
        small1_load_2_reg_794 <= small1_q0;
        small1_load_3_reg_815 <= small1_q1;
        small2_load_2_reg_786 <= small2_q0;
        small2_load_3_reg_807 <= small2_q1;
        tmp_reg_771 <= a_fu_215_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln101_reg_908 <= add_ln101_fu_659_p2;
        add_ln113_reg_913 <= add_ln113_fu_672_p2;
        add_ln119_reg_918 <= add_ln119_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        small1_load_1_reg_738 <= small1_q1;
        small1_load_reg_714 <= small1_q0;
        small2_load_1_reg_730 <= small2_q1;
        small2_load_reg_722 <= small2_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address0 = 64'd0;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address1 = 64'd1;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_d0 = add_ln119_reg_918;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_d0 = add_ln101_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d0 = add_ln59_fu_622_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d0 = a_reg_766;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_d1 = high_2_fu_686_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_d1 = add_ln113_reg_913;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d1 = add_ln83_fu_645_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d1 = add_ln41_fu_285_p2;
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        small1_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        small1_address0 = 64'd0;
    end else begin
        small1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        small1_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        small1_address1 = 64'd1;
    end else begin
        small1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        small1_ce0 = 1'b1;
    end else begin
        small1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        small1_ce1 = 1'b1;
    end else begin
        small1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        small2_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        small2_address0 = 64'd0;
    end else begin
        small2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        small2_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        small2_address1 = 64'd1;
    end else begin
        small2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        small2_ce0 = 1'b1;
    end else begin
        small2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        small2_ce1 = 1'b1;
    end else begin
        small2_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_10_fu_452_p2 = ($signed(small1_load_1_reg_738) * $signed(small2_load_3_reg_807));

assign a_11_fu_472_p2 = ($signed(small1_load_2_reg_794) * $signed(small2_load_2_reg_786));

assign a_12_fu_492_p2 = ($signed(small1_load_3_reg_815) * $signed(small2_load_1_reg_730));

assign a_13_fu_544_p2 = ($signed(small1_load_2_reg_794) * $signed(small2_load_3_reg_807));

assign a_14_fu_564_p2 = ($signed(small1_load_3_reg_815) * $signed(small2_load_2_reg_786));

assign a_15_fu_600_p2 = ($signed(small1_load_3_reg_815) * $signed(small2_load_3_reg_807));

assign a_1_fu_227_p2 = ($signed(small1_load_reg_714) * $signed(small2_load_1_reg_730));

assign a_2_fu_247_p2 = ($signed(small1_load_1_reg_738) * $signed(small2_load_reg_722));

assign a_3_fu_291_p2 = ($signed(small1_load_reg_714) * $signed(small2_load_2_reg_786));

assign a_4_fu_311_p2 = ($signed(small1_load_1_reg_738) * $signed(small2_load_1_reg_730));

assign a_5_fu_331_p2 = ($signed(small1_load_2_reg_794) * $signed(small2_load_reg_722));

assign a_6_fu_360_p2 = ($signed(small1_load_reg_714) * $signed(small2_load_3_reg_807));

assign a_7_fu_380_p2 = ($signed(small1_load_1_reg_738) * $signed(small2_load_2_reg_786));

assign a_8_fu_400_p2 = ($signed(small1_load_2_reg_794) * $signed(small2_load_1_reg_730));

assign a_9_fu_420_p2 = ($signed(small1_load_3_reg_815) * $signed(small2_load_reg_722));

assign a_fu_215_p2 = ($signed(small1_load_reg_714) * $signed(small2_load_reg_722));

assign add_ln101_1_fu_512_p2 = (a_11_fu_472_p2 + a_12_fu_492_p2);

assign add_ln101_2_fu_652_p2 = (add_ln101_1_reg_868 + a_10_reg_863);

assign add_ln101_3_fu_518_p2 = (select_ln64_fu_372_p3 + select_ln70_fu_392_p3);

assign add_ln101_4_fu_528_p2 = (select_ln76_fu_412_p3 + select_ln82_fu_432_p3);

assign add_ln101_5_fu_538_p2 = ($signed(sext_ln101_1_fu_534_p1) + $signed(sext_ln101_fu_524_p1));

assign add_ln101_fu_659_p2 = ($signed(sext_ln101_2_fu_656_p1) + $signed(add_ln101_2_fu_652_p2));

assign add_ln113_1_fu_665_p2 = (a_13_reg_878 + a_14_reg_883);

assign add_ln113_2_fu_584_p2 = (select_ln94_fu_484_p3 + select_ln100_fu_504_p3);

assign add_ln113_3_fu_594_p2 = ($signed(sext_ln113_fu_590_p1) + $signed(select_ln88_fu_464_p3));

assign add_ln113_fu_672_p2 = ($signed(sext_ln113_1_fu_669_p1) + $signed(add_ln113_1_fu_665_p2));

assign add_ln119_1_fu_612_p2 = (select_ln106_fu_556_p3 + select_ln112_fu_576_p3);

assign add_ln119_fu_681_p2 = ($signed(sext_ln119_fu_678_p1) + $signed(a_15_reg_893));

assign add_ln41_1_fu_280_p2 = (a_1_reg_776 + high_fu_273_p3);

assign add_ln41_fu_285_p2 = (add_ln41_1_fu_280_p2 + a_2_reg_781);

assign add_ln59_1_fu_618_p2 = (a_3_reg_823 + a_4_reg_833);

assign add_ln59_2_fu_267_p2 = (select_ln34_fu_239_p3 + select_ln40_fu_259_p3);

assign add_ln59_3_fu_354_p2 = ($signed(sext_ln59_fu_351_p1) + $signed(a_5_fu_331_p2));

assign add_ln59_fu_622_p2 = (add_ln59_3_reg_838 + add_ln59_1_fu_618_p2);

assign add_ln83_1_fu_440_p2 = (a_7_fu_380_p2 + a_8_fu_400_p2);

assign add_ln83_2_fu_628_p2 = (add_ln83_1_reg_853 + a_6_reg_843);

assign add_ln83_3_fu_632_p2 = (a_9_reg_848 + high_1_reg_828);

assign add_ln83_4_fu_446_p2 = (select_ln52_fu_323_p3 + select_ln58_fu_343_p3);

assign add_ln83_5_fu_639_p2 = ($signed(sext_ln83_fu_636_p1) + $signed(add_ln83_3_fu_632_p2));

assign add_ln83_fu_645_p2 = (add_ln83_5_fu_639_p2 + add_ln83_2_fu_628_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign high_1_fu_303_p3 = ((tmp_3_fu_295_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign high_2_fu_686_p3 = ((tmp_15_reg_898[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign high_fu_273_p3 = ((tmp_reg_771[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln100_fu_504_p3 = ((tmp_12_fu_496_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln106_fu_556_p3 = ((tmp_13_fu_548_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln112_fu_576_p3 = ((tmp_14_fu_568_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln34_fu_239_p3 = ((tmp_1_fu_231_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln40_fu_259_p3 = ((tmp_2_fu_251_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln52_fu_323_p3 = ((tmp_4_fu_315_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln58_fu_343_p3 = ((tmp_5_fu_335_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln64_fu_372_p3 = ((tmp_6_fu_364_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln70_fu_392_p3 = ((tmp_7_fu_384_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln76_fu_412_p3 = ((tmp_8_fu_404_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln82_fu_432_p3 = ((tmp_9_fu_424_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln88_fu_464_p3 = ((tmp_10_fu_456_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign select_ln94_fu_484_p3 = ((tmp_11_fu_476_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign sext_ln101_1_fu_534_p1 = $signed(add_ln101_4_fu_528_p2);

assign sext_ln101_2_fu_656_p1 = $signed(add_ln101_5_reg_873);

assign sext_ln101_fu_524_p1 = $signed(add_ln101_3_fu_518_p2);

assign sext_ln113_1_fu_669_p1 = $signed(add_ln113_3_reg_888);

assign sext_ln113_fu_590_p1 = $signed(add_ln113_2_fu_584_p2);

assign sext_ln119_fu_678_p1 = $signed(add_ln119_1_reg_903);

assign sext_ln59_fu_351_p1 = $signed(add_ln59_2_reg_802);

assign sext_ln83_fu_636_p1 = $signed(add_ln83_4_reg_858);

assign tmp_10_fu_456_p3 = a_10_fu_452_p2[32'd31];

assign tmp_11_fu_476_p3 = a_11_fu_472_p2[32'd31];

assign tmp_12_fu_496_p3 = a_12_fu_492_p2[32'd31];

assign tmp_13_fu_548_p3 = a_13_fu_544_p2[32'd31];

assign tmp_14_fu_568_p3 = a_14_fu_564_p2[32'd31];

assign tmp_1_fu_231_p3 = a_1_fu_227_p2[32'd31];

assign tmp_2_fu_251_p3 = a_2_fu_247_p2[32'd31];

assign tmp_3_fu_295_p3 = a_3_fu_291_p2[32'd31];

assign tmp_4_fu_315_p3 = a_4_fu_311_p2[32'd31];

assign tmp_5_fu_335_p3 = a_5_fu_331_p2[32'd31];

assign tmp_6_fu_364_p3 = a_6_fu_360_p2[32'd31];

assign tmp_7_fu_384_p3 = a_7_fu_380_p2[32'd31];

assign tmp_8_fu_404_p3 = a_8_fu_400_p2[32'd31];

assign tmp_9_fu_424_p3 = a_9_fu_420_p2[32'd31];

endmodule //smallfelem_mul
