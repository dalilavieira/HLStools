// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pixfmt_to_var_HH_
#define _pixfmt_to_var_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pixfmt_to_var : public sc_module {
    // Port declarations 23
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > var_bits_per_pixel;
    sc_out< sc_logic > var_bits_per_pixel_ap_vld;
    sc_out< sc_lv<32> > var_transp_offset;
    sc_out< sc_logic > var_transp_offset_ap_vld;
    sc_out< sc_lv<32> > var_transp_length;
    sc_out< sc_logic > var_transp_length_ap_vld;
    sc_out< sc_lv<32> > var_blue_offset;
    sc_out< sc_logic > var_blue_offset_ap_vld;
    sc_out< sc_lv<32> > var_blue_length;
    sc_out< sc_logic > var_blue_length_ap_vld;
    sc_out< sc_lv<32> > var_green_offset;
    sc_out< sc_logic > var_green_offset_ap_vld;
    sc_out< sc_lv<32> > var_green_length;
    sc_out< sc_logic > var_green_length_ap_vld;
    sc_out< sc_lv<32> > var_red_offset;
    sc_out< sc_logic > var_red_offset_ap_vld;
    sc_out< sc_lv<32> > var_red_length;
    sc_out< sc_logic > var_red_length_ap_vld;
    sc_in< sc_lv<32> > pix_fmt;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    pixfmt_to_var(sc_module_name name);
    SC_HAS_PROCESS(pixfmt_to_var);

    ~pixfmt_to_var();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<32> > pix_fmt_read_read_fu_84_p2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_8B;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_82;
    static const sc_lv<32> ap_const_lv32_85;
    static const sc_lv<32> ap_const_lv32_86;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_83;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_81;
    static const sc_lv<32> ap_const_lv32_84;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_8E;
    static const sc_lv<32> ap_const_lv32_89;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_8C;
    static const sc_lv<32> ap_const_lv32_87;
    static const sc_lv<32> ap_const_lv32_8D;
    static const sc_lv<32> ap_const_lv32_88;
    static const sc_lv<32> ap_const_lv32_8F;
    static const sc_lv<32> ap_const_lv32_8A;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_pix_fmt_read_read_fu_84_p2();
    void thread_var_bits_per_pixel();
    void thread_var_bits_per_pixel_ap_vld();
    void thread_var_blue_length();
    void thread_var_blue_length_ap_vld();
    void thread_var_blue_offset();
    void thread_var_blue_offset_ap_vld();
    void thread_var_green_length();
    void thread_var_green_length_ap_vld();
    void thread_var_green_offset();
    void thread_var_green_offset_ap_vld();
    void thread_var_red_length();
    void thread_var_red_length_ap_vld();
    void thread_var_red_offset();
    void thread_var_red_offset_ap_vld();
    void thread_var_transp_length();
    void thread_var_transp_length_ap_vld();
    void thread_var_transp_offset();
    void thread_var_transp_offset_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
