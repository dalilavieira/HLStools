// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fwht16,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.019000,HLS_SYN_LAT=146,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1248,HLS_SYN_LUT=2532,HLS_VERSION=2019_1}" *)

module fwht16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_r_address0,
        block_r_ce0,
        block_r_q0,
        block_r_address1,
        block_r_ce1,
        block_r_q1,
        output_block_address0,
        output_block_ce0,
        output_block_we0,
        output_block_d0,
        output_block_q0,
        output_block_address1,
        output_block_ce1,
        output_block_we1,
        output_block_d1,
        output_block_q1,
        stride,
        intra
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] block_r_address0;
output   block_r_ce0;
input  [31:0] block_r_q0;
output  [6:0] block_r_address1;
output   block_r_ce1;
input  [31:0] block_r_q1;
output  [6:0] output_block_address0;
output   output_block_ce0;
output   output_block_we0;
output  [31:0] output_block_d0;
input  [31:0] output_block_q0;
output  [6:0] output_block_address1;
output   output_block_ce1;
output   output_block_we1;
output  [31:0] output_block_d1;
input  [31:0] output_block_q1;
input  [31:0] stride;
input  [31:0] intra;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] block_r_address0;
reg block_r_ce0;
reg[6:0] block_r_address1;
reg block_r_ce1;
reg[6:0] output_block_address0;
reg output_block_ce0;
reg output_block_we0;
reg[31:0] output_block_d0;
reg[6:0] output_block_address1;
reg output_block_ce1;
reg output_block_we1;
reg[31:0] output_block_d1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [34:0] sext_ln25_fu_332_p1;
reg  signed [34:0] sext_ln25_reg_852;
reg   [6:0] output_block_addr_reg_857;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_352_p2;
reg   [3:0] i_reg_870;
wire   [7:0] empty_2_fu_358_p1;
reg   [7:0] empty_2_reg_875;
wire   [0:0] icmp_ln25_fu_346_p2;
wire   [5:0] empty_3_fu_373_p1;
reg   [5:0] empty_3_reg_890;
wire   [34:0] add_ln25_fu_377_p2;
reg   [34:0] add_ln25_reg_901;
wire   [6:0] add_ln25_1_fu_382_p2;
reg   [6:0] add_ln25_1_reg_906;
reg   [31:0] block_load_reg_911;
wire    ap_CS_fsm_state3;
reg   [31:0] block_load_1_reg_917;
reg   [31:0] block_load_2_reg_933;
wire    ap_CS_fsm_state4;
reg   [31:0] block_load_3_reg_939;
reg   [31:0] block_load_4_reg_955;
wire    ap_CS_fsm_state5;
reg   [31:0] block_load_5_reg_961;
reg   [31:0] block_load_6_reg_977;
wire    ap_CS_fsm_state6;
reg   [31:0] block_load_7_reg_983;
wire   [31:0] sub_ln28_fu_452_p2;
reg   [31:0] sub_ln28_reg_989;
wire    ap_CS_fsm_state7;
wire   [31:0] sub_ln31_fu_460_p2;
reg   [31:0] sub_ln31_reg_995;
wire   [31:0] sub_ln34_fu_468_p2;
reg   [31:0] sub_ln34_reg_1001;
wire   [31:0] sub_ln37_fu_476_p2;
reg   [31:0] sub_ln37_reg_1007;
wire   [31:0] sub_ln41_fu_486_p2;
reg   [31:0] sub_ln41_reg_1013;
wire   [31:0] sub_ln46_fu_498_p2;
reg   [31:0] sub_ln46_reg_1019;
wire   [31:0] add_ln43_fu_562_p2;
reg   [31:0] add_ln43_reg_1025;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln48_fu_570_p2;
reg   [31:0] add_ln48_reg_1031;
wire   [5:0] out_1_rec_cast2_fu_638_p1;
reg   [5:0] out_1_rec_cast2_reg_1037;
wire    ap_CS_fsm_state11;
reg   [6:0] output_block_addr_1_reg_1042;
wire   [3:0] i_1_fu_653_p2;
reg   [3:0] i_1_reg_1050;
wire  signed [3:0] xor_ln65_fu_659_p2;
reg  signed [3:0] xor_ln65_reg_1055;
wire   [0:0] icmp_ln63_fu_647_p2;
reg   [6:0] output_block_addr_9_reg_1061;
reg   [31:0] output_block_load_reg_1067;
wire    ap_CS_fsm_state12;
reg   [31:0] output_block_load_1_reg_1073;
wire  signed [4:0] or_ln_fu_670_p3;
reg  signed [4:0] or_ln_reg_1079;
reg   [6:0] output_block_addr_10_reg_1084;
reg   [6:0] output_block_addr_11_reg_1090;
reg   [31:0] output_block_load_2_reg_1095;
wire    ap_CS_fsm_state13;
reg   [31:0] output_block_load_3_reg_1101;
reg   [6:0] output_block_addr_12_reg_1107;
reg   [6:0] output_block_addr_13_reg_1112;
reg   [31:0] output_block_load_4_reg_1117;
wire    ap_CS_fsm_state14;
reg   [31:0] output_block_load_5_reg_1123;
reg   [6:0] output_block_addr_14_reg_1129;
reg   [6:0] output_block_addr_15_reg_1134;
reg   [31:0] output_block_load_6_reg_1139;
wire    ap_CS_fsm_state15;
reg   [31:0] output_block_load_7_reg_1145;
wire   [31:0] sub_ln66_fu_734_p2;
reg   [31:0] sub_ln66_reg_1151;
wire    ap_CS_fsm_state16;
wire   [31:0] sub_ln69_fu_742_p2;
reg   [31:0] sub_ln69_reg_1157;
wire   [31:0] sub_ln72_fu_750_p2;
reg   [31:0] sub_ln72_reg_1163;
wire   [31:0] sub_ln75_fu_758_p2;
reg   [31:0] sub_ln75_reg_1169;
wire   [31:0] add_ln89_fu_786_p2;
reg   [31:0] add_ln89_reg_1175;
wire   [31:0] add_ln92_fu_806_p2;
reg   [31:0] add_ln92_reg_1180;
wire   [31:0] add_ln81_fu_816_p2;
reg   [31:0] add_ln81_reg_1185;
wire    ap_CS_fsm_state18;
wire   [31:0] add_ln86_fu_824_p2;
reg   [31:0] add_ln86_reg_1191;
reg  signed [34:0] tmp_0_rec_reg_287;
wire    ap_CS_fsm_state10;
reg   [6:0] out_0_rec_reg_298;
reg   [3:0] i_0_reg_309;
reg   [3:0] out_1_rec_reg_320;
wire    ap_CS_fsm_state19;
wire   [63:0] out_0_rec_cast_fu_341_p1;
wire  signed [63:0] tmp_0_rec_cast_fu_336_p1;
wire   [63:0] zext_ln27_fu_368_p1;
wire   [63:0] zext_ln30_fu_393_p1;
wire   [63:0] zext_ln30_1_fu_403_p1;
wire   [63:0] zext_ln33_fu_413_p1;
wire   [63:0] zext_ln33_1_fu_423_p1;
wire   [63:0] zext_ln36_fu_433_p1;
wire   [63:0] zext_ln36_1_fu_443_p1;
wire   [63:0] zext_ln52_fu_523_p1;
wire   [63:0] zext_ln53_fu_538_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln54_fu_553_p1;
wire   [63:0] zext_ln55_fu_586_p1;
wire   [63:0] zext_ln56_fu_603_p1;
wire   [63:0] zext_ln57_fu_618_p1;
wire   [63:0] zext_ln58_fu_633_p1;
wire   [63:0] out_1_rec_cast_fu_642_p1;
wire   [63:0] zext_ln65_fu_665_p1;
wire   [63:0] zext_ln68_fu_678_p1;
wire   [63:0] zext_ln68_1_fu_686_p1;
wire   [63:0] zext_ln71_fu_699_p1;
wire   [63:0] zext_ln71_1_fu_709_p1;
wire   [63:0] zext_ln74_fu_717_p1;
wire   [63:0] zext_ln74_1_fu_725_p1;
wire   [31:0] add_ln51_fu_504_p2;
wire   [31:0] sub_ln52_fu_511_p2;
wire   [31:0] sub_ln53_fu_528_p2;
wire   [31:0] add_ln54_fu_543_p2;
wire   [31:0] add_ln55_fu_574_p2;
wire   [31:0] sub_ln56_fu_591_p2;
wire   [31:0] sub_ln57_fu_608_p2;
wire   [31:0] add_ln58_fu_623_p2;
wire   [31:0] sub_ln90_fu_792_p2;
wire   [31:0] sub_ln91_fu_799_p2;
wire    ap_CS_fsm_state17;
wire   [31:0] add_ln93_fu_828_p2;
wire   [31:0] sub_ln94_fu_835_p2;
wire   [31:0] sub_ln95_fu_842_p2;
wire   [31:0] add_ln96_fu_847_p2;
wire   [7:0] add_ln27_fu_362_p2;
wire   [7:0] add_ln30_fu_388_p2;
wire   [7:0] add_ln30_1_fu_398_p2;
wire   [7:0] add_ln33_fu_408_p2;
wire   [7:0] add_ln33_1_fu_418_p2;
wire   [7:0] add_ln36_fu_428_p2;
wire   [7:0] add_ln36_1_fu_438_p2;
wire   [31:0] add_ln27_1_fu_448_p2;
wire   [31:0] add_ln30_2_fu_456_p2;
wire   [31:0] add_ln33_2_fu_464_p2;
wire   [31:0] add_ln36_2_fu_472_p2;
wire   [31:0] add_ln40_fu_480_p2;
wire   [31:0] add_ln45_fu_492_p2;
wire   [5:0] or_ln52_fu_518_p2;
wire   [5:0] or_ln53_fu_533_p2;
wire   [5:0] or_ln54_fu_548_p2;
wire   [31:0] sub_ln42_fu_558_p2;
wire   [31:0] sub_ln47_fu_566_p2;
wire   [5:0] or_ln55_fu_581_p2;
wire   [5:0] or_ln56_fu_598_p2;
wire   [5:0] or_ln57_fu_613_p2;
wire   [5:0] or_ln58_fu_628_p2;
wire  signed [4:0] sext_ln68_fu_683_p1;
wire   [5:0] or_ln1_fu_691_p3;
wire   [5:0] add_ln71_fu_704_p2;
wire  signed [5:0] sext_ln74_fu_714_p1;
wire  signed [5:0] sext_ln74_1_fu_722_p1;
wire   [31:0] add_ln68_fu_738_p2;
wire   [31:0] add_ln65_fu_730_p2;
wire   [31:0] add_ln74_fu_754_p2;
wire   [31:0] add_ln71_1_fu_746_p2;
wire   [31:0] add_ln83_fu_774_p2;
wire   [31:0] add_ln78_fu_762_p2;
wire   [31:0] sub_ln79_fu_768_p2;
wire   [31:0] sub_ln84_fu_780_p2;
wire   [31:0] sub_ln85_fu_820_p2;
wire   [31:0] sub_ln80_fu_812_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_309 <= i_reg_870;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_309 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_0_rec_reg_298 <= add_ln25_1_reg_906;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_0_rec_reg_298 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_1_rec_reg_320 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        out_1_rec_reg_320 <= i_1_reg_1050;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_0_rec_reg_287 <= add_ln25_reg_901;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_0_rec_reg_287 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln25_1_reg_906 <= add_ln25_1_fu_382_p2;
        add_ln25_reg_901 <= add_ln25_fu_377_p2;
        empty_2_reg_875 <= empty_2_fu_358_p1;
        empty_3_reg_890 <= empty_3_fu_373_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln43_reg_1025 <= add_ln43_fu_562_p2;
        add_ln48_reg_1031 <= add_ln48_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln81_reg_1185 <= add_ln81_fu_816_p2;
        add_ln86_reg_1191 <= add_ln86_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln89_reg_1175 <= add_ln89_fu_786_p2;
        add_ln92_reg_1180 <= add_ln92_fu_806_p2;
        sub_ln66_reg_1151 <= sub_ln66_fu_734_p2;
        sub_ln69_reg_1157 <= sub_ln69_fu_742_p2;
        sub_ln72_reg_1163 <= sub_ln72_fu_750_p2;
        sub_ln75_reg_1169 <= sub_ln75_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_load_1_reg_917 <= block_r_q1;
        block_load_reg_911 <= block_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_load_2_reg_933 <= block_r_q0;
        block_load_3_reg_939 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_load_4_reg_955 <= block_r_q0;
        block_load_5_reg_961 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_load_6_reg_977 <= block_r_q0;
        block_load_7_reg_983 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_1050 <= i_1_fu_653_p2;
        out_1_rec_cast2_reg_1037[3 : 0] <= out_1_rec_cast2_fu_638_p1[3 : 0];
        output_block_addr_1_reg_1042[3 : 0] <= out_1_rec_cast_fu_642_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_870 <= i_fu_352_p2;
        output_block_addr_reg_857 <= out_0_rec_cast_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        or_ln_reg_1079[3 : 0] <= or_ln_fu_670_p3[3 : 0];
        output_block_addr_10_reg_1084[3 : 0] <= zext_ln68_fu_678_p1[3 : 0];
        output_block_addr_11_reg_1090[4 : 0] <= zext_ln68_1_fu_686_p1[4 : 0];
        output_block_load_1_reg_1073 <= output_block_q1;
        output_block_load_reg_1067 <= output_block_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_addr_12_reg_1107[3 : 0] <= zext_ln71_fu_699_p1[3 : 0];
        output_block_addr_13_reg_1112[5 : 0] <= zext_ln71_1_fu_709_p1[5 : 0];
        output_block_load_2_reg_1095 <= output_block_q0;
        output_block_load_3_reg_1101 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_addr_14_reg_1129[3 : 0] <= zext_ln74_fu_717_p1[3 : 0];
        output_block_addr_15_reg_1134[5 : 0] <= zext_ln74_1_fu_725_p1[5 : 0];
        output_block_load_4_reg_1117 <= output_block_q0;
        output_block_load_5_reg_1123 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_647_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        output_block_addr_9_reg_1061[3 : 0] <= zext_ln65_fu_665_p1[3 : 0];
        xor_ln65_reg_1055 <= xor_ln65_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_load_6_reg_1139 <= output_block_q0;
        output_block_load_7_reg_1145 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln25_reg_852 <= sext_ln25_fu_332_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_ln28_reg_989 <= sub_ln28_fu_452_p2;
        sub_ln31_reg_995 <= sub_ln31_fu_460_p2;
        sub_ln34_reg_1001 <= sub_ln34_fu_468_p2;
        sub_ln37_reg_1007 <= sub_ln37_fu_476_p2;
        sub_ln41_reg_1013 <= sub_ln41_fu_486_p2;
        sub_ln46_reg_1019 <= sub_ln46_fu_498_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln63_fu_647_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln63_fu_647_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address0 = zext_ln36_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address0 = zext_ln33_fu_413_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address0 = zext_ln30_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address0 = tmp_0_rec_cast_fu_336_p1;
    end else begin
        block_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address1 = zext_ln36_1_fu_443_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address1 = zext_ln33_1_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address1 = zext_ln30_1_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address1 = zext_ln27_fu_368_p1;
    end else begin
        block_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce0 = 1'b1;
    end else begin
        block_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce1 = 1'b1;
    end else begin
        block_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_address0 = output_block_addr_14_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_address0 = output_block_addr_12_reg_1107;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address0 = output_block_addr_1_reg_1042;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address0 = output_block_addr_9_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address0 = zext_ln74_fu_717_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address0 = zext_ln71_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address0 = zext_ln68_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address0 = out_1_rec_cast_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address0 = zext_ln57_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address0 = zext_ln55_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_address0 = zext_ln53_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_address0 = output_block_addr_reg_857;
    end else begin
        output_block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_address1 = output_block_addr_15_reg_1134;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_address1 = output_block_addr_13_reg_1112;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address1 = output_block_addr_11_reg_1090;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address1 = output_block_addr_10_reg_1084;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address1 = zext_ln74_1_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address1 = zext_ln71_1_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address1 = zext_ln68_1_fu_686_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address1 = zext_ln65_fu_665_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address1 = zext_ln58_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address1 = zext_ln56_fu_603_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_address1 = zext_ln54_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_address1 = zext_ln52_fu_523_p1;
    end else begin
        output_block_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        output_block_ce0 = 1'b1;
    end else begin
        output_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        output_block_ce1 = 1'b1;
    end else begin
        output_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_d0 = sub_ln95_fu_842_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_d0 = add_ln93_fu_828_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d0 = add_ln89_reg_1175;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_d0 = sub_ln90_fu_792_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_d0 = sub_ln57_fu_608_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d0 = add_ln55_fu_574_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_d0 = sub_ln53_fu_528_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_d0 = add_ln51_fu_504_p2;
    end else begin
        output_block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_d1 = add_ln96_fu_847_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_d1 = sub_ln94_fu_835_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d1 = add_ln92_reg_1180;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_d1 = sub_ln91_fu_799_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_d1 = add_ln58_fu_623_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d1 = sub_ln56_fu_591_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_block_d1 = add_ln54_fu_543_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_block_d1 = sub_ln52_fu_511_p2;
    end else begin
        output_block_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        output_block_we0 = 1'b1;
    end else begin
        output_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        output_block_we1 = 1'b1;
    end else begin
        output_block_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln63_fu_647_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_382_p2 = (7'd8 + out_0_rec_reg_298);

assign add_ln25_fu_377_p2 = ($signed(tmp_0_rec_reg_287) + $signed(sext_ln25_reg_852));

assign add_ln27_1_fu_448_p2 = (block_load_reg_911 + block_load_1_reg_917);

assign add_ln27_fu_362_p2 = (8'd1 + empty_2_fu_358_p1);

assign add_ln30_1_fu_398_p2 = (8'd3 + empty_2_reg_875);

assign add_ln30_2_fu_456_p2 = (block_load_2_reg_933 + block_load_3_reg_939);

assign add_ln30_fu_388_p2 = (8'd2 + empty_2_reg_875);

assign add_ln33_1_fu_418_p2 = (8'd5 + empty_2_reg_875);

assign add_ln33_2_fu_464_p2 = (block_load_4_reg_955 + block_load_5_reg_961);

assign add_ln33_fu_408_p2 = (8'd4 + empty_2_reg_875);

assign add_ln36_1_fu_438_p2 = (8'd7 + empty_2_reg_875);

assign add_ln36_2_fu_472_p2 = (block_load_6_reg_977 + block_load_7_reg_983);

assign add_ln36_fu_428_p2 = (8'd6 + empty_2_reg_875);

assign add_ln40_fu_480_p2 = (add_ln27_1_fu_448_p2 + add_ln30_2_fu_456_p2);

assign add_ln43_fu_562_p2 = (sub_ln28_reg_989 + sub_ln31_reg_995);

assign add_ln45_fu_492_p2 = (add_ln33_2_fu_464_p2 + add_ln36_2_fu_472_p2);

assign add_ln48_fu_570_p2 = (sub_ln34_reg_1001 + sub_ln37_reg_1007);

assign add_ln51_fu_504_p2 = (add_ln40_fu_480_p2 + add_ln45_fu_492_p2);

assign add_ln54_fu_543_p2 = (sub_ln41_reg_1013 + sub_ln46_reg_1019);

assign add_ln55_fu_574_p2 = (sub_ln42_fu_558_p2 + sub_ln47_fu_566_p2);

assign add_ln58_fu_623_p2 = (add_ln43_reg_1025 + add_ln48_reg_1031);

assign add_ln65_fu_730_p2 = (output_block_load_1_reg_1073 + output_block_load_reg_1067);

assign add_ln68_fu_738_p2 = (output_block_load_3_reg_1101 + output_block_load_2_reg_1095);

assign add_ln71_1_fu_746_p2 = (output_block_load_5_reg_1123 + output_block_load_4_reg_1117);

assign add_ln71_fu_704_p2 = ($signed(out_1_rec_cast2_reg_1037) + $signed(6'd40));

assign add_ln74_fu_754_p2 = (output_block_load_7_reg_1145 + output_block_load_6_reg_1139);

assign add_ln78_fu_762_p2 = (add_ln68_fu_738_p2 + add_ln65_fu_730_p2);

assign add_ln81_fu_816_p2 = (sub_ln69_reg_1157 + sub_ln66_reg_1151);

assign add_ln83_fu_774_p2 = (add_ln74_fu_754_p2 + add_ln71_1_fu_746_p2);

assign add_ln86_fu_824_p2 = (sub_ln75_reg_1169 + sub_ln72_reg_1163);

assign add_ln89_fu_786_p2 = (add_ln83_fu_774_p2 + add_ln78_fu_762_p2);

assign add_ln92_fu_806_p2 = (sub_ln84_fu_780_p2 + sub_ln79_fu_768_p2);

assign add_ln93_fu_828_p2 = (sub_ln85_fu_820_p2 + sub_ln80_fu_812_p2);

assign add_ln96_fu_847_p2 = (add_ln86_reg_1191 + add_ln81_reg_1185);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_2_fu_358_p1 = tmp_0_rec_reg_287[7:0];

assign empty_3_fu_373_p1 = out_0_rec_reg_298[5:0];

assign i_1_fu_653_p2 = (out_1_rec_reg_320 + 4'd1);

assign i_fu_352_p2 = (i_0_reg_309 + 4'd1);

assign icmp_ln25_fu_346_p2 = ((i_0_reg_309 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_647_p2 = ((out_1_rec_reg_320 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln1_fu_691_p3 = {{2'd2}, {out_1_rec_reg_320}};

assign or_ln52_fu_518_p2 = (empty_3_reg_890 | 6'd1);

assign or_ln53_fu_533_p2 = (empty_3_reg_890 | 6'd2);

assign or_ln54_fu_548_p2 = (empty_3_reg_890 | 6'd3);

assign or_ln55_fu_581_p2 = (empty_3_reg_890 | 6'd4);

assign or_ln56_fu_598_p2 = (empty_3_reg_890 | 6'd5);

assign or_ln57_fu_613_p2 = (empty_3_reg_890 | 6'd6);

assign or_ln58_fu_628_p2 = (empty_3_reg_890 | 6'd7);

assign or_ln_fu_670_p3 = {{1'd1}, {out_1_rec_reg_320}};

assign out_0_rec_cast_fu_341_p1 = out_0_rec_reg_298;

assign out_1_rec_cast2_fu_638_p1 = out_1_rec_reg_320;

assign out_1_rec_cast_fu_642_p1 = out_1_rec_reg_320;

assign sext_ln25_fu_332_p1 = $signed(stride);

assign sext_ln68_fu_683_p1 = xor_ln65_reg_1055;

assign sext_ln74_1_fu_722_p1 = xor_ln65_reg_1055;

assign sext_ln74_fu_714_p1 = or_ln_reg_1079;

assign sub_ln28_fu_452_p2 = (block_load_reg_911 - block_load_1_reg_917);

assign sub_ln31_fu_460_p2 = (block_load_2_reg_933 - block_load_3_reg_939);

assign sub_ln34_fu_468_p2 = (block_load_4_reg_955 - block_load_5_reg_961);

assign sub_ln37_fu_476_p2 = (block_load_6_reg_977 - block_load_7_reg_983);

assign sub_ln41_fu_486_p2 = (add_ln27_1_fu_448_p2 - add_ln30_2_fu_456_p2);

assign sub_ln42_fu_558_p2 = (sub_ln28_reg_989 - sub_ln31_reg_995);

assign sub_ln46_fu_498_p2 = (add_ln33_2_fu_464_p2 - add_ln36_2_fu_472_p2);

assign sub_ln47_fu_566_p2 = (sub_ln34_reg_1001 - sub_ln37_reg_1007);

assign sub_ln52_fu_511_p2 = (add_ln40_fu_480_p2 - add_ln45_fu_492_p2);

assign sub_ln53_fu_528_p2 = (sub_ln41_reg_1013 - sub_ln46_reg_1019);

assign sub_ln56_fu_591_p2 = (sub_ln42_fu_558_p2 - sub_ln47_fu_566_p2);

assign sub_ln57_fu_608_p2 = (add_ln43_reg_1025 - add_ln48_reg_1031);

assign sub_ln66_fu_734_p2 = (output_block_load_reg_1067 - output_block_load_1_reg_1073);

assign sub_ln69_fu_742_p2 = (output_block_load_2_reg_1095 - output_block_load_3_reg_1101);

assign sub_ln72_fu_750_p2 = (output_block_load_4_reg_1117 - output_block_load_5_reg_1123);

assign sub_ln75_fu_758_p2 = (output_block_load_6_reg_1139 - output_block_load_7_reg_1145);

assign sub_ln79_fu_768_p2 = (add_ln65_fu_730_p2 - add_ln68_fu_738_p2);

assign sub_ln80_fu_812_p2 = (sub_ln66_reg_1151 - sub_ln69_reg_1157);

assign sub_ln84_fu_780_p2 = (add_ln71_1_fu_746_p2 - add_ln74_fu_754_p2);

assign sub_ln85_fu_820_p2 = (sub_ln72_reg_1163 - sub_ln75_reg_1169);

assign sub_ln90_fu_792_p2 = (add_ln78_fu_762_p2 - add_ln83_fu_774_p2);

assign sub_ln91_fu_799_p2 = (sub_ln79_fu_768_p2 - sub_ln84_fu_780_p2);

assign sub_ln94_fu_835_p2 = (sub_ln80_fu_812_p2 - sub_ln85_fu_820_p2);

assign sub_ln95_fu_842_p2 = (add_ln81_reg_1185 - add_ln86_reg_1191);

assign tmp_0_rec_cast_fu_336_p1 = tmp_0_rec_reg_287;

assign xor_ln65_fu_659_p2 = (out_1_rec_reg_320 ^ 4'd8);

assign zext_ln27_fu_368_p1 = add_ln27_fu_362_p2;

assign zext_ln30_1_fu_403_p1 = add_ln30_1_fu_398_p2;

assign zext_ln30_fu_393_p1 = add_ln30_fu_388_p2;

assign zext_ln33_1_fu_423_p1 = add_ln33_1_fu_418_p2;

assign zext_ln33_fu_413_p1 = add_ln33_fu_408_p2;

assign zext_ln36_1_fu_443_p1 = add_ln36_1_fu_438_p2;

assign zext_ln36_fu_433_p1 = add_ln36_fu_428_p2;

assign zext_ln52_fu_523_p1 = or_ln52_fu_518_p2;

assign zext_ln53_fu_538_p1 = or_ln53_fu_533_p2;

assign zext_ln54_fu_553_p1 = or_ln54_fu_548_p2;

assign zext_ln55_fu_586_p1 = or_ln55_fu_581_p2;

assign zext_ln56_fu_603_p1 = or_ln56_fu_598_p2;

assign zext_ln57_fu_618_p1 = or_ln57_fu_613_p2;

assign zext_ln58_fu_633_p1 = or_ln58_fu_628_p2;

assign zext_ln65_fu_665_p1 = $unsigned(xor_ln65_fu_659_p2);

assign zext_ln68_1_fu_686_p1 = $unsigned(sext_ln68_fu_683_p1);

assign zext_ln68_fu_678_p1 = $unsigned(or_ln_fu_670_p3);

assign zext_ln71_1_fu_709_p1 = add_ln71_fu_704_p2;

assign zext_ln71_fu_699_p1 = or_ln1_fu_691_p3;

assign zext_ln74_1_fu_725_p1 = $unsigned(sext_ln74_1_fu_722_p1);

assign zext_ln74_fu_717_p1 = $unsigned(sext_ln74_fu_714_p1);

always @ (posedge ap_clk) begin
    out_1_rec_cast2_reg_1037[5:4] <= 2'b00;
    output_block_addr_1_reg_1042[6:4] <= 3'b000;
    output_block_addr_9_reg_1061[6:4] <= 3'b000;
    or_ln_reg_1079[4] <= 1'b1;
    output_block_addr_10_reg_1084[6:4] <= 3'b001;
    output_block_addr_11_reg_1090[6:5] <= 2'b00;
    output_block_addr_12_reg_1107[6:4] <= 3'b010;
    output_block_addr_13_reg_1112[6] <= 1'b0;
    output_block_addr_14_reg_1129[6:4] <= 3'b011;
    output_block_addr_15_reg_1134[6] <= 1'b0;
end

endmodule //fwht16
