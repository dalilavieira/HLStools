// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="usage_to_carbon,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.322000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=13,HLS_SYN_LUT=1338,HLS_VERSION=2019_1}" *)

module usage_to_carbon (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        usage,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] usage;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] and_ln304_43_fu_662_p2;
reg   [0:0] and_ln304_43_reg_798;
wire   [0:0] icmp_ln304_45_fu_668_p2;
reg   [0:0] icmp_ln304_45_reg_803;
wire   [0:0] icmp_ln304_46_fu_674_p2;
reg   [0:0] icmp_ln304_46_reg_808;
wire   [0:0] icmp_ln304_47_fu_680_p2;
reg   [0:0] icmp_ln304_47_reg_813;
wire   [0:0] icmp_ln304_48_fu_686_p2;
reg   [0:0] icmp_ln304_48_reg_818;
wire   [0:0] icmp_ln304_49_fu_692_p2;
reg   [0:0] icmp_ln304_49_reg_823;
wire   [0:0] icmp_ln304_50_fu_698_p2;
reg   [0:0] icmp_ln304_50_reg_828;
wire   [0:0] icmp_ln304_51_fu_704_p2;
reg   [0:0] icmp_ln304_51_reg_833;
wire   [0:0] icmp_ln304_52_fu_710_p2;
reg   [0:0] icmp_ln304_52_reg_838;
wire   [0:0] icmp_ln304_53_fu_716_p2;
reg   [0:0] icmp_ln304_53_reg_843;
wire   [0:0] icmp_ln304_54_fu_722_p2;
reg   [0:0] icmp_ln304_54_reg_848;
wire   [0:0] icmp_ln304_2_fu_146_p2;
wire   [0:0] icmp_ln304_1_fu_140_p2;
wire   [0:0] icmp_ln304_fu_134_p2;
wire   [0:0] and_ln304_fu_152_p2;
wire   [0:0] icmp_ln304_4_fu_170_p2;
wire   [0:0] icmp_ln304_3_fu_164_p2;
wire   [0:0] and_ln304_1_fu_158_p2;
wire   [0:0] and_ln304_2_fu_176_p2;
wire   [0:0] icmp_ln304_6_fu_194_p2;
wire   [0:0] icmp_ln304_5_fu_188_p2;
wire   [0:0] and_ln304_3_fu_182_p2;
wire   [0:0] and_ln304_4_fu_200_p2;
wire   [0:0] icmp_ln304_8_fu_218_p2;
wire   [0:0] icmp_ln304_7_fu_212_p2;
wire   [0:0] and_ln304_5_fu_206_p2;
wire   [0:0] and_ln304_6_fu_224_p2;
wire   [0:0] icmp_ln304_10_fu_242_p2;
wire   [0:0] icmp_ln304_9_fu_236_p2;
wire   [0:0] and_ln304_7_fu_230_p2;
wire   [0:0] and_ln304_8_fu_248_p2;
wire   [0:0] icmp_ln304_12_fu_266_p2;
wire   [0:0] icmp_ln304_11_fu_260_p2;
wire   [0:0] and_ln304_9_fu_254_p2;
wire   [0:0] and_ln304_10_fu_272_p2;
wire   [0:0] icmp_ln304_14_fu_290_p2;
wire   [0:0] icmp_ln304_13_fu_284_p2;
wire   [0:0] and_ln304_11_fu_278_p2;
wire   [0:0] and_ln304_12_fu_296_p2;
wire   [0:0] icmp_ln304_16_fu_314_p2;
wire   [0:0] icmp_ln304_15_fu_308_p2;
wire   [0:0] and_ln304_13_fu_302_p2;
wire   [0:0] and_ln304_14_fu_320_p2;
wire   [0:0] icmp_ln304_18_fu_338_p2;
wire   [0:0] icmp_ln304_17_fu_332_p2;
wire   [0:0] and_ln304_15_fu_326_p2;
wire   [0:0] and_ln304_16_fu_344_p2;
wire   [0:0] icmp_ln304_20_fu_362_p2;
wire   [0:0] icmp_ln304_19_fu_356_p2;
wire   [0:0] and_ln304_17_fu_350_p2;
wire   [0:0] and_ln304_18_fu_368_p2;
wire   [0:0] icmp_ln304_22_fu_386_p2;
wire   [0:0] icmp_ln304_21_fu_380_p2;
wire   [0:0] and_ln304_19_fu_374_p2;
wire   [0:0] and_ln304_20_fu_392_p2;
wire   [0:0] icmp_ln304_24_fu_410_p2;
wire   [0:0] icmp_ln304_23_fu_404_p2;
wire   [0:0] and_ln304_21_fu_398_p2;
wire   [0:0] and_ln304_22_fu_416_p2;
wire   [0:0] icmp_ln304_26_fu_434_p2;
wire   [0:0] icmp_ln304_25_fu_428_p2;
wire   [0:0] and_ln304_23_fu_422_p2;
wire   [0:0] and_ln304_24_fu_440_p2;
wire   [0:0] icmp_ln304_28_fu_458_p2;
wire   [0:0] icmp_ln304_27_fu_452_p2;
wire   [0:0] and_ln304_25_fu_446_p2;
wire   [0:0] and_ln304_26_fu_464_p2;
wire   [0:0] icmp_ln304_30_fu_482_p2;
wire   [0:0] icmp_ln304_29_fu_476_p2;
wire   [0:0] and_ln304_27_fu_470_p2;
wire   [0:0] and_ln304_28_fu_488_p2;
wire   [0:0] icmp_ln304_32_fu_506_p2;
wire   [0:0] icmp_ln304_31_fu_500_p2;
wire   [0:0] and_ln304_29_fu_494_p2;
wire   [0:0] and_ln304_30_fu_512_p2;
wire   [0:0] icmp_ln304_34_fu_530_p2;
wire   [0:0] icmp_ln304_33_fu_524_p2;
wire   [0:0] and_ln304_31_fu_518_p2;
wire   [0:0] and_ln304_32_fu_536_p2;
wire   [0:0] icmp_ln304_36_fu_554_p2;
wire   [0:0] icmp_ln304_35_fu_548_p2;
wire   [0:0] and_ln304_33_fu_542_p2;
wire   [0:0] and_ln304_34_fu_560_p2;
wire   [0:0] icmp_ln304_38_fu_578_p2;
wire   [0:0] icmp_ln304_37_fu_572_p2;
wire   [0:0] and_ln304_35_fu_566_p2;
wire   [0:0] and_ln304_36_fu_584_p2;
wire   [0:0] icmp_ln304_40_fu_602_p2;
wire   [0:0] icmp_ln304_39_fu_596_p2;
wire   [0:0] and_ln304_37_fu_590_p2;
wire   [0:0] and_ln304_38_fu_608_p2;
wire   [0:0] icmp_ln304_42_fu_626_p2;
wire   [0:0] icmp_ln304_41_fu_620_p2;
wire   [0:0] and_ln304_39_fu_614_p2;
wire   [0:0] and_ln304_40_fu_632_p2;
wire   [0:0] icmp_ln304_44_fu_650_p2;
wire   [0:0] icmp_ln304_43_fu_644_p2;
wire   [0:0] and_ln304_41_fu_638_p2;
wire   [0:0] and_ln304_42_fu_656_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln304_44_fu_728_p2;
wire   [0:0] and_ln304_45_fu_732_p2;
wire   [0:0] and_ln304_46_fu_737_p2;
wire   [0:0] and_ln304_47_fu_741_p2;
wire   [0:0] and_ln304_48_fu_747_p2;
wire   [0:0] and_ln304_49_fu_751_p2;
wire   [0:0] and_ln304_50_fu_757_p2;
wire   [0:0] and_ln304_51_fu_761_p2;
wire   [0:0] empty_fu_782_p2;
wire   [6:0] select_ln304_54_cast_fu_775_p3;
wire   [6:0] select_ln304_fu_767_p3;
wire   [6:0] p_0_fu_786_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln304_43_reg_798 <= and_ln304_43_fu_662_p2;
        icmp_ln304_45_reg_803 <= icmp_ln304_45_fu_668_p2;
        icmp_ln304_46_reg_808 <= icmp_ln304_46_fu_674_p2;
        icmp_ln304_47_reg_813 <= icmp_ln304_47_fu_680_p2;
        icmp_ln304_48_reg_818 <= icmp_ln304_48_fu_686_p2;
        icmp_ln304_49_reg_823 <= icmp_ln304_49_fu_692_p2;
        icmp_ln304_50_reg_828 <= icmp_ln304_50_fu_698_p2;
        icmp_ln304_51_reg_833 <= icmp_ln304_51_fu_704_p2;
        icmp_ln304_52_reg_838 <= icmp_ln304_52_fu_710_p2;
        icmp_ln304_53_reg_843 <= icmp_ln304_53_fu_716_p2;
        icmp_ln304_54_reg_848 <= icmp_ln304_54_fu_722_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln304_10_fu_272_p2 = (icmp_ln304_12_fu_266_p2 & icmp_ln304_11_fu_260_p2);

assign and_ln304_11_fu_278_p2 = (and_ln304_9_fu_254_p2 & and_ln304_10_fu_272_p2);

assign and_ln304_12_fu_296_p2 = (icmp_ln304_14_fu_290_p2 & icmp_ln304_13_fu_284_p2);

assign and_ln304_13_fu_302_p2 = (and_ln304_12_fu_296_p2 & and_ln304_11_fu_278_p2);

assign and_ln304_14_fu_320_p2 = (icmp_ln304_16_fu_314_p2 & icmp_ln304_15_fu_308_p2);

assign and_ln304_15_fu_326_p2 = (and_ln304_14_fu_320_p2 & and_ln304_13_fu_302_p2);

assign and_ln304_16_fu_344_p2 = (icmp_ln304_18_fu_338_p2 & icmp_ln304_17_fu_332_p2);

assign and_ln304_17_fu_350_p2 = (and_ln304_16_fu_344_p2 & and_ln304_15_fu_326_p2);

assign and_ln304_18_fu_368_p2 = (icmp_ln304_20_fu_362_p2 & icmp_ln304_19_fu_356_p2);

assign and_ln304_19_fu_374_p2 = (and_ln304_18_fu_368_p2 & and_ln304_17_fu_350_p2);

assign and_ln304_1_fu_158_p2 = (icmp_ln304_fu_134_p2 & and_ln304_fu_152_p2);

assign and_ln304_20_fu_392_p2 = (icmp_ln304_22_fu_386_p2 & icmp_ln304_21_fu_380_p2);

assign and_ln304_21_fu_398_p2 = (and_ln304_20_fu_392_p2 & and_ln304_19_fu_374_p2);

assign and_ln304_22_fu_416_p2 = (icmp_ln304_24_fu_410_p2 & icmp_ln304_23_fu_404_p2);

assign and_ln304_23_fu_422_p2 = (and_ln304_22_fu_416_p2 & and_ln304_21_fu_398_p2);

assign and_ln304_24_fu_440_p2 = (icmp_ln304_26_fu_434_p2 & icmp_ln304_25_fu_428_p2);

assign and_ln304_25_fu_446_p2 = (and_ln304_24_fu_440_p2 & and_ln304_23_fu_422_p2);

assign and_ln304_26_fu_464_p2 = (icmp_ln304_28_fu_458_p2 & icmp_ln304_27_fu_452_p2);

assign and_ln304_27_fu_470_p2 = (and_ln304_26_fu_464_p2 & and_ln304_25_fu_446_p2);

assign and_ln304_28_fu_488_p2 = (icmp_ln304_30_fu_482_p2 & icmp_ln304_29_fu_476_p2);

assign and_ln304_29_fu_494_p2 = (and_ln304_28_fu_488_p2 & and_ln304_27_fu_470_p2);

assign and_ln304_2_fu_176_p2 = (icmp_ln304_4_fu_170_p2 & icmp_ln304_3_fu_164_p2);

assign and_ln304_30_fu_512_p2 = (icmp_ln304_32_fu_506_p2 & icmp_ln304_31_fu_500_p2);

assign and_ln304_31_fu_518_p2 = (and_ln304_30_fu_512_p2 & and_ln304_29_fu_494_p2);

assign and_ln304_32_fu_536_p2 = (icmp_ln304_34_fu_530_p2 & icmp_ln304_33_fu_524_p2);

assign and_ln304_33_fu_542_p2 = (and_ln304_32_fu_536_p2 & and_ln304_31_fu_518_p2);

assign and_ln304_34_fu_560_p2 = (icmp_ln304_36_fu_554_p2 & icmp_ln304_35_fu_548_p2);

assign and_ln304_35_fu_566_p2 = (and_ln304_34_fu_560_p2 & and_ln304_33_fu_542_p2);

assign and_ln304_36_fu_584_p2 = (icmp_ln304_38_fu_578_p2 & icmp_ln304_37_fu_572_p2);

assign and_ln304_37_fu_590_p2 = (and_ln304_36_fu_584_p2 & and_ln304_35_fu_566_p2);

assign and_ln304_38_fu_608_p2 = (icmp_ln304_40_fu_602_p2 & icmp_ln304_39_fu_596_p2);

assign and_ln304_39_fu_614_p2 = (and_ln304_38_fu_608_p2 & and_ln304_37_fu_590_p2);

assign and_ln304_3_fu_182_p2 = (and_ln304_2_fu_176_p2 & and_ln304_1_fu_158_p2);

assign and_ln304_40_fu_632_p2 = (icmp_ln304_42_fu_626_p2 & icmp_ln304_41_fu_620_p2);

assign and_ln304_41_fu_638_p2 = (and_ln304_40_fu_632_p2 & and_ln304_39_fu_614_p2);

assign and_ln304_42_fu_656_p2 = (icmp_ln304_44_fu_650_p2 & icmp_ln304_43_fu_644_p2);

assign and_ln304_43_fu_662_p2 = (and_ln304_42_fu_656_p2 & and_ln304_41_fu_638_p2);

assign and_ln304_44_fu_728_p2 = (icmp_ln304_46_reg_808 & icmp_ln304_45_reg_803);

assign and_ln304_45_fu_732_p2 = (and_ln304_44_fu_728_p2 & and_ln304_43_reg_798);

assign and_ln304_46_fu_737_p2 = (icmp_ln304_48_reg_818 & icmp_ln304_47_reg_813);

assign and_ln304_47_fu_741_p2 = (and_ln304_46_fu_737_p2 & and_ln304_45_fu_732_p2);

assign and_ln304_48_fu_747_p2 = (icmp_ln304_50_reg_828 & icmp_ln304_49_reg_823);

assign and_ln304_49_fu_751_p2 = (and_ln304_48_fu_747_p2 & and_ln304_47_fu_741_p2);

assign and_ln304_4_fu_200_p2 = (icmp_ln304_6_fu_194_p2 & icmp_ln304_5_fu_188_p2);

assign and_ln304_50_fu_757_p2 = (icmp_ln304_52_reg_838 & icmp_ln304_51_reg_833);

assign and_ln304_51_fu_761_p2 = (and_ln304_50_fu_757_p2 & and_ln304_49_fu_751_p2);

assign and_ln304_5_fu_206_p2 = (and_ln304_4_fu_200_p2 & and_ln304_3_fu_182_p2);

assign and_ln304_6_fu_224_p2 = (icmp_ln304_8_fu_218_p2 & icmp_ln304_7_fu_212_p2);

assign and_ln304_7_fu_230_p2 = (and_ln304_6_fu_224_p2 & and_ln304_5_fu_206_p2);

assign and_ln304_8_fu_248_p2 = (icmp_ln304_9_fu_236_p2 & icmp_ln304_10_fu_242_p2);

assign and_ln304_9_fu_254_p2 = (and_ln304_8_fu_248_p2 & and_ln304_7_fu_230_p2);

assign and_ln304_fu_152_p2 = (icmp_ln304_2_fu_146_p2 & icmp_ln304_1_fu_140_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = p_0_fu_786_p3;

assign empty_fu_782_p2 = (icmp_ln304_54_reg_848 | icmp_ln304_53_reg_843);

assign icmp_ln304_10_fu_242_p2 = ((usage != 32'd153) ? 1'b1 : 1'b0);

assign icmp_ln304_11_fu_260_p2 = ((usage != 32'd201) ? 1'b1 : 1'b0);

assign icmp_ln304_12_fu_266_p2 = ((usage != 32'd202) ? 1'b1 : 1'b0);

assign icmp_ln304_13_fu_284_p2 = ((usage != 32'd136) ? 1'b1 : 1'b0);

assign icmp_ln304_14_fu_290_p2 = ((usage != 32'd200) ? 1'b1 : 1'b0);

assign icmp_ln304_15_fu_308_p2 = ((usage != 32'd228) ? 1'b1 : 1'b0);

assign icmp_ln304_16_fu_314_p2 = ((usage != 32'd133) ? 1'b1 : 1'b0);

assign icmp_ln304_17_fu_332_p2 = ((usage != 32'd226) ? 1'b1 : 1'b0);

assign icmp_ln304_18_fu_338_p2 = ((usage != 32'd227) ? 1'b1 : 1'b0);

assign icmp_ln304_19_fu_356_p2 = ((usage != 32'd224) ? 1'b1 : 1'b0);

assign icmp_ln304_1_fu_140_p2 = ((usage != 32'd289) ? 1'b1 : 1'b0);

assign icmp_ln304_20_fu_362_p2 = ((usage != 32'd225) ? 1'b1 : 1'b0);

assign icmp_ln304_21_fu_380_p2 = ((usage != 32'd222) ? 1'b1 : 1'b0);

assign icmp_ln304_22_fu_386_p2 = ((usage != 32'd223) ? 1'b1 : 1'b0);

assign icmp_ln304_23_fu_404_p2 = ((usage != 32'd220) ? 1'b1 : 1'b0);

assign icmp_ln304_24_fu_410_p2 = ((usage != 32'd221) ? 1'b1 : 1'b0);

assign icmp_ln304_25_fu_428_p2 = ((usage != 32'd215) ? 1'b1 : 1'b0);

assign icmp_ln304_26_fu_434_p2 = ((usage != 32'd216) ? 1'b1 : 1'b0);

assign icmp_ln304_27_fu_452_p2 = ((usage != 32'd213) ? 1'b1 : 1'b0);

assign icmp_ln304_28_fu_458_p2 = ((usage != 32'd214) ? 1'b1 : 1'b0);

assign icmp_ln304_29_fu_476_p2 = ((usage != 32'd211) ? 1'b1 : 1'b0);

assign icmp_ln304_2_fu_146_p2 = ((usage != 32'd162) ? 1'b1 : 1'b0);

assign icmp_ln304_30_fu_482_p2 = ((usage != 32'd212) ? 1'b1 : 1'b0);

assign icmp_ln304_31_fu_500_p2 = ((usage != 32'd209) ? 1'b1 : 1'b0);

assign icmp_ln304_32_fu_506_p2 = ((usage != 32'd210) ? 1'b1 : 1'b0);

assign icmp_ln304_33_fu_524_p2 = ((usage != 32'd288) ? 1'b1 : 1'b0);

assign icmp_ln304_34_fu_530_p2 = ((usage != 32'd208) ? 1'b1 : 1'b0);

assign icmp_ln304_35_fu_548_p2 = ((usage != 32'd283) ? 1'b1 : 1'b0);

assign icmp_ln304_36_fu_554_p2 = ((usage != 32'd161) ? 1'b1 : 1'b0);

assign icmp_ln304_37_fu_572_p2 = ((usage != 32'd180) ? 1'b1 : 1'b0);

assign icmp_ln304_38_fu_578_p2 = ((usage != 32'd281) ? 1'b1 : 1'b0);

assign icmp_ln304_39_fu_596_p2 = ((usage != 32'd165) ? 1'b1 : 1'b0);

assign icmp_ln304_3_fu_164_p2 = ((usage != 32'd275) ? 1'b1 : 1'b0);

assign icmp_ln304_40_fu_602_p2 = ((usage != 32'd176) ? 1'b1 : 1'b0);

assign icmp_ln304_41_fu_620_p2 = ((usage != 32'd191) ? 1'b1 : 1'b0);

assign icmp_ln304_42_fu_626_p2 = ((usage != 32'd190) ? 1'b1 : 1'b0);

assign icmp_ln304_43_fu_644_p2 = ((usage != 32'd276) ? 1'b1 : 1'b0);

assign icmp_ln304_44_fu_650_p2 = ((usage != 32'd280) ? 1'b1 : 1'b0);

assign icmp_ln304_45_fu_668_p2 = ((usage != 32'd205) ? 1'b1 : 1'b0);

assign icmp_ln304_46_fu_674_p2 = ((usage != 32'd264) ? 1'b1 : 1'b0);

assign icmp_ln304_47_fu_680_p2 = ((usage != 32'd207) ? 1'b1 : 1'b0);

assign icmp_ln304_48_fu_686_p2 = ((usage != 32'd203) ? 1'b1 : 1'b0);

assign icmp_ln304_49_fu_692_p2 = ((usage != 32'd172) ? 1'b1 : 1'b0);

assign icmp_ln304_4_fu_170_p2 = ((usage != 32'd157) ? 1'b1 : 1'b0);

assign icmp_ln304_50_fu_698_p2 = ((usage != 32'd204) ? 1'b1 : 1'b0);

assign icmp_ln304_51_fu_704_p2 = ((usage != 32'd174) ? 1'b1 : 1'b0);

assign icmp_ln304_52_fu_710_p2 = ((usage != 32'd170) ? 1'b1 : 1'b0);

assign icmp_ln304_53_fu_716_p2 = ((usage == 32'd171) ? 1'b1 : 1'b0);

assign icmp_ln304_54_fu_722_p2 = ((usage == 32'd148) ? 1'b1 : 1'b0);

assign icmp_ln304_5_fu_188_p2 = ((usage != 32'd185) ? 1'b1 : 1'b0);

assign icmp_ln304_6_fu_194_p2 = ((usage != 32'd277) ? 1'b1 : 1'b0);

assign icmp_ln304_7_fu_212_p2 = ((usage != 32'd197) ? 1'b1 : 1'b0);

assign icmp_ln304_8_fu_218_p2 = ((usage != 32'd237) ? 1'b1 : 1'b0);

assign icmp_ln304_9_fu_236_p2 = ((usage != 32'd154) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_134_p2 = ((usage == 32'd198) ? 1'b1 : 1'b0);

assign p_0_fu_786_p3 = ((empty_fu_782_p2[0:0] === 1'b1) ? select_ln304_54_cast_fu_775_p3 : select_ln304_fu_767_p3);

assign select_ln304_54_cast_fu_775_p3 = ((icmp_ln304_54_reg_848[0:0] === 1'b1) ? 7'd0 : 7'd54);

assign select_ln304_fu_767_p3 = ((and_ln304_51_fu_761_p2[0:0] === 1'b1) ? 7'd127 : 7'd0);

endmodule //usage_to_carbon
