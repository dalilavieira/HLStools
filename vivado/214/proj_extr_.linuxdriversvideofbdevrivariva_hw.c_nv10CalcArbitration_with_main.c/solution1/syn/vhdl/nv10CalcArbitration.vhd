-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nv10CalcArbitration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_valid : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_valid_ap_vld : OUT STD_LOGIC;
    fifo_graphics_lwm : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_graphics_lwm_ap_vld : OUT STD_LOGIC;
    fifo_graphics_burst_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_graphics_burst_size_ap_vld : OUT STD_LOGIC;
    fifo_video_lwm : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_video_lwm_ap_vld : OUT STD_LOGIC;
    fifo_video_burst_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_video_burst_size_ap_vld : OUT STD_LOGIC;
    arb_pclk_khz : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_mclk_khz : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_nvclk_khz : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_mem_page_miss : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_mem_latency : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_memory_width : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_enable_video : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_gr_during_vid : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_pix_bpp : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_mem_aligned : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_enable_mp : IN STD_LOGIC_VECTOR (31 downto 0);
    arb_memory_type : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nv10CalcArbitration is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nv10CalcArbitration,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=37,HLS_SYN_FF=3907,HLS_SYN_LUT=4420,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E8480 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000111101000010010000000";
    constant ap_const_lv32_2DC6C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001011011100011011000000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_F4240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011110100001001000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_895440 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100010010101010001000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3D0900 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111010000100100000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv65_10C6F7A0C : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100001100011011110111101000001100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_FFF : STD_LOGIC_VECTOR (12 downto 0) := "0111111111111";
    constant ap_const_lv13_400 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_const_lv14_3C00 : STD_LOGIC_VECTOR (13 downto 0) := "11110000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_408 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000001000";
    constant ap_const_lv28_F4240 : STD_LOGIC_VECTOR (27 downto 0) := "0000000011110100001001000000";
    constant ap_const_lv26_F4240 : STD_LOGIC_VECTOR (25 downto 0) := "00000011110100001001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_2_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1304 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_reg_1309 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln84_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln84_1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_470_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln101_reg_1329 : STD_LOGIC_VECTOR (4 downto 0);
    signal crtc_drain_rate_fu_490_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal crtc_drain_rate_reg_1335 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln178_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln112_1_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln112_1_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln151_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln151_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln157_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln157_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln183_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln137_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln137_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln178_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln178_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln114_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln114_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_found_0_phi_fu_269_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_m_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_m_min_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_min_mclk_extra_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_n_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_p_reg_1424 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_crt_1_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_crt_1_reg_1431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal mul_ln148_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln148_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal tmp_7_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln148_1_fu_728_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln148_1_reg_1447 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp_9_reg_1452 : STD_LOGIC_VECTOR (12 downto 0);
    signal clwm_1_fu_777_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal select_ln178_fu_822_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln183_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln183_1_fu_836_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal m2us_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m2us_reg_1478 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_crt_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal us_crt_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal mul_ln159_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln159_reg_1488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal tmp_4_reg_1493 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln159_1_fu_887_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln159_1_reg_1499 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal tmp_6_reg_1504 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln198_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal mul_ln206_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln206_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln206_1_fu_1000_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln206_1_reg_1526 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_17_reg_1531 : STD_LOGIC_VECTOR (12 downto 0);
    signal p1clk_fu_1051_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1clk_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal mul_ln207_fu_1058_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln207_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal found_0_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_found_5_phi_fu_318_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal cbs_0_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cbs_7_phi_fu_335_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal cbs_4_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal clwm_3_reg_302 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln209_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln222_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln213_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln213_fu_1229_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_mclk_extra_1_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln84_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_mclk_extra_3_fu_1190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln151_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln151_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln151_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln151_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_422_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln79_fu_430_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln73_fu_438_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mclks_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln151_fu_478_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln151_1_fu_481_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln151_1_fu_487_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln178_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_503_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln86_fu_523_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mclk_extra_fu_528_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln91_fu_536_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mclk_extra_1_fu_544_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln101_1_fu_567_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln84_fu_552_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mclk_loop_fu_570_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln112_fu_1264_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln113_fu_1271_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln157_fu_596_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln157_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln180_fu_602_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln180_1_fu_608_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln183_fu_614_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln180_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln183_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln137_fu_626_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln180_1_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln178_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln178_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln114_fu_654_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_664_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_668_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_672_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_1_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_2_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln148_fu_713_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln148_1_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln148_fu_744_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_8_fu_749_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln148_fu_759_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln148_1_fu_765_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln148_1_fu_771_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln159_fu_783_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_fu_788_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln159_fu_798_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln159_1_fu_804_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln159_1_fu_810_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal clwm_fu_816_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln202_1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln202_fu_843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_1_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln159_fu_872_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln159_1_fu_887_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln197_fu_915_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln197_1_fu_921_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln197_2_fu_931_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln197_fu_935_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln197_2_fu_945_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln197_3_fu_955_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_907_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln197_1_fu_939_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln197_1_fu_959_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln197_fu_963_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_971_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln197_1_fu_903_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln206_fu_985_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln206_1_fu_1000_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln206_fu_1016_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_16_fu_1021_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln206_1_fu_1031_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln206_2_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln206_fu_1038_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln206_1_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln207_fu_1058_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln207_fu_1058_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln197_fu_1062_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal clwm_2_fu_1066_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal craw_fu_1072_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln201_fu_1083_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln201_fu_1089_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln207_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1111_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln207_fu_1121_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_13_fu_1131_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_18_fu_1099_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln207_1_fu_1125_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln207_1_fu_1140_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p2_fu_1144_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln207_fu_1152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_1093_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln209_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln209_1_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1174_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal cbs_fu_1215_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal cbs_1_fu_1225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln198_fu_1079_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal clwm_4_fu_1243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln233_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln112_fu_1264_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln112_fu_1264_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln113_fu_1271_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln113_fu_1271_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_353_ap_start : STD_LOGIC;
    signal grp_fu_353_ap_done : STD_LOGIC;
    signal grp_fu_660_ap_start : STD_LOGIC;
    signal grp_fu_660_ap_done : STD_LOGIC;
    signal grp_fu_664_ap_start : STD_LOGIC;
    signal grp_fu_664_ap_done : STD_LOGIC;
    signal grp_fu_668_ap_start : STD_LOGIC;
    signal grp_fu_668_ap_done : STD_LOGIC;
    signal grp_fu_672_ap_start : STD_LOGIC;
    signal grp_fu_672_ap_done : STD_LOGIC;
    signal grp_fu_677_ap_start : STD_LOGIC;
    signal grp_fu_677_ap_done : STD_LOGIC;
    signal grp_fu_682_ap_start : STD_LOGIC;
    signal grp_fu_682_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);
    signal mul_ln112_fu_1264_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln113_fu_1271_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln157_fu_596_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nv10CalcArbitration_sdiv_29ns_32ns_32_33_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nv10CalcArbitration_sdiv_27ns_32ns_32_31_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nv10CalcArbitration_sdiv_26ns_32s_32_30_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nv10CalcArbitration_sdiv_24ns_32s_32_28_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nv10CalcArbitration_mul_mul_7ns_21ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component nv10CalcArbitration_mul_mul_5ns_21ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1_U1 : component nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_353_ap_start,
        done => grp_fu_353_ap_done,
        din0 => mul_ln157_reg_1376,
        din1 => arb_mclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1_U2 : component nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_660_ap_start,
        done => grp_fu_660_ap_done,
        din0 => mul_ln114_reg_1396,
        din1 => arb_mclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_660_p2);

    nv10CalcArbitration_sdiv_29ns_32ns_32_33_seq_1_U3 : component nv10CalcArbitration_sdiv_29ns_32ns_32_33_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 33,
        din0_WIDTH => 29,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_664_ap_start,
        done => grp_fu_664_ap_done,
        din0 => grp_fu_664_p0,
        din1 => arb_mclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_664_p2);

    nv10CalcArbitration_sdiv_27ns_32ns_32_31_seq_1_U4 : component nv10CalcArbitration_sdiv_27ns_32ns_32_31_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_668_ap_start,
        done => grp_fu_668_ap_done,
        din0 => grp_fu_668_p0,
        din1 => arb_mclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_668_p2);

    nv10CalcArbitration_sdiv_26ns_32s_32_30_seq_1_U5 : component nv10CalcArbitration_sdiv_26ns_32s_32_30_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_672_ap_start,
        done => grp_fu_672_ap_done,
        din0 => grp_fu_672_p0,
        din1 => arb_nvclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p2);

    nv10CalcArbitration_sdiv_24ns_32s_32_28_seq_1_U6 : component nv10CalcArbitration_sdiv_24ns_32s_32_28_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_677_ap_start,
        done => grp_fu_677_ap_done,
        din0 => grp_fu_677_p0,
        din1 => arb_pclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_677_p2);

    nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1_U7 : component nv10CalcArbitration_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_682_ap_start,
        done => grp_fu_682_ap_done,
        din0 => mul_ln137_reg_1387,
        din1 => arb_mclk_khz,
        ce => ap_const_logic_1,
        dout => grp_fu_682_p2);

    nv10CalcArbitration_mul_mul_7ns_21ns_28_1_1_U8 : component nv10CalcArbitration_mul_mul_7ns_21ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 21,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln112_fu_1264_p0,
        din1 => mul_ln112_fu_1264_p1,
        dout => mul_ln112_fu_1264_p2);

    nv10CalcArbitration_mul_mul_5ns_21ns_26_1_1_U9 : component nv10CalcArbitration_mul_mul_5ns_21ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 21,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln113_fu_1271_p0,
        din1 => mul_ln113_fu_1271_p1,
        dout => mul_ln113_fu_1271_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cbs_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                cbs_0_reg_276 <= ap_phi_mux_cbs_7_phi_fu_335_p8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                cbs_0_reg_276 <= ap_const_lv32_200;
            end if; 
        end if;
    end process;

    cbs_4_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln178_reg_1392 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78) and (icmp_ln84_reg_1314 = ap_const_lv1_1))) then 
                cbs_4_reg_288 <= select_ln183_fu_829_p3;
            elsif ((((or_ln178_reg_1392 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78) and (icmp_ln84_reg_1314 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and (icmp_ln84_reg_1314 = ap_const_lv1_0)))) then 
                cbs_4_reg_288 <= cbs_0_reg_276;
            end if; 
        end if;
    end process;

    clwm_3_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                if (((or_ln178_reg_1392 = ap_const_lv1_1) and (icmp_ln84_reg_1314 = ap_const_lv1_1))) then 
                    clwm_3_reg_302 <= select_ln178_fu_822_p3;
                elsif (((or_ln178_reg_1392 = ap_const_lv1_0) and (icmp_ln84_reg_1314 = ap_const_lv1_1))) then 
                    clwm_3_reg_302 <= select_ln183_1_fu_836_p3;
                elsif ((icmp_ln84_reg_1314 = ap_const_lv1_0)) then 
                    clwm_3_reg_302 <= clwm_1_fu_777_p2;
                end if;
            end if; 
        end if;
    end process;

    found_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                found_0_reg_265 <= ap_phi_mux_found_5_phi_fu_318_p8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                found_0_reg_265 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    min_mclk_extra_1_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_357_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
                min_mclk_extra_1_fu_168 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln209_fu_1168_p2) and (grp_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
                min_mclk_extra_1_fu_168 <= grp_fu_364_p2;
            elsif (((icmp_ln222_fu_1184_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
                min_mclk_extra_1_fu_168 <= min_mclk_extra_3_fu_1190_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                min_mclk_extra_1_fu_168 <= select_ln84_fu_556_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                crtc_drain_rate_reg_1335 <= crtc_drain_rate_fu_490_p3;
                icmp_ln101_reg_1324 <= icmp_ln101_fu_458_p2;
                icmp_ln178_reg_1340 <= icmp_ln178_fu_513_p2;
                icmp_ln84_1_reg_1319 <= icmp_ln84_1_fu_452_p2;
                icmp_ln84_reg_1314 <= icmp_ln84_fu_446_p2;
                select_ln101_reg_1329 <= select_ln101_fu_470_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln183_reg_1381 <= icmp_ln183_fu_620_p2;
                    mul_ln137_reg_1387(31 downto 7) <= mul_ln137_fu_626_p2(31 downto 7);
                mul_ln157_reg_1376 <= mul_ln157_fu_596_p2;
                or_ln178_reg_1392 <= or_ln178_fu_644_p2;
                sext_ln151_reg_1370 <= sext_ln151_fu_586_p1;
                    zext_ln112_1_reg_1360(27 downto 0) <= zext_ln112_1_fu_580_p1(27 downto 0);
                    zext_ln113_reg_1365(25 downto 0) <= zext_ln113_fu_583_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                icmp_ln198_reg_1510 <= icmp_ln198_fu_979_p2;
                mul_ln206_reg_1515 <= mul_ln206_fu_985_p2;
                tmp_11_reg_1520 <= mul_ln206_fu_985_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                m2us_reg_1478 <= m2us_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_found_0_phi_fu_269_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    mul_ln114_reg_1396(31 downto 6) <= mul_ln114_fu_654_p2(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                mul_ln148_1_reg_1447 <= mul_ln148_1_fu_728_p2;
                tmp_9_reg_1452 <= mul_ln148_1_fu_728_p2(64 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                mul_ln148_reg_1436 <= mul_ln148_fu_713_p2;
                tmp_7_reg_1441 <= mul_ln148_fu_713_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                    mul_ln159_1_reg_1499(64 downto 2) <= mul_ln159_1_fu_887_p2(64 downto 2);
                tmp_6_reg_1504 <= mul_ln159_1_fu_887_p2(64 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                mul_ln159_reg_1488 <= mul_ln159_fu_872_p2;
                tmp_4_reg_1493 <= mul_ln159_fu_872_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                    mul_ln206_1_reg_1526(64 downto 2) <= mul_ln206_1_fu_1000_p2(64 downto 2);
                tmp_17_reg_1531 <= mul_ln206_1_fu_1000_p2(64 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then
                mul_ln207_reg_1541 <= mul_ln207_fu_1058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                p1clk_reg_1536 <= p1clk_fu_1051_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_1_reg_1309 <= mul_ln151_fu_370_p2(31 downto 3);
                tmp_2_reg_1299 <= mul_ln151_fu_370_p2(31 downto 31);
                tmp_reg_1304 <= sub_ln151_fu_384_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                us_crt_1_reg_1431 <= us_crt_1_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                us_crt_reg_1483 <= us_crt_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                us_m_min_reg_1407 <= grp_fu_668_p2;
                us_m_reg_1401 <= grp_fu_664_p2;
                us_min_mclk_extra_reg_1412 <= grp_fu_660_p2;
                us_n_reg_1417 <= grp_fu_672_p2;
                us_p_reg_1424 <= grp_fu_677_p2;
            end if;
        end if;
    end process;
    zext_ln112_1_reg_1360(31 downto 28) <= "0000";
    zext_ln113_reg_1365(31 downto 26) <= "000000";
    mul_ln137_reg_1387(6 downto 0) <= "0000000";
    mul_ln114_reg_1396(5 downto 0) <= "000000";
    mul_ln159_1_reg_1499(1 downto 0) <= "00";
    mul_ln206_1_reg_1526(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln84_reg_1314, ap_CS_fsm_state4, ap_phi_mux_found_0_phi_fu_269_p4, ap_CS_fsm_state40)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_phi_mux_found_0_phi_fu_269_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln84_reg_1314 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln142_1_fu_695_p2 <= std_logic_vector(unsigned(grp_fu_353_p2) + unsigned(empty_fu_686_p2));
    add_ln142_2_fu_701_p2 <= std_logic_vector(unsigned(add_ln142_1_fu_695_p2) + unsigned(grp_fu_682_p2));
    add_ln142_fu_691_p2 <= std_logic_vector(unsigned(us_p_reg_1424) + unsigned(us_n_reg_1417));
    add_ln158_1_fu_861_p2 <= std_logic_vector(unsigned(grp_fu_353_p2) + unsigned(us_p_reg_1424));
    add_ln158_fu_857_p2 <= std_logic_vector(unsigned(us_m_reg_1401) + unsigned(us_n_reg_1417));
    add_ln178_fu_497_p2 <= std_logic_vector(unsigned(arb_memory_width) + unsigned(ap_const_lv32_FFFFFFC0));
    add_ln201_fu_1083_p2 <= std_logic_vector(signed(craw_fu_1072_p3) + signed(ap_const_lv14_3C00));
    add_ln202_1_fu_847_p2 <= std_logic_vector(unsigned(us_n_reg_1417) + unsigned(us_p_reg_1424));
    add_ln202_fu_843_p2 <= std_logic_vector(unsigned(us_min_mclk_extra_reg_1412) + unsigned(us_m_min_reg_1407));
    and_ln209_fu_1168_p2 <= (icmp_ln209_fu_1156_p2 and icmp_ln209_1_fu_1162_p2);
    and_ln84_fu_519_p2 <= (icmp_ln84_reg_1314 and icmp_ln84_1_reg_1319);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state4, ap_phi_mux_found_0_phi_fu_269_p4)
    begin
        if (((ap_phi_mux_found_0_phi_fu_269_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cbs_7_phi_fu_335_p8_assign_proc : process(ap_CS_fsm_state120, cbs_4_reg_288, and_ln209_fu_1168_p2, grp_fu_357_p2, icmp_ln222_fu_1184_p2, select_ln213_fu_1229_p3)
    begin
        if (((grp_fu_357_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            ap_phi_mux_cbs_7_phi_fu_335_p8 <= select_ln213_fu_1229_p3;
        elsif ((((icmp_ln222_fu_1184_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)) or ((icmp_ln222_fu_1184_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)) or ((ap_const_lv1_1 = and_ln209_fu_1168_p2) and (grp_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state120)))) then 
            ap_phi_mux_cbs_7_phi_fu_335_p8 <= cbs_4_reg_288;
        else 
            ap_phi_mux_cbs_7_phi_fu_335_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ap_phi_mux_found_0_phi_fu_269_p4 <= found_0_reg_265;

    ap_phi_mux_found_5_phi_fu_318_p8_assign_proc : process(ap_CS_fsm_state120, and_ln209_fu_1168_p2, grp_fu_357_p2, icmp_ln222_fu_1184_p2, icmp_ln213_fu_1208_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then
            if (((grp_fu_357_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln209_fu_1168_p2))) then 
                ap_phi_mux_found_5_phi_fu_318_p8 <= icmp_ln213_fu_1208_p2;
            elsif (((icmp_ln222_fu_1184_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln209_fu_1168_p2))) then 
                ap_phi_mux_found_5_phi_fu_318_p8 <= ap_const_lv1_1;
            elsif (((icmp_ln222_fu_1184_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln209_fu_1168_p2))) then 
                ap_phi_mux_found_5_phi_fu_318_p8 <= grp_fu_357_p2;
            elsif (((ap_const_lv1_1 = and_ln209_fu_1168_p2) and (grp_fu_357_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_found_5_phi_fu_318_p8 <= ap_const_lv1_0;
            else 
                ap_phi_mux_found_5_phi_fu_318_p8 <= "X";
            end if;
        else 
            ap_phi_mux_found_5_phi_fu_318_p8 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_phi_mux_found_0_phi_fu_269_p4)
    begin
        if (((ap_phi_mux_found_0_phi_fu_269_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cbs_1_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cbs_fu_1215_p4),32));
    cbs_fu_1215_p4 <= cbs_4_reg_288(31 downto 1);
    clwm_1_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(select_ln148_1_fu_771_p3));
    clwm_2_fu_1066_p2 <= std_logic_vector(signed(sext_ln197_fu_1062_p1) + signed(ap_const_lv14_8));
    clwm_4_fu_1243_p2 <= std_logic_vector(unsigned(ap_const_lv32_408) - unsigned(ap_phi_mux_cbs_7_phi_fu_335_p8));
    clwm_fu_816_p2 <= std_logic_vector(unsigned(select_ln159_1_fu_810_p3) + unsigned(ap_const_lv13_1));
    craw_fu_1072_p3 <= 
        clwm_2_fu_1066_p2 when (icmp_ln198_reg_1510(0) = '1') else 
        sext_ln197_fu_1062_p1;
    crtc_drain_rate_fu_490_p3 <= 
        sub_ln151_1_fu_481_p2 when (tmp_2_reg_1299(0) = '1') else 
        zext_ln151_1_fu_487_p1;
    empty_fu_686_p2 <= std_logic_vector(shift_left(unsigned(us_m_reg_1401),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    fifo_graphics_burst_size <= ap_phi_mux_cbs_7_phi_fu_335_p8;

    fifo_graphics_burst_size_ap_vld_assign_proc : process(ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fifo_graphics_burst_size_ap_vld <= ap_const_logic_1;
        else 
            fifo_graphics_burst_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fifo_graphics_lwm <= 
        clwm_4_fu_1243_p2 when (icmp_ln233_fu_1249_p2(0) = '1') else 
        sext_ln198_fu_1079_p1;

    fifo_graphics_lwm_ap_vld_assign_proc : process(ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fifo_graphics_lwm_ap_vld <= ap_const_logic_1;
        else 
            fifo_graphics_lwm_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fifo_valid_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state40, ap_CS_fsm_state120, and_ln209_fu_1168_p2, icmp_ln222_fu_1184_p2)
    begin
        if ((((icmp_ln222_fu_1184_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)) or ((ap_const_lv1_1 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)))) then 
            fifo_valid <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fifo_valid <= ap_const_lv32_1;
        else 
            fifo_valid <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fifo_valid_ap_vld_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state40, ap_CS_fsm_state120, and_ln209_fu_1168_p2, icmp_ln222_fu_1184_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln222_fu_1184_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)) or ((ap_const_lv1_1 = and_ln209_fu_1168_p2) and (ap_const_logic_1 = ap_CS_fsm_state120)))) then 
            fifo_valid_ap_vld <= ap_const_logic_1;
        else 
            fifo_valid_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fifo_video_burst_size <= ap_const_lv32_200;

    fifo_video_burst_size_ap_vld_assign_proc : process(ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fifo_video_burst_size_ap_vld <= ap_const_logic_1;
        else 
            fifo_video_burst_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fifo_video_lwm <= ap_const_lv32_400;

    fifo_video_lwm_ap_vld_assign_proc : process(ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fifo_video_lwm_ap_vld <= ap_const_logic_1;
        else 
            fifo_video_lwm_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_353_ap_start_assign_proc : process(icmp_ln84_reg_1314, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln84_reg_1314 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln84_reg_1314 = ap_const_lv1_0)))) then 
            grp_fu_353_ap_start <= ap_const_logic_1;
        else 
            grp_fu_353_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_357_p2 <= "1" when (min_mclk_extra_1_fu_168 = ap_const_lv32_0) else "0";
    grp_fu_364_p2 <= std_logic_vector(unsigned(min_mclk_extra_1_fu_168) + unsigned(ap_const_lv32_FFFFFFFF));

    grp_fu_660_ap_start_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_660_ap_start <= ap_const_logic_1;
        else 
            grp_fu_660_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_664_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_664_ap_start <= ap_const_logic_1;
        else 
            grp_fu_664_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_664_p0 <= zext_ln112_1_reg_1360(29 - 1 downto 0);

    grp_fu_668_ap_start_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_668_ap_start <= ap_const_logic_1;
        else 
            grp_fu_668_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_668_p0 <= zext_ln113_reg_1365(27 - 1 downto 0);

    grp_fu_672_ap_start_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_672_ap_start <= ap_const_logic_1;
        else 
            grp_fu_672_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_672_p0 <= ap_const_lv32_895440(26 - 1 downto 0);

    grp_fu_677_ap_start_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_677_ap_start <= ap_const_logic_1;
        else 
            grp_fu_677_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_677_p0 <= ap_const_lv32_3D0900(24 - 1 downto 0);

    grp_fu_682_ap_start_assign_proc : process(icmp_ln84_reg_1314, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln84_reg_1314 = ap_const_lv1_0))) then 
            grp_fu_682_ap_start <= ap_const_logic_1;
        else 
            grp_fu_682_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln101_fu_458_p2 <= "1" when (arb_enable_mp = ap_const_lv32_0) else "0";
    icmp_ln178_1_fu_632_p2 <= "1" when (signed(mul_ln180_fu_602_p2) < signed(mul_ln180_1_fu_608_p2)) else "0";
    icmp_ln178_fu_513_p2 <= "0" when (tmp_3_fu_503_p4 = ap_const_lv26_0) else "1";
    icmp_ln183_fu_620_p2 <= "1" when (signed(mul_ln180_fu_602_p2) < signed(mul_ln183_fu_614_p2)) else "0";
    icmp_ln198_fu_979_p2 <= "1" when (signed(tmp_s_fu_971_p3) < signed(sext_ln197_1_fu_903_p1)) else "0";
    icmp_ln209_1_fu_1162_p2 <= "1" when (signed(m1_fu_1093_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln209_fu_1156_p2 <= "1" when (signed(sext_ln207_fu_1152_p1) < signed(m1_fu_1093_p2)) else "0";
    icmp_ln213_fu_1208_p2 <= "1" when (signed(cbs_4_reg_288) < signed(ap_const_lv32_21)) else "0";
    icmp_ln222_fu_1184_p2 <= "1" when (signed(tmp_19_fu_1174_p4) > signed(ap_const_lv4_0)) else "0";
    icmp_ln233_fu_1249_p2 <= "1" when (signed(sext_ln198_fu_1079_p1) < signed(clwm_4_fu_1243_p2)) else "0";
    icmp_ln73_fu_410_p2 <= "1" when (arb_memory_type = ap_const_lv32_0) else "0";
    icmp_ln74_fu_416_p2 <= "1" when (arb_memory_width = ap_const_lv32_40) else "0";
    icmp_ln84_1_fu_452_p2 <= "1" when (arb_memory_width = ap_const_lv32_80) else "0";
    icmp_ln84_fu_446_p2 <= "1" when (arb_enable_video = ap_const_lv32_0) else "0";
    icmp_ln86_fu_523_p0 <= arb_pix_bpp;
    icmp_ln86_fu_523_p2 <= "1" when (icmp_ln86_fu_523_p0 = ap_const_lv32_20) else "0";
    m1_fu_1093_p2 <= std_logic_vector(signed(sext_ln201_fu_1089_p1) + signed(cbs_4_reg_288));
    m2us_fu_851_p2 <= std_logic_vector(unsigned(add_ln202_1_fu_847_p2) + unsigned(add_ln202_fu_843_p2));
    mclk_extra_1_fu_544_p3 <= 
        mclk_extra_fu_528_p3 when (and_ln84_fu_519_p2(0) = '1') else 
        select_ln91_fu_536_p3;
    mclk_extra_fu_528_p3 <= 
        ap_const_lv6_1F when (icmp_ln86_fu_523_p2(0) = '1') else 
        ap_const_lv6_2A;
    mclk_loop_fu_570_p2 <= std_logic_vector(unsigned(zext_ln101_1_fu_567_p1) + unsigned(zext_ln84_fu_552_p1));
    mclks_fu_464_p2 <= std_logic_vector(unsigned(select_ln73_fu_438_p3) + unsigned(ap_const_lv5_4));
    min_mclk_extra_3_fu_1190_p3 <= 
        ap_const_lv32_0 when (grp_fu_357_p2(0) = '1') else 
        grp_fu_364_p2;
    mul_ln112_fu_1264_p0 <= mul_ln112_fu_1264_p00(7 - 1 downto 0);
    mul_ln112_fu_1264_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mclk_loop_fu_570_p2),28));
    mul_ln112_fu_1264_p1 <= ap_const_lv28_F4240(21 - 1 downto 0);
    mul_ln113_fu_1271_p0 <= mul_ln113_fu_1271_p00(5 - 1 downto 0);
    mul_ln113_fu_1271_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_reg_1329),26));
    mul_ln113_fu_1271_p1 <= ap_const_lv26_F4240(21 - 1 downto 0);
    mul_ln114_fu_654_p0 <= min_mclk_extra_1_fu_168;
    mul_ln114_fu_654_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln114_fu_654_p0) * signed('0' &ap_const_lv32_F4240))), 32));
    mul_ln137_fu_626_p0 <= arb_mem_page_miss;
    mul_ln137_fu_626_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln137_fu_626_p0) * signed('0' &ap_const_lv32_1E8480))), 32));
    mul_ln148_1_fu_728_p1 <= mul_ln148_reg_1436;
    mul_ln148_1_fu_728_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10C6F7A0C) * signed(mul_ln148_1_fu_728_p1))), 65));
    mul_ln148_fu_713_p1 <= sext_ln151_reg_1370(30 - 1 downto 0);
    mul_ln148_fu_713_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(us_crt_1_reg_1431) * signed(mul_ln148_fu_713_p1))), 32));
    mul_ln151_fu_370_p0 <= arb_pclk_khz;
    mul_ln151_fu_370_p1 <= arb_pix_bpp;
    mul_ln151_fu_370_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln151_fu_370_p0) * signed(mul_ln151_fu_370_p1))), 32));
    mul_ln157_fu_596_p0 <= mul_ln157_fu_596_p00(23 - 1 downto 0);
    mul_ln157_fu_596_p00 <= 
        ap_const_lv32_1E8480 when (icmp_ln101_reg_1324(0) = '1') else 
        ap_const_lv32_2DC6C0;
    mul_ln157_fu_596_p1 <= arb_mem_page_miss;
    mul_ln157_fu_596_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln157_fu_596_p0) * signed(mul_ln157_fu_596_p1))), 32));
    mul_ln159_1_fu_887_p0 <= mul_ln159_reg_1488;
    mul_ln159_1_fu_887_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln159_1_fu_887_p0) * signed('0' &ap_const_lv65_10C6F7A0C))), 65));
    mul_ln159_fu_872_p0 <= sext_ln151_reg_1370(30 - 1 downto 0);
    mul_ln159_fu_872_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln159_fu_872_p0) * signed(us_crt_reg_1483))), 32));
    mul_ln180_1_fu_608_p0 <= arb_nvclk_khz;
    mul_ln180_1_fu_608_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln180_1_fu_608_p0) * signed('0' &ap_const_lv32_330))), 32));
    mul_ln180_fu_602_p0 <= crtc_drain_rate_reg_1335;
    mul_ln180_fu_602_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln180_fu_602_p0) * signed('0' &ap_const_lv32_64))), 32));
    mul_ln183_fu_614_p0 <= arb_nvclk_khz;
    mul_ln183_fu_614_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln183_fu_614_p0) * signed('0' &ap_const_lv32_310))), 32));
    mul_ln206_1_fu_1000_p0 <= mul_ln206_reg_1515;
    mul_ln206_1_fu_1000_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln206_1_fu_1000_p0) * signed('0' &ap_const_lv65_10C6F7A0C))), 65));
    mul_ln206_fu_985_p0 <= arb_pclk_khz;
    mul_ln206_fu_985_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln206_fu_985_p0) * signed(m2us_reg_1478))), 32));
    mul_ln207_fu_1058_p0 <= arb_pix_bpp;
    mul_ln207_fu_1058_p1 <= p1clk_reg_1536(15 - 1 downto 0);
    mul_ln207_fu_1058_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln207_fu_1058_p0) * signed(mul_ln207_fu_1058_p1))), 32));
    or_ln178_fu_644_p2 <= (xor_ln178_fu_638_p2 or icmp_ln178_reg_1340);
    p1clk_fu_1051_p3 <= 
        sub_ln206_1_fu_1045_p2 when (tmp_11_reg_1520(0) = '1') else 
        sext_ln206_2_fu_1035_p1;
    p2_fu_1144_p3 <= 
        sub_ln207_1_fu_1125_p2 when (tmp_18_fu_1099_p3(0) = '1') else 
        zext_ln207_1_fu_1140_p1;
    select_ln101_fu_470_p3 <= 
        select_ln73_fu_438_p3 when (icmp_ln101_fu_458_p2(0) = '1') else 
        mclks_fu_464_p2;
    select_ln148_1_fu_771_p3 <= 
        sub_ln148_1_fu_765_p2 when (tmp_7_reg_1441(0) = '1') else 
        tmp_9_reg_1452;
    select_ln148_fu_759_p3 <= 
        tmp_8_fu_749_p4 when (tmp_7_reg_1441(0) = '1') else 
        tmp_9_reg_1452;
    select_ln159_1_fu_810_p3 <= 
        sub_ln159_1_fu_804_p2 when (tmp_4_reg_1493(0) = '1') else 
        tmp_6_reg_1504;
    select_ln159_fu_798_p3 <= 
        tmp_5_fu_788_p4 when (tmp_4_reg_1493(0) = '1') else 
        tmp_6_reg_1504;
    select_ln178_fu_822_p3 <= 
        clwm_fu_816_p2 when (icmp_ln178_reg_1340(0) = '1') else 
        ap_const_lv13_FFF;
    select_ln183_1_fu_836_p3 <= 
        clwm_fu_816_p2 when (icmp_ln183_reg_1381(0) = '1') else 
        ap_const_lv13_400;
    select_ln183_fu_829_p3 <= 
        cbs_0_reg_276 when (icmp_ln183_reg_1381(0) = '1') else 
        ap_const_lv32_200;
    select_ln197_fu_963_p3 <= 
        sub_ln197_1_fu_939_p2 when (tmp_10_fu_907_p3(0) = '1') else 
        zext_ln197_1_fu_959_p1;
    select_ln206_fu_1038_p3 <= 
        sext_ln206_1_fu_1031_p1 when (tmp_11_reg_1520(0) = '1') else 
        sext_ln206_2_fu_1035_p1;
    select_ln213_fu_1229_p3 <= 
        cbs_4_reg_288 when (icmp_ln213_fu_1208_p2(0) = '1') else 
        cbs_1_fu_1225_p1;
    select_ln73_fu_438_p3 <= 
        select_ln74_fu_422_p3 when (icmp_ln73_fu_410_p2(0) = '1') else 
        select_ln79_fu_430_p3;
    select_ln74_fu_422_p3 <= 
        ap_const_lv5_16 when (icmp_ln74_fu_416_p2(0) = '1') else 
        ap_const_lv5_14;
    select_ln79_fu_430_p3 <= 
        ap_const_lv5_14 when (icmp_ln74_fu_416_p2(0) = '1') else 
        ap_const_lv5_13;
    select_ln84_fu_556_p3 <= 
        ap_const_lv32_11 when (and_ln84_fu_519_p2(0) = '1') else 
        ap_const_lv32_12;
    select_ln91_fu_536_p3 <= 
        ap_const_lv6_8 when (icmp_ln86_fu_523_p2(0) = '1') else 
        ap_const_lv6_4;
        sext_ln151_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(crtc_drain_rate_reg_1335),32));

        sext_ln197_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(clwm_3_reg_302),15));

        sext_ln197_2_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln197_1_fu_921_p4),11));

        sext_ln197_3_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln197_2_fu_945_p4),11));

        sext_ln197_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(clwm_3_reg_302),14));

        sext_ln198_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(craw_fu_1072_p3),32));

        sext_ln201_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln201_fu_1083_p2),32));

        sext_ln206_1_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_1021_p4),32));

        sext_ln206_2_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1531),32));

        sext_ln207_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p2_fu_1144_p3),32));

    sub_ln148_1_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(select_ln148_fu_759_p3));
    sub_ln148_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln148_1_reg_1447));
    sub_ln151_1_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(zext_ln151_fu_478_p1));
    sub_ln151_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(mul_ln151_fu_370_p2));
    sub_ln159_1_fu_804_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(select_ln159_fu_798_p3));
    sub_ln159_fu_783_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln159_1_reg_1499));
    sub_ln197_1_fu_939_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(zext_ln197_fu_935_p1));
    sub_ln197_fu_915_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(clwm_3_reg_302));
    sub_ln206_1_fu_1045_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln206_fu_1038_p3));
    sub_ln206_fu_1016_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln206_1_reg_1526));
    sub_ln207_1_fu_1125_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(zext_ln207_fu_1121_p1));
    sub_ln207_fu_1106_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(mul_ln207_reg_1541));
    tmp_10_fu_907_p3 <= clwm_3_reg_302(12 downto 12);
    tmp_12_fu_1111_p4 <= sub_ln207_fu_1106_p2(31 downto 3);
    tmp_13_fu_1131_p4 <= mul_ln207_reg_1541(31 downto 3);
    tmp_16_fu_1021_p4 <= sub_ln206_fu_1016_p2(64 downto 52);
    tmp_18_fu_1099_p3 <= mul_ln207_reg_1541(31 downto 31);
    tmp_19_fu_1174_p4 <= craw_fu_1072_p3(13 downto 10);
    tmp_3_fu_503_p4 <= add_ln178_fu_497_p2(31 downto 6);
    tmp_5_fu_788_p4 <= sub_ln159_fu_783_p2(64 downto 52);
    tmp_8_fu_749_p4 <= sub_ln148_fu_744_p2(64 downto 52);
    tmp_s_fu_971_p3 <= (select_ln197_fu_963_p3 & ap_const_lv3_0);
    trunc_ln197_1_fu_921_p4 <= sub_ln197_fu_915_p2(12 downto 3);
    trunc_ln197_2_fu_945_p4 <= clwm_3_reg_302(12 downto 3);
    us_crt_1_fu_707_p2 <= std_logic_vector(unsigned(add_ln142_2_fu_701_p2) + unsigned(add_ln142_fu_691_p2));
    us_crt_fu_866_p2 <= std_logic_vector(unsigned(add_ln158_fu_857_p2) + unsigned(add_ln158_1_fu_861_p2));
    xor_ln178_fu_638_p2 <= (icmp_ln178_1_fu_632_p2 xor ap_const_lv1_1);
    zext_ln101_1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_reg_1329),7));
    zext_ln112_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln112_fu_1264_p2),32));
    zext_ln113_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln113_fu_1271_p2),32));
    zext_ln151_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1309),30));
    zext_ln151_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1304),30));
    zext_ln197_1_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln197_3_fu_955_p1),12));
    zext_ln197_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln197_2_fu_931_p1),12));
    zext_ln207_1_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1131_p4),30));
    zext_ln207_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1111_p4),30));
    zext_ln84_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mclk_extra_1_fu_544_p3),7));
end behav;
