// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "init_stype_info.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic init_stype_info::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> init_stype_info::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic init_stype_info::ap_const_logic_0 = sc_dt::Log_0;
const bool init_stype_info::ap_const_boolean_1 = true;

init_stype_info::init_stype_info(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_free_s);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_free_s_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_arg_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_arg_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_arglist);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_arglist_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_base_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_base_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_class_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_class_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_derived);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_derived_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_element_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_element_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_index);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_index_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_index_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_index_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_members);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_members_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_mlist);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_mlist_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_modified_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_modified_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_name);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_name_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_name_len);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_name_len_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_print_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_print_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_return_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_return_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_this_type);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_this_type_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_utype);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_utype_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_val);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_val_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_vshape);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_get_vshape_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_is_fwdref);
    sensitive << ( ap_start );

    SC_METHOD(thread_type_info_is_fwdref_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "init_stype_info_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, type_info_leaf_type, "(port)type_info_leaf_type");
    sc_trace(mVcdFile, type_info_get_print_type, "(port)type_info_get_print_type");
    sc_trace(mVcdFile, type_info_get_print_type_ap_vld, "(port)type_info_get_print_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_mlist, "(port)type_info_get_mlist");
    sc_trace(mVcdFile, type_info_get_mlist_ap_vld, "(port)type_info_get_mlist_ap_vld");
    sc_trace(mVcdFile, type_info_get_index, "(port)type_info_get_index");
    sc_trace(mVcdFile, type_info_get_index_ap_vld, "(port)type_info_get_index_ap_vld");
    sc_trace(mVcdFile, type_info_get_arglist, "(port)type_info_get_arglist");
    sc_trace(mVcdFile, type_info_get_arglist_ap_vld, "(port)type_info_get_arglist_ap_vld");
    sc_trace(mVcdFile, type_info_get_this_type, "(port)type_info_get_this_type");
    sc_trace(mVcdFile, type_info_get_this_type_ap_vld, "(port)type_info_get_this_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_class_type, "(port)type_info_get_class_type");
    sc_trace(mVcdFile, type_info_get_class_type_ap_vld, "(port)type_info_get_class_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_return_type, "(port)type_info_get_return_type");
    sc_trace(mVcdFile, type_info_get_return_type_ap_vld, "(port)type_info_get_return_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_utype, "(port)type_info_get_utype");
    sc_trace(mVcdFile, type_info_get_utype_ap_vld, "(port)type_info_get_utype_ap_vld");
    sc_trace(mVcdFile, type_info_get_vshape, "(port)type_info_get_vshape");
    sc_trace(mVcdFile, type_info_get_vshape_ap_vld, "(port)type_info_get_vshape_ap_vld");
    sc_trace(mVcdFile, type_info_get_derived, "(port)type_info_get_derived");
    sc_trace(mVcdFile, type_info_get_derived_ap_vld, "(port)type_info_get_derived_ap_vld");
    sc_trace(mVcdFile, type_info_get_base_type, "(port)type_info_get_base_type");
    sc_trace(mVcdFile, type_info_get_base_type_ap_vld, "(port)type_info_get_base_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_index_type, "(port)type_info_get_index_type");
    sc_trace(mVcdFile, type_info_get_index_type_ap_vld, "(port)type_info_get_index_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_element_type, "(port)type_info_get_element_type");
    sc_trace(mVcdFile, type_info_get_element_type_ap_vld, "(port)type_info_get_element_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_arg_type, "(port)type_info_get_arg_type");
    sc_trace(mVcdFile, type_info_get_arg_type_ap_vld, "(port)type_info_get_arg_type_ap_vld");
    sc_trace(mVcdFile, type_info_get_members, "(port)type_info_get_members");
    sc_trace(mVcdFile, type_info_get_members_ap_vld, "(port)type_info_get_members_ap_vld");
    sc_trace(mVcdFile, type_info_get_name_len, "(port)type_info_get_name_len");
    sc_trace(mVcdFile, type_info_get_name_len_ap_vld, "(port)type_info_get_name_len_ap_vld");
    sc_trace(mVcdFile, type_info_get_val, "(port)type_info_get_val");
    sc_trace(mVcdFile, type_info_get_val_ap_vld, "(port)type_info_get_val_ap_vld");
    sc_trace(mVcdFile, type_info_get_name, "(port)type_info_get_name");
    sc_trace(mVcdFile, type_info_get_name_ap_vld, "(port)type_info_get_name_ap_vld");
    sc_trace(mVcdFile, type_info_free_s, "(port)type_info_free_s");
    sc_trace(mVcdFile, type_info_free_s_ap_vld, "(port)type_info_free_s_ap_vld");
    sc_trace(mVcdFile, type_info_is_fwdref, "(port)type_info_is_fwdref");
    sc_trace(mVcdFile, type_info_is_fwdref_ap_vld, "(port)type_info_is_fwdref_ap_vld");
    sc_trace(mVcdFile, type_info_get_modified_type, "(port)type_info_get_modified_type");
    sc_trace(mVcdFile, type_info_get_modified_type_ap_vld, "(port)type_info_get_modified_type_ap_vld");
#endif

    }
    mHdltvinHandle.open("init_stype_info.hdltvin.dat");
    mHdltvoutHandle.open("init_stype_info.hdltvout.dat");
}

init_stype_info::~init_stype_info() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void init_stype_info::thread_ap_done() {
    ap_done = ap_start.read();
}

void init_stype_info::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void init_stype_info::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void init_stype_info::thread_type_info_free_s() {
    type_info_free_s = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_free_s_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_free_s_ap_vld = ap_const_logic_1;
    } else {
        type_info_free_s_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_arg_type() {
    type_info_get_arg_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_arg_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_arg_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_arg_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_arglist() {
    type_info_get_arglist = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_arglist_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_arglist_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_arglist_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_base_type() {
    type_info_get_base_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_base_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_base_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_base_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_class_type() {
    type_info_get_class_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_class_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_class_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_class_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_derived() {
    type_info_get_derived = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_derived_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_derived_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_derived_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_element_type() {
    type_info_get_element_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_element_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_element_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_element_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_index() {
    type_info_get_index = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_index_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_index_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_index_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_index_type() {
    type_info_get_index_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_index_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_index_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_index_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_members() {
    type_info_get_members = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_members_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_members_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_members_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_mlist() {
    type_info_get_mlist = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_mlist_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_mlist_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_mlist_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_modified_type() {
    type_info_get_modified_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_modified_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_modified_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_modified_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_name() {
    type_info_get_name = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_name_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_name_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_name_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_name_len() {
    type_info_get_name_len = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_name_len_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_name_len_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_name_len_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_print_type() {
    type_info_get_print_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_print_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_print_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_print_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_return_type() {
    type_info_get_return_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_return_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_return_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_return_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_this_type() {
    type_info_get_this_type = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_this_type_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_this_type_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_this_type_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_utype() {
    type_info_get_utype = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_utype_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_utype_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_utype_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_val() {
    type_info_get_val = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_val_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_val_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_val_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_get_vshape() {
    type_info_get_vshape = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_get_vshape_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_get_vshape_ap_vld = ap_const_logic_1;
    } else {
        type_info_get_vshape_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_type_info_is_fwdref() {
    type_info_is_fwdref = ap_const_lv32_0;
}

void init_stype_info::thread_type_info_is_fwdref_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        type_info_is_fwdref_ap_vld = ap_const_logic_1;
    } else {
        type_info_is_fwdref_ap_vld = ap_const_logic_0;
    }
}

void init_stype_info::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"type_info_leaf_type\" :  \"" << type_info_leaf_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_print_type\" :  \"" << type_info_get_print_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_print_type_ap_vld\" :  \"" << type_info_get_print_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_mlist\" :  \"" << type_info_get_mlist.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_mlist_ap_vld\" :  \"" << type_info_get_mlist_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_index\" :  \"" << type_info_get_index.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_index_ap_vld\" :  \"" << type_info_get_index_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_arglist\" :  \"" << type_info_get_arglist.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_arglist_ap_vld\" :  \"" << type_info_get_arglist_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_this_type\" :  \"" << type_info_get_this_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_this_type_ap_vld\" :  \"" << type_info_get_this_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_class_type\" :  \"" << type_info_get_class_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_class_type_ap_vld\" :  \"" << type_info_get_class_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_return_type\" :  \"" << type_info_get_return_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_return_type_ap_vld\" :  \"" << type_info_get_return_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_utype\" :  \"" << type_info_get_utype.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_utype_ap_vld\" :  \"" << type_info_get_utype_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_vshape\" :  \"" << type_info_get_vshape.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_vshape_ap_vld\" :  \"" << type_info_get_vshape_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_derived\" :  \"" << type_info_get_derived.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_derived_ap_vld\" :  \"" << type_info_get_derived_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_base_type\" :  \"" << type_info_get_base_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_base_type_ap_vld\" :  \"" << type_info_get_base_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_index_type\" :  \"" << type_info_get_index_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_index_type_ap_vld\" :  \"" << type_info_get_index_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_element_type\" :  \"" << type_info_get_element_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_element_type_ap_vld\" :  \"" << type_info_get_element_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_arg_type\" :  \"" << type_info_get_arg_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_arg_type_ap_vld\" :  \"" << type_info_get_arg_type_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_members\" :  \"" << type_info_get_members.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_members_ap_vld\" :  \"" << type_info_get_members_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_name_len\" :  \"" << type_info_get_name_len.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_name_len_ap_vld\" :  \"" << type_info_get_name_len_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_val\" :  \"" << type_info_get_val.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_val_ap_vld\" :  \"" << type_info_get_val_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_name\" :  \"" << type_info_get_name.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_name_ap_vld\" :  \"" << type_info_get_name_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_free_s\" :  \"" << type_info_free_s.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_free_s_ap_vld\" :  \"" << type_info_free_s_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_is_fwdref\" :  \"" << type_info_is_fwdref.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_is_fwdref_ap_vld\" :  \"" << type_info_is_fwdref_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_modified_type\" :  \"" << type_info_get_modified_type.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"type_info_get_modified_type_ap_vld\" :  \"" << type_info_get_modified_type_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

