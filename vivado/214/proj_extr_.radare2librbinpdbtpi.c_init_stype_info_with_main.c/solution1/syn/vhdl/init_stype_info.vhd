-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity init_stype_info is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    type_info_leaf_type : IN STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_print_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_print_type_ap_vld : OUT STD_LOGIC;
    type_info_get_mlist : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_mlist_ap_vld : OUT STD_LOGIC;
    type_info_get_index : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_index_ap_vld : OUT STD_LOGIC;
    type_info_get_arglist : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_arglist_ap_vld : OUT STD_LOGIC;
    type_info_get_this_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_this_type_ap_vld : OUT STD_LOGIC;
    type_info_get_class_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_class_type_ap_vld : OUT STD_LOGIC;
    type_info_get_return_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_return_type_ap_vld : OUT STD_LOGIC;
    type_info_get_utype : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_utype_ap_vld : OUT STD_LOGIC;
    type_info_get_vshape : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_vshape_ap_vld : OUT STD_LOGIC;
    type_info_get_derived : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_derived_ap_vld : OUT STD_LOGIC;
    type_info_get_base_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_base_type_ap_vld : OUT STD_LOGIC;
    type_info_get_index_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_index_type_ap_vld : OUT STD_LOGIC;
    type_info_get_element_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_element_type_ap_vld : OUT STD_LOGIC;
    type_info_get_arg_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_arg_type_ap_vld : OUT STD_LOGIC;
    type_info_get_members : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_members_ap_vld : OUT STD_LOGIC;
    type_info_get_name_len : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_name_len_ap_vld : OUT STD_LOGIC;
    type_info_get_val : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_val_ap_vld : OUT STD_LOGIC;
    type_info_get_name : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_name_ap_vld : OUT STD_LOGIC;
    type_info_free_s : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_free_s_ap_vld : OUT STD_LOGIC;
    type_info_is_fwdref : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_is_fwdref_ap_vld : OUT STD_LOGIC;
    type_info_get_modified_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    type_info_get_modified_type_ap_vld : OUT STD_LOGIC );
end;


architecture behav of init_stype_info is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "init_stype_info,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;



begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    type_info_free_s <= ap_const_lv32_0;

    type_info_free_s_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_free_s_ap_vld <= ap_const_logic_1;
        else 
            type_info_free_s_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_arg_type <= ap_const_lv32_0;

    type_info_get_arg_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_arg_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_arg_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_arglist <= ap_const_lv32_0;

    type_info_get_arglist_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_arglist_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_arglist_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_base_type <= ap_const_lv32_0;

    type_info_get_base_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_base_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_base_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_class_type <= ap_const_lv32_0;

    type_info_get_class_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_class_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_class_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_derived <= ap_const_lv32_0;

    type_info_get_derived_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_derived_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_derived_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_element_type <= ap_const_lv32_0;

    type_info_get_element_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_element_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_element_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_index <= ap_const_lv32_0;

    type_info_get_index_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_index_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_index_type <= ap_const_lv32_0;

    type_info_get_index_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_index_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_index_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_members <= ap_const_lv32_0;

    type_info_get_members_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_members_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_members_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_mlist <= ap_const_lv32_0;

    type_info_get_mlist_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_mlist_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_mlist_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_modified_type <= ap_const_lv32_0;

    type_info_get_modified_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_modified_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_modified_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_name <= ap_const_lv32_0;

    type_info_get_name_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_name_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_name_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_name_len <= ap_const_lv32_0;

    type_info_get_name_len_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_name_len_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_name_len_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_print_type <= ap_const_lv32_0;

    type_info_get_print_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_print_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_print_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_return_type <= ap_const_lv32_0;

    type_info_get_return_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_return_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_return_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_this_type <= ap_const_lv32_0;

    type_info_get_this_type_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_this_type_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_this_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_utype <= ap_const_lv32_0;

    type_info_get_utype_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_utype_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_utype_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_val <= ap_const_lv32_0;

    type_info_get_val_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_val_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_val_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_get_vshape <= ap_const_lv32_0;

    type_info_get_vshape_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_get_vshape_ap_vld <= ap_const_logic_1;
        else 
            type_info_get_vshape_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    type_info_is_fwdref <= ap_const_lv32_0;

    type_info_is_fwdref_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            type_info_is_fwdref_ap_vld <= ap_const_logic_1;
        else 
            type_info_is_fwdref_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
