-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity planar2x_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcWidth : IN STD_LOGIC_VECTOR (31 downto 0);
    srcHeight : IN STD_LOGIC_VECTOR (31 downto 0);
    srcStride : IN STD_LOGIC_VECTOR (31 downto 0);
    dstStride : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of planar2x_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "planar2x_c,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.128000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=1017,HLS_SYN_LUT=1589,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal src_load_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_fu_421_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln24_reg_1397 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_440_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_1413 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln24_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_1_reg_1433 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln28_2_fu_588_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_2_reg_1439 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_fu_594_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_reg_1445 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast8_fu_602_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_cast8_reg_1453 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1353_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_1_reg_1458 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln32_fu_649_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln32_reg_1465 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln32_2_fu_652_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_2_reg_1470 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln32_1_fu_655_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln32_1_reg_1476 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_reg_1483 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_2_fu_667_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_2_reg_1488 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_sum_fu_686_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_sum_reg_1498 : STD_LOGIC_VECTOR (4 downto 0);
    signal dst_addr_4_reg_1509 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln35_fu_701_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln35_reg_1517 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln32_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_load_5_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln6_reg_1532 : STD_LOGIC_VECTOR (29 downto 0);
    signal x_3_fu_794_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_3_reg_1540 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln38_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_1_fu_841_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_1_reg_1555 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln41_1_fu_845_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_1_reg_1560 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_3_fu_856_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_3_reg_1565 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln47_fu_886_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln47_reg_1580 : STD_LOGIC_VECTOR (62 downto 0);
    signal y_fu_891_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_reg_1585 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln8_reg_1590 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln40_3_fu_992_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_3_reg_1595 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_6_fu_1002_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_6_reg_1600 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_1_fu_1007_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_1_reg_1605 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln_reg_1620 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln10_reg_1625 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln45_2_fu_1171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln45_2_reg_1630 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_4_fu_1192_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_4_reg_1638 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln54_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln55_1_fu_1228_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln55_1_reg_1653 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_reg_1663 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln56_2_fu_1331_p2 : STD_LOGIC_VECTOR (4 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln56_2_fu_1331_p2 : signal is "no";
    signal add_ln56_2_reg_1668 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_341 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal src_load_10_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal y_0_reg_363 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_01_rec_reg_375 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_0_rec_reg_387 : STD_LOGIC_VECTOR (62 downto 0);
    signal x_1_reg_399 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal x_2_reg_410 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln25_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln25_1_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_1_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_rec_cast_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_1_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_1_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_2_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_2_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_1097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_2_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_1207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_fu_1223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_fu_1292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_1340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_1_fu_1348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal sext_ln25_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_1_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln35_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln36_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln39_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln40_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln41_fu_1056_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln42_fu_1093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln44_fu_1129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln45_fu_1175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln55_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln56_fu_1336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln25_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln25_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_478_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln25_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln26_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_530_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln26_1_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_566_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln28_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln32_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_606_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_617_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln32_1_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln32_fu_649_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_2_fu_652_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_fu_641_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_4_fu_677_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_0_cast_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln35_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_729_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln36_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_776_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_fu_800_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_5_fu_804_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_1_fu_819_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_2_fu_825_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_3_fu_830_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_2_fu_851_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_6_fu_862_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_fu_866_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_1_fu_876_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln39_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln39_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_4_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_915_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln39_4_fu_930_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln39_fu_937_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_5_fu_943_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln40_fu_953_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln40_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_981_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_2_fu_987_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln41_5_fu_997_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln41_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_4_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_1046_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln42_fu_1065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln42_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln44_fu_1101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln44_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_2_fu_1113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_1119_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln44_3_fu_1134_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln45_fu_1143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln45_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln45_1_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_fu_1183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_fu_1198_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_fu_1202_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_5_fu_1212_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_2_fu_1218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_fu_1232_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln55_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln55_fu_1247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln55_3_fu_1253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_1259_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln55_2_fu_1274_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln55_fu_1281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_4_fu_1287_p2 : STD_LOGIC_VECTOR (4 downto 0);
    attribute use_dsp48 of add_ln55_4_fu_1287_p2 : signal is "no";
    signal shl_ln56_fu_1297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln56_fu_1303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_fu_1309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_1_fu_1325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_1_fu_1344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    attribute use_dsp48 of add_ln58_1_fu_1344_p2 : signal is "no";
    signal grp_fu_1353_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component planar2x_c_mac_muladd_5s_5s_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    planar2x_c_mac_muladd_5s_5s_5ns_5_1_1_U1 : component planar2x_c_mac_muladd_5s_5s_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => select_ln32_fu_641_p3,
        din1 => grp_fu_1353_p1,
        din2 => trunc_ln32_fu_594_p1,
        dout => grp_fu_1353_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_01_rec_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_01_rec_reg_375 <= add_ln47_reg_1580;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_01_rec_reg_375 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    p_0_rec_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_0_rec_reg_387 <= add_ln35_reg_1517;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0_rec_reg_387 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    src_load_10_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                src_load_10_reg_353 <= src_load_5_reg_1527;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                src_load_10_reg_353 <= src_load_reg_1392;
            end if; 
        end if;
    end process;

    x_0_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                x_0_reg_341 <= x_reg_1413;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                x_0_reg_341 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    x_1_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_1_reg_399 <= x_3_reg_1540;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_1_reg_399 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    x_2_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                x_2_reg_410 <= x_4_reg_1638;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln32_fu_696_p2 = ap_const_lv1_0))) then 
                x_2_reg_410 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    y_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                y_0_reg_363 <= y_reg_1585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_0_reg_363 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_1402 <= add_ln24_fu_425_p2;
                src_load_reg_1392 <= src_q0;
                trunc_ln24_reg_1397 <= trunc_ln24_fu_421_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln28_1_reg_1433 <= add_ln28_1_fu_556_p2;
                    add_ln28_2_reg_1439(4 downto 1) <= add_ln28_2_fu_588_p2(4 downto 1);
                add_ln32_1_reg_1458 <= grp_fu_1353_p3;
                add_ln32_2_reg_1488 <= add_ln32_2_fu_667_p2;
                add_ln45_reg_1483 <= add_ln45_fu_661_p2;
                mul_ln32_1_reg_1476 <= mul_ln32_1_fu_655_p2;
                    p_cast8_reg_1453(62 downto 1) <= p_cast8_fu_602_p1(62 downto 1);
                sext_ln32_reg_1465 <= sext_ln32_fu_649_p1;
                trunc_ln32_2_reg_1470 <= trunc_ln32_2_fu_652_p1;
                trunc_ln32_reg_1445 <= trunc_ln32_fu_594_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_696_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln35_reg_1517 <= add_ln35_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln40_3_reg_1595 <= add_ln40_3_fu_992_p2;
                add_ln41_6_reg_1600 <= add_ln41_6_fu_1002_p2;
                add_ln42_1_reg_1605 <= add_ln42_1_fu_1007_p2;
                trunc_ln8_reg_1590 <= add_ln40_fu_965_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_789_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln41_1_reg_1560 <= add_ln41_1_fu_845_p2;
                add_ln41_3_reg_1565 <= add_ln41_3_fu_856_p2;
                trunc_ln39_1_reg_1555 <= trunc_ln39_1_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln45_2_reg_1630 <= add_ln45_2_fu_1171_p2;
                trunc_ln10_reg_1625 <= add_ln45_1_fu_1155_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0))) then
                add_ln47_reg_1580 <= add_ln47_fu_886_p2;
                y_reg_1585 <= y_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln56_2_reg_1668 <= add_ln56_2_fu_1331_p2;
                trunc_ln12_reg_1663 <= add_ln56_fu_1309_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                dst_addr_4_reg_1509 <= p_sum_cast_fu_691_p1(3 - 1 downto 0);
                p_sum_reg_1498 <= p_sum_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                src_load_5_reg_1527 <= src_q0;
                trunc_ln6_reg_1532 <= add_ln36_fu_756_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                trunc_ln55_1_reg_1653 <= trunc_ln55_1_fu_1228_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln_reg_1620 <= add_ln42_fu_1077_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                x_3_reg_1540 <= x_3_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                x_4_reg_1638 <= x_4_fu_1192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_1413 <= x_fu_440_p2;
            end if;
        end if;
    end process;
    add_ln28_2_reg_1439(0) <= '1';
    p_cast8_reg_1453(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln24_fu_435_p2, ap_CS_fsm_state6, icmp_ln32_fu_696_p2, ap_CS_fsm_state9, icmp_ln38_fu_789_p2, ap_CS_fsm_state16, icmp_ln54_fu_1187_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln32_fu_696_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln54_fu_1187_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_fu_425_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(srcWidth));
    add_ln25_1_fu_472_p2 <= std_logic_vector(unsigned(src_q1) + unsigned(sub_ln25_fu_466_p2));
    add_ln26_1_fu_545_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(shl_ln_fu_493_p3));
    add_ln26_fu_524_p2 <= std_logic_vector(unsigned(src_q0) + unsigned(sub_ln26_fu_518_p2));
    add_ln28_1_fu_556_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln24_reg_1397));
    add_ln28_2_fu_588_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln3_fu_569_p3));
    add_ln28_fu_577_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(shl_ln28_fu_561_p2));
    add_ln32_2_fu_667_p2 <= std_logic_vector(unsigned(add_ln28_2_fu_588_p2) + unsigned(trunc_ln32_fu_594_p1));
    add_ln32_fu_635_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln32_1_fu_632_p1));
    add_ln35_1_fu_723_p2 <= std_logic_vector(unsigned(sub_ln35_fu_717_p2) + unsigned(src_q0));
    add_ln35_fu_701_p2 <= std_logic_vector(signed(p_0_rec_reg_387) + signed(sext_ln32_reg_1465));
    add_ln36_1_fu_776_p2 <= std_logic_vector(unsigned(trunc_ln32_reg_1445) + unsigned(p_sum_reg_1498));
    add_ln36_fu_756_p2 <= std_logic_vector(unsigned(sub_ln36_fu_750_p2) + unsigned(src_q1));
    add_ln39_1_fu_819_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln39_fu_800_p1));
    add_ln39_2_fu_825_p2 <= std_logic_vector(signed(trunc_ln32_2_reg_1470) + signed(add_ln39_1_fu_819_p2));
    add_ln39_3_fu_830_p2 <= std_logic_vector(unsigned(add_ln39_2_fu_825_p2) + unsigned(empty_5_fu_804_p1));
    add_ln39_4_fu_909_p2 <= std_logic_vector(unsigned(sub_ln39_fu_903_p2) + unsigned(src_q0));
    add_ln39_5_fu_943_p2 <= std_logic_vector(unsigned(or_ln39_fu_937_p2) + unsigned(p_sum_reg_1498));
    add_ln39_fu_808_p2 <= std_logic_vector(unsigned(trunc_ln39_fu_800_p1) + unsigned(empty_5_fu_804_p1));
    add_ln40_1_fu_981_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln39_4_fu_930_p3));
    add_ln40_2_fu_987_p2 <= std_logic_vector(unsigned(add_ln40_1_fu_981_p2) + unsigned(trunc_ln32_reg_1445));
    add_ln40_3_fu_992_p2 <= std_logic_vector(unsigned(add_ln40_2_fu_987_p2) + unsigned(p_sum_reg_1498));
    add_ln40_fu_965_p2 <= std_logic_vector(unsigned(sub_ln40_fu_959_p2) + unsigned(src_q1));
    add_ln41_1_fu_845_p2 <= std_logic_vector(unsigned(add_ln39_1_fu_819_p2) + unsigned(empty_5_fu_804_p1));
    add_ln41_2_fu_851_p2 <= std_logic_vector(signed(trunc_ln32_2_reg_1470) + signed(trunc_ln39_fu_800_p1));
    add_ln41_3_fu_856_p2 <= std_logic_vector(unsigned(add_ln41_2_fu_851_p2) + unsigned(empty_5_fu_804_p1));
    add_ln41_4_fu_1040_p2 <= std_logic_vector(unsigned(sub_ln41_fu_1034_p2) + unsigned(src_q1));
    add_ln41_5_fu_997_p2 <= std_logic_vector(unsigned(or_ln39_fu_937_p2) + unsigned(trunc_ln32_reg_1445));
    add_ln41_6_fu_1002_p2 <= std_logic_vector(unsigned(add_ln41_5_fu_997_p2) + unsigned(p_sum_reg_1498));
    add_ln42_1_fu_1007_p2 <= std_logic_vector(unsigned(add_ln40_1_fu_981_p2) + unsigned(p_sum_reg_1498));
    add_ln42_fu_1077_p2 <= std_logic_vector(unsigned(sub_ln42_fu_1071_p2) + unsigned(src_q0));
    add_ln44_1_fu_876_p2 <= std_logic_vector(unsigned(add_ln45_reg_1483) + unsigned(empty_6_fu_862_p1));
    add_ln44_2_fu_1113_p2 <= std_logic_vector(unsigned(sub_ln44_fu_1107_p2) + unsigned(src_q0));
    add_ln44_3_fu_1134_p2 <= std_logic_vector(unsigned(add_ln28_2_reg_1439) + unsigned(p_sum_reg_1498));
    add_ln44_fu_866_p2 <= std_logic_vector(unsigned(add_ln28_1_reg_1433) + unsigned(empty_6_fu_862_p1));
    add_ln45_1_fu_1155_p2 <= std_logic_vector(unsigned(sub_ln45_fu_1149_p2) + unsigned(src_q1));
    add_ln45_2_fu_1171_p2 <= std_logic_vector(unsigned(add_ln32_2_reg_1488) + unsigned(p_sum_reg_1498));
    add_ln45_fu_661_p2 <= std_logic_vector(unsigned(add_ln28_1_fu_556_p2) + unsigned(trunc_ln32_2_fu_652_p1));
    add_ln47_fu_886_p2 <= std_logic_vector(unsigned(p_01_rec_reg_375) + unsigned(p_cast8_reg_1453));
    add_ln55_2_fu_1218_p2 <= std_logic_vector(unsigned(mul_ln32_1_reg_1476) + unsigned(add_ln55_5_fu_1212_p2));
    add_ln55_3_fu_1253_p2 <= std_logic_vector(unsigned(src_q0) + unsigned(sub_ln55_fu_1247_p2));
    add_ln55_4_fu_1287_p2 <= std_logic_vector(signed(add_ln32_1_reg_1458) + signed(or_ln55_fu_1281_p2));
    add_ln55_5_fu_1212_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln55_fu_1198_p1));
    add_ln55_fu_1202_p2 <= std_logic_vector(unsigned(mul_ln32_1_reg_1476) + unsigned(trunc_ln55_fu_1198_p1));
    add_ln56_1_fu_1325_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln55_2_fu_1274_p3));
    add_ln56_2_fu_1331_p2 <= std_logic_vector(signed(add_ln32_1_reg_1458) + signed(add_ln56_1_fu_1325_p2));
    add_ln56_fu_1309_p2 <= std_logic_vector(unsigned(src_q1) + unsigned(sub_ln56_fu_1303_p2));
    add_ln58_1_fu_1344_p2 <= std_logic_vector(signed(add_ln32_1_reg_1458) + signed(add_ln28_2_reg_1439));
    add_ln58_fu_1232_p2 <= std_logic_vector(unsigned(mul_ln32_1_reg_1476) + unsigned(add_ln28_1_reg_1433));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, sext_ln25_1_fu_507_p1, p_sum_cast_fu_691_p1, zext_ln36_fu_780_p1, zext_ln40_fu_1016_p1, zext_ln42_fu_1097_p1, zext_ln45_fu_1179_p1, zext_ln56_fu_1340_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dst_address0 <= zext_ln56_fu_1340_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_address0 <= zext_ln45_fu_1179_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_address0 <= zext_ln42_fu_1097_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_address0 <= zext_ln40_fu_1016_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address0 <= zext_ln36_fu_780_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address0 <= p_sum_cast_fu_691_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= sext_ln25_1_fu_507_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            dst_address0 <= "XXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_state5, dst_addr_4_reg_1509, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state4, sext_ln26_fu_551_p1, sext_ln28_1_fu_583_p1, zext_ln39_2_fu_948_p1, zext_ln41_2_fu_1061_p1, zext_ln44_2_fu_1138_p1, zext_ln55_2_fu_1292_p1, zext_ln58_1_fu_1348_p1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dst_address1 <= zext_ln58_1_fu_1348_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_address1 <= zext_ln55_2_fu_1292_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_address1 <= zext_ln44_2_fu_1138_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_address1 <= zext_ln41_2_fu_1061_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_address1 <= zext_ln39_2_fu_948_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address1 <= dst_addr_4_reg_1509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address1 <= sext_ln28_1_fu_583_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address1 <= sext_ln26_fu_551_p1(3 - 1 downto 0);
        else 
            dst_address1 <= "XXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(src_q0, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state4, src_load_10_reg_353, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, sext_ln25_fu_488_p1, sext_ln36_fu_772_p1, sext_ln40_fu_1012_p1, sext_ln42_fu_1093_p1, sext_ln45_fu_1175_p1, sext_ln56_fu_1336_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dst_d0 <= sext_ln56_fu_1336_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dst_d0 <= sext_ln45_fu_1175_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dst_d0 <= sext_ln42_fu_1093_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dst_d0 <= sext_ln40_fu_1012_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_d0 <= sext_ln36_fu_772_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_d0 <= src_load_10_reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_d0 <= sext_ln25_fu_488_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dst_d0 <= src_q0;
        else 
            dst_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(src_q0, src_q1, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state19, sext_ln26_1_fu_540_p1, sext_ln35_fu_739_p1, sext_ln39_fu_925_p1, sext_ln41_fu_1056_p1, sext_ln44_fu_1129_p1, sext_ln55_fu_1269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dst_d1 <= src_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_d1 <= sext_ln55_fu_1269_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dst_d1 <= sext_ln44_fu_1129_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dst_d1 <= sext_ln41_fu_1056_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_d1 <= sext_ln39_fu_925_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_d1 <= sext_ln35_fu_739_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_d1 <= src_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_d1 <= sext_ln26_1_fu_540_p1;
        else 
            dst_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, icmp_ln32_fu_696_p2, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln32_fu_696_p2 = ap_const_lv1_0)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_4_fu_677_p1 <= p_01_rec_reg_375(5 - 1 downto 0);
    empty_5_fu_804_p1 <= p_0_rec_reg_387(5 - 1 downto 0);
    empty_6_fu_862_p1 <= p_0_rec_reg_387(5 - 1 downto 0);
    empty_fu_606_p1 <= dstStride(4 - 1 downto 0);
    grp_fu_1353_p1 <= (empty_fu_606_p1 & ap_const_lv1_0);
    icmp_fu_626_p2 <= "1" when (signed(tmp_fu_617_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln24_fu_435_p2 <= "1" when (signed(zext_ln24_fu_431_p1) < signed(add_ln24_reg_1402)) else "0";
    icmp_ln32_fu_696_p2 <= "1" when (signed(y_0_cast_fu_673_p1) < signed(srcHeight)) else "0";
    icmp_ln38_fu_789_p2 <= "1" when (signed(zext_ln38_fu_785_p1) < signed(add_ln24_reg_1402)) else "0";
    icmp_ln54_fu_1187_p2 <= "1" when (signed(zext_ln54_fu_1183_p1) < signed(add_ln24_reg_1402)) else "0";
    mul_ln32_1_fu_655_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln32_2_fu_652_p1) * signed(select_ln32_fu_641_p3))), 5));
    or_ln25_fu_501_p2 <= (shl_ln_fu_493_p3 or ap_const_lv32_1);
    or_ln39_fu_937_p2 <= (trunc_ln39_4_fu_930_p3 or ap_const_lv5_1);
    or_ln55_fu_1281_p2 <= (trunc_ln55_2_fu_1274_p3 or ap_const_lv5_1);
        p_0_rec_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0_rec_reg_387),64));

        p_cast8_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln32_fu_597_p2),63));

    p_sum_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum_fu_686_p2),64));
    p_sum_fu_686_p2 <= std_logic_vector(unsigned(empty_4_fu_677_p1) + unsigned(trunc_ln32_reg_1445));
    select_ln32_fu_641_p3 <= 
        add_ln32_fu_635_p2 when (icmp_fu_626_p2(0) = '1') else 
        ap_const_lv5_0;
        sext_ln25_1_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln25_fu_501_p2),64));

        sext_ln25_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_478_p4),32));

        sext_ln26_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_530_p4),32));

        sext_ln26_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_1_fu_545_p2),64));

        sext_ln28_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln28_fu_577_p2),64));

        sext_ln28_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln24_reg_1402),64));

    sext_ln32_fu_649_p0 <= srcStride;
        sext_ln32_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln32_fu_649_p0),63));

        sext_ln35_1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_701_p2),64));

        sext_ln35_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_729_p4),32));

        sext_ln36_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_1532),32));

        sext_ln39_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_915_p4),32));

        sext_ln40_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_reg_1590),32));

        sext_ln41_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_1046_p4),32));

        sext_ln42_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1620),32));

        sext_ln44_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1119_p4),32));

        sext_ln45_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_reg_1625),32));

        sext_ln55_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln11_fu_1259_p4),32));

        sext_ln56_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln12_reg_1663),32));

    shl_ln25_fu_460_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln26_fu_512_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln28_fu_561_p2 <= std_logic_vector(shift_left(unsigned(srcWidth),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln32_fu_597_p2 <= std_logic_vector(shift_left(unsigned(dstStride),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln35_fu_711_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln36_fu_744_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln39_fu_897_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln40_fu_953_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln41_fu_1028_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln42_fu_1065_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln44_fu_1101_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln45_fu_1143_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln55_fu_1241_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln56_fu_1297_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln_fu_493_p3 <= (x_0_reg_341 & ap_const_lv1_0);

    src_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln24_fu_435_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln38_fu_789_p2, ap_CS_fsm_state11, ap_CS_fsm_state16, zext_ln25_fu_446_p1, sext_ln28_fu_456_p1, sext_ln35_1_fu_706_p1, zext_ln39_1_fu_836_p1, zext_ln44_1_fu_881_p1, zext_ln41_1_fu_1024_p1, zext_ln55_1_fu_1223_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            src_address0 <= zext_ln55_1_fu_1223_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            src_address0 <= zext_ln41_1_fu_1024_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0))) then 
            src_address0 <= zext_ln44_1_fu_881_p1(3 - 1 downto 0);
        elsif (((icmp_ln38_fu_789_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            src_address0 <= zext_ln39_1_fu_836_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address0 <= sext_ln35_1_fu_706_p1(3 - 1 downto 0);
        elsif (((icmp_ln24_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_address0 <= sext_ln28_fu_456_p1(3 - 1 downto 0);
        elsif (((icmp_ln24_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_address0 <= zext_ln25_fu_446_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            src_address0 <= "XXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln38_fu_789_p2, ap_CS_fsm_state11, ap_CS_fsm_state16, icmp_ln54_fu_1187_p2, zext_ln25_1_fu_451_p1, p_0_rec_cast_fu_681_p1, zext_ln39_fu_814_p1, zext_ln44_fu_871_p1, zext_ln41_fu_1020_p1, zext_ln55_fu_1207_p1, zext_ln58_fu_1236_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln54_fu_1187_p2 = ap_const_lv1_0))) then 
            src_address1 <= zext_ln58_fu_1236_p1(3 - 1 downto 0);
        elsif (((icmp_ln54_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            src_address1 <= zext_ln55_fu_1207_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            src_address1 <= zext_ln41_fu_1020_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0))) then 
            src_address1 <= zext_ln44_fu_871_p1(3 - 1 downto 0);
        elsif (((icmp_ln38_fu_789_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            src_address1 <= zext_ln39_fu_814_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address1 <= p_0_rec_cast_fu_681_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address1 <= zext_ln25_1_fu_451_p1(3 - 1 downto 0);
        else 
            src_address1 <= "XXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln24_fu_435_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln38_fu_789_p2, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln24_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln24_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0)) or ((icmp_ln38_fu_789_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln38_fu_789_p2, ap_CS_fsm_state11, ap_CS_fsm_state16, icmp_ln54_fu_1187_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln54_fu_1187_p2 = ap_const_lv1_0)) or ((icmp_ln54_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln38_fu_789_p2 = ap_const_lv1_0)) or ((icmp_ln38_fu_789_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln25_fu_466_p2 <= std_logic_vector(unsigned(shl_ln25_fu_460_p2) - unsigned(src_q0));
    sub_ln26_fu_518_p2 <= std_logic_vector(unsigned(shl_ln26_fu_512_p2) - unsigned(src_q1));
    sub_ln35_fu_717_p2 <= std_logic_vector(unsigned(shl_ln35_fu_711_p2) - unsigned(src_q1));
    sub_ln36_fu_750_p2 <= std_logic_vector(unsigned(shl_ln36_fu_744_p2) - unsigned(src_q0));
    sub_ln39_fu_903_p2 <= std_logic_vector(unsigned(shl_ln39_fu_897_p2) - unsigned(src_q1));
    sub_ln40_fu_959_p2 <= std_logic_vector(unsigned(shl_ln40_fu_953_p2) - unsigned(src_q0));
    sub_ln41_fu_1034_p2 <= std_logic_vector(unsigned(shl_ln41_fu_1028_p2) - unsigned(src_q0));
    sub_ln42_fu_1071_p2 <= std_logic_vector(unsigned(shl_ln42_fu_1065_p2) - unsigned(src_q1));
    sub_ln44_fu_1107_p2 <= std_logic_vector(unsigned(shl_ln44_fu_1101_p2) - unsigned(src_q1));
    sub_ln45_fu_1149_p2 <= std_logic_vector(unsigned(shl_ln45_fu_1143_p2) - unsigned(src_q0));
    sub_ln55_fu_1247_p2 <= std_logic_vector(unsigned(shl_ln55_fu_1241_p2) - unsigned(src_q1));
    sub_ln56_fu_1303_p2 <= std_logic_vector(unsigned(shl_ln56_fu_1297_p2) - unsigned(src_q0));
    tmp_fu_617_p4 <= srcHeight(31 downto 1);
    trunc_ln11_fu_1259_p4 <= add_ln55_3_fu_1253_p2(31 downto 2);
    trunc_ln1_fu_478_p4 <= add_ln25_1_fu_472_p2(31 downto 2);
    trunc_ln24_fu_421_p1 <= srcWidth(5 - 1 downto 0);
    trunc_ln28_fu_566_p1 <= srcWidth(4 - 1 downto 0);
    trunc_ln2_fu_530_p4 <= add_ln26_fu_524_p2(31 downto 2);
    trunc_ln32_1_fu_632_p1 <= srcHeight(5 - 1 downto 0);
    trunc_ln32_2_fu_652_p0 <= srcStride;
    trunc_ln32_2_fu_652_p1 <= trunc_ln32_2_fu_652_p0(5 - 1 downto 0);
    trunc_ln32_fu_594_p1 <= dstStride(5 - 1 downto 0);
    trunc_ln39_1_fu_841_p1 <= x_1_reg_399(4 - 1 downto 0);
    trunc_ln39_4_fu_930_p3 <= (trunc_ln39_1_reg_1555 & ap_const_lv1_0);
    trunc_ln39_fu_800_p1 <= x_1_reg_399(5 - 1 downto 0);
    trunc_ln3_fu_569_p3 <= (trunc_ln28_fu_566_p1 & ap_const_lv1_0);
    trunc_ln4_fu_1119_p4 <= add_ln44_2_fu_1113_p2(31 downto 2);
    trunc_ln55_1_fu_1228_p1 <= x_2_reg_410(4 - 1 downto 0);
    trunc_ln55_2_fu_1274_p3 <= (trunc_ln55_1_reg_1653 & ap_const_lv1_0);
    trunc_ln55_fu_1198_p1 <= x_2_reg_410(5 - 1 downto 0);
    trunc_ln5_fu_729_p4 <= add_ln35_1_fu_723_p2(31 downto 2);
    trunc_ln7_fu_915_p4 <= add_ln39_4_fu_909_p2(31 downto 2);
    trunc_ln9_fu_1046_p4 <= add_ln41_4_fu_1040_p2(31 downto 2);
    x_3_fu_794_p2 <= std_logic_vector(unsigned(x_1_reg_399) + unsigned(ap_const_lv31_1));
    x_4_fu_1192_p2 <= std_logic_vector(unsigned(x_2_reg_410) + unsigned(ap_const_lv31_1));
    x_fu_440_p2 <= std_logic_vector(unsigned(x_0_reg_341) + unsigned(ap_const_lv31_1));
    y_0_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_363),32));
    y_fu_891_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(y_0_reg_363));
    zext_ln24_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_341),32));
    zext_ln25_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_440_p2),64));
    zext_ln25_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_341),64));
    zext_ln36_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_776_p2),64));
    zext_ln38_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_399),32));
    zext_ln39_1_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_3_fu_830_p2),64));
    zext_ln39_2_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_5_fu_943_p2),64));
    zext_ln39_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_808_p2),64));
    zext_ln40_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_3_reg_1595),64));
    zext_ln41_1_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_3_reg_1565),64));
    zext_ln41_2_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_6_reg_1600),64));
    zext_ln41_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_reg_1560),64));
    zext_ln42_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_reg_1605),64));
    zext_ln44_1_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_1_fu_876_p2),64));
    zext_ln44_2_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_3_fu_1134_p2),64));
    zext_ln44_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_fu_866_p2),64));
    zext_ln45_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_2_reg_1630),64));
    zext_ln54_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_reg_410),32));
    zext_ln55_1_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_2_fu_1218_p2),64));
    zext_ln55_2_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_4_fu_1287_p2),64));
    zext_ln55_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_1202_p2),64));
    zext_ln56_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_2_reg_1668),64));
    zext_ln58_1_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_1_fu_1344_p2),64));
    zext_ln58_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_1232_p2),64));
end behav;
