// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SiS_Generic_ConvertCRData,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.477000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=136,HLS_SYN_LUT=670,HLS_VERSION=2019_1}" *)

module SiS_Generic_ConvertCRData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SiS_Pr_dummy,
        crdata_address0,
        crdata_ce0,
        crdata_q0,
        crdata_address1,
        crdata_ce1,
        crdata_q1,
        xres,
        yres,
        var_xres,
        var_xres_ap_vld,
        var_left_margin,
        var_left_margin_ap_vld,
        var_right_margin,
        var_right_margin_ap_vld,
        var_hsync_len,
        var_hsync_len_ap_vld,
        var_yres,
        var_yres_ap_vld,
        var_upper_margin,
        var_upper_margin_ap_vld,
        var_lower_margin,
        var_lower_margin_ap_vld,
        var_vsync_len,
        var_vsync_len_ap_vld,
        writeres
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] SiS_Pr_dummy;
output  [9:0] crdata_address0;
output   crdata_ce0;
input  [7:0] crdata_q0;
output  [9:0] crdata_address1;
output   crdata_ce1;
input  [7:0] crdata_q1;
input  [31:0] xres;
input  [31:0] yres;
output  [31:0] var_xres;
output   var_xres_ap_vld;
output  [31:0] var_left_margin;
output   var_left_margin_ap_vld;
output  [31:0] var_right_margin;
output   var_right_margin_ap_vld;
output  [31:0] var_hsync_len;
output   var_hsync_len_ap_vld;
output  [31:0] var_yres;
output   var_yres_ap_vld;
output  [31:0] var_upper_margin;
output   var_upper_margin_ap_vld;
output  [31:0] var_lower_margin;
output   var_lower_margin_ap_vld;
output  [31:0] var_vsync_len;
output   var_vsync_len_ap_vld;
input  [31:0] writeres;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] crdata_address0;
reg crdata_ce0;
reg[9:0] crdata_address1;
reg crdata_ce1;
reg var_xres_ap_vld;
reg var_left_margin_ap_vld;
reg var_right_margin_ap_vld;
reg var_hsync_len_ap_vld;
reg var_yres_ap_vld;
reg var_upper_margin_ap_vld;
reg var_lower_margin_ap_vld;
reg var_vsync_len_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_356;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_361;
wire    ap_CS_fsm_state3;
reg   [1:0] tmp_reg_951;
reg   [1:0] tmp_2_reg_961;
wire   [5:0] trunc_ln40_fu_386_p1;
reg   [5:0] trunc_ln40_reg_971;
wire   [1:0] trunc_ln49_2_fu_390_p1;
reg   [1:0] trunc_ln49_2_reg_986;
reg   [0:0] tmp_5_reg_991;
wire    ap_CS_fsm_state4;
wire  signed [10:0] sub_ln40_fu_422_p2;
reg  signed [10:0] sub_ln40_reg_1006;
wire  signed [11:0] sext_ln57_1_fu_506_p1;
reg  signed [11:0] sext_ln57_1_reg_1011;
wire   [6:0] temp_6_fu_535_p3;
reg   [6:0] temp_6_reg_1016;
wire   [11:0] sub_ln62_fu_553_p2;
reg   [11:0] sub_ln62_reg_1021;
wire   [0:0] icmp_ln64_fu_559_p2;
reg   [0:0] icmp_ln64_reg_1026;
wire   [31:0] zext_ln64_fu_573_p1;
wire   [11:0] add_ln65_fu_578_p2;
reg   [11:0] add_ln65_reg_1045;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_6_reg_1055;
reg   [0:0] tmp_9_reg_1061;
reg   [0:0] tmp_10_reg_1066;
reg   [0:0] tmp_11_reg_1076;
reg   [0:0] tmp_12_reg_1081;
reg   [0:0] tmp_13_reg_1086;
reg   [0:0] tmp_15_reg_1091;
reg   [0:0] tmp_16_reg_1096;
wire   [4:0] trunc_ln92_fu_638_p1;
reg   [4:0] trunc_ln92_reg_1101;
reg   [31:0] p_0_reg_329;
wire   [31:0] zext_ln85_1_fu_699_p1;
reg   [31:0] ap_phi_mux_p_01_phi_fu_342_p4;
wire    ap_CS_fsm_state7;
wire   [9:0] tmp_1_fu_394_p3;
wire   [10:0] zext_ln36_fu_401_p1;
wire   [9:0] tmp_3_fu_411_p3;
wire   [10:0] zext_ln40_fu_418_p1;
wire   [10:0] E_fu_405_p2;
wire   [0:0] tmp_4_fu_440_p3;
wire   [4:0] trunc_ln49_fu_432_p1;
wire   [4:0] trunc_ln49_1_fu_436_p1;
wire   [7:0] HBE_fu_448_p4;
wire   [8:0] zext_ln56_fu_464_p1;
wire   [8:0] zext_ln56_1_fu_468_p1;
wire  signed [8:0] temp_fu_472_p2;
wire   [8:0] xor_ln57_fu_488_p2;
wire   [0:0] icmp_ln57_fu_478_p2;
wire  signed [9:0] sext_ln57_fu_484_p1;
wire   [9:0] zext_ln57_fu_494_p1;
wire   [9:0] select_ln57_fu_498_p3;
wire   [5:0] HRE_fu_457_p3;
wire   [6:0] zext_ln59_fu_510_p1;
wire   [6:0] zext_ln59_1_fu_514_p1;
wire   [6:0] temp_1_fu_517_p2;
wire   [0:0] icmp_ln60_fu_523_p2;
wire   [6:0] xor_ln60_fu_529_p2;
wire  signed [11:0] sext_ln40_fu_428_p1;
wire   [11:0] p_neg_fu_547_p2;
wire   [11:0] zext_ln60_fu_543_p1;
wire   [13:0] xres_assign_fu_565_p3;
wire   [13:0] shl_ln_fu_649_p3;
wire  signed [14:0] sext_ln66_fu_656_p1;
wire   [10:0] tmp_s_fu_673_p5;
wire   [11:0] zext_ln85_fu_689_p1;
wire   [11:0] E_1_fu_693_p2;
wire   [10:0] tmp_14_fu_705_p5;
wire   [11:0] zext_ln92_fu_714_p1;
wire  signed [11:0] F_fu_718_p2;
wire   [8:0] tmp_7_fu_733_p3;
wire   [8:0] zext_ln85_cast1_fu_682_p3;
wire   [9:0] zext_ln104_fu_740_p1;
wire   [9:0] zext_ln104_1_fu_744_p1;
wire   [9:0] temp_3_fu_748_p2;
wire   [0:0] icmp_ln105_fu_754_p2;
wire   [9:0] xor_ln105_fu_760_p2;
wire   [9:0] select_ln105_fu_766_p3;
wire   [3:0] trunc_ln108_fu_778_p1;
wire   [4:0] VRE_fu_782_p3;
wire   [5:0] zext_ln109_fu_789_p1;
wire   [5:0] zext_ln109_1_fu_793_p1;
wire   [5:0] temp_4_fu_796_p2;
wire   [0:0] icmp_ln110_fu_802_p2;
wire   [5:0] xor_ln110_fu_808_p2;
wire   [5:0] temp_7_fu_814_p3;
wire   [12:0] zext_ln105_fu_774_p1;
wire  signed [12:0] sext_ln92_1_fu_729_p1;
wire   [12:0] sub_ln112_fu_831_p2;
wire   [12:0] zext_ln110_1_fu_827_p1;
wire   [12:0] D_fu_837_p2;
wire   [0:0] icmp_ln119_1_fu_854_p2;
wire   [0:0] icmp_ln119_2_fu_860_p2;
wire   [0:0] or_ln119_fu_866_p2;
wire   [0:0] icmp_ln119_fu_848_p2;
wire   [0:0] and_ln119_fu_872_p2;
wire   [14:0] tmp_8_fu_642_p3;
wire   [14:0] select_ln119_fu_878_p3;
wire   [14:0] select_ln119_1_fu_886_p3;
wire   [14:0] add_ln66_fu_660_p2;
wire   [14:0] select_ln119_2_fu_899_p3;
wire   [14:0] select_ln119_3_fu_907_p3;
wire   [9:0] shl_ln1_fu_666_p3;
wire   [9:0] select_ln119_4_fu_920_p3;
wire   [9:0] select_ln119_5_fu_928_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((icmp_ln64_fu_559_p2 == 1'd1)) begin
            p_0_reg_329 <= xres;
        end else if ((icmp_ln64_fu_559_p2 == 1'd0)) begin
            p_0_reg_329 <= zext_ln64_fu_573_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_356 <= crdata_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_356 <= crdata_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_361 <= crdata_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_361 <= crdata_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln65_reg_1045 <= add_ln65_fu_578_p2;
        tmp_10_reg_1066 <= crdata_q0[32'd1];
        tmp_11_reg_1076 <= crdata_q1[32'd2];
        tmp_12_reg_1081 <= crdata_q1[32'd7];
        tmp_13_reg_1086 <= crdata_q0[32'd3];
        tmp_15_reg_1091 <= crdata_q0[32'd4];
        tmp_16_reg_1096 <= crdata_q0[32'd5];
        tmp_6_reg_1055 <= crdata_q1[32'd1];
        tmp_9_reg_1061 <= crdata_q1[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln64_reg_1026 <= icmp_ln64_fu_559_p2;
        sext_ln57_1_reg_1011 <= sext_ln57_1_fu_506_p1;
        sub_ln40_reg_1006 <= sub_ln40_fu_422_p2;
        sub_ln62_reg_1021 <= sub_ln62_fu_553_p2;
        temp_6_reg_1016 <= temp_6_fu_535_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_2_reg_961 <= {{crdata_q0[7:6]}};
        tmp_reg_951 <= {{crdata_q0[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_5_reg_991 <= crdata_q1[32'd2];
        trunc_ln40_reg_971 <= trunc_ln40_fu_386_p1;
        trunc_ln49_2_reg_986 <= trunc_ln49_2_fu_390_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln92_reg_1101 <= trunc_ln92_fu_638_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        if ((icmp_ln64_reg_1026 == 1'd1)) begin
            ap_phi_mux_p_01_phi_fu_342_p4 = yres;
        end else if ((icmp_ln64_reg_1026 == 1'd0)) begin
            ap_phi_mux_p_01_phi_fu_342_p4 = zext_ln85_1_fu_699_p1;
        end else begin
            ap_phi_mux_p_01_phi_fu_342_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_01_phi_fu_342_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        crdata_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        crdata_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        crdata_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        crdata_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        crdata_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        crdata_address0 = 64'd14;
    end else begin
        crdata_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        crdata_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        crdata_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        crdata_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        crdata_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        crdata_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        crdata_address1 = 64'd1;
    end else begin
        crdata_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        crdata_ce0 = 1'b1;
    end else begin
        crdata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        crdata_ce1 = 1'b1;
    end else begin
        crdata_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_hsync_len_ap_vld = 1'b1;
    end else begin
        var_hsync_len_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_left_margin_ap_vld = 1'b1;
    end else begin
        var_left_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_lower_margin_ap_vld = 1'b1;
    end else begin
        var_lower_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_right_margin_ap_vld = 1'b1;
    end else begin
        var_right_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_upper_margin_ap_vld = 1'b1;
    end else begin
        var_upper_margin_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        var_vsync_len_ap_vld = 1'b1;
    end else begin
        var_vsync_len_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln64_fu_559_p2 == 1'd0))) begin
        var_xres_ap_vld = 1'b1;
    end else begin
        var_xres_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln64_reg_1026 == 1'd0))) begin
        var_yres_ap_vld = 1'b1;
    end else begin
        var_yres_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_fu_837_p2 = (sub_ln112_fu_831_p2 - zext_ln110_1_fu_827_p1);

assign E_1_fu_693_p2 = (12'd1 + zext_ln85_fu_689_p1);

assign E_fu_405_p2 = (11'd1 + zext_ln36_fu_401_p1);

assign F_fu_718_p2 = (zext_ln92_fu_714_p1 - zext_ln85_fu_689_p1);

assign HBE_fu_448_p4 = {{{trunc_ln49_2_reg_986}, {tmp_4_fu_440_p3}}, {trunc_ln49_fu_432_p1}};

assign HRE_fu_457_p3 = {{tmp_5_reg_991}, {trunc_ln49_1_fu_436_p1}};

assign VRE_fu_782_p3 = {{tmp_16_reg_1096}, {trunc_ln108_fu_778_p1}};

assign add_ln65_fu_578_p2 = ($signed(sext_ln57_1_reg_1011) + $signed(sub_ln62_reg_1021));

assign add_ln66_fu_660_p2 = ($signed(15'd32744) + $signed(sext_ln66_fu_656_p1));

assign and_ln119_fu_872_p2 = (or_ln119_fu_866_p2 & icmp_ln119_fu_848_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign icmp_ln105_fu_754_p2 = (($signed(temp_3_fu_748_p2) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_802_p2 = (($signed(temp_4_fu_796_p2) > $signed(6'd0)) ? 1'b1 : 1'b0);

assign icmp_ln119_1_fu_854_p2 = ((ap_phi_mux_p_01_phi_fu_342_p4 == 32'd240) ? 1'b1 : 1'b0);

assign icmp_ln119_2_fu_860_p2 = ((ap_phi_mux_p_01_phi_fu_342_p4 == 32'd200) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_848_p2 = ((p_0_reg_329 == 32'd320) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_478_p2 = (($signed(temp_fu_472_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_523_p2 = (($signed(temp_1_fu_517_p2) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_559_p2 = ((writeres == 32'd0) ? 1'b1 : 1'b0);

assign or_ln119_fu_866_p2 = (icmp_ln119_2_fu_860_p2 | icmp_ln119_1_fu_854_p2);

assign p_neg_fu_547_p2 = ($signed(12'd3) - $signed(sext_ln40_fu_428_p1));

assign select_ln105_fu_766_p3 = ((icmp_ln105_fu_754_p2[0:0] === 1'b1) ? temp_3_fu_748_p2 : xor_ln105_fu_760_p2);

assign select_ln119_1_fu_886_p3 = ((icmp_ln119_fu_848_p2[0:0] === 1'b1) ? select_ln119_fu_878_p3 : tmp_8_fu_642_p3);

assign select_ln119_2_fu_899_p3 = ((and_ln119_fu_872_p2[0:0] === 1'b1) ? 15'd8 : add_ln66_fu_660_p2);

assign select_ln119_3_fu_907_p3 = ((icmp_ln119_fu_848_p2[0:0] === 1'b1) ? select_ln119_2_fu_899_p3 : add_ln66_fu_660_p2);

assign select_ln119_4_fu_920_p3 = ((and_ln119_fu_872_p2[0:0] === 1'b1) ? 10'd48 : shl_ln1_fu_666_p3);

assign select_ln119_5_fu_928_p3 = ((icmp_ln119_fu_848_p2[0:0] === 1'b1) ? select_ln119_4_fu_920_p3 : shl_ln1_fu_666_p3);

assign select_ln119_fu_878_p3 = ((and_ln119_fu_872_p2[0:0] === 1'b1) ? 15'd24 : tmp_8_fu_642_p3);

assign select_ln57_fu_498_p3 = ((icmp_ln57_fu_478_p2[0:0] === 1'b1) ? sext_ln57_fu_484_p1 : zext_ln57_fu_494_p1);

assign sext_ln40_fu_428_p1 = sub_ln40_fu_422_p2;

assign sext_ln57_1_fu_506_p1 = $signed(select_ln57_fu_498_p3);

assign sext_ln57_fu_484_p1 = temp_fu_472_p2;

assign sext_ln66_fu_656_p1 = $signed(shl_ln_fu_649_p3);

assign sext_ln92_1_fu_729_p1 = F_fu_718_p2;

assign shl_ln1_fu_666_p3 = {{temp_6_reg_1016}, {3'd0}};

assign shl_ln_fu_649_p3 = {{sub_ln40_reg_1006}, {3'd0}};

assign sub_ln112_fu_831_p2 = ($signed(zext_ln105_fu_774_p1) - $signed(sext_ln92_1_fu_729_p1));

assign sub_ln40_fu_422_p2 = (zext_ln40_fu_418_p1 - E_fu_405_p2);

assign sub_ln62_fu_553_p2 = (p_neg_fu_547_p2 - zext_ln60_fu_543_p1);

assign temp_1_fu_517_p2 = (zext_ln59_fu_510_p1 - zext_ln59_1_fu_514_p1);

assign temp_3_fu_748_p2 = (zext_ln104_fu_740_p1 - zext_ln104_1_fu_744_p1);

assign temp_4_fu_796_p2 = (zext_ln109_fu_789_p1 - zext_ln109_1_fu_793_p1);

assign temp_6_fu_535_p3 = ((icmp_ln60_fu_523_p2[0:0] === 1'b1) ? temp_1_fu_517_p2 : xor_ln60_fu_529_p2);

assign temp_7_fu_814_p3 = ((icmp_ln110_fu_802_p2[0:0] === 1'b1) ? temp_4_fu_796_p2 : xor_ln110_fu_808_p2);

assign temp_fu_472_p2 = (zext_ln56_fu_464_p1 - zext_ln56_1_fu_468_p1);

assign tmp_14_fu_705_p5 = {{{{tmp_13_reg_1086}, {tmp_12_reg_1081}}, {tmp_11_reg_1076}}, {reg_361}};

assign tmp_1_fu_394_p3 = {{tmp_reg_951}, {reg_356}};

assign tmp_3_fu_411_p3 = {{tmp_2_reg_961}, {reg_361}};

assign tmp_4_fu_440_p3 = crdata_q0[32'd7];

assign tmp_7_fu_733_p3 = {{tmp_15_reg_1091}, {crdata_q0}};

assign tmp_8_fu_642_p3 = {{add_ln65_reg_1045}, {3'd0}};

assign tmp_s_fu_673_p5 = {{{{tmp_10_reg_1066}, {tmp_9_reg_1061}}, {tmp_6_reg_1055}}, {reg_356}};

assign trunc_ln108_fu_778_p1 = crdata_q1[3:0];

assign trunc_ln40_fu_386_p1 = crdata_q0[5:0];

assign trunc_ln49_1_fu_436_p1 = crdata_q0[4:0];

assign trunc_ln49_2_fu_390_p1 = crdata_q1[1:0];

assign trunc_ln49_fu_432_p1 = crdata_q1[4:0];

assign trunc_ln92_fu_638_p1 = crdata_q1[4:0];

assign var_hsync_len = select_ln119_5_fu_928_p3;

assign var_left_margin = $signed(select_ln119_1_fu_886_p3);

assign var_lower_margin = $signed(F_fu_718_p2);

assign var_right_margin = $signed(select_ln119_3_fu_907_p3);

assign var_upper_margin = $signed(D_fu_837_p2);

assign var_vsync_len = temp_7_fu_814_p3;

assign var_xres = xres_assign_fu_565_p3;

assign var_yres = E_1_fu_693_p2;

assign xor_ln105_fu_760_p2 = (temp_3_fu_748_p2 ^ 10'd512);

assign xor_ln110_fu_808_p2 = (temp_4_fu_796_p2 ^ 6'd32);

assign xor_ln57_fu_488_p2 = (temp_fu_472_p2 ^ 9'd256);

assign xor_ln60_fu_529_p2 = (temp_1_fu_517_p2 ^ 7'd64);

assign xres_assign_fu_565_p3 = {{E_fu_405_p2}, {3'd0}};

assign zext_ln104_1_fu_744_p1 = zext_ln85_cast1_fu_682_p3;

assign zext_ln104_fu_740_p1 = tmp_7_fu_733_p3;

assign zext_ln105_fu_774_p1 = select_ln105_fu_766_p3;

assign zext_ln109_1_fu_793_p1 = trunc_ln92_reg_1101;

assign zext_ln109_fu_789_p1 = VRE_fu_782_p3;

assign zext_ln110_1_fu_827_p1 = temp_7_fu_814_p3;

assign zext_ln36_fu_401_p1 = tmp_1_fu_394_p3;

assign zext_ln40_fu_418_p1 = tmp_3_fu_411_p3;

assign zext_ln56_1_fu_468_p1 = reg_356;

assign zext_ln56_fu_464_p1 = HBE_fu_448_p4;

assign zext_ln57_fu_494_p1 = xor_ln57_fu_488_p2;

assign zext_ln59_1_fu_514_p1 = trunc_ln40_reg_971;

assign zext_ln59_fu_510_p1 = HRE_fu_457_p3;

assign zext_ln60_fu_543_p1 = temp_6_fu_535_p3;

assign zext_ln64_fu_573_p1 = xres_assign_fu_565_p3;

assign zext_ln85_1_fu_699_p1 = E_1_fu_693_p2;

assign zext_ln85_cast1_fu_682_p3 = {{tmp_6_reg_1055}, {reg_356}};

assign zext_ln85_fu_689_p1 = tmp_s_fu_673_p5;

assign zext_ln92_fu_714_p1 = tmp_14_fu_705_p5;

endmodule //SiS_Generic_ConvertCRData
