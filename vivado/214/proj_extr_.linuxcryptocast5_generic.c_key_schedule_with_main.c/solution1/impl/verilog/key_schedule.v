// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="key_schedule,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=72,HLS_SYN_LUT=255,HLS_VERSION=2019_1}" *)

module key_schedule (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_q0,
        x_address1,
        x_ce1,
        x_we1,
        x_d1,
        x_q1,
        z_address0,
        z_ce0,
        z_we0,
        z_d0,
        z_address1,
        z_ce1,
        z_we1,
        z_d1,
        k_address0,
        k_ce0,
        k_we0,
        k_d0,
        k_address1,
        k_ce1,
        k_we1,
        k_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
input  [31:0] x_q0;
output  [9:0] x_address1;
output   x_ce1;
output   x_we1;
output  [31:0] x_d1;
input  [31:0] x_q1;
output  [9:0] z_address0;
output   z_ce0;
output   z_we0;
output  [31:0] z_d0;
output  [9:0] z_address1;
output   z_ce1;
output   z_we1;
output  [31:0] z_d1;
output  [9:0] k_address0;
output   k_ce0;
output   k_we0;
output  [31:0] k_d0;
output  [9:0] k_address1;
output   k_ce1;
output   k_we1;
output  [31:0] k_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] x_address0;
reg x_ce0;
reg x_we0;
reg[31:0] x_d0;
reg[9:0] x_address1;
reg x_ce1;
reg x_we1;
reg[9:0] z_address0;
reg z_ce0;
reg z_we0;
reg[31:0] z_d0;
reg[9:0] z_address1;
reg z_ce1;
reg z_we1;
reg[31:0] z_d1;
reg[9:0] k_address0;
reg k_ce0;
reg k_we0;
reg[9:0] k_address1;
reg k_ce1;
reg k_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] x_addr_reg_296;
wire    ap_CS_fsm_state5;
reg   [31:0] x_load_reg_307;
wire    ap_CS_fsm_state6;
reg   [31:0] x_load_1_reg_312;
wire   [9:0] x_addr_3_reg_322;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_load_1_reg_312 <= x_q1;
        x_load_reg_307 <= x_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        k_address0 = 64'd0;
    end else begin
        k_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        k_address1 = 64'd1;
    end else begin
        k_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        k_ce1 = 1'b1;
    end else begin
        k_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        k_we0 = 1'b1;
    end else begin
        k_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        k_we1 = 1'b1;
    end else begin
        k_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address0 = x_addr_reg_296;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address1 = x_addr_3_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address1 = 64'd3;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_d0 = x_load_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        x_d0 = x_q1;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_we1 = 1'b1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        z_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_address0 = 64'd0;
    end else begin
        z_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        z_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_address1 = 64'd3;
    end else begin
        z_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        z_ce0 = 1'b1;
    end else begin
        z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        z_ce1 = 1'b1;
    end else begin
        z_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        z_d0 = x_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_d0 = x_q1;
    end else begin
        z_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        z_d1 = x_q1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        z_d1 = x_q0;
    end else begin
        z_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        z_we0 = 1'b1;
    end else begin
        z_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        z_we1 = 1'b1;
    end else begin
        z_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign k_d0 = 32'd0;

assign k_d1 = 32'd0;

assign x_addr_3_reg_322 = 64'd1;

assign x_addr_reg_296 = 64'd0;

assign x_d1 = x_load_1_reg_312;

endmodule //key_schedule
