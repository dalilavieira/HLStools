// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "key_schedule.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic key_schedule::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic key_schedule::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> key_schedule::ap_ST_fsm_state1 = "1";
const sc_lv<8> key_schedule::ap_ST_fsm_state2 = "10";
const sc_lv<8> key_schedule::ap_ST_fsm_state3 = "100";
const sc_lv<8> key_schedule::ap_ST_fsm_state4 = "1000";
const sc_lv<8> key_schedule::ap_ST_fsm_state5 = "10000";
const sc_lv<8> key_schedule::ap_ST_fsm_state6 = "100000";
const sc_lv<8> key_schedule::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> key_schedule::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> key_schedule::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> key_schedule::ap_const_lv32_4 = "100";
const sc_lv<32> key_schedule::ap_const_lv32_5 = "101";
const sc_lv<64> key_schedule::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> key_schedule::ap_const_lv64_1 = "1";
const sc_lv<64> key_schedule::ap_const_lv64_2 = "10";
const sc_lv<32> key_schedule::ap_const_lv32_1 = "1";
const sc_lv<64> key_schedule::ap_const_lv64_3 = "11";
const sc_lv<64> key_schedule::ap_const_lv64_4 = "100";
const sc_lv<32> key_schedule::ap_const_lv32_2 = "10";
const sc_lv<64> key_schedule::ap_const_lv64_5 = "101";
const sc_lv<64> key_schedule::ap_const_lv64_6 = "110";
const sc_lv<32> key_schedule::ap_const_lv32_3 = "11";
const sc_lv<64> key_schedule::ap_const_lv64_7 = "111";
const sc_lv<64> key_schedule::ap_const_lv64_8 = "1000";
const sc_lv<64> key_schedule::ap_const_lv64_9 = "1001";
const sc_lv<64> key_schedule::ap_const_lv64_A = "1010";
const sc_lv<64> key_schedule::ap_const_lv64_B = "1011";
const sc_lv<32> key_schedule::ap_const_lv32_6 = "110";
const sc_lv<64> key_schedule::ap_const_lv64_C = "1100";
const sc_lv<64> key_schedule::ap_const_lv64_D = "1101";
const sc_lv<64> key_schedule::ap_const_lv64_E = "1110";
const sc_lv<32> key_schedule::ap_const_lv32_7 = "111";
const sc_lv<64> key_schedule::ap_const_lv64_F = "1111";
const bool key_schedule::ap_const_boolean_1 = true;

key_schedule::key_schedule(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_k_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_x_addr_3_reg_322);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_x_addr_reg_296);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_x_address0);
    sensitive << ( x_addr_reg_296 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_x_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( x_addr_3_reg_322 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_x_ce1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_d0);
    sensitive << ( x_q1 );
    sensitive << ( x_load_reg_307 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_x_d1);
    sensitive << ( x_load_1_reg_312 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_x_we1);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_d0);
    sensitive << ( x_q0 );
    sensitive << ( x_q1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_d1);
    sensitive << ( x_q0 );
    sensitive << ( x_q1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_z_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "key_schedule_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, x_address1, "(port)x_address1");
    sc_trace(mVcdFile, x_ce1, "(port)x_ce1");
    sc_trace(mVcdFile, x_we1, "(port)x_we1");
    sc_trace(mVcdFile, x_d1, "(port)x_d1");
    sc_trace(mVcdFile, x_q1, "(port)x_q1");
    sc_trace(mVcdFile, z_address0, "(port)z_address0");
    sc_trace(mVcdFile, z_ce0, "(port)z_ce0");
    sc_trace(mVcdFile, z_we0, "(port)z_we0");
    sc_trace(mVcdFile, z_d0, "(port)z_d0");
    sc_trace(mVcdFile, z_address1, "(port)z_address1");
    sc_trace(mVcdFile, z_ce1, "(port)z_ce1");
    sc_trace(mVcdFile, z_we1, "(port)z_we1");
    sc_trace(mVcdFile, z_d1, "(port)z_d1");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_we0, "(port)k_we0");
    sc_trace(mVcdFile, k_d0, "(port)k_d0");
    sc_trace(mVcdFile, k_address1, "(port)k_address1");
    sc_trace(mVcdFile, k_ce1, "(port)k_ce1");
    sc_trace(mVcdFile, k_we1, "(port)k_we1");
    sc_trace(mVcdFile, k_d1, "(port)k_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_addr_reg_296, "x_addr_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, x_load_reg_307, "x_load_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, x_load_1_reg_312, "x_load_1_reg_312");
    sc_trace(mVcdFile, x_addr_3_reg_322, "x_addr_3_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("key_schedule.hdltvin.dat");
    mHdltvoutHandle.open("key_schedule.hdltvout.dat");
}

key_schedule::~key_schedule() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void key_schedule::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_load_1_reg_312 = x_q1.read();
        x_load_reg_307 = x_q0.read();
    }
}

void key_schedule::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void key_schedule::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void key_schedule::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void key_schedule::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void key_schedule::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void key_schedule::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void key_schedule::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void key_schedule::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void key_schedule::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void key_schedule::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void key_schedule::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void key_schedule::thread_k_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        k_address0 =  (sc_lv<10>) (ap_const_lv64_0);
    } else {
        k_address0 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_k_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        k_address1 =  (sc_lv<10>) (ap_const_lv64_1);
    } else {
        k_address1 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_k_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        k_ce0 = ap_const_logic_1;
    } else {
        k_ce0 = ap_const_logic_0;
    }
}

void key_schedule::thread_k_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        k_ce1 = ap_const_logic_1;
    } else {
        k_ce1 = ap_const_logic_0;
    }
}

void key_schedule::thread_k_d0() {
    k_d0 = ap_const_lv32_0;
}

void key_schedule::thread_k_d1() {
    k_d1 = ap_const_lv32_0;
}

void key_schedule::thread_k_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        k_we0 = ap_const_logic_1;
    } else {
        k_we0 = ap_const_logic_0;
    }
}

void key_schedule::thread_k_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        k_we1 = ap_const_logic_1;
    } else {
        k_we1 = ap_const_logic_0;
    }
}

void key_schedule::thread_x_addr_3_reg_322() {
    x_addr_3_reg_322 =  (sc_lv<10>) (ap_const_lv64_1);
}

void key_schedule::thread_x_addr_reg_296() {
    x_addr_reg_296 =  (sc_lv<10>) (ap_const_lv64_0);
}

void key_schedule::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_address0 =  (sc_lv<10>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_address0 = x_addr_reg_296.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_address0 =  (sc_lv<10>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_address0 =  (sc_lv<10>) (ap_const_lv64_0);
    } else {
        x_address0 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_x_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_address1 = x_addr_3_reg_322.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_address1 =  (sc_lv<10>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_address1 =  (sc_lv<10>) (ap_const_lv64_3);
    } else {
        x_address1 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void key_schedule::thread_x_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        x_ce1 = ap_const_logic_1;
    } else {
        x_ce1 = ap_const_logic_0;
    }
}

void key_schedule::thread_x_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_d0 = x_load_reg_307.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_d0 = x_q1.read();
    } else {
        x_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void key_schedule::thread_x_d1() {
    x_d1 = x_load_1_reg_312.read();
}

void key_schedule::thread_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void key_schedule::thread_x_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_we1 = ap_const_logic_1;
    } else {
        x_we1 = ap_const_logic_0;
    }
}

void key_schedule::thread_z_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        z_address0 =  (sc_lv<10>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_address0 =  (sc_lv<10>) (ap_const_lv64_0);
    } else {
        z_address0 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_z_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        z_address1 =  (sc_lv<10>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_address1 =  (sc_lv<10>) (ap_const_lv64_3);
    } else {
        z_address1 = "XXXXXXXXXX";
    }
}

void key_schedule::thread_z_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        z_ce0 = ap_const_logic_1;
    } else {
        z_ce0 = ap_const_logic_0;
    }
}

void key_schedule::thread_z_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        z_ce1 = ap_const_logic_1;
    } else {
        z_ce1 = ap_const_logic_0;
    }
}

void key_schedule::thread_z_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        z_d0 = x_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_d0 = x_q1.read();
    } else {
        z_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void key_schedule::thread_z_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        z_d1 = x_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        z_d1 = x_q0.read();
    } else {
        z_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void key_schedule::thread_z_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        z_we0 = ap_const_logic_1;
    } else {
        z_we0 = ap_const_logic_0;
    }
}

void key_schedule::thread_z_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        z_we1 = ap_const_logic_1;
    } else {
        z_we1 = ap_const_logic_0;
    }
}

void key_schedule::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void key_schedule::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_address0\" :  \"" << x_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ce0\" :  \"" << x_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_we0\" :  \"" << x_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_d0\" :  \"" << x_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_q0\" :  \"" << x_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_address1\" :  \"" << x_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ce1\" :  \"" << x_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_we1\" :  \"" << x_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_d1\" :  \"" << x_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_q1\" :  \"" << x_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_address0\" :  \"" << z_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_ce0\" :  \"" << z_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_we0\" :  \"" << z_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_d0\" :  \"" << z_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_address1\" :  \"" << z_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_ce1\" :  \"" << z_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_we1\" :  \"" << z_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"z_d1\" :  \"" << z_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_address0\" :  \"" << k_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_ce0\" :  \"" << k_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_we0\" :  \"" << k_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_d0\" :  \"" << k_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_address1\" :  \"" << k_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_ce1\" :  \"" << k_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_we1\" :  \"" << k_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_d1\" :  \"" << k_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

