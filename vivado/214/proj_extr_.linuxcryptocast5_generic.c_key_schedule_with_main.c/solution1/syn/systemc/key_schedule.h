// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _key_schedule_HH_
#define _key_schedule_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct key_schedule : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_out< sc_logic > x_we0;
    sc_out< sc_lv<32> > x_d0;
    sc_in< sc_lv<32> > x_q0;
    sc_out< sc_lv<10> > x_address1;
    sc_out< sc_logic > x_ce1;
    sc_out< sc_logic > x_we1;
    sc_out< sc_lv<32> > x_d1;
    sc_in< sc_lv<32> > x_q1;
    sc_out< sc_lv<10> > z_address0;
    sc_out< sc_logic > z_ce0;
    sc_out< sc_logic > z_we0;
    sc_out< sc_lv<32> > z_d0;
    sc_out< sc_lv<10> > z_address1;
    sc_out< sc_logic > z_ce1;
    sc_out< sc_logic > z_we1;
    sc_out< sc_lv<32> > z_d1;
    sc_out< sc_lv<10> > k_address0;
    sc_out< sc_logic > k_ce0;
    sc_out< sc_logic > k_we0;
    sc_out< sc_lv<32> > k_d0;
    sc_out< sc_lv<10> > k_address1;
    sc_out< sc_logic > k_ce1;
    sc_out< sc_logic > k_we1;
    sc_out< sc_lv<32> > k_d1;


    // Module declarations
    key_schedule(sc_module_name name);
    SC_HAS_PROCESS(key_schedule);

    ~key_schedule();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > x_addr_reg_296;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > x_load_reg_307;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > x_load_1_reg_312;
    sc_signal< sc_lv<10> > x_addr_3_reg_322;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_k_address0();
    void thread_k_address1();
    void thread_k_ce0();
    void thread_k_ce1();
    void thread_k_d0();
    void thread_k_d1();
    void thread_k_we0();
    void thread_k_we1();
    void thread_x_addr_3_reg_322();
    void thread_x_addr_reg_296();
    void thread_x_address0();
    void thread_x_address1();
    void thread_x_ce0();
    void thread_x_ce1();
    void thread_x_d0();
    void thread_x_d1();
    void thread_x_we0();
    void thread_x_we1();
    void thread_z_address0();
    void thread_z_address1();
    void thread_z_ce0();
    void thread_z_ce1();
    void thread_z_d0();
    void thread_z_d1();
    void thread_z_we0();
    void thread_z_we1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
