// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fwht,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.205000,HLS_SYN_LAT=154,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1328,HLS_SYN_LUT=3246,HLS_VERSION=2019_1}" *)

module fwht (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_r_address0,
        block_r_ce0,
        block_r_q0,
        block_r_address1,
        block_r_ce1,
        block_r_q1,
        output_block_address0,
        output_block_ce0,
        output_block_we0,
        output_block_d0,
        output_block_q0,
        output_block_address1,
        output_block_ce1,
        output_block_we1,
        output_block_d1,
        output_block_q1,
        stride,
        input_step,
        intra
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] block_r_address0;
output   block_r_ce0;
input  [31:0] block_r_q0;
output  [4:0] block_r_address1;
output   block_r_ce1;
input  [31:0] block_r_q1;
output  [4:0] output_block_address0;
output   output_block_ce0;
output   output_block_we0;
output  [31:0] output_block_d0;
input  [31:0] output_block_q0;
output  [4:0] output_block_address1;
output   output_block_ce1;
output   output_block_we1;
output  [31:0] output_block_d1;
input  [31:0] output_block_q1;
input  [31:0] stride;
input  [31:0] input_step;
input  [31:0] intra;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] block_r_address0;
reg block_r_ce0;
reg[4:0] block_r_address1;
reg block_r_ce1;
reg[4:0] output_block_address0;
reg output_block_ce0;
reg output_block_we0;
reg[31:0] output_block_d0;
reg[4:0] output_block_address1;
reg output_block_ce1;
reg output_block_we1;
reg[31:0] output_block_d1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_394;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire   [31:0] add_0_neg_cast_cast_fu_404_p3;
reg   [31:0] add_0_neg_cast_cast_reg_1076;
wire   [0:0] icmp_ln32_fu_418_p2;
reg   [0:0] icmp_ln32_reg_1085;
wire   [34:0] zext_ln31_fu_424_p1;
reg   [34:0] zext_ln31_reg_1096;
reg   [4:0] output_block_addr_reg_1101;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_444_p2;
reg   [3:0] i_reg_1114;
wire   [5:0] empty_2_fu_450_p1;
reg   [5:0] empty_2_reg_1119;
wire   [0:0] icmp_ln31_fu_438_p2;
wire   [5:0] add_ln36_fu_454_p2;
reg   [5:0] add_ln36_reg_1133;
wire   [4:0] empty_3_fu_465_p1;
reg   [4:0] empty_3_reg_1143;
wire   [34:0] add_ln31_fu_469_p2;
reg   [34:0] add_ln31_reg_1154;
wire   [5:0] add_ln31_1_fu_474_p2;
reg   [5:0] add_ln31_1_reg_1159;
reg   [31:0] block_load_reg_1164;
reg   [31:0] block_load_2_reg_1180;
wire    ap_CS_fsm_state4;
reg   [31:0] block_load_3_reg_1186;
reg   [31:0] block_load_4_reg_1203;
wire    ap_CS_fsm_state5;
reg   [31:0] block_load_5_reg_1209;
reg   [31:0] block_load_6_reg_1227;
wire    ap_CS_fsm_state6;
reg   [31:0] block_load_7_reg_1233;
wire   [31:0] workspace1_5_3_fu_622_p3;
reg   [31:0] workspace1_5_3_reg_1254;
wire   [31:0] workspace1_4_3_fu_629_p3;
reg   [31:0] workspace1_4_3_reg_1260;
wire   [31:0] workspace1_3_3_fu_636_p3;
reg   [31:0] workspace1_3_3_reg_1266;
wire   [31:0] workspace1_2_3_fu_643_p3;
reg   [31:0] workspace1_2_3_reg_1272;
wire   [31:0] workspace1_6_3_fu_686_p3;
reg   [31:0] workspace1_6_3_reg_1283;
wire    ap_CS_fsm_state8;
wire   [31:0] workspace1_0_1_fu_698_p2;
reg   [31:0] workspace1_0_1_reg_1289;
wire   [31:0] select_ln32_2_fu_703_p3;
reg   [31:0] select_ln32_2_reg_1295;
wire   [31:0] workspace1_1_1_fu_710_p2;
reg   [31:0] workspace1_1_1_reg_1301;
wire   [31:0] sub_ln60_fu_719_p2;
reg   [31:0] sub_ln60_reg_1307;
wire    ap_CS_fsm_state9;
wire   [31:0] sub_ln65_fu_727_p2;
reg   [31:0] sub_ln65_reg_1313;
wire   [31:0] add_ln62_fu_789_p2;
reg   [31:0] add_ln62_reg_1319;
wire    ap_CS_fsm_state11;
wire   [31:0] add_ln67_fu_797_p2;
reg   [31:0] add_ln67_reg_1325;
reg   [4:0] output_block_addr_1_reg_1331;
wire    ap_CS_fsm_state13;
wire   [3:0] i_1_fu_880_p2;
reg   [3:0] i_1_reg_1339;
wire  signed [3:0] xor_ln84_fu_886_p2;
reg  signed [3:0] xor_ln84_reg_1344;
wire   [0:0] icmp_ln82_fu_874_p2;
reg   [4:0] output_block_addr_2_reg_1350;
reg   [4:0] output_block_addr_6_reg_1356;
reg   [31:0] output_block_load_reg_1361;
wire    ap_CS_fsm_state14;
reg   [31:0] output_block_load_1_reg_1367;
wire  signed [4:0] or_ln_fu_908_p3;
reg  signed [4:0] or_ln_reg_1373;
reg   [4:0] output_block_addr_3_reg_1378;
reg   [4:0] output_block_addr_4_reg_1384;
reg   [31:0] output_block_load_2_reg_1389;
wire    ap_CS_fsm_state15;
reg   [31:0] output_block_load_3_reg_1395;
reg   [4:0] output_block_addr_5_reg_1401;
reg   [31:0] output_block_load_4_reg_1406;
wire    ap_CS_fsm_state16;
reg   [31:0] output_block_load_5_reg_1412;
reg   [4:0] output_block_addr_7_reg_1418;
reg   [4:0] output_block_addr_8_reg_1423;
wire   [31:0] workspace1_1_fu_954_p2;
reg   [31:0] workspace1_1_reg_1428;
wire    ap_CS_fsm_state17;
wire   [31:0] workspace1_3_fu_962_p2;
reg   [31:0] workspace1_3_reg_1434;
wire   [31:0] workspace1_5_fu_970_p2;
reg   [31:0] workspace1_5_reg_1440;
wire   [31:0] sub_ln94_fu_980_p2;
reg   [31:0] sub_ln94_reg_1446;
wire   [31:0] add_ln107_fu_1010_p2;
reg   [31:0] add_ln107_reg_1452;
wire   [31:0] add_ln110_fu_1030_p2;
reg   [31:0] add_ln110_reg_1457;
wire   [31:0] add_ln100_fu_1040_p2;
reg   [31:0] add_ln100_reg_1462;
wire    ap_CS_fsm_state19;
wire   [31:0] add_ln105_fu_1048_p2;
reg   [31:0] add_ln105_reg_1468;
reg   [34:0] tmp_0_rec_reg_344;
wire    ap_CS_fsm_state12;
reg   [5:0] out_0_rec_reg_355;
reg   [3:0] i_0_reg_366;
reg   [3:0] out_1_rec_reg_377;
wire    ap_CS_fsm_state20;
wire   [63:0] out_0_rec_cast_fu_433_p1;
wire   [63:0] tmp_0_rec_cast_fu_428_p1;
wire   [63:0] zext_ln36_fu_460_p1;
wire   [63:0] zext_ln36_1_fu_485_p1;
wire   [63:0] zext_ln39_fu_495_p1;
wire   [63:0] zext_ln39_1_fu_505_p1;
wire   [63:0] zext_ln42_fu_515_p1;
wire   [63:0] zext_ln42_1_fu_525_p1;
wire   [63:0] zext_ln51_fu_535_p1;
wire   [63:0] zext_ln51_1_fu_545_p1;
wire   [63:0] zext_ln54_fu_555_p1;
wire   [63:0] zext_ln54_1_fu_617_p1;
wire   [63:0] zext_ln32_fu_656_p1;
wire   [63:0] zext_ln71_fu_750_p1;
wire   [63:0] zext_ln72_fu_765_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln73_fu_780_p1;
wire   [63:0] zext_ln74_fu_813_p1;
wire   [63:0] zext_ln75_fu_830_p1;
wire   [63:0] zext_ln76_fu_845_p1;
wire   [63:0] zext_ln77_fu_860_p1;
wire   [63:0] out_1_rec_cast_fu_869_p1;
wire   [63:0] zext_ln84_fu_892_p1;
wire  signed [63:0] sext_ln90_1_fu_903_p1;
wire   [63:0] zext_ln87_fu_916_p1;
wire   [63:0] zext_ln87_1_fu_924_p1;
wire  signed [63:0] sext_ln90_fu_937_p1;
wire  signed [63:0] sext_ln93_fu_942_p1;
wire  signed [63:0] sext_ln93_1_fu_946_p1;
wire   [31:0] add_ln70_fu_731_p2;
wire   [31:0] sub_ln71_fu_738_p2;
wire   [31:0] sub_ln72_fu_755_p2;
wire   [31:0] add_ln73_fu_770_p2;
wire   [31:0] add_ln74_fu_801_p2;
wire   [31:0] sub_ln75_fu_818_p2;
wire   [31:0] sub_ln76_fu_835_p2;
wire   [31:0] add_ln77_fu_850_p2;
wire   [31:0] sub_ln108_fu_1016_p2;
wire   [31:0] sub_ln109_fu_1023_p2;
wire    ap_CS_fsm_state18;
wire   [31:0] add_ln111_fu_1052_p2;
wire   [31:0] sub_ln112_fu_1059_p2;
wire   [31:0] sub_ln113_fu_1066_p2;
wire   [31:0] add_ln114_fu_1071_p2;
wire   [0:0] icmp_ln25_fu_398_p2;
wire  signed [31:0] mul_ln29_fu_412_p0;
wire  signed [31:0] mul_ln29_fu_412_p1;
wire  signed [31:0] icmp_ln32_fu_418_p0;
wire   [31:0] mul_ln29_fu_412_p2;
wire   [5:0] add_ln36_1_fu_480_p2;
wire   [5:0] add_ln39_fu_490_p2;
wire   [5:0] add_ln39_1_fu_500_p2;
wire   [5:0] add_ln42_fu_510_p2;
wire   [5:0] add_ln42_1_fu_520_p2;
wire   [5:0] add_ln51_fu_530_p2;
wire   [5:0] add_ln51_1_fu_540_p2;
wire   [5:0] add_ln54_fu_550_p2;
wire   [31:0] add_ln36_2_fu_565_p2;
wire   [31:0] add_ln39_2_fu_580_p2;
wire   [31:0] grp_fu_389_p2;
wire   [5:0] add_ln54_1_fu_612_p2;
wire   [31:0] workspace1_5_1_fu_589_p2;
wire   [31:0] workspace1_5_2_fu_607_p2;
wire   [31:0] workspace1_4_1_fu_584_p2;
wire   [31:0] workspace1_4_2_fu_602_p2;
wire   [31:0] workspace1_3_1_fu_575_p2;
wire   [31:0] workspace1_3_2_fu_598_p2;
wire   [31:0] workspace1_2_1_fu_569_p2;
wire   [31:0] workspace1_2_2_fu_593_p2;
wire   [5:0] add_ln33_fu_560_p2;
wire   [5:0] select_ln32_fu_650_p3;
wire   [31:0] add_ln42_2_fu_661_p2;
wire   [31:0] workspace1_6_1_fu_665_p2;
wire   [31:0] workspace1_6_2_fu_674_p2;
wire   [31:0] add_ln32_fu_693_p2;
wire   [31:0] sub_ln43_fu_670_p2;
wire   [31:0] sub_ln55_fu_680_p2;
wire   [31:0] add_ln59_fu_715_p2;
wire   [31:0] add_ln64_fu_723_p2;
wire   [4:0] or_ln71_fu_745_p2;
wire   [4:0] or_ln72_fu_760_p2;
wire   [4:0] or_ln73_fu_775_p2;
wire   [31:0] sub_ln61_fu_785_p2;
wire   [31:0] sub_ln66_fu_793_p2;
wire   [4:0] or_ln74_fu_808_p2;
wire   [4:0] or_ln75_fu_825_p2;
wire   [4:0] or_ln76_fu_840_p2;
wire   [4:0] or_ln77_fu_855_p2;
wire   [5:0] out_1_rec_cast6_fu_865_p1;
wire   [5:0] add_ln90_fu_897_p2;
wire  signed [4:0] sext_ln87_fu_921_p1;
wire   [5:0] or_ln1_fu_929_p3;
wire   [31:0] workspace1_2_fu_958_p2;
wire   [31:0] workspace1_0_fu_950_p2;
wire   [31:0] workspace1_6_fu_974_p2;
wire   [31:0] workspace1_4_fu_966_p2;
wire   [31:0] add_ln102_fu_998_p2;
wire   [31:0] add_ln97_fu_986_p2;
wire   [31:0] sub_ln98_fu_992_p2;
wire   [31:0] sub_ln103_fu_1004_p2;
wire   [31:0] sub_ln104_fu_1044_p2;
wire   [31:0] sub_ln99_fu_1036_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_366 <= i_reg_1114;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_366 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_rec_reg_355 <= add_ln31_1_reg_1159;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_0_rec_reg_355 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_1_rec_reg_377 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        out_1_rec_reg_377 <= i_1_reg_1339;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_0_rec_reg_344 <= add_ln31_reg_1154;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_0_rec_reg_344 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_0_neg_cast_cast_reg_1076[31 : 8] <= add_0_neg_cast_cast_fu_404_p3[31 : 8];
        icmp_ln32_reg_1085 <= icmp_ln32_fu_418_p2;
        zext_ln31_reg_1096[31 : 0] <= zext_ln31_fu_424_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln100_reg_1462 <= add_ln100_fu_1040_p2;
        add_ln105_reg_1468 <= add_ln105_fu_1048_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln107_reg_1452 <= add_ln107_fu_1010_p2;
        add_ln110_reg_1457 <= add_ln110_fu_1030_p2;
        sub_ln94_reg_1446 <= sub_ln94_fu_980_p2;
        workspace1_1_reg_1428 <= workspace1_1_fu_954_p2;
        workspace1_3_reg_1434 <= workspace1_3_fu_962_p2;
        workspace1_5_reg_1440 <= workspace1_5_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln31_1_reg_1159 <= add_ln31_1_fu_474_p2;
        add_ln31_reg_1154 <= add_ln31_fu_469_p2;
        add_ln36_reg_1133 <= add_ln36_fu_454_p2;
        empty_2_reg_1119 <= empty_2_fu_450_p1;
        empty_3_reg_1143 <= empty_3_fu_465_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln62_reg_1319 <= add_ln62_fu_789_p2;
        add_ln67_reg_1325 <= add_ln67_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        block_load_2_reg_1180 <= block_r_q0;
        block_load_3_reg_1186 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_load_4_reg_1203 <= block_r_q0;
        block_load_5_reg_1209 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_load_6_reg_1227 <= block_r_q0;
        block_load_7_reg_1233 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_load_reg_1164 <= block_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_reg_1339 <= i_1_fu_880_p2;
        output_block_addr_1_reg_1331[3 : 0] <= out_1_rec_cast_fu_869_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1114 <= i_fu_444_p2;
        output_block_addr_reg_1101 <= out_0_rec_cast_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_ln_reg_1373[3 : 0] <= or_ln_fu_908_p3[3 : 0];
        output_block_addr_3_reg_1378[3 : 0] <= zext_ln87_fu_916_p1[3 : 0];
        output_block_addr_4_reg_1384 <= zext_ln87_1_fu_924_p1;
        output_block_load_1_reg_1367 <= output_block_q1;
        output_block_load_reg_1361 <= output_block_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_874_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        output_block_addr_2_reg_1350[3 : 0] <= zext_ln84_fu_892_p1[3 : 0];
        output_block_addr_6_reg_1356 <= sext_ln90_1_fu_903_p1;
        xor_ln84_reg_1344 <= xor_ln84_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_addr_5_reg_1401[3 : 0] <= sext_ln90_fu_937_p1[3 : 0];
        output_block_load_2_reg_1389 <= output_block_q0;
        output_block_load_3_reg_1395 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_addr_7_reg_1418[3 : 0] <= sext_ln93_fu_942_p1[3 : 0];
        output_block_addr_8_reg_1423 <= sext_ln93_1_fu_946_p1;
        output_block_load_4_reg_1406 <= output_block_q0;
        output_block_load_5_reg_1412 <= output_block_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_394 <= block_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln32_2_reg_1295 <= select_ln32_2_fu_703_p3;
        workspace1_0_1_reg_1289 <= workspace1_0_1_fu_698_p2;
        workspace1_1_1_reg_1301 <= workspace1_1_1_fu_710_p2;
        workspace1_6_3_reg_1283 <= workspace1_6_3_fu_686_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sub_ln60_reg_1307 <= sub_ln60_fu_719_p2;
        sub_ln65_reg_1313 <= sub_ln65_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        workspace1_2_3_reg_1272 <= workspace1_2_3_fu_643_p3;
        workspace1_3_3_reg_1266 <= workspace1_3_3_fu_636_p3;
        workspace1_4_3_reg_1260 <= workspace1_4_3_fu_629_p3;
        workspace1_5_3_reg_1254 <= workspace1_5_3_fu_622_p3;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        block_r_address0 = zext_ln54_1_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_r_address0 = zext_ln51_1_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address0 = zext_ln42_1_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address0 = zext_ln39_1_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address0 = zext_ln36_1_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address0 = tmp_0_rec_cast_fu_428_p1;
    end else begin
        block_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        block_r_address1 = zext_ln32_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_r_address1 = zext_ln54_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_r_address1 = zext_ln51_fu_535_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        block_r_address1 = zext_ln42_fu_515_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        block_r_address1 = zext_ln39_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        block_r_address1 = zext_ln36_fu_460_p1;
    end else begin
        block_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce0 = 1'b1;
    end else begin
        block_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        block_r_ce1 = 1'b1;
    end else begin
        block_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_address0 = output_block_addr_7_reg_1418;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_address0 = output_block_addr_5_reg_1401;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_address0 = output_block_addr_1_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address0 = output_block_addr_2_reg_1350;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address0 = sext_ln93_fu_942_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_block_address0 = sext_ln90_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address0 = zext_ln87_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address0 = out_1_rec_cast_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address0 = zext_ln76_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address0 = zext_ln74_fu_813_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address0 = zext_ln72_fu_765_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address0 = output_block_addr_reg_1101;
    end else begin
        output_block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_address1 = output_block_addr_8_reg_1423;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_address1 = output_block_addr_4_reg_1384;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_address1 = output_block_addr_3_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output_block_address1 = sext_ln93_1_fu_946_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        output_block_address1 = output_block_addr_6_reg_1356;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_block_address1 = zext_ln87_1_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_block_address1 = zext_ln84_fu_892_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_address1 = zext_ln77_fu_860_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_address1 = zext_ln75_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_address1 = zext_ln73_fu_780_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_address1 = zext_ln71_fu_750_p1;
    end else begin
        output_block_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_block_ce0 = 1'b1;
    end else begin
        output_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_block_ce1 = 1'b1;
    end else begin
        output_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_d0 = sub_ln113_fu_1066_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_d0 = add_ln111_fu_1052_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_d0 = add_ln107_reg_1452;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d0 = sub_ln108_fu_1016_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_d0 = sub_ln76_fu_835_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_d0 = add_ln74_fu_801_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_d0 = sub_ln72_fu_755_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d0 = add_ln70_fu_731_p2;
    end else begin
        output_block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_block_d1 = add_ln114_fu_1071_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_block_d1 = sub_ln112_fu_1059_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_block_d1 = add_ln110_reg_1457;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_block_d1 = sub_ln109_fu_1023_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_block_d1 = add_ln77_fu_850_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_block_d1 = sub_ln75_fu_818_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_block_d1 = add_ln73_fu_770_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_block_d1 = sub_ln71_fu_738_p2;
    end else begin
        output_block_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_block_we0 = 1'b1;
    end else begin
        output_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_block_we1 = 1'b1;
    end else begin
        output_block_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln31_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln82_fu_874_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_0_neg_cast_cast_fu_404_p3 = ((icmp_ln25_fu_398_p2[0:0] === 1'b1) ? 32'd4294967040 : 32'd0);

assign add_ln100_fu_1040_p2 = (workspace1_3_reg_1434 + workspace1_1_reg_1428);

assign add_ln102_fu_998_p2 = (workspace1_6_fu_974_p2 + workspace1_4_fu_966_p2);

assign add_ln105_fu_1048_p2 = (sub_ln94_reg_1446 + workspace1_5_reg_1440);

assign add_ln107_fu_1010_p2 = (add_ln102_fu_998_p2 + add_ln97_fu_986_p2);

assign add_ln110_fu_1030_p2 = (sub_ln103_fu_1004_p2 + sub_ln98_fu_992_p2);

assign add_ln111_fu_1052_p2 = (sub_ln104_fu_1044_p2 + sub_ln99_fu_1036_p2);

assign add_ln114_fu_1071_p2 = (add_ln105_reg_1468 + add_ln100_reg_1462);

assign add_ln31_1_fu_474_p2 = (6'd8 + out_0_rec_reg_355);

assign add_ln31_fu_469_p2 = (tmp_0_rec_reg_344 + zext_ln31_reg_1096);

assign add_ln32_fu_693_p2 = (block_r_q1 + add_0_neg_cast_cast_reg_1076);

assign add_ln33_fu_560_p2 = (6'd1 + empty_2_reg_1119);

assign add_ln36_1_fu_480_p2 = (6'd3 + empty_2_reg_1119);

assign add_ln36_2_fu_565_p2 = (add_0_neg_cast_cast_reg_1076 + block_load_2_reg_1180);

assign add_ln36_fu_454_p2 = (6'd2 + empty_2_fu_450_p1);

assign add_ln39_1_fu_500_p2 = (6'd5 + empty_2_reg_1119);

assign add_ln39_2_fu_580_p2 = (add_0_neg_cast_cast_reg_1076 + block_load_3_reg_1186);

assign add_ln39_fu_490_p2 = (6'd4 + empty_2_reg_1119);

assign add_ln42_1_fu_520_p2 = (6'd7 + empty_2_reg_1119);

assign add_ln42_2_fu_661_p2 = (add_0_neg_cast_cast_reg_1076 + block_load_6_reg_1227);

assign add_ln42_fu_510_p2 = (6'd6 + empty_2_reg_1119);

assign add_ln51_1_fu_540_p2 = (6'd10 + empty_2_reg_1119);

assign add_ln51_fu_530_p2 = (6'd8 + empty_2_reg_1119);

assign add_ln54_1_fu_612_p2 = (6'd14 + empty_2_reg_1119);

assign add_ln54_fu_550_p2 = (6'd12 + empty_2_reg_1119);

assign add_ln59_fu_715_p2 = (workspace1_0_1_reg_1289 + workspace1_2_3_reg_1272);

assign add_ln62_fu_789_p2 = (workspace1_1_1_reg_1301 + workspace1_3_3_reg_1266);

assign add_ln64_fu_723_p2 = (workspace1_4_3_reg_1260 + workspace1_6_3_reg_1283);

assign add_ln67_fu_797_p2 = (select_ln32_2_reg_1295 + workspace1_5_3_reg_1254);

assign add_ln70_fu_731_p2 = (add_ln59_fu_715_p2 + add_ln64_fu_723_p2);

assign add_ln73_fu_770_p2 = (sub_ln60_reg_1307 + sub_ln65_reg_1313);

assign add_ln74_fu_801_p2 = (sub_ln61_fu_785_p2 + sub_ln66_fu_793_p2);

assign add_ln77_fu_850_p2 = (add_ln62_reg_1319 + add_ln67_reg_1325);

assign add_ln90_fu_897_p2 = ($signed(out_1_rec_cast6_fu_865_p1) + $signed(6'd40));

assign add_ln97_fu_986_p2 = (workspace1_2_fu_958_p2 + workspace1_0_fu_950_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_2_fu_450_p1 = tmp_0_rec_reg_344[5:0];

assign empty_3_fu_465_p1 = out_0_rec_reg_355[4:0];

assign grp_fu_389_p2 = (add_0_neg_cast_cast_reg_1076 + block_r_q0);

assign i_1_fu_880_p2 = (out_1_rec_reg_377 + 4'd1);

assign i_fu_444_p2 = (i_0_reg_366 + 4'd1);

assign icmp_ln25_fu_398_p2 = ((intra != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_438_p2 = ((i_0_reg_366 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_418_p0 = input_step;

assign icmp_ln32_fu_418_p2 = ((icmp_ln32_fu_418_p0 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_874_p2 = ((out_1_rec_reg_377 == 4'd8) ? 1'b1 : 1'b0);

assign mul_ln29_fu_412_p0 = stride;

assign mul_ln29_fu_412_p1 = input_step;

assign mul_ln29_fu_412_p2 = ($signed(mul_ln29_fu_412_p0) * $signed(mul_ln29_fu_412_p1));

assign or_ln1_fu_929_p3 = {{2'd2}, {out_1_rec_reg_377}};

assign or_ln71_fu_745_p2 = (empty_3_reg_1143 | 5'd1);

assign or_ln72_fu_760_p2 = (empty_3_reg_1143 | 5'd2);

assign or_ln73_fu_775_p2 = (empty_3_reg_1143 | 5'd3);

assign or_ln74_fu_808_p2 = (empty_3_reg_1143 | 5'd4);

assign or_ln75_fu_825_p2 = (empty_3_reg_1143 | 5'd5);

assign or_ln76_fu_840_p2 = (empty_3_reg_1143 | 5'd6);

assign or_ln77_fu_855_p2 = (empty_3_reg_1143 | 5'd7);

assign or_ln_fu_908_p3 = {{1'd1}, {out_1_rec_reg_377}};

assign out_0_rec_cast_fu_433_p1 = out_0_rec_reg_355;

assign out_1_rec_cast6_fu_865_p1 = out_1_rec_reg_377;

assign out_1_rec_cast_fu_869_p1 = out_1_rec_reg_377;

assign select_ln32_2_fu_703_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? sub_ln43_fu_670_p2 : sub_ln55_fu_680_p2);

assign select_ln32_fu_650_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? add_ln33_fu_560_p2 : add_ln36_reg_1133);

assign sext_ln87_fu_921_p1 = xor_ln84_reg_1344;

assign sext_ln90_1_fu_903_p1 = $signed(add_ln90_fu_897_p2);

assign sext_ln90_fu_937_p1 = $signed(or_ln1_fu_929_p3);

assign sext_ln93_1_fu_946_p1 = xor_ln84_reg_1344;

assign sext_ln93_fu_942_p1 = or_ln_reg_1373;

assign sub_ln103_fu_1004_p2 = (workspace1_4_fu_966_p2 - workspace1_6_fu_974_p2);

assign sub_ln104_fu_1044_p2 = (workspace1_5_reg_1440 - sub_ln94_reg_1446);

assign sub_ln108_fu_1016_p2 = (add_ln97_fu_986_p2 - add_ln102_fu_998_p2);

assign sub_ln109_fu_1023_p2 = (sub_ln98_fu_992_p2 - sub_ln103_fu_1004_p2);

assign sub_ln112_fu_1059_p2 = (sub_ln99_fu_1036_p2 - sub_ln104_fu_1044_p2);

assign sub_ln113_fu_1066_p2 = (add_ln100_reg_1462 - add_ln105_reg_1468);

assign sub_ln43_fu_670_p2 = (block_load_5_reg_1209 - block_load_6_reg_1227);

assign sub_ln55_fu_680_p2 = (reg_394 - block_r_q0);

assign sub_ln60_fu_719_p2 = (workspace1_0_1_reg_1289 - workspace1_2_3_reg_1272);

assign sub_ln61_fu_785_p2 = (workspace1_1_1_reg_1301 - workspace1_3_3_reg_1266);

assign sub_ln65_fu_727_p2 = (workspace1_4_3_reg_1260 - workspace1_6_3_reg_1283);

assign sub_ln66_fu_793_p2 = (workspace1_5_3_reg_1254 - select_ln32_2_reg_1295);

assign sub_ln71_fu_738_p2 = (add_ln59_fu_715_p2 - add_ln64_fu_723_p2);

assign sub_ln72_fu_755_p2 = (sub_ln60_reg_1307 - sub_ln65_reg_1313);

assign sub_ln75_fu_818_p2 = (sub_ln61_fu_785_p2 - sub_ln66_fu_793_p2);

assign sub_ln76_fu_835_p2 = (add_ln62_reg_1319 - add_ln67_reg_1325);

assign sub_ln94_fu_980_p2 = (output_block_q0 - output_block_q1);

assign sub_ln98_fu_992_p2 = (workspace1_0_fu_950_p2 - workspace1_2_fu_958_p2);

assign sub_ln99_fu_1036_p2 = (workspace1_1_reg_1428 - workspace1_3_reg_1434);

assign tmp_0_rec_cast_fu_428_p1 = tmp_0_rec_reg_344;

assign workspace1_0_1_fu_698_p2 = (block_load_reg_1164 + add_ln32_fu_693_p2);

assign workspace1_0_fu_950_p2 = (output_block_load_1_reg_1367 + output_block_load_reg_1361);

assign workspace1_1_1_fu_710_p2 = (block_load_reg_1164 - block_r_q1);

assign workspace1_1_fu_954_p2 = (output_block_load_reg_1361 - output_block_load_1_reg_1367);

assign workspace1_2_1_fu_569_p2 = (reg_394 + add_ln36_2_fu_565_p2);

assign workspace1_2_2_fu_593_p2 = (add_ln39_2_fu_580_p2 + block_load_5_reg_1209);

assign workspace1_2_3_fu_643_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? workspace1_2_1_fu_569_p2 : workspace1_2_2_fu_593_p2);

assign workspace1_2_fu_958_p2 = (output_block_load_3_reg_1395 + output_block_load_2_reg_1389);

assign workspace1_3_1_fu_575_p2 = (reg_394 - block_load_2_reg_1180);

assign workspace1_3_2_fu_598_p2 = (block_load_3_reg_1186 - block_load_5_reg_1209);

assign workspace1_3_3_fu_636_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? workspace1_3_1_fu_575_p2 : workspace1_3_2_fu_598_p2);

assign workspace1_3_fu_962_p2 = (output_block_load_2_reg_1389 - output_block_load_3_reg_1395);

assign workspace1_4_1_fu_584_p2 = (add_ln39_2_fu_580_p2 + block_load_4_reg_1203);

assign workspace1_4_2_fu_602_p2 = (block_load_7_reg_1233 + grp_fu_389_p2);

assign workspace1_4_3_fu_629_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? workspace1_4_1_fu_584_p2 : workspace1_4_2_fu_602_p2);

assign workspace1_4_fu_966_p2 = (output_block_load_5_reg_1412 + output_block_load_4_reg_1406);

assign workspace1_5_1_fu_589_p2 = (block_load_3_reg_1186 - block_load_4_reg_1203);

assign workspace1_5_2_fu_607_p2 = (block_load_7_reg_1233 - block_r_q0);

assign workspace1_5_3_fu_622_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? workspace1_5_1_fu_589_p2 : workspace1_5_2_fu_607_p2);

assign workspace1_5_fu_970_p2 = (output_block_load_4_reg_1406 - output_block_load_5_reg_1412);

assign workspace1_6_1_fu_665_p2 = (block_load_5_reg_1209 + add_ln42_2_fu_661_p2);

assign workspace1_6_2_fu_674_p2 = (reg_394 + grp_fu_389_p2);

assign workspace1_6_3_fu_686_p3 = ((icmp_ln32_reg_1085[0:0] === 1'b1) ? workspace1_6_1_fu_665_p2 : workspace1_6_2_fu_674_p2);

assign workspace1_6_fu_974_p2 = (output_block_q1 + output_block_q0);

assign xor_ln84_fu_886_p2 = (out_1_rec_reg_377 ^ 4'd8);

assign zext_ln31_fu_424_p1 = mul_ln29_fu_412_p2;

assign zext_ln32_fu_656_p1 = select_ln32_fu_650_p3;

assign zext_ln36_1_fu_485_p1 = add_ln36_1_fu_480_p2;

assign zext_ln36_fu_460_p1 = add_ln36_fu_454_p2;

assign zext_ln39_1_fu_505_p1 = add_ln39_1_fu_500_p2;

assign zext_ln39_fu_495_p1 = add_ln39_fu_490_p2;

assign zext_ln42_1_fu_525_p1 = add_ln42_1_fu_520_p2;

assign zext_ln42_fu_515_p1 = add_ln42_fu_510_p2;

assign zext_ln51_1_fu_545_p1 = add_ln51_1_fu_540_p2;

assign zext_ln51_fu_535_p1 = add_ln51_fu_530_p2;

assign zext_ln54_1_fu_617_p1 = add_ln54_1_fu_612_p2;

assign zext_ln54_fu_555_p1 = add_ln54_fu_550_p2;

assign zext_ln71_fu_750_p1 = or_ln71_fu_745_p2;

assign zext_ln72_fu_765_p1 = or_ln72_fu_760_p2;

assign zext_ln73_fu_780_p1 = or_ln73_fu_775_p2;

assign zext_ln74_fu_813_p1 = or_ln74_fu_808_p2;

assign zext_ln75_fu_830_p1 = or_ln75_fu_825_p2;

assign zext_ln76_fu_845_p1 = or_ln76_fu_840_p2;

assign zext_ln77_fu_860_p1 = or_ln77_fu_855_p2;

assign zext_ln84_fu_892_p1 = $unsigned(xor_ln84_fu_886_p2);

assign zext_ln87_1_fu_924_p1 = $unsigned(sext_ln87_fu_921_p1);

assign zext_ln87_fu_916_p1 = $unsigned(or_ln_fu_908_p3);

always @ (posedge ap_clk) begin
    add_0_neg_cast_cast_reg_1076[7:0] <= 8'b00000000;
    zext_ln31_reg_1096[34:32] <= 3'b000;
    output_block_addr_1_reg_1331[4] <= 1'b0;
    output_block_addr_2_reg_1350[4] <= 1'b0;
    or_ln_reg_1373[4] <= 1'b1;
    output_block_addr_3_reg_1378[4] <= 1'b1;
    output_block_addr_5_reg_1401[4] <= 1'b0;
    output_block_addr_7_reg_1418[4] <= 1'b1;
end

endmodule //fwht
