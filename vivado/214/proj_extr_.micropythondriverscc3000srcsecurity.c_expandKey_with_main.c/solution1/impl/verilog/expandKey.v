// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="expandKey,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=194,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1710,HLS_SYN_LUT=1565,HLS_VERSION=2019_1}" *)

module expandKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        expandedKey_address0,
        expandedKey_ce0,
        expandedKey_we0,
        expandedKey_d0,
        expandedKey_q0,
        expandedKey_address1,
        expandedKey_ce1,
        expandedKey_we1,
        expandedKey_d1,
        expandedKey_q1,
        key_address0,
        key_ce0,
        key_q0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] expandedKey_address0;
output   expandedKey_ce0;
output   expandedKey_we0;
output  [63:0] expandedKey_d0;
input  [63:0] expandedKey_q0;
output  [9:0] expandedKey_address1;
output   expandedKey_ce1;
output   expandedKey_we1;
output  [63:0] expandedKey_d1;
input  [63:0] expandedKey_q1;
output  [9:0] key_address0;
output   key_ce0;
input  [63:0] key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] expandedKey_address0;
reg expandedKey_ce0;
reg expandedKey_we0;
reg[63:0] expandedKey_d0;
reg[9:0] expandedKey_address1;
reg expandedKey_ce1;
reg expandedKey_we1;
reg[63:0] expandedKey_d1;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_403;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
reg   [63:0] reg_408;
wire    ap_CS_fsm_state7;
wire   [4:0] ii_fu_420_p2;
reg   [4:0] ii_reg_822;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln23_fu_426_p1;
reg   [63:0] zext_ln23_reg_827;
wire   [0:0] icmp_ln22_fu_414_p2;
wire   [7:0] shl_ln_fu_437_p3;
reg   [7:0] shl_ln_reg_840;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln24_fu_431_p2;
wire   [3:0] ii_2_fu_467_p2;
reg   [3:0] ii_2_reg_884;
reg   [63:0] expandedKey_load_reg_889;
wire    ap_CS_fsm_state5;
reg   [63:0] expandedKey_load_1_reg_894;
reg   [63:0] expandedKey_load_3_reg_909;
reg   [63:0] expandedKey_load_5_reg_924;
reg   [63:0] expandedKey_load_6_reg_939;
wire    ap_CS_fsm_state8;
reg   [63:0] expandedKey_load_7_reg_945;
reg   [63:0] expandedKey_load_8_reg_961;
wire    ap_CS_fsm_state9;
reg   [63:0] expandedKey_load_9_reg_966;
reg   [63:0] expandedKey_load_10_reg_981;
wire    ap_CS_fsm_state10;
reg   [63:0] expandedKey_load_11_reg_986;
reg   [63:0] expandedKey_load_12_reg_1001;
wire    ap_CS_fsm_state11;
reg   [63:0] expandedKey_load_13_reg_1006;
wire   [63:0] xor_ln30_fu_627_p2;
reg   [63:0] xor_ln30_reg_1021;
wire   [63:0] xor_ln31_fu_632_p2;
reg   [63:0] xor_ln31_reg_1027;
wire   [63:0] xor_ln32_fu_657_p2;
reg   [63:0] xor_ln32_reg_1033;
wire    ap_CS_fsm_state13;
wire   [63:0] xor_ln33_fu_661_p2;
reg   [63:0] xor_ln33_reg_1039;
wire   [63:0] xor_ln34_fu_685_p2;
reg   [63:0] xor_ln34_reg_1045;
wire    ap_CS_fsm_state14;
wire   [63:0] xor_ln35_fu_689_p2;
reg   [63:0] xor_ln35_reg_1051;
wire   [63:0] xor_ln36_fu_713_p2;
reg   [63:0] xor_ln36_reg_1057;
wire    ap_CS_fsm_state15;
wire   [63:0] xor_ln37_fu_718_p2;
reg   [63:0] xor_ln37_reg_1063;
wire   [63:0] xor_ln38_fu_743_p2;
reg   [63:0] xor_ln38_reg_1069;
wire    ap_CS_fsm_state16;
wire   [63:0] xor_ln39_fu_747_p2;
reg   [63:0] xor_ln39_reg_1074;
wire   [63:0] xor_ln40_fu_771_p2;
reg   [63:0] xor_ln40_reg_1079;
wire    ap_CS_fsm_state17;
wire   [63:0] xor_ln41_fu_775_p2;
reg   [63:0] xor_ln41_reg_1084;
reg   [4:0] ii_0_reg_381;
wire    ap_CS_fsm_state3;
reg   [3:0] ii_1_reg_392;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln25_fu_451_p1;
wire   [63:0] zext_ln26_fu_462_p1;
wire   [63:0] zext_ln26_1_fu_478_p1;
wire   [63:0] zext_ln27_fu_488_p1;
wire   [63:0] zext_ln27_1_fu_498_p1;
wire   [63:0] zext_ln28_fu_508_p1;
wire   [63:0] zext_ln28_1_fu_518_p1;
wire   [63:0] zext_ln29_fu_528_p1;
wire   [63:0] zext_ln30_fu_538_p1;
wire   [63:0] zext_ln31_fu_548_p1;
wire   [63:0] zext_ln32_fu_558_p1;
wire   [63:0] zext_ln33_fu_568_p1;
wire   [63:0] zext_ln34_fu_578_p1;
wire   [63:0] zext_ln35_fu_588_p1;
wire   [63:0] zext_ln36_fu_598_p1;
wire   [63:0] zext_ln37_fu_608_p1;
wire   [63:0] zext_ln26_2_fu_613_p1;
wire   [63:0] zext_ln27_2_fu_622_p1;
wire   [63:0] zext_ln28_2_fu_642_p1;
wire   [63:0] zext_ln29_1_fu_652_p1;
wire   [63:0] zext_ln30_1_fu_670_p1;
wire   [63:0] zext_ln31_1_fu_680_p1;
wire   [63:0] zext_ln32_1_fu_698_p1;
wire   [63:0] zext_ln33_1_fu_708_p1;
wire   [63:0] zext_ln34_1_fu_728_p1;
wire   [63:0] zext_ln35_1_fu_738_p1;
wire   [63:0] zext_ln36_1_fu_756_p1;
wire   [63:0] zext_ln37_1_fu_766_p1;
wire   [63:0] zext_ln38_fu_784_p1;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln39_fu_794_p1;
wire   [63:0] zext_ln40_fu_804_p1;
wire   [63:0] zext_ln41_fu_814_p1;
wire   [7:0] add_ln25_fu_445_p2;
wire   [7:0] add_ln26_fu_456_p2;
wire   [7:0] add_ln26_1_fu_473_p2;
wire   [7:0] add_ln27_fu_483_p2;
wire   [7:0] add_ln27_1_fu_493_p2;
wire   [7:0] add_ln28_fu_503_p2;
wire   [7:0] add_ln28_1_fu_513_p2;
wire   [7:0] add_ln29_fu_523_p2;
wire   [7:0] add_ln30_fu_533_p2;
wire   [7:0] add_ln31_fu_543_p2;
wire   [7:0] add_ln32_fu_553_p2;
wire   [7:0] add_ln33_fu_563_p2;
wire   [7:0] add_ln34_fu_573_p2;
wire   [7:0] add_ln35_fu_583_p2;
wire   [7:0] add_ln36_fu_593_p2;
wire   [7:0] add_ln37_fu_603_p2;
wire   [7:0] or_ln27_fu_617_p2;
wire   [7:0] or_ln28_fu_637_p2;
wire   [7:0] or_ln29_fu_647_p2;
wire   [7:0] or_ln30_fu_665_p2;
wire   [7:0] or_ln31_fu_675_p2;
wire   [7:0] or_ln32_fu_693_p2;
wire   [7:0] or_ln33_fu_703_p2;
wire   [7:0] or_ln34_fu_723_p2;
wire   [7:0] or_ln35_fu_733_p2;
wire   [7:0] or_ln36_fu_751_p2;
wire   [7:0] or_ln37_fu_761_p2;
wire   [7:0] or_ln38_fu_779_p2;
wire   [7:0] or_ln39_fu_789_p2;
wire   [7:0] or_ln40_fu_799_p2;
wire   [7:0] or_ln41_fu_809_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_0_reg_381 <= ii_reg_822;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_0_reg_381 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_1_reg_392 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        ii_1_reg_392 <= ii_2_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_408 <= expandedKey_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_408 <= expandedKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        expandedKey_load_10_reg_981 <= expandedKey_q1;
        expandedKey_load_11_reg_986 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_load_12_reg_1001 <= expandedKey_q1;
        expandedKey_load_13_reg_1006 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_load_1_reg_894 <= expandedKey_q1;
        expandedKey_load_reg_889 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_load_3_reg_909 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_load_5_reg_924 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_load_6_reg_939 <= expandedKey_q1;
        expandedKey_load_7_reg_945 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_load_8_reg_961 <= expandedKey_q1;
        expandedKey_load_9_reg_966 <= expandedKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_431_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ii_2_reg_884 <= ii_2_fu_467_p2;
        shl_ln_reg_840[7 : 4] <= shl_ln_fu_437_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_reg_822 <= ii_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_403 <= expandedKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        xor_ln30_reg_1021 <= xor_ln30_fu_627_p2;
        xor_ln31_reg_1027 <= xor_ln31_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln32_reg_1033 <= xor_ln32_fu_657_p2;
        xor_ln33_reg_1039 <= xor_ln33_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln34_reg_1045 <= xor_ln34_fu_685_p2;
        xor_ln35_reg_1051 <= xor_ln35_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln36_reg_1057 <= xor_ln36_fu_713_p2;
        xor_ln37_reg_1063 <= xor_ln37_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        xor_ln38_reg_1069 <= xor_ln38_fu_743_p2;
        xor_ln39_reg_1074 <= xor_ln39_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        xor_ln40_reg_1079 <= xor_ln40_fu_771_p2;
        xor_ln41_reg_1084 <= xor_ln41_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln23_reg_827[4 : 0] <= zext_ln23_fu_426_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_431_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_431_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_address0 = zext_ln41_fu_814_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        expandedKey_address0 = zext_ln39_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        expandedKey_address0 = zext_ln37_1_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        expandedKey_address0 = zext_ln35_1_fu_738_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_address0 = zext_ln33_1_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_address0 = zext_ln31_1_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_address0 = zext_ln29_1_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expandedKey_address0 = zext_ln27_2_fu_622_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_address0 = zext_ln37_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expandedKey_address0 = zext_ln35_fu_588_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_address0 = zext_ln33_fu_568_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_address0 = zext_ln31_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address0 = zext_ln29_fu_528_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address0 = zext_ln28_fu_508_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address0 = zext_ln27_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address0 = zext_ln25_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_address0 = zext_ln23_reg_827;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_address1 = zext_ln40_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        expandedKey_address1 = zext_ln38_fu_784_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        expandedKey_address1 = zext_ln36_1_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        expandedKey_address1 = zext_ln34_1_fu_728_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_address1 = zext_ln32_1_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_address1 = zext_ln30_1_fu_670_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_address1 = zext_ln28_2_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expandedKey_address1 = zext_ln26_2_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        expandedKey_address1 = zext_ln36_fu_598_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        expandedKey_address1 = zext_ln34_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        expandedKey_address1 = zext_ln32_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        expandedKey_address1 = zext_ln30_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        expandedKey_address1 = zext_ln28_1_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address1 = zext_ln27_1_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        expandedKey_address1 = zext_ln26_1_fu_478_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_address1 = zext_ln26_fu_462_p1;
    end else begin
        expandedKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        expandedKey_ce0 = 1'b1;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        expandedKey_ce1 = 1'b1;
    end else begin
        expandedKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_d0 = xor_ln41_reg_1084;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        expandedKey_d0 = xor_ln39_reg_1074;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        expandedKey_d0 = xor_ln37_reg_1063;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        expandedKey_d0 = xor_ln35_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_d0 = xor_ln33_reg_1039;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_d0 = xor_ln31_reg_1027;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_d0 = expandedKey_load_7_reg_945;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expandedKey_d0 = reg_408;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expandedKey_d0 = key_q0;
    end else begin
        expandedKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        expandedKey_d1 = xor_ln40_reg_1079;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        expandedKey_d1 = xor_ln38_reg_1069;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        expandedKey_d1 = xor_ln36_reg_1057;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        expandedKey_d1 = xor_ln34_reg_1045;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        expandedKey_d1 = xor_ln32_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_d1 = xor_ln30_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_d1 = expandedKey_load_6_reg_939;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        expandedKey_d1 = reg_403;
    end else begin
        expandedKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        expandedKey_we0 = 1'b1;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        expandedKey_we1 = 1'b1;
    end else begin
        expandedKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln24_fu_431_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_445_p2 = ($signed(shl_ln_fu_437_p3) + $signed(8'd252));

assign add_ln26_1_fu_473_p2 = ($signed(shl_ln_reg_840) + $signed(8'd240));

assign add_ln26_fu_456_p2 = ($signed(shl_ln_fu_437_p3) + $signed(8'd253));

assign add_ln27_1_fu_493_p2 = ($signed(shl_ln_reg_840) + $signed(8'd241));

assign add_ln27_fu_483_p2 = ($signed(shl_ln_reg_840) + $signed(8'd254));

assign add_ln28_1_fu_513_p2 = ($signed(shl_ln_reg_840) + $signed(8'd242));

assign add_ln28_fu_503_p2 = ($signed(shl_ln_reg_840) + $signed(8'd255));

assign add_ln29_fu_523_p2 = ($signed(shl_ln_reg_840) + $signed(8'd243));

assign add_ln30_fu_533_p2 = ($signed(shl_ln_reg_840) + $signed(8'd244));

assign add_ln31_fu_543_p2 = ($signed(shl_ln_reg_840) + $signed(8'd245));

assign add_ln32_fu_553_p2 = ($signed(shl_ln_reg_840) + $signed(8'd246));

assign add_ln33_fu_563_p2 = ($signed(shl_ln_reg_840) + $signed(8'd247));

assign add_ln34_fu_573_p2 = ($signed(shl_ln_reg_840) + $signed(8'd248));

assign add_ln35_fu_583_p2 = ($signed(shl_ln_reg_840) + $signed(8'd249));

assign add_ln36_fu_593_p2 = ($signed(shl_ln_reg_840) + $signed(8'd250));

assign add_ln37_fu_603_p2 = ($signed(shl_ln_reg_840) + $signed(8'd251));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln22_fu_414_p2 = ((ii_0_reg_381 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_431_p2 = ((ii_1_reg_392 == 4'd11) ? 1'b1 : 1'b0);

assign ii_2_fu_467_p2 = (ii_1_reg_392 + 4'd1);

assign ii_fu_420_p2 = (ii_0_reg_381 + 5'd1);

assign key_address0 = zext_ln23_fu_426_p1;

assign or_ln27_fu_617_p2 = (shl_ln_reg_840 | 8'd1);

assign or_ln28_fu_637_p2 = (shl_ln_reg_840 | 8'd2);

assign or_ln29_fu_647_p2 = (shl_ln_reg_840 | 8'd3);

assign or_ln30_fu_665_p2 = (shl_ln_reg_840 | 8'd4);

assign or_ln31_fu_675_p2 = (shl_ln_reg_840 | 8'd5);

assign or_ln32_fu_693_p2 = (shl_ln_reg_840 | 8'd6);

assign or_ln33_fu_703_p2 = (shl_ln_reg_840 | 8'd7);

assign or_ln34_fu_723_p2 = (shl_ln_reg_840 | 8'd8);

assign or_ln35_fu_733_p2 = (shl_ln_reg_840 | 8'd9);

assign or_ln36_fu_751_p2 = (shl_ln_reg_840 | 8'd10);

assign or_ln37_fu_761_p2 = (shl_ln_reg_840 | 8'd11);

assign or_ln38_fu_779_p2 = (shl_ln_reg_840 | 8'd12);

assign or_ln39_fu_789_p2 = (shl_ln_reg_840 | 8'd13);

assign or_ln40_fu_799_p2 = (shl_ln_reg_840 | 8'd14);

assign or_ln41_fu_809_p2 = (shl_ln_reg_840 | 8'd15);

assign shl_ln_fu_437_p3 = {{ii_1_reg_392}, {4'd0}};

assign xor_ln30_fu_627_p2 = (reg_403 ^ expandedKey_load_8_reg_961);

assign xor_ln31_fu_632_p2 = (reg_408 ^ expandedKey_load_9_reg_966);

assign xor_ln32_fu_657_p2 = (expandedKey_load_6_reg_939 ^ expandedKey_load_10_reg_981);

assign xor_ln33_fu_661_p2 = (expandedKey_load_7_reg_945 ^ expandedKey_load_11_reg_986);

assign xor_ln34_fu_685_p2 = (xor_ln30_reg_1021 ^ expandedKey_load_12_reg_1001);

assign xor_ln35_fu_689_p2 = (xor_ln31_reg_1027 ^ expandedKey_load_13_reg_1006);

assign xor_ln36_fu_713_p2 = (xor_ln32_reg_1033 ^ reg_403);

assign xor_ln37_fu_718_p2 = (xor_ln33_reg_1039 ^ reg_408);

assign xor_ln38_fu_743_p2 = (xor_ln34_reg_1045 ^ expandedKey_load_reg_889);

assign xor_ln39_fu_747_p2 = (xor_ln35_reg_1051 ^ expandedKey_load_1_reg_894);

assign xor_ln40_fu_771_p2 = (xor_ln36_reg_1057 ^ expandedKey_load_3_reg_909);

assign xor_ln41_fu_775_p2 = (xor_ln37_reg_1063 ^ expandedKey_load_5_reg_924);

assign zext_ln23_fu_426_p1 = ii_0_reg_381;

assign zext_ln25_fu_451_p1 = add_ln25_fu_445_p2;

assign zext_ln26_1_fu_478_p1 = add_ln26_1_fu_473_p2;

assign zext_ln26_2_fu_613_p1 = shl_ln_reg_840;

assign zext_ln26_fu_462_p1 = add_ln26_fu_456_p2;

assign zext_ln27_1_fu_498_p1 = add_ln27_1_fu_493_p2;

assign zext_ln27_2_fu_622_p1 = or_ln27_fu_617_p2;

assign zext_ln27_fu_488_p1 = add_ln27_fu_483_p2;

assign zext_ln28_1_fu_518_p1 = add_ln28_1_fu_513_p2;

assign zext_ln28_2_fu_642_p1 = or_ln28_fu_637_p2;

assign zext_ln28_fu_508_p1 = add_ln28_fu_503_p2;

assign zext_ln29_1_fu_652_p1 = or_ln29_fu_647_p2;

assign zext_ln29_fu_528_p1 = add_ln29_fu_523_p2;

assign zext_ln30_1_fu_670_p1 = or_ln30_fu_665_p2;

assign zext_ln30_fu_538_p1 = add_ln30_fu_533_p2;

assign zext_ln31_1_fu_680_p1 = or_ln31_fu_675_p2;

assign zext_ln31_fu_548_p1 = add_ln31_fu_543_p2;

assign zext_ln32_1_fu_698_p1 = or_ln32_fu_693_p2;

assign zext_ln32_fu_558_p1 = add_ln32_fu_553_p2;

assign zext_ln33_1_fu_708_p1 = or_ln33_fu_703_p2;

assign zext_ln33_fu_568_p1 = add_ln33_fu_563_p2;

assign zext_ln34_1_fu_728_p1 = or_ln34_fu_723_p2;

assign zext_ln34_fu_578_p1 = add_ln34_fu_573_p2;

assign zext_ln35_1_fu_738_p1 = or_ln35_fu_733_p2;

assign zext_ln35_fu_588_p1 = add_ln35_fu_583_p2;

assign zext_ln36_1_fu_756_p1 = or_ln36_fu_751_p2;

assign zext_ln36_fu_598_p1 = add_ln36_fu_593_p2;

assign zext_ln37_1_fu_766_p1 = or_ln37_fu_761_p2;

assign zext_ln37_fu_608_p1 = add_ln37_fu_603_p2;

assign zext_ln38_fu_784_p1 = or_ln38_fu_779_p2;

assign zext_ln39_fu_794_p1 = or_ln39_fu_789_p2;

assign zext_ln40_fu_804_p1 = or_ln40_fu_799_p2;

assign zext_ln41_fu_814_p1 = or_ln41_fu_809_p2;

always @ (posedge ap_clk) begin
    zext_ln23_reg_827[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_840[3:0] <= 4'b0000;
end

endmodule //expandKey
