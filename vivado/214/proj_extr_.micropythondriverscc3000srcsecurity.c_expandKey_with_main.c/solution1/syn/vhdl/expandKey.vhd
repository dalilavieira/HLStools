-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expandKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    expandedKey_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    expandedKey_ce0 : OUT STD_LOGIC;
    expandedKey_we0 : OUT STD_LOGIC;
    expandedKey_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    expandedKey_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    expandedKey_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    expandedKey_ce1 : OUT STD_LOGIC;
    expandedKey_we1 : OUT STD_LOGIC;
    expandedKey_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    expandedKey_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of expandKey is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "expandKey,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.328000,HLS_SYN_LAT=194,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1710,HLS_SYN_LUT=1565,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_F4 : STD_LOGIC_VECTOR (7 downto 0) := "11110100";
    constant ap_const_lv8_F5 : STD_LOGIC_VECTOR (7 downto 0) := "11110101";
    constant ap_const_lv8_F6 : STD_LOGIC_VECTOR (7 downto 0) := "11110110";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_FB : STD_LOGIC_VECTOR (7 downto 0) := "11111011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ii_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_reg_822 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln23_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_827 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln22_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln24_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_467_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_2_reg_884 : STD_LOGIC_VECTOR (3 downto 0);
    signal expandedKey_load_reg_889 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal expandedKey_load_1_reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_3_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_5_reg_924 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_6_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal expandedKey_load_7_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_8_reg_961 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal expandedKey_load_9_reg_966 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_10_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal expandedKey_load_11_reg_986 : STD_LOGIC_VECTOR (63 downto 0);
    signal expandedKey_load_12_reg_1001 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal expandedKey_load_13_reg_1006 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln30_fu_627_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln30_reg_1021 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln31_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln31_reg_1027 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln32_fu_657_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln32_reg_1033 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln33_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln33_reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln34_fu_685_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln34_reg_1045 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln35_fu_689_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln35_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln36_fu_713_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln36_reg_1057 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xor_ln37_fu_718_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_reg_1063 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln38_fu_743_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln38_reg_1069 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal xor_ln39_fu_747_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_reg_1074 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln40_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln40_reg_1079 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal xor_ln41_fu_775_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln41_reg_1084 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_0_reg_381 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ii_1_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln25_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_2_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_1_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_1_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln39_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_1_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln29_fu_523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_fu_573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln27_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln28_fu_637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln29_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln30_fu_665_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln31_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln32_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln33_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln34_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln35_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln36_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln37_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln38_fu_779_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln39_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln40_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln41_fu_809_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ii_0_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ii_0_reg_381 <= ii_reg_822;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_0_reg_381 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ii_1_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_1_reg_392 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ii_1_reg_392 <= ii_2_reg_884;
            end if; 
        end if;
    end process;

    reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_408 <= expandedKey_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_408 <= expandedKey_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                expandedKey_load_10_reg_981 <= expandedKey_q1;
                expandedKey_load_11_reg_986 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                expandedKey_load_12_reg_1001 <= expandedKey_q1;
                expandedKey_load_13_reg_1006 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                expandedKey_load_1_reg_894 <= expandedKey_q1;
                expandedKey_load_reg_889 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                expandedKey_load_3_reg_909 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                expandedKey_load_5_reg_924 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                expandedKey_load_6_reg_939 <= expandedKey_q1;
                expandedKey_load_7_reg_945 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                expandedKey_load_8_reg_961 <= expandedKey_q1;
                expandedKey_load_9_reg_966 <= expandedKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_431_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ii_2_reg_884 <= ii_2_fu_467_p2;
                    shl_ln_reg_840(7 downto 4) <= shl_ln_fu_437_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_reg_822 <= ii_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_403 <= expandedKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                xor_ln30_reg_1021 <= xor_ln30_fu_627_p2;
                xor_ln31_reg_1027 <= xor_ln31_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln32_reg_1033 <= xor_ln32_fu_657_p2;
                xor_ln33_reg_1039 <= xor_ln33_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                xor_ln34_reg_1045 <= xor_ln34_fu_685_p2;
                xor_ln35_reg_1051 <= xor_ln35_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                xor_ln36_reg_1057 <= xor_ln36_fu_713_p2;
                xor_ln37_reg_1063 <= xor_ln37_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                xor_ln38_reg_1069 <= xor_ln38_fu_743_p2;
                xor_ln39_reg_1074 <= xor_ln39_fu_747_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                xor_ln40_reg_1079 <= xor_ln40_fu_771_p2;
                xor_ln41_reg_1084 <= xor_ln41_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln23_reg_827(4 downto 0) <= zext_ln23_fu_426_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln23_reg_827(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_840(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_414_p2, ap_CS_fsm_state4, icmp_ln24_fu_431_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln24_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_445_p2 <= std_logic_vector(unsigned(shl_ln_fu_437_p3) + unsigned(ap_const_lv8_FC));
    add_ln26_1_fu_473_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F0));
    add_ln26_fu_456_p2 <= std_logic_vector(unsigned(shl_ln_fu_437_p3) + unsigned(ap_const_lv8_FD));
    add_ln27_1_fu_493_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F1));
    add_ln27_fu_483_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_FE));
    add_ln28_1_fu_513_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F2));
    add_ln28_fu_503_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_FF));
    add_ln29_fu_523_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F3));
    add_ln30_fu_533_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F4));
    add_ln31_fu_543_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F5));
    add_ln32_fu_553_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F6));
    add_ln33_fu_563_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F7));
    add_ln34_fu_573_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F8));
    add_ln35_fu_583_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_F9));
    add_ln36_fu_593_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_FA));
    add_ln37_fu_603_p2 <= std_logic_vector(unsigned(shl_ln_reg_840) + unsigned(ap_const_lv8_FB));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln24_fu_431_p2)
    begin
        if (((icmp_ln24_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln24_fu_431_p2)
    begin
        if (((icmp_ln24_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state7, zext_ln23_reg_827, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state19, zext_ln25_fu_451_p1, zext_ln27_fu_488_p1, zext_ln28_fu_508_p1, zext_ln29_fu_528_p1, zext_ln31_fu_548_p1, zext_ln33_fu_568_p1, zext_ln35_fu_588_p1, zext_ln37_fu_608_p1, zext_ln27_2_fu_622_p1, zext_ln29_1_fu_652_p1, zext_ln31_1_fu_680_p1, zext_ln33_1_fu_708_p1, zext_ln35_1_fu_738_p1, zext_ln37_1_fu_766_p1, ap_CS_fsm_state18, zext_ln39_fu_794_p1, zext_ln41_fu_814_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_address0 <= zext_ln41_fu_814_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            expandedKey_address0 <= zext_ln39_fu_794_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            expandedKey_address0 <= zext_ln37_1_fu_766_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            expandedKey_address0 <= zext_ln35_1_fu_738_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_address0 <= zext_ln33_1_fu_708_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_address0 <= zext_ln31_1_fu_680_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_address0 <= zext_ln29_1_fu_652_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            expandedKey_address0 <= zext_ln27_2_fu_622_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            expandedKey_address0 <= zext_ln37_fu_608_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            expandedKey_address0 <= zext_ln35_fu_588_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_address0 <= zext_ln33_fu_568_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_address0 <= zext_ln31_fu_548_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expandedKey_address0 <= zext_ln29_fu_528_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address0 <= zext_ln28_fu_508_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expandedKey_address0 <= zext_ln27_fu_488_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address0 <= zext_ln25_fu_451_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expandedKey_address0 <= zext_ln23_reg_827(10 - 1 downto 0);
        else 
            expandedKey_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    expandedKey_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, zext_ln26_fu_462_p1, zext_ln26_1_fu_478_p1, zext_ln27_1_fu_498_p1, zext_ln28_1_fu_518_p1, zext_ln30_fu_538_p1, zext_ln32_fu_558_p1, zext_ln34_fu_578_p1, zext_ln36_fu_598_p1, zext_ln26_2_fu_613_p1, zext_ln28_2_fu_642_p1, zext_ln30_1_fu_670_p1, zext_ln32_1_fu_698_p1, zext_ln34_1_fu_728_p1, zext_ln36_1_fu_756_p1, zext_ln38_fu_784_p1, ap_CS_fsm_state18, zext_ln40_fu_804_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_address1 <= zext_ln40_fu_804_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            expandedKey_address1 <= zext_ln38_fu_784_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            expandedKey_address1 <= zext_ln36_1_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            expandedKey_address1 <= zext_ln34_1_fu_728_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_address1 <= zext_ln32_1_fu_698_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_address1 <= zext_ln30_1_fu_670_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_address1 <= zext_ln28_2_fu_642_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            expandedKey_address1 <= zext_ln26_2_fu_613_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            expandedKey_address1 <= zext_ln36_fu_598_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            expandedKey_address1 <= zext_ln34_fu_578_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            expandedKey_address1 <= zext_ln32_fu_558_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            expandedKey_address1 <= zext_ln30_fu_538_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            expandedKey_address1 <= zext_ln28_1_fu_518_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_address1 <= zext_ln27_1_fu_498_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            expandedKey_address1 <= zext_ln26_1_fu_478_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_address1 <= zext_ln26_fu_462_p1(10 - 1 downto 0);
        else 
            expandedKey_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    expandedKey_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expandedKey_ce0 <= ap_const_logic_1;
        else 
            expandedKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            expandedKey_ce1 <= ap_const_logic_1;
        else 
            expandedKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_d0_assign_proc : process(key_q0, ap_CS_fsm_state12, reg_408, expandedKey_load_7_reg_945, xor_ln31_reg_1027, ap_CS_fsm_state13, xor_ln33_reg_1039, ap_CS_fsm_state14, xor_ln35_reg_1051, ap_CS_fsm_state15, xor_ln37_reg_1063, ap_CS_fsm_state16, xor_ln39_reg_1074, ap_CS_fsm_state17, xor_ln41_reg_1084, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_d0 <= xor_ln41_reg_1084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            expandedKey_d0 <= xor_ln39_reg_1074;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            expandedKey_d0 <= xor_ln37_reg_1063;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            expandedKey_d0 <= xor_ln35_reg_1051;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_d0 <= xor_ln33_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_d0 <= xor_ln31_reg_1027;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_d0 <= expandedKey_load_7_reg_945;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            expandedKey_d0 <= reg_408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            expandedKey_d0 <= key_q0;
        else 
            expandedKey_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    expandedKey_d1_assign_proc : process(reg_403, ap_CS_fsm_state12, expandedKey_load_6_reg_939, xor_ln30_reg_1021, xor_ln32_reg_1033, ap_CS_fsm_state13, xor_ln34_reg_1045, ap_CS_fsm_state14, xor_ln36_reg_1057, ap_CS_fsm_state15, xor_ln38_reg_1069, ap_CS_fsm_state16, xor_ln40_reg_1079, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            expandedKey_d1 <= xor_ln40_reg_1079;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            expandedKey_d1 <= xor_ln38_reg_1069;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            expandedKey_d1 <= xor_ln36_reg_1057;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            expandedKey_d1 <= xor_ln34_reg_1045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            expandedKey_d1 <= xor_ln32_reg_1033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_d1 <= xor_ln30_reg_1021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_d1 <= expandedKey_load_6_reg_939;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            expandedKey_d1 <= reg_403;
        else 
            expandedKey_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    expandedKey_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            expandedKey_we0 <= ap_const_logic_1;
        else 
            expandedKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            expandedKey_we1 <= ap_const_logic_1;
        else 
            expandedKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_414_p2 <= "1" when (ii_0_reg_381 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_431_p2 <= "1" when (ii_1_reg_392 = ap_const_lv4_B) else "0";
    ii_2_fu_467_p2 <= std_logic_vector(unsigned(ii_1_reg_392) + unsigned(ap_const_lv4_1));
    ii_fu_420_p2 <= std_logic_vector(unsigned(ii_0_reg_381) + unsigned(ap_const_lv5_1));
    key_address0 <= zext_ln23_fu_426_p1(10 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_fu_617_p2 <= (shl_ln_reg_840 or ap_const_lv8_1);
    or_ln28_fu_637_p2 <= (shl_ln_reg_840 or ap_const_lv8_2);
    or_ln29_fu_647_p2 <= (shl_ln_reg_840 or ap_const_lv8_3);
    or_ln30_fu_665_p2 <= (shl_ln_reg_840 or ap_const_lv8_4);
    or_ln31_fu_675_p2 <= (shl_ln_reg_840 or ap_const_lv8_5);
    or_ln32_fu_693_p2 <= (shl_ln_reg_840 or ap_const_lv8_6);
    or_ln33_fu_703_p2 <= (shl_ln_reg_840 or ap_const_lv8_7);
    or_ln34_fu_723_p2 <= (shl_ln_reg_840 or ap_const_lv8_8);
    or_ln35_fu_733_p2 <= (shl_ln_reg_840 or ap_const_lv8_9);
    or_ln36_fu_751_p2 <= (shl_ln_reg_840 or ap_const_lv8_A);
    or_ln37_fu_761_p2 <= (shl_ln_reg_840 or ap_const_lv8_B);
    or_ln38_fu_779_p2 <= (shl_ln_reg_840 or ap_const_lv8_C);
    or_ln39_fu_789_p2 <= (shl_ln_reg_840 or ap_const_lv8_D);
    or_ln40_fu_799_p2 <= (shl_ln_reg_840 or ap_const_lv8_E);
    or_ln41_fu_809_p2 <= (shl_ln_reg_840 or ap_const_lv8_F);
    shl_ln_fu_437_p3 <= (ii_1_reg_392 & ap_const_lv4_0);
    xor_ln30_fu_627_p2 <= (reg_403 xor expandedKey_load_8_reg_961);
    xor_ln31_fu_632_p2 <= (reg_408 xor expandedKey_load_9_reg_966);
    xor_ln32_fu_657_p2 <= (expandedKey_load_6_reg_939 xor expandedKey_load_10_reg_981);
    xor_ln33_fu_661_p2 <= (expandedKey_load_7_reg_945 xor expandedKey_load_11_reg_986);
    xor_ln34_fu_685_p2 <= (xor_ln30_reg_1021 xor expandedKey_load_12_reg_1001);
    xor_ln35_fu_689_p2 <= (xor_ln31_reg_1027 xor expandedKey_load_13_reg_1006);
    xor_ln36_fu_713_p2 <= (xor_ln32_reg_1033 xor reg_403);
    xor_ln37_fu_718_p2 <= (xor_ln33_reg_1039 xor reg_408);
    xor_ln38_fu_743_p2 <= (xor_ln34_reg_1045 xor expandedKey_load_reg_889);
    xor_ln39_fu_747_p2 <= (xor_ln35_reg_1051 xor expandedKey_load_1_reg_894);
    xor_ln40_fu_771_p2 <= (xor_ln36_reg_1057 xor expandedKey_load_3_reg_909);
    xor_ln41_fu_775_p2 <= (xor_ln37_reg_1063 xor expandedKey_load_5_reg_924);
    zext_ln23_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_0_reg_381),64));
    zext_ln25_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_445_p2),64));
    zext_ln26_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_473_p2),64));
    zext_ln26_2_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_840),64));
    zext_ln26_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_456_p2),64));
    zext_ln27_1_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_493_p2),64));
    zext_ln27_2_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_617_p2),64));
    zext_ln27_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_483_p2),64));
    zext_ln28_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_513_p2),64));
    zext_ln28_2_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_637_p2),64));
    zext_ln28_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_503_p2),64));
    zext_ln29_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_fu_647_p2),64));
    zext_ln29_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_523_p2),64));
    zext_ln30_1_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_665_p2),64));
    zext_ln30_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_533_p2),64));
    zext_ln31_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_675_p2),64));
    zext_ln31_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_543_p2),64));
    zext_ln32_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln32_fu_693_p2),64));
    zext_ln32_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_553_p2),64));
    zext_ln33_1_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln33_fu_703_p2),64));
    zext_ln33_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_563_p2),64));
    zext_ln34_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln34_fu_723_p2),64));
    zext_ln34_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_573_p2),64));
    zext_ln35_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln35_fu_733_p2),64));
    zext_ln35_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_583_p2),64));
    zext_ln36_1_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_751_p2),64));
    zext_ln36_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_593_p2),64));
    zext_ln37_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln37_fu_761_p2),64));
    zext_ln37_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_603_p2),64));
    zext_ln38_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_779_p2),64));
    zext_ln39_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln39_fu_789_p2),64));
    zext_ln40_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln40_fu_799_p2),64));
    zext_ln41_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln41_fu_809_p2),64));
end behav;
