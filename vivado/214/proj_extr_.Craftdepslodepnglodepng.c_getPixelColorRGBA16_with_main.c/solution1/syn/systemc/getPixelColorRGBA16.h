// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getPixelColorRGBA16_HH_
#define _getPixelColorRGBA16_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getPixelColorRGBA16 : public sc_module {
    // Port declarations 62
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > r_address0;
    sc_out< sc_logic > r_ce0;
    sc_out< sc_logic > r_we0;
    sc_out< sc_lv<16> > r_d0;
    sc_out< sc_lv<10> > g_address0;
    sc_out< sc_logic > g_ce0;
    sc_out< sc_logic > g_we0;
    sc_out< sc_lv<16> > g_d0;
    sc_out< sc_lv<10> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_out< sc_logic > b_we0;
    sc_out< sc_lv<16> > b_d0;
    sc_out< sc_lv<10> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_out< sc_logic > a_we0;
    sc_out< sc_lv<16> > a_d0;
    sc_out< sc_lv<10> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<8> > in_r_q0;
    sc_out< sc_lv<10> > in_r_address1;
    sc_out< sc_logic > in_r_ce1;
    sc_in< sc_lv<8> > in_r_q1;
    sc_in< sc_lv<64> > i;
    sc_out< sc_lv<10> > mode_bitdepth_address0;
    sc_out< sc_logic > mode_bitdepth_ce0;
    sc_in< sc_lv<32> > mode_bitdepth_q0;
    sc_out< sc_lv<10> > mode_colortype_address0;
    sc_out< sc_logic > mode_colortype_ce0;
    sc_in< sc_lv<32> > mode_colortype_q0;
    sc_out< sc_lv<10> > mode_key_r_address0;
    sc_out< sc_logic > mode_key_r_ce0;
    sc_in< sc_lv<32> > mode_key_r_q0;
    sc_out< sc_lv<10> > mode_key_g_address0;
    sc_out< sc_logic > mode_key_g_ce0;
    sc_out< sc_logic > mode_key_g_we0;
    sc_out< sc_lv<32> > mode_key_g_d0;
    sc_in< sc_lv<32> > mode_key_g_q0;
    sc_out< sc_lv<10> > mode_key_g_address1;
    sc_out< sc_logic > mode_key_g_ce1;
    sc_out< sc_logic > mode_key_g_we1;
    sc_out< sc_lv<32> > mode_key_g_d1;
    sc_in< sc_lv<32> > mode_key_g_q1;
    sc_out< sc_lv<10> > mode_key_b_address0;
    sc_out< sc_logic > mode_key_b_ce0;
    sc_out< sc_logic > mode_key_b_we0;
    sc_out< sc_lv<32> > mode_key_b_d0;
    sc_in< sc_lv<32> > mode_key_b_q0;
    sc_out< sc_lv<10> > mode_key_b_address1;
    sc_out< sc_logic > mode_key_b_ce1;
    sc_out< sc_logic > mode_key_b_we1;
    sc_out< sc_lv<32> > mode_key_b_d1;
    sc_in< sc_lv<32> > mode_key_b_q1;
    sc_out< sc_lv<10> > mode_key_defined_address0;
    sc_out< sc_logic > mode_key_defined_ce0;
    sc_in< sc_lv<32> > mode_key_defined_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    getPixelColorRGBA16(sc_module_name name);
    SC_HAS_PROCESS(getPixelColorRGBA16);

    ~getPixelColorRGBA16();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln25_fu_206_p2;
    sc_signal< sc_lv<1> > icmp_ln25_reg_336;
    sc_signal< sc_lv<1> > icmp_ln27_fu_212_p2;
    sc_signal< sc_lv<1> > icmp_ln27_reg_340;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > ap_phi_mux_p_0_phi_fu_195_p6;
    sc_signal< sc_lv<7> > p_0_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln29_fu_229_p1;
    sc_signal< sc_lv<64> > zext_ln29_1_fu_240_p1;
    sc_signal< sc_lv<16> > tmp_fu_245_p3;
    sc_signal< sc_lv<10> > trunc_ln29_fu_218_p1;
    sc_signal< sc_lv<11> > shl_ln_fu_221_p3;
    sc_signal< sc_lv<11> > or_ln29_fu_234_p2;
    sc_signal< sc_lv<32> > zext_ln30_fu_256_p1;
    sc_signal< sc_lv<1> > icmp_ln30_1_fu_266_p2;
    sc_signal< sc_lv<1> > icmp_ln30_fu_260_p2;
    sc_signal< sc_lv<1> > or_ln30_fu_272_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_55;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_phi_fu_195_p6();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_b_d0();
    void thread_b_we0();
    void thread_g_address0();
    void thread_g_ce0();
    void thread_g_d0();
    void thread_g_we0();
    void thread_icmp_ln25_fu_206_p2();
    void thread_icmp_ln27_fu_212_p2();
    void thread_icmp_ln30_1_fu_266_p2();
    void thread_icmp_ln30_fu_260_p2();
    void thread_in_r_address0();
    void thread_in_r_address1();
    void thread_in_r_ce0();
    void thread_in_r_ce1();
    void thread_mode_bitdepth_address0();
    void thread_mode_bitdepth_ce0();
    void thread_mode_colortype_address0();
    void thread_mode_colortype_ce0();
    void thread_mode_key_b_address0();
    void thread_mode_key_b_address1();
    void thread_mode_key_b_ce0();
    void thread_mode_key_b_ce1();
    void thread_mode_key_b_d0();
    void thread_mode_key_b_d1();
    void thread_mode_key_b_we0();
    void thread_mode_key_b_we1();
    void thread_mode_key_defined_address0();
    void thread_mode_key_defined_ce0();
    void thread_mode_key_g_address0();
    void thread_mode_key_g_address1();
    void thread_mode_key_g_ce0();
    void thread_mode_key_g_ce1();
    void thread_mode_key_g_d0();
    void thread_mode_key_g_d1();
    void thread_mode_key_g_we0();
    void thread_mode_key_g_we1();
    void thread_mode_key_r_address0();
    void thread_mode_key_r_ce0();
    void thread_or_ln29_fu_234_p2();
    void thread_or_ln30_fu_272_p2();
    void thread_r_address0();
    void thread_r_ce0();
    void thread_r_d0();
    void thread_r_we0();
    void thread_shl_ln_fu_221_p3();
    void thread_tmp_fu_245_p3();
    void thread_trunc_ln29_fu_218_p1();
    void thread_zext_ln29_1_fu_240_p1();
    void thread_zext_ln29_fu_229_p1();
    void thread_zext_ln30_fu_256_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
