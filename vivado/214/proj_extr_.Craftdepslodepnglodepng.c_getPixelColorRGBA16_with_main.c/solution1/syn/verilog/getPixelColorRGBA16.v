// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getPixelColorRGBA16,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.494000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=136,HLS_VERSION=2019_1}" *)

module getPixelColorRGBA16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        g_address0,
        g_ce0,
        g_we0,
        g_d0,
        b_address0,
        b_ce0,
        b_we0,
        b_d0,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        i,
        mode_bitdepth_address0,
        mode_bitdepth_ce0,
        mode_bitdepth_q0,
        mode_colortype_address0,
        mode_colortype_ce0,
        mode_colortype_q0,
        mode_key_r_address0,
        mode_key_r_ce0,
        mode_key_r_q0,
        mode_key_g_address0,
        mode_key_g_ce0,
        mode_key_g_we0,
        mode_key_g_d0,
        mode_key_g_q0,
        mode_key_g_address1,
        mode_key_g_ce1,
        mode_key_g_we1,
        mode_key_g_d1,
        mode_key_g_q1,
        mode_key_b_address0,
        mode_key_b_ce0,
        mode_key_b_we0,
        mode_key_b_d0,
        mode_key_b_q0,
        mode_key_b_address1,
        mode_key_b_ce1,
        mode_key_b_we1,
        mode_key_b_d1,
        mode_key_b_q1,
        mode_key_defined_address0,
        mode_key_defined_ce0,
        mode_key_defined_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_address0;
output   r_ce0;
output   r_we0;
output  [15:0] r_d0;
output  [9:0] g_address0;
output   g_ce0;
output   g_we0;
output  [15:0] g_d0;
output  [9:0] b_address0;
output   b_ce0;
output   b_we0;
output  [15:0] b_d0;
output  [9:0] a_address0;
output   a_ce0;
output   a_we0;
output  [15:0] a_d0;
output  [9:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [9:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
input  [63:0] i;
output  [9:0] mode_bitdepth_address0;
output   mode_bitdepth_ce0;
input  [31:0] mode_bitdepth_q0;
output  [9:0] mode_colortype_address0;
output   mode_colortype_ce0;
input  [31:0] mode_colortype_q0;
output  [9:0] mode_key_r_address0;
output   mode_key_r_ce0;
input  [31:0] mode_key_r_q0;
output  [9:0] mode_key_g_address0;
output   mode_key_g_ce0;
output   mode_key_g_we0;
output  [31:0] mode_key_g_d0;
input  [31:0] mode_key_g_q0;
output  [9:0] mode_key_g_address1;
output   mode_key_g_ce1;
output   mode_key_g_we1;
output  [31:0] mode_key_g_d1;
input  [31:0] mode_key_g_q1;
output  [9:0] mode_key_b_address0;
output   mode_key_b_ce0;
output   mode_key_b_we0;
output  [31:0] mode_key_b_d0;
input  [31:0] mode_key_b_q0;
output  [9:0] mode_key_b_address1;
output   mode_key_b_ce1;
output   mode_key_b_we1;
output  [31:0] mode_key_b_d1;
input  [31:0] mode_key_b_q1;
output  [9:0] mode_key_defined_address0;
output   mode_key_defined_ce0;
input  [31:0] mode_key_defined_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_ce0;
reg r_we0;
reg g_ce0;
reg g_we0;
reg b_ce0;
reg b_we0;
reg a_ce0;
reg a_we0;
reg in_r_ce0;
reg in_r_ce1;
reg mode_bitdepth_ce0;
reg mode_colortype_ce0;
reg mode_key_r_ce0;
reg mode_key_defined_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_206_p2;
reg   [0:0] icmp_ln25_reg_336;
wire   [0:0] icmp_ln27_fu_212_p2;
reg   [0:0] icmp_ln27_reg_340;
wire    ap_CS_fsm_state3;
reg   [6:0] ap_phi_mux_p_0_phi_fu_195_p6;
reg   [6:0] p_0_reg_191;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln29_fu_229_p1;
wire   [63:0] zext_ln29_1_fu_240_p1;
wire   [15:0] tmp_fu_245_p3;
wire   [9:0] trunc_ln29_fu_218_p1;
wire   [10:0] shl_ln_fu_221_p3;
wire   [10:0] or_ln29_fu_234_p2;
wire   [31:0] zext_ln30_fu_256_p1;
wire   [0:0] icmp_ln30_1_fu_266_p2;
wire   [0:0] icmp_ln30_fu_260_p2;
wire   [0:0] or_ln30_fu_272_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_212_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_206_p2 == 1'd0)))) begin
                p_0_reg_191[0] <= 1'b1;
        p_0_reg_191[2] <= 1'b1;
        p_0_reg_191[4] <= 1'b1;
        p_0_reg_191[6] <= 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
                p_0_reg_191[0] <= 1'b0;
        p_0_reg_191[2] <= 1'b0;
        p_0_reg_191[4] <= 1'b0;
        p_0_reg_191[6] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln25_reg_336 <= icmp_ln25_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln27_reg_340 <= icmp_ln27_fu_212_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
        ap_phi_mux_p_0_phi_fu_195_p6 = 7'd0;
    end else begin
        ap_phi_mux_p_0_phi_fu_195_p6 = p_0_reg_191;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        g_ce0 = 1'b1;
    end else begin
        g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
        g_we0 = 1'b1;
    end else begin
        g_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_bitdepth_ce0 = 1'b1;
    end else begin
        mode_bitdepth_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mode_colortype_ce0 = 1'b1;
    end else begin
        mode_colortype_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mode_key_defined_ce0 = 1'b1;
    end else begin
        mode_key_defined_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mode_key_r_ce0 = 1'b1;
    end else begin
        mode_key_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_reg_340 == 1'd1) & (icmp_ln25_reg_336 == 1'd1))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_206_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = 64'd0;

assign a_d0 = ((or_ln30_fu_272_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = ap_phi_mux_p_0_phi_fu_195_p6;

assign b_address0 = 64'd0;

assign b_d0 = tmp_fu_245_p3;

assign g_address0 = 64'd0;

assign g_d0 = tmp_fu_245_p3;

assign icmp_ln25_fu_206_p2 = ((mode_bitdepth_q0 == 32'd16) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_212_p2 = ((mode_colortype_q0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_1_fu_266_p2 = ((zext_ln30_fu_256_p1 != mode_key_r_q0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_260_p2 = ((mode_key_defined_q0 == 32'd0) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln29_fu_229_p1;

assign in_r_address1 = zext_ln29_1_fu_240_p1;

assign mode_bitdepth_address0 = 64'd0;

assign mode_colortype_address0 = 64'd0;

assign mode_key_b_address0 = 10'd0;

assign mode_key_b_address1 = 10'd0;

assign mode_key_b_ce0 = 1'b0;

assign mode_key_b_ce1 = 1'b0;

assign mode_key_b_d0 = 32'd0;

assign mode_key_b_d1 = 32'd0;

assign mode_key_b_we0 = 1'b0;

assign mode_key_b_we1 = 1'b0;

assign mode_key_defined_address0 = 64'd0;

assign mode_key_g_address0 = 10'd0;

assign mode_key_g_address1 = 10'd0;

assign mode_key_g_ce0 = 1'b0;

assign mode_key_g_ce1 = 1'b0;

assign mode_key_g_d0 = 32'd0;

assign mode_key_g_d1 = 32'd0;

assign mode_key_g_we0 = 1'b0;

assign mode_key_g_we1 = 1'b0;

assign mode_key_r_address0 = 64'd0;

assign or_ln29_fu_234_p2 = (shl_ln_fu_221_p3 | 11'd1);

assign or_ln30_fu_272_p2 = (icmp_ln30_fu_260_p2 | icmp_ln30_1_fu_266_p2);

assign r_address0 = 64'd0;

assign r_d0 = tmp_fu_245_p3;

assign shl_ln_fu_221_p3 = {{trunc_ln29_fu_218_p1}, {1'd0}};

assign tmp_fu_245_p3 = {{in_r_q0}, {in_r_q1}};

assign trunc_ln29_fu_218_p1 = i[9:0];

assign zext_ln29_1_fu_240_p1 = or_ln29_fu_234_p2;

assign zext_ln29_fu_229_p1 = shl_ln_fu_221_p3;

assign zext_ln30_fu_256_p1 = tmp_fu_245_p3;

always @ (posedge ap_clk) begin
    p_0_reg_191[1] <= 1'b0;
    p_0_reg_191[3:3] <= 1'b0;
    p_0_reg_191[5] <= 1'b0;
end

endmodule //getPixelColorRGBA16
