-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getPixelColorRGBA16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    g_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    g_ce0 : OUT STD_LOGIC;
    g_we0 : OUT STD_LOGIC;
    g_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_we0 : OUT STD_LOGIC;
    b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    i : IN STD_LOGIC_VECTOR (63 downto 0);
    mode_bitdepth_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_bitdepth_ce0 : OUT STD_LOGIC;
    mode_bitdepth_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_colortype_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_colortype_ce0 : OUT STD_LOGIC;
    mode_colortype_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_r_ce0 : OUT STD_LOGIC;
    mode_key_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_g_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_g_ce0 : OUT STD_LOGIC;
    mode_key_g_we0 : OUT STD_LOGIC;
    mode_key_g_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mode_key_g_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_g_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_g_ce1 : OUT STD_LOGIC;
    mode_key_g_we1 : OUT STD_LOGIC;
    mode_key_g_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mode_key_g_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_b_ce0 : OUT STD_LOGIC;
    mode_key_b_we0 : OUT STD_LOGIC;
    mode_key_b_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mode_key_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_b_ce1 : OUT STD_LOGIC;
    mode_key_b_we1 : OUT STD_LOGIC;
    mode_key_b_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mode_key_b_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mode_key_defined_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mode_key_defined_ce0 : OUT STD_LOGIC;
    mode_key_defined_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getPixelColorRGBA16 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getPixelColorRGBA16,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.494000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=136,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln25_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_p_0_phi_fu_195_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0_reg_191 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln29_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln29_fu_218_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_221_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln29_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln27_fu_212_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_206_p2 = ap_const_lv1_0)))) then 
                p_0_reg_191(0) <= '1';
                p_0_reg_191(2) <= '1';
                p_0_reg_191(4) <= '1';
                p_0_reg_191(6) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
                p_0_reg_191(0) <= '0';
                p_0_reg_191(2) <= '0';
                p_0_reg_191(4) <= '0';
                p_0_reg_191(6) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln25_reg_336 <= icmp_ln25_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln27_reg_340 <= icmp_ln27_fu_212_p2;
            end if;
        end if;
    end process;
    p_0_reg_191(1) <= '0';
    p_0_reg_191(3 downto 3) <= "0";
    p_0_reg_191(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln25_fu_206_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_206_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= 
        ap_const_lv16_FFFF when (or_ln30_fu_272_p2(0) = '1') else 
        ap_const_lv16_0;

    a_we0_assign_proc : process(icmp_ln25_reg_336, icmp_ln27_reg_340, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_195_p6_assign_proc : process(icmp_ln25_reg_336, icmp_ln27_reg_340, p_0_reg_191, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
            ap_phi_mux_p_0_phi_fu_195_p6 <= ap_const_lv7_0;
        else 
            ap_phi_mux_p_0_phi_fu_195_p6 <= p_0_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_phi_fu_195_p6),32));
    b_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_d0 <= tmp_fu_245_p3;

    b_we0_assign_proc : process(icmp_ln25_reg_336, icmp_ln27_reg_340, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    g_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    g_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            g_ce0 <= ap_const_logic_1;
        else 
            g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    g_d0 <= tmp_fu_245_p3;

    g_we0_assign_proc : process(icmp_ln25_reg_336, icmp_ln27_reg_340, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
            g_we0 <= ap_const_logic_1;
        else 
            g_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_fu_206_p2 <= "1" when (mode_bitdepth_q0 = ap_const_lv32_10) else "0";
    icmp_ln27_fu_212_p2 <= "1" when (mode_colortype_q0 = ap_const_lv32_0) else "0";
    icmp_ln30_1_fu_266_p2 <= "0" when (zext_ln30_fu_256_p1 = mode_key_r_q0) else "1";
    icmp_ln30_fu_260_p2 <= "1" when (mode_key_defined_q0 = ap_const_lv32_0) else "0";
    in_r_address0 <= zext_ln29_fu_229_p1(10 - 1 downto 0);
    in_r_address1 <= zext_ln29_1_fu_240_p1(10 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mode_bitdepth_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    mode_bitdepth_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_bitdepth_ce0 <= ap_const_logic_1;
        else 
            mode_bitdepth_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_colortype_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    mode_colortype_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mode_colortype_ce0 <= ap_const_logic_1;
        else 
            mode_colortype_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_key_b_address0 <= ap_const_lv10_0;
    mode_key_b_address1 <= ap_const_lv10_0;
    mode_key_b_ce0 <= ap_const_logic_0;
    mode_key_b_ce1 <= ap_const_logic_0;
    mode_key_b_d0 <= ap_const_lv32_0;
    mode_key_b_d1 <= ap_const_lv32_0;
    mode_key_b_we0 <= ap_const_logic_0;
    mode_key_b_we1 <= ap_const_logic_0;
    mode_key_defined_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    mode_key_defined_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mode_key_defined_ce0 <= ap_const_logic_1;
        else 
            mode_key_defined_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_key_g_address0 <= ap_const_lv10_0;
    mode_key_g_address1 <= ap_const_lv10_0;
    mode_key_g_ce0 <= ap_const_logic_0;
    mode_key_g_ce1 <= ap_const_logic_0;
    mode_key_g_d0 <= ap_const_lv32_0;
    mode_key_g_d1 <= ap_const_lv32_0;
    mode_key_g_we0 <= ap_const_logic_0;
    mode_key_g_we1 <= ap_const_logic_0;
    mode_key_r_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    mode_key_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mode_key_r_ce0 <= ap_const_logic_1;
        else 
            mode_key_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln29_fu_234_p2 <= (shl_ln_fu_221_p3 or ap_const_lv11_1);
    or_ln30_fu_272_p2 <= (icmp_ln30_fu_260_p2 or icmp_ln30_1_fu_266_p2);
    r_address0 <= ap_const_lv64_0(10 - 1 downto 0);

    r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_d0 <= tmp_fu_245_p3;

    r_we0_assign_proc : process(icmp_ln25_reg_336, icmp_ln27_reg_340, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_reg_340 = ap_const_lv1_1) and (icmp_ln25_reg_336 = ap_const_lv1_1))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_221_p3 <= (trunc_ln29_fu_218_p1 & ap_const_lv1_0);
    tmp_fu_245_p3 <= (in_r_q0 & in_r_q1);
    trunc_ln29_fu_218_p1 <= i(10 - 1 downto 0);
    zext_ln29_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_fu_234_p2),64));
    zext_ln29_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_221_p3),64));
    zext_ln30_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_245_p3),32));
end behav;
