// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "felem_reduce.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic felem_reduce::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic felem_reduce::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> felem_reduce::ap_ST_fsm_state1 = "1";
const sc_lv<6> felem_reduce::ap_ST_fsm_state2 = "10";
const sc_lv<6> felem_reduce::ap_ST_fsm_state3 = "100";
const sc_lv<6> felem_reduce::ap_ST_fsm_state4 = "1000";
const sc_lv<6> felem_reduce::ap_ST_fsm_state5 = "10000";
const sc_lv<6> felem_reduce::ap_ST_fsm_state6 = "100000";
const sc_lv<32> felem_reduce::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> felem_reduce::ap_const_lv32_1 = "1";
const sc_lv<32> felem_reduce::ap_const_lv32_2 = "10";
const sc_lv<32> felem_reduce::ap_const_lv32_3 = "11";
const sc_lv<32> felem_reduce::ap_const_lv32_4 = "100";
const sc_lv<64> felem_reduce::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> felem_reduce::ap_const_lv64_1 = "1";
const sc_lv<64> felem_reduce::ap_const_lv64_2 = "10";
const sc_lv<64> felem_reduce::ap_const_lv64_3 = "11";
const sc_lv<64> felem_reduce::ap_const_lv64_4 = "100";
const sc_lv<64> felem_reduce::ap_const_lv64_5 = "101";
const sc_lv<64> felem_reduce::ap_const_lv64_6 = "110";
const sc_lv<64> felem_reduce::ap_const_lv64_7 = "111";
const sc_lv<64> felem_reduce::ap_const_lv64_8 = "1000";
const sc_lv<32> felem_reduce::ap_const_lv32_5 = "101";
const sc_lv<32> felem_reduce::ap_const_lv32_1F = "11111";
const sc_lv<2> felem_reduce::ap_const_lv2_3 = "11";
const sc_lv<2> felem_reduce::ap_const_lv2_0 = "00";
const sc_lv<1> felem_reduce::ap_const_lv1_0 = "0";
const bool felem_reduce::ap_const_boolean_1 = true;

felem_reduce::felem_reduce(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln78_fu_318_p2);
    sensitive << ( reg_265 );
    sensitive << ( select_ln77_fu_310_p3 );

    SC_METHOD(thread_add_ln87_1_fu_352_p2);
    sensitive << ( select_ln45_reg_392 );
    sensitive << ( select_ln87_fu_344_p3 );

    SC_METHOD(thread_add_ln87_fu_361_p2);
    sensitive << ( sext_ln82_fu_332_p1 );
    sensitive << ( sext_ln87_fu_357_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_227_p3);
    sensitive << ( in_r_q0 );

    SC_METHOD(thread_grp_fu_235_p3);
    sensitive << ( grp_fu_227_p3 );

    SC_METHOD(thread_grp_fu_243_p3);
    sensitive << ( in_r_q1 );

    SC_METHOD(thread_grp_fu_251_p3);
    sensitive << ( grp_fu_243_p3 );

    SC_METHOD(thread_grp_fu_259_p2);
    sensitive << ( grp_fu_251_p3 );
    sensitive << ( grp_fu_235_p3 );

    SC_METHOD(thread_grp_fu_269_p2);
    sensitive << ( reg_265 );
    sensitive << ( grp_fu_235_p3 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_r_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_r_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( sext_ln45_fu_275_p1 );
    sensitive << ( sext_ln49_fu_280_p1 );
    sensitive << ( sext_ln57_fu_290_p1 );
    sensitive << ( sext_ln65_fu_300_p1 );
    sensitive << ( sext_ln87_1_fu_367_p1 );

    SC_METHOD(thread_out_r_d1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( sext_ln53_fu_285_p1 );
    sensitive << ( sext_ln61_fu_295_p1 );
    sensitive << ( sext_ln69_fu_305_p1 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_overflow2_fu_324_p3);
    sensitive << ( grp_fu_227_p3 );

    SC_METHOD(thread_select_ln77_fu_310_p3);
    sensitive << ( grp_fu_227_p3 );

    SC_METHOD(thread_select_ln87_fu_344_p3);
    sensitive << ( tmp_9_fu_336_p3 );

    SC_METHOD(thread_sext_ln45_fu_275_p1);
    sensitive << ( grp_fu_259_p2 );

    SC_METHOD(thread_sext_ln49_fu_280_p1);
    sensitive << ( grp_fu_269_p2 );

    SC_METHOD(thread_sext_ln53_fu_285_p1);
    sensitive << ( grp_fu_259_p2 );

    SC_METHOD(thread_sext_ln57_fu_290_p1);
    sensitive << ( grp_fu_269_p2 );

    SC_METHOD(thread_sext_ln61_fu_295_p1);
    sensitive << ( grp_fu_259_p2 );

    SC_METHOD(thread_sext_ln65_fu_300_p1);
    sensitive << ( grp_fu_269_p2 );

    SC_METHOD(thread_sext_ln69_fu_305_p1);
    sensitive << ( grp_fu_259_p2 );

    SC_METHOD(thread_sext_ln82_fu_332_p1);
    sensitive << ( overflow2_fu_324_p3 );

    SC_METHOD(thread_sext_ln87_1_fu_367_p1);
    sensitive << ( add_ln87_fu_361_p2 );

    SC_METHOD(thread_sext_ln87_fu_357_p1);
    sensitive << ( add_ln87_1_fu_352_p2 );

    SC_METHOD(thread_tmp_9_fu_336_p3);
    sensitive << ( add_ln78_fu_318_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "felem_reduce_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
    sc_trace(mVcdFile, out_r_address1, "(port)out_r_address1");
    sc_trace(mVcdFile, out_r_ce1, "(port)out_r_ce1");
    sc_trace(mVcdFile, out_r_we1, "(port)out_r_we1");
    sc_trace(mVcdFile, out_r_d1, "(port)out_r_d1");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, in_r_address1, "(port)in_r_address1");
    sc_trace(mVcdFile, in_r_ce1, "(port)in_r_ce1");
    sc_trace(mVcdFile, in_r_q1, "(port)in_r_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_251_p3, "grp_fu_251_p3");
    sc_trace(mVcdFile, reg_265, "reg_265");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_235_p3, "grp_fu_235_p3");
    sc_trace(mVcdFile, select_ln45_reg_392, "select_ln45_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, sext_ln45_fu_275_p1, "sext_ln45_fu_275_p1");
    sc_trace(mVcdFile, sext_ln49_fu_280_p1, "sext_ln49_fu_280_p1");
    sc_trace(mVcdFile, sext_ln53_fu_285_p1, "sext_ln53_fu_285_p1");
    sc_trace(mVcdFile, sext_ln57_fu_290_p1, "sext_ln57_fu_290_p1");
    sc_trace(mVcdFile, sext_ln61_fu_295_p1, "sext_ln61_fu_295_p1");
    sc_trace(mVcdFile, sext_ln65_fu_300_p1, "sext_ln65_fu_300_p1");
    sc_trace(mVcdFile, sext_ln69_fu_305_p1, "sext_ln69_fu_305_p1");
    sc_trace(mVcdFile, sext_ln87_1_fu_367_p1, "sext_ln87_1_fu_367_p1");
    sc_trace(mVcdFile, grp_fu_227_p3, "grp_fu_227_p3");
    sc_trace(mVcdFile, grp_fu_243_p3, "grp_fu_243_p3");
    sc_trace(mVcdFile, grp_fu_259_p2, "grp_fu_259_p2");
    sc_trace(mVcdFile, grp_fu_269_p2, "grp_fu_269_p2");
    sc_trace(mVcdFile, select_ln77_fu_310_p3, "select_ln77_fu_310_p3");
    sc_trace(mVcdFile, overflow2_fu_324_p3, "overflow2_fu_324_p3");
    sc_trace(mVcdFile, add_ln78_fu_318_p2, "add_ln78_fu_318_p2");
    sc_trace(mVcdFile, tmp_9_fu_336_p3, "tmp_9_fu_336_p3");
    sc_trace(mVcdFile, select_ln87_fu_344_p3, "select_ln87_fu_344_p3");
    sc_trace(mVcdFile, add_ln87_1_fu_352_p2, "add_ln87_1_fu_352_p2");
    sc_trace(mVcdFile, sext_ln82_fu_332_p1, "sext_ln82_fu_332_p1");
    sc_trace(mVcdFile, sext_ln87_fu_357_p1, "sext_ln87_fu_357_p1");
    sc_trace(mVcdFile, add_ln87_fu_361_p2, "add_ln87_fu_361_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("felem_reduce.hdltvin.dat");
    mHdltvoutHandle.open("felem_reduce.hdltvout.dat");
}

felem_reduce::~felem_reduce() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void felem_reduce::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        reg_265 = grp_fu_251_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        select_ln45_reg_392 = grp_fu_235_p3.read();
    }
}

void felem_reduce::thread_add_ln78_fu_318_p2() {
    add_ln78_fu_318_p2 = (!reg_265.read().is_01() || !select_ln77_fu_310_p3.read().is_01())? sc_lv<2>(): (sc_biguint<2>(reg_265.read()) + sc_biguint<2>(select_ln77_fu_310_p3.read()));
}

void felem_reduce::thread_add_ln87_1_fu_352_p2() {
    add_ln87_1_fu_352_p2 = (!select_ln87_fu_344_p3.read().is_01() || !select_ln45_reg_392.read().is_01())? sc_lv<2>(): (sc_biguint<2>(select_ln87_fu_344_p3.read()) + sc_biguint<2>(select_ln45_reg_392.read()));
}

void felem_reduce::thread_add_ln87_fu_361_p2() {
    add_ln87_fu_361_p2 = (!sext_ln82_fu_332_p1.read().is_01() || !sext_ln87_fu_357_p1.read().is_01())? sc_lv<3>(): (sc_bigint<3>(sext_ln82_fu_332_p1.read()) + sc_bigint<3>(sext_ln87_fu_357_p1.read()));
}

void felem_reduce::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void felem_reduce::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void felem_reduce::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void felem_reduce::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void felem_reduce::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void felem_reduce::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void felem_reduce::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void felem_reduce::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void felem_reduce::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void felem_reduce::thread_grp_fu_227_p3() {
    grp_fu_227_p3 = in_r_q0.read().range(31, 31);
}

void felem_reduce::thread_grp_fu_235_p3() {
    grp_fu_235_p3 = (!grp_fu_227_p3.read()[0].is_01())? sc_lv<2>(): ((grp_fu_227_p3.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void felem_reduce::thread_grp_fu_243_p3() {
    grp_fu_243_p3 = in_r_q1.read().range(31, 31);
}

void felem_reduce::thread_grp_fu_251_p3() {
    grp_fu_251_p3 = (!grp_fu_243_p3.read()[0].is_01())? sc_lv<2>(): ((grp_fu_243_p3.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void felem_reduce::thread_grp_fu_259_p2() {
    grp_fu_259_p2 = (!grp_fu_251_p3.read().is_01() || !grp_fu_235_p3.read().is_01())? sc_lv<2>(): (sc_biguint<2>(grp_fu_251_p3.read()) + sc_biguint<2>(grp_fu_235_p3.read()));
}

void felem_reduce::thread_grp_fu_269_p2() {
    grp_fu_269_p2 = (!grp_fu_235_p3.read().is_01() || !reg_265.read().is_01())? sc_lv<2>(): (sc_biguint<2>(grp_fu_235_p3.read()) + sc_biguint<2>(reg_265.read()));
}

void felem_reduce::thread_in_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        in_r_address0 =  (sc_lv<10>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_address0 =  (sc_lv<10>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_address0 =  (sc_lv<10>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_address0 =  (sc_lv<10>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_r_address0 =  (sc_lv<10>) (ap_const_lv64_0);
    } else {
        in_r_address0 = "XXXXXXXXXX";
    }
}

void felem_reduce::thread_in_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_address1 =  (sc_lv<10>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_address1 =  (sc_lv<10>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_address1 =  (sc_lv<10>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_r_address1 =  (sc_lv<10>) (ap_const_lv64_1);
    } else {
        in_r_address1 = "XXXXXXXXXX";
    }
}

void felem_reduce::thread_in_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void felem_reduce::thread_in_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        in_r_ce1 = ap_const_logic_1;
    } else {
        in_r_ce1 = ap_const_logic_0;
    }
}

void felem_reduce::thread_out_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_r_address0 =  (sc_lv<10>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_address0 =  (sc_lv<10>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_address0 =  (sc_lv<10>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_address0 =  (sc_lv<10>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_address0 =  (sc_lv<10>) (ap_const_lv64_2);
    } else {
        out_r_address0 = "XXXXXXXXXX";
    }
}

void felem_reduce::thread_out_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_address1 =  (sc_lv<10>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_address1 =  (sc_lv<10>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_address1 =  (sc_lv<10>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_address1 =  (sc_lv<10>) (ap_const_lv64_0);
    } else {
        out_r_address1 = "XXXXXXXXXX";
    }
}

void felem_reduce::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void felem_reduce::thread_out_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        out_r_ce1 = ap_const_logic_1;
    } else {
        out_r_ce1 = ap_const_logic_0;
    }
}

void felem_reduce::thread_out_r_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_r_d0 = sext_ln87_1_fu_367_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_d0 = sext_ln65_fu_300_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_d0 = sext_ln57_fu_290_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_d0 = sext_ln49_fu_280_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_d0 = sext_ln45_fu_275_p1.read();
    } else {
        out_r_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void felem_reduce::thread_out_r_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_r_d1 = sext_ln69_fu_305_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_d1 = sext_ln61_fu_295_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_d1 = sext_ln53_fu_285_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        out_r_d1 = ap_const_lv32_0;
    } else {
        out_r_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void felem_reduce::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void felem_reduce::thread_out_r_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        out_r_we1 = ap_const_logic_1;
    } else {
        out_r_we1 = ap_const_logic_0;
    }
}

void felem_reduce::thread_overflow2_fu_324_p3() {
    overflow2_fu_324_p3 = esl_concat<1,1>(grp_fu_227_p3.read(), ap_const_lv1_0);
}

void felem_reduce::thread_select_ln77_fu_310_p3() {
    select_ln77_fu_310_p3 = (!grp_fu_227_p3.read()[0].is_01())? sc_lv<2>(): ((grp_fu_227_p3.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void felem_reduce::thread_select_ln87_fu_344_p3() {
    select_ln87_fu_344_p3 = (!tmp_9_fu_336_p3.read()[0].is_01())? sc_lv<2>(): ((tmp_9_fu_336_p3.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void felem_reduce::thread_sext_ln45_fu_275_p1() {
    sext_ln45_fu_275_p1 = esl_sext<32,2>(grp_fu_259_p2.read());
}

void felem_reduce::thread_sext_ln49_fu_280_p1() {
    sext_ln49_fu_280_p1 = esl_sext<32,2>(grp_fu_269_p2.read());
}

void felem_reduce::thread_sext_ln53_fu_285_p1() {
    sext_ln53_fu_285_p1 = esl_sext<32,2>(grp_fu_259_p2.read());
}

void felem_reduce::thread_sext_ln57_fu_290_p1() {
    sext_ln57_fu_290_p1 = esl_sext<32,2>(grp_fu_269_p2.read());
}

void felem_reduce::thread_sext_ln61_fu_295_p1() {
    sext_ln61_fu_295_p1 = esl_sext<32,2>(grp_fu_259_p2.read());
}

void felem_reduce::thread_sext_ln65_fu_300_p1() {
    sext_ln65_fu_300_p1 = esl_sext<32,2>(grp_fu_269_p2.read());
}

void felem_reduce::thread_sext_ln69_fu_305_p1() {
    sext_ln69_fu_305_p1 = esl_sext<32,2>(grp_fu_259_p2.read());
}

void felem_reduce::thread_sext_ln82_fu_332_p1() {
    sext_ln82_fu_332_p1 = esl_sext<3,2>(overflow2_fu_324_p3.read());
}

void felem_reduce::thread_sext_ln87_1_fu_367_p1() {
    sext_ln87_1_fu_367_p1 = esl_sext<32,3>(add_ln87_fu_361_p2.read());
}

void felem_reduce::thread_sext_ln87_fu_357_p1() {
    sext_ln87_fu_357_p1 = esl_sext<3,2>(add_ln87_1_fu_352_p2.read());
}

void felem_reduce::thread_tmp_9_fu_336_p3() {
    tmp_9_fu_336_p3 = add_ln78_fu_318_p2.read().range(1, 1);
}

void felem_reduce::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void felem_reduce::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address1\" :  \"" << out_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce1\" :  \"" << out_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we1\" :  \"" << out_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d1\" :  \"" << out_r_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address1\" :  \"" << in_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce1\" :  \"" << in_r_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q1\" :  \"" << in_r_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

