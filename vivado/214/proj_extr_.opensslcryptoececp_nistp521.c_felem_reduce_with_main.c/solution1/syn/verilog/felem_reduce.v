// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="felem_reduce,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.343000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=278,HLS_VERSION=2019_1}" *)

module felem_reduce (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
output  [9:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [31:0] out_r_d1;
output  [9:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [9:0] in_r_address1;
output   in_r_ce1;
input  [31:0] in_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[31:0] out_r_d0;
reg[9:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[31:0] out_r_d1;
reg[9:0] in_r_address0;
reg in_r_ce0;
reg[9:0] in_r_address1;
reg in_r_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] grp_fu_251_p3;
reg   [1:0] reg_265;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [1:0] grp_fu_235_p3;
reg   [1:0] select_ln45_reg_392;
wire    ap_CS_fsm_state6;
wire  signed [31:0] sext_ln45_fu_275_p1;
wire  signed [31:0] sext_ln49_fu_280_p1;
wire  signed [31:0] sext_ln53_fu_285_p1;
wire  signed [31:0] sext_ln57_fu_290_p1;
wire  signed [31:0] sext_ln61_fu_295_p1;
wire  signed [31:0] sext_ln65_fu_300_p1;
wire  signed [31:0] sext_ln69_fu_305_p1;
wire  signed [31:0] sext_ln87_1_fu_367_p1;
wire   [0:0] grp_fu_227_p3;
wire   [0:0] grp_fu_243_p3;
wire   [1:0] grp_fu_259_p2;
wire   [1:0] grp_fu_269_p2;
wire   [1:0] select_ln77_fu_310_p3;
wire   [1:0] overflow2_fu_324_p3;
wire   [1:0] add_ln78_fu_318_p2;
wire   [0:0] tmp_9_fu_336_p3;
wire   [1:0] select_ln87_fu_344_p3;
wire   [1:0] add_ln87_1_fu_352_p2;
wire  signed [2:0] sext_ln82_fu_332_p1;
wire  signed [2:0] sext_ln87_fu_357_p1;
wire   [2:0] add_ln87_fu_361_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_265 <= grp_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln45_reg_392 <= grp_fu_235_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address0 = 64'd0;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address1 = 64'd1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address0 = 64'd2;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_address1 = 64'd0;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_d0 = sext_ln87_1_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d0 = sext_ln65_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d0 = sext_ln57_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_d0 = sext_ln49_fu_280_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_d0 = sext_ln45_fu_275_p1;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_r_d1 = sext_ln69_fu_305_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_d1 = sext_ln61_fu_295_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_d1 = sext_ln53_fu_285_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_d1 = 32'd0;
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_318_p2 = (reg_265 + select_ln77_fu_310_p3);

assign add_ln87_1_fu_352_p2 = (select_ln87_fu_344_p3 + select_ln45_reg_392);

assign add_ln87_fu_361_p2 = ($signed(sext_ln82_fu_332_p1) + $signed(sext_ln87_fu_357_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_227_p3 = in_r_q0[32'd31];

assign grp_fu_235_p3 = ((grp_fu_227_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign grp_fu_243_p3 = in_r_q1[32'd31];

assign grp_fu_251_p3 = ((grp_fu_243_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign grp_fu_259_p2 = (grp_fu_251_p3 + grp_fu_235_p3);

assign grp_fu_269_p2 = (grp_fu_235_p3 + reg_265);

assign overflow2_fu_324_p3 = {{grp_fu_227_p3}, {1'd0}};

assign select_ln77_fu_310_p3 = ((grp_fu_227_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln87_fu_344_p3 = ((tmp_9_fu_336_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign sext_ln45_fu_275_p1 = $signed(grp_fu_259_p2);

assign sext_ln49_fu_280_p1 = $signed(grp_fu_269_p2);

assign sext_ln53_fu_285_p1 = $signed(grp_fu_259_p2);

assign sext_ln57_fu_290_p1 = $signed(grp_fu_269_p2);

assign sext_ln61_fu_295_p1 = $signed(grp_fu_259_p2);

assign sext_ln65_fu_300_p1 = $signed(grp_fu_269_p2);

assign sext_ln69_fu_305_p1 = $signed(grp_fu_259_p2);

assign sext_ln82_fu_332_p1 = $signed(overflow2_fu_324_p3);

assign sext_ln87_1_fu_367_p1 = $signed(add_ln87_fu_361_p2);

assign sext_ln87_fu_357_p1 = $signed(add_ln87_1_fu_352_p2);

assign tmp_9_fu_336_p3 = add_ln78_fu_318_p2[32'd1];

endmodule //felem_reduce
