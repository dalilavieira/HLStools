-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity imsttfb_check_var is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    var_bits_per_pixel : IN STD_LOGIC_VECTOR (31 downto 0);
    var_xres_virtual : IN STD_LOGIC_VECTOR (31 downto 0);
    var_xres : IN STD_LOGIC_VECTOR (31 downto 0);
    var_yres_virtual_i : IN STD_LOGIC_VECTOR (31 downto 0);
    var_yres_virtual_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_yres_virtual_o_ap_vld : OUT STD_LOGIC;
    var_yres : IN STD_LOGIC_VECTOR (31 downto 0);
    var_vmode : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_vmode_ap_vld : OUT STD_LOGIC;
    var_height : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_height_ap_vld : OUT STD_LOGIC;
    var_width : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_width_ap_vld : OUT STD_LOGIC;
    var_left_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_left_margin_ap_vld : OUT STD_LOGIC;
    var_right_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_right_margin_ap_vld : OUT STD_LOGIC;
    var_upper_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_upper_margin_ap_vld : OUT STD_LOGIC;
    var_lower_margin : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_lower_margin_ap_vld : OUT STD_LOGIC;
    var_hsync_len : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_hsync_len_ap_vld : OUT STD_LOGIC;
    var_vsync_len : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_vsync_len_ap_vld : OUT STD_LOGIC;
    var_transp_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_transp_offset_ap_vld : OUT STD_LOGIC;
    var_transp_length : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_transp_length_ap_vld : OUT STD_LOGIC;
    var_transp_msb_right : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_transp_msb_right_ap_vld : OUT STD_LOGIC;
    var_blue_length : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_blue_length_ap_vld : OUT STD_LOGIC;
    var_blue_msb_right : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_blue_msb_right_ap_vld : OUT STD_LOGIC;
    var_blue_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_blue_offset_ap_vld : OUT STD_LOGIC;
    var_green_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_green_offset_ap_vld : OUT STD_LOGIC;
    var_green_length_i : IN STD_LOGIC_VECTOR (31 downto 0);
    var_green_length_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_green_length_o_ap_vld : OUT STD_LOGIC;
    var_green_msb_right : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_green_msb_right_ap_vld : OUT STD_LOGIC;
    var_red_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_red_offset_ap_vld : OUT STD_LOGIC;
    var_red_length : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_red_length_ap_vld : OUT STD_LOGIC;
    var_red_msb_right : OUT STD_LOGIC_VECTOR (31 downto 0);
    var_red_msb_right_ap_vld : OUT STD_LOGIC;
    var_nonstd : IN STD_LOGIC_VECTOR (31 downto 0);
    info_fix_smem_len : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of imsttfb_check_var is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "imsttfb_check_var,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.126000,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=993,HLS_SYN_LUT=1281,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal var_bits_per_pixel_r_read_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_9_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal var_yres_virtual_rea_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_1_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln41_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_2_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_2_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln90_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln57_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln93_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal empty_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_8_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_7_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_1_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_1_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_382_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln41_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_396_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln41_1_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_2_fu_412_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln41_3_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_3_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln90_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_440_ap_start : STD_LOGIC;
    signal grp_fu_440_ap_done : STD_LOGIC;
    signal grp_fu_445_ap_start : STD_LOGIC;
    signal grp_fu_445_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal mul_ln41_fu_396_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component imsttfb_check_var_sdiv_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imsttfb_check_var_sdiv_32ns_32s_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    imsttfb_check_var_sdiv_32ns_32ns_32_36_seq_1_U1 : component imsttfb_check_var_sdiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_440_ap_start,
        done => grp_fu_440_ap_done,
        din0 => grp_fu_440_p0,
        din1 => var_bits_per_pixel,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    imsttfb_check_var_sdiv_32ns_32s_32_36_seq_1_U2 : component imsttfb_check_var_sdiv_32ns_32s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_445_ap_start,
        done => grp_fu_445_ap_done,
        din0 => grp_fu_440_p2,
        din1 => var_xres_virtual,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_9_reg_468 <= empty_9_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln34_fu_364_p2 = ap_const_lv1_0) and (empty_9_fu_358_p2 = ap_const_lv1_1))) then
                icmp_ln34_1_reg_500 <= icmp_ln34_1_fu_370_p2;
                var_yres_virtual_rea_reg_487 <= var_yres_virtual_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln34_1_fu_370_p2 = ap_const_lv1_0) and (icmp_ln34_fu_364_p2 = ap_const_lv1_0) and (empty_9_fu_358_p2 = ap_const_lv1_1))) then
                icmp_ln34_2_reg_504 <= icmp_ln34_2_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_9_fu_358_p2 = ap_const_lv1_1))) then
                icmp_ln34_reg_483 <= icmp_ln34_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_reg_524 = ap_const_lv1_0))) then
                icmp_ln41_1_reg_533 <= icmp_ln41_1_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln41_reg_524 <= icmp_ln41_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0))) then
                icmp_ln90_reg_540 <= icmp_ln90_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln41_fu_406_p2 = ap_const_lv1_0))) then
                mul_ln41_2_reg_528 <= mul_ln41_2_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln34_1_fu_370_p2 = ap_const_lv1_0) and (icmp_ln34_fu_364_p2 = ap_const_lv1_0) and (icmp_ln34_2_fu_376_p2 = ap_const_lv1_1) and (empty_9_fu_358_p2 = ap_const_lv1_1))) then
                mul_ln41_reg_513 <= mul_ln41_fu_396_p2;
                    zext_ln41_reg_508(28 downto 0) <= zext_ln41_fu_392_p1(28 downto 0);
            end if;
        end if;
    end process;
    zext_ln41_reg_508(31 downto 29) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, empty_9_fu_358_p2, icmp_ln34_fu_364_p2, icmp_ln34_1_fu_370_p2, icmp_ln34_2_fu_376_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln90_fu_431_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((empty_9_fu_358_p2 = ap_const_lv1_0) or ((icmp_ln34_fu_364_p2 = ap_const_lv1_1) or ((icmp_ln34_2_fu_376_p2 = ap_const_lv1_0) or (icmp_ln34_1_fu_370_p2 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln34_1_fu_370_p2 = ap_const_lv1_0) and (icmp_ln34_fu_364_p2 = ap_const_lv1_0) and (icmp_ln34_2_fu_376_p2 = ap_const_lv1_1) and (empty_9_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln41_reg_524 = ap_const_lv1_1) or ((icmp_ln90_fu_431_p2 = ap_const_lv1_0) or (icmp_ln41_1_fu_420_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);

    ap_done_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    empty_4_fu_328_p2 <= "1" when (var_bits_per_pixel = ap_const_lv32_18) else "0";
    empty_5_fu_334_p2 <= (empty_fu_322_p2 or empty_4_fu_328_p2);
    empty_6_fu_340_p2 <= "1" when (var_bits_per_pixel = ap_const_lv32_10) else "0";
    empty_7_fu_346_p2 <= (empty_6_fu_340_p2 or empty_5_fu_334_p2);
    empty_8_fu_352_p2 <= "1" when (var_bits_per_pixel = ap_const_lv32_8) else "0";
    empty_9_fu_358_p2 <= (empty_8_fu_352_p2 or empty_7_fu_346_p2);
    empty_fu_322_p2 <= "1" when (var_bits_per_pixel = ap_const_lv32_20) else "0";

    grp_fu_440_ap_start_assign_proc : process(icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln90_fu_431_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln90_fu_431_p2 = ap_const_lv1_1))) then 
            grp_fu_440_ap_start <= ap_const_logic_1;
        else 
            grp_fu_440_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_440_p0 <= std_logic_vector(shift_left(unsigned(info_fix_smem_len),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    grp_fu_445_ap_start_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_445_ap_start <= ap_const_logic_1;
        else 
            grp_fu_445_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln34_1_fu_370_p0 <= var_yres_virtual_i;
    icmp_ln34_1_fu_370_p1 <= var_yres;
    icmp_ln34_1_fu_370_p2 <= "1" when (signed(icmp_ln34_1_fu_370_p0) < signed(icmp_ln34_1_fu_370_p1)) else "0";
    icmp_ln34_2_fu_376_p2 <= "1" when (var_nonstd = ap_const_lv32_0) else "0";
    icmp_ln34_fu_364_p0 <= var_xres_virtual;
    icmp_ln34_fu_364_p1 <= var_xres;
    icmp_ln34_fu_364_p2 <= "1" when (signed(icmp_ln34_fu_364_p0) < signed(icmp_ln34_fu_364_p1)) else "0";
    icmp_ln41_1_fu_420_p2 <= "1" when (signed(mul_ln41_3_fu_416_p2) > signed(info_fix_smem_len)) else "0";
    icmp_ln41_fu_406_p2 <= "1" when (signed(mul_ln41_1_fu_402_p2) > signed(info_fix_smem_len)) else "0";
    icmp_ln57_fu_425_p2 <= "1" when (var_green_length_i = ap_const_lv32_6) else "0";
    icmp_ln90_fu_431_p0 <= var_yres;
    icmp_ln90_fu_431_p2 <= "1" when (icmp_ln90_fu_431_p0 = var_yres_virtual_rea_reg_487) else "0";
    icmp_ln93_fu_450_p2 <= "1" when (signed(grp_fu_445_p2) < signed(var_yres_virtual_rea_reg_487)) else "0";
    mul_ln41_1_fu_402_p1 <= var_xres;
    mul_ln41_1_fu_402_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln41_reg_513) * signed(mul_ln41_1_fu_402_p1))), 32));
    mul_ln41_2_fu_412_p1 <= zext_ln41_reg_508(29 - 1 downto 0);
    mul_ln41_2_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(var_yres_virtual_rea_reg_487) * signed('0' &mul_ln41_2_fu_412_p1))), 32));
    mul_ln41_3_fu_416_p1 <= var_xres_virtual;
    mul_ln41_3_fu_416_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln41_2_reg_528) * signed(mul_ln41_3_fu_416_p1))), 32));
    mul_ln41_fu_396_p0 <= var_yres;
    mul_ln41_fu_396_p1 <= mul_ln41_fu_396_p10(29 - 1 downto 0);
    mul_ln41_fu_396_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_382_p4),32));
    mul_ln41_fu_396_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln41_fu_396_p0) * signed('0' &mul_ln41_fu_396_p1))), 32));
    select_ln93_fu_455_p3 <= 
        var_yres_virtual_rea_reg_487 when (icmp_ln93_fu_450_p2(0) = '1') else 
        grp_fu_445_p2;
    trunc_ln_fu_382_p4 <= var_bits_per_pixel(31 downto 3);
    var_bits_per_pixel_r_read_fu_90_p2 <= var_bits_per_pixel;

    var_blue_length_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10))) then 
            var_blue_length <= ap_const_lv32_5;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_blue_length <= ap_const_lv32_8;
        else 
            var_blue_length <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_blue_length_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_blue_length_ap_vld <= ap_const_logic_1;
        else 
            var_blue_length_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_blue_msb_right <= ap_const_lv32_0;

    var_blue_msb_right_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_blue_msb_right_ap_vld <= ap_const_logic_1;
        else 
            var_blue_msb_right_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_blue_offset <= ap_const_lv32_0;

    var_blue_offset_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_blue_offset_ap_vld <= ap_const_logic_1;
        else 
            var_blue_offset_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_green_length_o_assign_proc : process(var_green_length_i, var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10))) then 
            var_green_length_o <= ap_const_lv32_5;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_green_length_o <= ap_const_lv32_8;
        else 
            var_green_length_o <= var_green_length_i;
        end if; 
    end process;


    var_green_length_o_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_green_length_o_ap_vld <= ap_const_logic_1;
        else 
            var_green_length_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_green_msb_right <= ap_const_lv32_0;

    var_green_msb_right_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_green_msb_right_ap_vld <= ap_const_logic_1;
        else 
            var_green_msb_right_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_green_offset_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8))) then 
            var_green_offset <= ap_const_lv32_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln57_fu_425_p2 = ap_const_lv1_1) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)))) then 
            var_green_offset <= ap_const_lv32_5;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_green_offset <= ap_const_lv32_8;
        else 
            var_green_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_green_offset_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln57_fu_425_p2 = ap_const_lv1_1) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_green_offset_ap_vld <= ap_const_logic_1;
        else 
            var_green_offset_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_height <= ap_const_lv32_FFFFFFFF;

    var_height_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_height_ap_vld <= ap_const_logic_1;
        else 
            var_height_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_hsync_len <= ap_const_lv32_8;

    var_hsync_len_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_hsync_len_ap_vld <= ap_const_logic_1;
        else 
            var_hsync_len_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_left_margin <= ap_const_lv32_10;

    var_left_margin_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_left_margin_ap_vld <= ap_const_logic_1;
        else 
            var_left_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_lower_margin <= ap_const_lv32_10;

    var_lower_margin_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_lower_margin_ap_vld <= ap_const_logic_1;
        else 
            var_lower_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_red_length_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln57_fu_425_p2 = ap_const_lv1_1) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)))) then 
            var_red_length <= ap_const_lv32_5;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_red_length <= ap_const_lv32_8;
        else 
            var_red_length <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_red_length_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln57_fu_425_p2 = ap_const_lv1_1) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_red_length_ap_vld <= ap_const_logic_1;
        else 
            var_red_length_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_red_msb_right <= ap_const_lv32_0;

    var_red_msb_right_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_red_msb_right_ap_vld <= ap_const_logic_1;
        else 
            var_red_msb_right_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_red_offset_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8))) then 
            var_red_offset <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10))) then 
            var_red_offset <= ap_const_lv32_A;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_red_offset <= ap_const_lv32_10;
        else 
            var_red_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_red_offset_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3, icmp_ln57_fu_425_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_425_p2 = ap_const_lv1_0) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_red_offset_ap_vld <= ap_const_logic_1;
        else 
            var_red_offset_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_right_margin <= ap_const_lv32_10;

    var_right_margin_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_right_margin_ap_vld <= ap_const_logic_1;
        else 
            var_right_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_transp_length_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)))) then 
            var_transp_length <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20))) then 
            var_transp_length <= ap_const_lv32_8;
        else 
            var_transp_length <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_transp_length_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_transp_length_ap_vld <= ap_const_logic_1;
        else 
            var_transp_length_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_transp_msb_right <= ap_const_lv32_0;

    var_transp_msb_right_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_transp_msb_right_ap_vld <= ap_const_logic_1;
        else 
            var_transp_msb_right_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_transp_offset_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)))) then 
            var_transp_offset <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20))) then 
            var_transp_offset <= ap_const_lv32_18;
        else 
            var_transp_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    var_transp_offset_ap_vld_assign_proc : process(var_bits_per_pixel_r_read_fu_90_p2, icmp_ln41_reg_524, icmp_ln41_1_fu_420_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_8)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_18)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln41_1_fu_420_p2 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (var_bits_per_pixel_r_read_fu_90_p2 = ap_const_lv32_20)))) then 
            var_transp_offset_ap_vld <= ap_const_logic_1;
        else 
            var_transp_offset_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_upper_margin <= ap_const_lv32_10;

    var_upper_margin_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_upper_margin_ap_vld <= ap_const_logic_1;
        else 
            var_upper_margin_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_vmode <= ap_const_lv32_0;

    var_vmode_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_vmode_ap_vld <= ap_const_logic_1;
        else 
            var_vmode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_vsync_len <= ap_const_lv32_8;

    var_vsync_len_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_vsync_len_ap_vld <= ap_const_logic_1;
        else 
            var_vsync_len_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    var_width <= ap_const_lv32_FFFFFFFF;

    var_width_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_width_ap_vld <= ap_const_logic_1;
        else 
            var_width_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    var_yres_virtual_o_assign_proc : process(var_yres_virtual_i, empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, icmp_ln90_reg_540, select_ln93_fu_455_p3, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln90_reg_540 = ap_const_lv1_1) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_yres_virtual_o <= select_ln93_fu_455_p3;
        else 
            var_yres_virtual_o <= var_yres_virtual_i;
        end if; 
    end process;


    var_yres_virtual_o_ap_vld_assign_proc : process(empty_9_reg_468, icmp_ln34_reg_483, icmp_ln34_1_reg_500, icmp_ln34_2_reg_504, icmp_ln41_reg_524, icmp_ln41_1_reg_533, icmp_ln90_reg_540, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (icmp_ln41_1_reg_533 = ap_const_lv1_0) and (icmp_ln41_reg_524 = ap_const_lv1_0) and (icmp_ln34_1_reg_500 = ap_const_lv1_0) and (icmp_ln34_reg_483 = ap_const_lv1_0) and (icmp_ln90_reg_540 = ap_const_lv1_1) and (icmp_ln34_2_reg_504 = ap_const_lv1_1) and (empty_9_reg_468 = ap_const_lv1_1))) then 
            var_yres_virtual_o_ap_vld <= ap_const_logic_1;
        else 
            var_yres_virtual_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln41_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_382_p4),32));
end behav;
