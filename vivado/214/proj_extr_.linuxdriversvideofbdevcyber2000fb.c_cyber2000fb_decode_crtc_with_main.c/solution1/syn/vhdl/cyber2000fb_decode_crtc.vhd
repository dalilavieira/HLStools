-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cyber2000fb_decode_crtc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hw_crtc_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hw_crtc_ce0 : OUT STD_LOGIC;
    hw_crtc_we0 : OUT STD_LOGIC;
    hw_crtc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_crtc_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hw_crtc_ce1 : OUT STD_LOGIC;
    hw_crtc_we1 : OUT STD_LOGIC;
    hw_crtc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_pitch : IN STD_LOGIC_VECTOR (31 downto 0);
    hw_crtc_ofl_i : IN STD_LOGIC_VECTOR (31 downto 0);
    hw_crtc_ofl_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    hw_crtc_ofl_o_ap_vld : OUT STD_LOGIC;
    cfb_dummy : IN STD_LOGIC_VECTOR (31 downto 0);
    var_xres : IN STD_LOGIC_VECTOR (31 downto 0);
    var_right_margin : IN STD_LOGIC_VECTOR (31 downto 0);
    var_hsync_len : IN STD_LOGIC_VECTOR (31 downto 0);
    var_left_margin : IN STD_LOGIC_VECTOR (31 downto 0);
    var_yres : IN STD_LOGIC_VECTOR (31 downto 0);
    var_lower_margin : IN STD_LOGIC_VECTOR (31 downto 0);
    var_vsync_len : IN STD_LOGIC_VECTOR (31 downto 0);
    var_upper_margin : IN STD_LOGIC_VECTOR (31 downto 0);
    var_vmode : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cyber2000fb_decode_crtc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cyber2000fb_decode_crtc,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.859000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=379,HLS_SYN_LUT=1146,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_820 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000100000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv30_3FFFFFFB : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111011";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_FFFFFFF4 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110100";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_439 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln40_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal var_xres_read_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln37_reg_1143 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln40_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_1152 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln5_reg_1157 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln58_reg_1167 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln58_1_fu_561_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln58_1_reg_1172 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln58_2_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln58_2_reg_1177 : STD_LOGIC_VECTOR (10 downto 0);
    signal Vsyncstart_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vsyncstart_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_1_fu_628_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln59_1_reg_1187 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln59_2_fu_634_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln59_2_reg_1192 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln59_3_fu_640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln59_3_reg_1197 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln4_reg_1202 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln60_1_fu_697_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln60_1_reg_1207 : STD_LOGIC_VECTOR (3 downto 0);
    signal Vdispend_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vdispend_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln61_2_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_2_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vtotal_fu_896_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vtotal_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1266 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln95_fu_1126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln43_1_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln44_1_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln45_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_fu_674_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln55_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln83_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vblankend_fu_1017_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln71_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln79_fu_1104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vblankstart_fu_1131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_1_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln37_3_fu_464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln37_2_fu_460_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_1_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_2_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_3_fu_479_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal Htotal_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln37_4_fu_491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln37_5_fu_495_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_5_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_1_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_2_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_fu_527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln43_fu_569_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln43_fu_572_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln44_fu_583_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln44_fu_587_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln59_5_fu_618_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln59_4_fu_614_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln59_3_fu_610_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln59_2_fu_606_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln59_1_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln59_fu_598_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln46_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_667_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_fu_679_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln60_1_fu_683_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln60_fu_691_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln60_2_fu_687_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln53_2_fu_715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_1_fu_711_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln53_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln53_1_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln7_fu_731_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_fu_741_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_11_fu_826_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_10_fu_822_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_5_fu_796_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_4_fu_792_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_9_fu_818_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln61_8_fu_814_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln61_3_fu_788_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln61_2_fu_784_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln61_7_fu_810_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln61_6_fu_806_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln61_1_fu_780_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln61_fu_776_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_1_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_7_fu_860_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_8_fu_866_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_5_fu_848_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_6_fu_854_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_3_fu_836_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_4_fu_842_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_11_fu_890_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_10_fu_884_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_9_fu_878_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_920_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln61_15_fu_914_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln58_3_fu_771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_13_fu_902_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln58_2_fu_766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_14_fu_908_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_1_fu_761_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln3_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_2_fu_1031_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln67_1_fu_1027_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln67_fu_1023_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln67_3_fu_1047_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_1053_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_1061_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln71_fu_1075_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_2_fu_1041_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_1086_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2_fu_1094_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln67_1_fu_1035_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_1109_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln95_2_fu_1117_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Vdispend_reg_1212 <= Vdispend_fu_755_p2;
                Vtotal_reg_1222 <= Vtotal_fu_896_p2;
                add_ln61_2_reg_1217 <= add_ln61_2_fu_872_p2;
                icmp_ln64_reg_1227 <= icmp_ln64_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Vsyncstart_reg_1182 <= Vsyncstart_fu_622_p2;
                add_ln59_1_reg_1187 <= add_ln59_1_fu_628_p2;
                add_ln59_2_reg_1192 <= add_ln59_2_fu_634_p2;
                add_ln59_3_reg_1197 <= add_ln59_3_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln60_1_reg_1207 <= add_ln60_1_fu_697_p2;
                trunc_ln4_reg_1202 <= add_ln46_fu_651_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln40_reg_1148 <= icmp_ln40_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln40_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_439 <= var_xres(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln40_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_443 <= var_yres;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_930_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_10_reg_1261 <= add_ln61_14_fu_908_p2(10 downto 10);
                tmp_11_reg_1266 <= add_ln58_1_fu_761_p2(10 downto 10);
                tmp_12_reg_1271 <= add_ln59_1_reg_1187(10 downto 10);
                tmp_2_reg_1231 <= add_ln61_15_fu_914_p2(8 downto 8);
                tmp_3_reg_1236 <= add_ln58_3_fu_771_p2(8 downto 8);
                tmp_4_reg_1241 <= add_ln59_3_reg_1197(8 downto 8);
                tmp_6_reg_1246 <= add_ln61_13_fu_902_p2(9 downto 9);
                tmp_7_reg_1251 <= add_ln58_2_fu_766_p2(9 downto 9);
                tmp_8_reg_1256 <= add_ln59_2_reg_1192(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_1162 <= add_ln48_fu_527_p2(8 downto 8);
                trunc_ln1_reg_1152 <= Htotal_fu_485_p2(31 downto 3);
                trunc_ln58_1_reg_1172 <= trunc_ln58_1_fu_561_p1;
                trunc_ln58_2_reg_1177 <= trunc_ln58_2_fu_565_p1;
                trunc_ln58_reg_1167 <= trunc_ln58_fu_557_p1;
                trunc_ln5_reg_1157 <= add_ln48_2_fu_533_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln37_reg_1143 <= trunc_ln37_fu_447_p1;
                var_xres_read_reg_1138 <= var_xres;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln40_fu_505_p2, ap_CS_fsm_state5, icmp_ln64_fu_930_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln40_fu_505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_930_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Htotal_fu_485_p2 <= std_logic_vector(unsigned(add_ln37_1_fu_468_p2) + unsigned(add_ln37_fu_455_p2));
    Vblankend_fu_1017_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFF4) + signed(add_ln61_2_reg_1217));
    Vblankstart_fu_1131_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(reg_443));
    Vdispend_fu_755_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(reg_443));
    Vsyncstart_fu_622_p2 <= std_logic_vector(unsigned(var_lower_margin) + unsigned(var_yres));
    Vtotal_fu_896_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(add_ln61_2_fu_872_p2));
    add_ln37_1_fu_468_p2 <= std_logic_vector(unsigned(var_right_margin) + unsigned(var_left_margin));
    add_ln37_2_fu_474_p2 <= std_logic_vector(unsigned(trunc_ln37_1_fu_451_p1) + unsigned(trunc_ln37_reg_1143));
    add_ln37_3_fu_479_p2 <= std_logic_vector(unsigned(trunc_ln37_3_fu_464_p1) + unsigned(trunc_ln37_2_fu_460_p1));
    add_ln37_5_fu_499_p2 <= std_logic_vector(unsigned(add_ln37_2_fu_474_p2) + unsigned(add_ln37_3_fu_479_p2));
    add_ln37_fu_455_p2 <= std_logic_vector(unsigned(var_xres_read_reg_1138) + unsigned(var_hsync_len));
    add_ln43_fu_572_p2 <= std_logic_vector(signed(ap_const_lv30_3FFFFFFB) + signed(sext_ln43_fu_569_p1));
    add_ln44_fu_587_p2 <= std_logic_vector(signed(ap_const_lv30_3FFFFFFF) + signed(sext_ln44_fu_583_p1));
    add_ln46_fu_651_p2 <= std_logic_vector(unsigned(var_right_margin) + unsigned(var_xres));
    add_ln48_1_fu_521_p2 <= std_logic_vector(unsigned(trunc_ln37_4_fu_491_p1) + unsigned(trunc_ln37_5_fu_495_p1));
    add_ln48_2_fu_533_p2 <= std_logic_vector(signed(ap_const_lv8_E0) + signed(add_ln48_1_fu_521_p2));
    add_ln48_fu_527_p2 <= std_logic_vector(signed(ap_const_lv9_1E0) + signed(add_ln37_5_fu_499_p2));
    add_ln53_1_fu_725_p2 <= std_logic_vector(unsigned(trunc_ln53_fu_707_p1) + unsigned(add_ln53_fu_719_p2));
    add_ln53_fu_719_p2 <= std_logic_vector(unsigned(trunc_ln53_2_fu_715_p1) + unsigned(trunc_ln53_1_fu_711_p1));
    add_ln58_1_fu_761_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(trunc_ln58_2_reg_1177));
    add_ln58_2_fu_766_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(trunc_ln58_1_reg_1172));
    add_ln58_3_fu_771_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(trunc_ln58_reg_1167));
    add_ln59_1_fu_628_p2 <= std_logic_vector(unsigned(trunc_ln59_5_fu_618_p1) + unsigned(trunc_ln59_4_fu_614_p1));
    add_ln59_2_fu_634_p2 <= std_logic_vector(unsigned(trunc_ln59_3_fu_610_p1) + unsigned(trunc_ln59_2_fu_606_p1));
    add_ln59_3_fu_640_p2 <= std_logic_vector(unsigned(trunc_ln59_1_fu_602_p1) + unsigned(trunc_ln59_fu_598_p1));
    add_ln60_1_fu_697_p2 <= std_logic_vector(unsigned(add_ln60_fu_691_p2) + unsigned(trunc_ln60_2_fu_687_p1));
    add_ln60_fu_691_p2 <= std_logic_vector(unsigned(trunc_ln60_fu_679_p1) + unsigned(trunc_ln60_1_fu_683_p1));
    add_ln61_10_fu_884_p2 <= std_logic_vector(unsigned(add_ln61_5_fu_848_p2) + unsigned(add_ln61_6_fu_854_p2));
    add_ln61_11_fu_890_p2 <= std_logic_vector(unsigned(add_ln61_3_fu_836_p2) + unsigned(add_ln61_4_fu_842_p2));
    add_ln61_13_fu_902_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(add_ln61_11_fu_890_p2));
    add_ln61_14_fu_908_p2 <= std_logic_vector(signed(ap_const_lv11_7FE) + signed(add_ln61_10_fu_884_p2));
    add_ln61_15_fu_914_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(add_ln61_9_fu_878_p2));
    add_ln61_1_fu_830_p2 <= std_logic_vector(unsigned(var_upper_margin) + unsigned(var_yres));
    add_ln61_2_fu_872_p2 <= std_logic_vector(unsigned(add_ln61_fu_800_p2) + unsigned(add_ln61_1_fu_830_p2));
    add_ln61_3_fu_836_p2 <= std_logic_vector(unsigned(trunc_ln61_11_fu_826_p1) + unsigned(trunc_ln61_10_fu_822_p1));
    add_ln61_4_fu_842_p2 <= std_logic_vector(unsigned(trunc_ln61_5_fu_796_p1) + unsigned(trunc_ln61_4_fu_792_p1));
    add_ln61_5_fu_848_p2 <= std_logic_vector(unsigned(trunc_ln61_9_fu_818_p1) + unsigned(trunc_ln61_8_fu_814_p1));
    add_ln61_6_fu_854_p2 <= std_logic_vector(unsigned(trunc_ln61_3_fu_788_p1) + unsigned(trunc_ln61_2_fu_784_p1));
    add_ln61_7_fu_860_p2 <= std_logic_vector(unsigned(trunc_ln61_7_fu_810_p1) + unsigned(trunc_ln61_6_fu_806_p1));
    add_ln61_8_fu_866_p2 <= std_logic_vector(unsigned(trunc_ln61_1_fu_780_p1) + unsigned(trunc_ln61_fu_776_p1));
    add_ln61_9_fu_878_p2 <= std_logic_vector(unsigned(add_ln61_7_fu_860_p2) + unsigned(add_ln61_8_fu_866_p2));
    add_ln61_fu_800_p2 <= std_logic_vector(unsigned(var_vsync_len) + unsigned(var_lower_margin));
    add_ln67_1_fu_1035_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) + unsigned(trunc_ln67_2_fu_1031_p1));
    add_ln67_2_fu_1041_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(trunc_ln67_1_fu_1027_p1));
    add_ln67_3_fu_1047_p2 <= std_logic_vector(unsigned(ap_const_lv9_6) + unsigned(trunc_ln67_fu_1023_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    hw_crtc_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hw_crtc_address0 <= ap_const_lv64_F(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_crtc_address0 <= ap_const_lv64_7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_crtc_address0 <= ap_const_lv64_10(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_crtc_address0 <= ap_const_lv64_B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_crtc_address0 <= ap_const_lv64_6(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hw_crtc_address0 <= ap_const_lv64_4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hw_crtc_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_crtc_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hw_crtc_address0 <= ap_const_lv64_E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hw_crtc_address0 <= ap_const_lv64_D(10 - 1 downto 0);
        else 
            hw_crtc_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    hw_crtc_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_crtc_address1 <= ap_const_lv64_9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_crtc_address1 <= ap_const_lv64_12(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_crtc_address1 <= ap_const_lv64_C(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_crtc_address1 <= ap_const_lv64_A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hw_crtc_address1 <= ap_const_lv64_5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hw_crtc_address1 <= ap_const_lv64_3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_crtc_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hw_crtc_address1 <= ap_const_lv64_8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hw_crtc_address1 <= ap_const_lv64_11(10 - 1 downto 0);
        else 
            hw_crtc_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    hw_crtc_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            hw_crtc_ce0 <= ap_const_logic_1;
        else 
            hw_crtc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_crtc_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            hw_crtc_ce1 <= ap_const_logic_1;
        else 
            hw_crtc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hw_crtc_d0_assign_proc : process(ap_CS_fsm_state1, hw_pitch, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, Vtotal_reg_1222, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, sext_ln43_1_fu_578_p1, sext_ln45_fu_646_p1, sext_ln46_fu_703_p1, zext_ln83_fu_1012_p1, Vblankend_fu_1017_p2, zext_ln71_fu_1081_p1, Vblankstart_fu_1131_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hw_crtc_d0 <= Vblankstart_fu_1131_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_crtc_d0 <= zext_ln71_fu_1081_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_crtc_d0 <= Vblankend_fu_1017_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_crtc_d0 <= zext_ln83_fu_1012_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_crtc_d0 <= Vtotal_reg_1222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hw_crtc_d0 <= sext_ln46_fu_703_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hw_crtc_d0 <= sext_ln45_fu_646_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_crtc_d0 <= sext_ln43_1_fu_578_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hw_crtc_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hw_crtc_d0 <= hw_pitch;
        else 
            hw_crtc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hw_crtc_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, Vsyncstart_reg_1182, ap_CS_fsm_state4, Vdispend_reg_1212, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, sext_ln44_1_fu_593_p1, zext_ln50_fu_674_p1, zext_ln55_fu_750_p1, zext_ln79_fu_1104_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_crtc_d1 <= zext_ln79_fu_1104_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_crtc_d1 <= ap_const_lv32_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_crtc_d1 <= Vdispend_reg_1212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_crtc_d1 <= Vsyncstart_reg_1182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hw_crtc_d1 <= zext_ln55_fu_750_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hw_crtc_d1 <= zext_ln50_fu_674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_crtc_d1 <= sext_ln44_1_fu_593_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hw_crtc_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hw_crtc_d1 <= ap_const_lv32_E3;
        else 
            hw_crtc_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hw_crtc_ofl_o_assign_proc : process(hw_crtc_ofl_i, ap_CS_fsm_state9, icmp_ln40_reg_1148, icmp_ln64_reg_1227, ap_CS_fsm_state10, zext_ln95_fu_1126_p1)
    begin
        if (((icmp_ln40_reg_1148 = ap_const_lv1_0) and (icmp_ln64_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hw_crtc_ofl_o <= hw_crtc_ofl_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_crtc_ofl_o <= zext_ln95_fu_1126_p1;
        else 
            hw_crtc_ofl_o <= hw_crtc_ofl_i;
        end if; 
    end process;


    hw_crtc_ofl_o_ap_vld_assign_proc : process(ap_CS_fsm_state9, icmp_ln40_reg_1148, icmp_ln64_reg_1227, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln40_reg_1148 = ap_const_lv1_0) and (icmp_ln64_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            hw_crtc_ofl_o_ap_vld <= ap_const_logic_1;
        else 
            hw_crtc_ofl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_crtc_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, icmp_ln40_reg_1148, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln64_reg_1227, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln40_reg_1148 = ap_const_lv1_0) and (icmp_ln64_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            hw_crtc_we0 <= ap_const_logic_1;
        else 
            hw_crtc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_crtc_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            hw_crtc_we1 <= ap_const_logic_1;
        else 
            hw_crtc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln40_fu_505_p2 <= "1" when (signed(Htotal_fu_485_p2) > signed(ap_const_lv32_820)) else "0";
    icmp_ln64_fu_930_p2 <= "1" when (signed(tmp_1_fu_920_p4) > signed(ap_const_lv21_0)) else "0";
    or_ln1_fu_667_p3 <= (ap_const_lv3_4 & trunc_ln5_reg_1157);
    or_ln2_fu_1094_p4 <= ((ap_const_lv1_1 & tmp_9_fu_1086_p3) & ap_const_lv5_0);
    or_ln3_fu_1005_p3 <= (ap_const_lv4_8 & add_ln60_1_reg_1207);
    or_ln71_fu_1075_p2 <= (tmp7_fu_1061_p9 or ap_const_lv8_10);
    or_ln95_2_fu_1117_p5 <= (((tmp_13_fu_1109_p3 & tmp_12_reg_1271) & tmp_11_reg_1266) & tmp_10_reg_1261);
    or_ln_fu_741_p4 <= ((tmp_reg_1162 & ap_const_lv2_0) & trunc_ln7_fu_731_p4);
        sext_ln43_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln43_fu_572_p2),32));

        sext_ln43_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1152),30));

        sext_ln44_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln44_fu_587_p2),32));

        sext_ln44_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_439),30));

        sext_ln45_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_439),32));

        sext_ln46_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1202),32));

    tmp7_fu_1061_p9 <= (((((((tmp_8_reg_1256 & tmp_7_reg_1251) & tmp_6_reg_1246) & ap_const_lv1_0) & tmp_5_fu_1053_p3) & tmp_4_reg_1241) & tmp_3_reg_1236) & tmp_2_reg_1231);
    tmp_13_fu_1109_p3 <= add_ln67_1_fu_1035_p2(10 downto 10);
    tmp_1_fu_920_p4 <= Vtotal_fu_896_p2(31 downto 11);
    tmp_5_fu_1053_p3 <= add_ln67_3_fu_1047_p2(8 downto 8);
    tmp_9_fu_1086_p3 <= add_ln67_2_fu_1041_p2(9 downto 9);
    trunc_ln37_1_fu_451_p1 <= var_hsync_len(9 - 1 downto 0);
    trunc_ln37_2_fu_460_p1 <= var_right_margin(9 - 1 downto 0);
    trunc_ln37_3_fu_464_p1 <= var_left_margin(9 - 1 downto 0);
    trunc_ln37_4_fu_491_p1 <= add_ln37_2_fu_474_p2(8 - 1 downto 0);
    trunc_ln37_5_fu_495_p1 <= add_ln37_3_fu_479_p2(8 - 1 downto 0);
    trunc_ln37_fu_447_p1 <= var_xres(9 - 1 downto 0);
    trunc_ln53_1_fu_711_p1 <= var_right_margin(8 - 1 downto 0);
    trunc_ln53_2_fu_715_p1 <= var_hsync_len(8 - 1 downto 0);
    trunc_ln53_fu_707_p1 <= var_xres(8 - 1 downto 0);
    trunc_ln58_1_fu_561_p1 <= var_yres(10 - 1 downto 0);
    trunc_ln58_2_fu_565_p1 <= var_yres(11 - 1 downto 0);
    trunc_ln58_fu_557_p1 <= var_yres(9 - 1 downto 0);
    trunc_ln59_1_fu_602_p1 <= var_yres(9 - 1 downto 0);
    trunc_ln59_2_fu_606_p1 <= var_lower_margin(10 - 1 downto 0);
    trunc_ln59_3_fu_610_p1 <= var_yres(10 - 1 downto 0);
    trunc_ln59_4_fu_614_p1 <= var_lower_margin(11 - 1 downto 0);
    trunc_ln59_5_fu_618_p1 <= var_yres(11 - 1 downto 0);
    trunc_ln59_fu_598_p1 <= var_lower_margin(9 - 1 downto 0);
    trunc_ln60_1_fu_683_p1 <= var_vsync_len(4 - 1 downto 0);
    trunc_ln60_2_fu_687_p1 <= var_yres(4 - 1 downto 0);
    trunc_ln60_fu_679_p1 <= var_lower_margin(4 - 1 downto 0);
    trunc_ln61_10_fu_822_p1 <= var_upper_margin(10 - 1 downto 0);
    trunc_ln61_11_fu_826_p1 <= var_yres(10 - 1 downto 0);
    trunc_ln61_1_fu_780_p1 <= var_lower_margin(9 - 1 downto 0);
    trunc_ln61_2_fu_784_p1 <= var_vsync_len(11 - 1 downto 0);
    trunc_ln61_3_fu_788_p1 <= var_lower_margin(11 - 1 downto 0);
    trunc_ln61_4_fu_792_p1 <= var_vsync_len(10 - 1 downto 0);
    trunc_ln61_5_fu_796_p1 <= var_lower_margin(10 - 1 downto 0);
    trunc_ln61_6_fu_806_p1 <= var_upper_margin(9 - 1 downto 0);
    trunc_ln61_7_fu_810_p1 <= var_yres(9 - 1 downto 0);
    trunc_ln61_8_fu_814_p1 <= var_upper_margin(11 - 1 downto 0);
    trunc_ln61_9_fu_818_p1 <= var_yres(11 - 1 downto 0);
    trunc_ln61_fu_776_p1 <= var_vsync_len(9 - 1 downto 0);
    trunc_ln67_1_fu_1027_p1 <= var_yres(10 - 1 downto 0);
    trunc_ln67_2_fu_1031_p1 <= var_yres(11 - 1 downto 0);
    trunc_ln67_fu_1023_p1 <= var_yres(9 - 1 downto 0);
    trunc_ln7_fu_731_p4 <= add_ln53_1_fu_725_p2(7 downto 3);
    zext_ln50_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_667_p3),32));
    zext_ln55_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_741_p4),32));
    zext_ln71_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln71_fu_1075_p2),32));
    zext_ln79_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2_fu_1094_p4),32));
    zext_ln83_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_1005_p3),32));
    zext_ln95_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln95_2_fu_1117_p5),32));
end behav;
