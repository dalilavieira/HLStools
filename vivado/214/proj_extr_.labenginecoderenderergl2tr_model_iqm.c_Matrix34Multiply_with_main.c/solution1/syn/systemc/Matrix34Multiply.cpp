// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Matrix34Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Matrix34Multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Matrix34Multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state1 = "1";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state2 = "10";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state3 = "100";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state5 = "10000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state6 = "100000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state10 = "1000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state11 = "10000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state12 = "100000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<20> Matrix34Multiply::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_1 = "1";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_7 = "111";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_D = "1101";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_E = "1110";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_6 = "110";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_8 = "1000";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_5 = "101";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_9 = "1001";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_A = "1010";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_B = "1011";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_F = "1111";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_11 = "10001";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_12 = "10010";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_3 = "11";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_4 = "100";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_C = "1100";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_1 = "1";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_3 = "11";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_7 = "111";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_4 = "100";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_5 = "101";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_8 = "1000";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_9 = "1001";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_2 = "10";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_6 = "110";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_B = "1011";
const sc_lv<64> Matrix34Multiply::ap_const_lv64_A = "1010";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_10 = "10000";
const sc_lv<32> Matrix34Multiply::ap_const_lv32_13 = "10011";
const bool Matrix34Multiply::ap_const_boolean_1 = true;

Matrix34Multiply::Matrix34Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->din0(grp_fu_387_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->din1(grp_fu_387_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1->dout(grp_fu_387_p2);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->din0(grp_fu_391_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->din1(grp_fu_391_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2->dout(grp_fu_391_p2);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->din0(grp_fu_395_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->din1(grp_fu_395_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3->dout(grp_fu_395_p2);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->din0(grp_fu_399_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->din1(grp_fu_399_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4->dout(grp_fu_399_p2);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->din0(grp_fu_403_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->din1(grp_fu_403_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5->dout(grp_fu_403_p2);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6 = new Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1<1,4,32,32,32>("Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6");
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->clk(ap_clk);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->reset(ap_rst);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->din0(grp_fu_407_p0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->din1(grp_fu_407_p1);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->ce(ap_var_for_const0);
    Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6->dout(grp_fu_407_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->din0(grp_fu_411_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->din1(grp_fu_411_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7->dout(grp_fu_411_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->din0(grp_fu_415_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->din1(grp_fu_415_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8->dout(grp_fu_415_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->din0(grp_fu_419_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->din1(grp_fu_419_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9->dout(grp_fu_419_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->din0(grp_fu_423_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->din1(grp_fu_423_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10->dout(grp_fu_423_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->din0(grp_fu_427_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->din1(grp_fu_427_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11->dout(grp_fu_427_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->din0(grp_fu_431_p0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->din1(grp_fu_431_p1);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12->dout(grp_fu_431_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->din0(a_load_8_reg_733);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->din1(reg_496);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13->dout(grp_fu_435_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->din0(a_load_9_reg_741);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->din1(reg_504);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14->dout(grp_fu_439_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->din0(a_load_8_reg_733);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->din1(b_load_3_reg_709);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15->dout(grp_fu_443_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->din0(a_load_9_reg_741);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->din1(b_load_4_reg_716);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16->dout(grp_fu_447_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->din0(a_load_8_reg_733);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->din1(reg_478);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17->dout(grp_fu_451_p2);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18 = new Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1<1,3,32,32,32>("Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18");
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->clk(ap_clk);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->reset(ap_rst);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->din0(a_load_9_reg_741);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->din1(reg_487);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->ce(ap_var_for_const0);
    Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18->dout(grp_fu_455_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_a_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_a_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_b_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_387_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_521 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_557 );
    sensitive << ( reg_575 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_593 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_599 );
    sensitive << ( reg_606 );
    sensitive << ( tmp_7_reg_870 );
    sensitive << ( tmp_11_reg_875 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_387_p1);
    sensitive << ( reg_459 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_470 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_521 );
    sensitive << ( reg_527 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_557 );
    sensitive << ( reg_563 );
    sensitive << ( reg_575 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_581 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_391_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_533 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_569 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_587 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( reg_599 );
    sensitive << ( reg_613 );
    sensitive << ( reg_637 );
    sensitive << ( tmp_32_reg_880 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_391_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_513 );
    sensitive << ( reg_527 );
    sensitive << ( reg_539 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_563 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_581 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_26_reg_800 );
    sensitive << ( tmp_31_reg_855 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_395_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_545 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_606 );
    sensitive << ( reg_619 );
    sensitive << ( tmp_35_reg_805 );
    sensitive << ( tmp_51_reg_860 );
    sensitive << ( tmp_53_reg_885 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_395_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_533 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_551 );
    sensitive << ( reg_569 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_587 );
    sensitive << ( tmp_36_reg_810 );
    sensitive << ( tmp_52_reg_865 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_399_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_625 );
    sensitive << ( tmp_41_reg_815 );

    SC_METHOD(thread_grp_fu_399_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_539 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_42_reg_820 );

    SC_METHOD(thread_grp_fu_403_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_631 );
    sensitive << ( tmp_46_reg_830 );

    SC_METHOD(thread_grp_fu_403_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_545 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_47_reg_835 );

    SC_METHOD(thread_grp_fu_407_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( reg_637 );
    sensitive << ( tmp_56_reg_840 );

    SC_METHOD(thread_grp_fu_407_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_551 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_57_reg_845 );

    SC_METHOD(thread_grp_fu_411_p0);
    sensitive << ( reg_459 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( a_load_2_reg_783 );

    SC_METHOD(thread_grp_fu_411_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_478 );
    sensitive << ( reg_496 );
    sensitive << ( reg_504 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( b_load_3_reg_709 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( b_load_6_reg_749 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_415_p0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_470 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( a_load_2_reg_783 );
    sensitive << ( a_load_6_reg_794 );

    SC_METHOD(thread_grp_fu_415_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_487 );
    sensitive << ( reg_496 );
    sensitive << ( reg_504 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( b_load_4_reg_716 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( b_load_7_reg_756 );

    SC_METHOD(thread_grp_fu_419_p0);
    sensitive << ( reg_459 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_513 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( a_load_6_reg_794 );

    SC_METHOD(thread_grp_fu_419_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_478 );
    sensitive << ( reg_487 );
    sensitive << ( reg_504 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( b_load_3_reg_709 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( b_load_6_reg_749 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_423_p0);
    sensitive << ( reg_459 );
    sensitive << ( reg_470 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( a_load_5_reg_693 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_423_p1);
    sensitive << ( reg_478 );
    sensitive << ( reg_487 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( b_load_4_reg_716 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( b_load_7_reg_756 );

    SC_METHOD(thread_grp_fu_427_p0);
    sensitive << ( reg_459 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_513 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( a_load_8_reg_733 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_427_p1);
    sensitive << ( reg_478 );
    sensitive << ( reg_496 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( b_load_6_reg_749 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_431_p0);
    sensitive << ( reg_459 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( a_load_5_reg_693 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( a_load_9_reg_741 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_431_p1);
    sensitive << ( reg_487 );
    sensitive << ( reg_504 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( b_load_7_reg_756 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_address1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_ce1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( reg_593 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( reg_625 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_d1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( reg_599 );
    sensitive << ( reg_606 );
    sensitive << ( reg_613 );
    sensitive << ( reg_619 );
    sensitive << ( reg_631 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_r_we1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Matrix34Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, a_address1, "(port)a_address1");
    sc_trace(mVcdFile, a_ce1, "(port)a_ce1");
    sc_trace(mVcdFile, a_q1, "(port)a_q1");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, b_address1, "(port)b_address1");
    sc_trace(mVcdFile, b_ce1, "(port)b_ce1");
    sc_trace(mVcdFile, b_q1, "(port)b_q1");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
    sc_trace(mVcdFile, out_r_address1, "(port)out_r_address1");
    sc_trace(mVcdFile, out_r_ce1, "(port)out_r_ce1");
    sc_trace(mVcdFile, out_r_we1, "(port)out_r_we1");
    sc_trace(mVcdFile, out_r_d1, "(port)out_r_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_459, "reg_459");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, reg_470, "reg_470");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, reg_478, "reg_478");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_487, "reg_487");
    sc_trace(mVcdFile, reg_496, "reg_496");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, reg_504, "reg_504");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_513, "reg_513");
    sc_trace(mVcdFile, grp_fu_411_p2, "grp_fu_411_p2");
    sc_trace(mVcdFile, reg_521, "reg_521");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_415_p2, "grp_fu_415_p2");
    sc_trace(mVcdFile, reg_527, "reg_527");
    sc_trace(mVcdFile, grp_fu_419_p2, "grp_fu_419_p2");
    sc_trace(mVcdFile, reg_533, "reg_533");
    sc_trace(mVcdFile, grp_fu_423_p2, "grp_fu_423_p2");
    sc_trace(mVcdFile, reg_539, "reg_539");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_427_p2, "grp_fu_427_p2");
    sc_trace(mVcdFile, reg_545, "reg_545");
    sc_trace(mVcdFile, grp_fu_431_p2, "grp_fu_431_p2");
    sc_trace(mVcdFile, reg_551, "reg_551");
    sc_trace(mVcdFile, reg_557, "reg_557");
    sc_trace(mVcdFile, reg_563, "reg_563");
    sc_trace(mVcdFile, reg_569, "reg_569");
    sc_trace(mVcdFile, reg_575, "reg_575");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, reg_581, "reg_581");
    sc_trace(mVcdFile, reg_587, "reg_587");
    sc_trace(mVcdFile, grp_fu_387_p2, "grp_fu_387_p2");
    sc_trace(mVcdFile, reg_593, "reg_593");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_fu_391_p2, "grp_fu_391_p2");
    sc_trace(mVcdFile, reg_599, "reg_599");
    sc_trace(mVcdFile, grp_fu_395_p2, "grp_fu_395_p2");
    sc_trace(mVcdFile, reg_606, "reg_606");
    sc_trace(mVcdFile, reg_613, "reg_613");
    sc_trace(mVcdFile, reg_619, "reg_619");
    sc_trace(mVcdFile, grp_fu_399_p2, "grp_fu_399_p2");
    sc_trace(mVcdFile, reg_625, "reg_625");
    sc_trace(mVcdFile, grp_fu_403_p2, "grp_fu_403_p2");
    sc_trace(mVcdFile, reg_631, "reg_631");
    sc_trace(mVcdFile, grp_fu_407_p2, "grp_fu_407_p2");
    sc_trace(mVcdFile, reg_637, "reg_637");
    sc_trace(mVcdFile, a_load_5_reg_693, "a_load_5_reg_693");
    sc_trace(mVcdFile, b_load_3_reg_709, "b_load_3_reg_709");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, b_load_4_reg_716, "b_load_4_reg_716");
    sc_trace(mVcdFile, a_load_8_reg_733, "a_load_8_reg_733");
    sc_trace(mVcdFile, a_load_9_reg_741, "a_load_9_reg_741");
    sc_trace(mVcdFile, b_load_6_reg_749, "b_load_6_reg_749");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, b_load_7_reg_756, "b_load_7_reg_756");
    sc_trace(mVcdFile, a_load_2_reg_783, "a_load_2_reg_783");
    sc_trace(mVcdFile, a_load_6_reg_794, "a_load_6_reg_794");
    sc_trace(mVcdFile, tmp_26_reg_800, "tmp_26_reg_800");
    sc_trace(mVcdFile, tmp_35_reg_805, "tmp_35_reg_805");
    sc_trace(mVcdFile, tmp_36_reg_810, "tmp_36_reg_810");
    sc_trace(mVcdFile, grp_fu_435_p2, "grp_fu_435_p2");
    sc_trace(mVcdFile, tmp_41_reg_815, "tmp_41_reg_815");
    sc_trace(mVcdFile, grp_fu_439_p2, "grp_fu_439_p2");
    sc_trace(mVcdFile, tmp_42_reg_820, "tmp_42_reg_820");
    sc_trace(mVcdFile, grp_fu_443_p2, "grp_fu_443_p2");
    sc_trace(mVcdFile, tmp_46_reg_830, "tmp_46_reg_830");
    sc_trace(mVcdFile, grp_fu_447_p2, "grp_fu_447_p2");
    sc_trace(mVcdFile, tmp_47_reg_835, "tmp_47_reg_835");
    sc_trace(mVcdFile, grp_fu_451_p2, "grp_fu_451_p2");
    sc_trace(mVcdFile, tmp_56_reg_840, "tmp_56_reg_840");
    sc_trace(mVcdFile, grp_fu_455_p2, "grp_fu_455_p2");
    sc_trace(mVcdFile, tmp_57_reg_845, "tmp_57_reg_845");
    sc_trace(mVcdFile, tmp_31_reg_855, "tmp_31_reg_855");
    sc_trace(mVcdFile, tmp_51_reg_860, "tmp_51_reg_860");
    sc_trace(mVcdFile, tmp_52_reg_865, "tmp_52_reg_865");
    sc_trace(mVcdFile, tmp_7_reg_870, "tmp_7_reg_870");
    sc_trace(mVcdFile, tmp_11_reg_875, "tmp_11_reg_875");
    sc_trace(mVcdFile, tmp_32_reg_880, "tmp_32_reg_880");
    sc_trace(mVcdFile, tmp_53_reg_885, "tmp_53_reg_885");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_387_p0, "grp_fu_387_p0");
    sc_trace(mVcdFile, grp_fu_387_p1, "grp_fu_387_p1");
    sc_trace(mVcdFile, grp_fu_391_p0, "grp_fu_391_p0");
    sc_trace(mVcdFile, grp_fu_391_p1, "grp_fu_391_p1");
    sc_trace(mVcdFile, grp_fu_395_p0, "grp_fu_395_p0");
    sc_trace(mVcdFile, grp_fu_395_p1, "grp_fu_395_p1");
    sc_trace(mVcdFile, grp_fu_399_p0, "grp_fu_399_p0");
    sc_trace(mVcdFile, grp_fu_399_p1, "grp_fu_399_p1");
    sc_trace(mVcdFile, grp_fu_403_p0, "grp_fu_403_p0");
    sc_trace(mVcdFile, grp_fu_403_p1, "grp_fu_403_p1");
    sc_trace(mVcdFile, grp_fu_407_p0, "grp_fu_407_p0");
    sc_trace(mVcdFile, grp_fu_407_p1, "grp_fu_407_p1");
    sc_trace(mVcdFile, grp_fu_411_p0, "grp_fu_411_p0");
    sc_trace(mVcdFile, grp_fu_411_p1, "grp_fu_411_p1");
    sc_trace(mVcdFile, grp_fu_415_p0, "grp_fu_415_p0");
    sc_trace(mVcdFile, grp_fu_415_p1, "grp_fu_415_p1");
    sc_trace(mVcdFile, grp_fu_419_p0, "grp_fu_419_p0");
    sc_trace(mVcdFile, grp_fu_419_p1, "grp_fu_419_p1");
    sc_trace(mVcdFile, grp_fu_423_p0, "grp_fu_423_p0");
    sc_trace(mVcdFile, grp_fu_423_p1, "grp_fu_423_p1");
    sc_trace(mVcdFile, grp_fu_427_p0, "grp_fu_427_p0");
    sc_trace(mVcdFile, grp_fu_427_p1, "grp_fu_427_p1");
    sc_trace(mVcdFile, grp_fu_431_p0, "grp_fu_431_p0");
    sc_trace(mVcdFile, grp_fu_431_p1, "grp_fu_431_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Matrix34Multiply.hdltvin.dat");
    mHdltvoutHandle.open("Matrix34Multiply.hdltvout.dat");
}

Matrix34Multiply::~Matrix34Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U1;
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U2;
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U3;
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U4;
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U5;
    delete Matrix34Multiply_fadd_32ns_32ns_32_4_full_dsp_1_U6;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U7;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U8;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U9;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U10;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U11;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U12;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U13;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U14;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U15;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U16;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U17;
    delete Matrix34Multiply_fmul_32ns_32ns_32_3_max_dsp_1_U18;
}

void Matrix34Multiply::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Matrix34Multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        reg_459 = a_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_459 = a_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        reg_470 = a_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        reg_470 = a_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        reg_513 = a_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        reg_513 = a_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        a_load_2_reg_783 = a_q0.read();
        a_load_6_reg_794 = a_q1.read();
        tmp_26_reg_800 = grp_fu_423_p2.read();
        tmp_35_reg_805 = grp_fu_427_p2.read();
        tmp_36_reg_810 = grp_fu_431_p2.read();
        tmp_41_reg_815 = grp_fu_435_p2.read();
        tmp_42_reg_820 = grp_fu_439_p2.read();
        tmp_46_reg_830 = grp_fu_443_p2.read();
        tmp_47_reg_835 = grp_fu_447_p2.read();
        tmp_56_reg_840 = grp_fu_451_p2.read();
        tmp_57_reg_845 = grp_fu_455_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_load_5_reg_693 = a_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_load_8_reg_733 = a_q0.read();
        a_load_9_reg_741 = a_q1.read();
        b_load_3_reg_709 = b_q0.read();
        b_load_4_reg_716 = b_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_load_6_reg_749 = b_q0.read();
        b_load_7_reg_756 = b_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_478 = b_q0.read();
        reg_487 = b_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        reg_496 = b_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_504 = b_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        reg_521 = grp_fu_411_p2.read();
        reg_527 = grp_fu_415_p2.read();
        reg_533 = grp_fu_419_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        reg_539 = grp_fu_423_p2.read();
        reg_545 = grp_fu_427_p2.read();
        reg_551 = grp_fu_431_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        reg_557 = grp_fu_411_p2.read();
        reg_563 = grp_fu_415_p2.read();
        reg_569 = grp_fu_419_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        reg_575 = grp_fu_411_p2.read();
        reg_581 = grp_fu_415_p2.read();
        reg_587 = grp_fu_419_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        reg_593 = grp_fu_387_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        reg_599 = grp_fu_391_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        reg_606 = grp_fu_395_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        reg_613 = grp_fu_391_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        reg_619 = grp_fu_395_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        reg_625 = grp_fu_399_p2.read();
        reg_631 = grp_fu_403_p2.read();
        reg_637 = grp_fu_407_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_11_reg_875 = grp_fu_387_p2.read();
        tmp_32_reg_880 = grp_fu_391_p2.read();
        tmp_53_reg_885 = grp_fu_395_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_31_reg_855 = grp_fu_423_p2.read();
        tmp_51_reg_860 = grp_fu_427_p2.read();
        tmp_52_reg_865 = grp_fu_431_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_7_reg_870 = grp_fu_387_p2.read();
    }
}

void Matrix34Multiply::thread_a_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        a_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        a_address0 = "XXXXX";
    }
}

void Matrix34Multiply::thread_a_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        a_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else {
        a_address1 = "XXXXX";
    }
}

void Matrix34Multiply::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_a_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        a_ce1 = ap_const_logic_1;
    } else {
        a_ce1 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Matrix34Multiply::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Matrix34Multiply::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Matrix34Multiply::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Matrix34Multiply::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Matrix34Multiply::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Matrix34Multiply::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Matrix34Multiply::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Matrix34Multiply::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Matrix34Multiply::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Matrix34Multiply::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Matrix34Multiply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Matrix34Multiply::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Matrix34Multiply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Matrix34Multiply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Matrix34Multiply::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Matrix34Multiply::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Matrix34Multiply::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Matrix34Multiply::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Matrix34Multiply::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Matrix34Multiply::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_b_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        b_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else {
        b_address0 = "XXXXX";
    }
}

void Matrix34Multiply::thread_b_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        b_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else {
        b_address1 = "XXXXX";
    }
}

void Matrix34Multiply::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_b_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        b_ce1 = ap_const_logic_1;
    } else {
        b_ce1 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_grp_fu_387_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_387_p0 = reg_606.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_387_p0 = reg_599.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_387_p0 = tmp_11_reg_875.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_387_p0 = tmp_7_reg_870.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_387_p0 = reg_593.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_387_p0 = reg_575.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_387_p0 = reg_557.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_387_p0 = reg_521.read();
    } else {
        grp_fu_387_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_387_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_387_p1 = reg_470.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_387_p1 = reg_459.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_387_p1 = reg_575.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_387_p1 = reg_557.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_387_p1 = reg_521.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_387_p1 = reg_581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_387_p1 = reg_563.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_387_p1 = reg_527.read();
    } else {
        grp_fu_387_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_391_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_391_p0 = reg_637.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_391_p0 = tmp_32_reg_880.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_391_p0 = reg_613.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_391_p0 = reg_599.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_391_p0 = reg_587.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_391_p0 = reg_569.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_391_p0 = reg_533.read();
    } else {
        grp_fu_391_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_391_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_391_p1 = reg_513.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_391_p1 = reg_581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_391_p1 = reg_563.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_391_p1 = reg_527.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_391_p1 = tmp_31_reg_855.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_391_p1 = tmp_26_reg_800.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_391_p1 = reg_539.read();
    } else {
        grp_fu_391_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_395_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_395_p0 = tmp_53_reg_885.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_395_p0 = reg_619.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_395_p0 = reg_606.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_395_p0 = tmp_51_reg_860.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_395_p0 = tmp_35_reg_805.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_395_p0 = reg_545.read();
    } else {
        grp_fu_395_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_395_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_395_p1 = reg_587.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_395_p1 = reg_569.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_395_p1 = reg_533.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_395_p1 = tmp_52_reg_865.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_395_p1 = tmp_36_reg_810.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_395_p1 = reg_551.read();
    } else {
        grp_fu_395_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_399_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_399_p0 = reg_625.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_399_p0 = tmp_41_reg_815.read();
    } else {
        grp_fu_399_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_399_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_399_p1 = reg_539.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_399_p1 = tmp_42_reg_820.read();
    } else {
        grp_fu_399_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_403_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_403_p0 = reg_631.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_403_p0 = tmp_46_reg_830.read();
    } else {
        grp_fu_403_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_403_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_403_p1 = reg_545.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_403_p1 = tmp_47_reg_835.read();
    } else {
        grp_fu_403_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_407_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_407_p0 = reg_637.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_407_p0 = tmp_56_reg_840.read();
    } else {
        grp_fu_407_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_407_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_407_p1 = reg_551.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_407_p1 = tmp_57_reg_845.read();
    } else {
        grp_fu_407_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_411_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_fu_411_p0 = a_load_2_reg_783.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_411_p0 = reg_459.read();
    } else {
        grp_fu_411_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_411_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_411_p1 = reg_504.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_411_p1 = reg_478.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_411_p1 = b_load_6_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_411_p1 = b_load_3_reg_709.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_411_p1 = reg_496.read();
    } else {
        grp_fu_411_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_415_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_fu_415_p0 = a_load_6_reg_794.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_415_p0 = a_load_2_reg_783.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_415_p0 = reg_470.read();
    } else {
        grp_fu_415_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_415_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_415_p1 = reg_496.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_415_p1 = reg_487.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_415_p1 = b_load_7_reg_756.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_415_p1 = b_load_4_reg_716.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_415_p1 = reg_504.read();
    } else {
        grp_fu_415_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_419_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_419_p0 = a_load_6_reg_794.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_419_p0 = reg_513.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_419_p0 = reg_459.read();
    } else {
        grp_fu_419_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_419_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_419_p1 = reg_504.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_419_p1 = reg_487.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_419_p1 = b_load_6_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_419_p1 = b_load_3_reg_709.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_419_p1 = reg_478.read();
    } else {
        grp_fu_419_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_423_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_423_p0 = reg_459.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_423_p0 = a_load_5_reg_693.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_423_p0 = reg_470.read();
    } else {
        grp_fu_423_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_423_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_423_p1 = reg_478.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_423_p1 = b_load_7_reg_756.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_423_p1 = b_load_4_reg_716.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_423_p1 = reg_487.read();
    } else {
        grp_fu_423_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_427_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_427_p0 = reg_459.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_427_p0 = a_load_8_reg_733.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_427_p0 = reg_513.read();
    } else {
        grp_fu_427_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_427_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_427_p1 = b_load_6_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_427_p1 = reg_478.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_427_p1 = reg_496.read();
    } else {
        grp_fu_427_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_431_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_431_p0 = reg_459.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_431_p0 = a_load_9_reg_741.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_431_p0 = a_load_5_reg_693.read();
    } else {
        grp_fu_431_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_grp_fu_431_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_431_p1 = b_load_7_reg_756.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_431_p1 = reg_487.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_fu_431_p1 = reg_504.read();
    } else {
        grp_fu_431_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_out_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        out_r_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        out_r_address0 = "XXXXX";
    }
}

void Matrix34Multiply::thread_out_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        out_r_address1 =  (sc_lv<5>) (ap_const_lv64_4);
    } else {
        out_r_address1 = "XXXXX";
    }
}

void Matrix34Multiply::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_out_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_r_ce1 = ap_const_logic_1;
    } else {
        out_r_ce1 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_out_r_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        out_r_d0 = reg_625.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_r_d0 = reg_593.read();
    } else {
        out_r_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_out_r_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_r_d1 = reg_599.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        out_r_d1 = reg_619.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        out_r_d1 = reg_631.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        out_r_d1 = reg_613.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        out_r_d1 = reg_606.read();
    } else {
        out_r_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Matrix34Multiply::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_out_r_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_r_we1 = ap_const_logic_1;
    } else {
        out_r_we1 = ap_const_logic_0;
    }
}

void Matrix34Multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void Matrix34Multiply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address1\" :  \"" << a_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce1\" :  \"" << a_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q1\" :  \"" << a_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address1\" :  \"" << b_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce1\" :  \"" << b_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q1\" :  \"" << b_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address1\" :  \"" << out_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce1\" :  \"" << out_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we1\" :  \"" << out_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d1\" :  \"" << out_r_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

