// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="XGI_AjustCRT2Rate,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=22,HLS_SYN_LUT=98,HLS_VERSION=2019_1}" *)

module XGI_AjustCRT2Rate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ModeIdIndex,
        RefreshRateTableIndex,
        i_address0,
        i_ce0,
        i_we0,
        i_d0,
        i_q0,
        pVBInfo_VBInfo,
        pVBInfo_VBType,
        pVBInfo_LCDResInfo,
        pVBInfo_LCDInfo,
        pVBInfo_SetFlag,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ModeIdIndex;
input  [15:0] RefreshRateTableIndex;
output  [4:0] i_address0;
output   i_ce0;
output   i_we0;
output  [15:0] i_d0;
input  [15:0] i_q0;
input  [31:0] pVBInfo_VBInfo;
input  [31:0] pVBInfo_VBType;
input  [31:0] pVBInfo_LCDResInfo;
input  [31:0] pVBInfo_LCDInfo;
input  [31:0] pVBInfo_SetFlag;
output  [7:0] ap_return;

reg ap_idle;
reg[4:0] i_address0;
reg i_ce0;
reg i_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_addr_reg_74;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [15:0] add_ln103_fu_67_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln108_fu_61_p2;
reg   [15:0] empty_reg_52;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_reg_52 <= i_q0;
    end else if (((icmp_ln108_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_reg_52 <= add_ln103_fu_67_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_address0 = i_addr_reg_74;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_address0 = 64'd0;
    end else begin
        i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        i_ce0 = 1'b1;
    end else begin
        i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_we0 = 1'b1;
    end else begin
        i_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln108_fu_61_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_67_p2 = ($signed(empty_reg_52) + $signed(16'd65535));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign ap_return = 8'd0;

assign i_addr_reg_74 = 64'd0;

assign i_d0 = ($signed(empty_reg_52) + $signed(16'd65535));

assign icmp_ln108_fu_61_p2 = ((empty_reg_52 == 16'd0) ? 1'b1 : 1'b0);

endmodule //XGI_AjustCRT2Rate
