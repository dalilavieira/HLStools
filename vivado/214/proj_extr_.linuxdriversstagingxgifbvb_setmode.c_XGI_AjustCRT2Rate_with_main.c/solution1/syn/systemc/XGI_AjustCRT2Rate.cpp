// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "XGI_AjustCRT2Rate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic XGI_AjustCRT2Rate::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic XGI_AjustCRT2Rate::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state1 = "1";
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state2 = "10";
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state3 = "100";
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state4 = "1000";
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state5 = "10000";
const sc_lv<6> XGI_AjustCRT2Rate::ap_ST_fsm_state6 = "100000";
const sc_lv<32> XGI_AjustCRT2Rate::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> XGI_AjustCRT2Rate::ap_const_lv32_2 = "10";
const sc_lv<32> XGI_AjustCRT2Rate::ap_const_lv32_3 = "11";
const sc_lv<32> XGI_AjustCRT2Rate::ap_const_lv32_4 = "100";
const sc_lv<1> XGI_AjustCRT2Rate::ap_const_lv1_0 = "0";
const sc_lv<64> XGI_AjustCRT2Rate::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<16> XGI_AjustCRT2Rate::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> XGI_AjustCRT2Rate::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<1> XGI_AjustCRT2Rate::ap_const_lv1_1 = "1";
const sc_lv<8> XGI_AjustCRT2Rate::ap_const_lv8_0 = "00000000";
const bool XGI_AjustCRT2Rate::ap_const_boolean_1 = true;

XGI_AjustCRT2Rate::XGI_AjustCRT2Rate(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln103_fu_67_p2);
    sensitive << ( empty_reg_52 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);

    SC_METHOD(thread_i_addr_reg_74);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_address0);
    sensitive << ( i_addr_reg_74 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( empty_reg_52 );

    SC_METHOD(thread_i_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln108_fu_61_p2 );

    SC_METHOD(thread_icmp_ln108_fu_61_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( empty_reg_52 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln108_fu_61_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "XGI_AjustCRT2Rate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ModeIdIndex, "(port)ModeIdIndex");
    sc_trace(mVcdFile, RefreshRateTableIndex, "(port)RefreshRateTableIndex");
    sc_trace(mVcdFile, i_address0, "(port)i_address0");
    sc_trace(mVcdFile, i_ce0, "(port)i_ce0");
    sc_trace(mVcdFile, i_we0, "(port)i_we0");
    sc_trace(mVcdFile, i_d0, "(port)i_d0");
    sc_trace(mVcdFile, i_q0, "(port)i_q0");
    sc_trace(mVcdFile, pVBInfo_VBInfo, "(port)pVBInfo_VBInfo");
    sc_trace(mVcdFile, pVBInfo_VBType, "(port)pVBInfo_VBType");
    sc_trace(mVcdFile, pVBInfo_LCDResInfo, "(port)pVBInfo_LCDResInfo");
    sc_trace(mVcdFile, pVBInfo_LCDInfo, "(port)pVBInfo_LCDInfo");
    sc_trace(mVcdFile, pVBInfo_SetFlag, "(port)pVBInfo_SetFlag");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_addr_reg_74, "i_addr_reg_74");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, add_ln103_fu_67_p2, "add_ln103_fu_67_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln108_fu_61_p2, "icmp_ln108_fu_61_p2");
    sc_trace(mVcdFile, empty_reg_52, "empty_reg_52");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("XGI_AjustCRT2Rate.hdltvin.dat");
    mHdltvoutHandle.open("XGI_AjustCRT2Rate.hdltvout.dat");
}

XGI_AjustCRT2Rate::~XGI_AjustCRT2Rate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void XGI_AjustCRT2Rate::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        empty_reg_52 = i_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln108_fu_61_p2.read(), ap_const_lv1_0))) {
        empty_reg_52 = add_ln103_fu_67_p2.read();
    }
}

void XGI_AjustCRT2Rate::thread_add_ln103_fu_67_p2() {
    add_ln103_fu_67_p2 = (!empty_reg_52.read().is_01() || !ap_const_lv16_FFFF.is_01())? sc_lv<16>(): (sc_biguint<16>(empty_reg_52.read()) + sc_bigint<16>(ap_const_lv16_FFFF));
}

void XGI_AjustCRT2Rate::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void XGI_AjustCRT2Rate::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void XGI_AjustCRT2Rate::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void XGI_AjustCRT2Rate::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void XGI_AjustCRT2Rate::thread_ap_done() {
    ap_done = ap_const_logic_0;
}

void XGI_AjustCRT2Rate::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void XGI_AjustCRT2Rate::thread_ap_ready() {
    ap_ready = ap_const_logic_0;
}

void XGI_AjustCRT2Rate::thread_ap_return() {
    ap_return = ap_const_lv8_0;
}

void XGI_AjustCRT2Rate::thread_i_addr_reg_74() {
    i_addr_reg_74 =  (sc_lv<5>) (ap_const_lv64_0);
}

void XGI_AjustCRT2Rate::thread_i_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_address0 = i_addr_reg_74.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        i_address0 = "XXXXX";
    }
}

void XGI_AjustCRT2Rate::thread_i_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        i_ce0 = ap_const_logic_1;
    } else {
        i_ce0 = ap_const_logic_0;
    }
}

void XGI_AjustCRT2Rate::thread_i_d0() {
    i_d0 = (!empty_reg_52.read().is_01() || !ap_const_lv16_FFFF.is_01())? sc_lv<16>(): (sc_biguint<16>(empty_reg_52.read()) + sc_bigint<16>(ap_const_lv16_FFFF));
}

void XGI_AjustCRT2Rate::thread_i_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln108_fu_61_p2.read(), ap_const_lv1_0))) {
        i_we0 = ap_const_logic_1;
    } else {
        i_we0 = ap_const_logic_0;
    }
}

void XGI_AjustCRT2Rate::thread_icmp_ln108_fu_61_p2() {
    icmp_ln108_fu_61_p2 = (!empty_reg_52.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(empty_reg_52.read() == ap_const_lv16_0);
}

void XGI_AjustCRT2Rate::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln108_fu_61_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void XGI_AjustCRT2Rate::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ModeIdIndex\" :  \"" << ModeIdIndex.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RefreshRateTableIndex\" :  \"" << RefreshRateTableIndex.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_address0\" :  \"" << i_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_ce0\" :  \"" << i_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_we0\" :  \"" << i_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"i_d0\" :  \"" << i_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_q0\" :  \"" << i_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pVBInfo_VBInfo\" :  \"" << pVBInfo_VBInfo.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pVBInfo_VBType\" :  \"" << pVBInfo_VBType.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pVBInfo_LCDResInfo\" :  \"" << pVBInfo_LCDResInfo.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pVBInfo_LCDInfo\" :  \"" << pVBInfo_LCDInfo.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pVBInfo_SetFlag\" :  \"" << pVBInfo_SetFlag.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

