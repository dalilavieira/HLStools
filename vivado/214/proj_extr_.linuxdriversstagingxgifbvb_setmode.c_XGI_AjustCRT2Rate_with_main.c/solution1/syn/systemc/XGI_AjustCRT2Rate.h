// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _XGI_AjustCRT2Rate_HH_
#define _XGI_AjustCRT2Rate_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct XGI_AjustCRT2Rate : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > ModeIdIndex;
    sc_in< sc_lv<16> > RefreshRateTableIndex;
    sc_out< sc_lv<5> > i_address0;
    sc_out< sc_logic > i_ce0;
    sc_out< sc_logic > i_we0;
    sc_out< sc_lv<16> > i_d0;
    sc_in< sc_lv<16> > i_q0;
    sc_in< sc_lv<32> > pVBInfo_VBInfo;
    sc_in< sc_lv<32> > pVBInfo_VBType;
    sc_in< sc_lv<32> > pVBInfo_LCDResInfo;
    sc_in< sc_lv<32> > pVBInfo_LCDInfo;
    sc_in< sc_lv<32> > pVBInfo_SetFlag;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    XGI_AjustCRT2Rate(sc_module_name name);
    SC_HAS_PROCESS(XGI_AjustCRT2Rate);

    ~XGI_AjustCRT2Rate();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_addr_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<16> > add_ln103_fu_67_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln108_fu_61_p2;
    sc_signal< sc_lv<16> > empty_reg_52;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln103_fu_67_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_addr_reg_74();
    void thread_i_address0();
    void thread_i_ce0();
    void thread_i_d0();
    void thread_i_we0();
    void thread_icmp_ln108_fu_61_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
