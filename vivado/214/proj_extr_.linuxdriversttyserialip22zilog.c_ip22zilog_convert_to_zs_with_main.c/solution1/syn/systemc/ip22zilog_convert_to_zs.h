// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ip22zilog_convert_to_zs_HH_
#define _ip22zilog_convert_to_zs_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ip22zilog_convert_to_zs : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > up_curregs_address0;
    sc_out< sc_logic > up_curregs_ce0;
    sc_out< sc_logic > up_curregs_we0;
    sc_out< sc_lv<32> > up_curregs_d0;
    sc_in< sc_lv<32> > up_curregs_q0;
    sc_out< sc_lv<7> > up_curregs_address1;
    sc_out< sc_logic > up_curregs_ce1;
    sc_out< sc_logic > up_curregs_we1;
    sc_out< sc_lv<32> > up_curregs_d1;
    sc_in< sc_lv<32> > up_curregs_q1;
    sc_out< sc_lv<32> > up_parity_mask;
    sc_out< sc_logic > up_parity_mask_ap_vld;
    sc_out< sc_lv<32> > up_port_read_status_mask;
    sc_out< sc_logic > up_port_read_status_mask_ap_vld;
    sc_out< sc_lv<32> > up_port_ignore_status_mask;
    sc_out< sc_logic > up_port_ignore_status_mask_ap_vld;
    sc_in< sc_lv<32> > cflag;
    sc_in< sc_lv<32> > iflag;
    sc_in< sc_lv<32> > brg;


    // Module declarations
    ip22zilog_convert_to_zs(sc_module_name name);
    SC_HAS_PROCESS(ip22zilog_convert_to_zs);

    ~ip22zilog_convert_to_zs();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<32> > reg_139;
    sc_signal< sc_lv<7> > up_curregs_addr_reg_192;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > up_curregs_addr_1_reg_204;
    sc_signal< sc_lv<7> > up_curregs_addr_2_reg_209;
    sc_signal< sc_lv<8> > trunc_ln74_1_reg_214;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > and_ln_fu_158_p4;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > zext_ln73_fu_173_p1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > zext_ln74_fu_188_p1;
    sc_signal< sc_lv<28> > tmp_fu_144_p4;
    sc_signal< sc_lv<2> > trunc_ln103_fu_154_p1;
    sc_signal< sc_lv<8> > trunc_ln73_fu_169_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln_fu_158_p4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_tmp_fu_144_p4();
    void thread_trunc_ln103_fu_154_p1();
    void thread_trunc_ln73_fu_169_p1();
    void thread_up_curregs_addr_1_reg_204();
    void thread_up_curregs_addr_2_reg_209();
    void thread_up_curregs_addr_reg_192();
    void thread_up_curregs_address0();
    void thread_up_curregs_address1();
    void thread_up_curregs_ce0();
    void thread_up_curregs_ce1();
    void thread_up_curregs_d0();
    void thread_up_curregs_d1();
    void thread_up_curregs_we0();
    void thread_up_curregs_we1();
    void thread_up_parity_mask();
    void thread_up_parity_mask_ap_vld();
    void thread_up_port_ignore_status_mask();
    void thread_up_port_ignore_status_mask_ap_vld();
    void thread_up_port_read_status_mask();
    void thread_up_port_read_status_mask_ap_vld();
    void thread_zext_ln73_fu_173_p1();
    void thread_zext_ln74_fu_188_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
