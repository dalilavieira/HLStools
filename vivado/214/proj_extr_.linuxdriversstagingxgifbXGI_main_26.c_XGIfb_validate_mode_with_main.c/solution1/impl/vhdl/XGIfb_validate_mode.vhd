-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity XGIfb_validate_mode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xgifb_info_chip : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_display2 : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_video_size : IN STD_LOGIC_VECTOR (63 downto 0);
    xgifb_info_TV_type : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_hasVB : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_lvds_data_LVDSHDE : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_lvds_data_LVDSVDE : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_hw_info_ulCRT2LCDType : IN STD_LOGIC_VECTOR (31 downto 0);
    xgifb_info_hw_info_ulExternalChip : IN STD_LOGIC_VECTOR (31 downto 0);
    myindex : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of XGIfb_validate_mode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "XGIfb_validate_mode,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.546000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=110,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_119 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_123 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln56_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_65 : BOOLEAN;
    signal ap_condition_74 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln50_reg_119 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (grp_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln51_reg_123 <= icmp_ln51_fu_94_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln51_fu_94_p2 = ap_const_lv1_1) and (grp_fu_88_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_127 <= or_ln56_fu_100_p2(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_condition_65_assign_proc : process(grp_fu_88_p2, icmp_ln50_reg_119, icmp_ln51_reg_123, tmp_reg_127)
    begin
                ap_condition_65 <= ((((icmp_ln51_reg_123 = ap_const_lv1_0) and (icmp_ln50_reg_119 = ap_const_lv1_1)) or ((tmp_reg_127 = ap_const_lv1_0) and (icmp_ln50_reg_119 = ap_const_lv1_1))) or ((icmp_ln50_reg_119 = ap_const_lv1_0) and (grp_fu_88_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_74_assign_proc : process(grp_fu_88_p2, icmp_ln50_reg_119, icmp_ln51_reg_123, tmp_reg_127)
    begin
                ap_condition_74 <= (((icmp_ln50_reg_119 = ap_const_lv1_0) and (grp_fu_88_p2 = ap_const_lv1_0)) or ((tmp_reg_127 = ap_const_lv1_1) and (icmp_ln51_reg_123 = ap_const_lv1_1) and (icmp_ln50_reg_119 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_81_p4_assign_proc : process(myindex, ap_CS_fsm_state2, ap_condition_65, ap_condition_74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((ap_const_boolean_1 = ap_condition_74)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 <= ap_const_lv32_FFFFFFFF;
            elsif ((ap_const_boolean_1 = ap_condition_65)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 <= myindex;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_81_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_81_p4;
    grp_fu_88_p2 <= "1" when (xgifb_info_chip = ap_const_lv32_0) else "0";
    icmp_ln51_fu_94_p2 <= "1" when (xgifb_info_display2 = ap_const_lv32_82) else "0";
    or_ln56_fu_100_p2 <= (xgifb_info_lvds_data_LVDSVDE or xgifb_info_lvds_data_LVDSHDE);
end behav;
