// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ubc_check.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ubc_check::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<64> ubc_check::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool ubc_check::ap_const_boolean_1 = true;
const sc_logic ubc_check::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> ubc_check::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<7> ubc_check::ap_const_lv7_0 = "0000000";
const sc_lv<32> ubc_check::ap_const_lv32_0 = "00000000000000000000000000000000";

ubc_check::ubc_check(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_W_address0);

    SC_METHOD(thread_W_address1);

    SC_METHOD(thread_W_ce0);

    SC_METHOD(thread_W_ce1);

    SC_METHOD(thread_W_d0);

    SC_METHOD(thread_W_d1);

    SC_METHOD(thread_W_we0);

    SC_METHOD(thread_W_we1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_dvmask_address0);

    SC_METHOD(thread_dvmask_ce0);
    sensitive << ( ap_start );

    SC_METHOD(thread_dvmask_d0);

    SC_METHOD(thread_dvmask_we0);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ubc_check_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, W_address0, "(port)W_address0");
    sc_trace(mVcdFile, W_ce0, "(port)W_ce0");
    sc_trace(mVcdFile, W_we0, "(port)W_we0");
    sc_trace(mVcdFile, W_d0, "(port)W_d0");
    sc_trace(mVcdFile, W_q0, "(port)W_q0");
    sc_trace(mVcdFile, W_address1, "(port)W_address1");
    sc_trace(mVcdFile, W_ce1, "(port)W_ce1");
    sc_trace(mVcdFile, W_we1, "(port)W_we1");
    sc_trace(mVcdFile, W_d1, "(port)W_d1");
    sc_trace(mVcdFile, W_q1, "(port)W_q1");
    sc_trace(mVcdFile, dvmask_address0, "(port)dvmask_address0");
    sc_trace(mVcdFile, dvmask_ce0, "(port)dvmask_ce0");
    sc_trace(mVcdFile, dvmask_we0, "(port)dvmask_we0");
    sc_trace(mVcdFile, dvmask_d0, "(port)dvmask_d0");
#endif

    }
    mHdltvinHandle.open("ubc_check.hdltvin.dat");
    mHdltvoutHandle.open("ubc_check.hdltvout.dat");
}

ubc_check::~ubc_check() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ubc_check::thread_W_address0() {
    W_address0 = ap_const_lv7_0;
}

void ubc_check::thread_W_address1() {
    W_address1 = ap_const_lv7_0;
}

void ubc_check::thread_W_ce0() {
    W_ce0 = ap_const_logic_0;
}

void ubc_check::thread_W_ce1() {
    W_ce1 = ap_const_logic_0;
}

void ubc_check::thread_W_d0() {
    W_d0 = ap_const_lv32_0;
}

void ubc_check::thread_W_d1() {
    W_d1 = ap_const_lv32_0;
}

void ubc_check::thread_W_we0() {
    W_we0 = ap_const_logic_0;
}

void ubc_check::thread_W_we1() {
    W_we1 = ap_const_logic_0;
}

void ubc_check::thread_ap_done() {
    ap_done = ap_start.read();
}

void ubc_check::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void ubc_check::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void ubc_check::thread_dvmask_address0() {
    dvmask_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void ubc_check::thread_dvmask_ce0() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        dvmask_ce0 = ap_const_logic_1;
    } else {
        dvmask_ce0 = ap_const_logic_0;
    }
}

void ubc_check::thread_dvmask_d0() {
    dvmask_d0 = ap_const_lv32_FFFFFFFF;
}

void ubc_check::thread_dvmask_we0() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        dvmask_we0 = ap_const_logic_1;
    } else {
        dvmask_we0 = ap_const_logic_0;
    }
}

void ubc_check::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_address0\" :  \"" << W_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_ce0\" :  \"" << W_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_we0\" :  \"" << W_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_d0\" :  \"" << W_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"W_q0\" :  \"" << W_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_address1\" :  \"" << W_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_ce1\" :  \"" << W_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_we1\" :  \"" << W_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"W_d1\" :  \"" << W_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"W_q1\" :  \"" << W_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dvmask_address0\" :  \"" << dvmask_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dvmask_ce0\" :  \"" << dvmask_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dvmask_we0\" :  \"" << dvmask_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dvmask_d0\" :  \"" << dvmask_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

