-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc_crc8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data : IN STD_LOGIC_VECTOR (31 downto 0);
    crc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calc_crc8 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calc_crc8,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.698000,HLS_SYN_LAT=76,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=200,HLS_SYN_LUT=1356,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_631_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln28_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln34_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal D_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_1_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_2_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal D_load_3_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_4_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal D_load_5_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_6_reg_1504 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal D_load_7_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_8_reg_1528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal D_load_9_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_10_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal D_load_11_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_12_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal D_load_13_reg_1584 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_14_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal D_load_15_reg_1606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal D_load_16_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_17_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal D_load_18_reg_1670 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_19_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_1_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal C_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_2_reg_1700 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_20_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_21_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_reg_1737 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_7_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_7_reg_1744 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_9_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_9_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_reg_1760 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_6_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_6_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_2_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_2_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_1_reg_1776 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_3_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_3_reg_1781 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_6_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_6_reg_1786 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_4_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_4_reg_1791 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_1_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_1_reg_1796 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_22_reg_1801 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal C_load_3_reg_1806 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_4_reg_1812 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_23_reg_1820 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_5_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_5_reg_1842 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_5_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_5_reg_1847 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_24_reg_1852 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal D_load_25_reg_1858 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_load_5_reg_1864 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_26_reg_1880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal D_load_27_reg_1887 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_28_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal C_load_6_reg_1914 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_load_29_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_9_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_9_reg_1937 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_7_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_7_reg_1947 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_7_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_7_reg_1952 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_12_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_12_reg_1957 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xor_ln59_12_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_12_reg_1962 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln64_fu_1331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln64_reg_1967 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_4_fu_1341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_1975 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln64_fu_1335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal crc_res_fu_1381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal D_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal D_ce0 : STD_LOGIC;
    signal D_we0 : STD_LOGIC;
    signal D_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal D_ce1 : STD_LOGIC;
    signal NewCRC_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal NewCRC_ce0 : STD_LOGIC;
    signal NewCRC_we0 : STD_LOGIC;
    signal NewCRC_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal NewCRC_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal NewCRC_ce1 : STD_LOGIC;
    signal NewCRC_we1 : STD_LOGIC;
    signal NewCRC_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal NewCRC_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal i_0_reg_562 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_01_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_602 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal crc_res_0_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_1347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_15_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_18_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_15_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_14_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_15_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_15_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_fu_647_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln3_fu_683_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln37_2_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_5_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_4_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_6_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_3_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_9_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_8_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_12_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_11_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_13_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_10_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_14_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_7_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_3_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_5_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_4_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_6_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_2_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_1_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_4_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_3_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_5_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_2_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_1_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_4_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_2_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_5_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_1_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_2_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_3_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_1_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_10_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_8_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_12_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_14_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_15_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_13_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_16_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_11_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_17_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_3_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_4_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_3_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_2_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_4_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_8_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_7_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_11_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_12_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_10_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_13_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_9_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_14_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_7_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_6_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_10_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_11_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_9_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_12_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_8_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_13_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_7_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_8_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_6_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_6_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_5_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_6_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_3_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_2_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_4_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_11_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_12_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_10_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_13_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_14_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_5_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_8_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_7_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_11_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_12_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_10_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_13_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_9_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_14_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_9_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_8_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_10_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_11_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_9_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_8_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_10_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_11_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_1_fu_1352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_1361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln65_fu_1356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1371_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln65_fu_1365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component calc_crc8_D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component calc_crc8_NewCRC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component calc_crc8_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    D_U : component calc_crc8_D
    generic map (
        DataWidth => 1,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_address0,
        ce0 => D_ce0,
        we0 => D_we0,
        d0 => D_d0,
        q0 => D_q0,
        address1 => D_address1,
        ce1 => D_ce1,
        q1 => D_q1);

    NewCRC_U : component calc_crc8_NewCRC
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => NewCRC_address0,
        ce0 => NewCRC_ce0,
        we0 => NewCRC_we0,
        d0 => NewCRC_d0,
        address1 => NewCRC_address1,
        ce1 => NewCRC_ce1,
        we1 => NewCRC_we1,
        d1 => NewCRC_d1,
        q1 => NewCRC_q1);

    C_U : component calc_crc8_C
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0,
        address1 => C_address1,
        ce1 => C_ce1,
        q1 => C_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    crc_res_0_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                crc_res_0_reg_613 <= crc_res_fu_1381_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                crc_res_0_reg_613 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_625_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_562 <= i_fu_631_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_562 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_625_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_582 <= ap_const_lv4_0;
            elsif (((icmp_ln32_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_582 <= i_3_fu_667_p2;
            end if; 
        end if;
    end process;

    i_2_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_2_reg_602 <= i_4_reg_1975;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_2_reg_602 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_01_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_625_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_01_reg_593 <= crc;
            elsif (((icmp_ln32_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_01_reg_593 <= sext_ln34_fu_693_p1;
            end if; 
        end if;
    end process;

    p_0_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_625_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_573 <= sext_ln28_fu_657_p1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_reg_573 <= data;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                C_load_1_reg_1693 <= C_q0;
                C_load_2_reg_1700 <= C_q1;
                D_load_20_reg_1710 <= D_q1;
                D_load_21_reg_1716 <= D_q0;
                xor_ln37_reg_1705 <= xor_ln37_fu_697_p2;
                xor_ln40_7_reg_1744 <= xor_ln40_7_fu_814_p2;
                xor_ln40_9_reg_1749 <= xor_ln40_9_fu_820_p2;
                xor_ln40_reg_1737 <= xor_ln40_fu_779_p2;
                xor_ln44_6_reg_1766 <= xor_ln44_6_fu_853_p2;
                xor_ln44_reg_1760 <= xor_ln44_fu_824_p2;
                xor_ln47_2_reg_1771 <= xor_ln47_2_fu_867_p2;
                xor_ln50_1_reg_1776 <= xor_ln50_1_fu_877_p2;
                xor_ln53_3_reg_1781 <= xor_ln53_3_fu_898_p2;
                xor_ln53_6_reg_1786 <= xor_ln53_6_fu_914_p2;
                xor_ln56_4_reg_1791 <= xor_ln56_4_fu_939_p2;
                xor_ln59_1_reg_1796 <= xor_ln59_1_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                C_load_3_reg_1806 <= C_q1;
                C_load_4_reg_1812 <= C_q0;
                D_load_22_reg_1801 <= D_q1;
                D_load_23_reg_1820 <= D_q0;
                xor_ln47_5_reg_1842 <= xor_ln47_5_fu_1017_p2;
                xor_ln59_5_reg_1847 <= xor_ln59_5_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                C_load_5_reg_1864 <= C_q1;
                D_load_24_reg_1852 <= D_q1;
                D_load_25_reg_1858 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                C_load_6_reg_1914 <= C_q1;
                D_load_28_reg_1909 <= D_q1;
                D_load_29_reg_1920 <= D_q0;
                xor_ln50_9_reg_1937 <= xor_ln50_9_fu_1150_p2;
                xor_ln56_7_reg_1947 <= xor_ln56_7_fu_1164_p2;
                xor_ln59_7_reg_1952 <= xor_ln59_7_fu_1174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                C_load_reg_1652 <= C_q0;
                D_load_18_reg_1670 <= D_q1;
                D_load_19_reg_1677 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                D_load_10_reg_1553 <= D_q1;
                D_load_11_reg_1559 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                D_load_12_reg_1576 <= D_q1;
                D_load_13_reg_1584 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                D_load_14_reg_1600 <= D_q1;
                D_load_15_reg_1606 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                D_load_16_reg_1628 <= D_q1;
                D_load_17_reg_1635 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                D_load_1_reg_1441 <= D_q1;
                D_load_reg_1435 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                D_load_26_reg_1880 <= D_q1;
                D_load_27_reg_1887 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                D_load_2_reg_1457 <= D_q1;
                D_load_3_reg_1464 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                D_load_4_reg_1480 <= D_q1;
                D_load_5_reg_1487 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                D_load_6_reg_1504 <= D_q1;
                D_load_7_reg_1511 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                D_load_8_reg_1528 <= D_q1;
                D_load_9_reg_1536 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_4_reg_1975 <= i_4_fu_1341_p2;
                    zext_ln64_reg_1967(3 downto 0) <= zext_ln64_fu_1331_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                xor_ln56_12_reg_1957 <= xor_ln56_12_fu_1300_p2;
                xor_ln59_12_reg_1962 <= xor_ln59_12_fu_1326_p2;
            end if;
        end if;
    end process;
    zext_ln64_reg_1967(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln26_fu_625_p2, ap_CS_fsm_state3, icmp_ln32_fu_661_p2, ap_CS_fsm_state21, icmp_ln64_fu_1335_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln26_fu_625_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln32_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln64_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    C_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln33_fu_673_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            C_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            C_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            C_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= zext_ln33_fu_673_p1(3 - 1 downto 0);
        else 
            C_address0 <= "XXX";
        end if; 
    end process;


    C_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            C_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            C_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            C_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        else 
            C_address1 <= "XXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= p_01_reg_593(1 - 1 downto 0);

    C_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln32_fu_661_p2)
    begin
        if (((icmp_ln32_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln27_fu_637_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            D_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            D_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            D_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            D_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            D_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            D_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            D_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            D_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            D_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            D_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            D_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            D_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            D_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            D_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            D_address0 <= zext_ln27_fu_637_p1(5 - 1 downto 0);
        else 
            D_address0 <= "XXXXX";
        end if; 
    end process;


    D_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            D_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            D_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            D_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            D_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            D_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            D_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            D_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            D_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            D_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            D_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            D_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            D_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            D_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            D_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            D_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            D_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        else 
            D_address1 <= "XXXXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            D_ce1 <= ap_const_logic_1;
        else 
            D_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= p_0_reg_573(1 - 1 downto 0);

    D_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln26_fu_625_p2)
    begin
        if (((icmp_ln26_fu_625_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;


    NewCRC_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NewCRC_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NewCRC_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            NewCRC_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NewCRC_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NewCRC_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            NewCRC_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            NewCRC_address0 <= "XXX";
        end if; 
    end process;


    NewCRC_address1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state20, zext_ln65_fu_1347_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            NewCRC_address1 <= zext_ln65_fu_1347_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NewCRC_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NewCRC_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        else 
            NewCRC_address1 <= "XXX";
        end if; 
    end process;


    NewCRC_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            NewCRC_ce0 <= ap_const_logic_1;
        else 
            NewCRC_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NewCRC_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NewCRC_ce1 <= ap_const_logic_1;
        else 
            NewCRC_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    NewCRC_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, xor_ln59_12_reg_1962, ap_CS_fsm_state20, xor_ln37_15_fu_772_p2, xor_ln40_18_fu_1001_p2, xor_ln44_15_fu_1083_p2, xor_ln47_14_fu_1130_p2, xor_ln50_15_fu_1224_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NewCRC_d0 <= xor_ln59_12_reg_1962;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NewCRC_d0 <= xor_ln50_15_fu_1224_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            NewCRC_d0 <= xor_ln47_14_fu_1130_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            NewCRC_d0 <= xor_ln44_15_fu_1083_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            NewCRC_d0 <= xor_ln40_18_fu_1001_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            NewCRC_d0 <= xor_ln37_15_fu_772_p2;
        else 
            NewCRC_d0 <= "X";
        end if; 
    end process;


    NewCRC_d1_assign_proc : process(xor_ln56_12_reg_1957, ap_CS_fsm_state19, ap_CS_fsm_state20, xor_ln53_15_fu_1273_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            NewCRC_d1 <= xor_ln56_12_reg_1957;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            NewCRC_d1 <= xor_ln53_15_fu_1273_p2;
        else 
            NewCRC_d1 <= "X";
        end if; 
    end process;


    NewCRC_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            NewCRC_we0 <= ap_const_logic_1;
        else 
            NewCRC_we0 <= ap_const_logic_0;
        end if; 
    end process;


    NewCRC_we1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            NewCRC_we1 <= ap_const_logic_1;
        else 
            NewCRC_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21, icmp_ln64_fu_1335_p2)
    begin
        if (((icmp_ln64_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln64_fu_1335_p2)
    begin
        if (((icmp_ln64_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= crc_res_0_reg_613;
    crc_res_fu_1381_p3 <= (tmp_fu_1371_p4 & or_ln65_fu_1365_p2);
    i_3_fu_667_p2 <= std_logic_vector(unsigned(i_1_reg_582) + unsigned(ap_const_lv4_1));
    i_4_fu_1341_p2 <= std_logic_vector(unsigned(i_2_reg_602) + unsigned(ap_const_lv4_1));
    i_fu_631_p2 <= std_logic_vector(unsigned(i_0_reg_562) + unsigned(ap_const_lv6_1));
    icmp_ln26_fu_625_p2 <= "1" when (i_0_reg_562 = ap_const_lv6_20) else "0";
    icmp_ln32_fu_661_p2 <= "1" when (i_1_reg_582 = ap_const_lv4_8) else "0";
    icmp_ln64_fu_1335_p2 <= "1" when (i_2_reg_602 = ap_const_lv4_8) else "0";
    or_ln65_fu_1365_p2 <= (trunc_ln65_fu_1361_p1 or shl_ln65_fu_1356_p2);
        sext_ln28_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_647_p4),32));

        sext_ln34_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_683_p4),32));

    shl_ln65_fu_1356_p2 <= std_logic_vector(shift_left(unsigned(zext_ln65_1_fu_1352_p1),to_integer(unsigned('0' & zext_ln64_reg_1967(8-1 downto 0)))));
    tmp_fu_1371_p4 <= crc_res_0_reg_613(31 downto 8);
    trunc_ln1_fu_647_p4 <= p_0_reg_573(31 downto 1);
    trunc_ln3_fu_683_p4 <= p_01_reg_593(31 downto 1);
    trunc_ln65_fu_1361_p1 <= crc_res_0_reg_613(8 - 1 downto 0);
    xor_ln37_10_fu_743_p2 <= (xor_ln37_9_fu_739_p2 xor xor_ln37_8_fu_735_p2);
    xor_ln37_11_fu_749_p2 <= (C_q0 xor C_load_reg_1652);
    xor_ln37_12_fu_754_p2 <= (xor_ln37_fu_697_p2 xor C_q1);
    xor_ln37_13_fu_760_p2 <= (xor_ln37_12_fu_754_p2 xor xor_ln37_11_fu_749_p2);
    xor_ln37_14_fu_766_p2 <= (xor_ln37_13_fu_760_p2 xor xor_ln37_10_fu_743_p2);
    xor_ln37_15_fu_772_p2 <= (xor_ln37_7_fu_729_p2 xor xor_ln37_14_fu_766_p2);
    xor_ln37_1_fu_701_p2 <= (D_load_3_reg_1464 xor D_load_2_reg_1457);
    xor_ln37_2_fu_705_p2 <= (D_load_5_reg_1487 xor D_load_4_reg_1480);
    xor_ln37_3_fu_709_p2 <= (xor_ln37_2_fu_705_p2 xor xor_ln37_1_fu_701_p2);
    xor_ln37_4_fu_715_p2 <= (D_load_7_reg_1511 xor D_load_6_reg_1504);
    xor_ln37_5_fu_719_p2 <= (D_load_9_reg_1536 xor D_load_8_reg_1528);
    xor_ln37_6_fu_723_p2 <= (xor_ln37_5_fu_719_p2 xor xor_ln37_4_fu_715_p2);
    xor_ln37_7_fu_729_p2 <= (xor_ln37_6_fu_723_p2 xor xor_ln37_3_fu_709_p2);
    xor_ln37_8_fu_735_p2 <= (D_load_11_reg_1559 xor D_load_10_reg_1553);
    xor_ln37_9_fu_739_p2 <= (D_load_13_reg_1584 xor D_load_12_reg_1576);
    xor_ln37_fu_697_p2 <= (D_load_reg_1435 xor D_load_1_reg_1441);
    xor_ln40_10_fu_958_p2 <= (xor_ln40_9_reg_1749 xor D_load_17_reg_1635);
    xor_ln40_11_fu_962_p2 <= (xor_ln40_8_fu_954_p2 xor xor_ln40_10_fu_958_p2);
    xor_ln40_12_fu_968_p2 <= (D_q1 xor D_load_21_reg_1716);
    xor_ln40_13_fu_973_p2 <= (xor_ln40_12_fu_968_p2 xor D_load_20_reg_1710);
    xor_ln40_14_fu_978_p2 <= (xor_ln40_reg_1737 xor C_q0);
    xor_ln40_15_fu_983_p2 <= (xor_ln40_14_fu_978_p2 xor C_q1);
    xor_ln40_16_fu_989_p2 <= (xor_ln40_15_fu_983_p2 xor xor_ln40_13_fu_973_p2);
    xor_ln40_17_fu_995_p2 <= (xor_ln40_16_fu_989_p2 xor xor_ln40_11_fu_962_p2);
    xor_ln40_18_fu_1001_p2 <= (xor_ln40_7_reg_1744 xor xor_ln40_17_fu_995_p2);
    xor_ln40_1_fu_783_p2 <= (xor_ln37_4_fu_715_p2 xor D_load_4_reg_1480);
    xor_ln40_2_fu_788_p2 <= (xor_ln40_1_fu_783_p2 xor xor_ln37_1_fu_701_p2);
    xor_ln40_3_fu_794_p2 <= (D_load_9_reg_1536 xor D_load_12_reg_1576);
    xor_ln40_4_fu_798_p2 <= (xor_ln40_3_fu_794_p2 xor D_load_8_reg_1528);
    xor_ln40_5_fu_803_p2 <= (xor_ln37_11_fu_749_p2 xor D_load_13_reg_1584);
    xor_ln40_6_fu_808_p2 <= (xor_ln40_5_fu_803_p2 xor xor_ln40_4_fu_798_p2);
    xor_ln40_7_fu_814_p2 <= (xor_ln40_6_fu_808_p2 xor xor_ln40_2_fu_788_p2);
    xor_ln40_8_fu_954_p2 <= (D_load_16_reg_1628 xor D_load_15_reg_1606);
    xor_ln40_9_fu_820_p2 <= (D_load_19_reg_1677 xor D_load_18_reg_1670);
    xor_ln40_fu_779_p2 <= (D_load_1_reg_1441 xor D_load_14_reg_1600);
    xor_ln44_10_fu_1055_p2 <= (D_q1 xor D_load_23_reg_1820);
    xor_ln44_11_fu_1060_p2 <= (xor_ln44_reg_1760 xor C_q1);
    xor_ln44_12_fu_1065_p2 <= (xor_ln44_11_fu_1060_p2 xor D_q0);
    xor_ln44_13_fu_1071_p2 <= (xor_ln44_12_fu_1065_p2 xor xor_ln44_10_fu_1055_p2);
    xor_ln44_14_fu_1077_p2 <= (xor_ln44_9_fu_1049_p2 xor xor_ln44_13_fu_1071_p2);
    xor_ln44_15_fu_1083_p2 <= (xor_ln44_6_reg_1766 xor xor_ln44_14_fu_1077_p2);
    xor_ln44_1_fu_828_p2 <= (D_load_9_reg_1536 xor D_load_10_reg_1553);
    xor_ln44_2_fu_832_p2 <= (xor_ln44_1_fu_828_p2 xor xor_ln37_9_fu_739_p2);
    xor_ln44_3_fu_838_p2 <= (D_load_15_reg_1606 xor C_load_reg_1652);
    xor_ln44_4_fu_842_p2 <= (xor_ln40_9_fu_820_p2 xor D_load_16_reg_1628);
    xor_ln44_5_fu_847_p2 <= (xor_ln44_4_fu_842_p2 xor xor_ln44_3_fu_838_p2);
    xor_ln44_6_fu_853_p2 <= (xor_ln44_5_fu_847_p2 xor xor_ln44_2_fu_832_p2);
    xor_ln44_7_fu_1041_p2 <= (D_load_22_reg_1801 xor D_load_20_reg_1710);
    xor_ln44_8_fu_1045_p2 <= (C_load_4_reg_1812 xor C_load_3_reg_1806);
    xor_ln44_9_fu_1049_p2 <= (xor_ln44_8_fu_1045_p2 xor xor_ln44_7_fu_1041_p2);
    xor_ln44_fu_824_p2 <= (D_load_2_reg_1457 xor D_load_14_reg_1600);
    xor_ln47_10_fu_1107_p2 <= (xor_ln40_reg_1737 xor C_q1);
    xor_ln47_11_fu_1112_p2 <= (xor_ln47_10_fu_1107_p2 xor D_q1);
    xor_ln47_12_fu_1118_p2 <= (xor_ln47_9_fu_1103_p2 xor xor_ln47_11_fu_1112_p2);
    xor_ln47_13_fu_1124_p2 <= (xor_ln47_8_fu_1097_p2 xor xor_ln47_12_fu_1118_p2);
    xor_ln47_14_fu_1130_p2 <= (xor_ln47_5_reg_1842 xor xor_ln47_13_fu_1124_p2);
    xor_ln47_1_fu_863_p2 <= (D_load_8_reg_1528 xor D_load_7_reg_1511);
    xor_ln47_2_fu_867_p2 <= (xor_ln47_fu_859_p2 xor xor_ln47_1_fu_863_p2);
    xor_ln47_3_fu_1007_p2 <= (D_load_11_reg_1559 xor C_load_1_reg_1693);
    xor_ln47_4_fu_1011_p2 <= (xor_ln47_3_fu_1007_p2 xor xor_ln40_13_fu_973_p2);
    xor_ln47_5_fu_1017_p2 <= (xor_ln47_4_fu_1011_p2 xor xor_ln47_2_reg_1771);
    xor_ln47_6_fu_1089_p2 <= (D_load_23_reg_1820 xor C_load_4_reg_1812);
    xor_ln47_7_fu_1093_p2 <= (D_load_25_reg_1858 xor C_load_5_reg_1864);
    xor_ln47_8_fu_1097_p2 <= (xor_ln47_7_fu_1093_p2 xor xor_ln47_6_fu_1089_p2);
    xor_ln47_9_fu_1103_p2 <= (D_load_27_reg_1887 xor D_load_26_reg_1880);
    xor_ln47_fu_859_p2 <= (D_load_6_reg_1504 xor D_load_3_reg_1464);
    xor_ln50_10_fu_1198_p2 <= (D_load_29_reg_1920 xor C_load_6_reg_1914);
    xor_ln50_11_fu_1202_p2 <= (xor_ln37_reg_1705 xor C_q0);
    xor_ln50_12_fu_1207_p2 <= (xor_ln50_11_fu_1202_p2 xor D_q1);
    xor_ln50_13_fu_1213_p2 <= (xor_ln50_12_fu_1207_p2 xor xor_ln50_10_fu_1198_p2);
    xor_ln50_14_fu_1219_p2 <= (xor_ln50_9_reg_1937 xor xor_ln50_13_fu_1213_p2);
    xor_ln50_15_fu_1224_p2 <= (xor_ln50_5_fu_1193_p2 xor xor_ln50_14_fu_1219_p2);
    xor_ln50_1_fu_877_p2 <= (xor_ln50_fu_873_p2 xor xor_ln44_1_fu_828_p2);
    xor_ln50_2_fu_1179_p2 <= (C_load_2_reg_1700 xor C_load_1_reg_1693);
    xor_ln50_3_fu_1183_p2 <= (xor_ln40_9_reg_1749 xor D_load_15_reg_1606);
    xor_ln50_4_fu_1187_p2 <= (xor_ln50_3_fu_1183_p2 xor xor_ln50_2_fu_1179_p2);
    xor_ln50_5_fu_1193_p2 <= (xor_ln50_4_fu_1187_p2 xor xor_ln50_1_reg_1776);
    xor_ln50_6_fu_1136_p2 <= (D_load_24_reg_1852 xor C_load_3_reg_1806);
    xor_ln50_7_fu_1140_p2 <= (D_q1 xor D_load_26_reg_1880);
    xor_ln50_8_fu_1145_p2 <= (xor_ln50_7_fu_1140_p2 xor D_load_25_reg_1858);
    xor_ln50_9_fu_1150_p2 <= (xor_ln50_8_fu_1145_p2 xor xor_ln50_6_fu_1136_p2);
    xor_ln50_fu_873_p2 <= (D_load_8_reg_1528 xor D_load_5_reg_1487);
    xor_ln53_10_fu_1245_p2 <= (D_load_29_reg_1920 xor D_load_28_reg_1909);
    xor_ln53_11_fu_1249_p2 <= (D_q0 xor C_q0);
    xor_ln53_12_fu_1255_p2 <= (xor_ln53_11_fu_1249_p2 xor D_q1);
    xor_ln53_13_fu_1261_p2 <= (xor_ln53_12_fu_1255_p2 xor xor_ln53_10_fu_1245_p2);
    xor_ln53_14_fu_1267_p2 <= (xor_ln53_9_fu_1239_p2 xor xor_ln53_13_fu_1261_p2);
    xor_ln53_15_fu_1273_p2 <= (xor_ln53_6_reg_1786 xor xor_ln53_14_fu_1267_p2);
    xor_ln53_1_fu_887_p2 <= (xor_ln53_fu_883_p2 xor xor_ln37_4_fu_715_p2);
    xor_ln53_2_fu_893_p2 <= (C_q1 xor C_load_reg_1652);
    xor_ln53_3_fu_898_p2 <= (D_q1 xor D_load_19_reg_1677);
    xor_ln53_4_fu_903_p2 <= (xor_ln53_3_fu_898_p2 xor D_load_17_reg_1635);
    xor_ln53_5_fu_908_p2 <= (xor_ln53_4_fu_903_p2 xor xor_ln53_2_fu_893_p2);
    xor_ln53_6_fu_914_p2 <= (xor_ln53_5_fu_908_p2 xor xor_ln53_1_fu_887_p2);
    xor_ln53_7_fu_1231_p2 <= (D_load_23_reg_1820 xor D_load_21_reg_1716);
    xor_ln53_8_fu_1235_p2 <= (D_load_27_reg_1887 xor C_load_5_reg_1864);
    xor_ln53_9_fu_1239_p2 <= (xor_ln53_8_fu_1235_p2 xor xor_ln53_7_fu_1231_p2);
    xor_ln53_fu_883_p2 <= (D_load_reg_1435 xor D_load_2_reg_1457);
    xor_ln56_10_fu_1289_p2 <= (xor_ln56_9_fu_1284_p2 xor xor_ln56_8_fu_1279_p2);
    xor_ln56_11_fu_1295_p2 <= (xor_ln56_7_reg_1947 xor xor_ln56_10_fu_1289_p2);
    xor_ln56_12_fu_1300_p2 <= (xor_ln56_4_reg_1791 xor xor_ln56_11_fu_1295_p2);
    xor_ln56_1_fu_924_p2 <= (xor_ln56_fu_920_p2 xor D_load_5_reg_1487);
    xor_ln56_2_fu_929_p2 <= (D_load_12_reg_1576 xor C_load_reg_1652);
    xor_ln56_3_fu_933_p2 <= (xor_ln56_2_fu_929_p2 xor xor_ln37_5_fu_719_p2);
    xor_ln56_4_fu_939_p2 <= (xor_ln56_3_fu_933_p2 xor xor_ln56_1_fu_924_p2);
    xor_ln56_5_fu_1156_p2 <= (D_load_18_reg_1670 xor C_load_4_reg_1812);
    xor_ln56_6_fu_1160_p2 <= (D_load_26_reg_1880 xor D_load_24_reg_1852);
    xor_ln56_7_fu_1164_p2 <= (xor_ln56_6_fu_1160_p2 xor xor_ln56_5_fu_1156_p2);
    xor_ln56_8_fu_1279_p2 <= (D_q1 xor C_load_6_reg_1914);
    xor_ln56_9_fu_1284_p2 <= (xor_ln44_reg_1760 xor D_q0);
    xor_ln56_fu_920_p2 <= (D_load_7_reg_1511 xor D_load_4_reg_1480);
    xor_ln59_10_fu_1315_p2 <= (xor_ln59_9_fu_1310_p2 xor xor_ln59_8_fu_1305_p2);
    xor_ln59_11_fu_1321_p2 <= (xor_ln59_7_reg_1952 xor xor_ln59_10_fu_1315_p2);
    xor_ln59_12_fu_1326_p2 <= (xor_ln59_5_reg_1847 xor xor_ln59_11_fu_1321_p2);
    xor_ln59_1_fu_949_p2 <= (xor_ln59_fu_945_p2 xor D_load_11_reg_1559);
    xor_ln59_2_fu_1022_p2 <= (D_load_16_reg_1628 xor C_load_1_reg_1693);
    xor_ln59_3_fu_1026_p2 <= (D_load_18_reg_1670 xor D_load_17_reg_1635);
    xor_ln59_4_fu_1030_p2 <= (xor_ln59_3_fu_1026_p2 xor xor_ln59_2_fu_1022_p2);
    xor_ln59_5_fu_1036_p2 <= (xor_ln59_4_fu_1030_p2 xor xor_ln59_1_reg_1796);
    xor_ln59_6_fu_1170_p2 <= (D_load_27_reg_1887 xor C_load_4_reg_1812);
    xor_ln59_7_fu_1174_p2 <= (xor_ln59_6_fu_1170_p2 xor xor_ln53_3_reg_1781);
    xor_ln59_8_fu_1305_p2 <= (D_load_29_reg_1920 xor C_q0);
    xor_ln59_9_fu_1310_p2 <= (xor_ln40_reg_1737 xor D_q0);
    xor_ln59_fu_945_p2 <= (D_load_6_reg_1504 xor D_load_12_reg_1576);
    zext_ln27_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_562),64));
    zext_ln33_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_582),64));
    zext_ln64_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_602),8));
    zext_ln65_1_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(NewCRC_q1),8));
    zext_ln65_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_602),64));
end behav;
