-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cx2341x_set_ctrl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    params_audio_sampling_freq : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_sampling_freq_ap_vld : OUT STD_LOGIC;
    params_capabilities : IN STD_LOGIC_VECTOR (31 downto 0);
    params_audio_encoding : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_encoding_ap_vld : OUT STD_LOGIC;
    params_audio_l2_bitrate : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_l2_bitrate_ap_vld : OUT STD_LOGIC;
    params_audio_ac3_bitrate : IN STD_LOGIC_VECTOR (31 downto 0);
    params_audio_mode : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_mode_ap_vld : OUT STD_LOGIC;
    params_audio_mode_extension : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_mode_extension_ap_vld : OUT STD_LOGIC;
    params_audio_emphasis : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_emphasis_ap_vld : OUT STD_LOGIC;
    params_audio_crc : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_crc_ap_vld : OUT STD_LOGIC;
    params_audio_mute : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_audio_mute_ap_vld : OUT STD_LOGIC;
    params_video_aspect : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_aspect_ap_vld : OUT STD_LOGIC;
    params_video_gop_size_i : IN STD_LOGIC_VECTOR (31 downto 0);
    params_video_gop_size_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_gop_size_o_ap_vld : OUT STD_LOGIC;
    params_video_b_frames_i : IN STD_LOGIC_VECTOR (31 downto 0);
    params_video_b_frames_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_b_frames_o_ap_vld : OUT STD_LOGIC;
    params_video_gop_closure : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_gop_closure_ap_vld : OUT STD_LOGIC;
    params_video_bitrate_mode : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_bitrate_mode_ap_vld : OUT STD_LOGIC;
    params_video_bitrate : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_bitrate_ap_vld : OUT STD_LOGIC;
    params_video_bitrate_peak : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_bitrate_peak_ap_vld : OUT STD_LOGIC;
    params_video_temporal_decimation : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_temporal_decimation_ap_vld : OUT STD_LOGIC;
    params_video_mute : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_mute_ap_vld : OUT STD_LOGIC;
    params_video_mute_yuv : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_mute_yuv_ap_vld : OUT STD_LOGIC;
    params_stream_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_stream_type_ap_vld : OUT STD_LOGIC;
    params_stream_vbi_fmt : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_stream_vbi_fmt_ap_vld : OUT STD_LOGIC;
    params_video_spatial_filter_mode : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_spatial_filter_mode_ap_vld : OUT STD_LOGIC;
    params_video_spatial_filter : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_spatial_filter_ap_vld : OUT STD_LOGIC;
    params_video_luma_spatial_filter_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_luma_spatial_filter_type_ap_vld : OUT STD_LOGIC;
    params_video_chroma_spatial_filter_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_chroma_spatial_filter_type_ap_vld : OUT STD_LOGIC;
    params_video_temporal_filter_mode : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_temporal_filter_mode_ap_vld : OUT STD_LOGIC;
    params_video_temporal_filter : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_temporal_filter_ap_vld : OUT STD_LOGIC;
    params_video_median_filter_type : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_median_filter_type_ap_vld : OUT STD_LOGIC;
    params_video_luma_median_filter_top : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_luma_median_filter_top_ap_vld : OUT STD_LOGIC;
    params_video_luma_median_filter_bottom : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_luma_median_filter_bottom_ap_vld : OUT STD_LOGIC;
    params_video_chroma_median_filter_top : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_chroma_median_filter_top_ap_vld : OUT STD_LOGIC;
    params_video_chroma_median_filter_bottom : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_chroma_median_filter_bottom_ap_vld : OUT STD_LOGIC;
    params_stream_insert_nav_packets : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_stream_insert_nav_packets_ap_vld : OUT STD_LOGIC;
    params_video_encoding_i : IN STD_LOGIC_VECTOR (31 downto 0);
    params_video_encoding_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    params_video_encoding_o_ap_vld : OUT STD_LOGIC;
    busy : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl_id : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl_value_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ctrl_value_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl_value_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cx2341x_set_ctrl is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cx2341x_set_ctrl,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.370000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1017,HLS_SYN_LUT=1152,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl_id_read_read_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln122_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln122_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln122_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sub_ln113_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln125_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln124_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln116_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln115_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge1_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln155_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_550_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_ap_start : STD_LOGIC;
    signal grp_fu_532_ap_done : STD_LOGIC;
    signal grp_fu_550_ap_start : STD_LOGIC;
    signal grp_fu_550_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_condition_632 : BOOLEAN;

    component cx2341x_set_ctrl_srem_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cx2341x_set_ctrl_srem_32ns_32ns_32_36_seq_1_U1 : component cx2341x_set_ctrl_srem_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_532_ap_start,
        done => grp_fu_532_ap_done,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p2);

    cx2341x_set_ctrl_srem_32ns_32ns_32_36_seq_1_U2 : component cx2341x_set_ctrl_srem_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_550_ap_start,
        done => grp_fu_550_ap_done,
        din0 => grp_fu_550_p0,
        din1 => grp_fu_550_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    storemerge1_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) then
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln115_fu_577_p2 = ap_const_lv1_1))) then 
                    storemerge1_reg_475 <= sub_ln116_fu_583_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    storemerge1_reg_475 <= sub_ln113_fu_561_p2;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)) then
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln124_fu_566_p2 = ap_const_lv1_1))) then 
                    storemerge_reg_464 <= sub_ln125_fu_572_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    storemerge_reg_464 <= sub_ln122_fu_556_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85))) then
                add_ln113_reg_618 <= add_ln113_fu_544_p2;
                b_reg_612 <= b_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) then
                add_ln122_reg_606 <= add_ln122_fu_526_p2;
                b_1_reg_600 <= b_1_fu_520_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, icmp_ln115_fu_577_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) and not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85) or (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (((not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)) and (icmp_ln115_fu_577_p2 = ap_const_lv1_0)) or ((icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) or (not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) and not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln113_fu_544_p2 <= std_logic_vector(unsigned(params_video_gop_size_i) + unsigned(ctrl_value_i));
    add_ln122_fu_526_p2 <= std_logic_vector(unsigned(ctrl_value_i) + unsigned(params_video_b_frames_i));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);

    ap_condition_632_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln66_fu_485_p2)
    begin
                ap_condition_632 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, icmp_ln115_fu_577_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (((not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)) and (icmp_ln115_fu_577_p2 = ap_const_lv1_0)) or ((icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) or (not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) and not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, icmp_ln115_fu_577_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (((not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)) and (icmp_ln115_fu_577_p2 = ap_const_lv1_0)) or ((icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) or (not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) and not((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    b_1_fu_520_p2 <= std_logic_vector(unsigned(params_video_b_frames_i) + unsigned(ap_const_lv32_1));
    b_fu_538_p2 <= std_logic_vector(unsigned(ctrl_value_i) + unsigned(ap_const_lv32_1));
    ctrl_id_read_read_fu_164_p2 <= ctrl_id;

    ctrl_value_o_assign_proc : process(ctrl_value_i, ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, storemerge_reg_464)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) then 
            ctrl_value_o <= storemerge_reg_464;
        else 
            ctrl_value_o <= ctrl_value_i;
        end if; 
    end process;


    ctrl_value_o_ap_vld_assign_proc : process(ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) then 
            ctrl_value_o_ap_vld <= ap_const_logic_1;
        else 
            ctrl_value_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_532_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) then 
            grp_fu_532_ap_start <= ap_const_logic_1;
        else 
            grp_fu_532_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_532_p0 <= std_logic_vector(unsigned(ctrl_value_i) + unsigned(params_video_b_frames_i));
    grp_fu_532_p1 <= std_logic_vector(unsigned(params_video_b_frames_i) + unsigned(ap_const_lv32_1));

    grp_fu_550_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85))) then 
            grp_fu_550_ap_start <= ap_const_logic_1;
        else 
            grp_fu_550_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_550_p0 <= std_logic_vector(unsigned(params_video_gop_size_i) + unsigned(ctrl_value_i));
    grp_fu_550_p1 <= std_logic_vector(unsigned(ctrl_value_i) + unsigned(ap_const_lv32_1));
    icmp_ln115_fu_577_p2 <= "1" when (signed(storemerge1_reg_475) > signed(ap_const_lv32_22)) else "0";
    icmp_ln124_fu_566_p2 <= "1" when (signed(storemerge_reg_464) > signed(ap_const_lv32_22)) else "0";
    icmp_ln136_1_fu_508_p2 <= "1" when (ctrl_value_i = ap_const_lv32_0) else "0";
    icmp_ln136_fu_502_p2 <= "0" when (params_video_encoding_i = ap_const_lv32_0) else "1";
    icmp_ln155_fu_491_p2 <= "0" when (ctrl_value_i = ap_const_lv32_0) else "1";
    icmp_ln66_fu_485_p2 <= "1" when (busy = ap_const_lv32_0) else "0";
    or_ln136_fu_514_p2 <= (icmp_ln136_fu_502_p2 or icmp_ln136_1_fu_508_p2);
    params_audio_crc <= ctrl_value_i;

    params_audio_crc_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9F))) then 
            params_audio_crc_ap_vld <= ap_const_logic_1;
        else 
            params_audio_crc_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_emphasis <= ctrl_value_i;

    params_audio_emphasis_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9E))) then 
            params_audio_emphasis_ap_vld <= ap_const_logic_1;
        else 
            params_audio_emphasis_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_encoding <= ctrl_value_i;

    params_audio_encoding_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9D))) then 
            params_audio_encoding_ap_vld <= ap_const_logic_1;
        else 
            params_audio_encoding_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_l2_bitrate <= ctrl_value_i;

    params_audio_l2_bitrate_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9C))) then 
            params_audio_l2_bitrate_ap_vld <= ap_const_logic_1;
        else 
            params_audio_l2_bitrate_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_mode <= ctrl_value_i;

    params_audio_mode_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9B))) then 
            params_audio_mode_ap_vld <= ap_const_logic_1;
        else 
            params_audio_mode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_mode_extension <= ctrl_value_i;

    params_audio_mode_extension_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_9A))) then 
            params_audio_mode_extension_ap_vld <= ap_const_logic_1;
        else 
            params_audio_mode_extension_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_mute <= ctrl_value_i;

    params_audio_mute_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_99))) then 
            params_audio_mute_ap_vld <= ap_const_logic_1;
        else 
            params_audio_mute_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_audio_sampling_freq <= ctrl_value_i;

    params_audio_sampling_freq_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_98))) then 
            params_audio_sampling_freq_ap_vld <= ap_const_logic_1;
        else 
            params_audio_sampling_freq_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_stream_insert_nav_packets <= ctrl_value_i;

    params_stream_insert_nav_packets_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_97))) then 
            params_stream_insert_nav_packets_ap_vld <= ap_const_logic_1;
        else 
            params_stream_insert_nav_packets_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_stream_type <= ctrl_value_i;

    params_stream_type_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8B))) then 
            params_stream_type_ap_vld <= ap_const_logic_1;
        else 
            params_stream_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_stream_vbi_fmt <= ctrl_value_i;

    params_stream_vbi_fmt_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8A))) then 
            params_stream_vbi_fmt_ap_vld <= ap_const_logic_1;
        else 
            params_stream_vbi_fmt_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_aspect <= ctrl_value_i;

    params_video_aspect_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_89))) then 
            params_video_aspect_ap_vld <= ap_const_logic_1;
        else 
            params_video_aspect_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    params_video_b_frames_o_assign_proc : process(ap_start, ap_CS_fsm_state1, params_video_b_frames_i, ctrl_value_i, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85))) then 
            params_video_b_frames_o <= ctrl_value_i;
        else 
            params_video_b_frames_o <= params_video_b_frames_i;
        end if; 
    end process;


    params_video_b_frames_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85))) then 
            params_video_b_frames_o_ap_vld <= ap_const_logic_1;
        else 
            params_video_b_frames_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_bitrate <= ctrl_value_i;

    params_video_bitrate_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_88))) then 
            params_video_bitrate_ap_vld <= ap_const_logic_1;
        else 
            params_video_bitrate_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    params_video_bitrate_mode_assign_proc : process(ctrl_value_i, ctrl_id_read_read_fu_164_p2, or_ln136_fu_514_p2, ap_condition_632)
    begin
        if ((ap_const_boolean_1 = ap_condition_632)) then
            if (((or_ln136_fu_514_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_87))) then 
                params_video_bitrate_mode <= ctrl_value_i;
            elsif ((ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8B)) then 
                params_video_bitrate_mode <= ap_const_lv32_0;
            else 
                params_video_bitrate_mode <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            params_video_bitrate_mode <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    params_video_bitrate_mode_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2, or_ln136_fu_514_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8B)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (or_ln136_fu_514_p2 = ap_const_lv1_1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_87)))) then 
            params_video_bitrate_mode_ap_vld <= ap_const_logic_1;
        else 
            params_video_bitrate_mode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_bitrate_peak <= ctrl_value_i;

    params_video_bitrate_peak_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_86))) then 
            params_video_bitrate_peak_ap_vld <= ap_const_logic_1;
        else 
            params_video_bitrate_peak_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_chroma_median_filter_bottom <= ctrl_value_i;

    params_video_chroma_median_filter_bottom_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_96))) then 
            params_video_chroma_median_filter_bottom_ap_vld <= ap_const_logic_1;
        else 
            params_video_chroma_median_filter_bottom_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_chroma_median_filter_top <= ctrl_value_i;

    params_video_chroma_median_filter_top_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_95))) then 
            params_video_chroma_median_filter_top_ap_vld <= ap_const_logic_1;
        else 
            params_video_chroma_median_filter_top_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_chroma_spatial_filter_type <= ctrl_value_i;

    params_video_chroma_spatial_filter_type_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_94))) then 
            params_video_chroma_spatial_filter_type_ap_vld <= ap_const_logic_1;
        else 
            params_video_chroma_spatial_filter_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    params_video_encoding_o_assign_proc : process(ap_start, ap_CS_fsm_state1, params_video_encoding_i, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8B))) then 
            params_video_encoding_o <= ap_const_lv32_0;
        else 
            params_video_encoding_o <= params_video_encoding_i;
        end if; 
    end process;


    params_video_encoding_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2, icmp_ln66_fu_485_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln66_fu_485_p2 = ap_const_lv1_1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8B))) then 
            params_video_encoding_o_ap_vld <= ap_const_logic_1;
        else 
            params_video_encoding_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_gop_closure <= ctrl_value_i;

    params_video_gop_closure_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_84))) then 
            params_video_gop_closure_ap_vld <= ap_const_logic_1;
        else 
            params_video_gop_closure_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    params_video_gop_size_o_assign_proc : process(params_video_gop_size_i, ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, icmp_ln115_fu_577_p2, storemerge_reg_464, storemerge1_reg_475)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
            if (((icmp_ln115_fu_577_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85))) then 
                params_video_gop_size_o <= storemerge1_reg_475;
            elsif (((icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83))) then 
                params_video_gop_size_o <= storemerge_reg_464;
            else 
                params_video_gop_size_o <= params_video_gop_size_i;
            end if;
        else 
            params_video_gop_size_o <= params_video_gop_size_i;
        end if; 
    end process;


    params_video_gop_size_o_ap_vld_assign_proc : process(ctrl_id_read_read_fu_164_p2, ap_CS_fsm_state37, icmp_ln124_fu_566_p2, icmp_ln115_fu_577_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln115_fu_577_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_85)) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln124_fu_566_p2 = ap_const_lv1_0) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_83)))) then 
            params_video_gop_size_o_ap_vld <= ap_const_logic_1;
        else 
            params_video_gop_size_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_luma_median_filter_bottom <= ctrl_value_i;

    params_video_luma_median_filter_bottom_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_93))) then 
            params_video_luma_median_filter_bottom_ap_vld <= ap_const_logic_1;
        else 
            params_video_luma_median_filter_bottom_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_luma_median_filter_top <= ctrl_value_i;

    params_video_luma_median_filter_top_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_92))) then 
            params_video_luma_median_filter_top_ap_vld <= ap_const_logic_1;
        else 
            params_video_luma_median_filter_top_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_luma_spatial_filter_type <= ctrl_value_i;

    params_video_luma_spatial_filter_type_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_91))) then 
            params_video_luma_spatial_filter_type_ap_vld <= ap_const_logic_1;
        else 
            params_video_luma_spatial_filter_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_median_filter_type <= ctrl_value_i;

    params_video_median_filter_type_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_90))) then 
            params_video_median_filter_type_ap_vld <= ap_const_logic_1;
        else 
            params_video_median_filter_type_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_mute <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln155_fu_491_p2),32));

    params_video_mute_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_82))) then 
            params_video_mute_ap_vld <= ap_const_logic_1;
        else 
            params_video_mute_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_mute_yuv <= ctrl_value_i;

    params_video_mute_yuv_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_81))) then 
            params_video_mute_yuv_ap_vld <= ap_const_logic_1;
        else 
            params_video_mute_yuv_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_spatial_filter <= ctrl_value_i;

    params_video_spatial_filter_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8F))) then 
            params_video_spatial_filter_ap_vld <= ap_const_logic_1;
        else 
            params_video_spatial_filter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_spatial_filter_mode <= ctrl_value_i;

    params_video_spatial_filter_mode_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8E))) then 
            params_video_spatial_filter_mode_ap_vld <= ap_const_logic_1;
        else 
            params_video_spatial_filter_mode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_temporal_decimation <= ctrl_value_i;

    params_video_temporal_decimation_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_80))) then 
            params_video_temporal_decimation_ap_vld <= ap_const_logic_1;
        else 
            params_video_temporal_decimation_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_temporal_filter <= ctrl_value_i;

    params_video_temporal_filter_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8D))) then 
            params_video_temporal_filter_ap_vld <= ap_const_logic_1;
        else 
            params_video_temporal_filter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    params_video_temporal_filter_mode <= ctrl_value_i;

    params_video_temporal_filter_mode_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ctrl_id_read_read_fu_164_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ctrl_id_read_read_fu_164_p2 = ap_const_lv32_8C))) then 
            params_video_temporal_filter_mode_ap_vld <= ap_const_logic_1;
        else 
            params_video_temporal_filter_mode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln113_fu_561_p2 <= std_logic_vector(unsigned(add_ln113_reg_618) - unsigned(grp_fu_550_p2));
    sub_ln116_fu_583_p2 <= std_logic_vector(unsigned(storemerge1_reg_475) - unsigned(b_reg_612));
    sub_ln122_fu_556_p2 <= std_logic_vector(unsigned(add_ln122_reg_606) - unsigned(grp_fu_532_p2));
    sub_ln125_fu_572_p2 <= std_logic_vector(unsigned(storemerge_reg_464) - unsigned(b_1_reg_600));
end behav;
