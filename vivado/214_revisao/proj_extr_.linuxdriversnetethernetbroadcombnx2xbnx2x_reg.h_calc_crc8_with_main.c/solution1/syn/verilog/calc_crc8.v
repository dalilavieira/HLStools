// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc_crc8,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.698000,HLS_SYN_LAT=76,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=200,HLS_SYN_LUT=1356,HLS_VERSION=2019_1}" *)

module calc_crc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data,
        crc,
        ap_return
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data;
input  [31:0] crc;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_fu_631_p2;
wire    ap_CS_fsm_state2;
wire  signed [31:0] sext_ln28_fu_657_p1;
wire   [0:0] icmp_ln26_fu_625_p2;
wire   [3:0] i_3_fu_667_p2;
wire    ap_CS_fsm_state3;
wire  signed [31:0] sext_ln34_fu_693_p1;
wire   [0:0] icmp_ln32_fu_661_p2;
wire   [0:0] D_q0;
reg   [0:0] D_load_reg_1435;
wire    ap_CS_fsm_state4;
wire   [0:0] D_q1;
reg   [0:0] D_load_1_reg_1441;
reg   [0:0] D_load_2_reg_1457;
wire    ap_CS_fsm_state5;
reg   [0:0] D_load_3_reg_1464;
reg   [0:0] D_load_4_reg_1480;
wire    ap_CS_fsm_state6;
reg   [0:0] D_load_5_reg_1487;
reg   [0:0] D_load_6_reg_1504;
wire    ap_CS_fsm_state7;
reg   [0:0] D_load_7_reg_1511;
reg   [0:0] D_load_8_reg_1528;
wire    ap_CS_fsm_state8;
reg   [0:0] D_load_9_reg_1536;
reg   [0:0] D_load_10_reg_1553;
wire    ap_CS_fsm_state9;
reg   [0:0] D_load_11_reg_1559;
reg   [0:0] D_load_12_reg_1576;
wire    ap_CS_fsm_state10;
reg   [0:0] D_load_13_reg_1584;
reg   [0:0] D_load_14_reg_1600;
wire    ap_CS_fsm_state11;
reg   [0:0] D_load_15_reg_1606;
wire    ap_CS_fsm_state12;
reg   [0:0] D_load_16_reg_1628;
reg   [0:0] D_load_17_reg_1635;
wire   [0:0] C_q0;
reg   [0:0] C_load_reg_1652;
wire    ap_CS_fsm_state13;
reg   [0:0] D_load_18_reg_1670;
reg   [0:0] D_load_19_reg_1677;
reg   [0:0] C_load_1_reg_1693;
wire    ap_CS_fsm_state14;
wire   [0:0] C_q1;
reg   [0:0] C_load_2_reg_1700;
wire   [0:0] xor_ln37_fu_697_p2;
reg   [0:0] xor_ln37_reg_1705;
reg   [0:0] D_load_20_reg_1710;
reg   [0:0] D_load_21_reg_1716;
wire   [0:0] xor_ln40_fu_779_p2;
reg   [0:0] xor_ln40_reg_1737;
wire   [0:0] xor_ln40_7_fu_814_p2;
reg   [0:0] xor_ln40_7_reg_1744;
wire   [0:0] xor_ln40_9_fu_820_p2;
reg   [0:0] xor_ln40_9_reg_1749;
wire   [0:0] xor_ln44_fu_824_p2;
reg   [0:0] xor_ln44_reg_1760;
wire   [0:0] xor_ln44_6_fu_853_p2;
reg   [0:0] xor_ln44_6_reg_1766;
wire   [0:0] xor_ln47_2_fu_867_p2;
reg   [0:0] xor_ln47_2_reg_1771;
wire   [0:0] xor_ln50_1_fu_877_p2;
reg   [0:0] xor_ln50_1_reg_1776;
wire   [0:0] xor_ln53_3_fu_898_p2;
reg   [0:0] xor_ln53_3_reg_1781;
wire   [0:0] xor_ln53_6_fu_914_p2;
reg   [0:0] xor_ln53_6_reg_1786;
wire   [0:0] xor_ln56_4_fu_939_p2;
reg   [0:0] xor_ln56_4_reg_1791;
wire   [0:0] xor_ln59_1_fu_949_p2;
reg   [0:0] xor_ln59_1_reg_1796;
reg   [0:0] D_load_22_reg_1801;
wire    ap_CS_fsm_state15;
reg   [0:0] C_load_3_reg_1806;
reg   [0:0] C_load_4_reg_1812;
reg   [0:0] D_load_23_reg_1820;
wire   [0:0] xor_ln47_5_fu_1017_p2;
reg   [0:0] xor_ln47_5_reg_1842;
wire   [0:0] xor_ln59_5_fu_1036_p2;
reg   [0:0] xor_ln59_5_reg_1847;
reg   [0:0] D_load_24_reg_1852;
wire    ap_CS_fsm_state16;
reg   [0:0] D_load_25_reg_1858;
reg   [0:0] C_load_5_reg_1864;
reg   [0:0] D_load_26_reg_1880;
wire    ap_CS_fsm_state17;
reg   [0:0] D_load_27_reg_1887;
reg   [0:0] D_load_28_reg_1909;
wire    ap_CS_fsm_state18;
reg   [0:0] C_load_6_reg_1914;
reg   [0:0] D_load_29_reg_1920;
wire   [0:0] xor_ln50_9_fu_1150_p2;
reg   [0:0] xor_ln50_9_reg_1937;
wire   [0:0] xor_ln56_7_fu_1164_p2;
reg   [0:0] xor_ln56_7_reg_1947;
wire   [0:0] xor_ln59_7_fu_1174_p2;
reg   [0:0] xor_ln59_7_reg_1952;
wire   [0:0] xor_ln56_12_fu_1300_p2;
reg   [0:0] xor_ln56_12_reg_1957;
wire    ap_CS_fsm_state19;
wire   [0:0] xor_ln59_12_fu_1326_p2;
reg   [0:0] xor_ln59_12_reg_1962;
wire   [7:0] zext_ln64_fu_1331_p1;
reg   [7:0] zext_ln64_reg_1967;
wire    ap_CS_fsm_state21;
wire   [3:0] i_4_fu_1341_p2;
reg   [3:0] i_4_reg_1975;
wire   [0:0] icmp_ln64_fu_1335_p2;
wire   [31:0] crc_res_fu_1381_p3;
wire    ap_CS_fsm_state22;
reg   [4:0] D_address0;
reg    D_ce0;
reg    D_we0;
wire   [0:0] D_d0;
reg   [4:0] D_address1;
reg    D_ce1;
reg   [2:0] NewCRC_address0;
reg    NewCRC_ce0;
reg    NewCRC_we0;
reg   [0:0] NewCRC_d0;
reg   [2:0] NewCRC_address1;
reg    NewCRC_ce1;
reg    NewCRC_we1;
reg   [0:0] NewCRC_d1;
wire   [0:0] NewCRC_q1;
reg   [2:0] C_address0;
reg    C_ce0;
reg    C_we0;
wire   [0:0] C_d0;
reg   [2:0] C_address1;
reg    C_ce1;
reg   [5:0] i_0_reg_562;
reg   [31:0] p_0_reg_573;
reg   [3:0] i_1_reg_582;
reg   [31:0] p_01_reg_593;
reg   [3:0] i_2_reg_602;
wire    ap_CS_fsm_state20;
reg   [31:0] crc_res_0_reg_613;
wire   [63:0] zext_ln27_fu_637_p1;
wire   [63:0] zext_ln33_fu_673_p1;
wire   [63:0] zext_ln65_fu_1347_p1;
wire   [0:0] xor_ln37_15_fu_772_p2;
wire   [0:0] xor_ln40_18_fu_1001_p2;
wire   [0:0] xor_ln44_15_fu_1083_p2;
wire   [0:0] xor_ln47_14_fu_1130_p2;
wire   [0:0] xor_ln50_15_fu_1224_p2;
wire   [0:0] xor_ln53_15_fu_1273_p2;
wire   [30:0] trunc_ln1_fu_647_p4;
wire   [30:0] trunc_ln3_fu_683_p4;
wire   [0:0] xor_ln37_2_fu_705_p2;
wire   [0:0] xor_ln37_1_fu_701_p2;
wire   [0:0] xor_ln37_5_fu_719_p2;
wire   [0:0] xor_ln37_4_fu_715_p2;
wire   [0:0] xor_ln37_6_fu_723_p2;
wire   [0:0] xor_ln37_3_fu_709_p2;
wire   [0:0] xor_ln37_9_fu_739_p2;
wire   [0:0] xor_ln37_8_fu_735_p2;
wire   [0:0] xor_ln37_12_fu_754_p2;
wire   [0:0] xor_ln37_11_fu_749_p2;
wire   [0:0] xor_ln37_13_fu_760_p2;
wire   [0:0] xor_ln37_10_fu_743_p2;
wire   [0:0] xor_ln37_14_fu_766_p2;
wire   [0:0] xor_ln37_7_fu_729_p2;
wire   [0:0] xor_ln40_1_fu_783_p2;
wire   [0:0] xor_ln40_3_fu_794_p2;
wire   [0:0] xor_ln40_5_fu_803_p2;
wire   [0:0] xor_ln40_4_fu_798_p2;
wire   [0:0] xor_ln40_6_fu_808_p2;
wire   [0:0] xor_ln40_2_fu_788_p2;
wire   [0:0] xor_ln44_1_fu_828_p2;
wire   [0:0] xor_ln44_4_fu_842_p2;
wire   [0:0] xor_ln44_3_fu_838_p2;
wire   [0:0] xor_ln44_5_fu_847_p2;
wire   [0:0] xor_ln44_2_fu_832_p2;
wire   [0:0] xor_ln47_1_fu_863_p2;
wire   [0:0] xor_ln47_fu_859_p2;
wire   [0:0] xor_ln50_fu_873_p2;
wire   [0:0] xor_ln53_fu_883_p2;
wire   [0:0] xor_ln53_4_fu_903_p2;
wire   [0:0] xor_ln53_2_fu_893_p2;
wire   [0:0] xor_ln53_5_fu_908_p2;
wire   [0:0] xor_ln53_1_fu_887_p2;
wire   [0:0] xor_ln56_fu_920_p2;
wire   [0:0] xor_ln56_2_fu_929_p2;
wire   [0:0] xor_ln56_3_fu_933_p2;
wire   [0:0] xor_ln56_1_fu_924_p2;
wire   [0:0] xor_ln59_fu_945_p2;
wire   [0:0] xor_ln40_10_fu_958_p2;
wire   [0:0] xor_ln40_8_fu_954_p2;
wire   [0:0] xor_ln40_12_fu_968_p2;
wire   [0:0] xor_ln40_14_fu_978_p2;
wire   [0:0] xor_ln40_15_fu_983_p2;
wire   [0:0] xor_ln40_13_fu_973_p2;
wire   [0:0] xor_ln40_16_fu_989_p2;
wire   [0:0] xor_ln40_11_fu_962_p2;
wire   [0:0] xor_ln40_17_fu_995_p2;
wire   [0:0] xor_ln47_3_fu_1007_p2;
wire   [0:0] xor_ln47_4_fu_1011_p2;
wire   [0:0] xor_ln59_3_fu_1026_p2;
wire   [0:0] xor_ln59_2_fu_1022_p2;
wire   [0:0] xor_ln59_4_fu_1030_p2;
wire   [0:0] xor_ln44_8_fu_1045_p2;
wire   [0:0] xor_ln44_7_fu_1041_p2;
wire   [0:0] xor_ln44_11_fu_1060_p2;
wire   [0:0] xor_ln44_12_fu_1065_p2;
wire   [0:0] xor_ln44_10_fu_1055_p2;
wire   [0:0] xor_ln44_13_fu_1071_p2;
wire   [0:0] xor_ln44_9_fu_1049_p2;
wire   [0:0] xor_ln44_14_fu_1077_p2;
wire   [0:0] xor_ln47_7_fu_1093_p2;
wire   [0:0] xor_ln47_6_fu_1089_p2;
wire   [0:0] xor_ln47_10_fu_1107_p2;
wire   [0:0] xor_ln47_11_fu_1112_p2;
wire   [0:0] xor_ln47_9_fu_1103_p2;
wire   [0:0] xor_ln47_12_fu_1118_p2;
wire   [0:0] xor_ln47_8_fu_1097_p2;
wire   [0:0] xor_ln47_13_fu_1124_p2;
wire   [0:0] xor_ln50_7_fu_1140_p2;
wire   [0:0] xor_ln50_8_fu_1145_p2;
wire   [0:0] xor_ln50_6_fu_1136_p2;
wire   [0:0] xor_ln56_6_fu_1160_p2;
wire   [0:0] xor_ln56_5_fu_1156_p2;
wire   [0:0] xor_ln59_6_fu_1170_p2;
wire   [0:0] xor_ln50_3_fu_1183_p2;
wire   [0:0] xor_ln50_2_fu_1179_p2;
wire   [0:0] xor_ln50_4_fu_1187_p2;
wire   [0:0] xor_ln50_11_fu_1202_p2;
wire   [0:0] xor_ln50_12_fu_1207_p2;
wire   [0:0] xor_ln50_10_fu_1198_p2;
wire   [0:0] xor_ln50_13_fu_1213_p2;
wire   [0:0] xor_ln50_14_fu_1219_p2;
wire   [0:0] xor_ln50_5_fu_1193_p2;
wire   [0:0] xor_ln53_8_fu_1235_p2;
wire   [0:0] xor_ln53_7_fu_1231_p2;
wire   [0:0] xor_ln53_11_fu_1249_p2;
wire   [0:0] xor_ln53_12_fu_1255_p2;
wire   [0:0] xor_ln53_10_fu_1245_p2;
wire   [0:0] xor_ln53_13_fu_1261_p2;
wire   [0:0] xor_ln53_9_fu_1239_p2;
wire   [0:0] xor_ln53_14_fu_1267_p2;
wire   [0:0] xor_ln56_9_fu_1284_p2;
wire   [0:0] xor_ln56_8_fu_1279_p2;
wire   [0:0] xor_ln56_10_fu_1289_p2;
wire   [0:0] xor_ln56_11_fu_1295_p2;
wire   [0:0] xor_ln59_9_fu_1310_p2;
wire   [0:0] xor_ln59_8_fu_1305_p2;
wire   [0:0] xor_ln59_10_fu_1315_p2;
wire   [0:0] xor_ln59_11_fu_1321_p2;
wire   [7:0] zext_ln65_1_fu_1352_p1;
wire   [7:0] trunc_ln65_fu_1361_p1;
wire   [7:0] shl_ln65_fu_1356_p2;
wire   [23:0] tmp_fu_1371_p4;
wire   [7:0] or_ln65_fu_1365_p2;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

calc_crc8_D #(
    .DataWidth( 1 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
D_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_address0),
    .ce0(D_ce0),
    .we0(D_we0),
    .d0(D_d0),
    .q0(D_q0),
    .address1(D_address1),
    .ce1(D_ce1),
    .q1(D_q1)
);

calc_crc8_NewCRC #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
NewCRC_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(NewCRC_address0),
    .ce0(NewCRC_ce0),
    .we0(NewCRC_we0),
    .d0(NewCRC_d0),
    .address1(NewCRC_address1),
    .ce1(NewCRC_ce1),
    .we1(NewCRC_we1),
    .d1(NewCRC_d1),
    .q1(NewCRC_q1)
);

calc_crc8_C #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(C_d0),
    .q0(C_q0),
    .address1(C_address1),
    .ce1(C_ce1),
    .q1(C_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        crc_res_0_reg_613 <= crc_res_fu_1381_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        crc_res_0_reg_613 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_562 <= i_fu_631_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_562 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_582 <= 4'd0;
    end else if (((icmp_ln32_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_582 <= i_3_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_2_reg_602 <= i_4_reg_1975;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_2_reg_602 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01_reg_593 <= crc;
    end else if (((icmp_ln32_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_01_reg_593 <= sext_ln34_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_573 <= sext_ln28_fu_657_p1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_573 <= data;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        C_load_1_reg_1693 <= C_q0;
        C_load_2_reg_1700 <= C_q1;
        D_load_20_reg_1710 <= D_q1;
        D_load_21_reg_1716 <= D_q0;
        xor_ln37_reg_1705 <= xor_ln37_fu_697_p2;
        xor_ln40_7_reg_1744 <= xor_ln40_7_fu_814_p2;
        xor_ln40_9_reg_1749 <= xor_ln40_9_fu_820_p2;
        xor_ln40_reg_1737 <= xor_ln40_fu_779_p2;
        xor_ln44_6_reg_1766 <= xor_ln44_6_fu_853_p2;
        xor_ln44_reg_1760 <= xor_ln44_fu_824_p2;
        xor_ln47_2_reg_1771 <= xor_ln47_2_fu_867_p2;
        xor_ln50_1_reg_1776 <= xor_ln50_1_fu_877_p2;
        xor_ln53_3_reg_1781 <= xor_ln53_3_fu_898_p2;
        xor_ln53_6_reg_1786 <= xor_ln53_6_fu_914_p2;
        xor_ln56_4_reg_1791 <= xor_ln56_4_fu_939_p2;
        xor_ln59_1_reg_1796 <= xor_ln59_1_fu_949_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_load_3_reg_1806 <= C_q1;
        C_load_4_reg_1812 <= C_q0;
        D_load_22_reg_1801 <= D_q1;
        D_load_23_reg_1820 <= D_q0;
        xor_ln47_5_reg_1842 <= xor_ln47_5_fu_1017_p2;
        xor_ln59_5_reg_1847 <= xor_ln59_5_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_load_5_reg_1864 <= C_q1;
        D_load_24_reg_1852 <= D_q1;
        D_load_25_reg_1858 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        C_load_6_reg_1914 <= C_q1;
        D_load_28_reg_1909 <= D_q1;
        D_load_29_reg_1920 <= D_q0;
        xor_ln50_9_reg_1937 <= xor_ln50_9_fu_1150_p2;
        xor_ln56_7_reg_1947 <= xor_ln56_7_fu_1164_p2;
        xor_ln59_7_reg_1952 <= xor_ln59_7_fu_1174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_load_reg_1652 <= C_q0;
        D_load_18_reg_1670 <= D_q1;
        D_load_19_reg_1677 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        D_load_10_reg_1553 <= D_q1;
        D_load_11_reg_1559 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        D_load_12_reg_1576 <= D_q1;
        D_load_13_reg_1584 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        D_load_14_reg_1600 <= D_q1;
        D_load_15_reg_1606 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        D_load_16_reg_1628 <= D_q1;
        D_load_17_reg_1635 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_load_1_reg_1441 <= D_q1;
        D_load_reg_1435 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        D_load_26_reg_1880 <= D_q1;
        D_load_27_reg_1887 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        D_load_2_reg_1457 <= D_q1;
        D_load_3_reg_1464 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_load_4_reg_1480 <= D_q1;
        D_load_5_reg_1487 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        D_load_6_reg_1504 <= D_q1;
        D_load_7_reg_1511 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        D_load_8_reg_1528 <= D_q1;
        D_load_9_reg_1536 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_4_reg_1975 <= i_4_fu_1341_p2;
        zext_ln64_reg_1967[3 : 0] <= zext_ln64_fu_1331_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        xor_ln56_12_reg_1957 <= xor_ln56_12_fu_1300_p2;
        xor_ln59_12_reg_1962 <= xor_ln59_12_fu_1326_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        C_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        C_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        C_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = zext_ln33_fu_673_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        C_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        C_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_address1 = 64'd7;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        D_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        D_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        D_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        D_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        D_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        D_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        D_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        D_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        D_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        D_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        D_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        D_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        D_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        D_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        D_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        D_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        D_address0 = zext_ln27_fu_637_p1;
    end else begin
        D_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        D_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        D_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        D_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        D_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        D_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        D_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        D_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        D_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        D_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        D_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        D_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        D_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        D_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        D_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        D_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        D_address1 = 64'd30;
    end else begin
        D_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        D_ce1 = 1'b1;
    end else begin
        D_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        NewCRC_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        NewCRC_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        NewCRC_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        NewCRC_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        NewCRC_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        NewCRC_address0 = 64'd0;
    end else begin
        NewCRC_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        NewCRC_address1 = zext_ln65_fu_1347_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        NewCRC_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        NewCRC_address1 = 64'd5;
    end else begin
        NewCRC_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        NewCRC_ce0 = 1'b1;
    end else begin
        NewCRC_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        NewCRC_ce1 = 1'b1;
    end else begin
        NewCRC_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        NewCRC_d0 = xor_ln59_12_reg_1962;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        NewCRC_d0 = xor_ln50_15_fu_1224_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        NewCRC_d0 = xor_ln47_14_fu_1130_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        NewCRC_d0 = xor_ln44_15_fu_1083_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        NewCRC_d0 = xor_ln40_18_fu_1001_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        NewCRC_d0 = xor_ln37_15_fu_772_p2;
    end else begin
        NewCRC_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        NewCRC_d1 = xor_ln56_12_reg_1957;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        NewCRC_d1 = xor_ln53_15_fu_1273_p2;
    end else begin
        NewCRC_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        NewCRC_we0 = 1'b1;
    end else begin
        NewCRC_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        NewCRC_we1 = 1'b1;
    end else begin
        NewCRC_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln26_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln32_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln64_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_d0 = p_01_reg_593[0:0];

assign D_d0 = p_0_reg_573[0:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = crc_res_0_reg_613;

assign crc_res_fu_1381_p3 = {{tmp_fu_1371_p4}, {or_ln65_fu_1365_p2}};

assign i_3_fu_667_p2 = (i_1_reg_582 + 4'd1);

assign i_4_fu_1341_p2 = (i_2_reg_602 + 4'd1);

assign i_fu_631_p2 = (i_0_reg_562 + 6'd1);

assign icmp_ln26_fu_625_p2 = ((i_0_reg_562 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_661_p2 = ((i_1_reg_582 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1335_p2 = ((i_2_reg_602 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln65_fu_1365_p2 = (trunc_ln65_fu_1361_p1 | shl_ln65_fu_1356_p2);

assign sext_ln28_fu_657_p1 = $signed(trunc_ln1_fu_647_p4);

assign sext_ln34_fu_693_p1 = $signed(trunc_ln3_fu_683_p4);

assign shl_ln65_fu_1356_p2 = zext_ln65_1_fu_1352_p1 << zext_ln64_reg_1967;

assign tmp_fu_1371_p4 = {{crc_res_0_reg_613[31:8]}};

assign trunc_ln1_fu_647_p4 = {{p_0_reg_573[31:1]}};

assign trunc_ln3_fu_683_p4 = {{p_01_reg_593[31:1]}};

assign trunc_ln65_fu_1361_p1 = crc_res_0_reg_613[7:0];

assign xor_ln37_10_fu_743_p2 = (xor_ln37_9_fu_739_p2 ^ xor_ln37_8_fu_735_p2);

assign xor_ln37_11_fu_749_p2 = (C_q0 ^ C_load_reg_1652);

assign xor_ln37_12_fu_754_p2 = (xor_ln37_fu_697_p2 ^ C_q1);

assign xor_ln37_13_fu_760_p2 = (xor_ln37_12_fu_754_p2 ^ xor_ln37_11_fu_749_p2);

assign xor_ln37_14_fu_766_p2 = (xor_ln37_13_fu_760_p2 ^ xor_ln37_10_fu_743_p2);

assign xor_ln37_15_fu_772_p2 = (xor_ln37_7_fu_729_p2 ^ xor_ln37_14_fu_766_p2);

assign xor_ln37_1_fu_701_p2 = (D_load_3_reg_1464 ^ D_load_2_reg_1457);

assign xor_ln37_2_fu_705_p2 = (D_load_5_reg_1487 ^ D_load_4_reg_1480);

assign xor_ln37_3_fu_709_p2 = (xor_ln37_2_fu_705_p2 ^ xor_ln37_1_fu_701_p2);

assign xor_ln37_4_fu_715_p2 = (D_load_7_reg_1511 ^ D_load_6_reg_1504);

assign xor_ln37_5_fu_719_p2 = (D_load_9_reg_1536 ^ D_load_8_reg_1528);

assign xor_ln37_6_fu_723_p2 = (xor_ln37_5_fu_719_p2 ^ xor_ln37_4_fu_715_p2);

assign xor_ln37_7_fu_729_p2 = (xor_ln37_6_fu_723_p2 ^ xor_ln37_3_fu_709_p2);

assign xor_ln37_8_fu_735_p2 = (D_load_11_reg_1559 ^ D_load_10_reg_1553);

assign xor_ln37_9_fu_739_p2 = (D_load_13_reg_1584 ^ D_load_12_reg_1576);

assign xor_ln37_fu_697_p2 = (D_load_reg_1435 ^ D_load_1_reg_1441);

assign xor_ln40_10_fu_958_p2 = (xor_ln40_9_reg_1749 ^ D_load_17_reg_1635);

assign xor_ln40_11_fu_962_p2 = (xor_ln40_8_fu_954_p2 ^ xor_ln40_10_fu_958_p2);

assign xor_ln40_12_fu_968_p2 = (D_q1 ^ D_load_21_reg_1716);

assign xor_ln40_13_fu_973_p2 = (xor_ln40_12_fu_968_p2 ^ D_load_20_reg_1710);

assign xor_ln40_14_fu_978_p2 = (xor_ln40_reg_1737 ^ C_q0);

assign xor_ln40_15_fu_983_p2 = (xor_ln40_14_fu_978_p2 ^ C_q1);

assign xor_ln40_16_fu_989_p2 = (xor_ln40_15_fu_983_p2 ^ xor_ln40_13_fu_973_p2);

assign xor_ln40_17_fu_995_p2 = (xor_ln40_16_fu_989_p2 ^ xor_ln40_11_fu_962_p2);

assign xor_ln40_18_fu_1001_p2 = (xor_ln40_7_reg_1744 ^ xor_ln40_17_fu_995_p2);

assign xor_ln40_1_fu_783_p2 = (xor_ln37_4_fu_715_p2 ^ D_load_4_reg_1480);

assign xor_ln40_2_fu_788_p2 = (xor_ln40_1_fu_783_p2 ^ xor_ln37_1_fu_701_p2);

assign xor_ln40_3_fu_794_p2 = (D_load_9_reg_1536 ^ D_load_12_reg_1576);

assign xor_ln40_4_fu_798_p2 = (xor_ln40_3_fu_794_p2 ^ D_load_8_reg_1528);

assign xor_ln40_5_fu_803_p2 = (xor_ln37_11_fu_749_p2 ^ D_load_13_reg_1584);

assign xor_ln40_6_fu_808_p2 = (xor_ln40_5_fu_803_p2 ^ xor_ln40_4_fu_798_p2);

assign xor_ln40_7_fu_814_p2 = (xor_ln40_6_fu_808_p2 ^ xor_ln40_2_fu_788_p2);

assign xor_ln40_8_fu_954_p2 = (D_load_16_reg_1628 ^ D_load_15_reg_1606);

assign xor_ln40_9_fu_820_p2 = (D_load_19_reg_1677 ^ D_load_18_reg_1670);

assign xor_ln40_fu_779_p2 = (D_load_1_reg_1441 ^ D_load_14_reg_1600);

assign xor_ln44_10_fu_1055_p2 = (D_q1 ^ D_load_23_reg_1820);

assign xor_ln44_11_fu_1060_p2 = (xor_ln44_reg_1760 ^ C_q1);

assign xor_ln44_12_fu_1065_p2 = (xor_ln44_11_fu_1060_p2 ^ D_q0);

assign xor_ln44_13_fu_1071_p2 = (xor_ln44_12_fu_1065_p2 ^ xor_ln44_10_fu_1055_p2);

assign xor_ln44_14_fu_1077_p2 = (xor_ln44_9_fu_1049_p2 ^ xor_ln44_13_fu_1071_p2);

assign xor_ln44_15_fu_1083_p2 = (xor_ln44_6_reg_1766 ^ xor_ln44_14_fu_1077_p2);

assign xor_ln44_1_fu_828_p2 = (D_load_9_reg_1536 ^ D_load_10_reg_1553);

assign xor_ln44_2_fu_832_p2 = (xor_ln44_1_fu_828_p2 ^ xor_ln37_9_fu_739_p2);

assign xor_ln44_3_fu_838_p2 = (D_load_15_reg_1606 ^ C_load_reg_1652);

assign xor_ln44_4_fu_842_p2 = (xor_ln40_9_fu_820_p2 ^ D_load_16_reg_1628);

assign xor_ln44_5_fu_847_p2 = (xor_ln44_4_fu_842_p2 ^ xor_ln44_3_fu_838_p2);

assign xor_ln44_6_fu_853_p2 = (xor_ln44_5_fu_847_p2 ^ xor_ln44_2_fu_832_p2);

assign xor_ln44_7_fu_1041_p2 = (D_load_22_reg_1801 ^ D_load_20_reg_1710);

assign xor_ln44_8_fu_1045_p2 = (C_load_4_reg_1812 ^ C_load_3_reg_1806);

assign xor_ln44_9_fu_1049_p2 = (xor_ln44_8_fu_1045_p2 ^ xor_ln44_7_fu_1041_p2);

assign xor_ln44_fu_824_p2 = (D_load_2_reg_1457 ^ D_load_14_reg_1600);

assign xor_ln47_10_fu_1107_p2 = (xor_ln40_reg_1737 ^ C_q1);

assign xor_ln47_11_fu_1112_p2 = (xor_ln47_10_fu_1107_p2 ^ D_q1);

assign xor_ln47_12_fu_1118_p2 = (xor_ln47_9_fu_1103_p2 ^ xor_ln47_11_fu_1112_p2);

assign xor_ln47_13_fu_1124_p2 = (xor_ln47_8_fu_1097_p2 ^ xor_ln47_12_fu_1118_p2);

assign xor_ln47_14_fu_1130_p2 = (xor_ln47_5_reg_1842 ^ xor_ln47_13_fu_1124_p2);

assign xor_ln47_1_fu_863_p2 = (D_load_8_reg_1528 ^ D_load_7_reg_1511);

assign xor_ln47_2_fu_867_p2 = (xor_ln47_fu_859_p2 ^ xor_ln47_1_fu_863_p2);

assign xor_ln47_3_fu_1007_p2 = (D_load_11_reg_1559 ^ C_load_1_reg_1693);

assign xor_ln47_4_fu_1011_p2 = (xor_ln47_3_fu_1007_p2 ^ xor_ln40_13_fu_973_p2);

assign xor_ln47_5_fu_1017_p2 = (xor_ln47_4_fu_1011_p2 ^ xor_ln47_2_reg_1771);

assign xor_ln47_6_fu_1089_p2 = (D_load_23_reg_1820 ^ C_load_4_reg_1812);

assign xor_ln47_7_fu_1093_p2 = (D_load_25_reg_1858 ^ C_load_5_reg_1864);

assign xor_ln47_8_fu_1097_p2 = (xor_ln47_7_fu_1093_p2 ^ xor_ln47_6_fu_1089_p2);

assign xor_ln47_9_fu_1103_p2 = (D_load_27_reg_1887 ^ D_load_26_reg_1880);

assign xor_ln47_fu_859_p2 = (D_load_6_reg_1504 ^ D_load_3_reg_1464);

assign xor_ln50_10_fu_1198_p2 = (D_load_29_reg_1920 ^ C_load_6_reg_1914);

assign xor_ln50_11_fu_1202_p2 = (xor_ln37_reg_1705 ^ C_q0);

assign xor_ln50_12_fu_1207_p2 = (xor_ln50_11_fu_1202_p2 ^ D_q1);

assign xor_ln50_13_fu_1213_p2 = (xor_ln50_12_fu_1207_p2 ^ xor_ln50_10_fu_1198_p2);

assign xor_ln50_14_fu_1219_p2 = (xor_ln50_9_reg_1937 ^ xor_ln50_13_fu_1213_p2);

assign xor_ln50_15_fu_1224_p2 = (xor_ln50_5_fu_1193_p2 ^ xor_ln50_14_fu_1219_p2);

assign xor_ln50_1_fu_877_p2 = (xor_ln50_fu_873_p2 ^ xor_ln44_1_fu_828_p2);

assign xor_ln50_2_fu_1179_p2 = (C_load_2_reg_1700 ^ C_load_1_reg_1693);

assign xor_ln50_3_fu_1183_p2 = (xor_ln40_9_reg_1749 ^ D_load_15_reg_1606);

assign xor_ln50_4_fu_1187_p2 = (xor_ln50_3_fu_1183_p2 ^ xor_ln50_2_fu_1179_p2);

assign xor_ln50_5_fu_1193_p2 = (xor_ln50_4_fu_1187_p2 ^ xor_ln50_1_reg_1776);

assign xor_ln50_6_fu_1136_p2 = (D_load_24_reg_1852 ^ C_load_3_reg_1806);

assign xor_ln50_7_fu_1140_p2 = (D_q1 ^ D_load_26_reg_1880);

assign xor_ln50_8_fu_1145_p2 = (xor_ln50_7_fu_1140_p2 ^ D_load_25_reg_1858);

assign xor_ln50_9_fu_1150_p2 = (xor_ln50_8_fu_1145_p2 ^ xor_ln50_6_fu_1136_p2);

assign xor_ln50_fu_873_p2 = (D_load_8_reg_1528 ^ D_load_5_reg_1487);

assign xor_ln53_10_fu_1245_p2 = (D_load_29_reg_1920 ^ D_load_28_reg_1909);

assign xor_ln53_11_fu_1249_p2 = (D_q0 ^ C_q0);

assign xor_ln53_12_fu_1255_p2 = (xor_ln53_11_fu_1249_p2 ^ D_q1);

assign xor_ln53_13_fu_1261_p2 = (xor_ln53_12_fu_1255_p2 ^ xor_ln53_10_fu_1245_p2);

assign xor_ln53_14_fu_1267_p2 = (xor_ln53_9_fu_1239_p2 ^ xor_ln53_13_fu_1261_p2);

assign xor_ln53_15_fu_1273_p2 = (xor_ln53_6_reg_1786 ^ xor_ln53_14_fu_1267_p2);

assign xor_ln53_1_fu_887_p2 = (xor_ln53_fu_883_p2 ^ xor_ln37_4_fu_715_p2);

assign xor_ln53_2_fu_893_p2 = (C_q1 ^ C_load_reg_1652);

assign xor_ln53_3_fu_898_p2 = (D_q1 ^ D_load_19_reg_1677);

assign xor_ln53_4_fu_903_p2 = (xor_ln53_3_fu_898_p2 ^ D_load_17_reg_1635);

assign xor_ln53_5_fu_908_p2 = (xor_ln53_4_fu_903_p2 ^ xor_ln53_2_fu_893_p2);

assign xor_ln53_6_fu_914_p2 = (xor_ln53_5_fu_908_p2 ^ xor_ln53_1_fu_887_p2);

assign xor_ln53_7_fu_1231_p2 = (D_load_23_reg_1820 ^ D_load_21_reg_1716);

assign xor_ln53_8_fu_1235_p2 = (D_load_27_reg_1887 ^ C_load_5_reg_1864);

assign xor_ln53_9_fu_1239_p2 = (xor_ln53_8_fu_1235_p2 ^ xor_ln53_7_fu_1231_p2);

assign xor_ln53_fu_883_p2 = (D_load_reg_1435 ^ D_load_2_reg_1457);

assign xor_ln56_10_fu_1289_p2 = (xor_ln56_9_fu_1284_p2 ^ xor_ln56_8_fu_1279_p2);

assign xor_ln56_11_fu_1295_p2 = (xor_ln56_7_reg_1947 ^ xor_ln56_10_fu_1289_p2);

assign xor_ln56_12_fu_1300_p2 = (xor_ln56_4_reg_1791 ^ xor_ln56_11_fu_1295_p2);

assign xor_ln56_1_fu_924_p2 = (xor_ln56_fu_920_p2 ^ D_load_5_reg_1487);

assign xor_ln56_2_fu_929_p2 = (D_load_12_reg_1576 ^ C_load_reg_1652);

assign xor_ln56_3_fu_933_p2 = (xor_ln56_2_fu_929_p2 ^ xor_ln37_5_fu_719_p2);

assign xor_ln56_4_fu_939_p2 = (xor_ln56_3_fu_933_p2 ^ xor_ln56_1_fu_924_p2);

assign xor_ln56_5_fu_1156_p2 = (D_load_18_reg_1670 ^ C_load_4_reg_1812);

assign xor_ln56_6_fu_1160_p2 = (D_load_26_reg_1880 ^ D_load_24_reg_1852);

assign xor_ln56_7_fu_1164_p2 = (xor_ln56_6_fu_1160_p2 ^ xor_ln56_5_fu_1156_p2);

assign xor_ln56_8_fu_1279_p2 = (D_q1 ^ C_load_6_reg_1914);

assign xor_ln56_9_fu_1284_p2 = (xor_ln44_reg_1760 ^ D_q0);

assign xor_ln56_fu_920_p2 = (D_load_7_reg_1511 ^ D_load_4_reg_1480);

assign xor_ln59_10_fu_1315_p2 = (xor_ln59_9_fu_1310_p2 ^ xor_ln59_8_fu_1305_p2);

assign xor_ln59_11_fu_1321_p2 = (xor_ln59_7_reg_1952 ^ xor_ln59_10_fu_1315_p2);

assign xor_ln59_12_fu_1326_p2 = (xor_ln59_5_reg_1847 ^ xor_ln59_11_fu_1321_p2);

assign xor_ln59_1_fu_949_p2 = (xor_ln59_fu_945_p2 ^ D_load_11_reg_1559);

assign xor_ln59_2_fu_1022_p2 = (D_load_16_reg_1628 ^ C_load_1_reg_1693);

assign xor_ln59_3_fu_1026_p2 = (D_load_18_reg_1670 ^ D_load_17_reg_1635);

assign xor_ln59_4_fu_1030_p2 = (xor_ln59_3_fu_1026_p2 ^ xor_ln59_2_fu_1022_p2);

assign xor_ln59_5_fu_1036_p2 = (xor_ln59_4_fu_1030_p2 ^ xor_ln59_1_reg_1796);

assign xor_ln59_6_fu_1170_p2 = (D_load_27_reg_1887 ^ C_load_4_reg_1812);

assign xor_ln59_7_fu_1174_p2 = (xor_ln59_6_fu_1170_p2 ^ xor_ln53_3_reg_1781);

assign xor_ln59_8_fu_1305_p2 = (D_load_29_reg_1920 ^ C_q0);

assign xor_ln59_9_fu_1310_p2 = (xor_ln40_reg_1737 ^ D_q0);

assign xor_ln59_fu_945_p2 = (D_load_6_reg_1504 ^ D_load_12_reg_1576);

assign zext_ln27_fu_637_p1 = i_0_reg_562;

assign zext_ln33_fu_673_p1 = i_1_reg_582;

assign zext_ln64_fu_1331_p1 = i_2_reg_602;

assign zext_ln65_1_fu_1352_p1 = NewCRC_q1;

assign zext_ln65_fu_1347_p1 = i_2_reg_602;

always @ (posedge ap_clk) begin
    zext_ln64_reg_1967[7:4] <= 4'b0000;
end

endmodule //calc_crc8
