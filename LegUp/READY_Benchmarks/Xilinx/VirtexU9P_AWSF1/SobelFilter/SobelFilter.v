// ----------------------------------------------------------------------------
// LegUp High-Level Synthesis Tool Version 7.5 (http://legupcomputing.com)
// Copyright (c) 2015-2019 LegUp Computing Inc. All Rights Reserved.
// For technical issues, please contact: support@legupcomputing.com
// For general inquiries, please contact: info@legupcomputing.com
// Date: Wed Apr 29 09:51:09 2020
// ----------------------------------------------------------------------------
`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 6
`define MEMORY_CONTROLLER_TAG_SIZE 9
// This directory contains the memory initialization files generated by LegUp.
// This relative path is used by ModelSim and FPGA synthesis tool.
`define MEM_INIT_DIR "../mem_init/"
//   %sobel_h.i = alloca [9 x i32], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
`define TAG_main_entry_sobel_h_i `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_entry_sobel_h_i_a {`TAG_main_entry_sobel_h_i, 23'd0}
//   %sobel_h_res.i = alloca [8 x [1024 x i32]], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
`define TAG_main_entry_sobel_h_res_i `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_entry_sobel_h_res_i_a {`TAG_main_entry_sobel_h_res_i, 23'd0}
//   %sobel_v.i = alloca [9 x i32], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
`define TAG_main_entry_sobel_v_i `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_entry_sobel_v_i_a {`TAG_main_entry_sobel_v_i, 23'd0}
//   %sobel_v_res.i = alloca [8 x [1024 x i32]], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
`define TAG_main_entry_sobel_v_res_i `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_entry_sobel_v_res_i_a {`TAG_main_entry_sobel_v_res_i, 23'd0}

`timescale 1 ns / 1 ns
module top
(
	clk,
	reset,
	start,
	finish,
	return_val
);

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
reg  main_inst_clk;
reg  main_inst_reset;
reg  main_inst_start;
wire  main_inst_finish;
wire [31:0] main_inst_return_val;
wire  main_inst_itConv_start;
reg  main_inst_itConv_finish;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_itConv_buffer;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_itConv_op;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_itConv_res;
wire  main_inst_memory_controller_0_write_enable_a;
wire [63:0] main_inst_memory_controller_0_in_a;
wire  main_inst_memory_controller_0_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_memory_controller_0_address_a;
wire [1:0] main_inst_memory_controller_0_size_a;
reg [63:0] main_inst_memory_controller_0_out_a;
wire  main_inst_memory_controller_0_write_enable_b;
wire [63:0] main_inst_memory_controller_0_in_b;
wire  main_inst_memory_controller_0_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_memory_controller_0_address_b;
wire [1:0] main_inst_memory_controller_0_size_b;
reg [63:0] main_inst_memory_controller_0_out_b;
wire  main_inst_main_entry_vla59_i_write_enable_a;
wire [31:0] main_inst_main_entry_vla59_i_in_a;
wire  main_inst_main_entry_vla59_i_byteena_a;
wire  main_inst_main_entry_vla59_i_enable_a;
wire [12:0] main_inst_main_entry_vla59_i_address_a;
reg [31:0] main_inst_main_entry_vla59_i_out_a;
wire  main_inst_memory_controller_1_write_enable_a;
wire [63:0] main_inst_memory_controller_1_in_a;
wire  main_inst_memory_controller_1_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_memory_controller_1_address_a;
wire [1:0] main_inst_memory_controller_1_size_a;
reg [63:0] main_inst_memory_controller_1_out_a;
wire  main_inst_memory_controller_1_write_enable_b;
wire [63:0] main_inst_memory_controller_1_in_b;
wire  main_inst_memory_controller_1_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_inst_memory_controller_1_address_b;
wire [1:0] main_inst_memory_controller_1_size_b;
reg [63:0] main_inst_memory_controller_1_out_b;
reg  main_inst_finish_reg;
reg [31:0] main_inst_return_val_reg;
reg  memory_controller_0_inst_clk;
wire  memory_controller_0_inst_memory_controller_waitrequest;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_inst_memory_controller_address_a;
reg  memory_controller_0_inst_memory_controller_enable_a;
reg [1:0] memory_controller_0_inst_memory_controller_size_a;
reg  memory_controller_0_inst_memory_controller_write_enable_a;
reg [63:0] memory_controller_0_inst_memory_controller_in_a;
wire [63:0] memory_controller_0_inst_memory_controller_out_reg_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_inst_memory_controller_address_b;
reg  memory_controller_0_inst_memory_controller_enable_b;
reg [1:0] memory_controller_0_inst_memory_controller_size_b;
reg  memory_controller_0_inst_memory_controller_write_enable_b;
reg [63:0] memory_controller_0_inst_memory_controller_in_b;
wire [63:0] memory_controller_0_inst_memory_controller_out_reg_b;
reg  main_entry_vla59_i_inst_clk;
wire  main_entry_vla59_i_inst_clken;
reg [12:0] main_entry_vla59_i_inst_address_a;
reg  main_entry_vla59_i_inst_wren_a;
reg [31:0] main_entry_vla59_i_inst_data_a;
reg  main_entry_vla59_i_inst_byteena_a;
wire [31:0] main_entry_vla59_i_inst_q_a;
reg  memory_controller_1_inst_clk;
wire  memory_controller_1_inst_memory_controller_waitrequest;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_inst_memory_controller_address_a;
reg  memory_controller_1_inst_memory_controller_enable_a;
reg [1:0] memory_controller_1_inst_memory_controller_size_a;
reg  memory_controller_1_inst_memory_controller_write_enable_a;
reg [63:0] memory_controller_1_inst_memory_controller_in_a;
wire [63:0] memory_controller_1_inst_memory_controller_out_reg_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_inst_memory_controller_address_b;
reg  memory_controller_1_inst_memory_controller_enable_b;
reg [1:0] memory_controller_1_inst_memory_controller_size_b;
reg  memory_controller_1_inst_memory_controller_write_enable_b;
reg [63:0] memory_controller_1_inst_memory_controller_in_b;
wire [63:0] memory_controller_1_inst_memory_controller_out_reg_b;
reg  itConv_inst_clk;
reg  itConv_inst_reset;
reg  itConv_inst_start;
wire  itConv_inst_finish;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_buffer;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_op;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_res;
wire  itConv_inst_main_entry_vla59_i_write_enable_a;
wire [31:0] itConv_inst_main_entry_vla59_i_in_a;
wire  itConv_inst_main_entry_vla59_i_byteena_a;
wire  itConv_inst_main_entry_vla59_i_enable_a;
wire [12:0] itConv_inst_main_entry_vla59_i_address_a;
reg [31:0] itConv_inst_main_entry_vla59_i_out_a;
wire  itConv_inst_memory_controller_0_write_enable_a;
wire [63:0] itConv_inst_memory_controller_0_in_a;
wire  itConv_inst_memory_controller_0_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_memory_controller_0_address_a;
wire [1:0] itConv_inst_memory_controller_0_size_a;
reg [63:0] itConv_inst_memory_controller_0_out_a;
wire  itConv_inst_memory_controller_0_write_enable_b;
wire [63:0] itConv_inst_memory_controller_0_in_b;
wire  itConv_inst_memory_controller_0_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_memory_controller_0_address_b;
wire [1:0] itConv_inst_memory_controller_0_size_b;
reg [63:0] itConv_inst_memory_controller_0_out_b;
wire  itConv_inst_memory_controller_1_write_enable_a;
wire [63:0] itConv_inst_memory_controller_1_in_a;
wire  itConv_inst_memory_controller_1_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_memory_controller_1_address_a;
wire [1:0] itConv_inst_memory_controller_1_size_a;
reg [63:0] itConv_inst_memory_controller_1_out_a;
wire  itConv_inst_memory_controller_1_write_enable_b;
wire [63:0] itConv_inst_memory_controller_1_in_b;
wire  itConv_inst_memory_controller_1_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_inst_memory_controller_1_address_b;
wire [1:0] itConv_inst_memory_controller_1_size_b;
reg [63:0] itConv_inst_memory_controller_1_out_b;
reg  itConv_inst_finish_reg;


main main_inst (
	.clk (main_inst_clk),
	.reset (main_inst_reset),
	.start (main_inst_start),
	.finish (main_inst_finish),
	.return_val (main_inst_return_val),
	.itConv_start (main_inst_itConv_start),
	.itConv_finish (main_inst_itConv_finish),
	.itConv_buffer (main_inst_itConv_buffer),
	.itConv_op (main_inst_itConv_op),
	.itConv_res (main_inst_itConv_res),
	.memory_controller_0_write_enable_a (main_inst_memory_controller_0_write_enable_a),
	.memory_controller_0_in_a (main_inst_memory_controller_0_in_a),
	.memory_controller_0_enable_a (main_inst_memory_controller_0_enable_a),
	.memory_controller_0_address_a (main_inst_memory_controller_0_address_a),
	.memory_controller_0_size_a (main_inst_memory_controller_0_size_a),
	.memory_controller_0_out_a (main_inst_memory_controller_0_out_a),
	.memory_controller_0_write_enable_b (main_inst_memory_controller_0_write_enable_b),
	.memory_controller_0_in_b (main_inst_memory_controller_0_in_b),
	.memory_controller_0_enable_b (main_inst_memory_controller_0_enable_b),
	.memory_controller_0_address_b (main_inst_memory_controller_0_address_b),
	.memory_controller_0_size_b (main_inst_memory_controller_0_size_b),
	.memory_controller_0_out_b (main_inst_memory_controller_0_out_b),
	.main_entry_vla59_i_write_enable_a (main_inst_main_entry_vla59_i_write_enable_a),
	.main_entry_vla59_i_in_a (main_inst_main_entry_vla59_i_in_a),
	.main_entry_vla59_i_byteena_a (main_inst_main_entry_vla59_i_byteena_a),
	.main_entry_vla59_i_enable_a (main_inst_main_entry_vla59_i_enable_a),
	.main_entry_vla59_i_address_a (main_inst_main_entry_vla59_i_address_a),
	.main_entry_vla59_i_out_a (main_inst_main_entry_vla59_i_out_a),
	.memory_controller_1_write_enable_a (main_inst_memory_controller_1_write_enable_a),
	.memory_controller_1_in_a (main_inst_memory_controller_1_in_a),
	.memory_controller_1_enable_a (main_inst_memory_controller_1_enable_a),
	.memory_controller_1_address_a (main_inst_memory_controller_1_address_a),
	.memory_controller_1_size_a (main_inst_memory_controller_1_size_a),
	.memory_controller_1_out_a (main_inst_memory_controller_1_out_a),
	.memory_controller_1_write_enable_b (main_inst_memory_controller_1_write_enable_b),
	.memory_controller_1_in_b (main_inst_memory_controller_1_in_b),
	.memory_controller_1_enable_b (main_inst_memory_controller_1_enable_b),
	.memory_controller_1_address_b (main_inst_memory_controller_1_address_b),
	.memory_controller_1_size_b (main_inst_memory_controller_1_size_b),
	.memory_controller_1_out_b (main_inst_memory_controller_1_out_b)
);



memory_controller_0 memory_controller_0_inst (
	.clk (memory_controller_0_inst_clk),
	.memory_controller_waitrequest (memory_controller_0_inst_memory_controller_waitrequest),
	.memory_controller_address_a (memory_controller_0_inst_memory_controller_address_a),
	.memory_controller_enable_a (memory_controller_0_inst_memory_controller_enable_a),
	.memory_controller_size_a (memory_controller_0_inst_memory_controller_size_a),
	.memory_controller_write_enable_a (memory_controller_0_inst_memory_controller_write_enable_a),
	.memory_controller_in_a (memory_controller_0_inst_memory_controller_in_a),
	.memory_controller_out_reg_a (memory_controller_0_inst_memory_controller_out_reg_a),
	.memory_controller_address_b (memory_controller_0_inst_memory_controller_address_b),
	.memory_controller_enable_b (memory_controller_0_inst_memory_controller_enable_b),
	.memory_controller_size_b (memory_controller_0_inst_memory_controller_size_b),
	.memory_controller_write_enable_b (memory_controller_0_inst_memory_controller_write_enable_b),
	.memory_controller_in_b (memory_controller_0_inst_memory_controller_in_b),
	.memory_controller_out_reg_b (memory_controller_0_inst_memory_controller_out_reg_b)
);



ram_single_port main_entry_vla59_i_inst (
	.clk (main_entry_vla59_i_inst_clk),
	.clken (main_entry_vla59_i_inst_clken),
	.address_a (main_entry_vla59_i_inst_address_a),
	.wren_a (main_entry_vla59_i_inst_wren_a),
	.data_a (main_entry_vla59_i_inst_data_a),
	.byteena_a (main_entry_vla59_i_inst_byteena_a),
	.q_a (main_entry_vla59_i_inst_q_a)
);

defparam
	main_entry_vla59_i_inst.width_a = 32,
	main_entry_vla59_i_inst.widthad_a = 13,
	main_entry_vla59_i_inst.width_be_a = 1,
	main_entry_vla59_i_inst.numwords_a = 8192,
	main_entry_vla59_i_inst.latency = 1;


memory_controller_1 memory_controller_1_inst (
	.clk (memory_controller_1_inst_clk),
	.memory_controller_waitrequest (memory_controller_1_inst_memory_controller_waitrequest),
	.memory_controller_address_a (memory_controller_1_inst_memory_controller_address_a),
	.memory_controller_enable_a (memory_controller_1_inst_memory_controller_enable_a),
	.memory_controller_size_a (memory_controller_1_inst_memory_controller_size_a),
	.memory_controller_write_enable_a (memory_controller_1_inst_memory_controller_write_enable_a),
	.memory_controller_in_a (memory_controller_1_inst_memory_controller_in_a),
	.memory_controller_out_reg_a (memory_controller_1_inst_memory_controller_out_reg_a),
	.memory_controller_address_b (memory_controller_1_inst_memory_controller_address_b),
	.memory_controller_enable_b (memory_controller_1_inst_memory_controller_enable_b),
	.memory_controller_size_b (memory_controller_1_inst_memory_controller_size_b),
	.memory_controller_write_enable_b (memory_controller_1_inst_memory_controller_write_enable_b),
	.memory_controller_in_b (memory_controller_1_inst_memory_controller_in_b),
	.memory_controller_out_reg_b (memory_controller_1_inst_memory_controller_out_reg_b)
);



itConv itConv_inst (
	.clk (itConv_inst_clk),
	.reset (itConv_inst_reset),
	.start (itConv_inst_start),
	.finish (itConv_inst_finish),
	.buffer (itConv_inst_buffer),
	.op (itConv_inst_op),
	.res (itConv_inst_res),
	.main_entry_vla59_i_write_enable_a (itConv_inst_main_entry_vla59_i_write_enable_a),
	.main_entry_vla59_i_in_a (itConv_inst_main_entry_vla59_i_in_a),
	.main_entry_vla59_i_byteena_a (itConv_inst_main_entry_vla59_i_byteena_a),
	.main_entry_vla59_i_enable_a (itConv_inst_main_entry_vla59_i_enable_a),
	.main_entry_vla59_i_address_a (itConv_inst_main_entry_vla59_i_address_a),
	.main_entry_vla59_i_out_a (itConv_inst_main_entry_vla59_i_out_a),
	.memory_controller_0_write_enable_a (itConv_inst_memory_controller_0_write_enable_a),
	.memory_controller_0_in_a (itConv_inst_memory_controller_0_in_a),
	.memory_controller_0_enable_a (itConv_inst_memory_controller_0_enable_a),
	.memory_controller_0_address_a (itConv_inst_memory_controller_0_address_a),
	.memory_controller_0_size_a (itConv_inst_memory_controller_0_size_a),
	.memory_controller_0_out_a (itConv_inst_memory_controller_0_out_a),
	.memory_controller_0_write_enable_b (itConv_inst_memory_controller_0_write_enable_b),
	.memory_controller_0_in_b (itConv_inst_memory_controller_0_in_b),
	.memory_controller_0_enable_b (itConv_inst_memory_controller_0_enable_b),
	.memory_controller_0_address_b (itConv_inst_memory_controller_0_address_b),
	.memory_controller_0_size_b (itConv_inst_memory_controller_0_size_b),
	.memory_controller_0_out_b (itConv_inst_memory_controller_0_out_b),
	.memory_controller_1_write_enable_a (itConv_inst_memory_controller_1_write_enable_a),
	.memory_controller_1_in_a (itConv_inst_memory_controller_1_in_a),
	.memory_controller_1_enable_a (itConv_inst_memory_controller_1_enable_a),
	.memory_controller_1_address_a (itConv_inst_memory_controller_1_address_a),
	.memory_controller_1_size_a (itConv_inst_memory_controller_1_size_a),
	.memory_controller_1_out_a (itConv_inst_memory_controller_1_out_a),
	.memory_controller_1_write_enable_b (itConv_inst_memory_controller_1_write_enable_b),
	.memory_controller_1_in_b (itConv_inst_memory_controller_1_in_b),
	.memory_controller_1_enable_b (itConv_inst_memory_controller_1_enable_b),
	.memory_controller_1_address_b (itConv_inst_memory_controller_1_address_b),
	.memory_controller_1_size_b (itConv_inst_memory_controller_1_size_b),
	.memory_controller_1_out_b (itConv_inst_memory_controller_1_out_b)
);



always @(*) begin
	main_inst_clk = clk;
end
always @(*) begin
	main_inst_reset = reset;
end
always @(*) begin
	main_inst_start = start;
end
always @(*) begin
	main_inst_itConv_finish = (~(itConv_inst_start) & itConv_inst_finish_reg);
end
always @(*) begin
	main_inst_memory_controller_0_out_a = memory_controller_0_inst_memory_controller_out_reg_a;
end
always @(*) begin
	main_inst_memory_controller_0_out_b = memory_controller_0_inst_memory_controller_out_reg_b;
end
always @(*) begin
	main_inst_main_entry_vla59_i_out_a = main_entry_vla59_i_inst_q_a;
end
always @(*) begin
	main_inst_memory_controller_1_out_a = memory_controller_1_inst_memory_controller_out_reg_a;
end
always @(*) begin
	main_inst_memory_controller_1_out_b = memory_controller_1_inst_memory_controller_out_reg_b;
end
always @(posedge clk) begin
	if ((reset | main_inst_start)) begin
		main_inst_finish_reg <= 1'd0;
	end
	if (main_inst_finish) begin
		main_inst_finish_reg <= 1'd1;
	end
end
always @(posedge clk) begin
	if ((reset | main_inst_start)) begin
		main_inst_return_val_reg <= 0;
	end
	if (main_inst_finish) begin
		main_inst_return_val_reg <= main_inst_return_val;
	end
end
always @(*) begin
	memory_controller_0_inst_clk = clk;
end
assign memory_controller_0_inst_memory_controller_waitrequest = 1'd0;
always @(*) begin
	memory_controller_0_inst_memory_controller_address_a = (itConv_inst_memory_controller_0_address_a | main_inst_memory_controller_0_address_a);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_enable_a = (itConv_inst_memory_controller_0_enable_a | main_inst_memory_controller_0_enable_a);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_size_a = (itConv_inst_memory_controller_0_size_a | main_inst_memory_controller_0_size_a);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_write_enable_a = (itConv_inst_memory_controller_0_write_enable_a | main_inst_memory_controller_0_write_enable_a);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_in_a = (itConv_inst_memory_controller_0_in_a | main_inst_memory_controller_0_in_a);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_address_b = (itConv_inst_memory_controller_0_address_b | main_inst_memory_controller_0_address_b);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_enable_b = (itConv_inst_memory_controller_0_enable_b | main_inst_memory_controller_0_enable_b);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_size_b = (itConv_inst_memory_controller_0_size_b | main_inst_memory_controller_0_size_b);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_write_enable_b = (itConv_inst_memory_controller_0_write_enable_b | main_inst_memory_controller_0_write_enable_b);
end
always @(*) begin
	memory_controller_0_inst_memory_controller_in_b = (itConv_inst_memory_controller_0_in_b | main_inst_memory_controller_0_in_b);
end
always @(*) begin
	main_entry_vla59_i_inst_clk = clk;
end
assign main_entry_vla59_i_inst_clken = ~(1'd0);
always @(*) begin
	main_entry_vla59_i_inst_address_a = (itConv_inst_main_entry_vla59_i_address_a | main_inst_main_entry_vla59_i_address_a);
end
always @(*) begin
	main_entry_vla59_i_inst_wren_a = (itConv_inst_main_entry_vla59_i_write_enable_a | main_inst_main_entry_vla59_i_write_enable_a);
end
always @(*) begin
	main_entry_vla59_i_inst_data_a = (itConv_inst_main_entry_vla59_i_in_a | main_inst_main_entry_vla59_i_in_a);
end
always @(*) begin
	main_entry_vla59_i_inst_byteena_a = (itConv_inst_main_entry_vla59_i_byteena_a | main_inst_main_entry_vla59_i_byteena_a);
end
always @(*) begin
	memory_controller_1_inst_clk = clk;
end
assign memory_controller_1_inst_memory_controller_waitrequest = 1'd0;
always @(*) begin
	memory_controller_1_inst_memory_controller_address_a = (itConv_inst_memory_controller_1_address_a | main_inst_memory_controller_1_address_a);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_enable_a = (itConv_inst_memory_controller_1_enable_a | main_inst_memory_controller_1_enable_a);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_size_a = (itConv_inst_memory_controller_1_size_a | main_inst_memory_controller_1_size_a);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_write_enable_a = (itConv_inst_memory_controller_1_write_enable_a | main_inst_memory_controller_1_write_enable_a);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_in_a = (itConv_inst_memory_controller_1_in_a | main_inst_memory_controller_1_in_a);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_address_b = (itConv_inst_memory_controller_1_address_b | main_inst_memory_controller_1_address_b);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_enable_b = (itConv_inst_memory_controller_1_enable_b | main_inst_memory_controller_1_enable_b);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_size_b = (itConv_inst_memory_controller_1_size_b | main_inst_memory_controller_1_size_b);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_write_enable_b = (itConv_inst_memory_controller_1_write_enable_b | main_inst_memory_controller_1_write_enable_b);
end
always @(*) begin
	memory_controller_1_inst_memory_controller_in_b = (itConv_inst_memory_controller_1_in_b | main_inst_memory_controller_1_in_b);
end
always @(*) begin
	itConv_inst_clk = clk;
end
always @(*) begin
	itConv_inst_reset = reset;
end
always @(*) begin
	itConv_inst_start = main_inst_itConv_start;
end
always @(*) begin
	itConv_inst_buffer = main_inst_itConv_buffer;
end
always @(*) begin
	itConv_inst_op = main_inst_itConv_op;
end
always @(*) begin
	itConv_inst_res = main_inst_itConv_res;
end
always @(*) begin
	itConv_inst_main_entry_vla59_i_out_a = main_entry_vla59_i_inst_q_a;
end
always @(*) begin
	itConv_inst_memory_controller_0_out_a = memory_controller_0_inst_memory_controller_out_reg_a;
end
always @(*) begin
	itConv_inst_memory_controller_0_out_b = memory_controller_0_inst_memory_controller_out_reg_b;
end
always @(*) begin
	itConv_inst_memory_controller_1_out_a = memory_controller_1_inst_memory_controller_out_reg_a;
end
always @(*) begin
	itConv_inst_memory_controller_1_out_b = memory_controller_1_inst_memory_controller_out_reg_b;
end
always @(posedge clk) begin
	if ((reset | itConv_inst_start)) begin
		itConv_inst_finish_reg <= 1'd0;
	end
	if (itConv_inst_finish) begin
		itConv_inst_finish_reg <= 1'd1;
	end
end
always @(*) begin
	finish = main_inst_finish;
end
always @(*) begin
	return_val = main_inst_return_val;
end

endmodule
`timescale 1 ns / 1 ns
module memory_controller_0
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [3:0] main_entry_sobel_h_i_address_a;
reg [3:0] main_entry_sobel_h_i_address_b;
reg main_entry_sobel_h_i_write_enable_a;
reg main_entry_sobel_h_i_write_enable_b;
reg [31:0] main_entry_sobel_h_i_in_a;
reg [31:0] main_entry_sobel_h_i_in_b;
wire [31:0] main_entry_sobel_h_i_out_a;
wire [31:0] main_entry_sobel_h_i_out_b;

//   %sobel_h.i = alloca [9 x i32], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
ram_dual_port main_entry_sobel_h_i (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_entry_sobel_h_i_address_a ),
	.wren_a( main_entry_sobel_h_i_write_enable_a ),
	.data_a( main_entry_sobel_h_i_in_a ),
	.byteena_a( {4{1'b1}} ),
	.q_a( main_entry_sobel_h_i_out_a ),
	.address_b( main_entry_sobel_h_i_address_b ),
	.wren_b( main_entry_sobel_h_i_write_enable_b ),
	.data_b( main_entry_sobel_h_i_in_b ),
	.byteena_b( {4{1'b1}} ),
	.q_b( main_entry_sobel_h_i_out_b )
);
defparam main_entry_sobel_h_i.width_a = 32;
defparam main_entry_sobel_h_i.widthad_a = 4;
defparam main_entry_sobel_h_i.width_be_a = 4;
defparam main_entry_sobel_h_i.numwords_a = 9;
defparam main_entry_sobel_h_i.width_b = 32;
defparam main_entry_sobel_h_i.widthad_b = 4;
defparam main_entry_sobel_h_i.width_be_b = 4;
defparam main_entry_sobel_h_i.numwords_b = 9;
defparam main_entry_sobel_h_i.latency = ram_latency;

reg [3:0] main_entry_sobel_v_i_address_a;
reg [3:0] main_entry_sobel_v_i_address_b;
reg main_entry_sobel_v_i_write_enable_a;
reg main_entry_sobel_v_i_write_enable_b;
reg [31:0] main_entry_sobel_v_i_in_a;
reg [31:0] main_entry_sobel_v_i_in_b;
wire [31:0] main_entry_sobel_v_i_out_a;
wire [31:0] main_entry_sobel_v_i_out_b;

//   %sobel_v.i = alloca [9 x i32], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
ram_dual_port main_entry_sobel_v_i (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_entry_sobel_v_i_address_a ),
	.wren_a( main_entry_sobel_v_i_write_enable_a ),
	.data_a( main_entry_sobel_v_i_in_a ),
	.byteena_a( {4{1'b1}} ),
	.q_a( main_entry_sobel_v_i_out_a ),
	.address_b( main_entry_sobel_v_i_address_b ),
	.wren_b( main_entry_sobel_v_i_write_enable_b ),
	.data_b( main_entry_sobel_v_i_in_b ),
	.byteena_b( {4{1'b1}} ),
	.q_b( main_entry_sobel_v_i_out_b )
);
defparam main_entry_sobel_v_i.width_a = 32;
defparam main_entry_sobel_v_i.widthad_a = 4;
defparam main_entry_sobel_v_i.width_be_a = 4;
defparam main_entry_sobel_v_i.numwords_a = 9;
defparam main_entry_sobel_v_i.width_b = 32;
defparam main_entry_sobel_v_i.widthad_b = 4;
defparam main_entry_sobel_v_i.width_be_b = 4;
defparam main_entry_sobel_v_i.numwords_b = 9;
defparam main_entry_sobel_v_i.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_entry_sobel_h_i_a;
assign select_main_entry_sobel_h_i_a = (tag_a == `TAG_main_entry_sobel_h_i);
reg [ram_latency:0] select_main_entry_sobel_h_i_reg_a;
wire [31:0] memory_controller_main_entry_sobel_h_i_out_a;
assign memory_controller_main_entry_sobel_h_i_out_a = {32{ select_main_entry_sobel_h_i_reg_a[ram_latency]}} & main_entry_sobel_h_i_out_a;

wire select_main_entry_sobel_v_i_a;
assign select_main_entry_sobel_v_i_a = (tag_a == `TAG_main_entry_sobel_v_i);
reg [ram_latency:0] select_main_entry_sobel_v_i_reg_a;
wire [31:0] memory_controller_main_entry_sobel_v_i_out_a;
assign memory_controller_main_entry_sobel_v_i_out_a = {32{ select_main_entry_sobel_v_i_reg_a[ram_latency]}} & main_entry_sobel_v_i_out_a;

always @(*)
begin
main_entry_sobel_h_i_address_a = memory_controller_address_a [4-1+2:2] & {4{select_main_entry_sobel_h_i_a}};
main_entry_sobel_h_i_write_enable_a = memory_controller_write_enable_a & select_main_entry_sobel_h_i_a;
main_entry_sobel_h_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];

main_entry_sobel_v_i_address_a = memory_controller_address_a [4-1+2:2] & {4{select_main_entry_sobel_v_i_a}};
main_entry_sobel_v_i_write_enable_a = memory_controller_write_enable_a & select_main_entry_sobel_v_i_a;
main_entry_sobel_v_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
select_not_struct_a [2:0] = 3'b0 | {2{select_main_entry_sobel_h_i_reg_a[ram_latency]}} | {2{select_main_entry_sobel_v_i_reg_a[ram_latency]}};
memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_entry_sobel_h_i_out_a | memory_controller_main_entry_sobel_v_i_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_entry_sobel_h_i_reg_a[j+1] <= select_main_entry_sobel_h_i_reg_a[j];
select_main_entry_sobel_v_i_reg_a[j+1] <= select_main_entry_sobel_v_i_reg_a[j];
end
always @(*)
begin
select_main_entry_sobel_h_i_reg_a[0] <= select_main_entry_sobel_h_i_a;
select_main_entry_sobel_v_i_reg_a[0] <= select_main_entry_sobel_v_i_a;
end

reg [2:0] select_not_struct_b;

wire select_main_entry_sobel_h_i_b;
assign select_main_entry_sobel_h_i_b = (tag_b == `TAG_main_entry_sobel_h_i);
reg [ram_latency:0] select_main_entry_sobel_h_i_reg_b;
wire [31:0] memory_controller_main_entry_sobel_h_i_out_b;
assign memory_controller_main_entry_sobel_h_i_out_b = {32{ select_main_entry_sobel_h_i_reg_b[ram_latency]}} & main_entry_sobel_h_i_out_b;

wire select_main_entry_sobel_v_i_b;
assign select_main_entry_sobel_v_i_b = (tag_b == `TAG_main_entry_sobel_v_i);
reg [ram_latency:0] select_main_entry_sobel_v_i_reg_b;
wire [31:0] memory_controller_main_entry_sobel_v_i_out_b;
assign memory_controller_main_entry_sobel_v_i_out_b = {32{ select_main_entry_sobel_v_i_reg_b[ram_latency]}} & main_entry_sobel_v_i_out_b;

always @(*)
begin
main_entry_sobel_h_i_address_b = memory_controller_address_b [4-1+2:2] & {4{select_main_entry_sobel_h_i_b}};
main_entry_sobel_h_i_write_enable_b = memory_controller_write_enable_b & select_main_entry_sobel_h_i_b;
main_entry_sobel_h_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

main_entry_sobel_v_i_address_b = memory_controller_address_b [4-1+2:2] & {4{select_main_entry_sobel_v_i_b}};
main_entry_sobel_v_i_write_enable_b = memory_controller_write_enable_b & select_main_entry_sobel_v_i_b;
main_entry_sobel_v_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
select_not_struct_b [2:0] = 3'b0 | {2{select_main_entry_sobel_h_i_reg_b[ram_latency]}} | {2{select_main_entry_sobel_v_i_reg_b[ram_latency]}};
memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_entry_sobel_h_i_out_b | memory_controller_main_entry_sobel_v_i_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_entry_sobel_h_i_reg_b[j+1] <= select_main_entry_sobel_h_i_reg_b[j];
select_main_entry_sobel_v_i_reg_b[j+1] <= select_main_entry_sobel_v_i_reg_b[j];
end
always @(*)
begin
select_main_entry_sobel_h_i_reg_b[0] <= select_main_entry_sobel_h_i_b;
select_main_entry_sobel_v_i_reg_b[0] <= select_main_entry_sobel_v_i_b;
end

endmodule 

`timescale 1 ns / 1 ns
module memory_controller_1
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [12:0] main_entry_sobel_h_res_i_address_a;
reg [12:0] main_entry_sobel_h_res_i_address_b;
reg main_entry_sobel_h_res_i_write_enable_a;
reg main_entry_sobel_h_res_i_write_enable_b;
reg [31:0] main_entry_sobel_h_res_i_in_a;
reg [31:0] main_entry_sobel_h_res_i_in_b;
wire [31:0] main_entry_sobel_h_res_i_out_a;
wire [31:0] main_entry_sobel_h_res_i_out_b;

//   %sobel_h_res.i = alloca [8 x [1024 x i32]], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
ram_dual_port main_entry_sobel_h_res_i (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_entry_sobel_h_res_i_address_a ),
	.wren_a( main_entry_sobel_h_res_i_write_enable_a ),
	.data_a( main_entry_sobel_h_res_i_in_a ),
	.byteena_a( {4{1'b1}} ),
	.q_a( main_entry_sobel_h_res_i_out_a ),
	.address_b( main_entry_sobel_h_res_i_address_b ),
	.wren_b( main_entry_sobel_h_res_i_write_enable_b ),
	.data_b( main_entry_sobel_h_res_i_in_b ),
	.byteena_b( {4{1'b1}} ),
	.q_b( main_entry_sobel_h_res_i_out_b )
);
defparam main_entry_sobel_h_res_i.width_a = 32;
defparam main_entry_sobel_h_res_i.widthad_a = 13;
defparam main_entry_sobel_h_res_i.width_be_a = 4;
defparam main_entry_sobel_h_res_i.numwords_a = 8192;
defparam main_entry_sobel_h_res_i.width_b = 32;
defparam main_entry_sobel_h_res_i.widthad_b = 13;
defparam main_entry_sobel_h_res_i.width_be_b = 4;
defparam main_entry_sobel_h_res_i.numwords_b = 8192;
defparam main_entry_sobel_h_res_i.latency = ram_latency;

reg [12:0] main_entry_sobel_v_res_i_address_a;
reg [12:0] main_entry_sobel_v_res_i_address_b;
reg main_entry_sobel_v_res_i_write_enable_a;
reg main_entry_sobel_v_res_i_write_enable_b;
reg [31:0] main_entry_sobel_v_res_i_in_a;
reg [31:0] main_entry_sobel_v_res_i_in_b;
wire [31:0] main_entry_sobel_v_res_i_out_a;
wire [31:0] main_entry_sobel_v_res_i_out_b;

//   %sobel_v_res.i = alloca [8 x [1024 x i32]], align 4, !dbg !92, !MSB !93, !LSB !94, !extendFrom !93
ram_dual_port main_entry_sobel_v_res_i (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_entry_sobel_v_res_i_address_a ),
	.wren_a( main_entry_sobel_v_res_i_write_enable_a ),
	.data_a( main_entry_sobel_v_res_i_in_a ),
	.byteena_a( {4{1'b1}} ),
	.q_a( main_entry_sobel_v_res_i_out_a ),
	.address_b( main_entry_sobel_v_res_i_address_b ),
	.wren_b( main_entry_sobel_v_res_i_write_enable_b ),
	.data_b( main_entry_sobel_v_res_i_in_b ),
	.byteena_b( {4{1'b1}} ),
	.q_b( main_entry_sobel_v_res_i_out_b )
);
defparam main_entry_sobel_v_res_i.width_a = 32;
defparam main_entry_sobel_v_res_i.widthad_a = 13;
defparam main_entry_sobel_v_res_i.width_be_a = 4;
defparam main_entry_sobel_v_res_i.numwords_a = 8192;
defparam main_entry_sobel_v_res_i.width_b = 32;
defparam main_entry_sobel_v_res_i.widthad_b = 13;
defparam main_entry_sobel_v_res_i.width_be_b = 4;
defparam main_entry_sobel_v_res_i.numwords_b = 8192;
defparam main_entry_sobel_v_res_i.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_entry_sobel_h_res_i_a;
assign select_main_entry_sobel_h_res_i_a = (tag_a == `TAG_main_entry_sobel_h_res_i);
reg [ram_latency:0] select_main_entry_sobel_h_res_i_reg_a;
wire [31:0] memory_controller_main_entry_sobel_h_res_i_out_a;
assign memory_controller_main_entry_sobel_h_res_i_out_a = {32{ select_main_entry_sobel_h_res_i_reg_a[ram_latency]}} & main_entry_sobel_h_res_i_out_a;

wire select_main_entry_sobel_v_res_i_a;
assign select_main_entry_sobel_v_res_i_a = (tag_a == `TAG_main_entry_sobel_v_res_i);
reg [ram_latency:0] select_main_entry_sobel_v_res_i_reg_a;
wire [31:0] memory_controller_main_entry_sobel_v_res_i_out_a;
assign memory_controller_main_entry_sobel_v_res_i_out_a = {32{ select_main_entry_sobel_v_res_i_reg_a[ram_latency]}} & main_entry_sobel_v_res_i_out_a;

always @(*)
begin
main_entry_sobel_h_res_i_address_a = memory_controller_address_a [13-1+2:2] & {13{select_main_entry_sobel_h_res_i_a}};
main_entry_sobel_h_res_i_write_enable_a = memory_controller_write_enable_a & select_main_entry_sobel_h_res_i_a;
main_entry_sobel_h_res_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];

main_entry_sobel_v_res_i_address_a = memory_controller_address_a [13-1+2:2] & {13{select_main_entry_sobel_v_res_i_a}};
main_entry_sobel_v_res_i_write_enable_a = memory_controller_write_enable_a & select_main_entry_sobel_v_res_i_a;
main_entry_sobel_v_res_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
select_not_struct_a [2:0] = 3'b0 | {2{select_main_entry_sobel_h_res_i_reg_a[ram_latency]}} | {2{select_main_entry_sobel_v_res_i_reg_a[ram_latency]}};
memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_entry_sobel_h_res_i_out_a | memory_controller_main_entry_sobel_v_res_i_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_entry_sobel_h_res_i_reg_a[j+1] <= select_main_entry_sobel_h_res_i_reg_a[j];
select_main_entry_sobel_v_res_i_reg_a[j+1] <= select_main_entry_sobel_v_res_i_reg_a[j];
end
always @(*)
begin
select_main_entry_sobel_h_res_i_reg_a[0] <= select_main_entry_sobel_h_res_i_a;
select_main_entry_sobel_v_res_i_reg_a[0] <= select_main_entry_sobel_v_res_i_a;
end

reg [2:0] select_not_struct_b;

wire select_main_entry_sobel_h_res_i_b;
assign select_main_entry_sobel_h_res_i_b = (tag_b == `TAG_main_entry_sobel_h_res_i);
reg [ram_latency:0] select_main_entry_sobel_h_res_i_reg_b;
wire [31:0] memory_controller_main_entry_sobel_h_res_i_out_b;
assign memory_controller_main_entry_sobel_h_res_i_out_b = {32{ select_main_entry_sobel_h_res_i_reg_b[ram_latency]}} & main_entry_sobel_h_res_i_out_b;

wire select_main_entry_sobel_v_res_i_b;
assign select_main_entry_sobel_v_res_i_b = (tag_b == `TAG_main_entry_sobel_v_res_i);
reg [ram_latency:0] select_main_entry_sobel_v_res_i_reg_b;
wire [31:0] memory_controller_main_entry_sobel_v_res_i_out_b;
assign memory_controller_main_entry_sobel_v_res_i_out_b = {32{ select_main_entry_sobel_v_res_i_reg_b[ram_latency]}} & main_entry_sobel_v_res_i_out_b;

always @(*)
begin
main_entry_sobel_h_res_i_address_b = memory_controller_address_b [13-1+2:2] & {13{select_main_entry_sobel_h_res_i_b}};
main_entry_sobel_h_res_i_write_enable_b = memory_controller_write_enable_b & select_main_entry_sobel_h_res_i_b;
main_entry_sobel_h_res_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

main_entry_sobel_v_res_i_address_b = memory_controller_address_b [13-1+2:2] & {13{select_main_entry_sobel_v_res_i_b}};
main_entry_sobel_v_res_i_write_enable_b = memory_controller_write_enable_b & select_main_entry_sobel_v_res_i_b;
main_entry_sobel_v_res_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
select_not_struct_b [2:0] = 3'b0 | {2{select_main_entry_sobel_h_res_i_reg_b[ram_latency]}} | {2{select_main_entry_sobel_v_res_i_reg_b[ram_latency]}};
memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_entry_sobel_h_res_i_out_b | memory_controller_main_entry_sobel_v_res_i_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_entry_sobel_h_res_i_reg_b[j+1] <= select_main_entry_sobel_h_res_i_reg_b[j];
select_main_entry_sobel_v_res_i_reg_b[j+1] <= select_main_entry_sobel_v_res_i_reg_b[j];
end
always @(*)
begin
select_main_entry_sobel_h_res_i_reg_b[0] <= select_main_entry_sobel_h_res_i_b;
select_main_entry_sobel_v_res_i_reg_b[0] <= select_main_entry_sobel_v_res_i_b;
end

endmodule 

`timescale 1 ns / 1 ns
module itConv
(
	clk,
	reset,
	start,
	finish,
	buffer,
	op,
	res,
	main_entry_vla59_i_write_enable_a,
	main_entry_vla59_i_in_a,
	main_entry_vla59_i_byteena_a,
	main_entry_vla59_i_enable_a,
	main_entry_vla59_i_address_a,
	main_entry_vla59_i_out_a,
	memory_controller_0_write_enable_a,
	memory_controller_0_in_a,
	memory_controller_0_enable_a,
	memory_controller_0_address_a,
	memory_controller_0_size_a,
	memory_controller_0_out_a,
	memory_controller_0_write_enable_b,
	memory_controller_0_in_b,
	memory_controller_0_enable_b,
	memory_controller_0_address_b,
	memory_controller_0_size_b,
	memory_controller_0_out_b,
	memory_controller_1_write_enable_a,
	memory_controller_1_in_a,
	memory_controller_1_enable_a,
	memory_controller_1_address_a,
	memory_controller_1_size_a,
	memory_controller_1_out_a,
	memory_controller_1_write_enable_b,
	memory_controller_1_in_b,
	memory_controller_1_enable_b,
	memory_controller_1_address_b,
	memory_controller_1_size_b,
	memory_controller_1_out_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_itConv_BB_for_body4_preheader_1 = 6'd1;
parameter [5:0] LEGUP_F_itConv_BB_for_body4_2 = 6'd2;
parameter [5:0] LEGUP_F_itConv_BB_for_body4_3 = 6'd3;
parameter [5:0] LEGUP_F_itConv_BB_cond_true_i_4 = 6'd4;
parameter [5:0] LEGUP_F_itConv_BB_cond_true_i_5 = 6'd5;
parameter [5:0] LEGUP_F_itConv_BB_cond_true_i_6 = 6'd6;
parameter [5:0] LEGUP_F_itConv_BB_cond_end_i_7 = 6'd7;
parameter [5:0] LEGUP_F_itConv_BB_cond_end18_i_8 = 6'd8;
parameter [5:0] LEGUP_F_itConv_BB_cond_end18_i_9 = 6'd9;
parameter [5:0] LEGUP_F_itConv_BB_cond_true24_i_10 = 6'd10;
parameter [5:0] LEGUP_F_itConv_BB_cond_true24_i_11 = 6'd11;
parameter [5:0] LEGUP_F_itConv_BB_cond_end29_i_12 = 6'd12;
parameter [5:0] LEGUP_F_itConv_BB_cond_true33_i_13 = 6'd13;
parameter [5:0] LEGUP_F_itConv_BB_cond_true33_i_14 = 6'd14;
parameter [5:0] LEGUP_F_itConv_BB_cond_end37_i_15 = 6'd15;
parameter [5:0] LEGUP_F_itConv_BB_cond_end37_i_16 = 6'd16;
parameter [5:0] LEGUP_F_itConv_BB_cond_true43_i_17 = 6'd17;
parameter [5:0] LEGUP_F_itConv_BB_cond_true43_i_18 = 6'd18;
parameter [5:0] LEGUP_F_itConv_BB_cond_end47_i_19 = 6'd19;
parameter [5:0] LEGUP_F_itConv_BB_cond_true53_i_20 = 6'd20;
parameter [5:0] LEGUP_F_itConv_BB_cond_true53_i_21 = 6'd21;
parameter [5:0] LEGUP_F_itConv_BB_cond_end58_i_22 = 6'd22;
parameter [5:0] LEGUP_F_itConv_BB_cond_end66_i_23 = 6'd23;
parameter [5:0] LEGUP_F_itConv_BB_cond_end66_i_24 = 6'd24;
parameter [5:0] LEGUP_F_itConv_BB_cond_true72_i_25 = 6'd25;
parameter [5:0] LEGUP_F_itConv_BB_cond_true72_i_26 = 6'd26;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_27 = 6'd27;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_28 = 6'd28;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_29 = 6'd29;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_30 = 6'd30;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_31 = 6'd31;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_32 = 6'd32;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_33 = 6'd33;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_34 = 6'd34;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_35 = 6'd35;
parameter [5:0] LEGUP_F_itConv_BB_makeOpMemCPU_exit_36 = 6'd36;
parameter [5:0] LEGUP_F_itConv_BB_for_end9_37 = 6'd37;

input  clk;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buffer;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] op;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] res;
output  main_entry_vla59_i_write_enable_a;
output [31:0] main_entry_vla59_i_in_a;
output  main_entry_vla59_i_byteena_a;
output reg  main_entry_vla59_i_enable_a;
output reg [12:0] main_entry_vla59_i_address_a;
input [31:0] main_entry_vla59_i_out_a;
output  memory_controller_0_write_enable_a;
output [63:0] memory_controller_0_in_a;
output reg  memory_controller_0_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_address_a;
output reg [1:0] memory_controller_0_size_a;
input [63:0] memory_controller_0_out_a;
output  memory_controller_0_write_enable_b;
output [63:0] memory_controller_0_in_b;
output reg  memory_controller_0_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_address_b;
output reg [1:0] memory_controller_0_size_b;
input [63:0] memory_controller_0_out_b;
output reg  memory_controller_1_write_enable_a;
output reg [63:0] memory_controller_1_in_a;
output reg  memory_controller_1_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_address_a;
output reg [1:0] memory_controller_1_size_a;
input [63:0] memory_controller_1_out_a;
output  memory_controller_1_write_enable_b;
output [63:0] memory_controller_1_in_b;
output  memory_controller_1_enable_b;
output [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_address_b;
output [1:0] memory_controller_1_size_b;
input [63:0] memory_controller_1_out_b;
reg [5:0] cur_state/* synthesis syn_encoding="onehot" */;
reg [5:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buffer_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] op_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] res_reg;
wire  fsm_stall;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_preheader_arrayidx2_i_6_reg;
reg [10:0] itConv_for_body4_0;
reg [10:0] itConv_for_body4_0_reg;
reg [4:0] itConv_for_body4_bit_select1;
reg [11:0] itConv_for_body4_add5_i;
reg [11:0] itConv_for_body4_add5_i_reg;
reg [4:0] itConv_for_body4_bit_select;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx45_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx45_i_reg;
reg [12:0] itConv_for_body4_sub_i;
reg [12:0] itConv_for_body4_sub_i_reg;
reg  itConv_for_body4_bit_select3;
reg  itConv_for_body4_bit_select3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx16_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx16_i_reg;
reg [11:0] itConv_for_body4_add_i;
reg [11:0] itConv_for_body4_add_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx64_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx64_i_reg;
reg [12:0] itConv_for_body4_1;
reg [12:0] itConv_for_body4_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx27_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx27_i_reg;
reg [12:0] itConv_for_body4_2;
reg [12:0] itConv_for_body4_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx35_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx35_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx40_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx40_i_reg;
reg [11:0] itConv_for_body4_3;
reg [11:0] itConv_for_body4_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx56_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx56_i_reg;
reg [11:0] itConv_for_body4_4;
reg [11:0] itConv_for_body4_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx75_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx75_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_for_body4_arrayidx6_reg;
reg  itConv_for_body4_cmp1_i;
reg  itConv_for_body4_cmp1_i_reg;
reg [31:0] itConv_for_body4_bit_concat2;
reg  itConv_for_body4_cmp3_i;
reg  itConv_for_body4_cmp3_i_reg;
reg [31:0] itConv_for_body4_bit_concat;
reg  itConv_for_body4_cmp7_i;
reg  itConv_for_body4_cmp7_i_reg;
reg  itConv_for_body4_or_cond_i;
reg  itConv_for_body4_or_cond_i_reg;
reg [12:0] itConv_cond_true_i_5;
reg [12:0] itConv_cond_true_i_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_cond_true_i_arrayidx_i;
reg [31:0] itConv_cond_true_i_6;
reg [31:0] itConv_cond_end_i_cond_i;
reg [31:0] itConv_cond_end_i_cond_i_reg;
reg [31:0] itConv_cond_end18_i_7;
reg [31:0] itConv_cond_end18_i_7_reg;
reg [31:0] itConv_cond_true24_i_8;
reg [31:0] itConv_cond_end29_i_pre;
reg [31:0] itConv_cond_end29_i_pre_reg;
reg [31:0] itConv_cond_end29_i_pre_1;
reg [31:0] itConv_cond_end29_i_pre_1_reg;
reg [31:0] itConv_cond_true33_i_9;
reg [31:0] itConv_cond_end37_i_pre_2;
reg [31:0] itConv_cond_end37_i_pre_2_reg;
reg [31:0] itConv_cond_end37_i_10;
reg [31:0] itConv_cond_end37_i_10_reg;
reg [31:0] itConv_cond_true43_i_11;
reg [31:0] itConv_cond_end47_i_pre_4;
reg [31:0] itConv_cond_end47_i_pre_4_reg;
reg  itConv_cond_end47_i_or_cond81_i;
reg [31:0] itConv_cond_true53_i_12;
reg [31:0] itConv_cond_end58_i_pre_5;
reg [31:0] itConv_cond_end58_i_pre_5_reg;
reg [31:0] itConv_cond_end66_i_13;
reg [31:0] itConv_cond_end66_i_13_reg;
reg [31:0] itConv_cond_true72_i_14;
reg [31:0] itConv_makeOpMemCPU_exit_pre_6;
reg [31:0] itConv_makeOpMemCPU_exit_pre_6_reg;
reg [31:0] itConv_makeOpMemCPU_exit_cond78_i;
reg [31:0] itConv_makeOpMemCPU_exit_cond78_i_reg;
reg [31:0] itConv_makeOpMemCPU_exit_15;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i4;
reg [31:0] itConv_makeOpMemCPU_exit_16;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i;
reg [31:0] itConv_makeOpMemCPU_exit_add_i2;
reg [31:0] itConv_makeOpMemCPU_exit_add_i2_reg;
reg [31:0] itConv_makeOpMemCPU_exit_17;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_1;
reg [31:0] itConv_makeOpMemCPU_exit_18;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_2;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_add_i2_2;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_add_i2_2_reg;
reg [31:0] itConv_makeOpMemCPU_exit_19;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_3;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_3_reg;
reg [31:0] itConv_makeOpMemCPU_exit_20;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_4;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_4_reg;
reg [31:0] itConv_makeOpMemCPU_exit_21;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_5;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2_;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__reg;
reg [31:0] itConv_makeOpMemCPU_exit_22;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_6;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var0;
reg [31:0] itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2_;
reg [31:0] itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__reg;
reg [31:0] itConv_makeOpMemCPU_exit_23;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_7;
reg [31:0] itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var1;
reg [31:0] itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__var2;
reg [31:0] itConv_makeOpMemCPU_exit_newCurOp_add_i2_7;
reg  itConv_makeOpMemCPU_exit_exitcond;
reg  itConv_makeOpMemCPU_exit_exitcond_reg;
reg [31:0] itConv_for_body4_sub_i_width_extended;
reg [12:0] itConv_for_body4_cmp1_i_op0_temp;
wire [11:0] itConv_for_body4_cmp1_i_op1_temp;
wire [26:0] itConv_for_body4_bit_concat2_bit_select_operand_0;
wire [26:0] itConv_for_body4_bit_concat_bit_select_operand_0;
reg [31:0] op0_itConv_makeOpMemCPU_exit_15_reg;
reg [31:0] op1_itConv_cond_end_i_cond_i_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i4_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i4_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_16_reg;
reg [31:0] op1_itConv_cond_end29_i_pre_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_17_reg;
reg [31:0] op1_itConv_cond_end29_i_pre_1_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_1_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_1_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_18_reg;
reg [31:0] op1_itConv_cond_end37_i_pre_2_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_2_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_2_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_19_reg;
reg [31:0] op1_itConv_cond_end37_i_10_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_3_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_3_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_20_reg;
reg [31:0] op1_itConv_cond_end47_i_pre_4_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_4_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_4_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_21_reg;
reg [31:0] op1_itConv_cond_end58_i_pre_5_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_5_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_5_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_22_reg;
reg [31:0] op1_itConv_makeOpMemCPU_exit_pre_6_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_6_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_6_stage0_reg;
reg [31:0] op0_itConv_makeOpMemCPU_exit_23_reg;
reg [31:0] op1_itConv_makeOpMemCPU_exit_cond78_i_reg_reg;
reg  legup_mult_itConv_makeOpMemCPU_exit_mul_i_7_en;
reg [31:0] itConv_makeOpMemCPU_exit_mul_i_7_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (!fsm_stall)
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  /* synthesis parallel_case */
LEGUP_0:
	if ((fsm_stall == 1'd0) && (start == 1'd1))
		next_state = LEGUP_F_itConv_BB_for_body4_preheader_1;
LEGUP_F_itConv_BB_cond_end18_i_8:
		next_state = LEGUP_F_itConv_BB_cond_end18_i_9;
LEGUP_F_itConv_BB_cond_end18_i_9:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end29_i_12;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true24_i_10;
LEGUP_F_itConv_BB_cond_end29_i_12:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp3_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end37_i_15;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp3_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true33_i_13;
LEGUP_F_itConv_BB_cond_end37_i_15:
		next_state = LEGUP_F_itConv_BB_cond_end37_i_16;
LEGUP_F_itConv_BB_cond_end37_i_16:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end47_i_19;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true43_i_17;
LEGUP_F_itConv_BB_cond_end47_i_19:
	if ((fsm_stall == 1'd0) && (itConv_cond_end47_i_or_cond81_i == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end58_i_22;
	else if ((fsm_stall == 1'd0) && (itConv_cond_end47_i_or_cond81_i == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true53_i_20;
LEGUP_F_itConv_BB_cond_end58_i_22:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp1_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_27;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp1_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_end66_i_23;
LEGUP_F_itConv_BB_cond_end66_i_23:
		next_state = LEGUP_F_itConv_BB_cond_end66_i_24;
LEGUP_F_itConv_BB_cond_end66_i_24:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_27;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_cmp7_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true72_i_25;
LEGUP_F_itConv_BB_cond_end_i_7:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_bit_select3_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end29_i_12;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_bit_select3_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_end18_i_8;
LEGUP_F_itConv_BB_cond_true24_i_10:
		next_state = LEGUP_F_itConv_BB_cond_true24_i_11;
LEGUP_F_itConv_BB_cond_true24_i_11:
		next_state = LEGUP_F_itConv_BB_cond_end29_i_12;
LEGUP_F_itConv_BB_cond_true33_i_13:
		next_state = LEGUP_F_itConv_BB_cond_true33_i_14;
LEGUP_F_itConv_BB_cond_true33_i_14:
		next_state = LEGUP_F_itConv_BB_cond_end37_i_15;
LEGUP_F_itConv_BB_cond_true43_i_17:
		next_state = LEGUP_F_itConv_BB_cond_true43_i_18;
LEGUP_F_itConv_BB_cond_true43_i_18:
		next_state = LEGUP_F_itConv_BB_cond_end47_i_19;
LEGUP_F_itConv_BB_cond_true53_i_20:
		next_state = LEGUP_F_itConv_BB_cond_true53_i_21;
LEGUP_F_itConv_BB_cond_true53_i_21:
		next_state = LEGUP_F_itConv_BB_cond_end58_i_22;
LEGUP_F_itConv_BB_cond_true72_i_25:
		next_state = LEGUP_F_itConv_BB_cond_true72_i_26;
LEGUP_F_itConv_BB_cond_true72_i_26:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_27;
LEGUP_F_itConv_BB_cond_true_i_4:
		next_state = LEGUP_F_itConv_BB_cond_true_i_5;
LEGUP_F_itConv_BB_cond_true_i_5:
		next_state = LEGUP_F_itConv_BB_cond_true_i_6;
LEGUP_F_itConv_BB_cond_true_i_6:
		next_state = LEGUP_F_itConv_BB_cond_end_i_7;
LEGUP_F_itConv_BB_for_body4_2:
		next_state = LEGUP_F_itConv_BB_for_body4_3;
LEGUP_F_itConv_BB_for_body4_3:
	if ((fsm_stall == 1'd0) && (itConv_for_body4_or_cond_i_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_cond_end_i_7;
	else if ((fsm_stall == 1'd0) && (itConv_for_body4_or_cond_i_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_cond_true_i_4;
LEGUP_F_itConv_BB_for_body4_preheader_1:
		next_state = LEGUP_F_itConv_BB_for_body4_2;
LEGUP_F_itConv_BB_for_end9_37:
		next_state = LEGUP_0;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_27:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_28;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_28:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_29;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_29:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_30;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_30:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_31;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_31:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_32;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_32:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_33;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_33:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_34;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_34:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_35;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_35:
		next_state = LEGUP_F_itConv_BB_makeOpMemCPU_exit_36;
LEGUP_F_itConv_BB_makeOpMemCPU_exit_36:
	if ((fsm_stall == 1'd0) && (itConv_makeOpMemCPU_exit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_itConv_BB_for_end9_37;
	else if ((fsm_stall == 1'd0) && (itConv_makeOpMemCPU_exit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_itConv_BB_for_body4_2;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if (start) begin
		buffer_reg <= buffer;
	end
end
always @(posedge clk) begin
	if (start) begin
		op_reg <= op;
	end
end
always @(posedge clk) begin
	if (start) begin
		res_reg <= res;
	end
end
assign fsm_stall = 1'd0;
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i3 = (op_reg + (4 * 32'd8));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i3_reg <= itConv_for_body4_preheader_arrayidx2_i3;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i = (op_reg + (4 * 32'd7));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_reg <= itConv_for_body4_preheader_arrayidx2_i;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_1 = (op_reg + (4 * 32'd6));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_1_reg <= itConv_for_body4_preheader_arrayidx2_i_1;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_2 = (op_reg + (4 * 32'd5));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_2_reg <= itConv_for_body4_preheader_arrayidx2_i_2;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_3 = (op_reg + (4 * 32'd4));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_3_reg <= itConv_for_body4_preheader_arrayidx2_i_3;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_4 = (op_reg + (4 * 32'd3));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_4_reg <= itConv_for_body4_preheader_arrayidx2_i_4;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_5 = (op_reg + (4 * 32'd2));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_5_reg <= itConv_for_body4_preheader_arrayidx2_i_5;
	end
end
always @(*) begin
		itConv_for_body4_preheader_arrayidx2_i_6 = (op_reg + (4 * 32'd1));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1)) begin
		itConv_for_body4_preheader_arrayidx2_i_6_reg <= itConv_for_body4_preheader_arrayidx2_i_6;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1) & (fsm_stall == 1'd0))) begin
		itConv_for_body4_0 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_36) & (fsm_stall == 1'd0)) & (itConv_makeOpMemCPU_exit_exitcond_reg == 1'd0))) */ begin
		itConv_for_body4_0 = itConv_for_body4_add5_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_itConv_BB_for_body4_preheader_1) & (fsm_stall == 1'd0))) begin
		itConv_for_body4_0_reg <= itConv_for_body4_0;
	end
	if ((((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_36) & (fsm_stall == 1'd0)) & (itConv_makeOpMemCPU_exit_exitcond_reg == 1'd0))) begin
		itConv_for_body4_0_reg <= itConv_for_body4_0;
	end
end
always @(*) begin
		itConv_for_body4_bit_select1 = itConv_for_body4_0_reg[4:0];
end
always @(*) begin
		itConv_for_body4_add5_i = ({1'd0,itConv_for_body4_0_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_add5_i_reg <= itConv_for_body4_add5_i;
	end
end
always @(*) begin
		itConv_for_body4_bit_select = itConv_for_body4_add5_i[4:0];
end
always @(*) begin
		itConv_for_body4_arrayidx45_i = (buffer_reg + (4 * {20'd0,itConv_for_body4_add5_i_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx45_i_reg <= itConv_for_body4_arrayidx45_i;
	end
end
always @(*) begin
		itConv_for_body4_sub_i = ({2'd0,itConv_for_body4_0_reg} + $signed(-32'd32));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_sub_i_reg <= itConv_for_body4_sub_i;
	end
end
always @(*) begin
		itConv_for_body4_bit_select3 = itConv_for_body4_sub_i_width_extended[31];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_bit_select3_reg <= itConv_for_body4_bit_select3;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx16_i = (buffer_reg + (4 * $signed({{19{itConv_for_body4_sub_i_reg[12]}},itConv_for_body4_sub_i_reg})));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx16_i_reg <= itConv_for_body4_arrayidx16_i;
	end
end
always @(*) begin
		itConv_for_body4_add_i = ({1'd0,itConv_for_body4_0_reg} + 32'd32);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_add_i_reg <= itConv_for_body4_add_i;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx64_i = (buffer_reg + (4 * {20'd0,itConv_for_body4_add_i_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx64_i_reg <= itConv_for_body4_arrayidx64_i;
	end
end
always @(*) begin
		itConv_for_body4_1 = ({2'd0,itConv_for_body4_0_reg} + $signed(-32'd31));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_1_reg <= itConv_for_body4_1;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx27_i = (buffer_reg + (4 * $signed({{19{itConv_for_body4_1_reg[12]}},itConv_for_body4_1_reg})));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx27_i_reg <= itConv_for_body4_arrayidx27_i;
	end
end
always @(*) begin
		itConv_for_body4_2 = ({2'd0,itConv_for_body4_0_reg} + $signed(-32'd1));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_2_reg <= itConv_for_body4_2;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx35_i = (buffer_reg + (4 * $signed({{19{itConv_for_body4_2_reg[12]}},itConv_for_body4_2_reg})));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx35_i_reg <= itConv_for_body4_arrayidx35_i;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx40_i = (buffer_reg + (4 * {21'd0,itConv_for_body4_0_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_arrayidx40_i_reg <= itConv_for_body4_arrayidx40_i;
	end
end
always @(*) begin
		itConv_for_body4_3 = ({1'd0,itConv_for_body4_0_reg} + 32'd31);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_3_reg <= itConv_for_body4_3;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx56_i = (buffer_reg + (4 * {20'd0,itConv_for_body4_3_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx56_i_reg <= itConv_for_body4_arrayidx56_i;
	end
end
always @(*) begin
		itConv_for_body4_4 = ({1'd0,itConv_for_body4_0_reg} + 32'd33);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_4_reg <= itConv_for_body4_4;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx75_i = (buffer_reg + (4 * {20'd0,itConv_for_body4_4_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_3)) begin
		itConv_for_body4_arrayidx75_i_reg <= itConv_for_body4_arrayidx75_i;
	end
end
always @(*) begin
		itConv_for_body4_arrayidx6 = (res_reg + (4 * {21'd0,itConv_for_body4_0_reg}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_arrayidx6_reg <= itConv_for_body4_arrayidx6;
	end
end
always @(*) begin
		itConv_for_body4_cmp1_i = ($signed({19'd0,itConv_for_body4_cmp1_i_op0_temp}) > $signed({20'd0,itConv_for_body4_cmp1_i_op1_temp}));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_cmp1_i_reg <= itConv_for_body4_cmp1_i;
	end
end
always @(*) begin
		itConv_for_body4_bit_concat2 = {itConv_for_body4_bit_concat2_bit_select_operand_0[26:0], itConv_for_body4_bit_select1[4:0]};
end
always @(*) begin
		itConv_for_body4_cmp3_i = (itConv_for_body4_bit_concat2 == 32'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_cmp3_i_reg <= itConv_for_body4_cmp3_i;
	end
end
always @(*) begin
		itConv_for_body4_bit_concat = {itConv_for_body4_bit_concat_bit_select_operand_0[26:0], itConv_for_body4_bit_select[4:0]};
end
always @(*) begin
		itConv_for_body4_cmp7_i = (itConv_for_body4_bit_concat == 32'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_cmp7_i_reg <= itConv_for_body4_cmp7_i;
	end
end
always @(*) begin
		itConv_for_body4_or_cond_i = (itConv_for_body4_bit_select3 | itConv_for_body4_cmp3_i);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_for_body4_2)) begin
		itConv_for_body4_or_cond_i_reg <= itConv_for_body4_or_cond_i;
	end
end
always @(*) begin
		itConv_cond_true_i_5 = ({2'd0,itConv_for_body4_0_reg} + $signed(-32'd33));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_cond_true_i_4)) begin
		itConv_cond_true_i_5_reg <= itConv_cond_true_i_5;
	end
end
always @(*) begin
		itConv_cond_true_i_arrayidx_i = (buffer_reg + (4 * $signed({{19{itConv_cond_true_i_5_reg[12]}},itConv_cond_true_i_5_reg})));
end
always @(*) begin
		itConv_cond_true_i_6 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_for_body4_3) & (fsm_stall == 1'd0)) & (itConv_for_body4_or_cond_i_reg == 1'd1))) begin
		itConv_cond_end_i_cond_i = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true_i_6) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end_i_cond_i = itConv_cond_true_i_6;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_for_body4_3) & (fsm_stall == 1'd0)) & (itConv_for_body4_or_cond_i_reg == 1'd1))) begin
		itConv_cond_end_i_cond_i_reg <= itConv_cond_end_i_cond_i;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true_i_6) & (fsm_stall == 1'd0))) begin
		itConv_cond_end_i_cond_i_reg <= itConv_cond_end_i_cond_i;
	end
end
always @(*) begin
		itConv_cond_end18_i_7 = main_entry_vla59_i_out_a;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_cond_end18_i_9)) begin
		itConv_cond_end18_i_7_reg <= itConv_cond_end18_i_7;
	end
end
always @(*) begin
		itConv_cond_true24_i_8 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end_i_7) & (fsm_stall == 1'd0)) & (itConv_for_body4_bit_select3_reg == 1'd1))) begin
		itConv_cond_end29_i_pre = 32'd0;
	end
	else if ((((cur_state == LEGUP_F_itConv_BB_cond_end18_i_9) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end29_i_pre = itConv_cond_end18_i_7;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true24_i_11) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end29_i_pre = itConv_cond_end18_i_7_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end_i_7) & (fsm_stall == 1'd0)) & (itConv_for_body4_bit_select3_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_reg <= itConv_cond_end29_i_pre;
	end
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end18_i_9) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_reg <= itConv_cond_end29_i_pre;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true24_i_11) & (fsm_stall == 1'd0))) begin
		itConv_cond_end29_i_pre_reg <= itConv_cond_end29_i_pre;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end_i_7) & (fsm_stall == 1'd0)) & (itConv_for_body4_bit_select3_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_1 = 32'd0;
	end
	else if ((((cur_state == LEGUP_F_itConv_BB_cond_end18_i_9) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_1 = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true24_i_11) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end29_i_pre_1 = itConv_cond_true24_i_8;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end_i_7) & (fsm_stall == 1'd0)) & (itConv_for_body4_bit_select3_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_1_reg <= itConv_cond_end29_i_pre_1;
	end
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end18_i_9) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end29_i_pre_1_reg <= itConv_cond_end29_i_pre_1;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true24_i_11) & (fsm_stall == 1'd0))) begin
		itConv_cond_end29_i_pre_1_reg <= itConv_cond_end29_i_pre_1;
	end
end
always @(*) begin
		itConv_cond_true33_i_9 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end29_i_12) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp3_i_reg == 1'd1))) begin
		itConv_cond_end37_i_pre_2 = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true33_i_14) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end37_i_pre_2 = itConv_cond_true33_i_9;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end29_i_12) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp3_i_reg == 1'd1))) begin
		itConv_cond_end37_i_pre_2_reg <= itConv_cond_end37_i_pre_2;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true33_i_14) & (fsm_stall == 1'd0))) begin
		itConv_cond_end37_i_pre_2_reg <= itConv_cond_end37_i_pre_2;
	end
end
always @(*) begin
		itConv_cond_end37_i_10 = main_entry_vla59_i_out_a;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_cond_end37_i_16)) begin
		itConv_cond_end37_i_10_reg <= itConv_cond_end37_i_10;
	end
end
always @(*) begin
		itConv_cond_true43_i_11 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end37_i_16) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end47_i_pre_4 = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true43_i_18) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end47_i_pre_4 = itConv_cond_true43_i_11;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end37_i_16) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_cond_end47_i_pre_4_reg <= itConv_cond_end47_i_pre_4;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true43_i_18) & (fsm_stall == 1'd0))) begin
		itConv_cond_end47_i_pre_4_reg <= itConv_cond_end47_i_pre_4;
	end
end
always @(*) begin
		itConv_cond_end47_i_or_cond81_i = (itConv_for_body4_cmp1_i_reg | itConv_for_body4_cmp3_i_reg);
end
always @(*) begin
		itConv_cond_true53_i_12 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end47_i_19) & (fsm_stall == 1'd0)) & (itConv_cond_end47_i_or_cond81_i == 1'd1))) begin
		itConv_cond_end58_i_pre_5 = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true53_i_21) & (fsm_stall == 1'd0))) */ begin
		itConv_cond_end58_i_pre_5 = itConv_cond_true53_i_12;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end47_i_19) & (fsm_stall == 1'd0)) & (itConv_cond_end47_i_or_cond81_i == 1'd1))) begin
		itConv_cond_end58_i_pre_5_reg <= itConv_cond_end58_i_pre_5;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true53_i_21) & (fsm_stall == 1'd0))) begin
		itConv_cond_end58_i_pre_5_reg <= itConv_cond_end58_i_pre_5;
	end
end
always @(*) begin
		itConv_cond_end66_i_13 = main_entry_vla59_i_out_a;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_cond_end66_i_24)) begin
		itConv_cond_end66_i_13_reg <= itConv_cond_end66_i_13;
	end
end
always @(*) begin
		itConv_cond_true72_i_14 = main_entry_vla59_i_out_a;
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end58_i_22) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp1_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_pre_6 = 32'd0;
	end
	else if ((((cur_state == LEGUP_F_itConv_BB_cond_end66_i_24) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_pre_6 = itConv_cond_end66_i_13;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true72_i_26) & (fsm_stall == 1'd0))) */ begin
		itConv_makeOpMemCPU_exit_pre_6 = itConv_cond_end66_i_13_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end58_i_22) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp1_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_pre_6_reg <= itConv_makeOpMemCPU_exit_pre_6;
	end
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end66_i_24) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_pre_6_reg <= itConv_makeOpMemCPU_exit_pre_6;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true72_i_26) & (fsm_stall == 1'd0))) begin
		itConv_makeOpMemCPU_exit_pre_6_reg <= itConv_makeOpMemCPU_exit_pre_6;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end58_i_22) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp1_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_cond78_i = 32'd0;
	end
	else if ((((cur_state == LEGUP_F_itConv_BB_cond_end66_i_24) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_cond78_i = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_itConv_BB_cond_true72_i_26) & (fsm_stall == 1'd0))) */ begin
		itConv_makeOpMemCPU_exit_cond78_i = itConv_cond_true72_i_14;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end58_i_22) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp1_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_cond78_i_reg <= itConv_makeOpMemCPU_exit_cond78_i;
	end
	if ((((cur_state == LEGUP_F_itConv_BB_cond_end66_i_24) & (fsm_stall == 1'd0)) & (itConv_for_body4_cmp7_i_reg == 1'd1))) begin
		itConv_makeOpMemCPU_exit_cond78_i_reg <= itConv_makeOpMemCPU_exit_cond78_i;
	end
	if (((cur_state == LEGUP_F_itConv_BB_cond_true72_i_26) & (fsm_stall == 1'd0))) begin
		itConv_makeOpMemCPU_exit_cond78_i_reg <= itConv_makeOpMemCPU_exit_cond78_i;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_15 = memory_controller_0_out_a[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i4 = itConv_makeOpMemCPU_exit_mul_i4_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_16 = memory_controller_0_out_b[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i = itConv_makeOpMemCPU_exit_mul_i_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_add_i2 = (itConv_makeOpMemCPU_exit_mul_i + itConv_makeOpMemCPU_exit_mul_i4);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		itConv_makeOpMemCPU_exit_add_i2_reg <= itConv_makeOpMemCPU_exit_add_i2;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_17 = memory_controller_0_out_a[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_1 = itConv_makeOpMemCPU_exit_mul_i_1_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_18 = memory_controller_0_out_b[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_2 = itConv_makeOpMemCPU_exit_mul_i_2_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newEarly_add_i2_2 = (itConv_makeOpMemCPU_exit_mul_i_1 + itConv_makeOpMemCPU_exit_mul_i_2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_32)) begin
		itConv_makeOpMemCPU_exit_newEarly_add_i2_2_reg <= itConv_makeOpMemCPU_exit_newEarly_add_i2_2;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_19 = memory_controller_0_out_a[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_3 = itConv_makeOpMemCPU_exit_mul_i_3_stage0_reg;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_33)) begin
		itConv_makeOpMemCPU_exit_mul_i_3_reg <= itConv_makeOpMemCPU_exit_mul_i_3;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_20 = memory_controller_0_out_b[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_4 = itConv_makeOpMemCPU_exit_mul_i_4_stage0_reg;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_33)) begin
		itConv_makeOpMemCPU_exit_mul_i_4_reg <= itConv_makeOpMemCPU_exit_mul_i_4;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_21 = memory_controller_0_out_a[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_5 = itConv_makeOpMemCPU_exit_mul_i_5_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2_ = (itConv_makeOpMemCPU_exit_mul_i_3_reg + itConv_makeOpMemCPU_exit_mul_i_5);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_34)) begin
		itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__reg <= itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2_;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_22 = memory_controller_0_out_b[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_6 = itConv_makeOpMemCPU_exit_mul_i_6_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var0 = (itConv_makeOpMemCPU_exit_mul_i_4_reg + itConv_makeOpMemCPU_exit_mul_i_6);
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2_ = (itConv_makeOpMemCPU_exit_add_i2_reg + itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_34)) begin
		itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__reg <= itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2_;
	end
end
always @(*) begin
		itConv_makeOpMemCPU_exit_23 = memory_controller_0_out_a[31:0];
end
always @(*) begin
	itConv_makeOpMemCPU_exit_mul_i_7 = itConv_makeOpMemCPU_exit_mul_i_7_stage0_reg;
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var1 = (itConv_makeOpMemCPU_exit_newEarly_add_i2_2_reg + itConv_makeOpMemCPU_exit_mul_i_7);
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__var2 = (itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__var1 + itConv_makeOpMemCPU_exit_newEarly_newEarly_add_i2__reg);
end
always @(*) begin
		itConv_makeOpMemCPU_exit_newCurOp_add_i2_7 = (itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__var2 + itConv_makeOpMemCPU_exit_newCurOp_newEarly_add_i2__reg);
end
always @(*) begin
		itConv_makeOpMemCPU_exit_exitcond = (itConv_for_body4_add5_i_reg == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		itConv_makeOpMemCPU_exit_exitcond_reg <= itConv_makeOpMemCPU_exit_exitcond;
	end
end
always @(*) begin
	itConv_for_body4_sub_i_width_extended = {{19{itConv_for_body4_sub_i[12]}},itConv_for_body4_sub_i};
end
always @(*) begin
	itConv_for_body4_cmp1_i_op0_temp = {1'd0,itConv_for_body4_add_i};
end
assign itConv_for_body4_cmp1_i_op1_temp = 32'd1023;
assign itConv_for_body4_bit_concat2_bit_select_operand_0 = 27'd0;
assign itConv_for_body4_bit_concat_bit_select_operand_0 = 27'd0;
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		op0_itConv_makeOpMemCPU_exit_15_reg <= itConv_makeOpMemCPU_exit_15;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		op1_itConv_cond_end_i_cond_i_reg_reg <= itConv_cond_end_i_cond_i_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i4_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i4_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i4_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_15_reg * op1_itConv_cond_end_i_cond_i_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		op0_itConv_makeOpMemCPU_exit_16_reg <= itConv_makeOpMemCPU_exit_16;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		op1_itConv_cond_end29_i_pre_reg_reg <= itConv_cond_end29_i_pre_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_16_reg * op1_itConv_cond_end29_i_pre_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		op0_itConv_makeOpMemCPU_exit_17_reg <= itConv_makeOpMemCPU_exit_17;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		op1_itConv_cond_end29_i_pre_1_reg_reg <= itConv_cond_end29_i_pre_1_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_1_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_1_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_1_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_17_reg * op1_itConv_cond_end29_i_pre_1_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		op0_itConv_makeOpMemCPU_exit_18_reg <= itConv_makeOpMemCPU_exit_18;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		op1_itConv_cond_end37_i_pre_2_reg_reg <= itConv_cond_end37_i_pre_2_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_2_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_2_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_2_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_18_reg * op1_itConv_cond_end37_i_pre_2_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		op0_itConv_makeOpMemCPU_exit_19_reg <= itConv_makeOpMemCPU_exit_19;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		op1_itConv_cond_end37_i_10_reg_reg <= itConv_cond_end37_i_10_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_3_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_3_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_3_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_19_reg * op1_itConv_cond_end37_i_10_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		op0_itConv_makeOpMemCPU_exit_20_reg <= itConv_makeOpMemCPU_exit_20;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		op1_itConv_cond_end47_i_pre_4_reg_reg <= itConv_cond_end47_i_pre_4_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_4_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_4_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_4_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_20_reg * op1_itConv_cond_end47_i_pre_4_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_32)) begin
		op0_itConv_makeOpMemCPU_exit_21_reg <= itConv_makeOpMemCPU_exit_21;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_32)) begin
		op1_itConv_cond_end58_i_pre_5_reg_reg <= itConv_cond_end58_i_pre_5_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_5_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_5_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_5_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_21_reg * op1_itConv_cond_end58_i_pre_5_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_32)) begin
		op0_itConv_makeOpMemCPU_exit_22_reg <= itConv_makeOpMemCPU_exit_22;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_32)) begin
		op1_itConv_makeOpMemCPU_exit_pre_6_reg_reg <= itConv_makeOpMemCPU_exit_pre_6_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_6_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_6_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_6_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_22_reg * op1_itConv_makeOpMemCPU_exit_pre_6_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_33)) begin
		op0_itConv_makeOpMemCPU_exit_23_reg <= itConv_makeOpMemCPU_exit_23;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_33)) begin
		op1_itConv_makeOpMemCPU_exit_cond78_i_reg_reg <= itConv_makeOpMemCPU_exit_cond78_i_reg;
	end
end
always @(*) begin
	legup_mult_itConv_makeOpMemCPU_exit_mul_i_7_en = ~(fsm_stall);
end
always @(posedge clk) begin
	if ((legup_mult_itConv_makeOpMemCPU_exit_mul_i_7_en == 1'd1)) begin
		itConv_makeOpMemCPU_exit_mul_i_7_stage0_reg <= (op0_itConv_makeOpMemCPU_exit_23_reg * op1_itConv_makeOpMemCPU_exit_cond78_i_reg_reg);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
	end
	if ((cur_state == LEGUP_F_itConv_BB_for_end9_37)) begin
		finish <= (fsm_stall == 1'd0);
	end
end
assign main_entry_vla59_i_write_enable_a = 1'd0;
assign main_entry_vla59_i_in_a = 0;
assign main_entry_vla59_i_byteena_a = 1'd1;
always @(*) begin
	main_entry_vla59_i_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_itConv_BB_cond_true_i_5)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end18_i_8)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true24_i_10)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true33_i_13)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end37_i_15)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true43_i_17)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true53_i_20)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end66_i_23)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true72_i_25)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
end
always @(*) begin
	main_entry_vla59_i_address_a = 13'd0;
	if ((cur_state == LEGUP_F_itConv_BB_cond_true_i_5)) begin
		main_entry_vla59_i_address_a = (itConv_cond_true_i_arrayidx_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end18_i_8)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx16_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true24_i_10)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx27_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true33_i_13)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx35_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end37_i_15)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx40_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true43_i_17)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx45_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true53_i_20)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx56_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_end66_i_23)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx64_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_itConv_BB_cond_true72_i_25)) begin
		main_entry_vla59_i_address_a = (itConv_for_body4_arrayidx75_i_reg >>> 3'd2);
	end
end
assign memory_controller_0_write_enable_a = 1'd0;
assign memory_controller_0_in_a = 64'd0;
always @(*) begin
	memory_controller_0_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		memory_controller_0_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_address_a = 0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_address_a = itConv_for_body4_preheader_arrayidx2_i3_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_address_a = itConv_for_body4_preheader_arrayidx2_i_1_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_address_a = itConv_for_body4_preheader_arrayidx2_i_3_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_address_a = itConv_for_body4_preheader_arrayidx2_i_5_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		memory_controller_0_address_a = op_reg;
	end
end
always @(*) begin
	memory_controller_0_size_a = 2'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_31)) begin
		memory_controller_0_size_a = 2'd2;
	end
end
assign memory_controller_0_write_enable_b = 1'd0;
assign memory_controller_0_in_b = 64'd0;
always @(*) begin
	memory_controller_0_enable_b = 1'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_address_b = 0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_address_b = itConv_for_body4_preheader_arrayidx2_i_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_address_b = itConv_for_body4_preheader_arrayidx2_i_2_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_address_b = itConv_for_body4_preheader_arrayidx2_i_4_reg;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_address_b = itConv_for_body4_preheader_arrayidx2_i_6_reg;
	end
end
always @(*) begin
	memory_controller_0_size_b = 2'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_27)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_28)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_29)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_30)) begin
		memory_controller_0_size_b = 2'd2;
	end
end
always @(*) begin
	memory_controller_1_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_35)) begin
		memory_controller_1_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_1_in_a = 64'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_35)) begin
		memory_controller_1_in_a = {32'd0,itConv_makeOpMemCPU_exit_newCurOp_add_i2_7};
	end
end
always @(*) begin
	memory_controller_1_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_35)) begin
		memory_controller_1_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_1_address_a = 0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_35)) begin
		memory_controller_1_address_a = itConv_for_body4_arrayidx6_reg;
	end
end
always @(*) begin
	memory_controller_1_size_a = 2'd0;
	if ((cur_state == LEGUP_F_itConv_BB_makeOpMemCPU_exit_35)) begin
		memory_controller_1_size_a = 2'd2;
	end
end
assign memory_controller_1_write_enable_b = 1'd0;
assign memory_controller_1_in_b = 64'd0;
assign memory_controller_1_enable_b = 1'd0;
assign memory_controller_1_address_b = 0;
assign memory_controller_1_size_b = 2'd0;

endmodule
`timescale 1 ns / 1 ns
module main
(
	clk,
	reset,
	start,
	finish,
	return_val,
	itConv_start,
	itConv_finish,
	itConv_buffer,
	itConv_op,
	itConv_res,
	memory_controller_0_write_enable_a,
	memory_controller_0_in_a,
	memory_controller_0_enable_a,
	memory_controller_0_address_a,
	memory_controller_0_size_a,
	memory_controller_0_out_a,
	memory_controller_0_write_enable_b,
	memory_controller_0_in_b,
	memory_controller_0_enable_b,
	memory_controller_0_address_b,
	memory_controller_0_size_b,
	memory_controller_0_out_b,
	main_entry_vla59_i_write_enable_a,
	main_entry_vla59_i_in_a,
	main_entry_vla59_i_byteena_a,
	main_entry_vla59_i_enable_a,
	main_entry_vla59_i_address_a,
	main_entry_vla59_i_out_a,
	memory_controller_1_write_enable_a,
	memory_controller_1_in_a,
	memory_controller_1_enable_a,
	memory_controller_1_address_a,
	memory_controller_1_size_a,
	memory_controller_1_out_a,
	memory_controller_1_write_enable_b,
	memory_controller_1_in_b,
	memory_controller_1_enable_b,
	memory_controller_1_address_b,
	memory_controller_1_size_b,
	memory_controller_1_out_b
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB_entry_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB_while_body_i_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB_while_body_i_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB_while_body_i44_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_while_body_i44_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit45_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit45_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit45_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB_legup_memset_4_exit45_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB_for_body6_i_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_for_body6_i_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB_for_body6_1_i_preheader_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB_for_cond15_preheader_i_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB_for_body18_i_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB_for_body18_i_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB_for_body18_i_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_lor_lhs_false_i_i24_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_if_then20_i_i30_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i36_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_pow_exit38_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_lor_lhs_false_i_i11_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_if_then20_i_i_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_if_then61_i_i_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_pow_exit_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_pow_exit_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_pow_exit_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_pow_exit_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_pow_exit_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_pow_exit_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_pow_exit_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_pow_exit_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_if_then_i_i_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_if_end_i_i_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_if_then3_i_i_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_if_else_i_i_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_if_then8_i_i_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_if_end12_i_i_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_while_cond_preheader_i_i_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_while_body_i_i_preheader_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_for_cond_preheader_i_i_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i4_preheader_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_while_body_i_i_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_for_body_i_i4_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_for_end_i_i_loopexit_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_for_end_i_i_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_if_end28_i_i_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_if_then33_i_i_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_if_end39_i_i_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_while_body48_i_i_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_if_then51_i_i_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_if_end55_i_i_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_while_body65_i_i_preheader_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_while_body65_i_i_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_lor_lhs_false_i_i_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_if_then70_i_i_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_if_end87_i_i_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_while_end94_i_i_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_if_then99_i_i_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_if_then101_i_i_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_if_else111_i_i_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_if_end117_i_i_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_sqrt_exit_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_contour_exit_i_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_for_inc34_i_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_for_body6_1_i_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_for_body6_1_i_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_for_body6_1_i_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_for_body6_2_i_preheader_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_for_body6_2_i_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_for_body6_2_i_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_for_body6_2_i_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_for_body6_3_i_preheader_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB_for_body6_3_i_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB_for_body6_3_i_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB_for_body6_3_i_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB_for_body6_4_i_preheader_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB_for_body6_4_i_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB_for_body6_4_i_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB_for_body6_4_i_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB_for_body6_5_i_preheader_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB_for_body6_5_i_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB_for_body6_5_i_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_for_body6_5_i_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB_for_body6_6_i_preheader_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB_for_body6_6_i_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB_for_body6_6_i_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB_for_body6_6_i_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB_for_body6_7_i_preheader_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_for_body6_7_i_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB_for_body6_7_i_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB_for_body6_7_i_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB_for_cond15_preheader_i_preheader_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB_sobelfilter_exit_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB_sobelfilter_exit_186 = 8'd186;
parameter [7:0] LEGUP_function_call_19 = 8'd19;
parameter [7:0] LEGUP_function_call_21 = 8'd21;

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  itConv_start;
input  itConv_finish;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_buffer;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_op;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] itConv_res;
output reg  memory_controller_0_write_enable_a;
output reg [63:0] memory_controller_0_in_a;
output reg  memory_controller_0_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_address_a;
output reg [1:0] memory_controller_0_size_a;
input [63:0] memory_controller_0_out_a;
output reg  memory_controller_0_write_enable_b;
output reg [63:0] memory_controller_0_in_b;
output reg  memory_controller_0_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_0_address_b;
output reg [1:0] memory_controller_0_size_b;
input [63:0] memory_controller_0_out_b;
output reg  main_entry_vla59_i_write_enable_a;
output reg [31:0] main_entry_vla59_i_in_a;
output  main_entry_vla59_i_byteena_a;
output reg  main_entry_vla59_i_enable_a;
output reg [12:0] main_entry_vla59_i_address_a;
input [31:0] main_entry_vla59_i_out_a;
output  memory_controller_1_write_enable_a;
output [63:0] memory_controller_1_in_a;
output reg  memory_controller_1_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_address_a;
output reg [1:0] memory_controller_1_size_a;
input [63:0] memory_controller_1_out_a;
output  memory_controller_1_write_enable_b;
output [63:0] memory_controller_1_in_b;
output  memory_controller_1_enable_b;
output [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_1_address_b;
output [1:0] memory_controller_1_size_b;
input [63:0] memory_controller_1_out_b;
reg [7:0] cur_state/* synthesis syn_encoding="onehot" */;
reg [7:0] next_state;
wire  fsm_stall;
reg [3:0] main_while_body_i_indvar20;
reg [3:0] main_while_body_i_indvar20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_while_body_i_s_010_i;
reg [4:0] main_while_body_i_0;
reg [4:0] main_while_body_i_0_reg;
reg  main_while_body_i_exitcond15;
reg  main_while_body_i_exitcond15_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_1_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_2;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_3_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_4_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_5_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_6_reg;
reg [2:0] main_while_body_i44_indvar17;
reg [2:0] main_while_body_i44_indvar17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_while_body_i44_s_010_i39;
reg [3:0] main_while_body_i44_7;
reg [3:0] main_while_body_i44_7_reg;
reg  main_while_body_i44_exitcond14;
reg  main_while_body_i44_exitcond14_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_8_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_9;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_10_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_11_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_12_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit45_13_reg;
reg [10:0] main_for_body6_i_14;
reg [10:0] main_for_body6_i_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_i_arrayidx7_i;
reg [11:0] main_for_body6_i_15;
reg [11:0] main_for_body6_i_15_reg;
reg  main_for_body6_i_exitcond13;
reg  main_for_body6_i_exitcond13_reg;
reg [6:0] main_for_cond15_preheader_i_l_062_i;
reg [6:0] main_for_cond15_preheader_i_l_062_i_reg;
reg [31:0] main_for_body18_i_i_161_i;
reg [31:0] main_for_body18_i_i_161_i_reg;
reg [21:0] main_for_body18_i_bit_select64;
reg [31:0] main_for_body18_i_bit_concat65;
reg [31:0] main_for_body18_i_bit_concat65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body18_i_arraydecay21_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body18_i_arraydecay25_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body18_i_arraydecay25_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body18_i_arrayidx19_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body18_i_arrayidx19_i_reg;
reg [31:0] main_for_body_i_i_i_012_i_i;
reg [31:0] main_for_body_i_i_i_012_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body_i_i_arrayidx_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body_i_i_arrayidx1_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body_i_i_arrayidx1_i_i_reg;
reg [31:0] main_for_body_i_i_16;
reg [31:0] main_for_body_i_i_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body_i_i_arrayidx6_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body_i_i_arrayidx6_i_i_reg;
reg [31:0] main_for_body_i_i_17;
reg [63:0] main_for_body_i_i_conv_i_i;
reg [63:0] main_for_body_i_i_conv_i_i_reg;
reg [63:0] main_for_body_i_i_18;
reg [31:0] main_for_body_i_i_bit_select63;
reg [31:0] main_for_body_i_i_bit_select63_reg;
reg [30:0] main_for_body_i_i_bit_select61;
reg [31:0] main_for_body_i_i_bit_concat62;
reg [31:0] main_for_body_i_i_bit_concat62_reg;
reg  main_for_body_i_i_cmp11_i_i20;
reg  main_lor_lhs_false_i_i24_cmp12_i_i21;
reg  main_lor_lhs_false_i_i24_cmp13_i_i22;
reg  main_lor_lhs_false_i_i24_or_cond_i_i23;
reg [31:0] main_if_then20_i_i30_sub_i_i27;
reg [31:0] main_if_then20_i_i30_or21_i_i28;
reg  main_if_then20_i_i30_cmp22_i_i29;
reg [63:0] main_if_then20_i_i30_1;
reg [63:0] main_if_then61_i_i36_mul_i_i35;
reg [63:0] main_pow_exit38_retval_0_i_i37;
reg [63:0] main_pow_exit38_retval_0_i_i37_reg;
reg [31:0] main_pow_exit38_19;
reg [63:0] main_pow_exit38_conv2_i_i;
reg [63:0] main_pow_exit38_conv2_i_i_reg;
reg [63:0] main_pow_exit38_20;
reg [31:0] main_pow_exit38_bit_select60;
reg [31:0] main_pow_exit38_bit_select60_reg;
reg [30:0] main_pow_exit38_bit_select58;
reg [31:0] main_pow_exit38_bit_concat59;
reg [31:0] main_pow_exit38_bit_concat59_reg;
reg  main_pow_exit38_cmp11_i_i;
reg  main_lor_lhs_false_i_i11_cmp12_i_i;
reg  main_lor_lhs_false_i_i11_cmp13_i_i9;
reg  main_lor_lhs_false_i_i11_or_cond_i_i10;
reg [31:0] main_if_then20_i_i_sub_i_i12;
reg [31:0] main_if_then20_i_i_or21_i_i;
reg  main_if_then20_i_i_cmp22_i_i;
reg [63:0] main_if_then20_i_i_46;
reg [63:0] main_if_then61_i_i_mul_i_i14;
reg [63:0] main_pow_exit_retval_0_i_i15;
reg [63:0] main_pow_exit_retval_0_i_i15_reg;
reg [63:0] main_pow_exit_add_i_i;
reg [63:0] main_pow_exit_add_i_i_reg;
reg [63:0] main_pow_exit_21;
reg [31:0] main_pow_exit_bit_select57;
reg [31:0] main_pow_exit_bit_select57_reg;
reg [31:0] main_pow_exit_bit_select56;
reg [31:0] main_pow_exit_bit_select56_reg;
reg [10:0] main_pow_exit_bit_select54;
reg [30:0] main_pow_exit_bit_select52;
reg [30:0] main_pow_exit_bit_select52_reg;
reg  main_pow_exit_bit_select51;
reg  main_pow_exit_bit_select51_reg;
reg [31:0] main_pow_exit_bit_concat55;
reg  main_pow_exit_cmp_i_i;
reg [63:0] main_if_then_i_i_mul_i_i;
reg [63:0] main_if_then_i_i_add_i_i1;
reg  main_if_end_i_i_cmp2_i_i;
reg [31:0] main_if_then3_i_i_bit_concat53;
reg [31:0] main_if_then3_i_i_or_i_i;
reg  main_if_then3_i_i_cmp5_i_i;
reg [63:0] main_if_then8_i_i_sub_i_i2;
reg [63:0] main_if_then8_i_i_div_i_i;
reg [11:0] main_if_end12_i_i_shr_i_i;
reg  main_if_end12_i_i_cmp13_i_i;
reg  main_while_cond_preheader_i_i_cmp15265_i_i;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_s;
reg [26:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_s_var3;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_s_var4;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_n;
reg [31:0] main_while_cond_for_cond_preheader_crit_edge_i_i_n_var5;
reg [31:0] main_for_cond_preheader_i_i_m_0_lcssa_i_i;
reg [31:0] main_for_cond_preheader_i_i_m_0_lcssa_i_i_reg;
reg [31:0] main_for_cond_preheader_i_i_ix0_0_lcssa_i_i;
reg [31:0] main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg;
reg [31:0] main_for_cond_preheader_i_i_ix1_0_lcssa_i_i;
reg [31:0] main_for_cond_preheader_i_i_ix1_0_lcssa_i_i_reg;
reg  main_for_cond_preheader_i_i_bit_select43;
reg [31:0] main_for_cond_preheader_i_i_bit_concat44;
reg  main_for_cond_preheader_i_i_cmp20261_i_i;
reg [31:0] main_while_body_i_i_22;
reg [31:0] main_while_body_i_i_22_reg;
reg [31:0] main_while_body_i_i_ix1_0266_i_i;
reg [31:0] main_while_body_i_i_ix1_0266_i_i_reg;
reg [28:0] main_while_body_i_i_bit_select49;
reg [28:0] main_while_body_i_i_bit_select49_reg;
reg [30:0] main_while_body_i_i_bit_select45;
reg [30:0] main_while_body_i_i_bit_select45_reg;
reg [20:0] main_while_body_i_i_bit_select41;
reg [10:0] main_while_body_i_i_bit_select39;
reg [31:0] main_while_body_i_i_bit_concat42;
reg [31:0] main_while_body_i_i_bit_concat42_reg;
reg [31:0] main_while_body_i_i_bit_concat40;
reg [31:0] main_while_body_i_i_bit_concat40_reg;
reg  main_while_body_i_i_cmp15_i_i;
reg [31:0] main_while_body_i_i_indvar_next;
reg [31:0] main_for_body_i_i4_i_0263_i_i;
reg [31:0] main_for_body_i_i4_i_0263_i_i_reg;
reg [31:0] main_for_body_i_i4_ix0_1262_i_i;
reg [31:0] main_for_body_i_i4_ix0_1262_i_i_reg;
reg [30:0] main_for_body_i_i4_bit_select37;
reg  main_for_body_i_i4_bit_select35;
reg [31:0] main_for_body_i_i4_bit_concat38;
reg [31:0] main_for_body_i_i4_bit_concat38_reg;
reg [31:0] main_for_body_i_i4_23;
reg [31:0] main_for_body_i_i4_23_reg;
reg [31:0] main_for_body_i_i4_bit_concat36;
reg  main_for_body_i_i4_cmp20_i_i;
reg [31:0] main_for_end_i_i_i_0_lcssa_i_i;
reg [31:0] main_for_end_i_i_i_0_lcssa_i_i_reg;
reg [31:0] main_for_end_i_i_ix0_1_lcssa_i_i;
reg [31:0] main_for_end_i_i_ix0_1_lcssa_i_i_reg;
reg [31:0] main_for_end_i_i_sub23_i_i;
reg [31:0] main_for_end_i_i_sub24_i_i;
reg [31:0] main_for_end_i_i_shr25_i_i;
reg [31:0] main_for_end_i_i_or26_i_i;
reg [31:0] main_for_end_i_i_shl27_i_i;
reg [31:0] main_if_end28_i_i_ix1_1_i_i;
reg [31:0] main_if_end28_i_i_ix1_1_i_i_reg;
reg [31:0] main_if_end28_i_i_ix0_2_i_i;
reg [31:0] main_if_end28_i_i_ix0_2_i_i_reg;
reg [31:0] main_if_end28_i_i_m_1_i_i;
reg [31:0] main_if_end28_i_i_m_1_i_i_reg;
reg  main_if_end28_i_i_bit_select30;
reg  main_if_end28_i_i_bit_select30_reg;
reg [19:0] main_if_end28_i_i_bit_select29;
reg [19:0] main_if_end28_i_i_bit_select29_reg;
reg [30:0] main_if_end28_i_i_bit_select27;
reg [30:0] main_if_end28_i_i_bit_select27_reg;
reg [31:0] main_if_end28_i_i_sub29_i_i;
reg  main_if_end28_i_i_bit_select32;
reg [11:0] main_if_end28_i_i_bit_select2;
reg [11:0] main_if_end28_i_i_bit_select2_reg;
reg [31:0] main_if_end28_i_i_bit_concat34;
reg [31:0] main_if_end28_i_i_bit_concat33;
reg  main_if_end28_i_i_tobool_i_i;
reg [31:0] main_if_then33_i_i_bit_concat31;
reg [31:0] main_if_then33_i_i_bit_concat28;
reg [31:0] main_if_end39_i_i_ix1_2_i_i;
reg [31:0] main_if_end39_i_i_ix1_2_i_i_reg;
reg [31:0] main_if_end39_i_i_ix0_3_i_i;
reg [31:0] main_if_end39_i_i_ix0_3_i_i_reg;
reg  main_if_end39_i_i_bit_select25;
reg [30:0] main_if_end39_i_i_bit_select24;
reg [30:0] main_if_end39_i_i_bit_select22;
reg [31:0] main_if_end39_i_i_bit_concat26;
reg [31:0] main_if_end39_i_i_bit_concat23;
reg [31:0] main_while_body48_i_i_indvar1;
reg [31:0] main_while_body48_i_i_indvar1_reg;
reg [31:0] main_while_body48_i_i_ix1_3259_i_i;
reg [31:0] main_while_body48_i_i_ix1_3259_i_i_reg;
reg [31:0] main_while_body48_i_i_q_0258_i_i;
reg [31:0] main_while_body48_i_i_q_0258_i_i_reg;
reg [31:0] main_while_body48_i_i_s0_0257_i_i;
reg [31:0] main_while_body48_i_i_s0_0257_i_i_reg;
reg [31:0] main_while_body48_i_i_ix0_4256_i_i;
reg [31:0] main_while_body48_i_i_ix0_4256_i_i_reg;
reg [31:0] main_while_body48_i_i_ix1_3_in255_i_i;
reg [31:0] main_while_body48_i_i_ix1_3_in255_i_i_reg;
reg [31:0] main_while_body48_i_i_r_0254_i_i;
reg [31:0] main_while_body48_i_i_r_0254_i_i_reg;
reg  main_while_body48_i_i_bit_select20;
reg  main_while_body48_i_i_bit_select20_reg;
reg [30:0] main_while_body48_i_i_bit_select17;
reg [30:0] main_while_body48_i_i_bit_select17_reg;
reg [30:0] main_while_body48_i_i_bit_select15;
reg [30:0] main_while_body48_i_i_bit_select15_reg;
reg [31:0] main_while_body48_i_i_add49_i_i;
reg [31:0] main_while_body48_i_i_add49_i_i_reg;
reg  main_while_body48_i_i_cmp50_i_i;
reg [31:0] main_if_then51_i_i_add52_i_i;
reg [31:0] main_if_then51_i_i_sub53_i_i;
reg [31:0] main_if_then51_i_i_add54_i_i;
reg [31:0] main_if_end55_i_i_ix0_5_i_i;
reg [31:0] main_if_end55_i_i_ix0_5_i_i_reg;
reg [31:0] main_if_end55_i_i_s0_1_i_i;
reg [31:0] main_if_end55_i_i_s0_1_i_i_reg;
reg [31:0] main_if_end55_i_i_q_1_i_i;
reg [31:0] main_if_end55_i_i_q_1_i_i_reg;
reg [30:0] main_if_end55_i_i_bit_select19;
reg [31:0] main_if_end55_i_i_bit_concat21;
reg [31:0] main_if_end55_i_i_bit_concat21_reg;
reg [31:0] main_if_end55_i_i_bit_concat18;
reg [31:0] main_if_end55_i_i_bit_concat16;
reg [31:0] main_if_end55_i_i_bit_concat16_reg;
reg [31:0] main_if_end55_i_i_24;
reg  main_if_end55_i_i_exitcond2;
reg [31:0] main_while_body65_i_i_indvar3;
reg [31:0] main_while_body65_i_i_indvar3_reg;
reg [31:0] main_while_body65_i_i_s0_2252_i_i;
reg [31:0] main_while_body65_i_i_s0_2252_i_i_reg;
reg [31:0] main_while_body65_i_i_ix0_6251_i_i;
reg [31:0] main_while_body65_i_i_ix0_6251_i_i_reg;
reg [31:0] main_while_body65_i_i_q1_0250_i_i;
reg [31:0] main_while_body65_i_i_q1_0250_i_i_reg;
reg [31:0] main_while_body65_i_i_ix1_4249_i_i;
reg [31:0] main_while_body65_i_i_ix1_4249_i_i_reg;
reg [31:0] main_while_body65_i_i_s1_0248_i_i;
reg [31:0] main_while_body65_i_i_s1_0248_i_i_reg;
reg [31:0] main_while_body65_i_i_r_1247_i_i;
reg [31:0] main_while_body65_i_i_r_1247_i_i_reg;
reg [30:0] main_while_body65_i_i_bit_select6;
reg [30:0] main_while_body65_i_i_bit_select6_reg;
reg [31:0] main_while_body65_i_i_add66_i_i;
reg [31:0] main_while_body65_i_i_add66_i_i_reg;
reg  main_while_body65_i_i_bit_select14;
reg  main_while_body65_i_i_bit_select14_reg;
reg  main_while_body65_i_i_cmp67_i_i;
reg  main_lor_lhs_false_i_i_cmp68_i_i;
reg  main_lor_lhs_false_i_i_cmp69_i_i;
reg  main_lor_lhs_false_i_i_or_cond_i_i;
reg [31:0] main_if_then70_i_i_add71_i_i;
reg  main_if_then70_i_i_cmp76_i_i;
reg  main_if_then70_i_i_or_cond243_i_i;
reg [31:0] main_if_then70_i_i_bit_concat13;
reg [31:0] main_if_then70_i_i_s0_3_i_i;
reg  main_if_then70_i_i_cmp81_i_i;
reg [1:0] main_if_then70_i_i_sub83_i_i;
reg [31:0] main_if_then70_i_i_sub80_i_i;
reg [31:0] main_if_then70_i_i_sub83_sub80_i_i;
reg [31:0] main_if_then70_i_i_sub85_i_i;
reg [31:0] main_if_then70_i_i_add86_i_i;
reg [31:0] main_if_end87_i_i_s1_1_i_i;
reg [31:0] main_if_end87_i_i_s1_1_i_i_reg;
reg [31:0] main_if_end87_i_i_ix1_5_i_i;
reg [31:0] main_if_end87_i_i_ix1_5_i_i_reg;
reg [31:0] main_if_end87_i_i_q1_1_i_i;
reg [31:0] main_if_end87_i_i_q1_1_i_i_reg;
reg [31:0] main_if_end87_i_i_ix0_8_i_i;
reg [31:0] main_if_end87_i_i_ix0_8_i_i_reg;
reg [31:0] main_if_end87_i_i_s0_4_i_i;
reg [31:0] main_if_end87_i_i_s0_4_i_i_reg;
reg  main_if_end87_i_i_bit_select11;
reg [30:0] main_if_end87_i_i_bit_select10;
reg [30:0] main_if_end87_i_i_bit_select8;
reg  main_if_end87_i_i_bit_select4;
reg  main_if_end87_i_i_bit_select4_reg;
reg [31:0] main_if_end87_i_i_bit_concat12;
reg [31:0] main_if_end87_i_i_bit_concat12_reg;
reg [31:0] main_if_end87_i_i_bit_concat9;
reg [31:0] main_if_end87_i_i_bit_concat9_reg;
reg [31:0] main_if_end87_i_i_bit_concat7;
reg [31:0] main_if_end87_i_i_25;
reg  main_if_end87_i_i_exitcond3;
reg [31:0] main_while_end94_i_i_or95_i_i;
reg  main_while_end94_i_i_cmp96_i_i;
reg  main_if_then99_i_i_cmp100_i_i;
reg [31:0] main_if_then101_i_i_add102_i_i;
reg [31:0] main_if_else111_i_i_bit_concat5;
reg [31:0] main_if_else111_i_i_add113_i_i;
reg [31:0] main_if_end117_i_i_q1_2_i_i;
reg [31:0] main_if_end117_i_i_q1_2_i_i_reg;
reg [31:0] main_if_end117_i_i_q_3_i_i;
reg [31:0] main_if_end117_i_i_q_3_i_i_reg;
reg [30:0] main_if_end117_i_i_bit_select1;
reg  main_if_end117_i_i_bit_select;
reg [30:0] main_if_end117_i_i_shr118_i_i;
reg [31:0] main_if_end117_i_i_bit_concat3;
reg [31:0] main_if_end117_i_i_add119_i_i;
reg [31:0] main_if_end117_i_i_add127_i_i;
reg [63:0] main_if_end117_i_i_bit_concat;
reg [63:0] main_if_end117_i_i_26;
reg [63:0] main_sqrt_exit_retval_0_i_i;
reg [63:0] main_sqrt_exit_retval_0_i_i_reg;
reg [31:0] main_sqrt_exit_conv5_i_i;
reg [31:0] main_sqrt_exit_sub_i_i;
reg [31:0] main_sqrt_exit_27;
reg [31:0] main_sqrt_exit_27_reg;
reg  main_sqrt_exit_exitcond4;
reg  main_sqrt_exit_exitcond4_reg;
reg [31:0] main_contour_exit_i_28;
reg  main_contour_exit_i_exitcond;
reg [7:0] main_for_inc34_i_29;
reg  main_for_inc34_i_exitcond5;
reg [10:0] main_for_body6_1_i_30;
reg [10:0] main_for_body6_1_i_30_reg;
reg [11:0] main_for_body6_1_i_31;
reg [11:0] main_for_body6_1_i_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_1_i_arrayidx7_1_i;
reg [11:0] main_for_body6_1_i_32;
reg [11:0] main_for_body6_1_i_32_reg;
reg  main_for_body6_1_i_exitcond12;
reg  main_for_body6_1_i_exitcond12_reg;
reg [10:0] main_for_body6_2_i_33;
reg [10:0] main_for_body6_2_i_33_reg;
reg [11:0] main_for_body6_2_i_34;
reg [11:0] main_for_body6_2_i_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_2_i_arrayidx7_2_i;
reg [11:0] main_for_body6_2_i_35;
reg [11:0] main_for_body6_2_i_35_reg;
reg  main_for_body6_2_i_exitcond11;
reg  main_for_body6_2_i_exitcond11_reg;
reg [10:0] main_for_body6_3_i_36;
reg [10:0] main_for_body6_3_i_36_reg;
reg [12:0] main_for_body6_3_i_37;
reg [12:0] main_for_body6_3_i_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_3_i_arrayidx7_3_i;
reg [11:0] main_for_body6_3_i_38;
reg [11:0] main_for_body6_3_i_38_reg;
reg  main_for_body6_3_i_exitcond10;
reg  main_for_body6_3_i_exitcond10_reg;
reg [10:0] main_for_body6_4_i_39;
reg [10:0] main_for_body6_4_i_39_reg;
reg [12:0] main_for_body6_4_i_40;
reg [12:0] main_for_body6_4_i_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_4_i_arrayidx7_4_i;
reg [11:0] main_for_body6_4_i_41;
reg [11:0] main_for_body6_4_i_41_reg;
reg  main_for_body6_4_i_exitcond9;
reg  main_for_body6_4_i_exitcond9_reg;
reg [10:0] main_for_body6_5_i_42;
reg [10:0] main_for_body6_5_i_42_reg;
reg [12:0] main_for_body6_5_i_43;
reg [12:0] main_for_body6_5_i_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_5_i_arrayidx7_5_i;
reg [11:0] main_for_body6_5_i_44;
reg [11:0] main_for_body6_5_i_44_reg;
reg  main_for_body6_5_i_exitcond8;
reg  main_for_body6_5_i_exitcond8_reg;
reg [10:0] main_for_body6_6_i_45;
reg [10:0] main_for_body6_6_i_45_reg;
reg [12:0] main_for_body6_6_i_46;
reg [12:0] main_for_body6_6_i_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_6_i_arrayidx7_6_i;
reg [11:0] main_for_body6_6_i_47;
reg [11:0] main_for_body6_6_i_47_reg;
reg  main_for_body6_6_i_exitcond7;
reg  main_for_body6_6_i_exitcond7_reg;
reg [10:0] main_for_body6_7_i_48;
reg [10:0] main_for_body6_7_i_48_reg;
reg [13:0] main_for_body6_7_i_49;
reg [13:0] main_for_body6_7_i_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_for_body6_7_i_arrayidx7_7_i;
reg [11:0] main_for_body6_7_i_50;
reg [11:0] main_for_body6_7_i_50_reg;
reg  main_for_body6_7_i_exitcond6;
reg  main_for_body6_7_i_exitcond6_reg;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_sobelfilter_exit_arrayidx38_i;
reg [31:0] main_sobelfilter_exit_51;
reg [12:0] main_entry_vla160_i_address_a;
reg  main_entry_vla160_i_write_enable_a;
reg [31:0] main_entry_vla160_i_in_a;
wire [31:0] main_entry_vla160_i_out_a;
reg  legup_function_call;
reg [31:0] main_altfp_sitofp_32_64_0_op0;
reg  main_altfp_sitofp_32_64_0_inst_clock;
reg  main_altfp_sitofp_32_64_0_inst_clk_en;
reg [31:0] main_altfp_sitofp_32_64_0_inst_dataa;
wire [63:0] main_altfp_sitofp_32_64_0_inst_result;
reg [63:0] main_for_body_i_i_conv_i_i_out;
reg  altfp_main_for_body_i_i_conv_i_i_en;
reg [63:0] main_altfp_sitofp_32_64_0;
reg [63:0] main_altfp_multiply_64_0_op0;
reg [63:0] main_altfp_multiply_64_0_op1;
reg  main_altfp_multiply_64_0_inst_clock;
reg  main_altfp_multiply_64_0_inst_clk_en;
reg [63:0] main_altfp_multiply_64_0_inst_dataa;
reg [63:0] main_altfp_multiply_64_0_inst_datab;
wire [63:0] main_altfp_multiply_64_0_inst_result;
reg [63:0] main_if_then61_i_i36_mul_i_i35_out;
reg  altfp_main_if_then61_i_i36_mul_i_i35_en;
reg [63:0] main_altfp_multiply_64_0;
reg [63:0] main_altfp_add_64_0_op0;
reg [63:0] main_altfp_add_64_0_op1;
reg  main_altfp_add_64_0_inst_clock;
reg  main_altfp_add_64_0_inst_clk_en;
reg [63:0] main_altfp_add_64_0_inst_dataa;
reg [63:0] main_altfp_add_64_0_inst_datab;
wire [63:0] main_altfp_add_64_0_inst_result;
reg [63:0] main_pow_exit_add_i_i_out;
reg  altfp_main_pow_exit_add_i_i_en;
reg [63:0] main_altfp_add_64_0;
reg [63:0] main_altfp_subtract_64_0_op0;
reg [63:0] main_altfp_subtract_64_0_op1;
reg  main_altfp_subtract_64_0_inst_clock;
reg  main_altfp_subtract_64_0_inst_clk_en;
reg [63:0] main_altfp_subtract_64_0_inst_dataa;
reg [63:0] main_altfp_subtract_64_0_inst_datab;
wire [63:0] main_altfp_subtract_64_0_inst_result;
reg [63:0] main_if_then8_i_i_sub_i_i2_out;
reg  altfp_main_if_then8_i_i_sub_i_i2_en;
reg [63:0] main_altfp_subtract_64_0;
reg [63:0] main_altfp_divide_64_0_op0;
reg [63:0] main_altfp_divide_64_0_op1;
reg  main_altfp_divide_64_0_inst_clock;
reg  main_altfp_divide_64_0_inst_clk_en;
reg [63:0] main_altfp_divide_64_0_inst_dataa;
reg [63:0] main_altfp_divide_64_0_inst_datab;
wire [63:0] main_altfp_divide_64_0_inst_result;
reg [63:0] main_if_then8_i_i_div_i_i_out;
reg  altfp_main_if_then8_i_i_div_i_i_en;
reg [63:0] main_altfp_divide_64_0;
reg [63:0] main_altfp_fptosi_64_32_0_op0;
reg  main_altfp_fptosi_64_32_0_inst_clock;
reg  main_altfp_fptosi_64_32_0_inst_clk_en;
reg [63:0] main_altfp_fptosi_64_32_0_inst_dataa;
wire [31:0] main_altfp_fptosi_64_32_0_inst_result;
reg [31:0] main_sqrt_exit_conv5_i_i_out;
reg  altfp_main_sqrt_exit_conv5_i_i_en;
reg [31:0] main_altfp_fptosi_64_32_0;
wire [9:0] main_for_body18_i_bit_concat65_bit_select_operand_2;
wire  main_for_body_i_i_bit_concat62_bit_select_operand_0;
wire  main_pow_exit38_bit_concat59_bit_select_operand_0;
wire  main_pow_exit_bit_concat55_bit_select_operand_0;
wire [19:0] main_pow_exit_bit_concat55_bit_select_operand_4;
wire [2:0] main_if_end_i_i_cmp2_i_i_op1_temp;
wire  main_if_then3_i_i_bit_concat53_bit_select_operand_0;
wire [2:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0_bit_select_operand_2;
wire [4:0] main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1_bit_select_operand_2;
wire  main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2_bit_select_operand_2;
wire [10:0] main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_0;
wire [19:0] main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_4;
wire [10:0] main_while_body_i_i_bit_concat42_bit_select_operand_0;
wire [20:0] main_while_body_i_i_bit_concat40_bit_select_operand_2;
wire  main_for_body_i_i4_bit_concat38_bit_select_operand_2;
wire [10:0] main_for_body_i_i4_bit_concat36_bit_select_operand_0;
wire [19:0] main_for_body_i_i4_bit_concat36_bit_select_operand_4;
wire [11:0] main_if_end28_i_i_bit_concat34_bit_select_operand_0;
wire [30:0] main_if_end28_i_i_bit_concat33_bit_select_operand_0;
wire [10:0] main_if_then33_i_i_bit_concat31_bit_select_operand_0;
wire  main_if_then33_i_i_bit_concat28_bit_select_operand_2;
wire  main_if_end39_i_i_bit_concat23_bit_select_operand_2;
wire  main_if_end55_i_i_bit_concat18_bit_select_operand_0;
wire  main_if_end55_i_i_bit_concat16_bit_select_operand_2;
wire [30:0] main_if_then70_i_i_bit_concat13_bit_select_operand_0;
wire  main_if_end87_i_i_bit_concat9_bit_select_operand_2;
wire  main_if_end87_i_i_bit_concat7_bit_select_operand_0;
wire [30:0] main_if_else111_i_i_bit_concat5_bit_select_operand_0;
wire [19:0] main_if_end117_i_i_bit_concat3_bit_select_operand_2;


legup_sitofp_32_64_5 main_altfp_sitofp_32_64_0_inst (
	.clock (main_altfp_sitofp_32_64_0_inst_clock),
	.clk_en (main_altfp_sitofp_32_64_0_inst_clk_en),
	.dataa (main_altfp_sitofp_32_64_0_inst_dataa),
	.result (main_altfp_sitofp_32_64_0_inst_result)
);



xlnx_fp_multiplier_64_7 main_altfp_multiply_64_0_inst (
	.clock (main_altfp_multiply_64_0_inst_clock),
	.clk_en (main_altfp_multiply_64_0_inst_clk_en),
	.dataa (main_altfp_multiply_64_0_inst_dataa),
	.datab (main_altfp_multiply_64_0_inst_datab),
	.result (main_altfp_multiply_64_0_inst_result)
);



xlnx_fp_adder_64_7 main_altfp_add_64_0_inst (
	.clock (main_altfp_add_64_0_inst_clock),
	.clk_en (main_altfp_add_64_0_inst_clk_en),
	.dataa (main_altfp_add_64_0_inst_dataa),
	.datab (main_altfp_add_64_0_inst_datab),
	.result (main_altfp_add_64_0_inst_result)
);



xlnx_fp_subtractor_64_7 main_altfp_subtract_64_0_inst (
	.clock (main_altfp_subtract_64_0_inst_clock),
	.clk_en (main_altfp_subtract_64_0_inst_clk_en),
	.dataa (main_altfp_subtract_64_0_inst_dataa),
	.datab (main_altfp_subtract_64_0_inst_datab),
	.result (main_altfp_subtract_64_0_inst_result)
);



xlnx_fp_divider_64_30 main_altfp_divide_64_0_inst (
	.clock (main_altfp_divide_64_0_inst_clock),
	.clk_en (main_altfp_divide_64_0_inst_clk_en),
	.dataa (main_altfp_divide_64_0_inst_dataa),
	.datab (main_altfp_divide_64_0_inst_datab),
	.result (main_altfp_divide_64_0_inst_result)
);



legup_fptosi_64_32_4 main_altfp_fptosi_64_32_0_inst (
	.clock (main_altfp_fptosi_64_32_0_inst_clock),
	.clk_en (main_altfp_fptosi_64_32_0_inst_clk_en),
	.dataa (main_altfp_fptosi_64_32_0_inst_dataa),
	.result (main_altfp_fptosi_64_32_0_inst_result)
);




//   %vla160.i = alloca [8192 x i32], align 4, !dbg !96, !MSB !93, !LSB !94, !extendFrom !93
ram_single_port main_entry_vla160_i (
	.clk( clk ),
	.clken( !fsm_stall ),
	.address_a( main_entry_vla160_i_address_a ),
	.wren_a( main_entry_vla160_i_write_enable_a ),
	.data_a( main_entry_vla160_i_in_a ),
	.byteena_a( {4{1'b1}} ),
	.q_a( main_entry_vla160_i_out_a )
);
defparam main_entry_vla160_i.width_a = 32;
defparam main_entry_vla160_i.widthad_a = 13;
defparam main_entry_vla160_i.width_be_a = 4;
defparam main_entry_vla160_i.numwords_a = 8192;
defparam main_entry_vla160_i.latency = 1;

/* Unsynthesizable Statements */
/* synthesis translate_off */
always @(posedge clk)
	if (!fsm_stall) begin
	if ((cur_state == LEGUP_F_main_BB_sobelfilter_exit_186)) begin
		$write("%d\n", $signed(main_sobelfilter_exit_51));
	end
end
/* synthesis translate_on */
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (!fsm_stall)
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  /* synthesis parallel_case */
LEGUP_0:
	if ((fsm_stall == 1'd0) && (start == 1'd1))
		next_state = LEGUP_F_main_BB_entry_1;
LEGUP_F_main_BB_contour_exit_i_155:
	if ((fsm_stall == 1'd0) && (main_contour_exit_i_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_for_inc34_i_156;
	else if ((fsm_stall == 1'd0) && (main_contour_exit_i_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_for_body18_i_18;
LEGUP_F_main_BB_entry_1:
		next_state = LEGUP_F_main_BB_while_body_i_2;
LEGUP_F_main_BB_for_body18_i_18:
		next_state = LEGUP_function_call_19;
LEGUP_F_main_BB_for_body18_i_20:
		next_state = LEGUP_function_call_21;
LEGUP_F_main_BB_for_body18_i_22:
		next_state = LEGUP_F_main_BB_for_body_i_i_23;
LEGUP_F_main_BB_for_body6_1_i_157:
		next_state = LEGUP_F_main_BB_for_body6_1_i_158;
LEGUP_F_main_BB_for_body6_1_i_158:
		next_state = LEGUP_F_main_BB_for_body6_1_i_159;
LEGUP_F_main_BB_for_body6_1_i_159:
	if ((fsm_stall == 1'd0) && (main_for_body6_1_i_exitcond12_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_2_i_preheader_160;
	else if ((fsm_stall == 1'd0) && (main_for_body6_1_i_exitcond12_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_1_i_157;
LEGUP_F_main_BB_for_body6_1_i_preheader_16:
		next_state = LEGUP_F_main_BB_for_body6_1_i_157;
LEGUP_F_main_BB_for_body6_2_i_161:
		next_state = LEGUP_F_main_BB_for_body6_2_i_162;
LEGUP_F_main_BB_for_body6_2_i_162:
		next_state = LEGUP_F_main_BB_for_body6_2_i_163;
LEGUP_F_main_BB_for_body6_2_i_163:
	if ((fsm_stall == 1'd0) && (main_for_body6_2_i_exitcond11_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_3_i_preheader_164;
	else if ((fsm_stall == 1'd0) && (main_for_body6_2_i_exitcond11_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_2_i_161;
LEGUP_F_main_BB_for_body6_2_i_preheader_160:
		next_state = LEGUP_F_main_BB_for_body6_2_i_161;
LEGUP_F_main_BB_for_body6_3_i_165:
		next_state = LEGUP_F_main_BB_for_body6_3_i_166;
LEGUP_F_main_BB_for_body6_3_i_166:
		next_state = LEGUP_F_main_BB_for_body6_3_i_167;
LEGUP_F_main_BB_for_body6_3_i_167:
	if ((fsm_stall == 1'd0) && (main_for_body6_3_i_exitcond10_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_4_i_preheader_168;
	else if ((fsm_stall == 1'd0) && (main_for_body6_3_i_exitcond10_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_3_i_165;
LEGUP_F_main_BB_for_body6_3_i_preheader_164:
		next_state = LEGUP_F_main_BB_for_body6_3_i_165;
LEGUP_F_main_BB_for_body6_4_i_169:
		next_state = LEGUP_F_main_BB_for_body6_4_i_170;
LEGUP_F_main_BB_for_body6_4_i_170:
		next_state = LEGUP_F_main_BB_for_body6_4_i_171;
LEGUP_F_main_BB_for_body6_4_i_171:
	if ((fsm_stall == 1'd0) && (main_for_body6_4_i_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_5_i_preheader_172;
	else if ((fsm_stall == 1'd0) && (main_for_body6_4_i_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_4_i_169;
LEGUP_F_main_BB_for_body6_4_i_preheader_168:
		next_state = LEGUP_F_main_BB_for_body6_4_i_169;
LEGUP_F_main_BB_for_body6_5_i_173:
		next_state = LEGUP_F_main_BB_for_body6_5_i_174;
LEGUP_F_main_BB_for_body6_5_i_174:
		next_state = LEGUP_F_main_BB_for_body6_5_i_175;
LEGUP_F_main_BB_for_body6_5_i_175:
	if ((fsm_stall == 1'd0) && (main_for_body6_5_i_exitcond8_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_6_i_preheader_176;
	else if ((fsm_stall == 1'd0) && (main_for_body6_5_i_exitcond8_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_5_i_173;
LEGUP_F_main_BB_for_body6_5_i_preheader_172:
		next_state = LEGUP_F_main_BB_for_body6_5_i_173;
LEGUP_F_main_BB_for_body6_6_i_177:
		next_state = LEGUP_F_main_BB_for_body6_6_i_178;
LEGUP_F_main_BB_for_body6_6_i_178:
		next_state = LEGUP_F_main_BB_for_body6_6_i_179;
LEGUP_F_main_BB_for_body6_6_i_179:
	if ((fsm_stall == 1'd0) && (main_for_body6_6_i_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_7_i_preheader_180;
	else if ((fsm_stall == 1'd0) && (main_for_body6_6_i_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_6_i_177;
LEGUP_F_main_BB_for_body6_6_i_preheader_176:
		next_state = LEGUP_F_main_BB_for_body6_6_i_177;
LEGUP_F_main_BB_for_body6_7_i_181:
		next_state = LEGUP_F_main_BB_for_body6_7_i_182;
LEGUP_F_main_BB_for_body6_7_i_182:
		next_state = LEGUP_F_main_BB_for_body6_7_i_183;
LEGUP_F_main_BB_for_body6_7_i_183:
	if ((fsm_stall == 1'd0) && (main_for_body6_7_i_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_cond15_preheader_i_preheader_184;
	else if ((fsm_stall == 1'd0) && (main_for_body6_7_i_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_7_i_181;
LEGUP_F_main_BB_for_body6_7_i_preheader_180:
		next_state = LEGUP_F_main_BB_for_body6_7_i_181;
LEGUP_F_main_BB_for_body6_i_14:
		next_state = LEGUP_F_main_BB_for_body6_i_15;
LEGUP_F_main_BB_for_body6_i_15:
	if ((fsm_stall == 1'd0) && (main_for_body6_i_exitcond13_reg == 1'd1))
		next_state = LEGUP_F_main_BB_for_body6_1_i_preheader_16;
	else if ((fsm_stall == 1'd0) && (main_for_body6_i_exitcond13_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body6_i_14;
LEGUP_F_main_BB_for_body_i_i4_130:
	if ((fsm_stall == 1'd0) && (main_for_body_i_i4_cmp20_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_for_end_i_i_loopexit_131;
LEGUP_F_main_BB_for_body_i_i4_preheader_128:
		next_state = LEGUP_F_main_BB_for_body_i_i4_130;
LEGUP_F_main_BB_for_body_i_i_23:
		next_state = LEGUP_F_main_BB_for_body_i_i_24;
LEGUP_F_main_BB_for_body_i_i_24:
		next_state = LEGUP_F_main_BB_for_body_i_i_25;
LEGUP_F_main_BB_for_body_i_i_25:
		next_state = LEGUP_F_main_BB_for_body_i_i_26;
LEGUP_F_main_BB_for_body_i_i_26:
		next_state = LEGUP_F_main_BB_for_body_i_i_27;
LEGUP_F_main_BB_for_body_i_i_27:
		next_state = LEGUP_F_main_BB_for_body_i_i_28;
LEGUP_F_main_BB_for_body_i_i_28:
		next_state = LEGUP_F_main_BB_for_body_i_i_29;
LEGUP_F_main_BB_for_body_i_i_29:
		next_state = LEGUP_F_main_BB_for_body_i_i_30;
LEGUP_F_main_BB_for_body_i_i_30:
	if ((fsm_stall == 1'd0) && (main_for_body_i_i_cmp11_i_i20 == 1'd1))
		next_state = LEGUP_F_main_BB_if_then20_i_i30_32;
	else if ((fsm_stall == 1'd0) && (main_for_body_i_i_cmp11_i_i20 == 1'd0))
		next_state = LEGUP_F_main_BB_lor_lhs_false_i_i24_31;
LEGUP_F_main_BB_for_cond15_preheader_i_17:
		next_state = LEGUP_F_main_BB_for_body18_i_18;
LEGUP_F_main_BB_for_cond15_preheader_i_preheader_184:
		next_state = LEGUP_F_main_BB_for_cond15_preheader_i_17;
LEGUP_F_main_BB_for_cond_preheader_i_i_127:
	if ((fsm_stall == 1'd0) && (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_for_body_i_i4_preheader_128;
	else if ((fsm_stall == 1'd0) && (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_for_end_i_i_132;
LEGUP_F_main_BB_for_end_i_i_132:
		next_state = LEGUP_F_main_BB_if_end28_i_i_133;
LEGUP_F_main_BB_for_end_i_i_loopexit_131:
		next_state = LEGUP_F_main_BB_for_end_i_i_132;
LEGUP_F_main_BB_for_inc34_i_156:
	if ((fsm_stall == 1'd0) && (main_for_inc34_i_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB_sobelfilter_exit_185;
	else if ((fsm_stall == 1'd0) && (main_for_inc34_i_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB_for_cond15_preheader_i_17;
LEGUP_F_main_BB_if_else111_i_i_147:
		next_state = LEGUP_F_main_BB_if_end117_i_i_148;
LEGUP_F_main_BB_if_else_i_i_84:
	if ((fsm_stall == 1'd0) && (main_pow_exit_bit_select51_reg == 1'd1))
		next_state = LEGUP_F_main_BB_if_then8_i_i_85;
	else if ((fsm_stall == 1'd0) && (main_pow_exit_bit_select51_reg == 1'd0))
		next_state = LEGUP_F_main_BB_if_end12_i_i_123;
LEGUP_F_main_BB_if_end117_i_i_148:
		next_state = LEGUP_F_main_BB_sqrt_exit_149;
LEGUP_F_main_BB_if_end12_i_i_123:
	if ((fsm_stall == 1'd0) && (main_if_end12_i_i_cmp13_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_while_cond_preheader_i_i_124;
	else if ((fsm_stall == 1'd0) && (main_if_end12_i_i_cmp13_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_end28_i_i_133;
LEGUP_F_main_BB_if_end28_i_i_133:
	if ((fsm_stall == 1'd0) && (main_if_end28_i_i_tobool_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_end39_i_i_135;
	else if ((fsm_stall == 1'd0) && (main_if_end28_i_i_tobool_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_then33_i_i_134;
LEGUP_F_main_BB_if_end39_i_i_135:
		next_state = LEGUP_F_main_BB_while_body48_i_i_136;
LEGUP_F_main_BB_if_end55_i_i_138:
	if ((fsm_stall == 1'd0) && (main_if_end55_i_i_exitcond2 == 1'd1))
		next_state = LEGUP_F_main_BB_while_body65_i_i_preheader_139;
	else if ((fsm_stall == 1'd0) && (main_if_end55_i_i_exitcond2 == 1'd0))
		next_state = LEGUP_F_main_BB_while_body48_i_i_136;
LEGUP_F_main_BB_if_end87_i_i_143:
	if ((fsm_stall == 1'd0) && (main_if_end87_i_i_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB_while_end94_i_i_144;
	else if ((fsm_stall == 1'd0) && (main_if_end87_i_i_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB_while_body65_i_i_140;
LEGUP_F_main_BB_if_end_i_i_82:
	if ((fsm_stall == 1'd0) && (main_if_end_i_i_cmp2_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_then3_i_i_83;
	else if ((fsm_stall == 1'd0) && (main_if_end_i_i_cmp2_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_end12_i_i_123;
LEGUP_F_main_BB_if_then101_i_i_146:
		next_state = LEGUP_F_main_BB_if_end117_i_i_148;
LEGUP_F_main_BB_if_then20_i_i30_32:
		next_state = LEGUP_F_main_BB_pow_exit38_41;
LEGUP_F_main_BB_if_then20_i_i_50:
		next_state = LEGUP_F_main_BB_pow_exit_59;
LEGUP_F_main_BB_if_then33_i_i_134:
		next_state = LEGUP_F_main_BB_if_end39_i_i_135;
LEGUP_F_main_BB_if_then3_i_i_83:
	if ((fsm_stall == 1'd0) && (main_if_then3_i_i_cmp5_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_sqrt_exit_149;
	else if ((fsm_stall == 1'd0) && (main_if_then3_i_i_cmp5_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_else_i_i_84;
LEGUP_F_main_BB_if_then51_i_i_137:
		next_state = LEGUP_F_main_BB_if_end55_i_i_138;
LEGUP_F_main_BB_if_then61_i_i36_33:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_34;
LEGUP_F_main_BB_if_then61_i_i36_34:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_35;
LEGUP_F_main_BB_if_then61_i_i36_35:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_36;
LEGUP_F_main_BB_if_then61_i_i36_36:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_37;
LEGUP_F_main_BB_if_then61_i_i36_37:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_38;
LEGUP_F_main_BB_if_then61_i_i36_38:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_39;
LEGUP_F_main_BB_if_then61_i_i36_39:
		next_state = LEGUP_F_main_BB_if_then61_i_i36_40;
LEGUP_F_main_BB_if_then61_i_i36_40:
		next_state = LEGUP_F_main_BB_pow_exit38_41;
LEGUP_F_main_BB_if_then61_i_i_51:
		next_state = LEGUP_F_main_BB_if_then61_i_i_52;
LEGUP_F_main_BB_if_then61_i_i_52:
		next_state = LEGUP_F_main_BB_if_then61_i_i_53;
LEGUP_F_main_BB_if_then61_i_i_53:
		next_state = LEGUP_F_main_BB_if_then61_i_i_54;
LEGUP_F_main_BB_if_then61_i_i_54:
		next_state = LEGUP_F_main_BB_if_then61_i_i_55;
LEGUP_F_main_BB_if_then61_i_i_55:
		next_state = LEGUP_F_main_BB_if_then61_i_i_56;
LEGUP_F_main_BB_if_then61_i_i_56:
		next_state = LEGUP_F_main_BB_if_then61_i_i_57;
LEGUP_F_main_BB_if_then61_i_i_57:
		next_state = LEGUP_F_main_BB_if_then61_i_i_58;
LEGUP_F_main_BB_if_then61_i_i_58:
		next_state = LEGUP_F_main_BB_pow_exit_59;
LEGUP_F_main_BB_if_then70_i_i_142:
		next_state = LEGUP_F_main_BB_if_end87_i_i_143;
LEGUP_F_main_BB_if_then8_i_i_100:
		next_state = LEGUP_F_main_BB_if_then8_i_i_101;
LEGUP_F_main_BB_if_then8_i_i_101:
		next_state = LEGUP_F_main_BB_if_then8_i_i_102;
LEGUP_F_main_BB_if_then8_i_i_102:
		next_state = LEGUP_F_main_BB_if_then8_i_i_103;
LEGUP_F_main_BB_if_then8_i_i_103:
		next_state = LEGUP_F_main_BB_if_then8_i_i_104;
LEGUP_F_main_BB_if_then8_i_i_104:
		next_state = LEGUP_F_main_BB_if_then8_i_i_105;
LEGUP_F_main_BB_if_then8_i_i_105:
		next_state = LEGUP_F_main_BB_if_then8_i_i_106;
LEGUP_F_main_BB_if_then8_i_i_106:
		next_state = LEGUP_F_main_BB_if_then8_i_i_107;
LEGUP_F_main_BB_if_then8_i_i_107:
		next_state = LEGUP_F_main_BB_if_then8_i_i_108;
LEGUP_F_main_BB_if_then8_i_i_108:
		next_state = LEGUP_F_main_BB_if_then8_i_i_109;
LEGUP_F_main_BB_if_then8_i_i_109:
		next_state = LEGUP_F_main_BB_if_then8_i_i_110;
LEGUP_F_main_BB_if_then8_i_i_110:
		next_state = LEGUP_F_main_BB_if_then8_i_i_111;
LEGUP_F_main_BB_if_then8_i_i_111:
		next_state = LEGUP_F_main_BB_if_then8_i_i_112;
LEGUP_F_main_BB_if_then8_i_i_112:
		next_state = LEGUP_F_main_BB_if_then8_i_i_113;
LEGUP_F_main_BB_if_then8_i_i_113:
		next_state = LEGUP_F_main_BB_if_then8_i_i_114;
LEGUP_F_main_BB_if_then8_i_i_114:
		next_state = LEGUP_F_main_BB_if_then8_i_i_115;
LEGUP_F_main_BB_if_then8_i_i_115:
		next_state = LEGUP_F_main_BB_if_then8_i_i_116;
LEGUP_F_main_BB_if_then8_i_i_116:
		next_state = LEGUP_F_main_BB_if_then8_i_i_117;
LEGUP_F_main_BB_if_then8_i_i_117:
		next_state = LEGUP_F_main_BB_if_then8_i_i_118;
LEGUP_F_main_BB_if_then8_i_i_118:
		next_state = LEGUP_F_main_BB_if_then8_i_i_119;
LEGUP_F_main_BB_if_then8_i_i_119:
		next_state = LEGUP_F_main_BB_if_then8_i_i_120;
LEGUP_F_main_BB_if_then8_i_i_120:
		next_state = LEGUP_F_main_BB_if_then8_i_i_121;
LEGUP_F_main_BB_if_then8_i_i_121:
		next_state = LEGUP_F_main_BB_if_then8_i_i_122;
LEGUP_F_main_BB_if_then8_i_i_122:
		next_state = LEGUP_F_main_BB_sqrt_exit_149;
LEGUP_F_main_BB_if_then8_i_i_85:
		next_state = LEGUP_F_main_BB_if_then8_i_i_86;
LEGUP_F_main_BB_if_then8_i_i_86:
		next_state = LEGUP_F_main_BB_if_then8_i_i_87;
LEGUP_F_main_BB_if_then8_i_i_87:
		next_state = LEGUP_F_main_BB_if_then8_i_i_88;
LEGUP_F_main_BB_if_then8_i_i_88:
		next_state = LEGUP_F_main_BB_if_then8_i_i_89;
LEGUP_F_main_BB_if_then8_i_i_89:
		next_state = LEGUP_F_main_BB_if_then8_i_i_90;
LEGUP_F_main_BB_if_then8_i_i_90:
		next_state = LEGUP_F_main_BB_if_then8_i_i_91;
LEGUP_F_main_BB_if_then8_i_i_91:
		next_state = LEGUP_F_main_BB_if_then8_i_i_92;
LEGUP_F_main_BB_if_then8_i_i_92:
		next_state = LEGUP_F_main_BB_if_then8_i_i_93;
LEGUP_F_main_BB_if_then8_i_i_93:
		next_state = LEGUP_F_main_BB_if_then8_i_i_94;
LEGUP_F_main_BB_if_then8_i_i_94:
		next_state = LEGUP_F_main_BB_if_then8_i_i_95;
LEGUP_F_main_BB_if_then8_i_i_95:
		next_state = LEGUP_F_main_BB_if_then8_i_i_96;
LEGUP_F_main_BB_if_then8_i_i_96:
		next_state = LEGUP_F_main_BB_if_then8_i_i_97;
LEGUP_F_main_BB_if_then8_i_i_97:
		next_state = LEGUP_F_main_BB_if_then8_i_i_98;
LEGUP_F_main_BB_if_then8_i_i_98:
		next_state = LEGUP_F_main_BB_if_then8_i_i_99;
LEGUP_F_main_BB_if_then8_i_i_99:
		next_state = LEGUP_F_main_BB_if_then8_i_i_100;
LEGUP_F_main_BB_if_then99_i_i_145:
	if ((fsm_stall == 1'd0) && (main_if_then99_i_i_cmp100_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_then101_i_i_146;
	else if ((fsm_stall == 1'd0) && (main_if_then99_i_i_cmp100_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_else111_i_i_147;
LEGUP_F_main_BB_if_then_i_i_67:
		next_state = LEGUP_F_main_BB_if_then_i_i_68;
LEGUP_F_main_BB_if_then_i_i_68:
		next_state = LEGUP_F_main_BB_if_then_i_i_69;
LEGUP_F_main_BB_if_then_i_i_69:
		next_state = LEGUP_F_main_BB_if_then_i_i_70;
LEGUP_F_main_BB_if_then_i_i_70:
		next_state = LEGUP_F_main_BB_if_then_i_i_71;
LEGUP_F_main_BB_if_then_i_i_71:
		next_state = LEGUP_F_main_BB_if_then_i_i_72;
LEGUP_F_main_BB_if_then_i_i_72:
		next_state = LEGUP_F_main_BB_if_then_i_i_73;
LEGUP_F_main_BB_if_then_i_i_73:
		next_state = LEGUP_F_main_BB_if_then_i_i_74;
LEGUP_F_main_BB_if_then_i_i_74:
		next_state = LEGUP_F_main_BB_if_then_i_i_75;
LEGUP_F_main_BB_if_then_i_i_75:
		next_state = LEGUP_F_main_BB_if_then_i_i_76;
LEGUP_F_main_BB_if_then_i_i_76:
		next_state = LEGUP_F_main_BB_if_then_i_i_77;
LEGUP_F_main_BB_if_then_i_i_77:
		next_state = LEGUP_F_main_BB_if_then_i_i_78;
LEGUP_F_main_BB_if_then_i_i_78:
		next_state = LEGUP_F_main_BB_if_then_i_i_79;
LEGUP_F_main_BB_if_then_i_i_79:
		next_state = LEGUP_F_main_BB_if_then_i_i_80;
LEGUP_F_main_BB_if_then_i_i_80:
		next_state = LEGUP_F_main_BB_if_then_i_i_81;
LEGUP_F_main_BB_if_then_i_i_81:
		next_state = LEGUP_F_main_BB_sqrt_exit_149;
LEGUP_F_main_BB_legup_memset_4_exit45_10:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit45_11;
LEGUP_F_main_BB_legup_memset_4_exit45_11:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit45_12;
LEGUP_F_main_BB_legup_memset_4_exit45_12:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit45_13;
LEGUP_F_main_BB_legup_memset_4_exit45_13:
		next_state = LEGUP_F_main_BB_for_body6_i_14;
LEGUP_F_main_BB_legup_memset_4_exit_4:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit_5;
LEGUP_F_main_BB_legup_memset_4_exit_5:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit_6;
LEGUP_F_main_BB_legup_memset_4_exit_6:
		next_state = LEGUP_F_main_BB_legup_memset_4_exit_7;
LEGUP_F_main_BB_legup_memset_4_exit_7:
		next_state = LEGUP_F_main_BB_while_body_i44_8;
LEGUP_F_main_BB_lor_lhs_false_i_i11_49:
	if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i11_or_cond_i_i10 == 1'd1))
		next_state = LEGUP_F_main_BB_if_then20_i_i_50;
	else if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i11_or_cond_i_i10 == 1'd0))
		next_state = LEGUP_F_main_BB_if_then61_i_i_51;
LEGUP_F_main_BB_lor_lhs_false_i_i24_31:
	if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i24_or_cond_i_i23 == 1'd1))
		next_state = LEGUP_F_main_BB_if_then20_i_i30_32;
	else if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i24_or_cond_i_i23 == 1'd0))
		next_state = LEGUP_F_main_BB_if_then61_i_i36_33;
LEGUP_F_main_BB_lor_lhs_false_i_i_141:
	if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_end87_i_i_143;
	else if ((fsm_stall == 1'd0) && (main_lor_lhs_false_i_i_or_cond_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_then70_i_i_142;
LEGUP_F_main_BB_pow_exit38_41:
		next_state = LEGUP_F_main_BB_pow_exit38_42;
LEGUP_F_main_BB_pow_exit38_42:
		next_state = LEGUP_F_main_BB_pow_exit38_43;
LEGUP_F_main_BB_pow_exit38_43:
		next_state = LEGUP_F_main_BB_pow_exit38_44;
LEGUP_F_main_BB_pow_exit38_44:
		next_state = LEGUP_F_main_BB_pow_exit38_45;
LEGUP_F_main_BB_pow_exit38_45:
		next_state = LEGUP_F_main_BB_pow_exit38_46;
LEGUP_F_main_BB_pow_exit38_46:
		next_state = LEGUP_F_main_BB_pow_exit38_47;
LEGUP_F_main_BB_pow_exit38_47:
		next_state = LEGUP_F_main_BB_pow_exit38_48;
LEGUP_F_main_BB_pow_exit38_48:
	if ((fsm_stall == 1'd0) && (main_pow_exit38_cmp11_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_then20_i_i_50;
	else if ((fsm_stall == 1'd0) && (main_pow_exit38_cmp11_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_lor_lhs_false_i_i11_49;
LEGUP_F_main_BB_pow_exit_59:
		next_state = LEGUP_F_main_BB_pow_exit_60;
LEGUP_F_main_BB_pow_exit_60:
		next_state = LEGUP_F_main_BB_pow_exit_61;
LEGUP_F_main_BB_pow_exit_61:
		next_state = LEGUP_F_main_BB_pow_exit_62;
LEGUP_F_main_BB_pow_exit_62:
		next_state = LEGUP_F_main_BB_pow_exit_63;
LEGUP_F_main_BB_pow_exit_63:
		next_state = LEGUP_F_main_BB_pow_exit_64;
LEGUP_F_main_BB_pow_exit_64:
		next_state = LEGUP_F_main_BB_pow_exit_65;
LEGUP_F_main_BB_pow_exit_65:
		next_state = LEGUP_F_main_BB_pow_exit_66;
LEGUP_F_main_BB_pow_exit_66:
	if ((fsm_stall == 1'd0) && (main_pow_exit_cmp_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_then_i_i_67;
	else if ((fsm_stall == 1'd0) && (main_pow_exit_cmp_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_end_i_i_82;
LEGUP_F_main_BB_sobelfilter_exit_185:
		next_state = LEGUP_F_main_BB_sobelfilter_exit_186;
LEGUP_F_main_BB_sobelfilter_exit_186:
		next_state = LEGUP_0;
LEGUP_F_main_BB_sqrt_exit_149:
		next_state = LEGUP_F_main_BB_sqrt_exit_150;
LEGUP_F_main_BB_sqrt_exit_150:
		next_state = LEGUP_F_main_BB_sqrt_exit_151;
LEGUP_F_main_BB_sqrt_exit_151:
		next_state = LEGUP_F_main_BB_sqrt_exit_152;
LEGUP_F_main_BB_sqrt_exit_152:
		next_state = LEGUP_F_main_BB_sqrt_exit_153;
LEGUP_F_main_BB_sqrt_exit_153:
		next_state = LEGUP_F_main_BB_sqrt_exit_154;
LEGUP_F_main_BB_sqrt_exit_154:
	if ((fsm_stall == 1'd0) && (main_sqrt_exit_exitcond4_reg == 1'd1))
		next_state = LEGUP_F_main_BB_contour_exit_i_155;
	else if ((fsm_stall == 1'd0) && (main_sqrt_exit_exitcond4_reg == 1'd0))
		next_state = LEGUP_F_main_BB_for_body_i_i_23;
LEGUP_F_main_BB_while_body48_i_i_136:
	if ((fsm_stall == 1'd0) && (main_while_body48_i_i_cmp50_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_end55_i_i_138;
	else if ((fsm_stall == 1'd0) && (main_while_body48_i_i_cmp50_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_then51_i_i_137;
LEGUP_F_main_BB_while_body65_i_i_140:
	if ((fsm_stall == 1'd0) && (main_while_body65_i_i_cmp67_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_then70_i_i_142;
	else if ((fsm_stall == 1'd0) && (main_while_body65_i_i_cmp67_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_lor_lhs_false_i_i_141;
LEGUP_F_main_BB_while_body65_i_i_preheader_139:
		next_state = LEGUP_F_main_BB_while_body65_i_i_140;
LEGUP_F_main_BB_while_body_i44_8:
		next_state = LEGUP_F_main_BB_while_body_i44_9;
LEGUP_F_main_BB_while_body_i44_9:
	if ((fsm_stall == 1'd0) && (main_while_body_i44_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_exit45_10;
	else if ((fsm_stall == 1'd0) && (main_while_body_i44_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB_while_body_i44_8;
LEGUP_F_main_BB_while_body_i_2:
		next_state = LEGUP_F_main_BB_while_body_i_3;
LEGUP_F_main_BB_while_body_i_3:
	if ((fsm_stall == 1'd0) && (main_while_body_i_exitcond15_reg == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4_exit_4;
	else if ((fsm_stall == 1'd0) && (main_while_body_i_exitcond15_reg == 1'd0))
		next_state = LEGUP_F_main_BB_while_body_i_2;
LEGUP_F_main_BB_while_body_i_i_129:
	if ((fsm_stall == 1'd0) && (main_while_body_i_i_cmp15_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126;
LEGUP_F_main_BB_while_body_i_i_preheader_125:
		next_state = LEGUP_F_main_BB_while_body_i_i_129;
LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126:
		next_state = LEGUP_F_main_BB_for_cond_preheader_i_i_127;
LEGUP_F_main_BB_while_cond_preheader_i_i_124:
	if ((fsm_stall == 1'd0) && (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_while_body_i_i_preheader_125;
	else if ((fsm_stall == 1'd0) && (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_for_cond_preheader_i_i_127;
LEGUP_F_main_BB_while_end94_i_i_144:
	if ((fsm_stall == 1'd0) && (main_while_end94_i_i_cmp96_i_i == 1'd1))
		next_state = LEGUP_F_main_BB_if_end117_i_i_148;
	else if ((fsm_stall == 1'd0) && (main_while_end94_i_i_cmp96_i_i == 1'd0))
		next_state = LEGUP_F_main_BB_if_then99_i_i_145;
LEGUP_function_call_19:
	if ((fsm_stall == 1'd0) && (itConv_finish == 1'd1))
		next_state = LEGUP_F_main_BB_for_body18_i_20;
LEGUP_function_call_21:
	if ((fsm_stall == 1'd0) && (itConv_finish == 1'd1))
		next_state = LEGUP_F_main_BB_for_body18_i_22;
default:
	next_state = cur_state;
endcase

end
assign fsm_stall = 1'd0;
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_entry_1) & (fsm_stall == 1'd0))) begin
		main_while_body_i_indvar20 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_while_body_i_3) & (fsm_stall == 1'd0)) & (main_while_body_i_exitcond15_reg == 1'd0))) */ begin
		main_while_body_i_indvar20 = main_while_body_i_0_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_entry_1) & (fsm_stall == 1'd0))) begin
		main_while_body_i_indvar20_reg <= main_while_body_i_indvar20;
	end
	if ((((cur_state == LEGUP_F_main_BB_while_body_i_3) & (fsm_stall == 1'd0)) & (main_while_body_i_exitcond15_reg == 1'd0))) begin
		main_while_body_i_indvar20_reg <= main_while_body_i_indvar20;
	end
end
always @(*) begin
		main_while_body_i_s_010_i = (`TAG_main_entry_sobel_h_i_a + (4 * {28'd0,main_while_body_i_indvar20_reg}));
end
always @(*) begin
		main_while_body_i_0 = ({1'd0,main_while_body_i_indvar20_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		main_while_body_i_0_reg <= main_while_body_i_0;
	end
end
always @(*) begin
		main_while_body_i_exitcond15 = (main_while_body_i_0 == 32'd8);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		main_while_body_i_exitcond15_reg <= main_while_body_i_exitcond15;
	end
end
assign main_legup_memset_4_exit_1 = `TAG_main_entry_sobel_h_i_a;
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		main_legup_memset_4_exit_1_reg <= main_legup_memset_4_exit_1;
	end
end
assign main_legup_memset_4_exit_2 = (`TAG_main_entry_sobel_h_i_a + (4 * 32'd2));
assign main_legup_memset_4_exit_3 = (`TAG_main_entry_sobel_h_i_a + (4 * 32'd3));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		main_legup_memset_4_exit_3_reg <= main_legup_memset_4_exit_3;
	end
end
assign main_legup_memset_4_exit_4 = (`TAG_main_entry_sobel_h_i_a + (4 * 32'd5));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		main_legup_memset_4_exit_4_reg <= main_legup_memset_4_exit_4;
	end
end
assign main_legup_memset_4_exit_5 = (`TAG_main_entry_sobel_h_i_a + (4 * 32'd6));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		main_legup_memset_4_exit_5_reg <= main_legup_memset_4_exit_5;
	end
end
assign main_legup_memset_4_exit_6 = (`TAG_main_entry_sobel_h_i_a + (4 * 32'd8));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		main_legup_memset_4_exit_6_reg <= main_legup_memset_4_exit_6;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_7) & (fsm_stall == 1'd0))) begin
		main_while_body_i44_indvar17 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_while_body_i44_9) & (fsm_stall == 1'd0)) & (main_while_body_i44_exitcond14_reg == 1'd0))) */ begin
		main_while_body_i44_indvar17 = main_while_body_i44_7_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_7) & (fsm_stall == 1'd0))) begin
		main_while_body_i44_indvar17_reg <= main_while_body_i44_indvar17;
	end
	if ((((cur_state == LEGUP_F_main_BB_while_body_i44_9) & (fsm_stall == 1'd0)) & (main_while_body_i44_exitcond14_reg == 1'd0))) begin
		main_while_body_i44_indvar17_reg <= main_while_body_i44_indvar17;
	end
end
always @(*) begin
		main_while_body_i44_s_010_i39 = (`TAG_main_entry_sobel_v_i_a + (4 * {29'd0,main_while_body_i44_indvar17_reg}));
end
always @(*) begin
		main_while_body_i44_7 = ({1'd0,main_while_body_i44_indvar17_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		main_while_body_i44_7_reg <= main_while_body_i44_7;
	end
end
always @(*) begin
		main_while_body_i44_exitcond14 = (main_while_body_i44_7 == 32'd6);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		main_while_body_i44_exitcond14_reg <= main_while_body_i44_exitcond14;
	end
end
assign main_legup_memset_4_exit45_8 = `TAG_main_entry_sobel_v_i_a;
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		main_legup_memset_4_exit45_8_reg <= main_legup_memset_4_exit45_8;
	end
end
assign main_legup_memset_4_exit45_9 = (`TAG_main_entry_sobel_v_i_a + (4 * 32'd1));
assign main_legup_memset_4_exit45_10 = (`TAG_main_entry_sobel_v_i_a + (4 * 32'd2));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		main_legup_memset_4_exit45_10_reg <= main_legup_memset_4_exit45_10;
	end
end
assign main_legup_memset_4_exit45_11 = (`TAG_main_entry_sobel_v_i_a + (4 * 32'd6));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		main_legup_memset_4_exit45_11_reg <= main_legup_memset_4_exit45_11;
	end
end
assign main_legup_memset_4_exit45_12 = (`TAG_main_entry_sobel_v_i_a + (4 * 32'd7));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		main_legup_memset_4_exit45_12_reg <= main_legup_memset_4_exit45_12;
	end
end
assign main_legup_memset_4_exit45_13 = (`TAG_main_entry_sobel_v_i_a + (4 * 32'd8));
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		main_legup_memset_4_exit45_13_reg <= main_legup_memset_4_exit45_13;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_13) & (fsm_stall == 1'd0))) begin
		main_for_body6_i_14 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_i_15) & (fsm_stall == 1'd0)) & (main_for_body6_i_exitcond13_reg == 1'd0))) */ begin
		main_for_body6_i_14 = main_for_body6_i_15_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_13) & (fsm_stall == 1'd0))) begin
		main_for_body6_i_14_reg <= main_for_body6_i_14;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_i_15) & (fsm_stall == 1'd0)) & (main_for_body6_i_exitcond13_reg == 1'd0))) begin
		main_for_body6_i_14_reg <= main_for_body6_i_14;
	end
end
always @(*) begin
		main_for_body6_i_arrayidx7_i = (1'd0 + (4 * {21'd0,main_for_body6_i_14_reg}));
end
always @(*) begin
		main_for_body6_i_15 = ({1'd0,main_for_body6_i_14_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_for_body6_i_15_reg <= main_for_body6_i_15;
	end
end
always @(*) begin
		main_for_body6_i_exitcond13 = (main_for_body6_i_15 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_for_body6_i_exitcond13_reg <= main_for_body6_i_exitcond13;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_for_inc34_i_156) & (fsm_stall == 1'd0)) & (main_for_inc34_i_exitcond5 == 1'd0))) begin
		main_for_cond15_preheader_i_l_062_i = main_for_inc34_i_29;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_cond15_preheader_i_preheader_184) & (fsm_stall == 1'd0))) */ begin
		main_for_cond15_preheader_i_l_062_i = 32'd0;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_for_inc34_i_156) & (fsm_stall == 1'd0)) & (main_for_inc34_i_exitcond5 == 1'd0))) begin
		main_for_cond15_preheader_i_l_062_i_reg <= main_for_cond15_preheader_i_l_062_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_cond15_preheader_i_preheader_184) & (fsm_stall == 1'd0))) begin
		main_for_cond15_preheader_i_l_062_i_reg <= main_for_cond15_preheader_i_l_062_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_cond15_preheader_i_17) & (fsm_stall == 1'd0))) begin
		main_for_body18_i_i_161_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_contour_exit_i_155) & (fsm_stall == 1'd0)) & (main_contour_exit_i_exitcond == 1'd0))) */ begin
		main_for_body18_i_i_161_i = main_contour_exit_i_28;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_cond15_preheader_i_17) & (fsm_stall == 1'd0))) begin
		main_for_body18_i_i_161_i_reg <= main_for_body18_i_i_161_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_contour_exit_i_155) & (fsm_stall == 1'd0)) & (main_contour_exit_i_exitcond == 1'd0))) begin
		main_for_body18_i_i_161_i_reg <= main_for_body18_i_i_161_i;
	end
end
always @(*) begin
		main_for_body18_i_bit_select64 = main_for_body18_i_i_161_i_reg[21:0];
end
always @(*) begin
		main_for_body18_i_bit_concat65 = {main_for_body18_i_bit_select64[21:0], main_for_body18_i_bit_concat65_bit_select_operand_2[9:0]};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		main_for_body18_i_bit_concat65_reg <= main_for_body18_i_bit_concat65;
	end
end
always @(*) begin
		main_for_body18_i_arraydecay21_i = (`TAG_main_entry_sobel_h_res_i_a + (4096 * main_for_body18_i_i_161_i_reg));
end
always @(*) begin
		main_for_body18_i_arraydecay25_i = (`TAG_main_entry_sobel_v_res_i_a + (4096 * main_for_body18_i_i_161_i_reg));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		main_for_body18_i_arraydecay25_i_reg <= main_for_body18_i_arraydecay25_i;
	end
end
always @(*) begin
		main_for_body18_i_arrayidx19_i = (1'd0 + (4 * main_for_body18_i_bit_concat65));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		main_for_body18_i_arrayidx19_i_reg <= main_for_body18_i_arrayidx19_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body18_i_22) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i_i_012_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_sqrt_exit_154) & (fsm_stall == 1'd0)) & (main_sqrt_exit_exitcond4_reg == 1'd0))) */ begin
		main_for_body_i_i_i_012_i_i = main_sqrt_exit_27_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body18_i_22) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i_i_012_i_i_reg <= main_for_body_i_i_i_012_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_sqrt_exit_154) & (fsm_stall == 1'd0)) & (main_sqrt_exit_exitcond4_reg == 1'd0))) begin
		main_for_body_i_i_i_012_i_i_reg <= main_for_body_i_i_i_012_i_i;
	end
end
always @(*) begin
		main_for_body_i_i_arrayidx_i_i = (`TAG_main_entry_sobel_h_res_i_a + ((4096 * main_for_body18_i_i_161_i_reg) + (4 * main_for_body_i_i_i_012_i_i_reg)));
end
always @(*) begin
		main_for_body_i_i_arrayidx1_i_i = (`TAG_main_entry_sobel_v_res_i_a + ((4096 * main_for_body18_i_i_161_i_reg) + (4 * main_for_body_i_i_i_012_i_i_reg)));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_23)) begin
		main_for_body_i_i_arrayidx1_i_i_reg <= main_for_body_i_i_arrayidx1_i_i;
	end
end
always @(*) begin
		main_for_body_i_i_16 = (main_for_body18_i_bit_concat65_reg + main_for_body_i_i_i_012_i_i_reg);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_23)) begin
		main_for_body_i_i_16_reg <= main_for_body_i_i_16;
	end
end
always @(*) begin
		main_for_body_i_i_arrayidx6_i_i = (1'd0 + (4 * main_for_body_i_i_16_reg));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_24)) begin
		main_for_body_i_i_arrayidx6_i_i_reg <= main_for_body_i_i_arrayidx6_i_i;
	end
end
always @(*) begin
		main_for_body_i_i_17 = memory_controller_1_out_a[31:0];
end
always @(*) begin
	main_for_body_i_i_conv_i_i = main_altfp_sitofp_32_64_0;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_30)) begin
		main_for_body_i_i_conv_i_i_reg <= main_for_body_i_i_conv_i_i;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_30)) begin
		main_for_body_i_i_conv_i_i_reg <= main_for_body_i_i_conv_i_i;
	end
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_48)) begin
		main_for_body_i_i_conv_i_i_reg <= main_pow_exit38_conv2_i_i;
	end
end
always @(*) begin
		main_for_body_i_i_18 = main_for_body_i_i_conv_i_i;
end
always @(*) begin
		main_for_body_i_i_bit_select63 = main_for_body_i_i_18[31:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_30)) begin
		main_for_body_i_i_bit_select63_reg <= main_for_body_i_i_bit_select63;
	end
end
always @(*) begin
		main_for_body_i_i_bit_select61 = main_for_body_i_i_18[62:32];
end
always @(*) begin
		main_for_body_i_i_bit_concat62 = {main_for_body_i_i_bit_concat62_bit_select_operand_0, main_for_body_i_i_bit_select61[30:0]};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_30)) begin
		main_for_body_i_i_bit_concat62_reg <= main_for_body_i_i_bit_concat62;
	end
end
always @(*) begin
		main_for_body_i_i_cmp11_i_i20 = (main_for_body_i_i_bit_concat62 > 32'd2146435072);
end
always @(*) begin
		main_lor_lhs_false_i_i24_cmp12_i_i21 = (main_for_body_i_i_bit_concat62_reg == 32'd2146435072);
end
always @(*) begin
		main_lor_lhs_false_i_i24_cmp13_i_i22 = (main_for_body_i_i_bit_select63_reg != 32'd0);
end
always @(*) begin
		main_lor_lhs_false_i_i24_or_cond_i_i23 = (main_lor_lhs_false_i_i24_cmp12_i_i21 & main_lor_lhs_false_i_i24_cmp13_i_i22);
end
always @(*) begin
		main_if_then20_i_i30_sub_i_i27 = (main_for_body_i_i_bit_concat62_reg + -32'd1072693248);
end
always @(*) begin
		main_if_then20_i_i30_or21_i_i28 = (main_if_then20_i_i30_sub_i_i27 | main_for_body_i_i_bit_select63_reg);
end
always @(*) begin
		main_if_then20_i_i30_cmp22_i_i29 = (main_if_then20_i_i30_or21_i_i28 == 32'd0);
end
always @(*) begin
		main_if_then20_i_i30_1 = (main_if_then20_i_i30_cmp22_i_i29 ? 64'h3FF0000000000000 : 64'h7FF8000000000000);
end
always @(*) begin
	main_if_then61_i_i36_mul_i_i35 = main_altfp_multiply_64_0;
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_then20_i_i30_32) & (fsm_stall == 1'd0))) begin
		main_pow_exit38_retval_0_i_i37 = main_if_then20_i_i30_1;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then61_i_i36_40) & (fsm_stall == 1'd0))) */ begin
		main_pow_exit38_retval_0_i_i37 = main_if_then61_i_i36_mul_i_i35;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_then20_i_i30_32) & (fsm_stall == 1'd0))) begin
		main_pow_exit38_retval_0_i_i37_reg <= main_pow_exit38_retval_0_i_i37;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then61_i_i36_40) & (fsm_stall == 1'd0))) begin
		main_pow_exit38_retval_0_i_i37_reg <= main_pow_exit38_retval_0_i_i37;
	end
end
always @(*) begin
		main_pow_exit38_19 = memory_controller_1_out_a[31:0];
end
always @(*) begin
	main_pow_exit38_conv2_i_i = main_altfp_sitofp_32_64_0;
end
always @(*) begin
	main_pow_exit38_conv2_i_i_reg = main_for_body_i_i_conv_i_i_reg;
end
always @(*) begin
		main_pow_exit38_20 = main_pow_exit38_conv2_i_i;
end
always @(*) begin
		main_pow_exit38_bit_select60 = main_pow_exit38_20[31:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_48)) begin
		main_pow_exit38_bit_select60_reg <= main_pow_exit38_bit_select60;
	end
end
always @(*) begin
		main_pow_exit38_bit_select58 = main_pow_exit38_20[62:32];
end
always @(*) begin
		main_pow_exit38_bit_concat59 = {main_pow_exit38_bit_concat59_bit_select_operand_0, main_pow_exit38_bit_select58[30:0]};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_48)) begin
		main_pow_exit38_bit_concat59_reg <= main_pow_exit38_bit_concat59;
	end
end
always @(*) begin
		main_pow_exit38_cmp11_i_i = (main_pow_exit38_bit_concat59 > 32'd2146435072);
end
always @(*) begin
		main_lor_lhs_false_i_i11_cmp12_i_i = (main_pow_exit38_bit_concat59_reg == 32'd2146435072);
end
always @(*) begin
		main_lor_lhs_false_i_i11_cmp13_i_i9 = (main_pow_exit38_bit_select60_reg != 32'd0);
end
always @(*) begin
		main_lor_lhs_false_i_i11_or_cond_i_i10 = (main_lor_lhs_false_i_i11_cmp12_i_i & main_lor_lhs_false_i_i11_cmp13_i_i9);
end
always @(*) begin
		main_if_then20_i_i_sub_i_i12 = (main_pow_exit38_bit_concat59_reg + -32'd1072693248);
end
always @(*) begin
		main_if_then20_i_i_or21_i_i = (main_if_then20_i_i_sub_i_i12 | main_pow_exit38_bit_select60_reg);
end
always @(*) begin
		main_if_then20_i_i_cmp22_i_i = (main_if_then20_i_i_or21_i_i == 32'd0);
end
always @(*) begin
		main_if_then20_i_i_46 = (main_if_then20_i_i_cmp22_i_i ? 64'h3FF0000000000000 : 64'h7FF8000000000000);
end
always @(*) begin
	main_if_then61_i_i_mul_i_i14 = main_altfp_multiply_64_0;
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_then20_i_i_50) & (fsm_stall == 1'd0))) begin
		main_pow_exit_retval_0_i_i15 = main_if_then20_i_i_46;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then61_i_i_58) & (fsm_stall == 1'd0))) */ begin
		main_pow_exit_retval_0_i_i15 = main_if_then61_i_i_mul_i_i14;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_then20_i_i_50) & (fsm_stall == 1'd0))) begin
		main_pow_exit_retval_0_i_i15_reg <= main_pow_exit_retval_0_i_i15;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then61_i_i_58) & (fsm_stall == 1'd0))) begin
		main_pow_exit_retval_0_i_i15_reg <= main_pow_exit_retval_0_i_i15;
	end
end
always @(*) begin
	main_pow_exit_add_i_i = main_altfp_add_64_0;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_66)) begin
		main_pow_exit_add_i_i_reg <= main_pow_exit_add_i_i;
	end
end
always @(*) begin
		main_pow_exit_21 = main_pow_exit_add_i_i;
end
always @(*) begin
		main_pow_exit_bit_select57 = main_pow_exit_21[63:32];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_66)) begin
		main_pow_exit_bit_select57_reg <= main_pow_exit_bit_select57;
	end
end
always @(*) begin
		main_pow_exit_bit_select56 = main_pow_exit_21[31:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_66)) begin
		main_pow_exit_bit_select56_reg <= main_pow_exit_bit_select56;
	end
end
always @(*) begin
		main_pow_exit_bit_select54 = main_pow_exit_21[62:52];
end
always @(*) begin
		main_pow_exit_bit_select52 = main_pow_exit_21[62:32];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_66)) begin
		main_pow_exit_bit_select52_reg <= main_pow_exit_bit_select52;
	end
end
always @(*) begin
		main_pow_exit_bit_select51 = main_pow_exit_21[63];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_66)) begin
		main_pow_exit_bit_select51_reg <= main_pow_exit_bit_select51;
	end
end
always @(*) begin
		main_pow_exit_bit_concat55 = {{main_pow_exit_bit_concat55_bit_select_operand_0, main_pow_exit_bit_select54[10:0]}, main_pow_exit_bit_concat55_bit_select_operand_4[19:0]};
end
always @(*) begin
		main_pow_exit_cmp_i_i = (main_pow_exit_bit_concat55 == 32'd2146435072);
end
always @(*) begin
	main_if_then_i_i_mul_i_i = main_altfp_multiply_64_0;
end
always @(*) begin
	main_if_then_i_i_add_i_i1 = main_altfp_add_64_0;
end
always @(*) begin
		main_if_end_i_i_cmp2_i_i = ($signed(main_pow_exit_bit_select57_reg) < $signed({29'd0,main_if_end_i_i_cmp2_i_i_op1_temp}));
end
always @(*) begin
		main_if_then3_i_i_bit_concat53 = {main_if_then3_i_i_bit_concat53_bit_select_operand_0, main_pow_exit_bit_select52_reg[30:0]};
end
always @(*) begin
		main_if_then3_i_i_or_i_i = (main_if_then3_i_i_bit_concat53 | main_pow_exit_bit_select56_reg);
end
always @(*) begin
		main_if_then3_i_i_cmp5_i_i = (main_if_then3_i_i_or_i_i == 32'd0);
end
always @(*) begin
	main_if_then8_i_i_sub_i_i2 = main_altfp_subtract_64_0;
end
always @(*) begin
	main_if_then8_i_i_div_i_i = main_altfp_divide_64_0;
end
always @(*) begin
		main_if_end12_i_i_shr_i_i = ($signed(main_pow_exit_bit_select57_reg) >>> 32'd20);
end
always @(*) begin
		main_if_end12_i_i_cmp13_i_i = ($signed(main_if_end12_i_i_shr_i_i) == 32'd0);
end
always @(*) begin
		main_while_cond_preheader_i_i_cmp15265_i_i = (main_pow_exit_bit_select57_reg == 32'd0);
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_s = (32'd0 - main_while_body_i_i_22_reg);
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_b = main_while_cond_for_cond_preheader_crit_edge_i_i_s[26:0];
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0 = {main_while_body_i_i_bit_select49_reg[28:0], main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0_bit_select_operand_2[2:0]};
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1 = {main_while_cond_for_cond_preheader_crit_edge_i_i_b[26:0], main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1_bit_select_operand_2[4:0]};
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2 = {main_while_body_i_i_bit_select45_reg[30:0], main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2_bit_select_operand_2};
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_s_var3 = (main_while_body_i_i_22_reg + main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2);
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_s_var4 = (main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0 + main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1);
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_n = (main_while_cond_for_cond_preheader_crit_edge_i_i_s_var3 + $signed(-32'd20));
end
always @(*) begin
		main_while_cond_for_cond_preheader_crit_edge_i_i_n_var5 = (main_while_cond_for_cond_preheader_crit_edge_i_i_n + main_while_cond_for_cond_preheader_crit_edge_i_i_s_var4);
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_m_0_lcssa_i_i = 32'd1;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) */ begin
		main_for_cond_preheader_i_i_m_0_lcssa_i_i = main_while_cond_for_cond_preheader_crit_edge_i_i_n_var5;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_m_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_m_0_lcssa_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) begin
		main_for_cond_preheader_i_i_m_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_m_0_lcssa_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_ix0_0_lcssa_i_i = main_pow_exit_bit_select57_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) */ begin
		main_for_cond_preheader_i_i_ix0_0_lcssa_i_i = main_while_body_i_i_bit_concat42_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_ix0_0_lcssa_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) begin
		main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_ix0_0_lcssa_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_ix1_0_lcssa_i_i = main_pow_exit_bit_select56_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) */ begin
		main_for_cond_preheader_i_i_ix1_0_lcssa_i_i = main_while_body_i_i_bit_concat40_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_cond_preheader_i_i_124) & (fsm_stall == 1'd0)) & (main_while_cond_preheader_i_i_cmp15265_i_i == 1'd0))) begin
		main_for_cond_preheader_i_i_ix1_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_ix1_0_lcssa_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_while_cond_for_cond_preheader_crit_edge_i_i_126) & (fsm_stall == 1'd0))) begin
		main_for_cond_preheader_i_i_ix1_0_lcssa_i_i_reg <= main_for_cond_preheader_i_i_ix1_0_lcssa_i_i;
	end
end
always @(*) begin
		main_for_cond_preheader_i_i_bit_select43 = main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg[20];
end
always @(*) begin
		main_for_cond_preheader_i_i_bit_concat44 = {{main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_0[10:0], main_for_cond_preheader_i_i_bit_select43}, main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_4[19:0]};
end
always @(*) begin
		main_for_cond_preheader_i_i_cmp20261_i_i = (main_for_cond_preheader_i_i_bit_concat44 == 32'd0);
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body_i_i_preheader_125) & (fsm_stall == 1'd0))) begin
		main_while_body_i_i_22 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_while_body_i_i_129) & (fsm_stall == 1'd0)) & (main_while_body_i_i_cmp15_i_i == 1'd1))) */ begin
		main_while_body_i_i_22 = main_while_body_i_i_indvar_next;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body_i_i_preheader_125) & (fsm_stall == 1'd0))) begin
		main_while_body_i_i_22_reg <= main_while_body_i_i_22;
	end
	if ((((cur_state == LEGUP_F_main_BB_while_body_i_i_129) & (fsm_stall == 1'd0)) & (main_while_body_i_i_cmp15_i_i == 1'd1))) begin
		main_while_body_i_i_22_reg <= main_while_body_i_i_22;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body_i_i_preheader_125) & (fsm_stall == 1'd0))) begin
		main_while_body_i_i_ix1_0266_i_i = main_pow_exit_bit_select56_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_while_body_i_i_129) & (fsm_stall == 1'd0)) & (main_while_body_i_i_cmp15_i_i == 1'd1))) */ begin
		main_while_body_i_i_ix1_0266_i_i = main_while_body_i_i_bit_concat40;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body_i_i_preheader_125) & (fsm_stall == 1'd0))) begin
		main_while_body_i_i_ix1_0266_i_i_reg <= main_while_body_i_i_ix1_0266_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_while_body_i_i_129) & (fsm_stall == 1'd0)) & (main_while_body_i_i_cmp15_i_i == 1'd1))) begin
		main_while_body_i_i_ix1_0266_i_i_reg <= main_while_body_i_i_ix1_0266_i_i;
	end
end
always @(*) begin
		main_while_body_i_i_bit_select49 = main_while_body_i_i_22_reg[28:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_i_129)) begin
		main_while_body_i_i_bit_select49_reg <= main_while_body_i_i_bit_select49;
	end
end
always @(*) begin
		main_while_body_i_i_bit_select45 = main_while_body_i_i_22_reg[30:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_i_129)) begin
		main_while_body_i_i_bit_select45_reg <= main_while_body_i_i_bit_select45;
	end
end
always @(*) begin
		main_while_body_i_i_bit_select41 = main_while_body_i_i_ix1_0266_i_i_reg[31:11];
end
always @(*) begin
		main_while_body_i_i_bit_select39 = main_while_body_i_i_ix1_0266_i_i_reg[10:0];
end
always @(*) begin
		main_while_body_i_i_bit_concat42 = {main_while_body_i_i_bit_concat42_bit_select_operand_0[10:0], main_while_body_i_i_bit_select41[20:0]};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_i_129)) begin
		main_while_body_i_i_bit_concat42_reg <= main_while_body_i_i_bit_concat42;
	end
end
always @(*) begin
		main_while_body_i_i_bit_concat40 = {main_while_body_i_i_bit_select39[10:0], main_while_body_i_i_bit_concat40_bit_select_operand_2[20:0]};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body_i_i_129)) begin
		main_while_body_i_i_bit_concat40_reg <= main_while_body_i_i_bit_concat40;
	end
end
always @(*) begin
		main_while_body_i_i_cmp15_i_i = (main_while_body_i_i_bit_concat42 == 32'd0);
end
always @(*) begin
		main_while_body_i_i_indvar_next = (main_while_body_i_i_22_reg + 32'd1);
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body_i_i4_preheader_128) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i4_i_0263_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body_i_i4_130) & (fsm_stall == 1'd0)) & (main_for_body_i_i4_cmp20_i_i == 1'd1))) */ begin
		main_for_body_i_i4_i_0263_i_i = main_for_body_i_i4_23;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body_i_i4_preheader_128) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i4_i_0263_i_i_reg <= main_for_body_i_i4_i_0263_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body_i_i4_130) & (fsm_stall == 1'd0)) & (main_for_body_i_i4_cmp20_i_i == 1'd1))) begin
		main_for_body_i_i4_i_0263_i_i_reg <= main_for_body_i_i4_i_0263_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body_i_i4_preheader_128) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i4_ix0_1262_i_i = main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body_i_i4_130) & (fsm_stall == 1'd0)) & (main_for_body_i_i4_cmp20_i_i == 1'd1))) */ begin
		main_for_body_i_i4_ix0_1262_i_i = main_for_body_i_i4_bit_concat38;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body_i_i4_preheader_128) & (fsm_stall == 1'd0))) begin
		main_for_body_i_i4_ix0_1262_i_i_reg <= main_for_body_i_i4_ix0_1262_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body_i_i4_130) & (fsm_stall == 1'd0)) & (main_for_body_i_i4_cmp20_i_i == 1'd1))) begin
		main_for_body_i_i4_ix0_1262_i_i_reg <= main_for_body_i_i4_ix0_1262_i_i;
	end
end
always @(*) begin
		main_for_body_i_i4_bit_select37 = main_for_body_i_i4_ix0_1262_i_i_reg[30:0];
end
always @(*) begin
		main_for_body_i_i4_bit_select35 = main_for_body_i_i4_ix0_1262_i_i_reg[19];
end
always @(*) begin
		main_for_body_i_i4_bit_concat38 = {main_for_body_i_i4_bit_select37[30:0], main_for_body_i_i4_bit_concat38_bit_select_operand_2};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i4_130)) begin
		main_for_body_i_i4_bit_concat38_reg <= main_for_body_i_i4_bit_concat38;
	end
end
always @(*) begin
		main_for_body_i_i4_23 = (main_for_body_i_i4_i_0263_i_i_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i4_130)) begin
		main_for_body_i_i4_23_reg <= main_for_body_i_i4_23;
	end
end
always @(*) begin
		main_for_body_i_i4_bit_concat36 = {{main_for_body_i_i4_bit_concat36_bit_select_operand_0[10:0], main_for_body_i_i4_bit_select35}, main_for_body_i_i4_bit_concat36_bit_select_operand_4[19:0]};
end
always @(*) begin
		main_for_body_i_i4_cmp20_i_i = (main_for_body_i_i4_bit_concat36 == 32'd0);
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_for_cond_preheader_i_i_127) & (fsm_stall == 1'd0)) & (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd0))) begin
		main_for_end_i_i_i_0_lcssa_i_i = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_end_i_i_loopexit_131) & (fsm_stall == 1'd0))) */ begin
		main_for_end_i_i_i_0_lcssa_i_i = main_for_body_i_i4_23_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_for_cond_preheader_i_i_127) & (fsm_stall == 1'd0)) & (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd0))) begin
		main_for_end_i_i_i_0_lcssa_i_i_reg <= main_for_end_i_i_i_0_lcssa_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_end_i_i_loopexit_131) & (fsm_stall == 1'd0))) begin
		main_for_end_i_i_i_0_lcssa_i_i_reg <= main_for_end_i_i_i_0_lcssa_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_for_cond_preheader_i_i_127) & (fsm_stall == 1'd0)) & (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd0))) begin
		main_for_end_i_i_ix0_1_lcssa_i_i = main_for_cond_preheader_i_i_ix0_0_lcssa_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_end_i_i_loopexit_131) & (fsm_stall == 1'd0))) */ begin
		main_for_end_i_i_ix0_1_lcssa_i_i = main_for_body_i_i4_bit_concat38_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_for_cond_preheader_i_i_127) & (fsm_stall == 1'd0)) & (main_for_cond_preheader_i_i_cmp20261_i_i == 1'd0))) begin
		main_for_end_i_i_ix0_1_lcssa_i_i_reg <= main_for_end_i_i_ix0_1_lcssa_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_end_i_i_loopexit_131) & (fsm_stall == 1'd0))) begin
		main_for_end_i_i_ix0_1_lcssa_i_i_reg <= main_for_end_i_i_ix0_1_lcssa_i_i;
	end
end
always @(*) begin
		main_for_end_i_i_sub23_i_i = (main_for_cond_preheader_i_i_m_0_lcssa_i_i_reg - main_for_end_i_i_i_0_lcssa_i_i_reg);
end
always @(*) begin
		main_for_end_i_i_sub24_i_i = (32'd32 - main_for_end_i_i_i_0_lcssa_i_i_reg);
end
always @(*) begin
		main_for_end_i_i_shr25_i_i = (main_for_cond_preheader_i_i_ix1_0_lcssa_i_i_reg >>> (main_for_end_i_i_sub24_i_i % 32));
end
always @(*) begin
		main_for_end_i_i_or26_i_i = (main_for_end_i_i_shr25_i_i | main_for_end_i_i_ix0_1_lcssa_i_i_reg);
end
always @(*) begin
		main_for_end_i_i_shl27_i_i = (main_for_cond_preheader_i_i_ix1_0_lcssa_i_i_reg <<< (main_for_end_i_i_i_0_lcssa_i_i_reg % 32));
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_ix1_1_i_i = main_pow_exit_bit_select56_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) */ begin
		main_if_end28_i_i_ix1_1_i_i = main_for_end_i_i_shl27_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_ix1_1_i_i_reg <= main_if_end28_i_i_ix1_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) begin
		main_if_end28_i_i_ix1_1_i_i_reg <= main_if_end28_i_i_ix1_1_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_ix0_2_i_i = main_pow_exit_bit_select57_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) */ begin
		main_if_end28_i_i_ix0_2_i_i = main_for_end_i_i_or26_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_ix0_2_i_i_reg <= main_if_end28_i_i_ix0_2_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) begin
		main_if_end28_i_i_ix0_2_i_i_reg <= main_if_end28_i_i_ix0_2_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_m_1_i_i = {{20{main_if_end12_i_i_shr_i_i[11]}},main_if_end12_i_i_shr_i_i};
	end
	else /* if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) */ begin
		main_if_end28_i_i_m_1_i_i = main_for_end_i_i_sub23_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end12_i_i_123) & (fsm_stall == 1'd0)) & (main_if_end12_i_i_cmp13_i_i == 1'd0))) begin
		main_if_end28_i_i_m_1_i_i_reg <= main_if_end28_i_i_m_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_for_end_i_i_132) & (fsm_stall == 1'd0))) begin
		main_if_end28_i_i_m_1_i_i_reg <= main_if_end28_i_i_m_1_i_i;
	end
end
always @(*) begin
		main_if_end28_i_i_bit_select30 = main_if_end28_i_i_ix1_1_i_i_reg[31];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end28_i_i_133)) begin
		main_if_end28_i_i_bit_select30_reg <= main_if_end28_i_i_bit_select30;
	end
end
always @(*) begin
		main_if_end28_i_i_bit_select29 = main_if_end28_i_i_ix0_2_i_i_reg[19:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end28_i_i_133)) begin
		main_if_end28_i_i_bit_select29_reg <= main_if_end28_i_i_bit_select29;
	end
end
always @(*) begin
		main_if_end28_i_i_bit_select27 = main_if_end28_i_i_ix1_1_i_i_reg[30:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end28_i_i_133)) begin
		main_if_end28_i_i_bit_select27_reg <= main_if_end28_i_i_bit_select27;
	end
end
always @(*) begin
		main_if_end28_i_i_sub29_i_i = (main_if_end28_i_i_m_1_i_i_reg + $signed(-32'd1023));
end
always @(*) begin
		main_if_end28_i_i_bit_select32 = main_if_end28_i_i_sub29_i_i[0];
end
always @(*) begin
		main_if_end28_i_i_bit_select2 = main_if_end28_i_i_sub29_i_i[12:1];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end28_i_i_133)) begin
		main_if_end28_i_i_bit_select2_reg <= main_if_end28_i_i_bit_select2;
	end
end
always @(*) begin
		main_if_end28_i_i_bit_concat34 = {main_if_end28_i_i_bit_concat34_bit_select_operand_0[11:0], main_if_end28_i_i_bit_select29[19:0]};
end
always @(*) begin
		main_if_end28_i_i_bit_concat33 = {main_if_end28_i_i_bit_concat33_bit_select_operand_0[30:0], main_if_end28_i_i_bit_select32};
end
always @(*) begin
		main_if_end28_i_i_tobool_i_i = (main_if_end28_i_i_bit_concat33 == 32'd0);
end
always @(*) begin
		main_if_then33_i_i_bit_concat31 = {{main_if_then33_i_i_bit_concat31_bit_select_operand_0[10:0], main_if_end28_i_i_bit_select29_reg[19:0]}, main_if_end28_i_i_bit_select30_reg};
end
always @(*) begin
		main_if_then33_i_i_bit_concat28 = {main_if_end28_i_i_bit_select27_reg[30:0], main_if_then33_i_i_bit_concat28_bit_select_operand_2};
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end28_i_i_133) & (fsm_stall == 1'd0)) & (main_if_end28_i_i_tobool_i_i == 1'd1))) begin
		main_if_end39_i_i_ix1_2_i_i = main_if_end28_i_i_ix1_1_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then33_i_i_134) & (fsm_stall == 1'd0))) */ begin
		main_if_end39_i_i_ix1_2_i_i = main_if_then33_i_i_bit_concat28;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end28_i_i_133) & (fsm_stall == 1'd0)) & (main_if_end28_i_i_tobool_i_i == 1'd1))) begin
		main_if_end39_i_i_ix1_2_i_i_reg <= main_if_end39_i_i_ix1_2_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then33_i_i_134) & (fsm_stall == 1'd0))) begin
		main_if_end39_i_i_ix1_2_i_i_reg <= main_if_end39_i_i_ix1_2_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end28_i_i_133) & (fsm_stall == 1'd0)) & (main_if_end28_i_i_tobool_i_i == 1'd1))) begin
		main_if_end39_i_i_ix0_3_i_i = main_if_end28_i_i_bit_concat34;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then33_i_i_134) & (fsm_stall == 1'd0))) */ begin
		main_if_end39_i_i_ix0_3_i_i = main_if_then33_i_i_bit_concat31;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_if_end28_i_i_133) & (fsm_stall == 1'd0)) & (main_if_end28_i_i_tobool_i_i == 1'd1))) begin
		main_if_end39_i_i_ix0_3_i_i_reg <= main_if_end39_i_i_ix0_3_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then33_i_i_134) & (fsm_stall == 1'd0))) begin
		main_if_end39_i_i_ix0_3_i_i_reg <= main_if_end39_i_i_ix0_3_i_i;
	end
end
always @(*) begin
		main_if_end39_i_i_bit_select25 = main_if_end39_i_i_ix1_2_i_i_reg[31];
end
always @(*) begin
		main_if_end39_i_i_bit_select24 = main_if_end39_i_i_ix0_3_i_i_reg[30:0];
end
always @(*) begin
		main_if_end39_i_i_bit_select22 = main_if_end39_i_i_ix1_2_i_i_reg[30:0];
end
always @(*) begin
		main_if_end39_i_i_bit_concat26 = {main_if_end39_i_i_bit_select24[30:0], main_if_end39_i_i_bit_select25};
end
always @(*) begin
		main_if_end39_i_i_bit_concat23 = {main_if_end39_i_i_bit_select22[30:0], main_if_end39_i_i_bit_concat23_bit_select_operand_2};
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_indvar1 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_indvar1 = main_if_end55_i_i_24;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_indvar1_reg <= main_while_body48_i_i_indvar1;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_indvar1_reg <= main_while_body48_i_i_indvar1;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix1_3259_i_i = main_if_end39_i_i_bit_concat23;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_ix1_3259_i_i = main_if_end55_i_i_bit_concat16;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix1_3259_i_i_reg <= main_while_body48_i_i_ix1_3259_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_ix1_3259_i_i_reg <= main_while_body48_i_i_ix1_3259_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_q_0258_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_q_0258_i_i = main_if_end55_i_i_q_1_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_q_0258_i_i_reg <= main_while_body48_i_i_q_0258_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_q_0258_i_i_reg <= main_while_body48_i_i_q_0258_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_s0_0257_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_s0_0257_i_i = main_if_end55_i_i_s0_1_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_s0_0257_i_i_reg <= main_while_body48_i_i_s0_0257_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_s0_0257_i_i_reg <= main_while_body48_i_i_s0_0257_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix0_4256_i_i = main_if_end39_i_i_bit_concat26;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_ix0_4256_i_i = main_if_end55_i_i_bit_concat21;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix0_4256_i_i_reg <= main_while_body48_i_i_ix0_4256_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_ix0_4256_i_i_reg <= main_while_body48_i_i_ix0_4256_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix1_3_in255_i_i = main_if_end39_i_i_ix1_2_i_i_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_ix1_3_in255_i_i = main_while_body48_i_i_ix1_3259_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_ix1_3_in255_i_i_reg <= main_while_body48_i_i_ix1_3_in255_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_ix1_3_in255_i_i_reg <= main_while_body48_i_i_ix1_3_in255_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_r_0254_i_i = 32'd2097152;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) */ begin
		main_while_body48_i_i_r_0254_i_i = main_if_end55_i_i_bit_concat18;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_end39_i_i_135) & (fsm_stall == 1'd0))) begin
		main_while_body48_i_i_r_0254_i_i_reg <= main_while_body48_i_i_r_0254_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end55_i_i_138) & (fsm_stall == 1'd0)) & (main_if_end55_i_i_exitcond2 == 1'd0))) begin
		main_while_body48_i_i_r_0254_i_i_reg <= main_while_body48_i_i_r_0254_i_i;
	end
end
always @(*) begin
		main_while_body48_i_i_bit_select20 = main_while_body48_i_i_ix1_3_in255_i_i_reg[30];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body48_i_i_136)) begin
		main_while_body48_i_i_bit_select20_reg <= main_while_body48_i_i_bit_select20;
	end
end
always @(*) begin
		main_while_body48_i_i_bit_select17 = main_while_body48_i_i_r_0254_i_i_reg[31:1];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body48_i_i_136)) begin
		main_while_body48_i_i_bit_select17_reg <= main_while_body48_i_i_bit_select17;
	end
end
always @(*) begin
		main_while_body48_i_i_bit_select15 = main_while_body48_i_i_ix1_3259_i_i_reg[30:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body48_i_i_136)) begin
		main_while_body48_i_i_bit_select15_reg <= main_while_body48_i_i_bit_select15;
	end
end
always @(*) begin
		main_while_body48_i_i_add49_i_i = (main_while_body48_i_i_s0_0257_i_i_reg + main_while_body48_i_i_r_0254_i_i_reg);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body48_i_i_136)) begin
		main_while_body48_i_i_add49_i_i_reg <= main_while_body48_i_i_add49_i_i;
	end
end
always @(*) begin
		main_while_body48_i_i_cmp50_i_i = ($signed(main_while_body48_i_i_ix0_4256_i_i_reg) < $signed(main_while_body48_i_i_add49_i_i));
end
always @(*) begin
		main_if_then51_i_i_add52_i_i = (main_while_body48_i_i_add49_i_i_reg + main_while_body48_i_i_r_0254_i_i_reg);
end
always @(*) begin
		main_if_then51_i_i_sub53_i_i = (main_while_body48_i_i_ix0_4256_i_i_reg - main_while_body48_i_i_add49_i_i_reg);
end
always @(*) begin
		main_if_then51_i_i_add54_i_i = (main_while_body48_i_i_q_0258_i_i_reg + main_while_body48_i_i_r_0254_i_i_reg);
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_ix0_5_i_i = main_while_body48_i_i_ix0_4256_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) */ begin
		main_if_end55_i_i_ix0_5_i_i = main_if_then51_i_i_sub53_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_ix0_5_i_i_reg <= main_if_end55_i_i_ix0_5_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) begin
		main_if_end55_i_i_ix0_5_i_i_reg <= main_if_end55_i_i_ix0_5_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_s0_1_i_i = main_while_body48_i_i_s0_0257_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) */ begin
		main_if_end55_i_i_s0_1_i_i = main_if_then51_i_i_add52_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_s0_1_i_i_reg <= main_if_end55_i_i_s0_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) begin
		main_if_end55_i_i_s0_1_i_i_reg <= main_if_end55_i_i_s0_1_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_q_1_i_i = main_while_body48_i_i_q_0258_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) */ begin
		main_if_end55_i_i_q_1_i_i = main_if_then51_i_i_add54_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_body48_i_i_136) & (fsm_stall == 1'd0)) & (main_while_body48_i_i_cmp50_i_i == 1'd1))) begin
		main_if_end55_i_i_q_1_i_i_reg <= main_if_end55_i_i_q_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then51_i_i_137) & (fsm_stall == 1'd0))) begin
		main_if_end55_i_i_q_1_i_i_reg <= main_if_end55_i_i_q_1_i_i;
	end
end
always @(*) begin
		main_if_end55_i_i_bit_select19 = main_if_end55_i_i_ix0_5_i_i_reg[30:0];
end
always @(*) begin
		main_if_end55_i_i_bit_concat21 = {main_if_end55_i_i_bit_select19[30:0], main_while_body48_i_i_bit_select20_reg};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end55_i_i_138)) begin
		main_if_end55_i_i_bit_concat21_reg <= main_if_end55_i_i_bit_concat21;
	end
end
always @(*) begin
		main_if_end55_i_i_bit_concat18 = {main_if_end55_i_i_bit_concat18_bit_select_operand_0, main_while_body48_i_i_bit_select17_reg[30:0]};
end
always @(*) begin
		main_if_end55_i_i_bit_concat16 = {main_while_body48_i_i_bit_select15_reg[30:0], main_if_end55_i_i_bit_concat16_bit_select_operand_2};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end55_i_i_138)) begin
		main_if_end55_i_i_bit_concat16_reg <= main_if_end55_i_i_bit_concat16;
	end
end
always @(*) begin
		main_if_end55_i_i_24 = (main_while_body48_i_i_indvar1_reg + 32'd1);
end
always @(*) begin
		main_if_end55_i_i_exitcond2 = (main_if_end55_i_i_24 == 32'd22);
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_indvar3 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_indvar3 = main_if_end87_i_i_25;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_indvar3_reg <= main_while_body65_i_i_indvar3;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_indvar3_reg <= main_while_body65_i_i_indvar3;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_s0_2252_i_i = main_if_end55_i_i_s0_1_i_i_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_s0_2252_i_i = main_if_end87_i_i_s0_4_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_s0_2252_i_i_reg <= main_while_body65_i_i_s0_2252_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_s0_2252_i_i_reg <= main_while_body65_i_i_s0_2252_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_ix0_6251_i_i = main_if_end55_i_i_bit_concat21_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_ix0_6251_i_i = main_if_end87_i_i_bit_concat12;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_ix0_6251_i_i_reg <= main_while_body65_i_i_ix0_6251_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_ix0_6251_i_i_reg <= main_while_body65_i_i_ix0_6251_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_q1_0250_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_q1_0250_i_i = main_if_end87_i_i_q1_1_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_q1_0250_i_i_reg <= main_while_body65_i_i_q1_0250_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_q1_0250_i_i_reg <= main_while_body65_i_i_q1_0250_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_ix1_4249_i_i = main_if_end55_i_i_bit_concat16_reg;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_ix1_4249_i_i = main_if_end87_i_i_bit_concat9;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_ix1_4249_i_i_reg <= main_while_body65_i_i_ix1_4249_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_ix1_4249_i_i_reg <= main_while_body65_i_i_ix1_4249_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_s1_0248_i_i = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_s1_0248_i_i = main_if_end87_i_i_s1_1_i_i_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_s1_0248_i_i_reg <= main_while_body65_i_i_s1_0248_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_s1_0248_i_i_reg <= main_while_body65_i_i_s1_0248_i_i;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_r_1247_i_i = -32'd2147483648;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) */ begin
		main_while_body65_i_i_r_1247_i_i = main_if_end87_i_i_bit_concat7;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_while_body65_i_i_preheader_139) & (fsm_stall == 1'd0))) begin
		main_while_body65_i_i_r_1247_i_i_reg <= main_while_body65_i_i_r_1247_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_end87_i_i_143) & (fsm_stall == 1'd0)) & (main_if_end87_i_i_exitcond3 == 1'd0))) begin
		main_while_body65_i_i_r_1247_i_i_reg <= main_while_body65_i_i_r_1247_i_i;
	end
end
always @(*) begin
		main_while_body65_i_i_bit_select6 = main_while_body65_i_i_r_1247_i_i_reg[31:1];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body65_i_i_140)) begin
		main_while_body65_i_i_bit_select6_reg <= main_while_body65_i_i_bit_select6;
	end
end
always @(*) begin
		main_while_body65_i_i_add66_i_i = (main_while_body65_i_i_s1_0248_i_i_reg + main_while_body65_i_i_r_1247_i_i_reg);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body65_i_i_140)) begin
		main_while_body65_i_i_add66_i_i_reg <= main_while_body65_i_i_add66_i_i;
	end
end
always @(*) begin
		main_while_body65_i_i_bit_select14 = main_while_body65_i_i_add66_i_i[31];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_while_body65_i_i_140)) begin
		main_while_body65_i_i_bit_select14_reg <= main_while_body65_i_i_bit_select14;
	end
end
always @(*) begin
		main_while_body65_i_i_cmp67_i_i = ($signed(main_while_body65_i_i_ix0_6251_i_i_reg) > $signed(main_while_body65_i_i_s0_2252_i_i_reg));
end
always @(*) begin
		main_lor_lhs_false_i_i_cmp68_i_i = (main_while_body65_i_i_ix0_6251_i_i_reg != main_while_body65_i_i_s0_2252_i_i_reg);
end
always @(*) begin
		main_lor_lhs_false_i_i_cmp69_i_i = (main_while_body65_i_i_ix1_4249_i_i_reg < main_while_body65_i_i_add66_i_i_reg);
end
always @(*) begin
		main_lor_lhs_false_i_i_or_cond_i_i = (main_lor_lhs_false_i_i_cmp68_i_i | main_lor_lhs_false_i_i_cmp69_i_i);
end
always @(*) begin
		main_if_then70_i_i_add71_i_i = (main_while_body65_i_i_add66_i_i_reg + main_while_body65_i_i_r_1247_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_cmp76_i_i = ($signed(main_if_then70_i_i_add71_i_i) > $signed($signed(-32'd1)));
end
always @(*) begin
		main_if_then70_i_i_or_cond243_i_i = (main_while_body65_i_i_bit_select14_reg & main_if_then70_i_i_cmp76_i_i);
end
always @(*) begin
		main_if_then70_i_i_bit_concat13 = {main_if_then70_i_i_bit_concat13_bit_select_operand_0[30:0], main_if_then70_i_i_or_cond243_i_i};
end
always @(*) begin
		main_if_then70_i_i_s0_3_i_i = (main_if_then70_i_i_bit_concat13 + main_while_body65_i_i_s0_2252_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_cmp81_i_i = (main_while_body65_i_i_ix1_4249_i_i_reg < main_while_body65_i_i_add66_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_sub83_i_i = $signed(main_if_then70_i_i_cmp81_i_i);
end
always @(*) begin
		main_if_then70_i_i_sub80_i_i = ($signed({{30{main_if_then70_i_i_sub83_i_i[1]}},main_if_then70_i_i_sub83_i_i}) + main_while_body65_i_i_ix0_6251_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_sub83_sub80_i_i = (main_if_then70_i_i_sub80_i_i - main_while_body65_i_i_s0_2252_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_sub85_i_i = (main_while_body65_i_i_ix1_4249_i_i_reg - main_while_body65_i_i_add66_i_i_reg);
end
always @(*) begin
		main_if_then70_i_i_add86_i_i = (main_while_body65_i_i_q1_0250_i_i_reg + main_while_body65_i_i_r_1247_i_i_reg);
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_s1_1_i_i = main_while_body65_i_i_s1_0248_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) */ begin
		main_if_end87_i_i_s1_1_i_i = main_if_then70_i_i_add71_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_s1_1_i_i_reg <= main_if_end87_i_i_s1_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) begin
		main_if_end87_i_i_s1_1_i_i_reg <= main_if_end87_i_i_s1_1_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_ix1_5_i_i = main_while_body65_i_i_ix1_4249_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) */ begin
		main_if_end87_i_i_ix1_5_i_i = main_if_then70_i_i_sub85_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_ix1_5_i_i_reg <= main_if_end87_i_i_ix1_5_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) begin
		main_if_end87_i_i_ix1_5_i_i_reg <= main_if_end87_i_i_ix1_5_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_q1_1_i_i = main_while_body65_i_i_q1_0250_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) */ begin
		main_if_end87_i_i_q1_1_i_i = main_if_then70_i_i_add86_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_q1_1_i_i_reg <= main_if_end87_i_i_q1_1_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) begin
		main_if_end87_i_i_q1_1_i_i_reg <= main_if_end87_i_i_q1_1_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_ix0_8_i_i = main_while_body65_i_i_ix0_6251_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) */ begin
		main_if_end87_i_i_ix0_8_i_i = main_if_then70_i_i_sub83_sub80_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_ix0_8_i_i_reg <= main_if_end87_i_i_ix0_8_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) begin
		main_if_end87_i_i_ix0_8_i_i_reg <= main_if_end87_i_i_ix0_8_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_s0_4_i_i = main_while_body65_i_i_s0_2252_i_i_reg;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) */ begin
		main_if_end87_i_i_s0_4_i_i = main_if_then70_i_i_s0_3_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_lor_lhs_false_i_i_141) & (fsm_stall == 1'd0)) & (main_lor_lhs_false_i_i_or_cond_i_i == 1'd1))) begin
		main_if_end87_i_i_s0_4_i_i_reg <= main_if_end87_i_i_s0_4_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then70_i_i_142) & (fsm_stall == 1'd0))) begin
		main_if_end87_i_i_s0_4_i_i_reg <= main_if_end87_i_i_s0_4_i_i;
	end
end
always @(*) begin
		main_if_end87_i_i_bit_select11 = main_if_end87_i_i_ix1_5_i_i_reg[31];
end
always @(*) begin
		main_if_end87_i_i_bit_select10 = main_if_end87_i_i_ix0_8_i_i_reg[30:0];
end
always @(*) begin
		main_if_end87_i_i_bit_select8 = main_if_end87_i_i_ix1_5_i_i_reg[30:0];
end
always @(*) begin
		main_if_end87_i_i_bit_select4 = main_if_end87_i_i_q1_1_i_i_reg[0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end87_i_i_143)) begin
		main_if_end87_i_i_bit_select4_reg <= main_if_end87_i_i_bit_select4;
	end
end
always @(*) begin
		main_if_end87_i_i_bit_concat12 = {main_if_end87_i_i_bit_select10[30:0], main_if_end87_i_i_bit_select11};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end87_i_i_143)) begin
		main_if_end87_i_i_bit_concat12_reg <= main_if_end87_i_i_bit_concat12;
	end
end
always @(*) begin
		main_if_end87_i_i_bit_concat9 = {main_if_end87_i_i_bit_select8[30:0], main_if_end87_i_i_bit_concat9_bit_select_operand_2};
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_if_end87_i_i_143)) begin
		main_if_end87_i_i_bit_concat9_reg <= main_if_end87_i_i_bit_concat9;
	end
end
always @(*) begin
		main_if_end87_i_i_bit_concat7 = {main_if_end87_i_i_bit_concat7_bit_select_operand_0, main_while_body65_i_i_bit_select6_reg[30:0]};
end
always @(*) begin
		main_if_end87_i_i_25 = (main_while_body65_i_i_indvar3_reg + 32'd1);
end
always @(*) begin
		main_if_end87_i_i_exitcond3 = (main_if_end87_i_i_25 == 32'd32);
end
always @(*) begin
		main_while_end94_i_i_or95_i_i = (main_if_end87_i_i_bit_concat12_reg | main_if_end87_i_i_bit_concat9_reg);
end
always @(*) begin
		main_while_end94_i_i_cmp96_i_i = (main_while_end94_i_i_or95_i_i == 32'd0);
end
always @(*) begin
		main_if_then99_i_i_cmp100_i_i = (main_if_end87_i_i_q1_1_i_i_reg == $signed(-32'd1));
end
always @(*) begin
		main_if_then101_i_i_add102_i_i = (main_if_end55_i_i_q_1_i_i_reg + 32'd1);
end
always @(*) begin
		main_if_else111_i_i_bit_concat5 = {main_if_else111_i_i_bit_concat5_bit_select_operand_0[30:0], main_if_end87_i_i_bit_select4_reg};
end
always @(*) begin
		main_if_else111_i_i_add113_i_i = (main_if_else111_i_i_bit_concat5 + main_if_end87_i_i_q1_1_i_i_reg);
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_end94_i_i_144) & (fsm_stall == 1'd0)) & (main_while_end94_i_i_cmp96_i_i == 1'd1))) begin
		main_if_end117_i_i_q1_2_i_i = main_if_end87_i_i_q1_1_i_i_reg;
	end
	else if (((cur_state == LEGUP_F_main_BB_if_then101_i_i_146) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q1_2_i_i = 32'd0;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_else111_i_i_147) & (fsm_stall == 1'd0))) */ begin
		main_if_end117_i_i_q1_2_i_i = main_if_else111_i_i_add113_i_i;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_end94_i_i_144) & (fsm_stall == 1'd0)) & (main_while_end94_i_i_cmp96_i_i == 1'd1))) begin
		main_if_end117_i_i_q1_2_i_i_reg <= main_if_end117_i_i_q1_2_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then101_i_i_146) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q1_2_i_i_reg <= main_if_end117_i_i_q1_2_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_else111_i_i_147) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q1_2_i_i_reg <= main_if_end117_i_i_q1_2_i_i;
	end
end
always @(*) begin
	if ((((cur_state == LEGUP_F_main_BB_while_end94_i_i_144) & (fsm_stall == 1'd0)) & (main_while_end94_i_i_cmp96_i_i == 1'd1))) begin
		main_if_end117_i_i_q_3_i_i = main_if_end55_i_i_q_1_i_i_reg;
	end
	else if (((cur_state == LEGUP_F_main_BB_if_then101_i_i_146) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q_3_i_i = main_if_then101_i_i_add102_i_i;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_else111_i_i_147) & (fsm_stall == 1'd0))) */ begin
		main_if_end117_i_i_q_3_i_i = main_if_end55_i_i_q_1_i_i_reg;
	end
end
always @(posedge clk) begin
	if ((((cur_state == LEGUP_F_main_BB_while_end94_i_i_144) & (fsm_stall == 1'd0)) & (main_while_end94_i_i_cmp96_i_i == 1'd1))) begin
		main_if_end117_i_i_q_3_i_i_reg <= main_if_end117_i_i_q_3_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then101_i_i_146) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q_3_i_i_reg <= main_if_end117_i_i_q_3_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_else111_i_i_147) & (fsm_stall == 1'd0))) begin
		main_if_end117_i_i_q_3_i_i_reg <= main_if_end117_i_i_q_3_i_i;
	end
end
always @(*) begin
		main_if_end117_i_i_bit_select1 = main_if_end117_i_i_q1_2_i_i_reg[31:1];
end
always @(*) begin
		main_if_end117_i_i_bit_select = main_if_end117_i_i_q_3_i_i_reg[0];
end
always @(*) begin
		main_if_end117_i_i_shr118_i_i = ($signed(main_if_end117_i_i_q_3_i_i_reg) >>> 32'd1);
end
always @(*) begin
		main_if_end117_i_i_bit_concat3 = {main_if_end28_i_i_bit_select2_reg[11:0], main_if_end117_i_i_bit_concat3_bit_select_operand_2[19:0]};
end
always @(*) begin
		main_if_end117_i_i_add119_i_i = (main_if_end117_i_i_bit_concat3 + 32'd1071644672);
end
always @(*) begin
		main_if_end117_i_i_add127_i_i = (main_if_end117_i_i_add119_i_i + $signed({{1{main_if_end117_i_i_shr118_i_i[30]}},main_if_end117_i_i_shr118_i_i}));
end
always @(*) begin
		main_if_end117_i_i_bit_concat = {{main_if_end117_i_i_add127_i_i[31:0], main_if_end117_i_i_bit_select}, main_if_end117_i_i_bit_select1[30:0]};
end
always @(*) begin
		main_if_end117_i_i_26 = main_if_end117_i_i_bit_concat;
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_if_then_i_i_81) & (fsm_stall == 1'd0))) begin
		main_sqrt_exit_retval_0_i_i = main_if_then_i_i_add_i_i1;
	end
	else if ((((cur_state == LEGUP_F_main_BB_if_then3_i_i_83) & (fsm_stall == 1'd0)) & (main_if_then3_i_i_cmp5_i_i == 1'd1))) begin
		main_sqrt_exit_retval_0_i_i = main_pow_exit_add_i_i_reg;
	end
	else if (((cur_state == LEGUP_F_main_BB_if_then8_i_i_122) & (fsm_stall == 1'd0))) begin
		main_sqrt_exit_retval_0_i_i = main_if_then8_i_i_div_i_i;
	end
	else /* if (((cur_state == LEGUP_F_main_BB_if_end117_i_i_148) & (fsm_stall == 1'd0))) */ begin
		main_sqrt_exit_retval_0_i_i = main_if_end117_i_i_26;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_if_then_i_i_81) & (fsm_stall == 1'd0))) begin
		main_sqrt_exit_retval_0_i_i_reg <= main_sqrt_exit_retval_0_i_i;
	end
	if ((((cur_state == LEGUP_F_main_BB_if_then3_i_i_83) & (fsm_stall == 1'd0)) & (main_if_then3_i_i_cmp5_i_i == 1'd1))) begin
		main_sqrt_exit_retval_0_i_i_reg <= main_sqrt_exit_retval_0_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_then8_i_i_122) & (fsm_stall == 1'd0))) begin
		main_sqrt_exit_retval_0_i_i_reg <= main_sqrt_exit_retval_0_i_i;
	end
	if (((cur_state == LEGUP_F_main_BB_if_end117_i_i_148) & (fsm_stall == 1'd0))) begin
		main_sqrt_exit_retval_0_i_i_reg <= main_sqrt_exit_retval_0_i_i;
	end
end
always @(*) begin
	main_sqrt_exit_conv5_i_i = main_altfp_fptosi_64_32_0;
end
always @(*) begin
		main_sqrt_exit_sub_i_i = (32'd255 - main_sqrt_exit_conv5_i_i);
end
always @(*) begin
		main_sqrt_exit_27 = (main_for_body_i_i_i_012_i_i_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_sqrt_exit_149)) begin
		main_sqrt_exit_27_reg <= main_sqrt_exit_27;
	end
end
always @(*) begin
		main_sqrt_exit_exitcond4 = (main_sqrt_exit_27 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_sqrt_exit_149)) begin
		main_sqrt_exit_exitcond4_reg <= main_sqrt_exit_exitcond4;
	end
end
always @(*) begin
		main_contour_exit_i_28 = (main_for_body18_i_i_161_i_reg + 32'd1);
end
always @(*) begin
		main_contour_exit_i_exitcond = (main_contour_exit_i_28 == 32'd8);
end
always @(*) begin
		main_for_inc34_i_29 = ({1'd0,main_for_cond15_preheader_i_l_062_i_reg} + 32'd1);
end
always @(*) begin
		main_for_inc34_i_exitcond5 = (main_for_inc34_i_29 == 32'd100);
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_1_i_preheader_16) & (fsm_stall == 1'd0))) begin
		main_for_body6_1_i_30 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_1_i_159) & (fsm_stall == 1'd0)) & (main_for_body6_1_i_exitcond12_reg == 1'd0))) */ begin
		main_for_body6_1_i_30 = main_for_body6_1_i_32_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_1_i_preheader_16) & (fsm_stall == 1'd0))) begin
		main_for_body6_1_i_30_reg <= main_for_body6_1_i_30;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_1_i_159) & (fsm_stall == 1'd0)) & (main_for_body6_1_i_exitcond12_reg == 1'd0))) begin
		main_for_body6_1_i_30_reg <= main_for_body6_1_i_30;
	end
end
always @(*) begin
		main_for_body6_1_i_31 = ({1'd0,main_for_body6_1_i_30_reg} + 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_157)) begin
		main_for_body6_1_i_31_reg <= main_for_body6_1_i_31;
	end
end
always @(*) begin
		main_for_body6_1_i_arrayidx7_1_i = (1'd0 + (4 * {20'd0,main_for_body6_1_i_31_reg}));
end
always @(*) begin
		main_for_body6_1_i_32 = ({1'd0,main_for_body6_1_i_30_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_157)) begin
		main_for_body6_1_i_32_reg <= main_for_body6_1_i_32;
	end
end
always @(*) begin
		main_for_body6_1_i_exitcond12 = (main_for_body6_1_i_32 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_157)) begin
		main_for_body6_1_i_exitcond12_reg <= main_for_body6_1_i_exitcond12;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_2_i_preheader_160) & (fsm_stall == 1'd0))) begin
		main_for_body6_2_i_33 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_2_i_163) & (fsm_stall == 1'd0)) & (main_for_body6_2_i_exitcond11_reg == 1'd0))) */ begin
		main_for_body6_2_i_33 = main_for_body6_2_i_35_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_2_i_preheader_160) & (fsm_stall == 1'd0))) begin
		main_for_body6_2_i_33_reg <= main_for_body6_2_i_33;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_2_i_163) & (fsm_stall == 1'd0)) & (main_for_body6_2_i_exitcond11_reg == 1'd0))) begin
		main_for_body6_2_i_33_reg <= main_for_body6_2_i_33;
	end
end
always @(*) begin
		main_for_body6_2_i_34 = ({1'd0,main_for_body6_2_i_33_reg} + 32'd2048);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_161)) begin
		main_for_body6_2_i_34_reg <= main_for_body6_2_i_34;
	end
end
always @(*) begin
		main_for_body6_2_i_arrayidx7_2_i = (1'd0 + (4 * {20'd0,main_for_body6_2_i_34_reg}));
end
always @(*) begin
		main_for_body6_2_i_35 = ({1'd0,main_for_body6_2_i_33_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_161)) begin
		main_for_body6_2_i_35_reg <= main_for_body6_2_i_35;
	end
end
always @(*) begin
		main_for_body6_2_i_exitcond11 = (main_for_body6_2_i_35 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_161)) begin
		main_for_body6_2_i_exitcond11_reg <= main_for_body6_2_i_exitcond11;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_3_i_preheader_164) & (fsm_stall == 1'd0))) begin
		main_for_body6_3_i_36 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_3_i_167) & (fsm_stall == 1'd0)) & (main_for_body6_3_i_exitcond10_reg == 1'd0))) */ begin
		main_for_body6_3_i_36 = main_for_body6_3_i_38_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_3_i_preheader_164) & (fsm_stall == 1'd0))) begin
		main_for_body6_3_i_36_reg <= main_for_body6_3_i_36;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_3_i_167) & (fsm_stall == 1'd0)) & (main_for_body6_3_i_exitcond10_reg == 1'd0))) begin
		main_for_body6_3_i_36_reg <= main_for_body6_3_i_36;
	end
end
always @(*) begin
		main_for_body6_3_i_37 = ({2'd0,main_for_body6_3_i_36_reg} + 32'd3072);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_165)) begin
		main_for_body6_3_i_37_reg <= main_for_body6_3_i_37;
	end
end
always @(*) begin
		main_for_body6_3_i_arrayidx7_3_i = (1'd0 + (4 * {19'd0,main_for_body6_3_i_37_reg}));
end
always @(*) begin
		main_for_body6_3_i_38 = ({1'd0,main_for_body6_3_i_36_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_165)) begin
		main_for_body6_3_i_38_reg <= main_for_body6_3_i_38;
	end
end
always @(*) begin
		main_for_body6_3_i_exitcond10 = (main_for_body6_3_i_38 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_165)) begin
		main_for_body6_3_i_exitcond10_reg <= main_for_body6_3_i_exitcond10;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_4_i_preheader_168) & (fsm_stall == 1'd0))) begin
		main_for_body6_4_i_39 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_4_i_171) & (fsm_stall == 1'd0)) & (main_for_body6_4_i_exitcond9_reg == 1'd0))) */ begin
		main_for_body6_4_i_39 = main_for_body6_4_i_41_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_4_i_preheader_168) & (fsm_stall == 1'd0))) begin
		main_for_body6_4_i_39_reg <= main_for_body6_4_i_39;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_4_i_171) & (fsm_stall == 1'd0)) & (main_for_body6_4_i_exitcond9_reg == 1'd0))) begin
		main_for_body6_4_i_39_reg <= main_for_body6_4_i_39;
	end
end
always @(*) begin
		main_for_body6_4_i_40 = ({2'd0,main_for_body6_4_i_39_reg} + 32'd4096);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_169)) begin
		main_for_body6_4_i_40_reg <= main_for_body6_4_i_40;
	end
end
always @(*) begin
		main_for_body6_4_i_arrayidx7_4_i = (1'd0 + (4 * {19'd0,main_for_body6_4_i_40_reg}));
end
always @(*) begin
		main_for_body6_4_i_41 = ({1'd0,main_for_body6_4_i_39_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_169)) begin
		main_for_body6_4_i_41_reg <= main_for_body6_4_i_41;
	end
end
always @(*) begin
		main_for_body6_4_i_exitcond9 = (main_for_body6_4_i_41 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_169)) begin
		main_for_body6_4_i_exitcond9_reg <= main_for_body6_4_i_exitcond9;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_5_i_preheader_172) & (fsm_stall == 1'd0))) begin
		main_for_body6_5_i_42 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_5_i_175) & (fsm_stall == 1'd0)) & (main_for_body6_5_i_exitcond8_reg == 1'd0))) */ begin
		main_for_body6_5_i_42 = main_for_body6_5_i_44_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_5_i_preheader_172) & (fsm_stall == 1'd0))) begin
		main_for_body6_5_i_42_reg <= main_for_body6_5_i_42;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_5_i_175) & (fsm_stall == 1'd0)) & (main_for_body6_5_i_exitcond8_reg == 1'd0))) begin
		main_for_body6_5_i_42_reg <= main_for_body6_5_i_42;
	end
end
always @(*) begin
		main_for_body6_5_i_43 = ({2'd0,main_for_body6_5_i_42_reg} + 32'd5120);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_173)) begin
		main_for_body6_5_i_43_reg <= main_for_body6_5_i_43;
	end
end
always @(*) begin
		main_for_body6_5_i_arrayidx7_5_i = (1'd0 + (4 * {19'd0,main_for_body6_5_i_43_reg}));
end
always @(*) begin
		main_for_body6_5_i_44 = ({1'd0,main_for_body6_5_i_42_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_173)) begin
		main_for_body6_5_i_44_reg <= main_for_body6_5_i_44;
	end
end
always @(*) begin
		main_for_body6_5_i_exitcond8 = (main_for_body6_5_i_44 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_173)) begin
		main_for_body6_5_i_exitcond8_reg <= main_for_body6_5_i_exitcond8;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_6_i_preheader_176) & (fsm_stall == 1'd0))) begin
		main_for_body6_6_i_45 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_6_i_179) & (fsm_stall == 1'd0)) & (main_for_body6_6_i_exitcond7_reg == 1'd0))) */ begin
		main_for_body6_6_i_45 = main_for_body6_6_i_47_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_6_i_preheader_176) & (fsm_stall == 1'd0))) begin
		main_for_body6_6_i_45_reg <= main_for_body6_6_i_45;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_6_i_179) & (fsm_stall == 1'd0)) & (main_for_body6_6_i_exitcond7_reg == 1'd0))) begin
		main_for_body6_6_i_45_reg <= main_for_body6_6_i_45;
	end
end
always @(*) begin
		main_for_body6_6_i_46 = ({2'd0,main_for_body6_6_i_45_reg} + 32'd6144);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_177)) begin
		main_for_body6_6_i_46_reg <= main_for_body6_6_i_46;
	end
end
always @(*) begin
		main_for_body6_6_i_arrayidx7_6_i = (1'd0 + (4 * {19'd0,main_for_body6_6_i_46_reg}));
end
always @(*) begin
		main_for_body6_6_i_47 = ({1'd0,main_for_body6_6_i_45_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_177)) begin
		main_for_body6_6_i_47_reg <= main_for_body6_6_i_47;
	end
end
always @(*) begin
		main_for_body6_6_i_exitcond7 = (main_for_body6_6_i_47 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_177)) begin
		main_for_body6_6_i_exitcond7_reg <= main_for_body6_6_i_exitcond7;
	end
end
always @(*) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_7_i_preheader_180) & (fsm_stall == 1'd0))) begin
		main_for_body6_7_i_48 = 32'd0;
	end
	else /* if ((((cur_state == LEGUP_F_main_BB_for_body6_7_i_183) & (fsm_stall == 1'd0)) & (main_for_body6_7_i_exitcond6_reg == 1'd0))) */ begin
		main_for_body6_7_i_48 = main_for_body6_7_i_50_reg;
	end
end
always @(posedge clk) begin
	if (((cur_state == LEGUP_F_main_BB_for_body6_7_i_preheader_180) & (fsm_stall == 1'd0))) begin
		main_for_body6_7_i_48_reg <= main_for_body6_7_i_48;
	end
	if ((((cur_state == LEGUP_F_main_BB_for_body6_7_i_183) & (fsm_stall == 1'd0)) & (main_for_body6_7_i_exitcond6_reg == 1'd0))) begin
		main_for_body6_7_i_48_reg <= main_for_body6_7_i_48;
	end
end
always @(*) begin
		main_for_body6_7_i_49 = ({3'd0,main_for_body6_7_i_48_reg} + 32'd7168);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_181)) begin
		main_for_body6_7_i_49_reg <= main_for_body6_7_i_49;
	end
end
always @(*) begin
		main_for_body6_7_i_arrayidx7_7_i = (1'd0 + (4 * {18'd0,main_for_body6_7_i_49_reg}));
end
always @(*) begin
		main_for_body6_7_i_50 = ({1'd0,main_for_body6_7_i_48_reg} + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_181)) begin
		main_for_body6_7_i_50_reg <= main_for_body6_7_i_50;
	end
end
always @(*) begin
		main_for_body6_7_i_exitcond6 = (main_for_body6_7_i_50 == 32'd1024);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_181)) begin
		main_for_body6_7_i_exitcond6_reg <= main_for_body6_7_i_exitcond6;
	end
end
assign main_sobelfilter_exit_arrayidx38_i = (1'd0 + (4 * 32'd50));
always @(*) begin
		main_sobelfilter_exit_51 = main_entry_vla160_i_out_a;
end
always @(*) begin
	main_entry_vla160_i_address_a = 'dx;
	if ((cur_state == LEGUP_F_main_BB_sqrt_exit_153)) begin
		main_entry_vla160_i_address_a = (main_for_body_i_i_arrayidx6_i_i_reg >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_sobelfilter_exit_185)) begin
		main_entry_vla160_i_address_a = (main_sobelfilter_exit_arrayidx38_i >>> 3'd2);
	end
end
always @(*) begin
	main_entry_vla160_i_write_enable_a = 'd0;
	if ((cur_state == LEGUP_F_main_BB_sqrt_exit_153)) begin
		main_entry_vla160_i_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_entry_vla160_i_in_a = 'dx;
	if ((cur_state == LEGUP_F_main_BB_sqrt_exit_153)) begin
		main_entry_vla160_i_in_a = main_sqrt_exit_sub_i_i;
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	if ((cur_state == LEGUP_function_call_19)) begin
		legup_function_call = 1'd1;
	end
	if ((cur_state == LEGUP_function_call_21)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_25)) begin
		main_altfp_sitofp_32_64_0_op0 = main_for_body_i_i_17;
	end
	else /* if ((cur_state == LEGUP_F_main_BB_pow_exit38_43)) */ begin
		main_altfp_sitofp_32_64_0_op0 = main_pow_exit38_19;
	end
end
always @(*) begin
	main_altfp_sitofp_32_64_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_sitofp_32_64_0_inst_clk_en = altfp_main_for_body_i_i_conv_i_i_en;
end
always @(*) begin
	main_altfp_sitofp_32_64_0_inst_dataa = main_altfp_sitofp_32_64_0_op0;
end
always @(*) begin
	main_for_body_i_i_conv_i_i_out = main_altfp_sitofp_32_64_0_inst_result;
end
always @(*) begin
	altfp_main_for_body_i_i_conv_i_i_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_sitofp_32_64_0 = main_for_body_i_i_conv_i_i_out;
end
always @(*) begin
	if ((cur_state == LEGUP_F_main_BB_if_then61_i_i36_33)) begin
		main_altfp_multiply_64_0_op0 = main_for_body_i_i_conv_i_i_reg;
	end
	else if ((cur_state == LEGUP_F_main_BB_if_then61_i_i_51)) begin
		main_altfp_multiply_64_0_op0 = main_pow_exit38_conv2_i_i_reg;
	end
	else /* if ((cur_state == LEGUP_F_main_BB_if_then_i_i_67)) */ begin
		main_altfp_multiply_64_0_op0 = main_pow_exit_add_i_i_reg;
	end
end
always @(*) begin
	if ((cur_state == LEGUP_F_main_BB_if_then61_i_i36_33)) begin
		main_altfp_multiply_64_0_op1 = main_for_body_i_i_conv_i_i_reg;
	end
	else if ((cur_state == LEGUP_F_main_BB_if_then61_i_i_51)) begin
		main_altfp_multiply_64_0_op1 = main_pow_exit38_conv2_i_i_reg;
	end
	else /* if ((cur_state == LEGUP_F_main_BB_if_then_i_i_67)) */ begin
		main_altfp_multiply_64_0_op1 = main_pow_exit_add_i_i_reg;
	end
end
always @(*) begin
	main_altfp_multiply_64_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_multiply_64_0_inst_clk_en = altfp_main_if_then61_i_i36_mul_i_i35_en;
end
always @(*) begin
	main_altfp_multiply_64_0_inst_dataa = main_altfp_multiply_64_0_op0;
end
always @(*) begin
	main_altfp_multiply_64_0_inst_datab = main_altfp_multiply_64_0_op1;
end
always @(*) begin
	main_if_then61_i_i36_mul_i_i35_out = main_altfp_multiply_64_0_inst_result;
end
always @(*) begin
	altfp_main_if_then61_i_i36_mul_i_i35_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_multiply_64_0 = main_if_then61_i_i36_mul_i_i35_out;
end
always @(*) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_59)) begin
		main_altfp_add_64_0_op0 = main_pow_exit38_retval_0_i_i37_reg;
	end
	else /* if ((cur_state == LEGUP_F_main_BB_if_then_i_i_74)) */ begin
		main_altfp_add_64_0_op0 = main_if_then_i_i_mul_i_i;
	end
end
always @(*) begin
	if ((cur_state == LEGUP_F_main_BB_pow_exit_59)) begin
		main_altfp_add_64_0_op1 = main_pow_exit_retval_0_i_i15_reg;
	end
	else /* if ((cur_state == LEGUP_F_main_BB_if_then_i_i_74)) */ begin
		main_altfp_add_64_0_op1 = main_pow_exit_add_i_i_reg;
	end
end
always @(*) begin
	main_altfp_add_64_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_add_64_0_inst_clk_en = altfp_main_pow_exit_add_i_i_en;
end
always @(*) begin
	main_altfp_add_64_0_inst_dataa = main_altfp_add_64_0_op0;
end
always @(*) begin
	main_altfp_add_64_0_inst_datab = main_altfp_add_64_0_op1;
end
always @(*) begin
	main_pow_exit_add_i_i_out = main_altfp_add_64_0_inst_result;
end
always @(*) begin
	altfp_main_pow_exit_add_i_i_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_add_64_0 = main_pow_exit_add_i_i_out;
end
always @(*) begin
		main_altfp_subtract_64_0_op0 = main_pow_exit_add_i_i_reg;
end
always @(*) begin
		main_altfp_subtract_64_0_op1 = main_pow_exit_add_i_i_reg;
end
always @(*) begin
	main_altfp_subtract_64_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_subtract_64_0_inst_clk_en = altfp_main_if_then8_i_i_sub_i_i2_en;
end
always @(*) begin
	main_altfp_subtract_64_0_inst_dataa = main_altfp_subtract_64_0_op0;
end
always @(*) begin
	main_altfp_subtract_64_0_inst_datab = main_altfp_subtract_64_0_op1;
end
always @(*) begin
	main_if_then8_i_i_sub_i_i2_out = main_altfp_subtract_64_0_inst_result;
end
always @(*) begin
	altfp_main_if_then8_i_i_sub_i_i2_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_subtract_64_0 = main_if_then8_i_i_sub_i_i2_out;
end
always @(*) begin
		main_altfp_divide_64_0_op0 = main_if_then8_i_i_sub_i_i2;
end
always @(*) begin
		main_altfp_divide_64_0_op1 = main_if_then8_i_i_sub_i_i2;
end
always @(*) begin
	main_altfp_divide_64_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_divide_64_0_inst_clk_en = altfp_main_if_then8_i_i_div_i_i_en;
end
always @(*) begin
	main_altfp_divide_64_0_inst_dataa = main_altfp_divide_64_0_op0;
end
always @(*) begin
	main_altfp_divide_64_0_inst_datab = main_altfp_divide_64_0_op1;
end
always @(*) begin
	main_if_then8_i_i_div_i_i_out = main_altfp_divide_64_0_inst_result;
end
always @(*) begin
	altfp_main_if_then8_i_i_div_i_i_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_divide_64_0 = main_if_then8_i_i_div_i_i_out;
end
always @(*) begin
		main_altfp_fptosi_64_32_0_op0 = main_sqrt_exit_retval_0_i_i_reg;
end
always @(*) begin
	main_altfp_fptosi_64_32_0_inst_clock = clk;
end
always @(*) begin
	main_altfp_fptosi_64_32_0_inst_clk_en = altfp_main_sqrt_exit_conv5_i_i_en;
end
always @(*) begin
	main_altfp_fptosi_64_32_0_inst_dataa = main_altfp_fptosi_64_32_0_op0;
end
always @(*) begin
	main_sqrt_exit_conv5_i_i_out = main_altfp_fptosi_64_32_0_inst_result;
end
always @(*) begin
	altfp_main_sqrt_exit_conv5_i_i_en = ~((fsm_stall | legup_function_call));
end
always @(*) begin
	main_altfp_fptosi_64_32_0 = main_sqrt_exit_conv5_i_i_out;
end
assign main_for_body18_i_bit_concat65_bit_select_operand_2 = 10'd0;
assign main_for_body_i_i_bit_concat62_bit_select_operand_0 = 1'd0;
assign main_pow_exit38_bit_concat59_bit_select_operand_0 = 1'd0;
assign main_pow_exit_bit_concat55_bit_select_operand_0 = 1'd0;
assign main_pow_exit_bit_concat55_bit_select_operand_4 = 20'd0;
assign main_if_end_i_i_cmp2_i_i_op1_temp = 32'd1;
assign main_if_then3_i_i_bit_concat53_bit_select_operand_0 = 1'd0;
assign main_while_cond_for_cond_preheader_crit_edge_i_i_b_var0_bit_select_operand_2 = 3'd0;
assign main_while_cond_for_cond_preheader_crit_edge_i_i_b_var1_bit_select_operand_2 = 5'd0;
assign main_while_cond_for_cond_preheader_crit_edge_i_i_b_var2_bit_select_operand_2 = 1'd0;
assign main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_0 = 11'd0;
assign main_for_cond_preheader_i_i_bit_concat44_bit_select_operand_4 = 20'd0;
assign main_while_body_i_i_bit_concat42_bit_select_operand_0 = 11'd0;
assign main_while_body_i_i_bit_concat40_bit_select_operand_2 = 21'd0;
assign main_for_body_i_i4_bit_concat38_bit_select_operand_2 = 1'd0;
assign main_for_body_i_i4_bit_concat36_bit_select_operand_0 = 11'd0;
assign main_for_body_i_i4_bit_concat36_bit_select_operand_4 = 20'd0;
assign main_if_end28_i_i_bit_concat34_bit_select_operand_0 = 12'd1;
assign main_if_end28_i_i_bit_concat33_bit_select_operand_0 = 31'd0;
assign main_if_then33_i_i_bit_concat31_bit_select_operand_0 = 11'd1;
assign main_if_then33_i_i_bit_concat28_bit_select_operand_2 = 1'd0;
assign main_if_end39_i_i_bit_concat23_bit_select_operand_2 = 1'd0;
assign main_if_end55_i_i_bit_concat18_bit_select_operand_0 = 1'd0;
assign main_if_end55_i_i_bit_concat16_bit_select_operand_2 = 1'd0;
assign main_if_then70_i_i_bit_concat13_bit_select_operand_0 = 31'd0;
assign main_if_end87_i_i_bit_concat9_bit_select_operand_2 = 1'd0;
assign main_if_end87_i_i_bit_concat7_bit_select_operand_0 = 1'd0;
assign main_if_else111_i_i_bit_concat5_bit_select_operand_0 = 31'd0;
assign main_if_end117_i_i_bit_concat3_bit_select_operand_2 = 20'd0;
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
	end
	if ((cur_state == LEGUP_F_main_BB_sobelfilter_exit_186)) begin
		finish <= (fsm_stall == 1'd0);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
	end
	if ((cur_state == LEGUP_F_main_BB_sobelfilter_exit_186)) begin
		return_val <= 32'd0;
	end
end
always @(posedge clk) begin
	if (reset) begin
		itConv_start <= 1'd0;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		itConv_start <= 1'd1;
	end
	if (((cur_state == LEGUP_function_call_19) & ~(fsm_stall))) begin
		itConv_start <= 1'd0;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_20)) begin
		itConv_start <= 1'd1;
	end
	if (((cur_state == LEGUP_function_call_21) & ~(fsm_stall))) begin
		itConv_start <= 1'd0;
	end
end
always @(posedge clk) begin
	itConv_buffer <= 0;
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		itConv_buffer <= main_for_body18_i_arrayidx19_i;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_20)) begin
		itConv_buffer <= main_for_body18_i_arrayidx19_i_reg;
	end
end
always @(posedge clk) begin
	itConv_op <= 0;
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		itConv_op <= main_legup_memset_4_exit_1_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_20)) begin
		itConv_op <= main_legup_memset_4_exit45_8_reg;
	end
end
always @(posedge clk) begin
	itConv_res <= 0;
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_18)) begin
		itConv_res <= main_for_body18_i_arraydecay21_i;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body18_i_20)) begin
		itConv_res <= main_for_body18_i_arraydecay25_i_reg;
	end
end
always @(*) begin
	memory_controller_0_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_in_a = 64'd0;
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		memory_controller_0_in_a = 32'd0;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_in_a = $signed(-32'd1);
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_in_a = $signed(-32'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_in_a = $signed(-32'd1);
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_in_a = 32'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_in_a = 32'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_in_a = $signed(-32'd2);
	end
end
always @(*) begin
	memory_controller_0_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_address_a = 0;
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		memory_controller_0_address_a = main_while_body_i_s_010_i;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit_1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit_3_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit_5_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit45_8;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit45_10_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_address_a = main_legup_memset_4_exit45_12_reg;
	end
end
always @(*) begin
	memory_controller_0_size_a = 2'd0;
	if ((cur_state == LEGUP_F_main_BB_while_body_i_2)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_0_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_in_b = 64'd0;
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_in_b = 32'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_in_b = 32'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_in_b = 32'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		memory_controller_0_in_b = 32'd0;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_in_b = 32'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_in_b = $signed(-32'd1);
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_in_b = $signed(-32'd1);
	end
end
always @(*) begin
	memory_controller_0_enable_b = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_enable_b = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_0_address_b = 0;
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit_2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit_4_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit_6_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		memory_controller_0_address_b = main_while_body_i44_s_010_i39;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit45_9;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit45_11_reg;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_address_b = main_legup_memset_4_exit45_13_reg;
	end
end
always @(*) begin
	memory_controller_0_size_b = 2'd0;
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_6)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_while_body_i44_8)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_10)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_11)) begin
		memory_controller_0_size_b = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit45_12)) begin
		memory_controller_0_size_b = 2'd2;
	end
end
always @(*) begin
	main_entry_vla59_i_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_158)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_162)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_166)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_170)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_174)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_178)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_182)) begin
		main_entry_vla59_i_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_entry_vla59_i_in_a = 0;
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_i_14_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_158)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_1_i_30_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_162)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_2_i_33_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_166)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_3_i_36_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_170)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_4_i_39_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_174)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_5_i_42_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_178)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_6_i_45_reg};
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_182)) begin
		main_entry_vla59_i_in_a = {21'd0,main_for_body6_7_i_48_reg};
	end
end
assign main_entry_vla59_i_byteena_a = 1'd1;
always @(*) begin
	main_entry_vla59_i_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_158)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_162)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_166)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_170)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_174)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_178)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_182)) begin
		main_entry_vla59_i_enable_a = 1'd1;
	end
end
always @(*) begin
	main_entry_vla59_i_address_a = 13'd0;
	if ((cur_state == LEGUP_F_main_BB_for_body6_i_14)) begin
		main_entry_vla59_i_address_a = (main_for_body6_i_arrayidx7_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_1_i_158)) begin
		main_entry_vla59_i_address_a = (main_for_body6_1_i_arrayidx7_1_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_2_i_162)) begin
		main_entry_vla59_i_address_a = (main_for_body6_2_i_arrayidx7_2_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_3_i_166)) begin
		main_entry_vla59_i_address_a = (main_for_body6_3_i_arrayidx7_3_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_4_i_170)) begin
		main_entry_vla59_i_address_a = (main_for_body6_4_i_arrayidx7_4_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_5_i_174)) begin
		main_entry_vla59_i_address_a = (main_for_body6_5_i_arrayidx7_5_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_6_i_178)) begin
		main_entry_vla59_i_address_a = (main_for_body6_6_i_arrayidx7_6_i >>> 3'd2);
	end
	if ((cur_state == LEGUP_F_main_BB_for_body6_7_i_182)) begin
		main_entry_vla59_i_address_a = (main_for_body6_7_i_arrayidx7_7_i >>> 3'd2);
	end
end
assign memory_controller_1_write_enable_a = 1'd0;
assign memory_controller_1_in_a = 64'd0;
always @(*) begin
	memory_controller_1_enable_a = 1'd0;
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_23)) begin
		memory_controller_1_enable_a = 1'd1;
	end
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_41)) begin
		memory_controller_1_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_1_address_a = 0;
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_23)) begin
		memory_controller_1_address_a = main_for_body_i_i_arrayidx_i_i;
	end
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_41)) begin
		memory_controller_1_address_a = main_for_body_i_i_arrayidx1_i_i_reg;
	end
end
always @(*) begin
	memory_controller_1_size_a = 2'd0;
	if ((cur_state == LEGUP_F_main_BB_for_body_i_i_23)) begin
		memory_controller_1_size_a = 2'd2;
	end
	if ((cur_state == LEGUP_F_main_BB_pow_exit38_41)) begin
		memory_controller_1_size_a = 2'd2;
	end
end
assign memory_controller_1_write_enable_b = 1'd0;
assign memory_controller_1_in_b = 64'd0;
assign memory_controller_1_enable_b = 1'd0;
assign memory_controller_1_address_b = 0;
assign memory_controller_1_size_b = 2'd0;

endmodule
module ram_dual_port
(
	clk,
	clken,
	address_a,
	wren_a,
	data_a,
	byteena_a,
	q_a,
	address_b,
	wren_b,
	data_b,
	byteena_b,
	q_b
);

parameter  width_a = 1'd0;
parameter  widthad_a = 1'd0;
parameter  numwords_a = 1'd0;
parameter  width_be_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_b = 1'd0;
parameter  width_be_b = 1'd0;
parameter  init_file_mem = {`MEM_INIT_DIR, "UNUSED.mem"};
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
output wire [(width_a-1):0] q_a;
reg [(width_a-1):0] q_a_wire;
input  wren_a;
input [(width_a-1):0] data_a;
input [width_be_a-1:0] byteena_a;
input [(widthad_b-1):0] address_b;
output wire [(width_b-1):0] q_b;
reg [(width_b-1):0] q_b_wire;
input  wren_b;
input [(width_a-1):0] data_b;
input [width_be_a-1:0] byteena_b;

reg [width_a-1:0] ram [numwords_a-1:0];

initial begin
	if (init_file_mem != {`MEM_INIT_DIR, "UNUSED.mem"})
        $readmemb(init_file_mem, ram);
end

localparam input_latency = ((latency - 1) >> 1);
localparam output_latency = (latency - 1) - input_latency;
integer j;

reg [(widthad_a-1):0] address_a_reg[input_latency:0];
reg  wren_a_reg[input_latency:0];
reg [(width_a-1):0] data_a_reg[input_latency:0];
reg [(width_be_a-1):0] byteena_a_reg[input_latency:0];
reg [(widthad_b-1):0] address_b_reg[input_latency:0];
reg  wren_b_reg[input_latency:0];
reg [(width_b-1):0] data_b_reg[input_latency:0];
reg [(width_be_b-1):0] byteena_b_reg[input_latency:0];

always @(*)
begin
  address_a_reg[0] = address_a;
  wren_a_reg[0] = wren_a;
  data_a_reg[0] = data_a;
  byteena_a_reg[0] = byteena_a;
  address_b_reg[0] = address_b;
  wren_b_reg[0] = wren_b;
  data_b_reg[0] = data_b;
  byteena_b_reg[0] = byteena_b;
end

always @(posedge clk)
if (clken)
begin
   for (j = 0; j < input_latency; j=j+1)
   begin
       address_a_reg[j+1] <= address_a_reg[j];
       wren_a_reg[j+1] <= wren_a_reg[j];
       data_a_reg[j+1] <= data_a_reg[j];
       byteena_a_reg[j+1] <= byteena_a_reg[j];
       address_b_reg[j+1] <= address_b_reg[j];
       wren_b_reg[j+1] <= wren_b_reg[j];
       data_b_reg[j+1] <= data_b_reg[j];
       byteena_b_reg[j+1] <= byteena_b_reg[j];
   end
end

always @ (posedge clk)
begin
    if (clken)
    begin // Port a
        if (wren_a_reg[input_latency])
        begin
            ram[address_a_reg[input_latency]] <= data_a_reg[input_latency];
            q_a_wire <= data_a_reg[input_latency];
        end
        else begin
            q_a_wire <= ram[address_a_reg[input_latency]];
        end
    end
end

always @ (posedge clk)
begin
    if (clken)
    begin // Port b
        if (wren_b_reg[input_latency])
        begin
            ram[address_b_reg[input_latency]] <= data_b_reg[input_latency];
            q_b_wire <= data_b_reg[input_latency];
        end
        else begin
            q_b_wire <= ram[address_b_reg[input_latency]];
        end
    end
end


reg [(width_a-1):0] q_a_reg[output_latency:0];

always @(*)
begin
   q_a_reg[0] <= q_a_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 0; j < output_latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
   end
end

assign q_a = q_a_reg[output_latency];
reg [(width_b-1):0] q_b_reg[output_latency:0];

always @(*)
begin
   q_b_reg[0] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 0; j < output_latency; j=j+1)
   begin
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_b = q_b_reg[output_latency];

endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(posedge clk) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end


endmodule
