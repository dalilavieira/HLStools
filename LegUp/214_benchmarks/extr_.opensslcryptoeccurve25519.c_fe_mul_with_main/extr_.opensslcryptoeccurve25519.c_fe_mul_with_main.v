//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:57:39 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fe_mul
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_h,
	arg_f,
	arg_g
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_fe_mul_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_fe_mul_BB_0_2 = 5'd2;
parameter [4:0] LEGUP_F_fe_mul_BB_0_3 = 5'd3;
parameter [4:0] LEGUP_F_fe_mul_BB_0_4 = 5'd4;
parameter [4:0] LEGUP_F_fe_mul_BB_0_5 = 5'd5;
parameter [4:0] LEGUP_F_fe_mul_BB_0_6 = 5'd6;
parameter [4:0] LEGUP_F_fe_mul_BB_0_7 = 5'd7;
parameter [4:0] LEGUP_F_fe_mul_BB_0_8 = 5'd8;
parameter [4:0] LEGUP_F_fe_mul_BB_0_9 = 5'd9;
parameter [4:0] LEGUP_F_fe_mul_BB_0_10 = 5'd10;
parameter [4:0] LEGUP_F_fe_mul_BB_0_11 = 5'd11;
parameter [4:0] LEGUP_F_fe_mul_BB_0_12 = 5'd12;
parameter [4:0] LEGUP_F_fe_mul_BB_0_13 = 5'd13;
parameter [4:0] LEGUP_F_fe_mul_BB_0_14 = 5'd14;
parameter [4:0] LEGUP_F_fe_mul_BB_0_15 = 5'd15;
parameter [4:0] LEGUP_F_fe_mul_BB_0_16 = 5'd16;
parameter [4:0] LEGUP_F_fe_mul_BB_0_17 = 5'd17;
parameter [4:0] LEGUP_F_fe_mul_BB_0_18 = 5'd18;
parameter [4:0] LEGUP_F_fe_mul_BB_0_19 = 5'd19;
parameter [4:0] LEGUP_F_fe_mul_BB_0_20 = 5'd20;
parameter [4:0] LEGUP_F_fe_mul_BB_0_21 = 5'd21;
parameter [4:0] LEGUP_F_fe_mul_BB_0_22 = 5'd22;
parameter [4:0] LEGUP_F_fe_mul_BB_0_23 = 5'd23;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_h;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_f;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_g;
reg [4:0] cur_state;
reg [31:0] fe_mul_0_1;
reg [31:0] fe_mul_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_2_reg;
reg [31:0] fe_mul_0_3;
reg [31:0] fe_mul_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_4_reg;
reg [31:0] fe_mul_0_5;
reg [31:0] fe_mul_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_6_reg;
reg [31:0] fe_mul_0_7;
reg [31:0] fe_mul_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_8_reg;
reg [31:0] fe_mul_0_9;
reg [31:0] fe_mul_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_10_reg;
reg [31:0] fe_mul_0_11;
reg [31:0] fe_mul_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_12_reg;
reg [31:0] fe_mul_0_13;
reg [31:0] fe_mul_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_14_reg;
reg [31:0] fe_mul_0_15;
reg [31:0] fe_mul_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_16_reg;
reg [31:0] fe_mul_0_17;
reg [31:0] fe_mul_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_18_reg;
reg [31:0] fe_mul_0_19;
reg [31:0] fe_mul_0_19_reg;
reg [31:0] fe_mul_0_20;
reg [31:0] fe_mul_0_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_21_reg;
reg [31:0] fe_mul_0_22;
reg [31:0] fe_mul_0_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_23_reg;
reg [31:0] fe_mul_0_24;
reg [31:0] fe_mul_0_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_25_reg;
reg [31:0] fe_mul_0_26;
reg [31:0] fe_mul_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_27_reg;
reg [31:0] fe_mul_0_28;
reg [31:0] fe_mul_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_29_reg;
reg [31:0] fe_mul_0_30;
reg [31:0] fe_mul_0_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_31_reg;
reg [31:0] fe_mul_0_32;
reg [31:0] fe_mul_0_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_33_reg;
reg [31:0] fe_mul_0_34;
reg [31:0] fe_mul_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_35_reg;
reg [31:0] fe_mul_0_36;
reg [31:0] fe_mul_0_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_37_reg;
reg [31:0] fe_mul_0_38;
reg [31:0] fe_mul_0_38_reg;
reg [31:0] fe_mul_0_39;
reg [31:0] fe_mul_0_39_reg;
reg [31:0] fe_mul_0_40;
reg [31:0] fe_mul_0_40_reg;
reg [31:0] fe_mul_0_41;
reg [31:0] fe_mul_0_41_reg;
reg [31:0] fe_mul_0_42;
reg [31:0] fe_mul_0_42_reg;
reg [31:0] fe_mul_0_43;
reg [31:0] fe_mul_0_43_reg;
reg [31:0] fe_mul_0_44;
reg [31:0] fe_mul_0_44_reg;
reg [31:0] fe_mul_0_45;
reg [31:0] fe_mul_0_45_reg;
reg [31:0] fe_mul_0_46;
reg [31:0] fe_mul_0_46_reg;
reg [31:0] fe_mul_0_47;
reg [31:0] fe_mul_0_47_reg;
reg [31:0] fe_mul_0_48;
reg [31:0] fe_mul_0_48_reg;
reg [31:0] fe_mul_0_49;
reg [31:0] fe_mul_0_49_reg;
reg [31:0] fe_mul_0_50;
reg [31:0] fe_mul_0_50_reg;
reg [31:0] fe_mul_0_51;
reg [31:0] fe_mul_0_51_reg;
reg [31:0] fe_mul_0_52;
reg [31:0] fe_mul_0_52_reg;
reg [31:0] fe_mul_0_53;
reg [31:0] fe_mul_0_53_reg;
reg [31:0] fe_mul_0_54;
reg [31:0] fe_mul_0_54_reg;
reg [31:0] fe_mul_0_55;
reg [31:0] fe_mul_0_55_reg;
reg [31:0] fe_mul_0_56;
reg [31:0] fe_mul_0_56_reg;
reg [31:0] fe_mul_0_57;
reg [31:0] fe_mul_0_57_reg;
reg [31:0] fe_mul_0_58;
reg [31:0] fe_mul_0_58_reg;
reg [31:0] fe_mul_0_59;
reg [31:0] fe_mul_0_59_reg;
reg [31:0] fe_mul_0_60;
reg [31:0] fe_mul_0_60_reg;
reg [31:0] fe_mul_0_61;
reg [31:0] fe_mul_0_61_reg;
reg [31:0] fe_mul_0_62;
reg [31:0] fe_mul_0_62_reg;
reg [31:0] fe_mul_0_63;
reg [31:0] fe_mul_0_63_reg;
reg [31:0] fe_mul_0_64;
reg [31:0] fe_mul_0_64_reg;
reg [31:0] fe_mul_0_65;
reg [31:0] fe_mul_0_65_reg;
reg [31:0] fe_mul_0_66;
reg [31:0] fe_mul_0_66_reg;
reg [31:0] fe_mul_0_67;
reg [31:0] fe_mul_0_67_reg;
reg [31:0] fe_mul_0_68;
reg [31:0] fe_mul_0_68_reg;
reg [31:0] fe_mul_0_69;
reg [31:0] fe_mul_0_69_reg;
reg [31:0] fe_mul_0_70;
reg [31:0] fe_mul_0_70_reg;
reg [31:0] fe_mul_0_71;
reg [31:0] fe_mul_0_71_reg;
reg [31:0] fe_mul_0_72;
reg [31:0] fe_mul_0_72_reg;
reg [31:0] fe_mul_0_73;
reg [31:0] fe_mul_0_73_reg;
reg [31:0] fe_mul_0_74;
reg [31:0] fe_mul_0_74_reg;
reg [31:0] fe_mul_0_75;
reg [31:0] fe_mul_0_75_reg;
reg [31:0] fe_mul_0_76;
reg [31:0] fe_mul_0_76_reg;
reg [31:0] fe_mul_0_77;
reg [31:0] fe_mul_0_77_reg;
reg [31:0] fe_mul_0_78;
reg [31:0] fe_mul_0_78_reg;
reg [31:0] fe_mul_0_79;
reg [31:0] fe_mul_0_79_reg;
reg [31:0] fe_mul_0_80;
reg [31:0] fe_mul_0_80_reg;
reg [31:0] fe_mul_0_81;
reg [31:0] fe_mul_0_81_reg;
reg [31:0] fe_mul_0_82;
reg [31:0] fe_mul_0_82_reg;
reg [31:0] fe_mul_0_83;
reg [31:0] fe_mul_0_83_reg;
reg [31:0] fe_mul_0_84;
reg [31:0] fe_mul_0_84_reg;
reg [31:0] fe_mul_0_85;
reg [31:0] fe_mul_0_85_reg;
reg [31:0] fe_mul_0_86;
reg [31:0] fe_mul_0_86_reg;
reg [31:0] fe_mul_0_87;
reg [31:0] fe_mul_0_87_reg;
reg [31:0] fe_mul_0_88;
reg [31:0] fe_mul_0_88_reg;
reg [31:0] fe_mul_0_89;
reg [31:0] fe_mul_0_89_reg;
reg [31:0] fe_mul_0_90;
reg [31:0] fe_mul_0_90_reg;
reg [31:0] fe_mul_0_91;
reg [31:0] fe_mul_0_91_reg;
reg [31:0] fe_mul_0_92;
reg [31:0] fe_mul_0_92_reg;
reg [31:0] fe_mul_0_93;
reg [31:0] fe_mul_0_93_reg;
reg [31:0] fe_mul_0_94;
reg [31:0] fe_mul_0_94_reg;
reg [31:0] fe_mul_0_95;
reg [31:0] fe_mul_0_95_reg;
reg [31:0] fe_mul_0_96;
reg [31:0] fe_mul_0_96_reg;
reg [31:0] fe_mul_0_97;
reg [31:0] fe_mul_0_97_reg;
reg [31:0] fe_mul_0_98;
reg [31:0] fe_mul_0_98_reg;
reg [31:0] fe_mul_0_99;
reg [31:0] fe_mul_0_99_reg;
reg [31:0] fe_mul_0_100;
reg [31:0] fe_mul_0_100_reg;
reg [31:0] fe_mul_0_101;
reg [31:0] fe_mul_0_101_reg;
reg [31:0] fe_mul_0_102;
reg [31:0] fe_mul_0_102_reg;
reg [31:0] fe_mul_0_103;
reg [31:0] fe_mul_0_103_reg;
reg [31:0] fe_mul_0_104;
reg [31:0] fe_mul_0_104_reg;
reg [31:0] fe_mul_0_105;
reg [31:0] fe_mul_0_105_reg;
reg [31:0] fe_mul_0_106;
reg [31:0] fe_mul_0_106_reg;
reg [31:0] fe_mul_0_107;
reg [31:0] fe_mul_0_107_reg;
reg [31:0] fe_mul_0_108;
reg [31:0] fe_mul_0_108_reg;
reg [31:0] fe_mul_0_109;
reg [31:0] fe_mul_0_109_reg;
reg [31:0] fe_mul_0_110;
reg [31:0] fe_mul_0_110_reg;
reg [31:0] fe_mul_0_111;
reg [31:0] fe_mul_0_111_reg;
reg [31:0] fe_mul_0_112;
reg [31:0] fe_mul_0_112_reg;
reg [31:0] fe_mul_0_113;
reg [31:0] fe_mul_0_113_reg;
reg [31:0] fe_mul_0_114;
reg [31:0] fe_mul_0_114_reg;
reg [31:0] fe_mul_0_115;
reg [31:0] fe_mul_0_115_reg;
reg [31:0] fe_mul_0_116;
reg [31:0] fe_mul_0_116_reg;
reg [31:0] fe_mul_0_117;
reg [31:0] fe_mul_0_117_reg;
reg [31:0] fe_mul_0_118;
reg [31:0] fe_mul_0_118_reg;
reg [31:0] fe_mul_0_119;
reg [31:0] fe_mul_0_119_reg;
reg [31:0] fe_mul_0_120;
reg [31:0] fe_mul_0_120_reg;
reg [31:0] fe_mul_0_121;
reg [31:0] fe_mul_0_121_reg;
reg [31:0] fe_mul_0_122;
reg [31:0] fe_mul_0_122_reg;
reg [31:0] fe_mul_0_123;
reg [31:0] fe_mul_0_123_reg;
reg [31:0] fe_mul_0_124;
reg [31:0] fe_mul_0_124_reg;
reg [31:0] fe_mul_0_125;
reg [31:0] fe_mul_0_125_reg;
reg [31:0] fe_mul_0_126;
reg [31:0] fe_mul_0_126_reg;
reg [31:0] fe_mul_0_127;
reg [31:0] fe_mul_0_127_reg;
reg [31:0] fe_mul_0_128;
reg [31:0] fe_mul_0_128_reg;
reg [31:0] fe_mul_0_129;
reg [31:0] fe_mul_0_129_reg;
reg [31:0] fe_mul_0_130;
reg [31:0] fe_mul_0_130_reg;
reg [31:0] fe_mul_0_131;
reg [31:0] fe_mul_0_131_reg;
reg [31:0] fe_mul_0_132;
reg [31:0] fe_mul_0_132_reg;
reg [31:0] fe_mul_0_133;
reg [31:0] fe_mul_0_133_reg;
reg [31:0] fe_mul_0_134;
reg [31:0] fe_mul_0_134_reg;
reg [31:0] fe_mul_0_135;
reg [31:0] fe_mul_0_135_reg;
reg [31:0] fe_mul_0_136;
reg [31:0] fe_mul_0_136_reg;
reg [31:0] fe_mul_0_137;
reg [31:0] fe_mul_0_137_reg;
reg [31:0] fe_mul_0_138;
reg [31:0] fe_mul_0_138_reg;
reg [31:0] fe_mul_0_139;
reg [31:0] fe_mul_0_139_reg;
reg [31:0] fe_mul_0_140;
reg [31:0] fe_mul_0_140_reg;
reg [31:0] fe_mul_0_141;
reg [31:0] fe_mul_0_141_reg;
reg [31:0] fe_mul_0_142;
reg [31:0] fe_mul_0_142_reg;
reg [31:0] fe_mul_0_143;
reg [31:0] fe_mul_0_143_reg;
reg [31:0] fe_mul_0_144;
reg [31:0] fe_mul_0_144_reg;
reg [31:0] fe_mul_0_145;
reg [31:0] fe_mul_0_145_reg;
reg [31:0] fe_mul_0_146;
reg [31:0] fe_mul_0_146_reg;
reg [31:0] fe_mul_0_147;
reg [31:0] fe_mul_0_147_reg;
reg [31:0] fe_mul_0_148;
reg [31:0] fe_mul_0_148_reg;
reg [31:0] fe_mul_0_149;
reg [31:0] fe_mul_0_149_reg;
reg [31:0] fe_mul_0_150;
reg [31:0] fe_mul_0_150_reg;
reg [31:0] fe_mul_0_151;
reg [31:0] fe_mul_0_151_reg;
reg [31:0] fe_mul_0_152;
reg [31:0] fe_mul_0_152_reg;
reg [31:0] fe_mul_0_153;
reg [31:0] fe_mul_0_153_reg;
reg [31:0] fe_mul_0_154;
reg [31:0] fe_mul_0_154_reg;
reg [31:0] fe_mul_0_155;
reg [31:0] fe_mul_0_155_reg;
reg [31:0] fe_mul_0_156;
reg [31:0] fe_mul_0_156_reg;
reg [31:0] fe_mul_0_157;
reg [31:0] fe_mul_0_157_reg;
reg [31:0] fe_mul_0_158;
reg [31:0] fe_mul_0_158_reg;
reg [31:0] fe_mul_0_159;
reg [31:0] fe_mul_0_159_reg;
reg [31:0] fe_mul_0_160;
reg [31:0] fe_mul_0_160_reg;
reg [31:0] fe_mul_0_161;
reg [31:0] fe_mul_0_161_reg;
reg [31:0] fe_mul_0_162;
reg [31:0] fe_mul_0_162_reg;
reg [31:0] fe_mul_0_163;
reg [31:0] fe_mul_0_163_reg;
reg [31:0] fe_mul_0_164;
reg [31:0] fe_mul_0_164_reg;
reg [31:0] fe_mul_0_165;
reg [31:0] fe_mul_0_165_reg;
reg [31:0] fe_mul_0_166;
reg [31:0] fe_mul_0_166_reg;
reg [31:0] fe_mul_0_167;
reg [31:0] fe_mul_0_167_reg;
reg [31:0] fe_mul_0_168;
reg [31:0] fe_mul_0_168_reg;
reg [31:0] fe_mul_0_169;
reg [31:0] fe_mul_0_169_reg;
reg [31:0] fe_mul_0_170;
reg [31:0] fe_mul_0_170_reg;
reg [31:0] fe_mul_0_171;
reg [31:0] fe_mul_0_171_reg;
reg [31:0] fe_mul_0_172;
reg [31:0] fe_mul_0_172_reg;
reg [31:0] fe_mul_0_173;
reg [31:0] fe_mul_0_173_reg;
reg [31:0] fe_mul_0_174;
reg [31:0] fe_mul_0_174_reg;
reg [31:0] fe_mul_0_175;
reg [31:0] fe_mul_0_175_reg;
reg [31:0] fe_mul_0_176;
reg [31:0] fe_mul_0_176_reg;
reg [31:0] fe_mul_0_177;
reg [31:0] fe_mul_0_177_reg;
reg [31:0] fe_mul_0_178;
reg [31:0] fe_mul_0_178_reg;
reg [31:0] fe_mul_0_179;
reg [31:0] fe_mul_0_179_reg;
reg [31:0] fe_mul_0_180;
reg [31:0] fe_mul_0_180_reg;
reg [31:0] fe_mul_0_181;
reg [31:0] fe_mul_0_181_reg;
reg [31:0] fe_mul_0_182;
reg [31:0] fe_mul_0_182_reg;
reg [31:0] fe_mul_0_183;
reg [31:0] fe_mul_0_183_reg;
reg [31:0] fe_mul_0_184;
reg [31:0] fe_mul_0_184_reg;
reg [31:0] fe_mul_0_185;
reg [31:0] fe_mul_0_185_reg;
reg [31:0] fe_mul_0_186;
reg [31:0] fe_mul_0_186_reg;
reg [31:0] fe_mul_0_187;
reg [31:0] fe_mul_0_187_reg;
reg [31:0] fe_mul_0_188;
reg [31:0] fe_mul_0_188_reg;
reg [31:0] fe_mul_0_189;
reg [31:0] fe_mul_0_189_reg;
reg [31:0] fe_mul_0_190;
reg [31:0] fe_mul_0_190_reg;
reg [31:0] fe_mul_0_191;
reg [31:0] fe_mul_0_191_reg;
reg [31:0] fe_mul_0_192;
reg [31:0] fe_mul_0_192_reg;
reg [31:0] fe_mul_0_193;
reg [31:0] fe_mul_0_193_reg;
reg [31:0] fe_mul_0_194;
reg [31:0] fe_mul_0_194_reg;
reg [31:0] fe_mul_0_195;
reg [31:0] fe_mul_0_195_reg;
reg [31:0] fe_mul_0_196;
reg [31:0] fe_mul_0_196_reg;
reg [31:0] fe_mul_0_197;
reg [31:0] fe_mul_0_197_reg;
reg [31:0] fe_mul_0_198;
reg [31:0] fe_mul_0_198_reg;
reg [31:0] fe_mul_0_199;
reg [31:0] fe_mul_0_199_reg;
reg [31:0] fe_mul_0_200;
reg [31:0] fe_mul_0_200_reg;
reg [31:0] fe_mul_0_201;
reg [31:0] fe_mul_0_201_reg;
reg [31:0] fe_mul_0_202;
reg [31:0] fe_mul_0_202_reg;
reg [31:0] fe_mul_0_203;
reg [31:0] fe_mul_0_203_reg;
reg [31:0] fe_mul_0_204;
reg [31:0] fe_mul_0_204_reg;
reg [31:0] fe_mul_0_205;
reg [31:0] fe_mul_0_205_reg;
reg [31:0] fe_mul_0_206;
reg [31:0] fe_mul_0_206_reg;
reg [31:0] fe_mul_0_207;
reg [31:0] fe_mul_0_207_reg;
reg [31:0] fe_mul_0_208;
reg [31:0] fe_mul_0_208_reg;
reg [31:0] fe_mul_0_209;
reg [31:0] fe_mul_0_209_reg;
reg [31:0] fe_mul_0_210;
reg [31:0] fe_mul_0_210_reg;
reg [31:0] fe_mul_0_211;
reg [31:0] fe_mul_0_211_reg;
reg [31:0] fe_mul_0_212;
reg [31:0] fe_mul_0_212_reg;
reg [31:0] fe_mul_0_213;
reg [31:0] fe_mul_0_213_reg;
reg [31:0] fe_mul_0_214;
reg [31:0] fe_mul_0_214_reg;
reg [31:0] fe_mul_0_215;
reg [31:0] fe_mul_0_215_reg;
reg [31:0] fe_mul_0_216;
reg [31:0] fe_mul_0_216_reg;
reg [31:0] fe_mul_0_217;
reg [31:0] fe_mul_0_217_reg;
reg [31:0] fe_mul_0_218;
reg [31:0] fe_mul_0_218_reg;
reg [31:0] fe_mul_0_219;
reg [31:0] fe_mul_0_219_reg;
reg [31:0] fe_mul_0_220;
reg [31:0] fe_mul_0_220_reg;
reg [31:0] fe_mul_0_221;
reg [31:0] fe_mul_0_221_reg;
reg [31:0] fe_mul_0_222;
reg [31:0] fe_mul_0_222_reg;
reg [31:0] fe_mul_0_223;
reg [31:0] fe_mul_0_223_reg;
reg [31:0] fe_mul_0_224;
reg [31:0] fe_mul_0_224_reg;
reg [31:0] fe_mul_0_225;
reg [31:0] fe_mul_0_225_reg;
reg [31:0] fe_mul_0_226;
reg [31:0] fe_mul_0_226_reg;
reg [31:0] fe_mul_0_227;
reg [31:0] fe_mul_0_227_reg;
reg [31:0] fe_mul_0_228;
reg [31:0] fe_mul_0_228_reg;
reg [31:0] fe_mul_0_229;
reg [31:0] fe_mul_0_229_reg;
reg [31:0] fe_mul_0_230;
reg [31:0] fe_mul_0_230_reg;
reg [31:0] fe_mul_0_231;
reg [31:0] fe_mul_0_231_reg;
reg [31:0] fe_mul_0_232;
reg [31:0] fe_mul_0_232_reg;
reg [31:0] fe_mul_0_233;
reg [31:0] fe_mul_0_233_reg;
reg [31:0] fe_mul_0_234;
reg [31:0] fe_mul_0_234_reg;
reg [31:0] fe_mul_0_235;
reg [31:0] fe_mul_0_235_reg;
reg [31:0] fe_mul_0_236;
reg [31:0] fe_mul_0_236_reg;
reg [31:0] fe_mul_0_237;
reg [31:0] fe_mul_0_237_reg;
reg [31:0] fe_mul_0_238;
reg [31:0] fe_mul_0_238_reg;
reg [31:0] fe_mul_0_239;
reg [31:0] fe_mul_0_239_reg;
reg [31:0] fe_mul_0_240;
reg [31:0] fe_mul_0_240_reg;
reg [31:0] fe_mul_0_241;
reg [31:0] fe_mul_0_241_reg;
reg [31:0] fe_mul_0_242;
reg [31:0] fe_mul_0_242_reg;
reg [31:0] fe_mul_0_243;
reg [31:0] fe_mul_0_243_reg;
reg [31:0] fe_mul_0_244;
reg [31:0] fe_mul_0_244_reg;
reg [31:0] fe_mul_0_245;
reg [31:0] fe_mul_0_245_reg;
reg [31:0] fe_mul_0_246;
reg [31:0] fe_mul_0_246_reg;
reg [31:0] fe_mul_0_247;
reg [31:0] fe_mul_0_247_reg;
reg [31:0] fe_mul_0_248;
reg [31:0] fe_mul_0_248_reg;
reg [31:0] fe_mul_0_249;
reg [31:0] fe_mul_0_249_reg;
reg [31:0] fe_mul_0_250;
reg [31:0] fe_mul_0_250_reg;
reg [31:0] fe_mul_0_251;
reg [31:0] fe_mul_0_251_reg;
reg [31:0] fe_mul_0_252;
reg [31:0] fe_mul_0_252_reg;
reg [31:0] fe_mul_0_253;
reg [31:0] fe_mul_0_253_reg;
reg [31:0] fe_mul_0_254;
reg [31:0] fe_mul_0_254_reg;
reg [31:0] fe_mul_0_255;
reg [31:0] fe_mul_0_255_reg;
reg [31:0] fe_mul_0_256;
reg [31:0] fe_mul_0_256_reg;
reg [31:0] fe_mul_0_257;
reg [31:0] fe_mul_0_257_reg;
reg [31:0] fe_mul_0_258;
reg [31:0] fe_mul_0_258_reg;
reg [31:0] fe_mul_0_259;
reg [31:0] fe_mul_0_259_reg;
reg [31:0] fe_mul_0_260;
reg [31:0] fe_mul_0_260_reg;
reg [31:0] fe_mul_0_261;
reg [31:0] fe_mul_0_261_reg;
reg [31:0] fe_mul_0_262;
reg [31:0] fe_mul_0_262_reg;
reg [31:0] fe_mul_0_263;
reg [31:0] fe_mul_0_263_reg;
reg [31:0] fe_mul_0_264;
reg [31:0] fe_mul_0_264_reg;
reg [31:0] fe_mul_0_265;
reg [31:0] fe_mul_0_265_reg;
reg [31:0] fe_mul_0_266;
reg [31:0] fe_mul_0_266_reg;
reg [31:0] fe_mul_0_267;
reg [31:0] fe_mul_0_267_reg;
reg [31:0] fe_mul_0_268;
reg [31:0] fe_mul_0_268_reg;
reg [31:0] fe_mul_0_269;
reg [31:0] fe_mul_0_269_reg;
reg [31:0] fe_mul_0_270;
reg [31:0] fe_mul_0_270_reg;
reg [31:0] fe_mul_0_271;
reg [31:0] fe_mul_0_271_reg;
reg [31:0] fe_mul_0_272;
reg [31:0] fe_mul_0_272_reg;
reg [31:0] fe_mul_0_273;
reg [31:0] fe_mul_0_273_reg;
reg [31:0] fe_mul_0_274;
reg [31:0] fe_mul_0_274_reg;
reg [31:0] fe_mul_0_275;
reg [31:0] fe_mul_0_275_reg;
reg [31:0] fe_mul_0_276;
reg [31:0] fe_mul_0_276_reg;
reg [31:0] fe_mul_0_277;
reg [31:0] fe_mul_0_277_reg;
reg [31:0] fe_mul_0_278;
reg [31:0] fe_mul_0_278_reg;
reg [31:0] fe_mul_0_279;
reg [31:0] fe_mul_0_279_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_280;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_280_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_281_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_282_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_283;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_283_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_285_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_286_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_288;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_0_288_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fe_mul_0_143_en;
reg [31:0] fe_mul_0_143_stage0_reg;
reg  lpm_mult_fe_mul_0_52_en;
reg [31:0] fe_mul_0_52_stage0_reg;
reg  lpm_mult_fe_mul_0_53_en;
reg [31:0] fe_mul_0_53_stage0_reg;
reg  lpm_mult_fe_mul_0_72_en;
reg [31:0] fe_mul_0_72_stage0_reg;
reg  lpm_mult_fe_mul_0_73_en;
reg [31:0] fe_mul_0_73_stage0_reg;
reg  lpm_mult_fe_mul_0_82_en;
reg [31:0] fe_mul_0_82_stage0_reg;
reg  lpm_mult_fe_mul_0_83_en;
reg [31:0] fe_mul_0_83_stage0_reg;
reg  lpm_mult_fe_mul_0_92_en;
reg [31:0] fe_mul_0_92_stage0_reg;
reg  lpm_mult_fe_mul_0_93_en;
reg [31:0] fe_mul_0_93_stage0_reg;
reg  lpm_mult_fe_mul_0_102_en;
reg [31:0] fe_mul_0_102_stage0_reg;
reg  lpm_mult_fe_mul_0_103_en;
reg [31:0] fe_mul_0_103_stage0_reg;
reg  lpm_mult_fe_mul_0_142_en;
reg [31:0] fe_mul_0_142_stage0_reg;
reg  lpm_mult_fe_mul_0_144_en;
reg [31:0] fe_mul_0_144_stage0_reg;
reg  lpm_mult_fe_mul_0_39_en;
reg [31:0] fe_mul_0_39_stage0_reg;
reg  lpm_mult_fe_mul_0_42_en;
reg [31:0] fe_mul_0_42_stage0_reg;
reg  lpm_mult_fe_mul_0_54_en;
reg [31:0] fe_mul_0_54_stage0_reg;
reg  lpm_mult_fe_mul_0_57_en;
reg [31:0] fe_mul_0_57_stage0_reg;
reg  lpm_mult_fe_mul_0_74_en;
reg [31:0] fe_mul_0_74_stage0_reg;
reg  lpm_mult_fe_mul_0_77_en;
reg [31:0] fe_mul_0_77_stage0_reg;
reg  lpm_mult_fe_mul_0_84_en;
reg [31:0] fe_mul_0_84_stage0_reg;
reg  lpm_mult_fe_mul_0_87_en;
reg [31:0] fe_mul_0_87_stage0_reg;
reg  lpm_mult_fe_mul_0_94_en;
reg [31:0] fe_mul_0_94_stage0_reg;
reg  lpm_mult_fe_mul_0_97_en;
reg [31:0] fe_mul_0_97_stage0_reg;
reg  lpm_mult_fe_mul_0_104_en;
reg [31:0] fe_mul_0_104_stage0_reg;
reg  lpm_mult_fe_mul_0_62_en;
reg [31:0] fe_mul_0_62_stage0_reg;
reg  lpm_mult_fe_mul_0_63_en;
reg [31:0] fe_mul_0_63_stage0_reg;
reg  lpm_mult_fe_mul_0_64_en;
reg [31:0] fe_mul_0_64_stage0_reg;
reg  lpm_mult_fe_mul_0_67_en;
reg [31:0] fe_mul_0_67_stage0_reg;
reg  lpm_mult_fe_mul_0_107_en;
reg [31:0] fe_mul_0_107_stage0_reg;
reg  lpm_mult_fe_mul_0_112_en;
reg [31:0] fe_mul_0_112_stage0_reg;
reg  lpm_mult_fe_mul_0_113_en;
reg [31:0] fe_mul_0_113_stage0_reg;
reg  lpm_mult_fe_mul_0_114_en;
reg [31:0] fe_mul_0_114_stage0_reg;
reg  lpm_mult_fe_mul_0_117_en;
reg [31:0] fe_mul_0_117_stage0_reg;
reg  lpm_mult_fe_mul_0_145_en;
reg [31:0] fe_mul_0_145_stage0_reg;
reg  lpm_mult_fe_mul_0_148_en;
reg [31:0] fe_mul_0_148_stage0_reg;
reg  lpm_mult_fe_mul_0_40_en;
reg [31:0] fe_mul_0_40_stage0_reg;
reg  lpm_mult_fe_mul_0_41_en;
reg [31:0] fe_mul_0_41_stage0_reg;
reg  lpm_mult_fe_mul_0_55_en;
reg [31:0] fe_mul_0_55_stage0_reg;
reg  lpm_mult_fe_mul_0_56_en;
reg [31:0] fe_mul_0_56_stage0_reg;
reg  lpm_mult_fe_mul_0_65_en;
reg [31:0] fe_mul_0_65_stage0_reg;
reg  lpm_mult_fe_mul_0_66_en;
reg [31:0] fe_mul_0_66_stage0_reg;
reg  lpm_mult_fe_mul_0_75_en;
reg [31:0] fe_mul_0_75_stage0_reg;
reg  lpm_mult_fe_mul_0_76_en;
reg [31:0] fe_mul_0_76_stage0_reg;
reg  lpm_mult_fe_mul_0_85_en;
reg [31:0] fe_mul_0_85_stage0_reg;
reg  lpm_mult_fe_mul_0_86_en;
reg [31:0] fe_mul_0_86_stage0_reg;
reg  lpm_mult_fe_mul_0_95_en;
reg [31:0] fe_mul_0_95_stage0_reg;
reg  lpm_mult_fe_mul_0_96_en;
reg [31:0] fe_mul_0_96_stage0_reg;
reg  lpm_mult_fe_mul_0_105_en;
reg [31:0] fe_mul_0_105_stage0_reg;
reg  lpm_mult_fe_mul_0_106_en;
reg [31:0] fe_mul_0_106_stage0_reg;
reg  lpm_mult_fe_mul_0_115_en;
reg [31:0] fe_mul_0_115_stage0_reg;
reg  lpm_mult_fe_mul_0_43_en;
reg [31:0] fe_mul_0_43_stage0_reg;
reg  lpm_mult_fe_mul_0_44_en;
reg [31:0] fe_mul_0_44_stage0_reg;
reg  lpm_mult_fe_mul_0_58_en;
reg [31:0] fe_mul_0_58_stage0_reg;
reg  lpm_mult_fe_mul_0_59_en;
reg [31:0] fe_mul_0_59_stage0_reg;
reg  lpm_mult_fe_mul_0_68_en;
reg [31:0] fe_mul_0_68_stage0_reg;
reg  lpm_mult_fe_mul_0_69_en;
reg [31:0] fe_mul_0_69_stage0_reg;
reg  lpm_mult_fe_mul_0_78_en;
reg [31:0] fe_mul_0_78_stage0_reg;
reg  lpm_mult_fe_mul_0_79_en;
reg [31:0] fe_mul_0_79_stage0_reg;
reg  lpm_mult_fe_mul_0_88_en;
reg [31:0] fe_mul_0_88_stage0_reg;
reg  lpm_mult_fe_mul_0_116_en;
reg [31:0] fe_mul_0_116_stage0_reg;
reg  lpm_mult_fe_mul_0_146_en;
reg [31:0] fe_mul_0_146_stage0_reg;
reg  lpm_mult_fe_mul_0_147_en;
reg [31:0] fe_mul_0_147_stage0_reg;
reg  lpm_mult_fe_mul_0_45_en;
reg [31:0] fe_mul_0_45_stage0_reg;
reg  lpm_mult_fe_mul_0_60_en;
reg [31:0] fe_mul_0_60_stage0_reg;
reg  lpm_mult_fe_mul_0_70_en;
reg [31:0] fe_mul_0_70_stage0_reg;
reg  lpm_mult_fe_mul_0_89_en;
reg [31:0] fe_mul_0_89_stage0_reg;
reg  lpm_mult_fe_mul_0_98_en;
reg [31:0] fe_mul_0_98_stage0_reg;
reg  lpm_mult_fe_mul_0_99_en;
reg [31:0] fe_mul_0_99_stage0_reg;
reg  lpm_mult_fe_mul_0_108_en;
reg [31:0] fe_mul_0_108_stage0_reg;
reg  lpm_mult_fe_mul_0_109_en;
reg [31:0] fe_mul_0_109_stage0_reg;
reg  lpm_mult_fe_mul_0_118_en;
reg [31:0] fe_mul_0_118_stage0_reg;
reg  lpm_mult_fe_mul_0_119_en;
reg [31:0] fe_mul_0_119_stage0_reg;
reg  lpm_mult_fe_mul_0_122_en;
reg [31:0] fe_mul_0_122_stage0_reg;
reg  lpm_mult_fe_mul_0_123_en;
reg [31:0] fe_mul_0_123_stage0_reg;
reg  lpm_mult_fe_mul_0_124_en;
reg [31:0] fe_mul_0_124_stage0_reg;
reg  lpm_mult_fe_mul_0_125_en;
reg [31:0] fe_mul_0_125_stage0_reg;
reg  lpm_mult_fe_mul_0_126_en;
reg [31:0] fe_mul_0_126_stage0_reg;
reg  lpm_mult_fe_mul_0_127_en;
reg [31:0] fe_mul_0_127_stage0_reg;
reg  lpm_mult_fe_mul_0_128_en;
reg [31:0] fe_mul_0_128_stage0_reg;
reg  lpm_mult_fe_mul_0_129_en;
reg [31:0] fe_mul_0_129_stage0_reg;
reg  lpm_mult_fe_mul_0_149_en;
reg [31:0] fe_mul_0_149_stage0_reg;
reg  lpm_mult_fe_mul_0_150_en;
reg [31:0] fe_mul_0_150_stage0_reg;
reg  lpm_mult_fe_mul_0_46_en;
reg [31:0] fe_mul_0_46_stage0_reg;
reg  lpm_mult_fe_mul_0_61_en;
reg [31:0] fe_mul_0_61_stage0_reg;
reg  lpm_mult_fe_mul_0_80_en;
reg [31:0] fe_mul_0_80_stage0_reg;
reg  lpm_mult_fe_mul_0_90_en;
reg [31:0] fe_mul_0_90_stage0_reg;
reg  lpm_mult_fe_mul_0_100_en;
reg [31:0] fe_mul_0_100_stage0_reg;
reg  lpm_mult_fe_mul_0_110_en;
reg [31:0] fe_mul_0_110_stage0_reg;
reg  lpm_mult_fe_mul_0_120_en;
reg [31:0] fe_mul_0_120_stage0_reg;
reg  lpm_mult_fe_mul_0_130_en;
reg [31:0] fe_mul_0_130_stage0_reg;
reg  lpm_mult_fe_mul_0_132_en;
reg [31:0] fe_mul_0_132_stage0_reg;
reg  lpm_mult_fe_mul_0_133_en;
reg [31:0] fe_mul_0_133_stage0_reg;
reg  lpm_mult_fe_mul_0_134_en;
reg [31:0] fe_mul_0_134_stage0_reg;
reg  lpm_mult_fe_mul_0_135_en;
reg [31:0] fe_mul_0_135_stage0_reg;
reg  lpm_mult_fe_mul_0_136_en;
reg [31:0] fe_mul_0_136_stage0_reg;
reg  lpm_mult_fe_mul_0_137_en;
reg [31:0] fe_mul_0_137_stage0_reg;
reg  lpm_mult_fe_mul_0_138_en;
reg [31:0] fe_mul_0_138_stage0_reg;
reg  lpm_mult_fe_mul_0_139_en;
reg [31:0] fe_mul_0_139_stage0_reg;
reg  lpm_mult_fe_mul_0_140_en;
reg [31:0] fe_mul_0_140_stage0_reg;
reg  lpm_mult_fe_mul_0_151_en;
reg [31:0] fe_mul_0_151_stage0_reg;
reg  lpm_mult_fe_mul_0_71_en;
reg [31:0] fe_mul_0_71_stage0_reg;
reg  lpm_mult_fe_mul_0_81_en;
reg [31:0] fe_mul_0_81_stage0_reg;
reg  lpm_mult_fe_mul_0_91_en;
reg [31:0] fe_mul_0_91_stage0_reg;
reg  lpm_mult_fe_mul_0_101_en;
reg [31:0] fe_mul_0_101_stage0_reg;
reg  lpm_mult_fe_mul_0_111_en;
reg [31:0] fe_mul_0_111_stage0_reg;
reg  lpm_mult_fe_mul_0_121_en;
reg [31:0] fe_mul_0_121_stage0_reg;
reg  lpm_mult_fe_mul_0_131_en;
reg [31:0] fe_mul_0_131_stage0_reg;
reg  lpm_mult_fe_mul_0_141_en;
reg [31:0] fe_mul_0_141_stage0_reg;
reg  lpm_mult_fe_mul_0_152_en;
reg [31:0] fe_mul_0_152_stage0_reg;
reg  lpm_mult_fe_mul_0_275_en;
reg [31:0] fe_mul_0_275_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fe_mul_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fe_mul_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fe_mul_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
begin
fe_mul_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
fe_mul_0_1_reg <= fe_mul_0_1;
if (reset == 1'b0 && ^(fe_mul_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_1_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %2 = getelementptr inbounds i32* %f, i32 1*/
begin
fe_mul_0_2 = (arg_f + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %2 = getelementptr inbounds i32* %f, i32 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_2_reg <= fe_mul_0_2;
if (reset == 1'b0 && ^(fe_mul_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_2_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
begin
fe_mul_0_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_3_reg <= fe_mul_0_3;
if (reset == 1'b0 && ^(fe_mul_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %4 = getelementptr inbounds i32* %f, i32 2*/
begin
fe_mul_0_4 = (arg_f + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %4 = getelementptr inbounds i32* %f, i32 2*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_4_reg <= fe_mul_0_4;
if (reset == 1'b0 && ^(fe_mul_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
fe_mul_0_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
fe_mul_0_5_reg <= fe_mul_0_5;
if (reset == 1'b0 && ^(fe_mul_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_5_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %6 = getelementptr inbounds i32* %f, i32 3*/
begin
fe_mul_0_6 = (arg_f + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %6 = getelementptr inbounds i32* %f, i32 3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_6_reg <= fe_mul_0_6;
if (reset == 1'b0 && ^(fe_mul_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_6_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
fe_mul_0_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
fe_mul_0_7_reg <= fe_mul_0_7;
if (reset == 1'b0 && ^(fe_mul_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_7_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %8 = getelementptr inbounds i32* %f, i32 4*/
begin
fe_mul_0_8 = (arg_f + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %8 = getelementptr inbounds i32* %f, i32 4*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_8_reg <= fe_mul_0_8;
if (reset == 1'b0 && ^(fe_mul_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_8_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
fe_mul_0_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
fe_mul_0_9_reg <= fe_mul_0_9;
if (reset == 1'b0 && ^(fe_mul_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_9_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %10 = getelementptr inbounds i32* %f, i32 5*/
begin
fe_mul_0_10 = (arg_f + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %10 = getelementptr inbounds i32* %f, i32 5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_10_reg <= fe_mul_0_10;
if (reset == 1'b0 && ^(fe_mul_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_10_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
fe_mul_0_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
fe_mul_0_11_reg <= fe_mul_0_11;
if (reset == 1'b0 && ^(fe_mul_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_11_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %12 = getelementptr inbounds i32* %f, i32 6*/
begin
fe_mul_0_12 = (arg_f + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %12 = getelementptr inbounds i32* %f, i32 6*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_12_reg <= fe_mul_0_12;
if (reset == 1'b0 && ^(fe_mul_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_12_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
fe_mul_0_13 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_13_reg <= fe_mul_0_13;
if (reset == 1'b0 && ^(fe_mul_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_13_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %14 = getelementptr inbounds i32* %f, i32 7*/
begin
fe_mul_0_14 = (arg_f + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %14 = getelementptr inbounds i32* %f, i32 7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_14_reg <= fe_mul_0_14;
if (reset == 1'b0 && ^(fe_mul_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_14_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
fe_mul_0_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_15_reg <= fe_mul_0_15;
if (reset == 1'b0 && ^(fe_mul_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_15_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %16 = getelementptr inbounds i32* %f, i32 8*/
begin
fe_mul_0_16 = (arg_f + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %16 = getelementptr inbounds i32* %f, i32 8*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_16_reg <= fe_mul_0_16;
if (reset == 1'b0 && ^(fe_mul_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_16_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
begin
fe_mul_0_17 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_17_reg <= fe_mul_0_17;
if (reset == 1'b0 && ^(fe_mul_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_17_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %18 = getelementptr inbounds i32* %f, i32 9*/
begin
fe_mul_0_18 = (arg_f + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %18 = getelementptr inbounds i32* %f, i32 9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_18_reg <= fe_mul_0_18;
if (reset == 1'b0 && ^(fe_mul_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_18_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
fe_mul_0_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
fe_mul_0_19_reg <= fe_mul_0_19;
if (reset == 1'b0 && ^(fe_mul_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_19_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
begin
fe_mul_0_20 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
fe_mul_0_20_reg <= fe_mul_0_20;
if (reset == 1'b0 && ^(fe_mul_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_20_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %21 = getelementptr inbounds i32* %g, i32 1*/
begin
fe_mul_0_21 = (arg_g + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %21 = getelementptr inbounds i32* %g, i32 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_21_reg <= fe_mul_0_21;
if (reset == 1'b0 && ^(fe_mul_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_21_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
begin
fe_mul_0_22 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
fe_mul_0_22_reg <= fe_mul_0_22;
if (reset == 1'b0 && ^(fe_mul_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_22_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %23 = getelementptr inbounds i32* %g, i32 2*/
begin
fe_mul_0_23 = (arg_g + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %23 = getelementptr inbounds i32* %g, i32 2*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_23_reg <= fe_mul_0_23;
if (reset == 1'b0 && ^(fe_mul_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_23_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
begin
fe_mul_0_24 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_24_reg <= fe_mul_0_24;
if (reset == 1'b0 && ^(fe_mul_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_24_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %25 = getelementptr inbounds i32* %g, i32 3*/
begin
fe_mul_0_25 = (arg_g + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %25 = getelementptr inbounds i32* %g, i32 3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_25_reg <= fe_mul_0_25;
if (reset == 1'b0 && ^(fe_mul_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_25_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
begin
fe_mul_0_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_26_reg <= fe_mul_0_26;
if (reset == 1'b0 && ^(fe_mul_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_26_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %27 = getelementptr inbounds i32* %g, i32 4*/
begin
fe_mul_0_27 = (arg_g + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %27 = getelementptr inbounds i32* %g, i32 4*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_27_reg <= fe_mul_0_27;
if (reset == 1'b0 && ^(fe_mul_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_27_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
begin
fe_mul_0_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_28_reg <= fe_mul_0_28;
if (reset == 1'b0 && ^(fe_mul_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_28_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %29 = getelementptr inbounds i32* %g, i32 5*/
begin
fe_mul_0_29 = (arg_g + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %29 = getelementptr inbounds i32* %g, i32 5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_29_reg <= fe_mul_0_29;
if (reset == 1'b0 && ^(fe_mul_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_29_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
begin
fe_mul_0_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_30_reg <= fe_mul_0_30;
if (reset == 1'b0 && ^(fe_mul_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_30_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %31 = getelementptr inbounds i32* %g, i32 6*/
begin
fe_mul_0_31 = (arg_g + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %31 = getelementptr inbounds i32* %g, i32 6*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_31_reg <= fe_mul_0_31;
if (reset == 1'b0 && ^(fe_mul_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_31_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
begin
fe_mul_0_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_32_reg <= fe_mul_0_32;
if (reset == 1'b0 && ^(fe_mul_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_32_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %33 = getelementptr inbounds i32* %g, i32 7*/
begin
fe_mul_0_33 = (arg_g + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %33 = getelementptr inbounds i32* %g, i32 7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_33_reg <= fe_mul_0_33;
if (reset == 1'b0 && ^(fe_mul_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_33_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
begin
fe_mul_0_34 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_34_reg <= fe_mul_0_34;
if (reset == 1'b0 && ^(fe_mul_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_34_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %35 = getelementptr inbounds i32* %g, i32 8*/
begin
fe_mul_0_35 = (arg_g + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %35 = getelementptr inbounds i32* %g, i32 8*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_35_reg <= fe_mul_0_35;
if (reset == 1'b0 && ^(fe_mul_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_35_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
begin
fe_mul_0_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_36_reg <= fe_mul_0_36;
if (reset == 1'b0 && ^(fe_mul_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_36_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %37 = getelementptr inbounds i32* %g, i32 9*/
begin
fe_mul_0_37 = (arg_g + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %37 = getelementptr inbounds i32* %g, i32 9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_37_reg <= fe_mul_0_37;
if (reset == 1'b0 && ^(fe_mul_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_37_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
begin
fe_mul_0_38 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_38_reg <= fe_mul_0_38;
if (reset == 1'b0 && ^(fe_mul_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_38_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_39 = fe_mul_0_39_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %39 = mul nsw i32 %24, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_39_reg <= fe_mul_0_39;
if (reset == 1'b0 && ^(fe_mul_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_39_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %39 = mul nsw i32 %24, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_39_reg <= fe_mul_0_39;
if (reset == 1'b0 && ^(fe_mul_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_39_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_40 = fe_mul_0_40_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %40 = mul nsw i32 %26, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_40_reg <= fe_mul_0_40;
if (reset == 1'b0 && ^(fe_mul_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_40_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %40 = mul nsw i32 %26, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_40_reg <= fe_mul_0_40;
if (reset == 1'b0 && ^(fe_mul_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_40_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_41 = fe_mul_0_41_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %41 = mul nsw i32 %28, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_41_reg <= fe_mul_0_41;
if (reset == 1'b0 && ^(fe_mul_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_41_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %41 = mul nsw i32 %28, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_41_reg <= fe_mul_0_41;
if (reset == 1'b0 && ^(fe_mul_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_41_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_42 = fe_mul_0_42_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %42 = mul nsw i32 %30, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_42_reg <= fe_mul_0_42;
if (reset == 1'b0 && ^(fe_mul_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_42_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %42 = mul nsw i32 %30, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_42_reg <= fe_mul_0_42;
if (reset == 1'b0 && ^(fe_mul_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_42_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_43 = fe_mul_0_43_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %43 = mul nsw i32 %32, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_43_reg <= fe_mul_0_43;
if (reset == 1'b0 && ^(fe_mul_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_43_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %43 = mul nsw i32 %32, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_43_reg <= fe_mul_0_43;
if (reset == 1'b0 && ^(fe_mul_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_43_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_44 = fe_mul_0_44_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %44 = mul nsw i32 %34, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_44_reg <= fe_mul_0_44;
if (reset == 1'b0 && ^(fe_mul_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_44_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %44 = mul nsw i32 %34, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_44_reg <= fe_mul_0_44;
if (reset == 1'b0 && ^(fe_mul_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_44_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_45 = fe_mul_0_45_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %45 = mul nsw i32 %36, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_45_reg <= fe_mul_0_45;
if (reset == 1'b0 && ^(fe_mul_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_45_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %45 = mul nsw i32 %36, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_45_reg <= fe_mul_0_45;
if (reset == 1'b0 && ^(fe_mul_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_45_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_46 = fe_mul_0_46_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %46 = mul nsw i32 %38, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_46_reg <= fe_mul_0_46;
if (reset == 1'b0 && ^(fe_mul_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_46_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %46 = mul nsw i32 %38, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_46_reg <= fe_mul_0_46;
if (reset == 1'b0 && ^(fe_mul_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_46_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %47 = shl nsw i32 %3, 1*/
begin
fe_mul_0_47 = (fe_mul_0_3 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %47 = shl nsw i32 %3, 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_47_reg <= fe_mul_0_47;
if (reset == 1'b0 && ^(fe_mul_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_47_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %48 = shl nsw i32 %7, 1*/
begin
fe_mul_0_48 = (fe_mul_0_7 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %48 = shl nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
fe_mul_0_48_reg <= fe_mul_0_48;
if (reset == 1'b0 && ^(fe_mul_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_48_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %49 = shl nsw i32 %11, 1*/
begin
fe_mul_0_49 = (fe_mul_0_11 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %49 = shl nsw i32 %11, 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
fe_mul_0_49_reg <= fe_mul_0_49;
if (reset == 1'b0 && ^(fe_mul_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_49_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %50 = shl nsw i32 %15, 1*/
begin
fe_mul_0_50 = (fe_mul_0_15 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %50 = shl nsw i32 %15, 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_50_reg <= fe_mul_0_50;
if (reset == 1'b0 && ^(fe_mul_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_50_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %51 = shl nsw i32 %19, 1*/
begin
fe_mul_0_51 = (fe_mul_0_19 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %51 = shl nsw i32 %19, 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
fe_mul_0_51_reg <= fe_mul_0_51;
if (reset == 1'b0 && ^(fe_mul_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_51_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_52 = fe_mul_0_52_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %52 = mul nsw i32 %20, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_52_reg <= fe_mul_0_52;
if (reset == 1'b0 && ^(fe_mul_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_52_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %52 = mul nsw i32 %20, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_52_reg <= fe_mul_0_52;
if (reset == 1'b0 && ^(fe_mul_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_52_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_53 = fe_mul_0_53_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %53 = mul nsw i32 %22, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_53_reg <= fe_mul_0_53;
if (reset == 1'b0 && ^(fe_mul_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_53_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %53 = mul nsw i32 %22, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_53_reg <= fe_mul_0_53;
if (reset == 1'b0 && ^(fe_mul_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_53_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_54 = fe_mul_0_54_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %54 = mul nsw i32 %24, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_54_reg <= fe_mul_0_54;
if (reset == 1'b0 && ^(fe_mul_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_54_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %54 = mul nsw i32 %24, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_54_reg <= fe_mul_0_54;
if (reset == 1'b0 && ^(fe_mul_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_54_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_55 = fe_mul_0_55_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %55 = mul nsw i32 %26, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_55_reg <= fe_mul_0_55;
if (reset == 1'b0 && ^(fe_mul_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_55_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %55 = mul nsw i32 %26, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_55_reg <= fe_mul_0_55;
if (reset == 1'b0 && ^(fe_mul_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_55_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_56 = fe_mul_0_56_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %56 = mul nsw i32 %28, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_56_reg <= fe_mul_0_56;
if (reset == 1'b0 && ^(fe_mul_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_56_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %56 = mul nsw i32 %28, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_56_reg <= fe_mul_0_56;
if (reset == 1'b0 && ^(fe_mul_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_56_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_57 = fe_mul_0_57_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %57 = mul nsw i32 %30, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_57_reg <= fe_mul_0_57;
if (reset == 1'b0 && ^(fe_mul_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_57_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %57 = mul nsw i32 %30, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_57_reg <= fe_mul_0_57;
if (reset == 1'b0 && ^(fe_mul_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_57_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_58 = fe_mul_0_58_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %58 = mul nsw i32 %32, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_58_reg <= fe_mul_0_58;
if (reset == 1'b0 && ^(fe_mul_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_58_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %58 = mul nsw i32 %32, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_58_reg <= fe_mul_0_58;
if (reset == 1'b0 && ^(fe_mul_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_58_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_59 = fe_mul_0_59_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %59 = mul nsw i32 %34, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_59_reg <= fe_mul_0_59;
if (reset == 1'b0 && ^(fe_mul_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_59_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %59 = mul nsw i32 %34, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_59_reg <= fe_mul_0_59;
if (reset == 1'b0 && ^(fe_mul_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_59_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_60 = fe_mul_0_60_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %60 = mul nsw i32 %36, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_60_reg <= fe_mul_0_60;
if (reset == 1'b0 && ^(fe_mul_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_60_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %60 = mul nsw i32 %36, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_60_reg <= fe_mul_0_60;
if (reset == 1'b0 && ^(fe_mul_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_60_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_61 = fe_mul_0_61_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %61 = mul nsw i32 %38, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_61_reg <= fe_mul_0_61;
if (reset == 1'b0 && ^(fe_mul_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_61_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %61 = mul nsw i32 %38, %1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_61_reg <= fe_mul_0_61;
if (reset == 1'b0 && ^(fe_mul_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_61_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_62 = fe_mul_0_62_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %62 = mul nsw i32 %20, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_62_reg <= fe_mul_0_62;
if (reset == 1'b0 && ^(fe_mul_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_62_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %62 = mul nsw i32 %20, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_62_reg <= fe_mul_0_62;
if (reset == 1'b0 && ^(fe_mul_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_62_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_63 = fe_mul_0_63_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %63 = mul nsw i32 %22, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_63_reg <= fe_mul_0_63;
if (reset == 1'b0 && ^(fe_mul_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_63_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %63 = mul nsw i32 %22, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_63_reg <= fe_mul_0_63;
if (reset == 1'b0 && ^(fe_mul_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_63_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_64 = fe_mul_0_64_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %64 = mul nsw i32 %24, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_64_reg <= fe_mul_0_64;
if (reset == 1'b0 && ^(fe_mul_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_64_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %64 = mul nsw i32 %24, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_64_reg <= fe_mul_0_64;
if (reset == 1'b0 && ^(fe_mul_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_64_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_65 = fe_mul_0_65_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %65 = mul nsw i32 %26, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_65_reg <= fe_mul_0_65;
if (reset == 1'b0 && ^(fe_mul_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_65_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %65 = mul nsw i32 %26, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_65_reg <= fe_mul_0_65;
if (reset == 1'b0 && ^(fe_mul_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_65_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_66 = fe_mul_0_66_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %66 = mul nsw i32 %28, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_66_reg <= fe_mul_0_66;
if (reset == 1'b0 && ^(fe_mul_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_66_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %66 = mul nsw i32 %28, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_66_reg <= fe_mul_0_66;
if (reset == 1'b0 && ^(fe_mul_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_66_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_67 = fe_mul_0_67_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %67 = mul nsw i32 %30, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_67_reg <= fe_mul_0_67;
if (reset == 1'b0 && ^(fe_mul_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_67_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %67 = mul nsw i32 %30, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_67_reg <= fe_mul_0_67;
if (reset == 1'b0 && ^(fe_mul_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_67_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_68 = fe_mul_0_68_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %68 = mul nsw i32 %32, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_68_reg <= fe_mul_0_68;
if (reset == 1'b0 && ^(fe_mul_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_68_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %68 = mul nsw i32 %32, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_68_reg <= fe_mul_0_68;
if (reset == 1'b0 && ^(fe_mul_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_68_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_69 = fe_mul_0_69_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %69 = mul nsw i32 %34, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_69_reg <= fe_mul_0_69;
if (reset == 1'b0 && ^(fe_mul_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_69_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %69 = mul nsw i32 %34, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_69_reg <= fe_mul_0_69;
if (reset == 1'b0 && ^(fe_mul_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_69_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_70 = fe_mul_0_70_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %70 = mul nsw i32 %36, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_70_reg <= fe_mul_0_70;
if (reset == 1'b0 && ^(fe_mul_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_70_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %70 = mul nsw i32 %36, %3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_70_reg <= fe_mul_0_70;
if (reset == 1'b0 && ^(fe_mul_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_70_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_71 = fe_mul_0_71_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %71 = mul nsw i32 %46, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_71_reg <= fe_mul_0_71;
if (reset == 1'b0 && ^(fe_mul_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_71_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %71 = mul nsw i32 %46, %47*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_71_reg <= fe_mul_0_71;
if (reset == 1'b0 && ^(fe_mul_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_71_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_72 = fe_mul_0_72_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %72 = mul nsw i32 %20, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_72_reg <= fe_mul_0_72;
if (reset == 1'b0 && ^(fe_mul_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_72_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %72 = mul nsw i32 %20, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_72_reg <= fe_mul_0_72;
if (reset == 1'b0 && ^(fe_mul_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_72_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_73 = fe_mul_0_73_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %73 = mul nsw i32 %22, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_73_reg <= fe_mul_0_73;
if (reset == 1'b0 && ^(fe_mul_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_73_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %73 = mul nsw i32 %22, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_73_reg <= fe_mul_0_73;
if (reset == 1'b0 && ^(fe_mul_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_73_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_74 = fe_mul_0_74_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %74 = mul nsw i32 %24, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_74_reg <= fe_mul_0_74;
if (reset == 1'b0 && ^(fe_mul_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_74_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %74 = mul nsw i32 %24, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_74_reg <= fe_mul_0_74;
if (reset == 1'b0 && ^(fe_mul_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_74_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_75 = fe_mul_0_75_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %75 = mul nsw i32 %26, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_75_reg <= fe_mul_0_75;
if (reset == 1'b0 && ^(fe_mul_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_75_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %75 = mul nsw i32 %26, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_75_reg <= fe_mul_0_75;
if (reset == 1'b0 && ^(fe_mul_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_75_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_76 = fe_mul_0_76_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %76 = mul nsw i32 %28, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_76_reg <= fe_mul_0_76;
if (reset == 1'b0 && ^(fe_mul_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_76_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %76 = mul nsw i32 %28, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_76_reg <= fe_mul_0_76;
if (reset == 1'b0 && ^(fe_mul_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_76_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_77 = fe_mul_0_77_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %77 = mul nsw i32 %30, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_77_reg <= fe_mul_0_77;
if (reset == 1'b0 && ^(fe_mul_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_77_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %77 = mul nsw i32 %30, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_77_reg <= fe_mul_0_77;
if (reset == 1'b0 && ^(fe_mul_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_77_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_78 = fe_mul_0_78_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %78 = mul nsw i32 %32, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_78_reg <= fe_mul_0_78;
if (reset == 1'b0 && ^(fe_mul_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_78_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %78 = mul nsw i32 %32, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_78_reg <= fe_mul_0_78;
if (reset == 1'b0 && ^(fe_mul_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_78_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_79 = fe_mul_0_79_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %79 = mul nsw i32 %34, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_79_reg <= fe_mul_0_79;
if (reset == 1'b0 && ^(fe_mul_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_79_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %79 = mul nsw i32 %34, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_79_reg <= fe_mul_0_79;
if (reset == 1'b0 && ^(fe_mul_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_79_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_80 = fe_mul_0_80_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %80 = mul nsw i32 %45, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_80_reg <= fe_mul_0_80;
if (reset == 1'b0 && ^(fe_mul_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_80_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %80 = mul nsw i32 %45, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_80_reg <= fe_mul_0_80;
if (reset == 1'b0 && ^(fe_mul_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_80_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_81 = fe_mul_0_81_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %81 = mul nsw i32 %46, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_81_reg <= fe_mul_0_81;
if (reset == 1'b0 && ^(fe_mul_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_81_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %81 = mul nsw i32 %46, %5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_81_reg <= fe_mul_0_81;
if (reset == 1'b0 && ^(fe_mul_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_81_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_82 = fe_mul_0_82_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %82 = mul nsw i32 %20, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_82_reg <= fe_mul_0_82;
if (reset == 1'b0 && ^(fe_mul_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_82_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %82 = mul nsw i32 %20, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_82_reg <= fe_mul_0_82;
if (reset == 1'b0 && ^(fe_mul_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_82_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_83 = fe_mul_0_83_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %83 = mul nsw i32 %22, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_83_reg <= fe_mul_0_83;
if (reset == 1'b0 && ^(fe_mul_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_83_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %83 = mul nsw i32 %22, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_83_reg <= fe_mul_0_83;
if (reset == 1'b0 && ^(fe_mul_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_83_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_84 = fe_mul_0_84_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %84 = mul nsw i32 %24, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_84_reg <= fe_mul_0_84;
if (reset == 1'b0 && ^(fe_mul_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_84_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %84 = mul nsw i32 %24, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_84_reg <= fe_mul_0_84;
if (reset == 1'b0 && ^(fe_mul_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_84_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_85 = fe_mul_0_85_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %85 = mul nsw i32 %26, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_85_reg <= fe_mul_0_85;
if (reset == 1'b0 && ^(fe_mul_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_85_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %85 = mul nsw i32 %26, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_85_reg <= fe_mul_0_85;
if (reset == 1'b0 && ^(fe_mul_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_85_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_86 = fe_mul_0_86_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %86 = mul nsw i32 %28, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_86_reg <= fe_mul_0_86;
if (reset == 1'b0 && ^(fe_mul_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_86_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %86 = mul nsw i32 %28, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_86_reg <= fe_mul_0_86;
if (reset == 1'b0 && ^(fe_mul_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_86_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_87 = fe_mul_0_87_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %87 = mul nsw i32 %30, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_87_reg <= fe_mul_0_87;
if (reset == 1'b0 && ^(fe_mul_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_87_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %87 = mul nsw i32 %30, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_87_reg <= fe_mul_0_87;
if (reset == 1'b0 && ^(fe_mul_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_87_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_88 = fe_mul_0_88_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %88 = mul nsw i32 %32, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_88_reg <= fe_mul_0_88;
if (reset == 1'b0 && ^(fe_mul_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_88_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %88 = mul nsw i32 %32, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_88_reg <= fe_mul_0_88;
if (reset == 1'b0 && ^(fe_mul_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_88_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_89 = fe_mul_0_89_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %89 = mul nsw i32 %44, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_89_reg <= fe_mul_0_89;
if (reset == 1'b0 && ^(fe_mul_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_89_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %89 = mul nsw i32 %44, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_89_reg <= fe_mul_0_89;
if (reset == 1'b0 && ^(fe_mul_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_89_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_90 = fe_mul_0_90_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %90 = mul nsw i32 %45, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_90_reg <= fe_mul_0_90;
if (reset == 1'b0 && ^(fe_mul_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_90_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %90 = mul nsw i32 %45, %7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_90_reg <= fe_mul_0_90;
if (reset == 1'b0 && ^(fe_mul_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_90_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_91 = fe_mul_0_91_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %91 = mul nsw i32 %46, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_91_reg <= fe_mul_0_91;
if (reset == 1'b0 && ^(fe_mul_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_91_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %91 = mul nsw i32 %46, %48*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_91_reg <= fe_mul_0_91;
if (reset == 1'b0 && ^(fe_mul_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_91_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_92 = fe_mul_0_92_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %92 = mul nsw i32 %20, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_92_reg <= fe_mul_0_92;
if (reset == 1'b0 && ^(fe_mul_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_92_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %92 = mul nsw i32 %20, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_92_reg <= fe_mul_0_92;
if (reset == 1'b0 && ^(fe_mul_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_92_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_93 = fe_mul_0_93_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %93 = mul nsw i32 %22, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_93_reg <= fe_mul_0_93;
if (reset == 1'b0 && ^(fe_mul_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_93_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %93 = mul nsw i32 %22, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_93_reg <= fe_mul_0_93;
if (reset == 1'b0 && ^(fe_mul_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_93_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_94 = fe_mul_0_94_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %94 = mul nsw i32 %24, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_94_reg <= fe_mul_0_94;
if (reset == 1'b0 && ^(fe_mul_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_94_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %94 = mul nsw i32 %24, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_94_reg <= fe_mul_0_94;
if (reset == 1'b0 && ^(fe_mul_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_94_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_95 = fe_mul_0_95_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %95 = mul nsw i32 %26, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_95_reg <= fe_mul_0_95;
if (reset == 1'b0 && ^(fe_mul_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_95_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %95 = mul nsw i32 %26, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_95_reg <= fe_mul_0_95;
if (reset == 1'b0 && ^(fe_mul_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_95_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_96 = fe_mul_0_96_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %96 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_96_reg <= fe_mul_0_96;
if (reset == 1'b0 && ^(fe_mul_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_96_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %96 = mul nsw i32 %28, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_96_reg <= fe_mul_0_96;
if (reset == 1'b0 && ^(fe_mul_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_96_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_97 = fe_mul_0_97_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %97 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_97_reg <= fe_mul_0_97;
if (reset == 1'b0 && ^(fe_mul_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_97_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %97 = mul nsw i32 %30, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_97_reg <= fe_mul_0_97;
if (reset == 1'b0 && ^(fe_mul_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_97_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_98 = fe_mul_0_98_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %98 = mul nsw i32 %43, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_98_reg <= fe_mul_0_98;
if (reset == 1'b0 && ^(fe_mul_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_98_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %98 = mul nsw i32 %43, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_98_reg <= fe_mul_0_98;
if (reset == 1'b0 && ^(fe_mul_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_98_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_99 = fe_mul_0_99_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %99 = mul nsw i32 %44, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_99_reg <= fe_mul_0_99;
if (reset == 1'b0 && ^(fe_mul_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_99_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %99 = mul nsw i32 %44, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_99_reg <= fe_mul_0_99;
if (reset == 1'b0 && ^(fe_mul_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_99_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_100 = fe_mul_0_100_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %100 = mul nsw i32 %45, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_100_reg <= fe_mul_0_100;
if (reset == 1'b0 && ^(fe_mul_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_100_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %100 = mul nsw i32 %45, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_100_reg <= fe_mul_0_100;
if (reset == 1'b0 && ^(fe_mul_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_100_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_101 = fe_mul_0_101_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %101 = mul nsw i32 %46, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_101_reg <= fe_mul_0_101;
if (reset == 1'b0 && ^(fe_mul_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_101_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %101 = mul nsw i32 %46, %9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_101_reg <= fe_mul_0_101;
if (reset == 1'b0 && ^(fe_mul_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_101_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_102 = fe_mul_0_102_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %102 = mul nsw i32 %20, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_102_reg <= fe_mul_0_102;
if (reset == 1'b0 && ^(fe_mul_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_102_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %102 = mul nsw i32 %20, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_102_reg <= fe_mul_0_102;
if (reset == 1'b0 && ^(fe_mul_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_102_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_103 = fe_mul_0_103_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %103 = mul nsw i32 %22, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_103_reg <= fe_mul_0_103;
if (reset == 1'b0 && ^(fe_mul_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_103_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %103 = mul nsw i32 %22, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_103_reg <= fe_mul_0_103;
if (reset == 1'b0 && ^(fe_mul_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_103_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_104 = fe_mul_0_104_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %104 = mul nsw i32 %24, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_104_reg <= fe_mul_0_104;
if (reset == 1'b0 && ^(fe_mul_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_104_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %104 = mul nsw i32 %24, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_104_reg <= fe_mul_0_104;
if (reset == 1'b0 && ^(fe_mul_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_104_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_105 = fe_mul_0_105_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %105 = mul nsw i32 %26, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_105_reg <= fe_mul_0_105;
if (reset == 1'b0 && ^(fe_mul_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_105_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %105 = mul nsw i32 %26, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_105_reg <= fe_mul_0_105;
if (reset == 1'b0 && ^(fe_mul_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_105_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_106 = fe_mul_0_106_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %106 = mul nsw i32 %28, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_106_reg <= fe_mul_0_106;
if (reset == 1'b0 && ^(fe_mul_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_106_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %106 = mul nsw i32 %28, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_106_reg <= fe_mul_0_106;
if (reset == 1'b0 && ^(fe_mul_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_106_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_107 = fe_mul_0_107_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %107 = mul nsw i32 %42, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_107_reg <= fe_mul_0_107;
if (reset == 1'b0 && ^(fe_mul_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_107_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %107 = mul nsw i32 %42, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_107_reg <= fe_mul_0_107;
if (reset == 1'b0 && ^(fe_mul_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_107_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_108 = fe_mul_0_108_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %108 = mul nsw i32 %43, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_108_reg <= fe_mul_0_108;
if (reset == 1'b0 && ^(fe_mul_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_108_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %108 = mul nsw i32 %43, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_108_reg <= fe_mul_0_108;
if (reset == 1'b0 && ^(fe_mul_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_108_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_109 = fe_mul_0_109_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %109 = mul nsw i32 %44, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_109_reg <= fe_mul_0_109;
if (reset == 1'b0 && ^(fe_mul_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_109_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %109 = mul nsw i32 %44, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_109_reg <= fe_mul_0_109;
if (reset == 1'b0 && ^(fe_mul_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_109_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_110 = fe_mul_0_110_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %110 = mul nsw i32 %45, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_110_reg <= fe_mul_0_110;
if (reset == 1'b0 && ^(fe_mul_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_110_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %110 = mul nsw i32 %45, %11*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_110_reg <= fe_mul_0_110;
if (reset == 1'b0 && ^(fe_mul_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_110_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_111 = fe_mul_0_111_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %111 = mul nsw i32 %46, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_111_reg <= fe_mul_0_111;
if (reset == 1'b0 && ^(fe_mul_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_111_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %111 = mul nsw i32 %46, %49*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_111_reg <= fe_mul_0_111;
if (reset == 1'b0 && ^(fe_mul_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_111_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_112 = fe_mul_0_112_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %112 = mul nsw i32 %20, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_112_reg <= fe_mul_0_112;
if (reset == 1'b0 && ^(fe_mul_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_112_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %112 = mul nsw i32 %20, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_112_reg <= fe_mul_0_112;
if (reset == 1'b0 && ^(fe_mul_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_112_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_113 = fe_mul_0_113_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %113 = mul nsw i32 %22, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_113_reg <= fe_mul_0_113;
if (reset == 1'b0 && ^(fe_mul_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_113_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %113 = mul nsw i32 %22, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_113_reg <= fe_mul_0_113;
if (reset == 1'b0 && ^(fe_mul_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_113_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_114 = fe_mul_0_114_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %114 = mul nsw i32 %24, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_114_reg <= fe_mul_0_114;
if (reset == 1'b0 && ^(fe_mul_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_114_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %114 = mul nsw i32 %24, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_114_reg <= fe_mul_0_114;
if (reset == 1'b0 && ^(fe_mul_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_114_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_115 = fe_mul_0_115_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %115 = mul nsw i32 %26, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_115_reg <= fe_mul_0_115;
if (reset == 1'b0 && ^(fe_mul_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_115_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %115 = mul nsw i32 %26, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_115_reg <= fe_mul_0_115;
if (reset == 1'b0 && ^(fe_mul_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_115_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_116 = fe_mul_0_116_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %116 = mul nsw i32 %41, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_116_reg <= fe_mul_0_116;
if (reset == 1'b0 && ^(fe_mul_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_116_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %116 = mul nsw i32 %41, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_116_reg <= fe_mul_0_116;
if (reset == 1'b0 && ^(fe_mul_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_116_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_117 = fe_mul_0_117_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %117 = mul nsw i32 %42, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_117_reg <= fe_mul_0_117;
if (reset == 1'b0 && ^(fe_mul_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_117_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %117 = mul nsw i32 %42, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_117_reg <= fe_mul_0_117;
if (reset == 1'b0 && ^(fe_mul_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_117_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_118 = fe_mul_0_118_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %118 = mul nsw i32 %43, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_118_reg <= fe_mul_0_118;
if (reset == 1'b0 && ^(fe_mul_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_118_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %118 = mul nsw i32 %43, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_118_reg <= fe_mul_0_118;
if (reset == 1'b0 && ^(fe_mul_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_118_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_119 = fe_mul_0_119_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %119 = mul nsw i32 %44, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_119_reg <= fe_mul_0_119;
if (reset == 1'b0 && ^(fe_mul_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_119_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %119 = mul nsw i32 %44, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_119_reg <= fe_mul_0_119;
if (reset == 1'b0 && ^(fe_mul_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_119_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_120 = fe_mul_0_120_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %120 = mul nsw i32 %45, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_120_reg <= fe_mul_0_120;
if (reset == 1'b0 && ^(fe_mul_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_120_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %120 = mul nsw i32 %45, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_120_reg <= fe_mul_0_120;
if (reset == 1'b0 && ^(fe_mul_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_120_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_121 = fe_mul_0_121_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %121 = mul nsw i32 %46, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_121_reg <= fe_mul_0_121;
if (reset == 1'b0 && ^(fe_mul_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_121_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %121 = mul nsw i32 %46, %13*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_121_reg <= fe_mul_0_121;
if (reset == 1'b0 && ^(fe_mul_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_121_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_122 = fe_mul_0_122_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %122 = mul nsw i32 %20, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_122_reg <= fe_mul_0_122;
if (reset == 1'b0 && ^(fe_mul_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_122_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %122 = mul nsw i32 %20, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_122_reg <= fe_mul_0_122;
if (reset == 1'b0 && ^(fe_mul_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_122_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_123 = fe_mul_0_123_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %123 = mul nsw i32 %22, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_123_reg <= fe_mul_0_123;
if (reset == 1'b0 && ^(fe_mul_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_123_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %123 = mul nsw i32 %22, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_123_reg <= fe_mul_0_123;
if (reset == 1'b0 && ^(fe_mul_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_123_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_124 = fe_mul_0_124_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %124 = mul nsw i32 %24, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_124_reg <= fe_mul_0_124;
if (reset == 1'b0 && ^(fe_mul_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_124_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %124 = mul nsw i32 %24, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_124_reg <= fe_mul_0_124;
if (reset == 1'b0 && ^(fe_mul_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_124_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_125 = fe_mul_0_125_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %125 = mul nsw i32 %40, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_125_reg <= fe_mul_0_125;
if (reset == 1'b0 && ^(fe_mul_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_125_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %125 = mul nsw i32 %40, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_125_reg <= fe_mul_0_125;
if (reset == 1'b0 && ^(fe_mul_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_125_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_126 = fe_mul_0_126_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %126 = mul nsw i32 %41, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_126_reg <= fe_mul_0_126;
if (reset == 1'b0 && ^(fe_mul_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_126_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %126 = mul nsw i32 %41, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_126_reg <= fe_mul_0_126;
if (reset == 1'b0 && ^(fe_mul_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_126_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_127 = fe_mul_0_127_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %127 = mul nsw i32 %42, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_127_reg <= fe_mul_0_127;
if (reset == 1'b0 && ^(fe_mul_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_127_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %127 = mul nsw i32 %42, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_127_reg <= fe_mul_0_127;
if (reset == 1'b0 && ^(fe_mul_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_127_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_128 = fe_mul_0_128_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %128 = mul nsw i32 %43, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_128_reg <= fe_mul_0_128;
if (reset == 1'b0 && ^(fe_mul_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_128_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %128 = mul nsw i32 %43, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_128_reg <= fe_mul_0_128;
if (reset == 1'b0 && ^(fe_mul_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_128_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_129 = fe_mul_0_129_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %129 = mul nsw i32 %44, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_129_reg <= fe_mul_0_129;
if (reset == 1'b0 && ^(fe_mul_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_129_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %129 = mul nsw i32 %44, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_129_reg <= fe_mul_0_129;
if (reset == 1'b0 && ^(fe_mul_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_129_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_130 = fe_mul_0_130_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %130 = mul nsw i32 %45, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_130_reg <= fe_mul_0_130;
if (reset == 1'b0 && ^(fe_mul_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_130_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %130 = mul nsw i32 %45, %15*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_130_reg <= fe_mul_0_130;
if (reset == 1'b0 && ^(fe_mul_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_130_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_131 = fe_mul_0_131_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %131 = mul nsw i32 %46, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_131_reg <= fe_mul_0_131;
if (reset == 1'b0 && ^(fe_mul_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_131_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %131 = mul nsw i32 %46, %50*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_131_reg <= fe_mul_0_131;
if (reset == 1'b0 && ^(fe_mul_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_131_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_132 = fe_mul_0_132_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %132 = mul nsw i32 %20, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_132_reg <= fe_mul_0_132;
if (reset == 1'b0 && ^(fe_mul_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_132_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %132 = mul nsw i32 %20, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_132_reg <= fe_mul_0_132;
if (reset == 1'b0 && ^(fe_mul_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_132_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_133 = fe_mul_0_133_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %133 = mul nsw i32 %22, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_133_reg <= fe_mul_0_133;
if (reset == 1'b0 && ^(fe_mul_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_133_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %133 = mul nsw i32 %22, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_133_reg <= fe_mul_0_133;
if (reset == 1'b0 && ^(fe_mul_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_133_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_134 = fe_mul_0_134_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %134 = mul nsw i32 %39, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_134_reg <= fe_mul_0_134;
if (reset == 1'b0 && ^(fe_mul_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_134_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %134 = mul nsw i32 %39, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_134_reg <= fe_mul_0_134;
if (reset == 1'b0 && ^(fe_mul_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_134_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_135 = fe_mul_0_135_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %135 = mul nsw i32 %40, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_135_reg <= fe_mul_0_135;
if (reset == 1'b0 && ^(fe_mul_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_135_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %135 = mul nsw i32 %40, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_135_reg <= fe_mul_0_135;
if (reset == 1'b0 && ^(fe_mul_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_135_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_136 = fe_mul_0_136_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %136 = mul nsw i32 %41, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_136_reg <= fe_mul_0_136;
if (reset == 1'b0 && ^(fe_mul_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_136_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %136 = mul nsw i32 %41, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_136_reg <= fe_mul_0_136;
if (reset == 1'b0 && ^(fe_mul_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_136_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_137 = fe_mul_0_137_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %137 = mul nsw i32 %42, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_137_reg <= fe_mul_0_137;
if (reset == 1'b0 && ^(fe_mul_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_137_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %137 = mul nsw i32 %42, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_137_reg <= fe_mul_0_137;
if (reset == 1'b0 && ^(fe_mul_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_137_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_138 = fe_mul_0_138_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %138 = mul nsw i32 %43, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_138_reg <= fe_mul_0_138;
if (reset == 1'b0 && ^(fe_mul_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_138_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %138 = mul nsw i32 %43, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_138_reg <= fe_mul_0_138;
if (reset == 1'b0 && ^(fe_mul_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_138_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_139 = fe_mul_0_139_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %139 = mul nsw i32 %44, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_139_reg <= fe_mul_0_139;
if (reset == 1'b0 && ^(fe_mul_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_139_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %139 = mul nsw i32 %44, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_139_reg <= fe_mul_0_139;
if (reset == 1'b0 && ^(fe_mul_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_139_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_140 = fe_mul_0_140_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %140 = mul nsw i32 %45, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_140_reg <= fe_mul_0_140;
if (reset == 1'b0 && ^(fe_mul_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_140_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %140 = mul nsw i32 %45, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_140_reg <= fe_mul_0_140;
if (reset == 1'b0 && ^(fe_mul_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_140_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_141 = fe_mul_0_141_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %141 = mul nsw i32 %46, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_141_reg <= fe_mul_0_141;
if (reset == 1'b0 && ^(fe_mul_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_141_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %141 = mul nsw i32 %46, %17*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_141_reg <= fe_mul_0_141;
if (reset == 1'b0 && ^(fe_mul_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_141_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_142 = fe_mul_0_142_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %142 = mul nsw i32 %20, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_142_reg <= fe_mul_0_142;
if (reset == 1'b0 && ^(fe_mul_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_142_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %142 = mul nsw i32 %20, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_142_reg <= fe_mul_0_142;
if (reset == 1'b0 && ^(fe_mul_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_142_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_143 = fe_mul_0_143_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %143 = mul i32 %19, 38*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
fe_mul_0_143_reg <= fe_mul_0_143;
if (reset == 1'b0 && ^(fe_mul_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_143_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %143 = mul i32 %19, 38*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
fe_mul_0_143_reg <= fe_mul_0_143;
if (reset == 1'b0 && ^(fe_mul_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_143_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_144 = fe_mul_0_144_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %144 = mul i32 %143, %22*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_144_reg <= fe_mul_0_144;
if (reset == 1'b0 && ^(fe_mul_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_144_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %144 = mul i32 %143, %22*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_144_reg <= fe_mul_0_144;
if (reset == 1'b0 && ^(fe_mul_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_144_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_145 = fe_mul_0_145_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %145 = mul nsw i32 %39, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_145_reg <= fe_mul_0_145;
if (reset == 1'b0 && ^(fe_mul_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_145_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %145 = mul nsw i32 %39, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_145_reg <= fe_mul_0_145;
if (reset == 1'b0 && ^(fe_mul_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_145_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_146 = fe_mul_0_146_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %146 = mul nsw i32 %40, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_146_reg <= fe_mul_0_146;
if (reset == 1'b0 && ^(fe_mul_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_146_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %146 = mul nsw i32 %40, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_146_reg <= fe_mul_0_146;
if (reset == 1'b0 && ^(fe_mul_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_146_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_147 = fe_mul_0_147_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %147 = mul nsw i32 %41, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_147_reg <= fe_mul_0_147;
if (reset == 1'b0 && ^(fe_mul_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_147_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %147 = mul nsw i32 %41, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_147_reg <= fe_mul_0_147;
if (reset == 1'b0 && ^(fe_mul_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_147_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_148 = fe_mul_0_148_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %148 = mul nsw i32 %42, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_148_reg <= fe_mul_0_148;
if (reset == 1'b0 && ^(fe_mul_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_148_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %148 = mul nsw i32 %42, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_148_reg <= fe_mul_0_148;
if (reset == 1'b0 && ^(fe_mul_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_148_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_149 = fe_mul_0_149_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %149 = mul nsw i32 %43, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_149_reg <= fe_mul_0_149;
if (reset == 1'b0 && ^(fe_mul_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_149_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %149 = mul nsw i32 %43, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_149_reg <= fe_mul_0_149;
if (reset == 1'b0 && ^(fe_mul_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_149_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_150 = fe_mul_0_150_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %150 = mul nsw i32 %44, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_150_reg <= fe_mul_0_150;
if (reset == 1'b0 && ^(fe_mul_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_150_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %150 = mul nsw i32 %44, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_150_reg <= fe_mul_0_150;
if (reset == 1'b0 && ^(fe_mul_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_150_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_151 = fe_mul_0_151_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %151 = mul nsw i32 %45, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_151_reg <= fe_mul_0_151;
if (reset == 1'b0 && ^(fe_mul_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_151_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %151 = mul nsw i32 %45, %19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_151_reg <= fe_mul_0_151;
if (reset == 1'b0 && ^(fe_mul_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_151_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_152 = fe_mul_0_152_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %152 = mul nsw i32 %46, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_152_reg <= fe_mul_0_152;
if (reset == 1'b0 && ^(fe_mul_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_152_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %152 = mul nsw i32 %46, %51*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_152_reg <= fe_mul_0_152;
if (reset == 1'b0 && ^(fe_mul_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_152_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %153 = add i32 %144, %52*/
begin
fe_mul_0_153 = (fe_mul_0_144 + fe_mul_0_52);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %153 = add i32 %144, %52*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_153_reg <= fe_mul_0_153;
if (reset == 1'b0 && ^(fe_mul_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_153_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %154 = add i32 %153, %134*/
begin
fe_mul_0_154 = (fe_mul_0_153_reg + fe_mul_0_134);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %154 = add i32 %153, %134*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_154_reg <= fe_mul_0_154;
if (reset == 1'b0 && ^(fe_mul_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_154_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %155 = add i32 %154, %125*/
begin
fe_mul_0_155 = (fe_mul_0_154 + fe_mul_0_125_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %155 = add i32 %154, %125*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_155_reg <= fe_mul_0_155;
if (reset == 1'b0 && ^(fe_mul_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_155_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %156 = add i32 %155, %116*/
begin
fe_mul_0_156 = (fe_mul_0_155 + fe_mul_0_116_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %156 = add i32 %155, %116*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_156_reg <= fe_mul_0_156;
if (reset == 1'b0 && ^(fe_mul_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_156_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %157 = add i32 %156, %107*/
begin
fe_mul_0_157 = (fe_mul_0_156_reg + fe_mul_0_107_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %157 = add i32 %156, %107*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_157_reg <= fe_mul_0_157;
if (reset == 1'b0 && ^(fe_mul_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_157_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %158 = add i32 %157, %98*/
begin
fe_mul_0_158 = (fe_mul_0_157 + fe_mul_0_98_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %158 = add i32 %157, %98*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_158_reg <= fe_mul_0_158;
if (reset == 1'b0 && ^(fe_mul_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_158_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %159 = add i32 %158, %89*/
begin
fe_mul_0_159 = (fe_mul_0_158 + fe_mul_0_89_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %159 = add i32 %158, %89*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_159_reg <= fe_mul_0_159;
if (reset == 1'b0 && ^(fe_mul_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_159_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %160 = add i32 %159, %80*/
begin
fe_mul_0_160 = (fe_mul_0_159_reg + fe_mul_0_80_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %160 = add i32 %159, %80*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_160_reg <= fe_mul_0_160;
if (reset == 1'b0 && ^(fe_mul_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_160_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %161 = add i32 %160, %71*/
begin
fe_mul_0_161 = (fe_mul_0_160 + fe_mul_0_71_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %161 = add i32 %160, %71*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_161_reg <= fe_mul_0_161;
if (reset == 1'b0 && ^(fe_mul_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_161_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %162 = add i32 %83, %92*/
begin
fe_mul_0_162 = (fe_mul_0_83 + fe_mul_0_92);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %162 = add i32 %83, %92*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_162_reg <= fe_mul_0_162;
if (reset == 1'b0 && ^(fe_mul_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_162_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %163 = add i32 %162, %74*/
begin
fe_mul_0_163 = (fe_mul_0_162_reg + fe_mul_0_74);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %163 = add i32 %162, %74*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_163_reg <= fe_mul_0_163;
if (reset == 1'b0 && ^(fe_mul_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_163_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %164 = add i32 %163, %65*/
begin
fe_mul_0_164 = (fe_mul_0_163_reg + fe_mul_0_65);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %164 = add i32 %163, %65*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_164_reg <= fe_mul_0_164;
if (reset == 1'b0 && ^(fe_mul_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_164_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %165 = add i32 %164, %56*/
begin
fe_mul_0_165 = (fe_mul_0_164 + fe_mul_0_56);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %165 = add i32 %164, %56*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_165_reg <= fe_mul_0_165;
if (reset == 1'b0 && ^(fe_mul_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_165_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %166 = add i32 %165, %148*/
begin
fe_mul_0_166 = (fe_mul_0_165 + fe_mul_0_148_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %166 = add i32 %165, %148*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_166_reg <= fe_mul_0_166;
if (reset == 1'b0 && ^(fe_mul_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_166_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %167 = add i32 %166, %138*/
begin
fe_mul_0_167 = (fe_mul_0_166_reg + fe_mul_0_138);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %167 = add i32 %166, %138*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_167_reg <= fe_mul_0_167;
if (reset == 1'b0 && ^(fe_mul_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_167_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %168 = add i32 %167, %129*/
begin
fe_mul_0_168 = (fe_mul_0_167 + fe_mul_0_129_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %168 = add i32 %167, %129*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_168_reg <= fe_mul_0_168;
if (reset == 1'b0 && ^(fe_mul_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_168_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %169 = add i32 %168, %120*/
begin
fe_mul_0_169 = (fe_mul_0_168 + fe_mul_0_120);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %169 = add i32 %168, %120*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_169_reg <= fe_mul_0_169;
if (reset == 1'b0 && ^(fe_mul_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_169_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %170 = add i32 %169, %111*/
begin
fe_mul_0_170 = (fe_mul_0_169_reg + fe_mul_0_111);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %170 = add i32 %169, %111*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_170_reg <= fe_mul_0_170;
if (reset == 1'b0 && ^(fe_mul_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_170_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %171 = add nsw i32 %161, 33554432*/
begin
fe_mul_0_171 = (fe_mul_0_161 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %171 = add nsw i32 %161, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_171_reg <= fe_mul_0_171;
if (reset == 1'b0 && ^(fe_mul_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_171_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %172 = ashr i32 %171, 26*/
begin
fe_mul_0_172 = ($signed(fe_mul_0_171) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %172 = ashr i32 %171, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_172_reg <= fe_mul_0_172;
if (reset == 1'b0 && ^(fe_mul_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_172_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %173 = add i32 %53, %62*/
begin
fe_mul_0_173 = (fe_mul_0_53_reg + fe_mul_0_62);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %173 = add i32 %53, %62*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_173_reg <= fe_mul_0_173;
if (reset == 1'b0 && ^(fe_mul_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_173_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %174 = add i32 %173, %145*/
begin
fe_mul_0_174 = (fe_mul_0_173 + fe_mul_0_145);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %174 = add i32 %173, %145*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_174_reg <= fe_mul_0_174;
if (reset == 1'b0 && ^(fe_mul_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_174_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %175 = add i32 %174, %135*/
begin
fe_mul_0_175 = (fe_mul_0_174_reg + fe_mul_0_135);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %175 = add i32 %174, %135*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_175_reg <= fe_mul_0_175;
if (reset == 1'b0 && ^(fe_mul_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_175_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %176 = add i32 %175, %126*/
begin
fe_mul_0_176 = (fe_mul_0_175 + fe_mul_0_126_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %176 = add i32 %175, %126*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_176_reg <= fe_mul_0_176;
if (reset == 1'b0 && ^(fe_mul_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_176_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %177 = add i32 %176, %117*/
begin
fe_mul_0_177 = (fe_mul_0_176 + fe_mul_0_117_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %177 = add i32 %176, %117*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_177_reg <= fe_mul_0_177;
if (reset == 1'b0 && ^(fe_mul_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_177_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %178 = add i32 %177, %108*/
begin
fe_mul_0_178 = (fe_mul_0_177_reg + fe_mul_0_108_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %178 = add i32 %177, %108*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_178_reg <= fe_mul_0_178;
if (reset == 1'b0 && ^(fe_mul_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_178_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %179 = add i32 %178, %99*/
begin
fe_mul_0_179 = (fe_mul_0_178 + fe_mul_0_99_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %179 = add i32 %178, %99*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_179_reg <= fe_mul_0_179;
if (reset == 1'b0 && ^(fe_mul_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_179_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %180 = add i32 %179, %90*/
begin
fe_mul_0_180 = (fe_mul_0_179 + fe_mul_0_90_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %180 = add i32 %179, %90*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_180_reg <= fe_mul_0_180;
if (reset == 1'b0 && ^(fe_mul_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_180_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %181 = add i32 %180, %81*/
begin
fe_mul_0_181 = (fe_mul_0_180_reg + fe_mul_0_81_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %181 = add i32 %180, %81*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_181_reg <= fe_mul_0_181;
if (reset == 1'b0 && ^(fe_mul_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_181_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %182 = add i32 %181, %172*/
begin
fe_mul_0_182 = (fe_mul_0_181_reg + fe_mul_0_172_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %182 = add i32 %181, %172*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_182_reg <= fe_mul_0_182;
if (reset == 1'b0 && ^(fe_mul_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_182_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %183 = add nsw i32 %170, 33554432*/
begin
fe_mul_0_183 = (fe_mul_0_170 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %183 = add nsw i32 %170, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_183_reg <= fe_mul_0_183;
if (reset == 1'b0 && ^(fe_mul_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_183_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %184 = ashr i32 %183, 26*/
begin
fe_mul_0_184 = ($signed(fe_mul_0_183) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %184 = ashr i32 %183, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_184_reg <= fe_mul_0_184;
if (reset == 1'b0 && ^(fe_mul_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_184_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %185 = add i32 %93, %102*/
begin
fe_mul_0_185 = (fe_mul_0_93 + fe_mul_0_102);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %185 = add i32 %93, %102*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_185_reg <= fe_mul_0_185;
if (reset == 1'b0 && ^(fe_mul_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_185_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %186 = add i32 %185, %84*/
begin
fe_mul_0_186 = (fe_mul_0_185_reg + fe_mul_0_84);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %186 = add i32 %185, %84*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
fe_mul_0_186_reg <= fe_mul_0_186;
if (reset == 1'b0 && ^(fe_mul_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_186_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %187 = add i32 %186, %75*/
begin
fe_mul_0_187 = (fe_mul_0_186_reg + fe_mul_0_75);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %187 = add i32 %186, %75*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_187_reg <= fe_mul_0_187;
if (reset == 1'b0 && ^(fe_mul_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_187_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %188 = add i32 %187, %66*/
begin
fe_mul_0_188 = (fe_mul_0_187 + fe_mul_0_66);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %188 = add i32 %187, %66*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_188_reg <= fe_mul_0_188;
if (reset == 1'b0 && ^(fe_mul_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_188_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %189 = add i32 %188, %57*/
begin
fe_mul_0_189 = (fe_mul_0_188 + fe_mul_0_57_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %189 = add i32 %188, %57*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_189_reg <= fe_mul_0_189;
if (reset == 1'b0 && ^(fe_mul_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_189_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %190 = add i32 %189, %149*/
begin
fe_mul_0_190 = (fe_mul_0_189_reg + fe_mul_0_149);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %190 = add i32 %189, %149*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_190_reg <= fe_mul_0_190;
if (reset == 1'b0 && ^(fe_mul_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_190_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %191 = add i32 %190, %139*/
begin
fe_mul_0_191 = (fe_mul_0_190_reg + fe_mul_0_139);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %191 = add i32 %190, %139*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_191_reg <= fe_mul_0_191;
if (reset == 1'b0 && ^(fe_mul_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_191_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %192 = add i32 %191, %130*/
begin
fe_mul_0_192 = (fe_mul_0_191 + fe_mul_0_130);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %192 = add i32 %191, %130*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_192_reg <= fe_mul_0_192;
if (reset == 1'b0 && ^(fe_mul_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_192_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %193 = add i32 %192, %121*/
begin
fe_mul_0_193 = (fe_mul_0_192_reg + fe_mul_0_121);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %193 = add i32 %192, %121*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_193_reg <= fe_mul_0_193;
if (reset == 1'b0 && ^(fe_mul_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_193_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %194 = add i32 %193, %184*/
begin
fe_mul_0_194 = (fe_mul_0_193 + fe_mul_0_184);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %194 = add i32 %193, %184*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_194_reg <= fe_mul_0_194;
if (reset == 1'b0 && ^(fe_mul_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_194_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %195 = add nsw i32 %182, 16777216*/
begin
fe_mul_0_195 = (fe_mul_0_182 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %195 = add nsw i32 %182, 16777216*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_195_reg <= fe_mul_0_195;
if (reset == 1'b0 && ^(fe_mul_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_195_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %196 = ashr i32 %195, 25*/
begin
fe_mul_0_196 = ($signed(fe_mul_0_195) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %196 = ashr i32 %195, 25*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_196_reg <= fe_mul_0_196;
if (reset == 1'b0 && ^(fe_mul_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_196_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %197 = add i32 %63, %72*/
begin
fe_mul_0_197 = (fe_mul_0_63 + fe_mul_0_72_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %197 = add i32 %63, %72*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_197_reg <= fe_mul_0_197;
if (reset == 1'b0 && ^(fe_mul_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_197_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %198 = add i32 %197, %54*/
begin
fe_mul_0_198 = (fe_mul_0_197 + fe_mul_0_54_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %198 = add i32 %197, %54*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_198_reg <= fe_mul_0_198;
if (reset == 1'b0 && ^(fe_mul_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_198_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %199 = add i32 %198, %146*/
begin
fe_mul_0_199 = (fe_mul_0_198_reg + fe_mul_0_146);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %199 = add i32 %198, %146*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_199_reg <= fe_mul_0_199;
if (reset == 1'b0 && ^(fe_mul_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_199_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %200 = add i32 %199, %136*/
begin
fe_mul_0_200 = (fe_mul_0_199_reg + fe_mul_0_136);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %200 = add i32 %199, %136*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_200_reg <= fe_mul_0_200;
if (reset == 1'b0 && ^(fe_mul_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_200_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %201 = add i32 %200, %127*/
begin
fe_mul_0_201 = (fe_mul_0_200 + fe_mul_0_127_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %201 = add i32 %200, %127*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_201_reg <= fe_mul_0_201;
if (reset == 1'b0 && ^(fe_mul_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_201_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %202 = add i32 %201, %118*/
begin
fe_mul_0_202 = (fe_mul_0_201 + fe_mul_0_118_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %202 = add i32 %201, %118*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_202_reg <= fe_mul_0_202;
if (reset == 1'b0 && ^(fe_mul_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_202_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %203 = add i32 %202, %109*/
begin
fe_mul_0_203 = (fe_mul_0_202_reg + fe_mul_0_109_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %203 = add i32 %202, %109*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_203_reg <= fe_mul_0_203;
if (reset == 1'b0 && ^(fe_mul_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_203_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %204 = add i32 %203, %100*/
begin
fe_mul_0_204 = (fe_mul_0_203 + fe_mul_0_100_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %204 = add i32 %203, %100*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_204_reg <= fe_mul_0_204;
if (reset == 1'b0 && ^(fe_mul_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_204_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %205 = add i32 %204, %91*/
begin
fe_mul_0_205 = (fe_mul_0_204 + fe_mul_0_91);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %205 = add i32 %204, %91*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_205_reg <= fe_mul_0_205;
if (reset == 1'b0 && ^(fe_mul_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_205_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %206 = add i32 %205, %196*/
begin
fe_mul_0_206 = (fe_mul_0_205_reg + fe_mul_0_196);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %206 = add i32 %205, %196*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_206_reg <= fe_mul_0_206;
if (reset == 1'b0 && ^(fe_mul_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_206_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %207 = add nsw i32 %194, 16777216*/
begin
fe_mul_0_207 = (fe_mul_0_194_reg + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %207 = add nsw i32 %194, 16777216*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_207_reg <= fe_mul_0_207;
if (reset == 1'b0 && ^(fe_mul_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_207_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %208 = ashr i32 %207, 25*/
begin
fe_mul_0_208 = ($signed(fe_mul_0_207) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %208 = ashr i32 %207, 25*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_208_reg <= fe_mul_0_208;
if (reset == 1'b0 && ^(fe_mul_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_208_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %209 = add i32 %103, %112*/
begin
fe_mul_0_209 = (fe_mul_0_103_reg + fe_mul_0_112);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %209 = add i32 %103, %112*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_209_reg <= fe_mul_0_209;
if (reset == 1'b0 && ^(fe_mul_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_209_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %210 = add i32 %209, %94*/
begin
fe_mul_0_210 = (fe_mul_0_209 + fe_mul_0_94_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %210 = add i32 %209, %94*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_210_reg <= fe_mul_0_210;
if (reset == 1'b0 && ^(fe_mul_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_210_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %211 = add i32 %210, %85*/
begin
fe_mul_0_211 = (fe_mul_0_210_reg + fe_mul_0_85);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %211 = add i32 %210, %85*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_211_reg <= fe_mul_0_211;
if (reset == 1'b0 && ^(fe_mul_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_211_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %212 = add i32 %211, %76*/
begin
fe_mul_0_212 = (fe_mul_0_211 + fe_mul_0_76);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %212 = add i32 %211, %76*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_212_reg <= fe_mul_0_212;
if (reset == 1'b0 && ^(fe_mul_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_212_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %213 = add i32 %212, %67*/
begin
fe_mul_0_213 = (fe_mul_0_212 + fe_mul_0_67_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %213 = add i32 %212, %67*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_213_reg <= fe_mul_0_213;
if (reset == 1'b0 && ^(fe_mul_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_213_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %214 = add i32 %213, %58*/
begin
fe_mul_0_214 = (fe_mul_0_213_reg + fe_mul_0_58);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %214 = add i32 %213, %58*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_214_reg <= fe_mul_0_214;
if (reset == 1'b0 && ^(fe_mul_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_214_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %215 = add i32 %214, %150*/
begin
fe_mul_0_215 = (fe_mul_0_214_reg + fe_mul_0_150);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %215 = add i32 %214, %150*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_215_reg <= fe_mul_0_215;
if (reset == 1'b0 && ^(fe_mul_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_215_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %216 = add i32 %215, %140*/
begin
fe_mul_0_216 = (fe_mul_0_215_reg + fe_mul_0_140);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %216 = add i32 %215, %140*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_216_reg <= fe_mul_0_216;
if (reset == 1'b0 && ^(fe_mul_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_216_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %217 = add i32 %216, %131*/
begin
fe_mul_0_217 = (fe_mul_0_216_reg + fe_mul_0_131);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %217 = add i32 %216, %131*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_217_reg <= fe_mul_0_217;
if (reset == 1'b0 && ^(fe_mul_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_217_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %218 = add i32 %217, %208*/
begin
fe_mul_0_218 = (fe_mul_0_217_reg + fe_mul_0_208);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %218 = add i32 %217, %208*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_218_reg <= fe_mul_0_218;
if (reset == 1'b0 && ^(fe_mul_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_218_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %219 = add nsw i32 %206, 33554432*/
begin
fe_mul_0_219 = (fe_mul_0_206_reg + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %219 = add nsw i32 %206, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_219_reg <= fe_mul_0_219;
if (reset == 1'b0 && ^(fe_mul_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_219_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %220 = ashr i32 %219, 26*/
begin
fe_mul_0_220 = ($signed(fe_mul_0_219) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %220 = ashr i32 %219, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_220_reg <= fe_mul_0_220;
if (reset == 1'b0 && ^(fe_mul_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_220_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %221 = add i32 %73, %82*/
begin
fe_mul_0_221 = (fe_mul_0_73 + fe_mul_0_82);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %221 = add i32 %73, %82*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
fe_mul_0_221_reg <= fe_mul_0_221;
if (reset == 1'b0 && ^(fe_mul_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_221_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %222 = add i32 %221, %64*/
begin
fe_mul_0_222 = (fe_mul_0_221_reg + fe_mul_0_64);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %222 = add i32 %221, %64*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
fe_mul_0_222_reg <= fe_mul_0_222;
if (reset == 1'b0 && ^(fe_mul_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_222_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %223 = add i32 %222, %55*/
begin
fe_mul_0_223 = (fe_mul_0_222_reg + fe_mul_0_55);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %223 = add i32 %222, %55*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
fe_mul_0_223_reg <= fe_mul_0_223;
if (reset == 1'b0 && ^(fe_mul_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_223_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %224 = add i32 %223, %147*/
begin
fe_mul_0_224 = (fe_mul_0_223_reg + fe_mul_0_147);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %224 = add i32 %223, %147*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_11))
begin
fe_mul_0_224_reg <= fe_mul_0_224;
if (reset == 1'b0 && ^(fe_mul_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_224_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %225 = add i32 %224, %137*/
begin
fe_mul_0_225 = (fe_mul_0_224_reg + fe_mul_0_137);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %225 = add i32 %224, %137*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_225_reg <= fe_mul_0_225;
if (reset == 1'b0 && ^(fe_mul_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_225_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %226 = add i32 %225, %128*/
begin
fe_mul_0_226 = (fe_mul_0_225 + fe_mul_0_128_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %226 = add i32 %225, %128*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_226_reg <= fe_mul_0_226;
if (reset == 1'b0 && ^(fe_mul_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_226_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %227 = add i32 %226, %119*/
begin
fe_mul_0_227 = (fe_mul_0_226 + fe_mul_0_119_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %227 = add i32 %226, %119*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_227_reg <= fe_mul_0_227;
if (reset == 1'b0 && ^(fe_mul_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_227_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %228 = add i32 %227, %110*/
begin
fe_mul_0_228 = (fe_mul_0_227_reg + fe_mul_0_110_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %228 = add i32 %227, %110*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_228_reg <= fe_mul_0_228;
if (reset == 1'b0 && ^(fe_mul_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_228_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %229 = add i32 %228, %101*/
begin
fe_mul_0_229 = (fe_mul_0_228 + fe_mul_0_101);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %229 = add i32 %228, %101*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_229_reg <= fe_mul_0_229;
if (reset == 1'b0 && ^(fe_mul_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_229_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %230 = add i32 %229, %220*/
begin
fe_mul_0_230 = (fe_mul_0_229_reg + fe_mul_0_220);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %230 = add i32 %229, %220*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_230_reg <= fe_mul_0_230;
if (reset == 1'b0 && ^(fe_mul_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_230_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %231 = add nsw i32 %218, 33554432*/
begin
fe_mul_0_231 = (fe_mul_0_218 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %231 = add nsw i32 %218, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_231_reg <= fe_mul_0_231;
if (reset == 1'b0 && ^(fe_mul_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_231_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %232 = ashr i32 %231, 26*/
begin
fe_mul_0_232 = ($signed(fe_mul_0_231) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %232 = ashr i32 %231, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_232_reg <= fe_mul_0_232;
if (reset == 1'b0 && ^(fe_mul_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_232_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %233 = add i32 %113, %122*/
begin
fe_mul_0_233 = (fe_mul_0_113_reg + fe_mul_0_122);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %233 = add i32 %113, %122*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_233_reg <= fe_mul_0_233;
if (reset == 1'b0 && ^(fe_mul_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_233_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %234 = add i32 %233, %104*/
begin
fe_mul_0_234 = (fe_mul_0_233 + fe_mul_0_104_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %234 = add i32 %233, %104*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_234_reg <= fe_mul_0_234;
if (reset == 1'b0 && ^(fe_mul_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_234_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %235 = add i32 %234, %95*/
begin
fe_mul_0_235 = (fe_mul_0_234 + fe_mul_0_95_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %235 = add i32 %234, %95*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_12))
begin
fe_mul_0_235_reg <= fe_mul_0_235;
if (reset == 1'b0 && ^(fe_mul_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_235_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %236 = add i32 %235, %86*/
begin
fe_mul_0_236 = (fe_mul_0_235_reg + fe_mul_0_86_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %236 = add i32 %235, %86*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_236_reg <= fe_mul_0_236;
if (reset == 1'b0 && ^(fe_mul_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_236_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %237 = add i32 %236, %77*/
begin
fe_mul_0_237 = (fe_mul_0_236 + fe_mul_0_77_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %237 = add i32 %236, %77*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_237_reg <= fe_mul_0_237;
if (reset == 1'b0 && ^(fe_mul_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_237_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %238 = add i32 %237, %68*/
begin
fe_mul_0_238 = (fe_mul_0_237 + fe_mul_0_68_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %238 = add i32 %237, %68*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_238_reg <= fe_mul_0_238;
if (reset == 1'b0 && ^(fe_mul_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_238_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %239 = add i32 %238, %59*/
begin
fe_mul_0_239 = (fe_mul_0_238_reg + fe_mul_0_59_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %239 = add i32 %238, %59*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_239_reg <= fe_mul_0_239;
if (reset == 1'b0 && ^(fe_mul_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_239_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %240 = add i32 %239, %151*/
begin
fe_mul_0_240 = (fe_mul_0_239 + fe_mul_0_151_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %240 = add i32 %239, %151*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_240_reg <= fe_mul_0_240;
if (reset == 1'b0 && ^(fe_mul_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_240_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %241 = add i32 %240, %141*/
begin
fe_mul_0_241 = (fe_mul_0_240 + fe_mul_0_141);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %241 = add i32 %240, %141*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_241_reg <= fe_mul_0_241;
if (reset == 1'b0 && ^(fe_mul_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_241_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %242 = add i32 %241, %232*/
begin
fe_mul_0_242 = (fe_mul_0_241_reg + fe_mul_0_232_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %242 = add i32 %241, %232*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_242_reg <= fe_mul_0_242;
if (reset == 1'b0 && ^(fe_mul_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_242_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %243 = add nsw i32 %230, 16777216*/
begin
fe_mul_0_243 = (fe_mul_0_230 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %243 = add nsw i32 %230, 16777216*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_243_reg <= fe_mul_0_243;
if (reset == 1'b0 && ^(fe_mul_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_243_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %244 = ashr i32 %243, 25*/
begin
fe_mul_0_244 = ($signed(fe_mul_0_243) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %244 = ashr i32 %243, 25*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_244_reg <= fe_mul_0_244;
if (reset == 1'b0 && ^(fe_mul_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_244_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %245 = add nsw i32 %244, %170*/
begin
fe_mul_0_245 = (fe_mul_0_244_reg + fe_mul_0_170_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %245 = add nsw i32 %244, %170*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_245_reg <= fe_mul_0_245;
if (reset == 1'b0 && ^(fe_mul_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_245_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %246 = add nsw i32 %242, 16777216*/
begin
fe_mul_0_246 = (fe_mul_0_242 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %246 = add nsw i32 %242, 16777216*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_246_reg <= fe_mul_0_246;
if (reset == 1'b0 && ^(fe_mul_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_246_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %247 = ashr i32 %246, 25*/
begin
fe_mul_0_247 = ($signed(fe_mul_0_246) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %247 = ashr i32 %246, 25*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_247_reg <= fe_mul_0_247;
if (reset == 1'b0 && ^(fe_mul_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_247_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %248 = add i32 %123, %132*/
begin
fe_mul_0_248 = (fe_mul_0_123_reg + fe_mul_0_132);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %248 = add i32 %123, %132*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_248_reg <= fe_mul_0_248;
if (reset == 1'b0 && ^(fe_mul_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_248_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %249 = add i32 %248, %114*/
begin
fe_mul_0_249 = (fe_mul_0_248 + fe_mul_0_114_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %249 = add i32 %248, %114*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_249_reg <= fe_mul_0_249;
if (reset == 1'b0 && ^(fe_mul_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_249_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %250 = add i32 %249, %105*/
begin
fe_mul_0_250 = (fe_mul_0_249 + fe_mul_0_105_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %250 = add i32 %249, %105*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_250_reg <= fe_mul_0_250;
if (reset == 1'b0 && ^(fe_mul_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_250_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %251 = add i32 %250, %96*/
begin
fe_mul_0_251 = (fe_mul_0_250_reg + fe_mul_0_96_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %251 = add i32 %250, %96*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_251_reg <= fe_mul_0_251;
if (reset == 1'b0 && ^(fe_mul_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_251_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %252 = add i32 %251, %87*/
begin
fe_mul_0_252 = (fe_mul_0_251 + fe_mul_0_87_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %252 = add i32 %251, %87*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_252_reg <= fe_mul_0_252;
if (reset == 1'b0 && ^(fe_mul_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_252_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %253 = add i32 %252, %78*/
begin
fe_mul_0_253 = (fe_mul_0_252 + fe_mul_0_78_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %253 = add i32 %252, %78*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_253_reg <= fe_mul_0_253;
if (reset == 1'b0 && ^(fe_mul_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_253_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %254 = add i32 %253, %69*/
begin
fe_mul_0_254 = (fe_mul_0_253_reg + fe_mul_0_69_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %254 = add i32 %253, %69*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_254_reg <= fe_mul_0_254;
if (reset == 1'b0 && ^(fe_mul_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_254_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %255 = add i32 %254, %60*/
begin
fe_mul_0_255 = (fe_mul_0_254 + fe_mul_0_60_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %255 = add i32 %254, %60*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_255_reg <= fe_mul_0_255;
if (reset == 1'b0 && ^(fe_mul_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_255_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %256 = add i32 %255, %152*/
begin
fe_mul_0_256 = (fe_mul_0_255 + fe_mul_0_152_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %256 = add i32 %255, %152*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_256_reg <= fe_mul_0_256;
if (reset == 1'b0 && ^(fe_mul_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_256_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %257 = add i32 %256, %247*/
begin
fe_mul_0_257 = (fe_mul_0_256_reg + fe_mul_0_247);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %257 = add i32 %256, %247*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_16))
begin
fe_mul_0_257_reg <= fe_mul_0_257;
if (reset == 1'b0 && ^(fe_mul_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_257_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %258 = add nsw i32 %245, 33554432*/
begin
fe_mul_0_258 = (fe_mul_0_245 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %258 = add nsw i32 %245, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_258_reg <= fe_mul_0_258;
if (reset == 1'b0 && ^(fe_mul_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_258_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %259 = ashr i32 %258, 26*/
begin
fe_mul_0_259 = ($signed(fe_mul_0_258) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %259 = ashr i32 %258, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_259_reg <= fe_mul_0_259;
if (reset == 1'b0 && ^(fe_mul_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_259_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %260 = add i32 %194, %259*/
begin
fe_mul_0_260 = (fe_mul_0_194_reg + fe_mul_0_259);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %260 = add i32 %194, %259*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_260_reg <= fe_mul_0_260;
if (reset == 1'b0 && ^(fe_mul_0_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_260_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %261 = add nsw i32 %257, 33554432*/
begin
fe_mul_0_261 = (fe_mul_0_257_reg + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %261 = add nsw i32 %257, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_261_reg <= fe_mul_0_261;
if (reset == 1'b0 && ^(fe_mul_0_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_261_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %262 = ashr i32 %261, 26*/
begin
fe_mul_0_262 = ($signed(fe_mul_0_261) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %262 = ashr i32 %261, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_262_reg <= fe_mul_0_262;
if (reset == 1'b0 && ^(fe_mul_0_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_262_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %263 = add i32 %133, %142*/
begin
fe_mul_0_263 = (fe_mul_0_133 + fe_mul_0_142_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %263 = add i32 %133, %142*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_263_reg <= fe_mul_0_263;
if (reset == 1'b0 && ^(fe_mul_0_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_263_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %264 = add i32 %263, %124*/
begin
fe_mul_0_264 = (fe_mul_0_263 + fe_mul_0_124_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %264 = add i32 %263, %124*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_264_reg <= fe_mul_0_264;
if (reset == 1'b0 && ^(fe_mul_0_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_264_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %265 = add i32 %264, %115*/
begin
fe_mul_0_265 = (fe_mul_0_264 + fe_mul_0_115_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %265 = add i32 %264, %115*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_13))
begin
fe_mul_0_265_reg <= fe_mul_0_265;
if (reset == 1'b0 && ^(fe_mul_0_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_265_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %266 = add i32 %265, %106*/
begin
fe_mul_0_266 = (fe_mul_0_265_reg + fe_mul_0_106_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %266 = add i32 %265, %106*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_266_reg <= fe_mul_0_266;
if (reset == 1'b0 && ^(fe_mul_0_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_266_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %267 = add i32 %266, %97*/
begin
fe_mul_0_267 = (fe_mul_0_266 + fe_mul_0_97_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %267 = add i32 %266, %97*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_267_reg <= fe_mul_0_267;
if (reset == 1'b0 && ^(fe_mul_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_267_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %268 = add i32 %267, %88*/
begin
fe_mul_0_268 = (fe_mul_0_267 + fe_mul_0_88_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %268 = add i32 %267, %88*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_14))
begin
fe_mul_0_268_reg <= fe_mul_0_268;
if (reset == 1'b0 && ^(fe_mul_0_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_268_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %269 = add i32 %268, %79*/
begin
fe_mul_0_269 = (fe_mul_0_268_reg + fe_mul_0_79_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %269 = add i32 %268, %79*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_269_reg <= fe_mul_0_269;
if (reset == 1'b0 && ^(fe_mul_0_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_269_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %270 = add i32 %269, %70*/
begin
fe_mul_0_270 = (fe_mul_0_269 + fe_mul_0_70_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %270 = add i32 %269, %70*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_270_reg <= fe_mul_0_270;
if (reset == 1'b0 && ^(fe_mul_0_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_270_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %271 = add i32 %270, %61*/
begin
fe_mul_0_271 = (fe_mul_0_270 + fe_mul_0_61_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %271 = add i32 %270, %61*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_15))
begin
fe_mul_0_271_reg <= fe_mul_0_271;
if (reset == 1'b0 && ^(fe_mul_0_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_271_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %272 = add i32 %271, %262*/
begin
fe_mul_0_272 = (fe_mul_0_271_reg + fe_mul_0_262);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %272 = add i32 %271, %262*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_272_reg <= fe_mul_0_272;
if (reset == 1'b0 && ^(fe_mul_0_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_272_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %273 = add nsw i32 %272, 16777216*/
begin
fe_mul_0_273 = (fe_mul_0_272 + 32'd16777216);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %273 = add nsw i32 %272, 16777216*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_273_reg <= fe_mul_0_273;
if (reset == 1'b0 && ^(fe_mul_0_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_273_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %274 = ashr i32 %273, 25*/
begin
fe_mul_0_274 = ($signed(fe_mul_0_273) >>> 32'd25);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %274 = ashr i32 %273, 25*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_17))
begin
fe_mul_0_274_reg <= fe_mul_0_274;
if (reset == 1'b0 && ^(fe_mul_0_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_274_reg"); $finish; end
end
end
always @(*) begin
fe_mul_0_275 = fe_mul_0_275_stage0_reg;
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %275 = mul nsw i32 %274, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_275_reg <= fe_mul_0_275;
if (reset == 1'b0 && ^(fe_mul_0_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_275_reg"); $finish; end
end
/* fe_mul: %0*/
/*   %275 = mul nsw i32 %274, 19*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_275_reg <= fe_mul_0_275;
if (reset == 1'b0 && ^(fe_mul_0_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_275_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %276 = add nsw i32 %275, %161*/
begin
fe_mul_0_276 = (fe_mul_0_275 + fe_mul_0_161_reg);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %276 = add nsw i32 %275, %161*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_276_reg <= fe_mul_0_276;
if (reset == 1'b0 && ^(fe_mul_0_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_276_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %277 = add nsw i32 %276, 33554432*/
begin
fe_mul_0_277 = (fe_mul_0_276 + 32'd33554432);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %277 = add nsw i32 %276, 33554432*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_277_reg <= fe_mul_0_277;
if (reset == 1'b0 && ^(fe_mul_0_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_277_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %278 = ashr i32 %277, 26*/
begin
fe_mul_0_278 = ($signed(fe_mul_0_277) >>> 32'd26);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %278 = ashr i32 %277, 26*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_278_reg <= fe_mul_0_278;
if (reset == 1'b0 && ^(fe_mul_0_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_278_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %279 = add i32 %182, %278*/
begin
fe_mul_0_279 = (fe_mul_0_182_reg + fe_mul_0_278);
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %279 = add i32 %182, %278*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
fe_mul_0_279_reg <= fe_mul_0_279;
if (reset == 1'b0 && ^(fe_mul_0_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_279_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %280 = getelementptr inbounds i32* %h, i32 1*/
begin
fe_mul_0_280 = (arg_h + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %280 = getelementptr inbounds i32* %h, i32 1*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_280_reg <= fe_mul_0_280;
if (reset == 1'b0 && ^(fe_mul_0_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_280_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %281 = getelementptr inbounds i32* %h, i32 2*/
begin
fe_mul_0_281 = (arg_h + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %281 = getelementptr inbounds i32* %h, i32 2*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_281_reg <= fe_mul_0_281;
if (reset == 1'b0 && ^(fe_mul_0_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_281_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %282 = getelementptr inbounds i32* %h, i32 3*/
begin
fe_mul_0_282 = (arg_h + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %282 = getelementptr inbounds i32* %h, i32 3*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_282_reg <= fe_mul_0_282;
if (reset == 1'b0 && ^(fe_mul_0_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_282_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %283 = getelementptr inbounds i32* %h, i32 4*/
begin
fe_mul_0_283 = (arg_h + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %283 = getelementptr inbounds i32* %h, i32 4*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_283_reg <= fe_mul_0_283;
if (reset == 1'b0 && ^(fe_mul_0_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_283_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %284 = getelementptr inbounds i32* %h, i32 5*/
begin
fe_mul_0_284 = (arg_h + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %284 = getelementptr inbounds i32* %h, i32 5*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_284_reg <= fe_mul_0_284;
if (reset == 1'b0 && ^(fe_mul_0_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_284_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %285 = getelementptr inbounds i32* %h, i32 6*/
begin
fe_mul_0_285 = (arg_h + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %285 = getelementptr inbounds i32* %h, i32 6*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_285_reg <= fe_mul_0_285;
if (reset == 1'b0 && ^(fe_mul_0_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_285_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %286 = getelementptr inbounds i32* %h, i32 7*/
begin
fe_mul_0_286 = (arg_h + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %286 = getelementptr inbounds i32* %h, i32 7*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_286_reg <= fe_mul_0_286;
if (reset == 1'b0 && ^(fe_mul_0_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_286_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %287 = getelementptr inbounds i32* %h, i32 8*/
begin
fe_mul_0_287 = (arg_h + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %287 = getelementptr inbounds i32* %h, i32 8*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_287_reg <= fe_mul_0_287;
if (reset == 1'b0 && ^(fe_mul_0_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_287_reg"); $finish; end
end
end
always @(*) begin
/* fe_mul: %0*/
/*   %288 = getelementptr inbounds i32* %h, i32 9*/
begin
fe_mul_0_288 = (arg_h + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %288 = getelementptr inbounds i32* %h, i32 9*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
fe_mul_0_288_reg <= fe_mul_0_288;
if (reset == 1'b0 && ^(fe_mul_0_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_0_288_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fe_mul_0_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %143 = mul i32 %19, 38*/
if ((lpm_mult_fe_mul_0_143_en == 1'd1))
begin
fe_mul_0_143_stage0_reg <= (fe_mul_0_19 * 32'd38);
end
end
always @(*) begin
lpm_mult_fe_mul_0_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %52 = mul nsw i32 %20, %1*/
if ((lpm_mult_fe_mul_0_52_en == 1'd1))
begin
fe_mul_0_52_stage0_reg <= (fe_mul_0_20 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_53_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %53 = mul nsw i32 %22, %1*/
if ((lpm_mult_fe_mul_0_53_en == 1'd1))
begin
fe_mul_0_53_stage0_reg <= (fe_mul_0_22 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_72_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %72 = mul nsw i32 %20, %5*/
if ((lpm_mult_fe_mul_0_72_en == 1'd1))
begin
fe_mul_0_72_stage0_reg <= (fe_mul_0_20 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %73 = mul nsw i32 %22, %5*/
if ((lpm_mult_fe_mul_0_73_en == 1'd1))
begin
fe_mul_0_73_stage0_reg <= (fe_mul_0_22 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_82_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %82 = mul nsw i32 %20, %7*/
if ((lpm_mult_fe_mul_0_82_en == 1'd1))
begin
fe_mul_0_82_stage0_reg <= (fe_mul_0_20 * fe_mul_0_7_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_83_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %83 = mul nsw i32 %22, %48*/
if ((lpm_mult_fe_mul_0_83_en == 1'd1))
begin
fe_mul_0_83_stage0_reg <= (fe_mul_0_22 * fe_mul_0_48_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_92_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %92 = mul nsw i32 %20, %9*/
if ((lpm_mult_fe_mul_0_92_en == 1'd1))
begin
fe_mul_0_92_stage0_reg <= (fe_mul_0_20 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %93 = mul nsw i32 %22, %9*/
if ((lpm_mult_fe_mul_0_93_en == 1'd1))
begin
fe_mul_0_93_stage0_reg <= (fe_mul_0_22 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_102_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %102 = mul nsw i32 %20, %11*/
if ((lpm_mult_fe_mul_0_102_en == 1'd1))
begin
fe_mul_0_102_stage0_reg <= (fe_mul_0_20 * fe_mul_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %103 = mul nsw i32 %22, %49*/
if ((lpm_mult_fe_mul_0_103_en == 1'd1))
begin
fe_mul_0_103_stage0_reg <= (fe_mul_0_22 * fe_mul_0_49_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_142_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %142 = mul nsw i32 %20, %19*/
if ((lpm_mult_fe_mul_0_142_en == 1'd1))
begin
fe_mul_0_142_stage0_reg <= (fe_mul_0_20 * fe_mul_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_144_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %144 = mul i32 %143, %22*/
if ((lpm_mult_fe_mul_0_144_en == 1'd1))
begin
fe_mul_0_144_stage0_reg <= (fe_mul_0_143 * fe_mul_0_22);
end
end
always @(*) begin
lpm_mult_fe_mul_0_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %39 = mul nsw i32 %24, 19*/
if ((lpm_mult_fe_mul_0_39_en == 1'd1))
begin
fe_mul_0_39_stage0_reg <= (fe_mul_0_24 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %42 = mul nsw i32 %30, 19*/
if ((lpm_mult_fe_mul_0_42_en == 1'd1))
begin
fe_mul_0_42_stage0_reg <= (fe_mul_0_30 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %54 = mul nsw i32 %24, %1*/
if ((lpm_mult_fe_mul_0_54_en == 1'd1))
begin
fe_mul_0_54_stage0_reg <= (fe_mul_0_24 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %57 = mul nsw i32 %30, %1*/
if ((lpm_mult_fe_mul_0_57_en == 1'd1))
begin
fe_mul_0_57_stage0_reg <= (fe_mul_0_30 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_74_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %74 = mul nsw i32 %24, %5*/
if ((lpm_mult_fe_mul_0_74_en == 1'd1))
begin
fe_mul_0_74_stage0_reg <= (fe_mul_0_24 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %77 = mul nsw i32 %30, %5*/
if ((lpm_mult_fe_mul_0_77_en == 1'd1))
begin
fe_mul_0_77_stage0_reg <= (fe_mul_0_30 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_84_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %84 = mul nsw i32 %24, %7*/
if ((lpm_mult_fe_mul_0_84_en == 1'd1))
begin
fe_mul_0_84_stage0_reg <= (fe_mul_0_24 * fe_mul_0_7_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %87 = mul nsw i32 %30, %48*/
if ((lpm_mult_fe_mul_0_87_en == 1'd1))
begin
fe_mul_0_87_stage0_reg <= (fe_mul_0_30 * fe_mul_0_48_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_94_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %94 = mul nsw i32 %24, %9*/
if ((lpm_mult_fe_mul_0_94_en == 1'd1))
begin
fe_mul_0_94_stage0_reg <= (fe_mul_0_24 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_97_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %97 = mul nsw i32 %30, %9*/
if ((lpm_mult_fe_mul_0_97_en == 1'd1))
begin
fe_mul_0_97_stage0_reg <= (fe_mul_0_30 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_104_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %104 = mul nsw i32 %24, %11*/
if ((lpm_mult_fe_mul_0_104_en == 1'd1))
begin
fe_mul_0_104_stage0_reg <= (fe_mul_0_24 * fe_mul_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %62 = mul nsw i32 %20, %3*/
if ((lpm_mult_fe_mul_0_62_en == 1'd1))
begin
fe_mul_0_62_stage0_reg <= (fe_mul_0_20_reg * fe_mul_0_3);
end
end
always @(*) begin
lpm_mult_fe_mul_0_63_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %63 = mul nsw i32 %22, %47*/
if ((lpm_mult_fe_mul_0_63_en == 1'd1))
begin
fe_mul_0_63_stage0_reg <= (fe_mul_0_22_reg * fe_mul_0_47);
end
end
always @(*) begin
lpm_mult_fe_mul_0_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %64 = mul nsw i32 %24, %3*/
if ((lpm_mult_fe_mul_0_64_en == 1'd1))
begin
fe_mul_0_64_stage0_reg <= (fe_mul_0_24_reg * fe_mul_0_3);
end
end
always @(*) begin
lpm_mult_fe_mul_0_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %67 = mul nsw i32 %30, %47*/
if ((lpm_mult_fe_mul_0_67_en == 1'd1))
begin
fe_mul_0_67_stage0_reg <= (fe_mul_0_30_reg * fe_mul_0_47);
end
end
always @(*) begin
lpm_mult_fe_mul_0_107_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %107 = mul nsw i32 %42, %49*/
if ((lpm_mult_fe_mul_0_107_en == 1'd1))
begin
fe_mul_0_107_stage0_reg <= (fe_mul_0_42 * fe_mul_0_49_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %112 = mul nsw i32 %20, %13*/
if ((lpm_mult_fe_mul_0_112_en == 1'd1))
begin
fe_mul_0_112_stage0_reg <= (fe_mul_0_20_reg * fe_mul_0_13);
end
end
always @(*) begin
lpm_mult_fe_mul_0_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %113 = mul nsw i32 %22, %13*/
if ((lpm_mult_fe_mul_0_113_en == 1'd1))
begin
fe_mul_0_113_stage0_reg <= (fe_mul_0_22_reg * fe_mul_0_13);
end
end
always @(*) begin
lpm_mult_fe_mul_0_114_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %114 = mul nsw i32 %24, %13*/
if ((lpm_mult_fe_mul_0_114_en == 1'd1))
begin
fe_mul_0_114_stage0_reg <= (fe_mul_0_24_reg * fe_mul_0_13);
end
end
always @(*) begin
lpm_mult_fe_mul_0_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %117 = mul nsw i32 %42, %13*/
if ((lpm_mult_fe_mul_0_117_en == 1'd1))
begin
fe_mul_0_117_stage0_reg <= (fe_mul_0_42 * fe_mul_0_13);
end
end
always @(*) begin
lpm_mult_fe_mul_0_145_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %145 = mul nsw i32 %39, %19*/
if ((lpm_mult_fe_mul_0_145_en == 1'd1))
begin
fe_mul_0_145_stage0_reg <= (fe_mul_0_39 * fe_mul_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_148_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %148 = mul nsw i32 %42, %51*/
if ((lpm_mult_fe_mul_0_148_en == 1'd1))
begin
fe_mul_0_148_stage0_reg <= (fe_mul_0_42 * fe_mul_0_51_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %40 = mul nsw i32 %26, 19*/
if ((lpm_mult_fe_mul_0_40_en == 1'd1))
begin
fe_mul_0_40_stage0_reg <= (fe_mul_0_26 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %41 = mul nsw i32 %28, 19*/
if ((lpm_mult_fe_mul_0_41_en == 1'd1))
begin
fe_mul_0_41_stage0_reg <= (fe_mul_0_28 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %55 = mul nsw i32 %26, %1*/
if ((lpm_mult_fe_mul_0_55_en == 1'd1))
begin
fe_mul_0_55_stage0_reg <= (fe_mul_0_26 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %56 = mul nsw i32 %28, %1*/
if ((lpm_mult_fe_mul_0_56_en == 1'd1))
begin
fe_mul_0_56_stage0_reg <= (fe_mul_0_28 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %65 = mul nsw i32 %26, %47*/
if ((lpm_mult_fe_mul_0_65_en == 1'd1))
begin
fe_mul_0_65_stage0_reg <= (fe_mul_0_26 * fe_mul_0_47_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %66 = mul nsw i32 %28, %3*/
if ((lpm_mult_fe_mul_0_66_en == 1'd1))
begin
fe_mul_0_66_stage0_reg <= (fe_mul_0_28 * fe_mul_0_3_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %75 = mul nsw i32 %26, %5*/
if ((lpm_mult_fe_mul_0_75_en == 1'd1))
begin
fe_mul_0_75_stage0_reg <= (fe_mul_0_26 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %76 = mul nsw i32 %28, %5*/
if ((lpm_mult_fe_mul_0_76_en == 1'd1))
begin
fe_mul_0_76_stage0_reg <= (fe_mul_0_28 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_85_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %85 = mul nsw i32 %26, %48*/
if ((lpm_mult_fe_mul_0_85_en == 1'd1))
begin
fe_mul_0_85_stage0_reg <= (fe_mul_0_26 * fe_mul_0_48_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %86 = mul nsw i32 %28, %7*/
if ((lpm_mult_fe_mul_0_86_en == 1'd1))
begin
fe_mul_0_86_stage0_reg <= (fe_mul_0_28 * fe_mul_0_7_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_95_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %95 = mul nsw i32 %26, %9*/
if ((lpm_mult_fe_mul_0_95_en == 1'd1))
begin
fe_mul_0_95_stage0_reg <= (fe_mul_0_26 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %96 = mul nsw i32 %28, %9*/
if ((lpm_mult_fe_mul_0_96_en == 1'd1))
begin
fe_mul_0_96_stage0_reg <= (fe_mul_0_28 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %105 = mul nsw i32 %26, %49*/
if ((lpm_mult_fe_mul_0_105_en == 1'd1))
begin
fe_mul_0_105_stage0_reg <= (fe_mul_0_26 * fe_mul_0_49_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_106_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %106 = mul nsw i32 %28, %11*/
if ((lpm_mult_fe_mul_0_106_en == 1'd1))
begin
fe_mul_0_106_stage0_reg <= (fe_mul_0_28 * fe_mul_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_115_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %115 = mul nsw i32 %26, %13*/
if ((lpm_mult_fe_mul_0_115_en == 1'd1))
begin
fe_mul_0_115_stage0_reg <= (fe_mul_0_26 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %43 = mul nsw i32 %32, 19*/
if ((lpm_mult_fe_mul_0_43_en == 1'd1))
begin
fe_mul_0_43_stage0_reg <= (fe_mul_0_32 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %44 = mul nsw i32 %34, 19*/
if ((lpm_mult_fe_mul_0_44_en == 1'd1))
begin
fe_mul_0_44_stage0_reg <= (fe_mul_0_34 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %58 = mul nsw i32 %32, %1*/
if ((lpm_mult_fe_mul_0_58_en == 1'd1))
begin
fe_mul_0_58_stage0_reg <= (fe_mul_0_32 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %59 = mul nsw i32 %34, %1*/
if ((lpm_mult_fe_mul_0_59_en == 1'd1))
begin
fe_mul_0_59_stage0_reg <= (fe_mul_0_34 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %68 = mul nsw i32 %32, %3*/
if ((lpm_mult_fe_mul_0_68_en == 1'd1))
begin
fe_mul_0_68_stage0_reg <= (fe_mul_0_32 * fe_mul_0_3_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %69 = mul nsw i32 %34, %47*/
if ((lpm_mult_fe_mul_0_69_en == 1'd1))
begin
fe_mul_0_69_stage0_reg <= (fe_mul_0_34 * fe_mul_0_47_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %78 = mul nsw i32 %32, %5*/
if ((lpm_mult_fe_mul_0_78_en == 1'd1))
begin
fe_mul_0_78_stage0_reg <= (fe_mul_0_32 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %79 = mul nsw i32 %34, %5*/
if ((lpm_mult_fe_mul_0_79_en == 1'd1))
begin
fe_mul_0_79_stage0_reg <= (fe_mul_0_34 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_88_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %88 = mul nsw i32 %32, %7*/
if ((lpm_mult_fe_mul_0_88_en == 1'd1))
begin
fe_mul_0_88_stage0_reg <= (fe_mul_0_32 * fe_mul_0_7_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_116_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %116 = mul nsw i32 %41, %13*/
if ((lpm_mult_fe_mul_0_116_en == 1'd1))
begin
fe_mul_0_116_stage0_reg <= (fe_mul_0_41 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_146_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %146 = mul nsw i32 %40, %51*/
if ((lpm_mult_fe_mul_0_146_en == 1'd1))
begin
fe_mul_0_146_stage0_reg <= (fe_mul_0_40 * fe_mul_0_51_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_147_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %147 = mul nsw i32 %41, %19*/
if ((lpm_mult_fe_mul_0_147_en == 1'd1))
begin
fe_mul_0_147_stage0_reg <= (fe_mul_0_41 * fe_mul_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %45 = mul nsw i32 %36, 19*/
if ((lpm_mult_fe_mul_0_45_en == 1'd1))
begin
fe_mul_0_45_stage0_reg <= (fe_mul_0_36 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %60 = mul nsw i32 %36, %1*/
if ((lpm_mult_fe_mul_0_60_en == 1'd1))
begin
fe_mul_0_60_stage0_reg <= (fe_mul_0_36 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %70 = mul nsw i32 %36, %3*/
if ((lpm_mult_fe_mul_0_70_en == 1'd1))
begin
fe_mul_0_70_stage0_reg <= (fe_mul_0_36 * fe_mul_0_3_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_89_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %89 = mul nsw i32 %44, %48*/
if ((lpm_mult_fe_mul_0_89_en == 1'd1))
begin
fe_mul_0_89_stage0_reg <= (fe_mul_0_44 * fe_mul_0_48_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_98_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %98 = mul nsw i32 %43, %9*/
if ((lpm_mult_fe_mul_0_98_en == 1'd1))
begin
fe_mul_0_98_stage0_reg <= (fe_mul_0_43 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %99 = mul nsw i32 %44, %9*/
if ((lpm_mult_fe_mul_0_99_en == 1'd1))
begin
fe_mul_0_99_stage0_reg <= (fe_mul_0_44 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_108_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %108 = mul nsw i32 %43, %11*/
if ((lpm_mult_fe_mul_0_108_en == 1'd1))
begin
fe_mul_0_108_stage0_reg <= (fe_mul_0_43 * fe_mul_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %109 = mul nsw i32 %44, %49*/
if ((lpm_mult_fe_mul_0_109_en == 1'd1))
begin
fe_mul_0_109_stage0_reg <= (fe_mul_0_44 * fe_mul_0_49_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_118_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %118 = mul nsw i32 %43, %13*/
if ((lpm_mult_fe_mul_0_118_en == 1'd1))
begin
fe_mul_0_118_stage0_reg <= (fe_mul_0_43 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_119_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %119 = mul nsw i32 %44, %13*/
if ((lpm_mult_fe_mul_0_119_en == 1'd1))
begin
fe_mul_0_119_stage0_reg <= (fe_mul_0_44 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_122_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %122 = mul nsw i32 %20, %15*/
if ((lpm_mult_fe_mul_0_122_en == 1'd1))
begin
fe_mul_0_122_stage0_reg <= (fe_mul_0_20_reg * fe_mul_0_15);
end
end
always @(*) begin
lpm_mult_fe_mul_0_123_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %123 = mul nsw i32 %22, %50*/
if ((lpm_mult_fe_mul_0_123_en == 1'd1))
begin
fe_mul_0_123_stage0_reg <= (fe_mul_0_22_reg * fe_mul_0_50);
end
end
always @(*) begin
lpm_mult_fe_mul_0_124_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %124 = mul nsw i32 %24, %15*/
if ((lpm_mult_fe_mul_0_124_en == 1'd1))
begin
fe_mul_0_124_stage0_reg <= (fe_mul_0_24_reg * fe_mul_0_15);
end
end
always @(*) begin
lpm_mult_fe_mul_0_125_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %125 = mul nsw i32 %40, %50*/
if ((lpm_mult_fe_mul_0_125_en == 1'd1))
begin
fe_mul_0_125_stage0_reg <= (fe_mul_0_40_reg * fe_mul_0_50);
end
end
always @(*) begin
lpm_mult_fe_mul_0_126_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %126 = mul nsw i32 %41, %15*/
if ((lpm_mult_fe_mul_0_126_en == 1'd1))
begin
fe_mul_0_126_stage0_reg <= (fe_mul_0_41_reg * fe_mul_0_15);
end
end
always @(*) begin
lpm_mult_fe_mul_0_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %127 = mul nsw i32 %42, %50*/
if ((lpm_mult_fe_mul_0_127_en == 1'd1))
begin
fe_mul_0_127_stage0_reg <= (fe_mul_0_42_reg * fe_mul_0_50);
end
end
always @(*) begin
lpm_mult_fe_mul_0_128_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %128 = mul nsw i32 %43, %15*/
if ((lpm_mult_fe_mul_0_128_en == 1'd1))
begin
fe_mul_0_128_stage0_reg <= (fe_mul_0_43 * fe_mul_0_15);
end
end
always @(*) begin
lpm_mult_fe_mul_0_129_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %129 = mul nsw i32 %44, %50*/
if ((lpm_mult_fe_mul_0_129_en == 1'd1))
begin
fe_mul_0_129_stage0_reg <= (fe_mul_0_44 * fe_mul_0_50);
end
end
always @(*) begin
lpm_mult_fe_mul_0_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %149 = mul nsw i32 %43, %19*/
if ((lpm_mult_fe_mul_0_149_en == 1'd1))
begin
fe_mul_0_149_stage0_reg <= (fe_mul_0_43 * fe_mul_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_150_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %150 = mul nsw i32 %44, %51*/
if ((lpm_mult_fe_mul_0_150_en == 1'd1))
begin
fe_mul_0_150_stage0_reg <= (fe_mul_0_44 * fe_mul_0_51_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %46 = mul nsw i32 %38, 19*/
if ((lpm_mult_fe_mul_0_46_en == 1'd1))
begin
fe_mul_0_46_stage0_reg <= (fe_mul_0_38 * 32'd19);
end
end
always @(*) begin
lpm_mult_fe_mul_0_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %61 = mul nsw i32 %38, %1*/
if ((lpm_mult_fe_mul_0_61_en == 1'd1))
begin
fe_mul_0_61_stage0_reg <= (fe_mul_0_38 * fe_mul_0_1_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %80 = mul nsw i32 %45, %5*/
if ((lpm_mult_fe_mul_0_80_en == 1'd1))
begin
fe_mul_0_80_stage0_reg <= (fe_mul_0_45 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_90_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %90 = mul nsw i32 %45, %7*/
if ((lpm_mult_fe_mul_0_90_en == 1'd1))
begin
fe_mul_0_90_stage0_reg <= (fe_mul_0_45 * fe_mul_0_7_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_100_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %100 = mul nsw i32 %45, %9*/
if ((lpm_mult_fe_mul_0_100_en == 1'd1))
begin
fe_mul_0_100_stage0_reg <= (fe_mul_0_45 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_110_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %110 = mul nsw i32 %45, %11*/
if ((lpm_mult_fe_mul_0_110_en == 1'd1))
begin
fe_mul_0_110_stage0_reg <= (fe_mul_0_45 * fe_mul_0_11_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_120_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %120 = mul nsw i32 %45, %13*/
if ((lpm_mult_fe_mul_0_120_en == 1'd1))
begin
fe_mul_0_120_stage0_reg <= (fe_mul_0_45 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_130_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %130 = mul nsw i32 %45, %15*/
if ((lpm_mult_fe_mul_0_130_en == 1'd1))
begin
fe_mul_0_130_stage0_reg <= (fe_mul_0_45 * fe_mul_0_15_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_132_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %132 = mul nsw i32 %20, %17*/
if ((lpm_mult_fe_mul_0_132_en == 1'd1))
begin
fe_mul_0_132_stage0_reg <= (fe_mul_0_20_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_133_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %133 = mul nsw i32 %22, %17*/
if ((lpm_mult_fe_mul_0_133_en == 1'd1))
begin
fe_mul_0_133_stage0_reg <= (fe_mul_0_22_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_134_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %134 = mul nsw i32 %39, %17*/
if ((lpm_mult_fe_mul_0_134_en == 1'd1))
begin
fe_mul_0_134_stage0_reg <= (fe_mul_0_39_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %135 = mul nsw i32 %40, %17*/
if ((lpm_mult_fe_mul_0_135_en == 1'd1))
begin
fe_mul_0_135_stage0_reg <= (fe_mul_0_40_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_136_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %136 = mul nsw i32 %41, %17*/
if ((lpm_mult_fe_mul_0_136_en == 1'd1))
begin
fe_mul_0_136_stage0_reg <= (fe_mul_0_41_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %137 = mul nsw i32 %42, %17*/
if ((lpm_mult_fe_mul_0_137_en == 1'd1))
begin
fe_mul_0_137_stage0_reg <= (fe_mul_0_42_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %138 = mul nsw i32 %43, %17*/
if ((lpm_mult_fe_mul_0_138_en == 1'd1))
begin
fe_mul_0_138_stage0_reg <= (fe_mul_0_43_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %139 = mul nsw i32 %44, %17*/
if ((lpm_mult_fe_mul_0_139_en == 1'd1))
begin
fe_mul_0_139_stage0_reg <= (fe_mul_0_44_reg * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_140_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %140 = mul nsw i32 %45, %17*/
if ((lpm_mult_fe_mul_0_140_en == 1'd1))
begin
fe_mul_0_140_stage0_reg <= (fe_mul_0_45 * fe_mul_0_17);
end
end
always @(*) begin
lpm_mult_fe_mul_0_151_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %151 = mul nsw i32 %45, %19*/
if ((lpm_mult_fe_mul_0_151_en == 1'd1))
begin
fe_mul_0_151_stage0_reg <= (fe_mul_0_45 * fe_mul_0_19_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %71 = mul nsw i32 %46, %47*/
if ((lpm_mult_fe_mul_0_71_en == 1'd1))
begin
fe_mul_0_71_stage0_reg <= (fe_mul_0_46 * fe_mul_0_47_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %81 = mul nsw i32 %46, %5*/
if ((lpm_mult_fe_mul_0_81_en == 1'd1))
begin
fe_mul_0_81_stage0_reg <= (fe_mul_0_46 * fe_mul_0_5_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_91_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %91 = mul nsw i32 %46, %48*/
if ((lpm_mult_fe_mul_0_91_en == 1'd1))
begin
fe_mul_0_91_stage0_reg <= (fe_mul_0_46 * fe_mul_0_48_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_101_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %101 = mul nsw i32 %46, %9*/
if ((lpm_mult_fe_mul_0_101_en == 1'd1))
begin
fe_mul_0_101_stage0_reg <= (fe_mul_0_46 * fe_mul_0_9_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_111_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %111 = mul nsw i32 %46, %49*/
if ((lpm_mult_fe_mul_0_111_en == 1'd1))
begin
fe_mul_0_111_stage0_reg <= (fe_mul_0_46 * fe_mul_0_49_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %121 = mul nsw i32 %46, %13*/
if ((lpm_mult_fe_mul_0_121_en == 1'd1))
begin
fe_mul_0_121_stage0_reg <= (fe_mul_0_46 * fe_mul_0_13_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %131 = mul nsw i32 %46, %50*/
if ((lpm_mult_fe_mul_0_131_en == 1'd1))
begin
fe_mul_0_131_stage0_reg <= (fe_mul_0_46 * fe_mul_0_50_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_141_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %141 = mul nsw i32 %46, %17*/
if ((lpm_mult_fe_mul_0_141_en == 1'd1))
begin
fe_mul_0_141_stage0_reg <= (fe_mul_0_46 * fe_mul_0_17_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_152_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %152 = mul nsw i32 %46, %51*/
if ((lpm_mult_fe_mul_0_152_en == 1'd1))
begin
fe_mul_0_152_stage0_reg <= (fe_mul_0_46 * fe_mul_0_51_reg);
end
end
always @(*) begin
lpm_mult_fe_mul_0_275_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fe_mul: %0*/
/*   %275 = mul nsw i32 %274, 19*/
if ((lpm_mult_fe_mul_0_275_en == 1'd1))
begin
fe_mul_0_275_stage0_reg <= (fe_mul_0_274 * 32'd19);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fe_mul: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_23))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %276, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %206, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %245, i32* %283, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %218, i32* %285, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %257, i32* %287, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_address_a = arg_f;
end
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_address_a = fe_mul_0_6_reg;
end
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_address_a = fe_mul_0_10_reg;
end
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_address_a = arg_g;
end
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_address_a = fe_mul_0_23_reg;
end
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_address_a = fe_mul_0_2_reg;
end
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_address_a = fe_mul_0_25_reg;
end
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_address_a = fe_mul_0_31_reg;
end
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_address_a = fe_mul_0_14_reg;
end
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_address_a = fe_mul_0_16_reg;
end
/* fe_mul: %0*/
/*   store i32 %276, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_address_a = arg_h;
end
/* fe_mul: %0*/
/*   store i32 %206, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_address_a = fe_mul_0_281_reg;
end
/* fe_mul: %0*/
/*   store i32 %245, i32* %283, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_address_a = fe_mul_0_283_reg;
end
/* fe_mul: %0*/
/*   store i32 %218, i32* %285, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_address_a = fe_mul_0_285_reg;
end
/* fe_mul: %0*/
/*   store i32 %257, i32* %287, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_address_a = fe_mul_0_287_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fe_mul: %0*/
/*   store i32 %276, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %206, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %245, i32* %283, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %218, i32* %285, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %257, i32* %287, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fe_mul: %0*/
/*   store i32 %276, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_in_a = fe_mul_0_276;
end
/* fe_mul: %0*/
/*   store i32 %206, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_in_a = fe_mul_0_206_reg;
end
/* fe_mul: %0*/
/*   store i32 %245, i32* %283, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_in_a = fe_mul_0_245_reg;
end
/* fe_mul: %0*/
/*   store i32 %218, i32* %285, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_in_a = fe_mul_0_218_reg;
end
/* fe_mul: %0*/
/*   store i32 %257, i32* %287, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_in_a = fe_mul_0_257_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fe_mul: %0*/
/*   %1 = load i32* %f, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %20 = load i32* %g, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %24 = load i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %276, i32* %h, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %206, i32* %281, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %245, i32* %283, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %218, i32* %285, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_size_a = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %257, i32* %287, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %279, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %230, i32* %282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %260, i32* %284, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %242, i32* %286, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %272, i32* %288, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_address_b = fe_mul_0_4;
end
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_address_b = fe_mul_0_8_reg;
end
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_address_b = fe_mul_0_18_reg;
end
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_address_b = fe_mul_0_21_reg;
end
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_address_b = fe_mul_0_29_reg;
end
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_address_b = fe_mul_0_12_reg;
end
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_address_b = fe_mul_0_27_reg;
end
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_address_b = fe_mul_0_33_reg;
end
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_address_b = fe_mul_0_35_reg;
end
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_address_b = fe_mul_0_37_reg;
end
/* fe_mul: %0*/
/*   store i32 %279, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_address_b = fe_mul_0_280_reg;
end
/* fe_mul: %0*/
/*   store i32 %230, i32* %282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_address_b = fe_mul_0_282_reg;
end
/* fe_mul: %0*/
/*   store i32 %260, i32* %284, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_address_b = fe_mul_0_284_reg;
end
/* fe_mul: %0*/
/*   store i32 %242, i32* %286, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_address_b = fe_mul_0_286_reg;
end
/* fe_mul: %0*/
/*   store i32 %272, i32* %288, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_address_b = fe_mul_0_288_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fe_mul: %0*/
/*   store i32 %279, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %230, i32* %282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %260, i32* %284, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %242, i32* %286, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fe_mul: %0*/
/*   store i32 %272, i32* %288, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fe_mul: %0*/
/*   store i32 %279, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_in_b = fe_mul_0_279;
end
/* fe_mul: %0*/
/*   store i32 %230, i32* %282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_in_b = fe_mul_0_230_reg;
end
/* fe_mul: %0*/
/*   store i32 %260, i32* %284, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_in_b = fe_mul_0_260_reg;
end
/* fe_mul: %0*/
/*   store i32 %242, i32* %286, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_in_b = fe_mul_0_242_reg;
end
/* fe_mul: %0*/
/*   store i32 %272, i32* %288, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_in_b = fe_mul_0_272_reg;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fe_mul: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_7))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %34 = load i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_8))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_9))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_10))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %279, i32* %280, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %230, i32* %282, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_19))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %260, i32* %284, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_20))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %242, i32* %286, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_21))
begin
memory_controller_size_b = 2'd2;
end
/* fe_mul: %0*/
/*   store i32 %272, i32* %288, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fe_mul_BB_0_22))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fe_mul_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_arg_h;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_arg_f;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_arg_g;
wire  fe_mul_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_memory_controller_address_a;
wire  fe_mul_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_mul_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_mul_memory_controller_out_a;
wire [1:0] fe_mul_memory_controller_size_a;
wire  fe_mul_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fe_mul_memory_controller_address_b;
wire  fe_mul_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_mul_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fe_mul_memory_controller_out_b;
wire [1:0] fe_mul_memory_controller_size_b;
reg  fe_mul_memory_controller_waitrequest;
wire  fe_mul_finish;
reg  fe_mul_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fe_mul fe_mul_inst (
	.memory_controller_enable_a (fe_mul_memory_controller_enable_a),
	.memory_controller_address_a (fe_mul_memory_controller_address_a),
	.memory_controller_write_enable_a (fe_mul_memory_controller_write_enable_a),
	.memory_controller_in_a (fe_mul_memory_controller_in_a),
	.memory_controller_size_a (fe_mul_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fe_mul_memory_controller_enable_b),
	.memory_controller_address_b (fe_mul_memory_controller_address_b),
	.memory_controller_write_enable_b (fe_mul_memory_controller_write_enable_b),
	.memory_controller_in_b (fe_mul_memory_controller_in_b),
	.memory_controller_size_b (fe_mul_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fe_mul_start),
	.finish (fe_mul_finish),
	.arg_h (fe_mul_arg_h),
	.arg_f (fe_mul_arg_f),
	.arg_g (fe_mul_arg_g)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fe_mul_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fe_mul_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_mul_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fe_mul_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_mul_arg_h <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_arg_h"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_mul_arg_f <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_arg_f"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fe_mul_arg_g <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fe_mul_arg_g"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
begin
fe_mul_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
begin
fe_mul_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fe_mul_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fe_mul_finish_final = fe_mul_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fe_mul_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fe_mul_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_mul_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_mul_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fe_mul_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fe_mul_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_mul_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_mul_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fe_mul_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fe_mul_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fe_mul_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fe_mul_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_mul_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fe_mul_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fe_mul_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fe_mul_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_mul_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fe_mul_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fe_mul_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fe_mul(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fe_mul_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
