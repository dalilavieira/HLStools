//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:54:35 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module DDSDecodeAlpha3BitLinear
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_pixel,
	arg_alphaBlock,
	arg_width,
	arg_alphaZero
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5 = 7'd5;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6 = 7'd6;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7 = 7'd7;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8 = 7'd8;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9 = 7'd9;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10 = 7'd10;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11 = 7'd11;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12 = 7'd12;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13 = 7'd13;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14 = 7'd14;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15 = 7'd15;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16 = 7'd16;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17 = 7'd17;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18 = 7'd18;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19 = 7'd19;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20 = 7'd20;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21 = 7'd21;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22 = 7'd22;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23 = 7'd23;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24 = 7'd24;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25 = 7'd25;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26 = 7'd26;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27 = 7'd27;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28 = 7'd28;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29 = 7'd29;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30 = 7'd30;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31 = 7'd31;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32 = 7'd32;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33 = 7'd33;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34 = 7'd34;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35 = 7'd35;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36 = 7'd36;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37 = 7'd37;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38 = 7'd38;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39 = 7'd39;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40 = 7'd40;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41 = 7'd41;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42 = 7'd42;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43 = 7'd43;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44 = 7'd44;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45 = 7'd45;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46 = 7'd46;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47 = 7'd47;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48 = 7'd48;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49 = 7'd49;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50 = 7'd50;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51 = 7'd51;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52 = 7'd52;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53 = 7'd53;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54 = 7'd54;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55 = 7'd55;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56 = 7'd56;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57 = 7'd57;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58 = 7'd58;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59 = 7'd59;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60 = 7'd60;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61 = 7'd61;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62 = 7'd62;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63 = 7'd63;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64 = 7'd64;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65 = 7'd65;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66 = 7'd66;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67 = 7'd67;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68 = 7'd68;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69 = 7'd69;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70 = 7'd70;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71 = 7'd71;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72 = 7'd72;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73 = 7'd73;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74 = 7'd74;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75 = 7'd75;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76 = 7'd76;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77 = 7'd77;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78 = 7'd78;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79 = 7'd79;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80 = 7'd80;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81 = 7'd81;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82 = 7'd82;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83 = 7'd83;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84 = 7'd84;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85 = 7'd85;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86 = 7'd86;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87 = 7'd87;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88 = 7'd88;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89 = 7'd89;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90 = 7'd90;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91 = 7'd91;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92 = 7'd92;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93 = 7'd93;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94 = 7'd94;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95 = 7'd95;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96 = 7'd96;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97 = 7'd97;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98 = 7'd98;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99 = 7'd99;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100 = 7'd100;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101 = 7'd101;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102 = 7'd102;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103 = 7'd103;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104 = 7'd104;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105 = 7'd105;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106 = 7'd106;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107 = 7'd107;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108 = 7'd108;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109 = 7'd109;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110 = 7'd110;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111 = 7'd111;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112 = 7'd112;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113 = 7'd113;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114 = 7'd114;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115 = 7'd115;
parameter [6:0] LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116 = 7'd116;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_pixel;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_alphaBlock;
input [31:0] arg_width;
input [31:0] arg_alphaZero;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_1_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_0_2;
reg [15:0] DDSDecodeAlpha3BitLinear_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_4_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_0_5;
reg [15:0] DDSDecodeAlpha3BitLinear_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_0_6_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_0_7;
reg [31:0] DDSDecodeAlpha3BitLinear_0_7_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_0_8;
reg [31:0] DDSDecodeAlpha3BitLinear_0_8_reg;
reg  DDSDecodeAlpha3BitLinear_0_9;
reg  DDSDecodeAlpha3BitLinear_0_9_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_11;
reg [31:0] DDSDecodeAlpha3BitLinear_10_11_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_12;
reg [31:0] DDSDecodeAlpha3BitLinear_10_12_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_13;
reg [31:0] DDSDecodeAlpha3BitLinear_10_13_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_14;
reg [15:0] DDSDecodeAlpha3BitLinear_10_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_15_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_16;
reg [31:0] DDSDecodeAlpha3BitLinear_10_16_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_17;
reg [31:0] DDSDecodeAlpha3BitLinear_10_17_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_18;
reg [31:0] DDSDecodeAlpha3BitLinear_10_18_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_19;
reg [31:0] DDSDecodeAlpha3BitLinear_10_19_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_20;
reg [15:0] DDSDecodeAlpha3BitLinear_10_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_21_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_22;
reg [31:0] DDSDecodeAlpha3BitLinear_10_22_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_23;
reg [31:0] DDSDecodeAlpha3BitLinear_10_23_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_24;
reg [31:0] DDSDecodeAlpha3BitLinear_10_24_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_25;
reg [31:0] DDSDecodeAlpha3BitLinear_10_25_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_26;
reg [15:0] DDSDecodeAlpha3BitLinear_10_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_27_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_28;
reg [31:0] DDSDecodeAlpha3BitLinear_10_28_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_29;
reg [31:0] DDSDecodeAlpha3BitLinear_10_29_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_30;
reg [31:0] DDSDecodeAlpha3BitLinear_10_30_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_31;
reg [31:0] DDSDecodeAlpha3BitLinear_10_31_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_32;
reg [15:0] DDSDecodeAlpha3BitLinear_10_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_33_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_34;
reg [31:0] DDSDecodeAlpha3BitLinear_10_34_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_35;
reg [31:0] DDSDecodeAlpha3BitLinear_10_35_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_36;
reg [31:0] DDSDecodeAlpha3BitLinear_10_36_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_37;
reg [31:0] DDSDecodeAlpha3BitLinear_10_37_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_38;
reg [15:0] DDSDecodeAlpha3BitLinear_10_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_39_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_40;
reg [31:0] DDSDecodeAlpha3BitLinear_10_40_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_41;
reg [31:0] DDSDecodeAlpha3BitLinear_10_41_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_10_42;
reg [31:0] DDSDecodeAlpha3BitLinear_10_42_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_10_43;
reg [15:0] DDSDecodeAlpha3BitLinear_10_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_10_44_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_46;
reg [31:0] DDSDecodeAlpha3BitLinear_45_46_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_47;
reg [31:0] DDSDecodeAlpha3BitLinear_45_47_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_48;
reg [31:0] DDSDecodeAlpha3BitLinear_45_48_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_45_49;
reg [15:0] DDSDecodeAlpha3BitLinear_45_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_50_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_51;
reg [31:0] DDSDecodeAlpha3BitLinear_45_51_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_52;
reg [31:0] DDSDecodeAlpha3BitLinear_45_52_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_53;
reg [31:0] DDSDecodeAlpha3BitLinear_45_53_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_54;
reg [31:0] DDSDecodeAlpha3BitLinear_45_54_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_45_55;
reg [15:0] DDSDecodeAlpha3BitLinear_45_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_56_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_57;
reg [31:0] DDSDecodeAlpha3BitLinear_45_57_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_58;
reg [31:0] DDSDecodeAlpha3BitLinear_45_58_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_59;
reg [31:0] DDSDecodeAlpha3BitLinear_45_59_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_60;
reg [31:0] DDSDecodeAlpha3BitLinear_45_60_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_45_61;
reg [15:0] DDSDecodeAlpha3BitLinear_45_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_62_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_63;
reg [31:0] DDSDecodeAlpha3BitLinear_45_63_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_64;
reg [31:0] DDSDecodeAlpha3BitLinear_45_64_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_45_65;
reg [31:0] DDSDecodeAlpha3BitLinear_45_65_reg;
reg [15:0] DDSDecodeAlpha3BitLinear_45_66;
reg [15:0] DDSDecodeAlpha3BitLinear_45_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_45_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_72_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_73;
reg [31:0] DDSDecodeAlpha3BitLinear_70_73_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_74;
reg [7:0] DDSDecodeAlpha3BitLinear_70_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_75_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_76;
reg [31:0] DDSDecodeAlpha3BitLinear_70_76_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr1;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr1_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_77;
reg [7:0] DDSDecodeAlpha3BitLinear_70_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_78_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_79;
reg [31:0] DDSDecodeAlpha3BitLinear_70_79_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr2;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr2_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_80;
reg [7:0] DDSDecodeAlpha3BitLinear_70_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_81_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_82;
reg [31:0] DDSDecodeAlpha3BitLinear_70_82_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr3;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr3_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_83;
reg [7:0] DDSDecodeAlpha3BitLinear_70_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_84_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_85;
reg [31:0] DDSDecodeAlpha3BitLinear_70_85_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr4;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr4_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_86;
reg [7:0] DDSDecodeAlpha3BitLinear_70_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_87_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_88;
reg [31:0] DDSDecodeAlpha3BitLinear_70_88_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr5;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr5_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_89;
reg [7:0] DDSDecodeAlpha3BitLinear_70_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_90_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_91;
reg [31:0] DDSDecodeAlpha3BitLinear_70_91_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr6;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr6_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_92;
reg [7:0] DDSDecodeAlpha3BitLinear_70_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_93_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_94;
reg [31:0] DDSDecodeAlpha3BitLinear_70_94_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr7;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr7_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_95;
reg [7:0] DDSDecodeAlpha3BitLinear_70_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_97_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_98;
reg [31:0] DDSDecodeAlpha3BitLinear_70_98_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr8;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr8_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_99;
reg [7:0] DDSDecodeAlpha3BitLinear_70_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_100_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_101;
reg [31:0] DDSDecodeAlpha3BitLinear_70_101_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr9;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr9_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_102;
reg [7:0] DDSDecodeAlpha3BitLinear_70_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_103_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_104;
reg [31:0] DDSDecodeAlpha3BitLinear_70_104_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr10;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr10_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_105;
reg [7:0] DDSDecodeAlpha3BitLinear_70_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_106_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_107;
reg [31:0] DDSDecodeAlpha3BitLinear_70_107_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr11;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr11_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_108;
reg [7:0] DDSDecodeAlpha3BitLinear_70_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_109_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_110;
reg [31:0] DDSDecodeAlpha3BitLinear_70_110_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr12;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr12_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_111;
reg [7:0] DDSDecodeAlpha3BitLinear_70_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_112_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_113;
reg [31:0] DDSDecodeAlpha3BitLinear_70_113_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr13;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr13_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_114;
reg [7:0] DDSDecodeAlpha3BitLinear_70_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_115_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_116;
reg [31:0] DDSDecodeAlpha3BitLinear_70_116_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr14;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr14_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_117;
reg [7:0] DDSDecodeAlpha3BitLinear_70_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_118_reg;
reg [31:0] DDSDecodeAlpha3BitLinear_70_119;
reg [31:0] DDSDecodeAlpha3BitLinear_70_119_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr15;
reg [7:0] DDSDecodeAlpha3BitLinear_70__tr15_reg;
reg [7:0] DDSDecodeAlpha3BitLinear_70_120;
reg [7:0] DDSDecodeAlpha3BitLinear_70_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_70_121_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_122;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_122_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_123;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_123_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_124;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_124_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_125;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_125_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_row_023;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_row_023_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_126;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_127_reg;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_128;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_128_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_129;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_129_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_130;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_131_reg;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_132;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_132_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_133;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_133_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_134;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_135_reg;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_136;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_136_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_137;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_137_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_138;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21_139_reg;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_140;
reg [15:0] DDSDecodeAlpha3BitLinear__preheader21_140_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_141;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21_141_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_142;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader21_142_reg;
reg  DDSDecodeAlpha3BitLinear__preheader21_exitcond50;
reg  DDSDecodeAlpha3BitLinear__preheader21_exitcond50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert_reg;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77;
reg [7:0] DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_row_119;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_row_119_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp36;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp38;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_3_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp40;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_2_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp42;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader__117_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_143;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_143_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_144;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_144_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_145;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_145_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_146;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_146_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_147;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_147_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_148;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_148_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_149;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_149_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_150;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_150_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_151;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_151_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_152;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_152_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_153;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_153_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_154;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_154_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_155;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_155_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_156;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_156_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_157;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_157_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_158;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_158_reg;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_159;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_159_reg;
reg  DDSDecodeAlpha3BitLinear__preheader_exitcond;
reg  DDSDecodeAlpha3BitLinear__preheader_exitcond_reg;
reg [3:0] DDSDecodeAlpha3BitLinear_0_bits_address_a;
reg  DDSDecodeAlpha3BitLinear_0_bits_write_enable_a;
reg [7:0] DDSDecodeAlpha3BitLinear_0_bits_in_a;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_out_a;
reg [3:0] DDSDecodeAlpha3BitLinear_0_bits_address_b;
reg  DDSDecodeAlpha3BitLinear_0_bits_write_enable_b;
reg [7:0] DDSDecodeAlpha3BitLinear_0_bits_in_b;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_out_b;
reg [2:0] DDSDecodeAlpha3BitLinear_0_alphas_address_a;
reg  DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a;
reg [15:0] DDSDecodeAlpha3BitLinear_0_alphas_in_a;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_out_a;
reg [2:0] DDSDecodeAlpha3BitLinear_0_alphas_address_b;
reg  DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b;
reg [15:0] DDSDecodeAlpha3BitLinear_0_alphas_in_b;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_out_b;
reg [4:0] DDSDecodeAlpha3BitLinear_0_aColors_address_a;
reg  DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a;
reg [63:0] DDSDecodeAlpha3BitLinear_0_aColors_in_a;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_out_a;
reg [4:0] DDSDecodeAlpha3BitLinear_0_aColors_address_b;
reg  DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b;
reg [63:0] DDSDecodeAlpha3BitLinear_0_aColors_in_b;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0;
reg [31:0] DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1;
wire [31:0] lpm_divide_DDSDecodeAlpha3BitLinear_10_13_temp_out;
wire [31:0] DDSDecodeAlpha3BitLinear_10_13_unused;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_13_en;
reg [31:0] lpm_divide_DDSDecodeAlpha3BitLinear_10_13_out;
reg [31:0] DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_11_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_11_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_16_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_16_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_23_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_23_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_28_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_28_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_35_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_35_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_10_40_en;
reg [31:0] DDSDecodeAlpha3BitLinear_10_40_stage0_reg;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_19_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_25_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_31_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_37_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_10_42_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_45_48_en;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_45_51_en;
reg [31:0] DDSDecodeAlpha3BitLinear_45_51_stage0_reg;
reg  lpm_mult_DDSDecodeAlpha3BitLinear_45_58_en;
reg [31:0] DDSDecodeAlpha3BitLinear_45_58_stage0_reg;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_45_54_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_45_60_en;
reg  lpm_divide_DDSDecodeAlpha3BitLinear_45_65_en;
reg  lpm_mult_DDSDecodeAlpha3BitLinear__preheader_tmp36_en;
reg [31:0] DDSDecodeAlpha3BitLinear__preheader_tmp36_stage0_reg;

/*   %13 = udiv i32 %12, 7*/
lpm_divide lpm_divide_DDSDecodeAlpha3BitLinear_10_13 (
	.quotient (lpm_divide_DDSDecodeAlpha3BitLinear_10_13_temp_out),
	.remain (DDSDecodeAlpha3BitLinear_10_13_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_DDSDecodeAlpha3BitLinear_10_13_en),
	.numer (DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0),
	.denom (DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1)
);

defparam
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_pipeline = 32,
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_widthn = 32,
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_widthd = 32,
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_drepresentation = "UNSIGNED",
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_DDSDecodeAlpha3BitLinear_10_13.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams

//   %bits = alloca [4 x [4 x i8]], align 1
ram_dual_port DDSDecodeAlpha3BitLinear_0_bits (
	.clk( clk ),
	.address_a( DDSDecodeAlpha3BitLinear_0_bits_address_a ),
	.address_b( DDSDecodeAlpha3BitLinear_0_bits_address_b ),
	.wren_a( DDSDecodeAlpha3BitLinear_0_bits_write_enable_a ),
	.wren_b( DDSDecodeAlpha3BitLinear_0_bits_write_enable_b ),
	.data_a( DDSDecodeAlpha3BitLinear_0_bits_in_a ),
	.data_b( DDSDecodeAlpha3BitLinear_0_bits_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( DDSDecodeAlpha3BitLinear_0_bits_out_a ),
	.q_b( DDSDecodeAlpha3BitLinear_0_bits_out_b)
);
defparam DDSDecodeAlpha3BitLinear_0_bits.width_a = 8;
defparam DDSDecodeAlpha3BitLinear_0_bits.width_b = 8;
defparam DDSDecodeAlpha3BitLinear_0_bits.widthad_a = 4;
defparam DDSDecodeAlpha3BitLinear_0_bits.widthad_b = 4;
defparam DDSDecodeAlpha3BitLinear_0_bits.width_be_a = 1;
defparam DDSDecodeAlpha3BitLinear_0_bits.width_be_b = 1;
defparam DDSDecodeAlpha3BitLinear_0_bits.numwords_a = 16;
defparam DDSDecodeAlpha3BitLinear_0_bits.numwords_b = 16;
defparam DDSDecodeAlpha3BitLinear_0_bits.latency = 1;

//   %alphas = alloca [8 x i16], align 2
ram_dual_port DDSDecodeAlpha3BitLinear_0_alphas (
	.clk( clk ),
	.address_a( DDSDecodeAlpha3BitLinear_0_alphas_address_a ),
	.address_b( DDSDecodeAlpha3BitLinear_0_alphas_address_b ),
	.wren_a( DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a ),
	.wren_b( DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b ),
	.data_a( DDSDecodeAlpha3BitLinear_0_alphas_in_a ),
	.data_b( DDSDecodeAlpha3BitLinear_0_alphas_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( DDSDecodeAlpha3BitLinear_0_alphas_out_a ),
	.q_b( DDSDecodeAlpha3BitLinear_0_alphas_out_b)
);
defparam DDSDecodeAlpha3BitLinear_0_alphas.width_a = 16;
defparam DDSDecodeAlpha3BitLinear_0_alphas.width_b = 16;
defparam DDSDecodeAlpha3BitLinear_0_alphas.widthad_a = 3;
defparam DDSDecodeAlpha3BitLinear_0_alphas.widthad_b = 3;
defparam DDSDecodeAlpha3BitLinear_0_alphas.width_be_a = 1;
defparam DDSDecodeAlpha3BitLinear_0_alphas.width_be_b = 1;
defparam DDSDecodeAlpha3BitLinear_0_alphas.numwords_a = 8;
defparam DDSDecodeAlpha3BitLinear_0_alphas.numwords_b = 8;
defparam DDSDecodeAlpha3BitLinear_0_alphas.latency = 1;

//   %aColors = alloca [4 x [4 x %struct.TYPE_4__]], align 4
ram_dual_port DDSDecodeAlpha3BitLinear_0_aColors (
	.clk( clk ),
	.address_a( DDSDecodeAlpha3BitLinear_0_aColors_address_a ),
	.address_b( DDSDecodeAlpha3BitLinear_0_aColors_address_b ),
	.wren_a( DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a ),
	.wren_b( DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b ),
	.data_a( DDSDecodeAlpha3BitLinear_0_aColors_in_a ),
	.data_b( DDSDecodeAlpha3BitLinear_0_aColors_in_b ),
	.byteena_a( DDSDecodeAlpha3BitLinear_0_aColors_byteena_a ),
	.byteena_b( DDSDecodeAlpha3BitLinear_0_aColors_byteena_b ),
	.q_a( DDSDecodeAlpha3BitLinear_0_aColors_out_a ),
	.q_b( DDSDecodeAlpha3BitLinear_0_aColors_out_b)
);
defparam DDSDecodeAlpha3BitLinear_0_aColors.width_a = 64;
defparam DDSDecodeAlpha3BitLinear_0_aColors.width_b = 64;
defparam DDSDecodeAlpha3BitLinear_0_aColors.widthad_a = 5;
defparam DDSDecodeAlpha3BitLinear_0_aColors.widthad_b = 5;
defparam DDSDecodeAlpha3BitLinear_0_aColors.width_be_a = 8;
defparam DDSDecodeAlpha3BitLinear_0_aColors.width_be_b = 8;
defparam DDSDecodeAlpha3BitLinear_0_aColors.numwords_a = 32;
defparam DDSDecodeAlpha3BitLinear_0_aColors.numwords_b = 32;
defparam DDSDecodeAlpha3BitLinear_0_aColors.latency = 1;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear_0_9_reg == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear_0_9_reg == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader21_exitcond50_reg == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_104) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader21_exitcond50_reg == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116;
if (reset == 1'b0 && ^(LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 0*/
begin
DDSDecodeAlpha3BitLinear_0_1 = arg_alphaBlock;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_0_1_reg <= DDSDecodeAlpha3BitLinear_0_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear_0_2 = memory_controller_out_a[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_2_reg <= DDSDecodeAlpha3BitLinear_0_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %3 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 0*/
if (reset) begin DDSDecodeAlpha3BitLinear_0_3 = 0; end
begin
DDSDecodeAlpha3BitLinear_0_3 = 1'd0;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %3 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_0_3_reg <= DDSDecodeAlpha3BitLinear_0_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 1*/
begin
DDSDecodeAlpha3BitLinear_0_4 = (arg_alphaBlock + 2);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_0_4_reg <= DDSDecodeAlpha3BitLinear_0_4;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_4_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear_0_5 = memory_controller_out_b[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_5_reg <= DDSDecodeAlpha3BitLinear_0_5;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_5_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %6 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 1*/
if (reset) begin DDSDecodeAlpha3BitLinear_0_6 = 0; end
begin
DDSDecodeAlpha3BitLinear_0_6 = (1'd0 + (2 * 32'd1));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %6 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_0_6_reg <= DDSDecodeAlpha3BitLinear_0_6;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_6_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %7 = zext i16 %2 to i32*/
begin
DDSDecodeAlpha3BitLinear_0_7 = DDSDecodeAlpha3BitLinear_0_2;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %7 = zext i16 %2 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_7_reg <= DDSDecodeAlpha3BitLinear_0_7;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_7_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %8 = zext i16 %5 to i32*/
begin
DDSDecodeAlpha3BitLinear_0_8 = DDSDecodeAlpha3BitLinear_0_5;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %8 = zext i16 %5 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_8_reg <= DDSDecodeAlpha3BitLinear_0_8;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_8_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %9 = icmp ugt i16 %2, %5*/
begin
DDSDecodeAlpha3BitLinear_0_9 = (DDSDecodeAlpha3BitLinear_0_2 > DDSDecodeAlpha3BitLinear_0_5);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %9 = icmp ugt i16 %2, %5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_9_reg <= DDSDecodeAlpha3BitLinear_0_9;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_0_9_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_11 = DDSDecodeAlpha3BitLinear_10_11_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %11 = mul nsw i32 %7, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_11_reg <= DDSDecodeAlpha3BitLinear_10_11;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_11_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %11 = mul nsw i32 %7, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_11_reg <= DDSDecodeAlpha3BitLinear_10_11;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_11_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %12 = add nsw i32 %11, %8*/
begin
DDSDecodeAlpha3BitLinear_10_12 = (DDSDecodeAlpha3BitLinear_10_11 + DDSDecodeAlpha3BitLinear_0_8_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %12 = add nsw i32 %11, %8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_12_reg <= DDSDecodeAlpha3BitLinear_10_12;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_12_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_13 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %13 = udiv i32 %12, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_13;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %13 = udiv i32 %12, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_13;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %42 = udiv i32 %41, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_42;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %65 = udiv i32 %64, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_45_65;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %19 = udiv i32 %18, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_19;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %25 = udiv i32 %24, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_25;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %31 = udiv i32 %30, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_31;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %37 = udiv i32 %36, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_10_37;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %48 = udiv i32 %47, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_45_48;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %54 = udiv i32 %53, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_45_54;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %60 = udiv i32 %59, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79))
begin
DDSDecodeAlpha3BitLinear_10_13_reg <= DDSDecodeAlpha3BitLinear_45_60;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_13_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %14 = trunc i32 %13 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_14 = DDSDecodeAlpha3BitLinear_10_13[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %14 = trunc i32 %13 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_10_14_reg <= DDSDecodeAlpha3BitLinear_10_14;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_14_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %15 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_15 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_15 = (1'd0 + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %15 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_15_reg <= DDSDecodeAlpha3BitLinear_10_15;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_15_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_16 = DDSDecodeAlpha3BitLinear_10_16_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %16 = mul nsw i32 %7, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_16_reg <= DDSDecodeAlpha3BitLinear_10_16;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_16_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %16 = mul nsw i32 %7, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_16_reg <= DDSDecodeAlpha3BitLinear_10_16;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_16_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %17 = shl nuw nsw i32 %8, 1*/
begin
DDSDecodeAlpha3BitLinear_10_17 = (DDSDecodeAlpha3BitLinear_0_8_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %17 = shl nuw nsw i32 %8, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_17_reg <= DDSDecodeAlpha3BitLinear_10_17;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_17_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %18 = add nsw i32 %17, %16*/
begin
DDSDecodeAlpha3BitLinear_10_18 = (DDSDecodeAlpha3BitLinear_10_17_reg + DDSDecodeAlpha3BitLinear_10_16);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %18 = add nsw i32 %17, %16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_18_reg <= DDSDecodeAlpha3BitLinear_10_18;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_18_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_19 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %19 = udiv i32 %18, 7*/
DDSDecodeAlpha3BitLinear_10_19_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %20 = trunc i32 %19 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_20 = DDSDecodeAlpha3BitLinear_10_19[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %20 = trunc i32 %19 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39))
begin
DDSDecodeAlpha3BitLinear_10_20_reg <= DDSDecodeAlpha3BitLinear_10_20;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_20_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %21 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_21 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_21 = (1'd0 + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %21 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_21_reg <= DDSDecodeAlpha3BitLinear_10_21;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_21_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %22 = shl nuw nsw i32 %7, 2*/
begin
DDSDecodeAlpha3BitLinear_10_22 = (DDSDecodeAlpha3BitLinear_0_7_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %22 = shl nuw nsw i32 %7, 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_22_reg <= DDSDecodeAlpha3BitLinear_10_22;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_22_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_23 = DDSDecodeAlpha3BitLinear_10_23_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %23 = mul nsw i32 %8, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_23_reg <= DDSDecodeAlpha3BitLinear_10_23;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_23_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %23 = mul nsw i32 %8, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_23_reg <= DDSDecodeAlpha3BitLinear_10_23;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_23_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %24 = add nsw i32 %23, %22*/
begin
DDSDecodeAlpha3BitLinear_10_24 = (DDSDecodeAlpha3BitLinear_10_23 + DDSDecodeAlpha3BitLinear_10_22_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %24 = add nsw i32 %23, %22*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_24_reg <= DDSDecodeAlpha3BitLinear_10_24;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_24_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_25 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %25 = udiv i32 %24, 7*/
DDSDecodeAlpha3BitLinear_10_25_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %26 = trunc i32 %25 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_26 = DDSDecodeAlpha3BitLinear_10_25[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %26 = trunc i32 %25 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40))
begin
DDSDecodeAlpha3BitLinear_10_26_reg <= DDSDecodeAlpha3BitLinear_10_26;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_26_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %27 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 4*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_27 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_27 = (1'd0 + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %27 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_27_reg <= DDSDecodeAlpha3BitLinear_10_27;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_27_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_28 = DDSDecodeAlpha3BitLinear_10_28_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %28 = mul nsw i32 %7, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_28_reg <= DDSDecodeAlpha3BitLinear_10_28;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_28_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %28 = mul nsw i32 %7, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_28_reg <= DDSDecodeAlpha3BitLinear_10_28;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_28_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %29 = shl nuw nsw i32 %8, 2*/
begin
DDSDecodeAlpha3BitLinear_10_29 = (DDSDecodeAlpha3BitLinear_0_8_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %29 = shl nuw nsw i32 %8, 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_29_reg <= DDSDecodeAlpha3BitLinear_10_29;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_29_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %30 = add nsw i32 %29, %28*/
begin
DDSDecodeAlpha3BitLinear_10_30 = (DDSDecodeAlpha3BitLinear_10_29_reg + DDSDecodeAlpha3BitLinear_10_28);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %30 = add nsw i32 %29, %28*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_30_reg <= DDSDecodeAlpha3BitLinear_10_30;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_30_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_31 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %31 = udiv i32 %30, 7*/
DDSDecodeAlpha3BitLinear_10_31_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %32 = trunc i32 %31 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_32 = DDSDecodeAlpha3BitLinear_10_31[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %32 = trunc i32 %31 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41))
begin
DDSDecodeAlpha3BitLinear_10_32_reg <= DDSDecodeAlpha3BitLinear_10_32;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_32_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %33 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 5*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_33 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_33 = (1'd0 + (2 * 32'd5));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %33 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_33_reg <= DDSDecodeAlpha3BitLinear_10_33;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_33_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %34 = shl nuw nsw i32 %7, 1*/
begin
DDSDecodeAlpha3BitLinear_10_34 = (DDSDecodeAlpha3BitLinear_0_7_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %34 = shl nuw nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_34_reg <= DDSDecodeAlpha3BitLinear_10_34;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_34_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_35 = DDSDecodeAlpha3BitLinear_10_35_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %35 = mul nsw i32 %8, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_35_reg <= DDSDecodeAlpha3BitLinear_10_35;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_35_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %35 = mul nsw i32 %8, 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_35_reg <= DDSDecodeAlpha3BitLinear_10_35;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_35_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %36 = add nsw i32 %35, %34*/
begin
DDSDecodeAlpha3BitLinear_10_36 = (DDSDecodeAlpha3BitLinear_10_35 + DDSDecodeAlpha3BitLinear_10_34_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %36 = add nsw i32 %35, %34*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_36_reg <= DDSDecodeAlpha3BitLinear_10_36;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_36_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_37 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %37 = udiv i32 %36, 7*/
DDSDecodeAlpha3BitLinear_10_37_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %38 = trunc i32 %37 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_38 = DDSDecodeAlpha3BitLinear_10_37[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %38 = trunc i32 %37 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42))
begin
DDSDecodeAlpha3BitLinear_10_38_reg <= DDSDecodeAlpha3BitLinear_10_38;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_38_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %39 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 6*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_39 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_39 = (1'd0 + (2 * 32'd6));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %39 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_39_reg <= DDSDecodeAlpha3BitLinear_10_39;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_39_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_40 = DDSDecodeAlpha3BitLinear_10_40_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %40 = mul nsw i32 %8, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_40_reg <= DDSDecodeAlpha3BitLinear_10_40;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_40_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %40 = mul nsw i32 %8, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_40_reg <= DDSDecodeAlpha3BitLinear_10_40;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_40_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %41 = add nsw i32 %40, %7*/
begin
DDSDecodeAlpha3BitLinear_10_41 = (DDSDecodeAlpha3BitLinear_10_40 + DDSDecodeAlpha3BitLinear_0_7_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %41 = add nsw i32 %40, %7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_10_41_reg <= DDSDecodeAlpha3BitLinear_10_41;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_41_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_10_42 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %42 = udiv i32 %41, 7*/
DDSDecodeAlpha3BitLinear_10_42_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %43 = trunc i32 %42 to i16*/
begin
DDSDecodeAlpha3BitLinear_10_43 = DDSDecodeAlpha3BitLinear_10_42[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %43 = trunc i32 %42 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43))
begin
DDSDecodeAlpha3BitLinear_10_43_reg <= DDSDecodeAlpha3BitLinear_10_43;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_43_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %44 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 7*/
if (reset) begin DDSDecodeAlpha3BitLinear_10_44 = 0; end
begin
DDSDecodeAlpha3BitLinear_10_44 = (1'd0 + (2 * 32'd7));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %44 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_5))
begin
DDSDecodeAlpha3BitLinear_10_44_reg <= DDSDecodeAlpha3BitLinear_10_44;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_10_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_10_44_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %46 = shl nuw nsw i32 %7, 2*/
begin
DDSDecodeAlpha3BitLinear_45_46 = (DDSDecodeAlpha3BitLinear_0_7_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %46 = shl nuw nsw i32 %7, 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_46_reg <= DDSDecodeAlpha3BitLinear_45_46;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_46_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %47 = add nsw i32 %46, %8*/
begin
DDSDecodeAlpha3BitLinear_45_47 = (DDSDecodeAlpha3BitLinear_45_46 + DDSDecodeAlpha3BitLinear_0_8_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %47 = add nsw i32 %46, %8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_47_reg <= DDSDecodeAlpha3BitLinear_45_47;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_47_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_48 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %48 = udiv i32 %47, 5*/
DDSDecodeAlpha3BitLinear_45_48_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %49 = trunc i32 %48 to i16*/
begin
DDSDecodeAlpha3BitLinear_45_49 = DDSDecodeAlpha3BitLinear_45_48[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %49 = trunc i32 %48 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77))
begin
DDSDecodeAlpha3BitLinear_45_49_reg <= DDSDecodeAlpha3BitLinear_45_49;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_49_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %50 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_50 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_50 = (1'd0 + (2 * 32'd2));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %50 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_50_reg <= DDSDecodeAlpha3BitLinear_45_50;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_50_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_51 = DDSDecodeAlpha3BitLinear_45_51_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %51 = mul nsw i32 %7, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_51_reg <= DDSDecodeAlpha3BitLinear_45_51;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_51_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %51 = mul nsw i32 %7, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_51_reg <= DDSDecodeAlpha3BitLinear_45_51;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_51_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %52 = shl nuw nsw i32 %8, 1*/
begin
DDSDecodeAlpha3BitLinear_45_52 = (DDSDecodeAlpha3BitLinear_0_8_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %52 = shl nuw nsw i32 %8, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_52_reg <= DDSDecodeAlpha3BitLinear_45_52;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_52_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %53 = add nsw i32 %52, %51*/
begin
DDSDecodeAlpha3BitLinear_45_53 = (DDSDecodeAlpha3BitLinear_45_52_reg + DDSDecodeAlpha3BitLinear_45_51);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %53 = add nsw i32 %52, %51*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_53_reg <= DDSDecodeAlpha3BitLinear_45_53;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_53_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_54 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %54 = udiv i32 %53, 5*/
DDSDecodeAlpha3BitLinear_45_54_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %55 = trunc i32 %54 to i16*/
begin
DDSDecodeAlpha3BitLinear_45_55 = DDSDecodeAlpha3BitLinear_45_54[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %55 = trunc i32 %54 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78))
begin
DDSDecodeAlpha3BitLinear_45_55_reg <= DDSDecodeAlpha3BitLinear_45_55;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_55_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %56 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_56 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_56 = (1'd0 + (2 * 32'd3));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %56 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_56_reg <= DDSDecodeAlpha3BitLinear_45_56;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_56_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %57 = shl nuw nsw i32 %7, 1*/
begin
DDSDecodeAlpha3BitLinear_45_57 = (DDSDecodeAlpha3BitLinear_0_7_reg <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %57 = shl nuw nsw i32 %7, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_57_reg <= DDSDecodeAlpha3BitLinear_45_57;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_57_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_58 = DDSDecodeAlpha3BitLinear_45_58_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %58 = mul nsw i32 %8, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_58_reg <= DDSDecodeAlpha3BitLinear_45_58;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_58_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %58 = mul nsw i32 %8, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_58_reg <= DDSDecodeAlpha3BitLinear_45_58;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_58_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %59 = add nsw i32 %58, %57*/
begin
DDSDecodeAlpha3BitLinear_45_59 = (DDSDecodeAlpha3BitLinear_45_58 + DDSDecodeAlpha3BitLinear_45_57_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %59 = add nsw i32 %58, %57*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_45_59_reg <= DDSDecodeAlpha3BitLinear_45_59;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_59_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_60 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %60 = udiv i32 %59, 5*/
DDSDecodeAlpha3BitLinear_45_60_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %61 = trunc i32 %60 to i16*/
begin
DDSDecodeAlpha3BitLinear_45_61 = DDSDecodeAlpha3BitLinear_45_60[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %61 = trunc i32 %60 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79))
begin
DDSDecodeAlpha3BitLinear_45_61_reg <= DDSDecodeAlpha3BitLinear_45_61;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_61_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %62 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 4*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_62 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_62 = (1'd0 + (2 * 32'd4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %62 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_62_reg <= DDSDecodeAlpha3BitLinear_45_62;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_62_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %63 = shl nuw nsw i32 %8, 2*/
begin
DDSDecodeAlpha3BitLinear_45_63 = (DDSDecodeAlpha3BitLinear_0_8_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %63 = shl nuw nsw i32 %8, 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_63_reg <= DDSDecodeAlpha3BitLinear_45_63;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_63_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %64 = add nsw i32 %63, %7*/
begin
DDSDecodeAlpha3BitLinear_45_64 = (DDSDecodeAlpha3BitLinear_45_63 + DDSDecodeAlpha3BitLinear_0_7_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %64 = add nsw i32 %63, %7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_64_reg <= DDSDecodeAlpha3BitLinear_45_64;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_64_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_45_65 = DDSDecodeAlpha3BitLinear_unsigned_divide_32_0;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %65 = udiv i32 %64, 5*/
DDSDecodeAlpha3BitLinear_45_65_reg = DDSDecodeAlpha3BitLinear_10_13_reg;
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %66 = trunc i32 %65 to i16*/
begin
DDSDecodeAlpha3BitLinear_45_66 = DDSDecodeAlpha3BitLinear_45_65[15:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %66 = trunc i32 %65 to i16*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_45_66_reg <= DDSDecodeAlpha3BitLinear_45_66;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_66_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %67 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 5*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_67 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_67 = (1'd0 + (2 * 32'd5));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %67 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 5*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_67_reg <= DDSDecodeAlpha3BitLinear_45_67;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_67_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %68 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 6*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_68 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_68 = (1'd0 + (2 * 32'd6));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %68 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_68_reg <= DDSDecodeAlpha3BitLinear_45_68;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_68_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %69 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 7*/
if (reset) begin DDSDecodeAlpha3BitLinear_45_69 = 0; end
begin
DDSDecodeAlpha3BitLinear_45_69 = (1'd0 + (2 * 32'd7));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %69 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_45_69_reg <= DDSDecodeAlpha3BitLinear_45_69;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_45_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_45_69_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %71 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 2*/
begin
DDSDecodeAlpha3BitLinear_70_71 = (arg_alphaBlock + 4);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %71 = getelementptr inbounds %struct.TYPE_5__* %alphaBlock, i32 0, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_71_reg <= DDSDecodeAlpha3BitLinear_70_71;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_71_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
begin
DDSDecodeAlpha3BitLinear_70_72 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
DDSDecodeAlpha3BitLinear_70_72_reg <= DDSDecodeAlpha3BitLinear_70_72;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_72_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear_70_73 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_73_reg <= DDSDecodeAlpha3BitLinear_70_73;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_73_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr = trunc i32 %73 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr = DDSDecodeAlpha3BitLinear_70_73[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr = trunc i32 %73 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr_reg <= DDSDecodeAlpha3BitLinear_70__tr;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %74 = and i8 %.tr, 7*/
begin
DDSDecodeAlpha3BitLinear_70_74 = (DDSDecodeAlpha3BitLinear_70__tr & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %74 = and i8 %.tr, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_74_reg <= DDSDecodeAlpha3BitLinear_70_74;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_74_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %75 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 0*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_75 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_75 = 1'd0;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %75 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_75_reg <= DDSDecodeAlpha3BitLinear_70_75;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_75_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %76 = lshr i32 %73, 3*/
begin
DDSDecodeAlpha3BitLinear_70_76 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %76 = lshr i32 %73, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_76_reg <= DDSDecodeAlpha3BitLinear_70_76;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_76_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr1 = trunc i32 %76 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr1 = DDSDecodeAlpha3BitLinear_70_76[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr1 = trunc i32 %76 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr1_reg <= DDSDecodeAlpha3BitLinear_70__tr1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %77 = and i8 %.tr1, 7*/
begin
DDSDecodeAlpha3BitLinear_70_77 = (DDSDecodeAlpha3BitLinear_70__tr1 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %77 = and i8 %.tr1, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_77_reg <= DDSDecodeAlpha3BitLinear_70_77;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_77_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %78 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 1*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_78 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_78 = (1'd0 + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %78 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_78_reg <= DDSDecodeAlpha3BitLinear_70_78;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_78_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %79 = lshr i32 %73, 6*/
begin
DDSDecodeAlpha3BitLinear_70_79 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %79 = lshr i32 %73, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_79_reg <= DDSDecodeAlpha3BitLinear_70_79;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_79_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr2 = trunc i32 %79 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr2 = DDSDecodeAlpha3BitLinear_70_79[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr2 = trunc i32 %79 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr2_reg <= DDSDecodeAlpha3BitLinear_70__tr2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %80 = and i8 %.tr2, 7*/
begin
DDSDecodeAlpha3BitLinear_70_80 = (DDSDecodeAlpha3BitLinear_70__tr2 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %80 = and i8 %.tr2, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_80_reg <= DDSDecodeAlpha3BitLinear_70_80;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_80_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %81 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_81 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_81 = (1'd0 + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %81 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_81_reg <= DDSDecodeAlpha3BitLinear_70_81;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_81_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %82 = lshr i32 %73, 9*/
begin
DDSDecodeAlpha3BitLinear_70_82 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd9 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %82 = lshr i32 %73, 9*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_82_reg <= DDSDecodeAlpha3BitLinear_70_82;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_82_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr3 = trunc i32 %82 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr3 = DDSDecodeAlpha3BitLinear_70_82[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr3 = trunc i32 %82 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr3_reg <= DDSDecodeAlpha3BitLinear_70__tr3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %83 = and i8 %.tr3, 7*/
begin
DDSDecodeAlpha3BitLinear_70_83 = (DDSDecodeAlpha3BitLinear_70__tr3 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %83 = and i8 %.tr3, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_83_reg <= DDSDecodeAlpha3BitLinear_70_83;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_83_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %84 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_84 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_84 = (1'd0 + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %84 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 0, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_84_reg <= DDSDecodeAlpha3BitLinear_70_84;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_84_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %85 = lshr i32 %73, 12*/
begin
DDSDecodeAlpha3BitLinear_70_85 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %85 = lshr i32 %73, 12*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_85_reg <= DDSDecodeAlpha3BitLinear_70_85;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_85_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr4 = trunc i32 %85 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr4 = DDSDecodeAlpha3BitLinear_70_85[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr4 = trunc i32 %85 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr4_reg <= DDSDecodeAlpha3BitLinear_70__tr4;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr4_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %86 = and i8 %.tr4, 7*/
begin
DDSDecodeAlpha3BitLinear_70_86 = (DDSDecodeAlpha3BitLinear_70__tr4 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %86 = and i8 %.tr4, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_86_reg <= DDSDecodeAlpha3BitLinear_70_86;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_86_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %87 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 0*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_87 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_87 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %87 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_87_reg <= DDSDecodeAlpha3BitLinear_70_87;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_87_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %88 = lshr i32 %73, 15*/
begin
DDSDecodeAlpha3BitLinear_70_88 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd15 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %88 = lshr i32 %73, 15*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_88_reg <= DDSDecodeAlpha3BitLinear_70_88;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_88_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr5 = trunc i32 %88 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr5 = DDSDecodeAlpha3BitLinear_70_88[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr5 = trunc i32 %88 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr5_reg <= DDSDecodeAlpha3BitLinear_70__tr5;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr5_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %89 = and i8 %.tr5, 7*/
begin
DDSDecodeAlpha3BitLinear_70_89 = (DDSDecodeAlpha3BitLinear_70__tr5 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %89 = and i8 %.tr5, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_89_reg <= DDSDecodeAlpha3BitLinear_70_89;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_89_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %90 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 1*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_90 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_90 = (1'd0 + ((4 * 32'd1) + (1 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %90 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_90_reg <= DDSDecodeAlpha3BitLinear_70_90;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_90_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %91 = lshr i32 %73, 18*/
begin
DDSDecodeAlpha3BitLinear_70_91 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd18 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %91 = lshr i32 %73, 18*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_91_reg <= DDSDecodeAlpha3BitLinear_70_91;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_91_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr6 = trunc i32 %91 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr6 = DDSDecodeAlpha3BitLinear_70_91[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr6 = trunc i32 %91 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr6_reg <= DDSDecodeAlpha3BitLinear_70__tr6;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr6_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %92 = and i8 %.tr6, 7*/
begin
DDSDecodeAlpha3BitLinear_70_92 = (DDSDecodeAlpha3BitLinear_70__tr6 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %92 = and i8 %.tr6, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_92_reg <= DDSDecodeAlpha3BitLinear_70_92;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_92_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %93 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_93 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_93 = (1'd0 + ((4 * 32'd1) + (1 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %93 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_93_reg <= DDSDecodeAlpha3BitLinear_70_93;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_93_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %94 = lshr i32 %73, 21*/
begin
DDSDecodeAlpha3BitLinear_70_94 = (DDSDecodeAlpha3BitLinear_70_73 >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %94 = lshr i32 %73, 21*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_94_reg <= DDSDecodeAlpha3BitLinear_70_94;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_94_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr7 = trunc i32 %94 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr7 = DDSDecodeAlpha3BitLinear_70_94[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr7 = trunc i32 %94 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr7_reg <= DDSDecodeAlpha3BitLinear_70__tr7;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr7_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %95 = and i8 %.tr7, 7*/
begin
DDSDecodeAlpha3BitLinear_70_95 = (DDSDecodeAlpha3BitLinear_70__tr7 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %95 = and i8 %.tr7, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_95_reg <= DDSDecodeAlpha3BitLinear_70_95;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_95_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %96 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_96 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_96 = (1'd0 + ((4 * 32'd1) + (1 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %96 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 1, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_96_reg <= DDSDecodeAlpha3BitLinear_70_96;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_96_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %97 = getelementptr inbounds i32* %72, i32 3*/
begin
DDSDecodeAlpha3BitLinear_70_97 = (DDSDecodeAlpha3BitLinear_70_72 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %97 = getelementptr inbounds i32* %72, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
DDSDecodeAlpha3BitLinear_70_97_reg <= DDSDecodeAlpha3BitLinear_70_97;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_97_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear_70_98 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_98_reg <= DDSDecodeAlpha3BitLinear_70_98;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_98_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr8 = trunc i32 %98 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr8 = DDSDecodeAlpha3BitLinear_70_98[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr8 = trunc i32 %98 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr8_reg <= DDSDecodeAlpha3BitLinear_70__tr8;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr8_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %99 = and i8 %.tr8, 7*/
begin
DDSDecodeAlpha3BitLinear_70_99 = (DDSDecodeAlpha3BitLinear_70__tr8 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %99 = and i8 %.tr8, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_99_reg <= DDSDecodeAlpha3BitLinear_70_99;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_99_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %100 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 0*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_100 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_100 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %100 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_100_reg <= DDSDecodeAlpha3BitLinear_70_100;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_100_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %101 = lshr i32 %98, 3*/
begin
DDSDecodeAlpha3BitLinear_70_101 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %101 = lshr i32 %98, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_101_reg <= DDSDecodeAlpha3BitLinear_70_101;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_101_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr9 = trunc i32 %101 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr9 = DDSDecodeAlpha3BitLinear_70_101[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr9 = trunc i32 %101 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr9_reg <= DDSDecodeAlpha3BitLinear_70__tr9;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr9_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %102 = and i8 %.tr9, 7*/
begin
DDSDecodeAlpha3BitLinear_70_102 = (DDSDecodeAlpha3BitLinear_70__tr9 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %102 = and i8 %.tr9, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_102_reg <= DDSDecodeAlpha3BitLinear_70_102;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_102_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %103 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 1*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_103 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_103 = (1'd0 + ((4 * 32'd2) + (1 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %103 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_103_reg <= DDSDecodeAlpha3BitLinear_70_103;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_103_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %104 = lshr i32 %98, 6*/
begin
DDSDecodeAlpha3BitLinear_70_104 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %104 = lshr i32 %98, 6*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_104_reg <= DDSDecodeAlpha3BitLinear_70_104;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_104_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr10 = trunc i32 %104 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr10 = DDSDecodeAlpha3BitLinear_70_104[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr10 = trunc i32 %104 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr10_reg <= DDSDecodeAlpha3BitLinear_70__tr10;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr10_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %105 = and i8 %.tr10, 7*/
begin
DDSDecodeAlpha3BitLinear_70_105 = (DDSDecodeAlpha3BitLinear_70__tr10 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %105 = and i8 %.tr10, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_105_reg <= DDSDecodeAlpha3BitLinear_70_105;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_105_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %106 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_106 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_106 = (1'd0 + ((4 * 32'd2) + (1 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %106 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_106_reg <= DDSDecodeAlpha3BitLinear_70_106;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_106_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %107 = lshr i32 %98, 9*/
begin
DDSDecodeAlpha3BitLinear_70_107 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd9 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %107 = lshr i32 %98, 9*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_107_reg <= DDSDecodeAlpha3BitLinear_70_107;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_107_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr11 = trunc i32 %107 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr11 = DDSDecodeAlpha3BitLinear_70_107[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr11 = trunc i32 %107 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr11_reg <= DDSDecodeAlpha3BitLinear_70__tr11;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr11_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %108 = and i8 %.tr11, 7*/
begin
DDSDecodeAlpha3BitLinear_70_108 = (DDSDecodeAlpha3BitLinear_70__tr11 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %108 = and i8 %.tr11, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_108_reg <= DDSDecodeAlpha3BitLinear_70_108;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_108_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %109 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_109 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_109 = (1'd0 + ((4 * 32'd2) + (1 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %109 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 2, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_109_reg <= DDSDecodeAlpha3BitLinear_70_109;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_109_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %110 = lshr i32 %98, 12*/
begin
DDSDecodeAlpha3BitLinear_70_110 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd12 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %110 = lshr i32 %98, 12*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_110_reg <= DDSDecodeAlpha3BitLinear_70_110;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_110_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr12 = trunc i32 %110 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr12 = DDSDecodeAlpha3BitLinear_70_110[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr12 = trunc i32 %110 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr12_reg <= DDSDecodeAlpha3BitLinear_70__tr12;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr12_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %111 = and i8 %.tr12, 7*/
begin
DDSDecodeAlpha3BitLinear_70_111 = (DDSDecodeAlpha3BitLinear_70__tr12 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %111 = and i8 %.tr12, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_111_reg <= DDSDecodeAlpha3BitLinear_70_111;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_111_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %112 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 0*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_112 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_112 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %112 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_112_reg <= DDSDecodeAlpha3BitLinear_70_112;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_112_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %113 = lshr i32 %98, 15*/
begin
DDSDecodeAlpha3BitLinear_70_113 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd15 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %113 = lshr i32 %98, 15*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_113_reg <= DDSDecodeAlpha3BitLinear_70_113;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_113_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr13 = trunc i32 %113 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr13 = DDSDecodeAlpha3BitLinear_70_113[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr13 = trunc i32 %113 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr13_reg <= DDSDecodeAlpha3BitLinear_70__tr13;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr13_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %114 = and i8 %.tr13, 7*/
begin
DDSDecodeAlpha3BitLinear_70_114 = (DDSDecodeAlpha3BitLinear_70__tr13 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %114 = and i8 %.tr13, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_114_reg <= DDSDecodeAlpha3BitLinear_70_114;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_114_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %115 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 1*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_115 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_115 = (1'd0 + ((4 * 32'd3) + (1 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %115 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_115_reg <= DDSDecodeAlpha3BitLinear_70_115;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_115_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %116 = lshr i32 %98, 18*/
begin
DDSDecodeAlpha3BitLinear_70_116 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd18 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %116 = lshr i32 %98, 18*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_116_reg <= DDSDecodeAlpha3BitLinear_70_116;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_116_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr14 = trunc i32 %116 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr14 = DDSDecodeAlpha3BitLinear_70_116[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr14 = trunc i32 %116 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr14_reg <= DDSDecodeAlpha3BitLinear_70__tr14;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr14_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %117 = and i8 %.tr14, 7*/
begin
DDSDecodeAlpha3BitLinear_70_117 = (DDSDecodeAlpha3BitLinear_70__tr14 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %117 = and i8 %.tr14, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_117_reg <= DDSDecodeAlpha3BitLinear_70_117;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_117_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %118 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 2*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_118 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_118 = (1'd0 + ((4 * 32'd3) + (1 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %118 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_118_reg <= DDSDecodeAlpha3BitLinear_70_118;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_118_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %119 = lshr i32 %98, 21*/
begin
DDSDecodeAlpha3BitLinear_70_119 = (DDSDecodeAlpha3BitLinear_70_98 >>> (32'd21 % 32));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %119 = lshr i32 %98, 21*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_119_reg <= DDSDecodeAlpha3BitLinear_70_119;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_119_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr15 = trunc i32 %119 to i8*/
begin
DDSDecodeAlpha3BitLinear_70__tr15 = DDSDecodeAlpha3BitLinear_70_119[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %.tr15 = trunc i32 %119 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70__tr15_reg <= DDSDecodeAlpha3BitLinear_70__tr15;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70__tr15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70__tr15_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %120 = and i8 %.tr15, 7*/
begin
DDSDecodeAlpha3BitLinear_70_120 = (DDSDecodeAlpha3BitLinear_70__tr15 & 8'd7);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %120 = and i8 %.tr15, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_70_120_reg <= DDSDecodeAlpha3BitLinear_70_120;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_120_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %121 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 3*/
if (reset) begin DDSDecodeAlpha3BitLinear_70_121 = 0; end
begin
DDSDecodeAlpha3BitLinear_70_121 = (1'd0 + ((4 * 32'd3) + (1 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %121 = getelementptr inbounds [4 x [4 x i8]]* %bits, i32 0, i32 3, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
DDSDecodeAlpha3BitLinear_70_121_reg <= DDSDecodeAlpha3BitLinear_70_121;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear_70_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_70_121_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %122 = phi i8 [ %83, %70 ], [ %.pre77, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_122 = DDSDecodeAlpha3BitLinear_70_83_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %122 = phi i8 [ %83, %70 ], [ %.pre77, %.preheader21..preheader21_crit_edge ]*/
else /* if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader21_122 = DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %122 = phi i8 [ %83, %70 ], [ %.pre77, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_122_reg <= DDSDecodeAlpha3BitLinear__preheader21_122;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_122_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %122 = phi i8 [ %83, %70 ], [ %.pre77, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_122_reg <= DDSDecodeAlpha3BitLinear__preheader21_122;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_122_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %123 = phi i8 [ %80, %70 ], [ %.pre76, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_123 = DDSDecodeAlpha3BitLinear_70_80_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %123 = phi i8 [ %80, %70 ], [ %.pre76, %.preheader21..preheader21_crit_edge ]*/
else /* if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader21_123 = DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %123 = phi i8 [ %80, %70 ], [ %.pre76, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_123_reg <= DDSDecodeAlpha3BitLinear__preheader21_123;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_123_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %123 = phi i8 [ %80, %70 ], [ %.pre76, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_123_reg <= DDSDecodeAlpha3BitLinear__preheader21_123;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_123_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %124 = phi i8 [ %77, %70 ], [ %.pre75, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_124 = DDSDecodeAlpha3BitLinear_70_77_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %124 = phi i8 [ %77, %70 ], [ %.pre75, %.preheader21..preheader21_crit_edge ]*/
else /* if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader21_124 = DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %124 = phi i8 [ %77, %70 ], [ %.pre75, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_124_reg <= DDSDecodeAlpha3BitLinear__preheader21_124;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_124_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %124 = phi i8 [ %77, %70 ], [ %.pre75, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_124_reg <= DDSDecodeAlpha3BitLinear__preheader21_124;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_124_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %125 = phi i8 [ %74, %70 ], [ %.pre, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_125 = DDSDecodeAlpha3BitLinear_70_74_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %125 = phi i8 [ %74, %70 ], [ %.pre, %.preheader21..preheader21_crit_edge ]*/
else /* if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader21_125 = DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %125 = phi i8 [ %74, %70 ], [ %.pre, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_125_reg <= DDSDecodeAlpha3BitLinear__preheader21_125;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_125_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %125 = phi i8 [ %74, %70 ], [ %.pre, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_125_reg <= DDSDecodeAlpha3BitLinear__preheader21_125;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_125_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %row.023 = phi i32 [ 0, %70 ], [ %142, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_row_023 = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %row.023 = phi i32 [ 0, %70 ], [ %142, %.preheader21..preheader21_crit_edge ]*/
else /* if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader21_row_023 = DDSDecodeAlpha3BitLinear__preheader21_142_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %row.023 = phi i32 [ 0, %70 ], [ %142, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_95) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_row_023_reg <= DDSDecodeAlpha3BitLinear__preheader21_row_023;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_row_023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_row_023_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %row.023 = phi i32 [ 0, %70 ], [ %142, %.preheader21..preheader21_crit_edge ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader21_row_023_reg <= DDSDecodeAlpha3BitLinear__preheader21_row_023;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_row_023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_row_023_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + 12));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + 8));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep45;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep45_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + 4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep46;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849 = (1'd0 + (64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 0, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep4849;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep4849) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_1 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd1)) + 12));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_1_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd1)) + 8));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd1)) + 4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.1 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 1, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_2 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd2)) + 12));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_2_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd2)) + 8));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd2)) + 4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.2 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 2, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_3 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd3)) + 12));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep_3_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd3)) + 8));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep45.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3 = (1'd0 + (((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd3)) + 4));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep46.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader21_row_023_reg) + (16 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %scevgep4849.3 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.023, i32 3, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3_reg <= DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %126 = zext i8 %125 to i32*/
begin
DDSDecodeAlpha3BitLinear__preheader21_126 = DDSDecodeAlpha3BitLinear__preheader21_125_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %126 = zext i8 %125 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_126_reg <= DDSDecodeAlpha3BitLinear__preheader21_126;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_126_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %127 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %126*/
begin
DDSDecodeAlpha3BitLinear__preheader21_127 = (1'd0 + (2 * DDSDecodeAlpha3BitLinear__preheader21_126));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %127 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %126*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_127_reg <= DDSDecodeAlpha3BitLinear__preheader21_127;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_127_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %128 = load i16* %127, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_128 = DDSDecodeAlpha3BitLinear_0_alphas_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %128 = load i16* %127, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear__preheader21_128_reg <= DDSDecodeAlpha3BitLinear__preheader21_128;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_128_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %129 = trunc i16 %128 to i8*/
begin
DDSDecodeAlpha3BitLinear__preheader21_129 = DDSDecodeAlpha3BitLinear__preheader21_128[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %129 = trunc i16 %128 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear__preheader21_129_reg <= DDSDecodeAlpha3BitLinear__preheader21_129;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_129_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %130 = zext i8 %124 to i32*/
begin
DDSDecodeAlpha3BitLinear__preheader21_130 = DDSDecodeAlpha3BitLinear__preheader21_124_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %130 = zext i8 %124 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_130_reg <= DDSDecodeAlpha3BitLinear__preheader21_130;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_130_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %131 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %130*/
begin
DDSDecodeAlpha3BitLinear__preheader21_131 = (1'd0 + (2 * DDSDecodeAlpha3BitLinear__preheader21_130));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %131 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %130*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_131_reg <= DDSDecodeAlpha3BitLinear__preheader21_131;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_131_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %132 = load i16* %131, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_132 = DDSDecodeAlpha3BitLinear_0_alphas_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %132 = load i16* %131, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear__preheader21_132_reg <= DDSDecodeAlpha3BitLinear__preheader21_132;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_132_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %133 = trunc i16 %132 to i8*/
begin
DDSDecodeAlpha3BitLinear__preheader21_133 = DDSDecodeAlpha3BitLinear__preheader21_132[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %133 = trunc i16 %132 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear__preheader21_133_reg <= DDSDecodeAlpha3BitLinear__preheader21_133;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_133_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %134 = zext i8 %123 to i32*/
begin
DDSDecodeAlpha3BitLinear__preheader21_134 = DDSDecodeAlpha3BitLinear__preheader21_123_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %134 = zext i8 %123 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_134_reg <= DDSDecodeAlpha3BitLinear__preheader21_134;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_134_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %135 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %134*/
begin
DDSDecodeAlpha3BitLinear__preheader21_135 = (1'd0 + (2 * DDSDecodeAlpha3BitLinear__preheader21_134));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %135 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %134*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_135_reg <= DDSDecodeAlpha3BitLinear__preheader21_135;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_135_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %136 = load i16* %135, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_136 = DDSDecodeAlpha3BitLinear_0_alphas_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %136 = load i16* %135, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear__preheader21_136_reg <= DDSDecodeAlpha3BitLinear__preheader21_136;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_136_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %137 = trunc i16 %136 to i8*/
begin
DDSDecodeAlpha3BitLinear__preheader21_137 = DDSDecodeAlpha3BitLinear__preheader21_136[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %137 = trunc i16 %136 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear__preheader21_137_reg <= DDSDecodeAlpha3BitLinear__preheader21_137;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_137_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %138 = zext i8 %122 to i32*/
begin
DDSDecodeAlpha3BitLinear__preheader21_138 = DDSDecodeAlpha3BitLinear__preheader21_122_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %138 = zext i8 %122 to i32*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_138_reg <= DDSDecodeAlpha3BitLinear__preheader21_138;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_138_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %139 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %138*/
begin
DDSDecodeAlpha3BitLinear__preheader21_139 = (1'd0 + (2 * DDSDecodeAlpha3BitLinear__preheader21_138));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %139 = getelementptr inbounds [8 x i16]* %alphas, i32 0, i32 %138*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_139_reg <= DDSDecodeAlpha3BitLinear__preheader21_139;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_139_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %140 = load i16* %139, align 2, !tbaa !0*/
begin
DDSDecodeAlpha3BitLinear__preheader21_140 = DDSDecodeAlpha3BitLinear_0_alphas_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %140 = load i16* %139, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear__preheader21_140_reg <= DDSDecodeAlpha3BitLinear__preheader21_140;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_140_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %141 = trunc i16 %140 to i8*/
begin
DDSDecodeAlpha3BitLinear__preheader21_141 = DDSDecodeAlpha3BitLinear__preheader21_140[7:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %141 = trunc i16 %140 to i8*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear__preheader21_141_reg <= DDSDecodeAlpha3BitLinear__preheader21_141;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_141_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %142 = add nsw i32 %row.023, 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21_142 = (DDSDecodeAlpha3BitLinear__preheader21_row_023_reg + 32'd1);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %142 = add nsw i32 %row.023, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_142_reg <= DDSDecodeAlpha3BitLinear__preheader21_142;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_142_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %exitcond50 = icmp eq i32 %142, 4*/
begin
DDSDecodeAlpha3BitLinear__preheader21_exitcond50 = (DDSDecodeAlpha3BitLinear__preheader21_142 == 32'd4);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %exitcond50 = icmp eq i32 %142, 4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear__preheader21_exitcond50_reg <= DDSDecodeAlpha3BitLinear__preheader21_exitcond50;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21_exitcond50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21_exitcond50_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert = (1'd0 + (4 * DDSDecodeAlpha3BitLinear__preheader21_142_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre = load i8* %scevgep47.phi.trans.insert, align 1, !tbaa !1*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre = DDSDecodeAlpha3BitLinear_0_bits_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre = load i8* %scevgep47.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.1.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert = (1'd0 + ((4 * DDSDecodeAlpha3BitLinear__preheader21_142_reg) + (1 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.1.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre75 = load i8* %scevgep47.1.phi.trans.insert, align 1, !tbaa !1*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75 = DDSDecodeAlpha3BitLinear_0_bits_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre75 = load i8* %scevgep47.1.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre75_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.2.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert = (1'd0 + ((4 * DDSDecodeAlpha3BitLinear__preheader21_142_reg) + (1 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.2.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre76 = load i8* %scevgep47.2.phi.trans.insert, align 1, !tbaa !1*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76 = DDSDecodeAlpha3BitLinear_0_bits_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre76 = load i8* %scevgep47.2.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre76_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.3.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert = (1'd0 + ((4 * DDSDecodeAlpha3BitLinear__preheader21_142_reg) + (1 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %scevgep47.3.phi.trans.insert = getelementptr [4 x [4 x i8]]* %bits, i32 0, i32 %142, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre77 = load i8* %scevgep47.3.phi.trans.insert, align 1, !tbaa !1*/
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77 = DDSDecodeAlpha3BitLinear_0_bits_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre77 = load i8* %scevgep47.3.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_108))
begin
DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77_reg <= DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge__pre77_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %row.119 = phi i32 [ %159, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader_row_119 = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %row.119 = phi i32 [ %159, %.preheader ], [ 0, %.preheader.preheader ]*/
else /* if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader_exitcond_reg == 1'd0))) */
begin
DDSDecodeAlpha3BitLinear__preheader_row_119 = DDSDecodeAlpha3BitLinear__preheader_159_reg;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %row.119 = phi i32 [ %159, %.preheader ], [ 0, %.preheader.preheader ]*/
if (((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_preheader_105) & (memory_controller_waitrequest == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader_row_119_reg <= DDSDecodeAlpha3BitLinear__preheader_row_119;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_row_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_row_119_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %row.119 = phi i32 [ %159, %.preheader ], [ 0, %.preheader.preheader ]*/
if ((((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_115) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear__preheader_exitcond_reg == 1'd0)))
begin
DDSDecodeAlpha3BitLinear__preheader_row_119_reg <= DDSDecodeAlpha3BitLinear__preheader_row_119;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_row_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_row_119_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear__preheader_tmp36 = DDSDecodeAlpha3BitLinear__preheader_tmp36_stage0_reg;
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp36 = mul i32 %row.119, %width*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp36_reg <= DDSDecodeAlpha3BitLinear__preheader_tmp36;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_tmp36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_tmp36_reg"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp36 = mul i32 %row.119, %width*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp36_reg <= DDSDecodeAlpha3BitLinear__preheader_tmp36;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_tmp36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_tmp36_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117 = getelementptr i32* %pixel, i32 %tmp36*/
begin
DDSDecodeAlpha3BitLinear__preheader__117 = (arg_pixel + (4 * DDSDecodeAlpha3BitLinear__preheader_tmp36));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117 = getelementptr i32* %pixel, i32 %tmp36*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader__117_reg <= DDSDecodeAlpha3BitLinear__preheader__117;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader__117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader__117_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp38 = add i32 %tmp36, 3*/
begin
DDSDecodeAlpha3BitLinear__preheader_tmp38 = (DDSDecodeAlpha3BitLinear__preheader_tmp36 + 32'd3);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp38 = add i32 %tmp36, 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp38_reg <= DDSDecodeAlpha3BitLinear__preheader_tmp38;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_tmp38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_tmp38_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.3 = getelementptr i32* %pixel, i32 %tmp38*/
begin
DDSDecodeAlpha3BitLinear__preheader__117_3 = (arg_pixel + (4 * DDSDecodeAlpha3BitLinear__preheader_tmp38_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.3 = getelementptr i32* %pixel, i32 %tmp38*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
DDSDecodeAlpha3BitLinear__preheader__117_3_reg <= DDSDecodeAlpha3BitLinear__preheader__117_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader__117_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader__117_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp40 = add i32 %tmp36, 2*/
begin
DDSDecodeAlpha3BitLinear__preheader_tmp40 = (DDSDecodeAlpha3BitLinear__preheader_tmp36 + 32'd2);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp40 = add i32 %tmp36, 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp40_reg <= DDSDecodeAlpha3BitLinear__preheader_tmp40;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_tmp40_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.2 = getelementptr i32* %pixel, i32 %tmp40*/
begin
DDSDecodeAlpha3BitLinear__preheader__117_2 = (arg_pixel + (4 * DDSDecodeAlpha3BitLinear__preheader_tmp40_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.2 = getelementptr i32* %pixel, i32 %tmp40*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
DDSDecodeAlpha3BitLinear__preheader__117_2_reg <= DDSDecodeAlpha3BitLinear__preheader__117_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader__117_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader__117_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp42 = add i32 %tmp36, 1*/
begin
DDSDecodeAlpha3BitLinear__preheader_tmp42 = (DDSDecodeAlpha3BitLinear__preheader_tmp36 + 32'd1);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp42 = add i32 %tmp36, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp42_reg <= DDSDecodeAlpha3BitLinear__preheader_tmp42;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_tmp42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_tmp42_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.1 = getelementptr i32* %pixel, i32 %tmp42*/
begin
DDSDecodeAlpha3BitLinear__preheader__117_1 = (arg_pixel + (4 * DDSDecodeAlpha3BitLinear__preheader_tmp42_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %.117.1 = getelementptr i32* %pixel, i32 %tmp42*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
DDSDecodeAlpha3BitLinear__preheader__117_1_reg <= DDSDecodeAlpha3BitLinear__preheader__117_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader__117_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader__117_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep34 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 0*/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep34 = (1'd0 + (64 * DDSDecodeAlpha3BitLinear__preheader_row_119_reg));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep34 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep34_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep34;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep34_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep32 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 1*/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep32 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader_row_119_reg) + (16 * 32'd1)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep32 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep32_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep32;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep32_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep30 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 2*/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep30 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader_row_119_reg) + (16 * 32'd2)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep30 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 2*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep30_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep30;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep30_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep28 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 3*/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep28 = (1'd0 + ((64 * DDSDecodeAlpha3BitLinear__preheader_row_119_reg) + (16 * 32'd3)));
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep28 = getelementptr [4 x [4 x %struct.TYPE_4__]]* %aColors, i32 0, i32 %row.119, i32 3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep28_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep28;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep28_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627 = bitcast %struct.TYPE_4__* %scevgep34 to i32**/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627 = DDSDecodeAlpha3BitLinear__preheader_scevgep34;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627 = bitcast %struct.TYPE_4__* %scevgep34 to i32**/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep2627;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep2627) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep2627_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.1 = bitcast %struct.TYPE_4__* %scevgep32 to i32**/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1 = DDSDecodeAlpha3BitLinear__preheader_scevgep32;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.1 = bitcast %struct.TYPE_4__* %scevgep32 to i32**/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.2 = bitcast %struct.TYPE_4__* %scevgep30 to i32**/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2 = DDSDecodeAlpha3BitLinear__preheader_scevgep30;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.2 = bitcast %struct.TYPE_4__* %scevgep30 to i32**/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.3 = bitcast %struct.TYPE_4__* %scevgep28 to i32**/
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3 = DDSDecodeAlpha3BitLinear__preheader_scevgep28;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %scevgep2627.3 = bitcast %struct.TYPE_4__* %scevgep28 to i32**/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3_reg <= DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_143 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
DDSDecodeAlpha3BitLinear__preheader_143_reg <= DDSDecodeAlpha3BitLinear__preheader_143;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_143_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %144 = and i32 %143, %alphaZero*/
begin
DDSDecodeAlpha3BitLinear__preheader_144 = (DDSDecodeAlpha3BitLinear__preheader_143 & arg_alphaZero);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %144 = and i32 %143, %alphaZero*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
DDSDecodeAlpha3BitLinear__preheader_144_reg <= DDSDecodeAlpha3BitLinear__preheader_144;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_144_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %145 = load i32* %scevgep2627, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_145 = DDSDecodeAlpha3BitLinear_0_aColors_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %145 = load i32* %scevgep2627, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_145_reg <= DDSDecodeAlpha3BitLinear__preheader_145;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_145_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %146 = or i32 %144, %145*/
begin
DDSDecodeAlpha3BitLinear__preheader_146 = (DDSDecodeAlpha3BitLinear__preheader_144 | DDSDecodeAlpha3BitLinear__preheader_145_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %146 = or i32 %144, %145*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
DDSDecodeAlpha3BitLinear__preheader_146_reg <= DDSDecodeAlpha3BitLinear__preheader_146;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_146_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_147_reg <= DDSDecodeAlpha3BitLinear__preheader_147;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_147_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %148 = and i32 %147, %alphaZero*/
begin
DDSDecodeAlpha3BitLinear__preheader_148 = (DDSDecodeAlpha3BitLinear__preheader_147 & arg_alphaZero);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %148 = and i32 %147, %alphaZero*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_148_reg <= DDSDecodeAlpha3BitLinear__preheader_148;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_148_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %149 = load i32* %scevgep2627.1, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_149 = DDSDecodeAlpha3BitLinear_0_aColors_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %149 = load i32* %scevgep2627.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear__preheader_149_reg <= DDSDecodeAlpha3BitLinear__preheader_149;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_149_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %150 = or i32 %148, %149*/
begin
DDSDecodeAlpha3BitLinear__preheader_150 = (DDSDecodeAlpha3BitLinear__preheader_148 | DDSDecodeAlpha3BitLinear__preheader_149_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %150 = or i32 %148, %149*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_150_reg <= DDSDecodeAlpha3BitLinear__preheader_150;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_150_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_151 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_151_reg <= DDSDecodeAlpha3BitLinear__preheader_151;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_151_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %152 = and i32 %151, %alphaZero*/
begin
DDSDecodeAlpha3BitLinear__preheader_152 = (DDSDecodeAlpha3BitLinear__preheader_151 & arg_alphaZero);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %152 = and i32 %151, %alphaZero*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_152_reg <= DDSDecodeAlpha3BitLinear__preheader_152;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_152_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %153 = load i32* %scevgep2627.2, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_153 = DDSDecodeAlpha3BitLinear_0_aColors_out_a;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %153 = load i32* %scevgep2627.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
DDSDecodeAlpha3BitLinear__preheader_153_reg <= DDSDecodeAlpha3BitLinear__preheader_153;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_153_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %154 = or i32 %152, %153*/
begin
DDSDecodeAlpha3BitLinear__preheader_154 = (DDSDecodeAlpha3BitLinear__preheader_152 | DDSDecodeAlpha3BitLinear__preheader_153_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %154 = or i32 %152, %153*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
DDSDecodeAlpha3BitLinear__preheader_154_reg <= DDSDecodeAlpha3BitLinear__preheader_154;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_154_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_155 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
DDSDecodeAlpha3BitLinear__preheader_155_reg <= DDSDecodeAlpha3BitLinear__preheader_155;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_155_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %156 = and i32 %155, %alphaZero*/
begin
DDSDecodeAlpha3BitLinear__preheader_156 = (DDSDecodeAlpha3BitLinear__preheader_155 & arg_alphaZero);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %156 = and i32 %155, %alphaZero*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
DDSDecodeAlpha3BitLinear__preheader_156_reg <= DDSDecodeAlpha3BitLinear__preheader_156;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_156_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %157 = load i32* %scevgep2627.3, align 4, !tbaa !4*/
begin
DDSDecodeAlpha3BitLinear__preheader_157 = DDSDecodeAlpha3BitLinear_0_aColors_out_b;
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %157 = load i32* %scevgep2627.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
DDSDecodeAlpha3BitLinear__preheader_157_reg <= DDSDecodeAlpha3BitLinear__preheader_157;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_157_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %158 = or i32 %156, %157*/
begin
DDSDecodeAlpha3BitLinear__preheader_158 = (DDSDecodeAlpha3BitLinear__preheader_156 | DDSDecodeAlpha3BitLinear__preheader_157_reg);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %158 = or i32 %156, %157*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
DDSDecodeAlpha3BitLinear__preheader_158_reg <= DDSDecodeAlpha3BitLinear__preheader_158;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_158_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %159 = add nsw i32 %row.119, 1*/
begin
DDSDecodeAlpha3BitLinear__preheader_159 = (DDSDecodeAlpha3BitLinear__preheader_row_119_reg + 32'd1);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %159 = add nsw i32 %row.119, 1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_159_reg <= DDSDecodeAlpha3BitLinear__preheader_159;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_159_reg"); $finish; end
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %exitcond = icmp eq i32 %159, 4*/
begin
DDSDecodeAlpha3BitLinear__preheader_exitcond = (DDSDecodeAlpha3BitLinear__preheader_159 == 32'd4);
end
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %exitcond = icmp eq i32 %159, 4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear__preheader_exitcond_reg <= DDSDecodeAlpha3BitLinear__preheader_exitcond;
if (reset == 1'b0 && ^(DDSDecodeAlpha3BitLinear__preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear__preheader_exitcond_reg"); $finish; end
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %74, i8* %75, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_75_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %80, i8* %81, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_81_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %86, i8* %87, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_87_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %92, i8* %93, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_93_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %99, i8* %100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_100_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %105, i8* %106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_106_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %111, i8* %112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_112_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %117, i8* %118, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear_70_118_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre = load i8* %scevgep47.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_phi_trans_insert >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre76 = load i8* %scevgep47.2.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_a = (DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_2_phi_trans_insert_reg >>> 3'd0);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %74, i8* %75, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %80, i8* %81, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %86, i8* %87, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %92, i8* %93, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %99, i8* %100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %105, i8* %106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %111, i8* %112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %117, i8* %118, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre = load i8* %scevgep47.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre76 = load i8* %scevgep47.2.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_a = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %74, i8* %75, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_74;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %80, i8* %81, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_80_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %86, i8* %87, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_86_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %92, i8* %93, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_92_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %99, i8* %100, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_99_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %105, i8* %106, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_105_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %111, i8* %112, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_111_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %117, i8* %118, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_a = DDSDecodeAlpha3BitLinear_70_117_reg;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %77, i8* %78, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_78_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %83, i8* %84, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_84_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %89, i8* %90, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_90_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %95, i8* %96, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_96_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %102, i8* %103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_103_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %108, i8* %109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_109_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %114, i8* %115, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_115_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %120, i8* %121, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear_70_121_reg >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre75 = load i8* %scevgep47.1.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_1_phi_trans_insert >>> 3'd0);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre77 = load i8* %scevgep47.3.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear_0_bits_address_b = (DDSDecodeAlpha3BitLinear__preheader21__preheader21_crit_edge_scevgep47_3_phi_trans_insert_reg >>> 3'd0);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %77, i8* %78, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %83, i8* %84, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %89, i8* %90, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %95, i8* %96, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %102, i8* %103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %108, i8* %109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %114, i8* %115, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %120, i8* %121, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre75 = load i8* %scevgep47.1.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_106))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21..preheader21_crit_edge*/
/*   %.pre77 = load i8* %scevgep47.3.phi.trans.insert, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21__preheader21_crit_edge_107))
begin
DDSDecodeAlpha3BitLinear_0_bits_write_enable_b = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %77, i8* %78, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_87))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_77;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %83, i8* %84, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_88))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_83_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %89, i8* %90, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_89))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_89_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %95, i8* %96, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_90))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_95_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %102, i8* %103, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_91))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_102_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %108, i8* %109, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_92))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_108_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %114, i8* %115, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_93))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_114_reg;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   store i8 %120, i8* %121, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_94))
begin
DDSDecodeAlpha3BitLinear_0_bits_in_b = DDSDecodeAlpha3BitLinear_70_120_reg;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %2, i16* %3, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_0_3_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %14, i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_10_15_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %26, i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_10_27_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %38, i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_10_39_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %49, i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_45_50_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %61, i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_45_62_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %66, i16* %67, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear_45_67_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %128 = load i16* %127, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear__preheader21_127 >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %136 = load i16* %135, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_a = (DDSDecodeAlpha3BitLinear__preheader21_135_reg >>> 3'd1);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %2, i16* %3, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %14, i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %26, i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %38, i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %49, i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %61, i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %66, i16* %67, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %128 = load i16* %127, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %136 = load i16* %135, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %2, i16* %3, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_0_2;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %14, i16* %15, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_38))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_10_14;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %26, i16* %27, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_40))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_10_26;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %38, i16* %39, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_42))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_10_38;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %49, i16* %50, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_77))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_45_49;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %61, i16* %62, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_79))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_45_61;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %66, i16* %67, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_a = DDSDecodeAlpha3BitLinear_45_66;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %5, i16* %6, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_0_6_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %20, i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_10_21_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %32, i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_10_33_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %43, i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_10_44_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %55, i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_45_56_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 0, i16* %68, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_45_68_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 255, i16* %69, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear_45_69_reg >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %132 = load i16* %131, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear__preheader21_131 >>> 3'd1);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %140 = load i16* %139, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_alphas_address_b = (DDSDecodeAlpha3BitLinear__preheader21_139_reg >>> 3'd1);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %5, i16* %6, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %20, i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %32, i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %43, i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %55, i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 0, i16* %68, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 255, i16* %69, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %132 = load i16* %131, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   %140 = load i16* %139, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %0*/
/*   store i16 %5, i16* %6, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_3))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = DDSDecodeAlpha3BitLinear_0_5;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %20, i16* %21, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_39))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = DDSDecodeAlpha3BitLinear_10_20;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %32, i16* %33, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_41))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = DDSDecodeAlpha3BitLinear_10_32;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   store i16 %43, i16* %44, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_43))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = DDSDecodeAlpha3BitLinear_10_43;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 %55, i16* %56, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_78))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = DDSDecodeAlpha3BitLinear_45_55;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 0, i16* %68, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_80))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = 16'd0;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   store i16 255, i16* %69, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_81))
begin
DDSDecodeAlpha3BitLinear_0_alphas_in_b = 16'd255;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep46_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep_1_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep46_1_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep_2_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep46_2_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep_3_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader21_scevgep46_3_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %145 = load i32* %scevgep2627, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader_scevgep2627 >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %153 = load i32* %scevgep2627.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_a = (DDSDecodeAlpha3BitLinear__preheader_scevgep2627_2_reg >>> 3'd3);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %145 = load i32* %scevgep2627, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %153 = load i32* %scevgep2627.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep46.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_a = 32'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep45 >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %129, i8* %scevgep4849, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep45_1_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %133, i8* %scevgep4849.1, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_1_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep45_2_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %137, i8* %scevgep4849.2, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_2_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep45_3_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %141, i8* %scevgep4849.3, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader21_scevgep4849_3_reg >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %149 = load i32* %scevgep2627.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader_scevgep2627_1 >>> 3'd3);
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %157 = load i32* %scevgep2627.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear_0_aColors_address_b = (DDSDecodeAlpha3BitLinear__preheader_scevgep2627_3_reg >>> 3'd3);
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %129, i8* %scevgep4849, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %133, i8* %scevgep4849.1, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %137, i8* %scevgep4849.2, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %141, i8* %scevgep4849.3, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %149 = load i32* %scevgep2627.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_109))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %157 = load i32* %scevgep2627.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b = 1'd0;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = 1'd0;
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_96))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %129, i8* %scevgep4849, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_97))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = DDSDecodeAlpha3BitLinear__preheader21_129;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_98))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %133, i8* %scevgep4849.1, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_99))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = DDSDecodeAlpha3BitLinear__preheader21_133_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_100))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %137, i8* %scevgep4849.2, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_101))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = DDSDecodeAlpha3BitLinear__preheader21_137_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i32 0, i32* %scevgep45.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_102))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = 32'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader21*/
/*   store i8 %141, i8* %scevgep4849.3, align 4, !tbaa !1*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader21_103))
begin
DDSDecodeAlpha3BitLinear_0_aColors_in_b = DDSDecodeAlpha3BitLinear__preheader21_141_reg;
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %13 = udiv i32 %12, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_12;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %19 = udiv i32 %18, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_18_reg;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %25 = udiv i32 %24, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_24_reg;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %31 = udiv i32 %30, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_30_reg;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %37 = udiv i32 %36, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_36_reg;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %42 = udiv i32 %41, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_10_41_reg;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %48 = udiv i32 %47, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_45_47;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %54 = udiv i32 %53, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_45_53;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %60 = udiv i32 %59, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_45_59_reg;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %65 = udiv i32 %64, 5*/
else /* if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48)) */
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op0 = DDSDecodeAlpha3BitLinear_45_64_reg;
end
end
always @(*) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %13 = udiv i32 %12, 7*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_6))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %19 = udiv i32 %18, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_7))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %25 = udiv i32 %24, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_8))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %31 = udiv i32 %30, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_9))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %37 = udiv i32 %36, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_10))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %42 = udiv i32 %41, 7*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_10_11))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd7;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %48 = udiv i32 %47, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_45))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd5;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %54 = udiv i32 %53, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_46))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd5;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %60 = udiv i32 %59, 5*/
else if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_47))
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd5;
end
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %65 = udiv i32 %64, 5*/
else /* if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_45_48)) */
begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0_op1 = 32'd5;
end
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_13_out = lpm_divide_DDSDecodeAlpha3BitLinear_10_13_temp_out;
end
always @(*) begin
DDSDecodeAlpha3BitLinear_unsigned_divide_32_0 = lpm_divide_DDSDecodeAlpha3BitLinear_10_13_out;
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %11 = mul nsw i32 %7, 6*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_11_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_11_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_7_reg * 32'd6);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_16_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %16 = mul nsw i32 %7, 5*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_16_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_16_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_7_reg * 32'd5);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %23 = mul nsw i32 %8, 3*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_23_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_23_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_8_reg * 32'd3);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %28 = mul nsw i32 %7, 3*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_28_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_28_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_7_reg * 32'd3);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_35_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %35 = mul nsw i32 %8, 5*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_35_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_35_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_8_reg * 32'd5);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_10_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %10*/
/*   %40 = mul nsw i32 %8, 6*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_10_40_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_10_40_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_8_reg * 32'd6);
end
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_10_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_45_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_45_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %51 = mul nsw i32 %7, 3*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_45_51_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_45_51_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_7_reg * 32'd3);
end
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear_45_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %45*/
/*   %58 = mul nsw i32 %8, 3*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear_45_58_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear_45_58_stage0_reg <= (DDSDecodeAlpha3BitLinear_0_8_reg * 32'd3);
end
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_45_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_45_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_DDSDecodeAlpha3BitLinear_45_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_DDSDecodeAlpha3BitLinear__preheader_tmp36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %tmp36 = mul i32 %row.119, %width*/
if ((lpm_mult_DDSDecodeAlpha3BitLinear__preheader_tmp36_en == 1'd1))
begin
DDSDecodeAlpha3BitLinear__preheader_tmp36_stage0_reg <= (DDSDecodeAlpha3BitLinear__preheader_row_119_reg * arg_width);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* DDSDecodeAlpha3BitLinear: %160*/
/*   ret void*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_160_116))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %150, i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %158, i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear_0_1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear_70_71;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear_70_72;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear__preheader__117_1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear__preheader__117_3_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %150, i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear__preheader__117_1_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %158, i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
memory_controller_address_a = DDSDecodeAlpha3BitLinear__preheader__117_3_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %150, i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_write_enable_a = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %158, i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %150, i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_in_a = DDSDecodeAlpha3BitLinear__preheader_150;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %158, i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
memory_controller_in_a = DDSDecodeAlpha3BitLinear__preheader_158;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %2 = load i16* %1, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_size_a = 2'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %72 = load i32** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_83))
begin
memory_controller_size_a = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %73 = load i32* %72, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_size_a = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %147 = load i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_size_a = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %155 = load i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_size_a = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %150, i32* %.117.1, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_size_a = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %158, i32* %.117.3, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_114))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
memory_controller_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %146, i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %154, i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear_0_4;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear_70_97;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear__preheader__117;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear__preheader__117_2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %146, i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear__preheader__117_reg;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %154, i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_address_b = DDSDecodeAlpha3BitLinear__preheader__117_2_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
memory_controller_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_write_enable_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %146, i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_write_enable_b = 1'd1;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %154, i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %146, i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_in_b = DDSDecodeAlpha3BitLinear__preheader_146;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %154, i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_in_b = DDSDecodeAlpha3BitLinear__preheader_154;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* DDSDecodeAlpha3BitLinear: %0*/
/*   %5 = load i16* %4, align 2, !tbaa !0*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_0_1))
begin
memory_controller_size_b = 2'd1;
end
/* DDSDecodeAlpha3BitLinear: %70*/
/*   %98 = load i32* %97, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB_70_85))
begin
memory_controller_size_b = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %143 = load i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_110))
begin
memory_controller_size_b = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   %151 = load i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_111))
begin
memory_controller_size_b = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %146, i32* %.117, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_112))
begin
memory_controller_size_b = 2'd2;
end
/* DDSDecodeAlpha3BitLinear: %.preheader*/
/*   store i32 %154, i32* %.117.2, align 4, !tbaa !4*/
if ((cur_state == LEGUP_F_DDSDecodeAlpha3BitLinear_BB__preheader_113))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [3:0] DDSDecodeAlpha3BitLinear_0_bits_address_a;
wire  DDSDecodeAlpha3BitLinear_0_bits_write_enable_a;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_in_a;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_out_a;
wire [3:0] DDSDecodeAlpha3BitLinear_0_bits_address_b;
wire  DDSDecodeAlpha3BitLinear_0_bits_write_enable_b;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_in_b;
wire [7:0] DDSDecodeAlpha3BitLinear_0_bits_out_b;
wire [2:0] DDSDecodeAlpha3BitLinear_0_alphas_address_a;
wire  DDSDecodeAlpha3BitLinear_0_alphas_write_enable_a;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_in_a;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_out_a;
wire [2:0] DDSDecodeAlpha3BitLinear_0_alphas_address_b;
wire  DDSDecodeAlpha3BitLinear_0_alphas_write_enable_b;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_in_b;
wire [15:0] DDSDecodeAlpha3BitLinear_0_alphas_out_b;
wire [4:0] DDSDecodeAlpha3BitLinear_0_aColors_address_a;
wire  DDSDecodeAlpha3BitLinear_0_aColors_write_enable_a;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_in_a;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_out_a;
wire [4:0] DDSDecodeAlpha3BitLinear_0_aColors_address_b;
wire  DDSDecodeAlpha3BitLinear_0_aColors_write_enable_b;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_in_b;
wire [63:0] DDSDecodeAlpha3BitLinear_0_aColors_out_b;
reg  DDSDecodeAlpha3BitLinear_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_arg_pixel;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_arg_alphaBlock;
reg [31:0] DDSDecodeAlpha3BitLinear_arg_width;
reg [31:0] DDSDecodeAlpha3BitLinear_arg_alphaZero;
wire  DDSDecodeAlpha3BitLinear_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_address_a;
wire  DDSDecodeAlpha3BitLinear_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_out_a;
wire [1:0] DDSDecodeAlpha3BitLinear_memory_controller_size_a;
wire  DDSDecodeAlpha3BitLinear_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_address_b;
wire  DDSDecodeAlpha3BitLinear_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DDSDecodeAlpha3BitLinear_memory_controller_out_b;
wire [1:0] DDSDecodeAlpha3BitLinear_memory_controller_size_b;
reg  DDSDecodeAlpha3BitLinear_memory_controller_waitrequest;
wire  DDSDecodeAlpha3BitLinear_finish;
reg  DDSDecodeAlpha3BitLinear_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


DDSDecodeAlpha3BitLinear DDSDecodeAlpha3BitLinear_inst (
	.memory_controller_enable_a (DDSDecodeAlpha3BitLinear_memory_controller_enable_a),
	.memory_controller_address_a (DDSDecodeAlpha3BitLinear_memory_controller_address_a),
	.memory_controller_write_enable_a (DDSDecodeAlpha3BitLinear_memory_controller_write_enable_a),
	.memory_controller_in_a (DDSDecodeAlpha3BitLinear_memory_controller_in_a),
	.memory_controller_size_a (DDSDecodeAlpha3BitLinear_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (DDSDecodeAlpha3BitLinear_memory_controller_enable_b),
	.memory_controller_address_b (DDSDecodeAlpha3BitLinear_memory_controller_address_b),
	.memory_controller_write_enable_b (DDSDecodeAlpha3BitLinear_memory_controller_write_enable_b),
	.memory_controller_in_b (DDSDecodeAlpha3BitLinear_memory_controller_in_b),
	.memory_controller_size_b (DDSDecodeAlpha3BitLinear_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (DDSDecodeAlpha3BitLinear_start),
	.finish (DDSDecodeAlpha3BitLinear_finish),
	.arg_pixel (DDSDecodeAlpha3BitLinear_arg_pixel),
	.arg_alphaBlock (DDSDecodeAlpha3BitLinear_arg_alphaBlock),
	.arg_width (DDSDecodeAlpha3BitLinear_arg_width),
	.arg_alphaZero (DDSDecodeAlpha3BitLinear_arg_alphaZero)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (DDSDecodeAlpha3BitLinear_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_start"); $finish; end
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
DDSDecodeAlpha3BitLinear_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_arg_pixel <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_arg_pixel"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_arg_alphaBlock <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_arg_alphaBlock"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_arg_width <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_arg_width"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
DDSDecodeAlpha3BitLinear_arg_alphaZero <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DDSDecodeAlpha3BitLinear_arg_alphaZero"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
begin
DDSDecodeAlpha3BitLinear_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
begin
DDSDecodeAlpha3BitLinear_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
DDSDecodeAlpha3BitLinear_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
DDSDecodeAlpha3BitLinear_finish_final = DDSDecodeAlpha3BitLinear_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = DDSDecodeAlpha3BitLinear_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = DDSDecodeAlpha3BitLinear_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = DDSDecodeAlpha3BitLinear_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = DDSDecodeAlpha3BitLinear_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = DDSDecodeAlpha3BitLinear_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = DDSDecodeAlpha3BitLinear_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = DDSDecodeAlpha3BitLinear_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = DDSDecodeAlpha3BitLinear_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = DDSDecodeAlpha3BitLinear_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = DDSDecodeAlpha3BitLinear_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = DDSDecodeAlpha3BitLinear_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = DDSDecodeAlpha3BitLinear_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @DDSDecodeAlpha3BitLinear(i32* undef, %struct.TYPE_5__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = DDSDecodeAlpha3BitLinear_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.data_a (data_a),
	.data_b (data_b)
);

defparam
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b,
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";

// Local Rams


always @(*) begin
clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];

endmodule 
`timescale 1 ns / 1 ns
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  latency = 1'd1;
parameter  init_file = "UNUSED";

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
wire [(width_a-1):0] q_a_wire;
wire [(width_b-1):0] q_b_wire;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.q_a (q_a_wire),
	.q_b (q_b_wire),
	.byteena_a (),
	.byteena_b (),
	.wren_a (1'd0),
	.wren_b (1'd0),
	.data_a (),
	.data_b ()
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0";

// Local Rams


always @(*) begin
clk_wire = clk;
end


integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
