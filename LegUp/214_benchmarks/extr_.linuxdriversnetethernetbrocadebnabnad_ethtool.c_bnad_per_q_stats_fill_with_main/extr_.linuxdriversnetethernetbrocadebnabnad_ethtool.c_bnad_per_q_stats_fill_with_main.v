//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:57 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module bnad_per_q_stats_fill
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_bnad,
	arg_buf,
	arg_bi
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4 = 8'd4;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5 = 8'd5;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6 = 8'd6;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7 = 8'd7;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8 = 8'd8;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_8_9 = 8'd9;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_8_10 = 8'd10;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_8_11 = 8'd11;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12 = 8'd12;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13 = 8'd13;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14 = 8'd14;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15 = 8'd15;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16 = 8'd16;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17 = 8'd17;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_15_18 = 8'd18;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_15_19 = 8'd19;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_15_20 = 8'd20;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_19_21 = 8'd21;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_19_22 = 8'd22;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_19_23 = 8'd23;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_19_24 = 8'd24;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_19_25 = 8'd25;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_24_26 = 8'd26;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_24_27 = 8'd27;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_24_28 = 8'd28;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_29 = 8'd29;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_30 = 8'd30;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_31 = 8'd31;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_32 = 8'd32;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_33 = 8'd33;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_34 = 8'd34;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_35 = 8'd35;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_36 = 8'd36;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_37 = 8'd37;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_38 = 8'd38;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_39 = 8'd39;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_40 = 8'd40;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_41 = 8'd41;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_42 = 8'd42;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_43 = 8'd43;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_44 = 8'd44;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_45 = 8'd45;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_46 = 8'd46;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_47 = 8'd47;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_48 = 8'd48;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_49 = 8'd49;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_50 = 8'd50;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_51 = 8'd51;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_52 = 8'd52;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_53 = 8'd53;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_28_54 = 8'd54;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_55_55 = 8'd55;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56 = 8'd56;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57 = 8'd57;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58 = 8'd58;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59 = 8'd59;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60 = 8'd60;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61 = 8'd61;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62 = 8'd62;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63 = 8'd63;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64 = 8'd64;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65 = 8'd65;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66 = 8'd66;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67 = 8'd67;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68 = 8'd68;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69 = 8'd69;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70 = 8'd70;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71 = 8'd71;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72 = 8'd72;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73 = 8'd73;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74 = 8'd74;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75 = 8'd75;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_72_76 = 8'd76;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_72_77 = 8'd77;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_72_78 = 8'd78;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_75_79 = 8'd79;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_75_80 = 8'd80;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_75_81 = 8'd81;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_75_82 = 8'd82;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_75_83 = 8'd83;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_80_84 = 8'd84;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_80_85 = 8'd85;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_80_86 = 8'd86;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_87 = 8'd87;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_88 = 8'd88;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_89 = 8'd89;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_90 = 8'd90;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_91 = 8'd91;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_92 = 8'd92;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_93 = 8'd93;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_94 = 8'd94;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_95 = 8'd95;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_96 = 8'd96;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_97 = 8'd97;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_98 = 8'd98;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_99 = 8'd99;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_100 = 8'd100;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_101 = 8'd101;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_102 = 8'd102;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_103 = 8'd103;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_104 = 8'd104;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_105 = 8'd105;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_106 = 8'd106;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_107 = 8'd107;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_84_108 = 8'd108;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109 = 8'd109;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110 = 8'd110;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111 = 8'd111;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_116_112 = 8'd112;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_116_113 = 8'd113;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_116_114 = 8'd114;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_115 = 8'd115;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_116 = 8'd116;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_117 = 8'd117;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_118 = 8'd118;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_119 = 8'd119;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_120 = 8'd120;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_121 = 8'd121;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_122 = 8'd122;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_123 = 8'd123;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_124 = 8'd124;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_125 = 8'd125;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_126 = 8'd126;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_127 = 8'd127;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_128 = 8'd128;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_129 = 8'd129;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_130 = 8'd130;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_131 = 8'd131;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_132 = 8'd132;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_133 = 8'd133;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_134 = 8'd134;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_135 = 8'd135;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_120_136 = 8'd136;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137 = 8'd137;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138 = 8'd138;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139 = 8'd139;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140 = 8'd140;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141 = 8'd141;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142 = 8'd142;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143 = 8'd143;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_153_144 = 8'd144;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_153_145 = 8'd145;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_153_146 = 8'd146;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147 = 8'd147;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148 = 8'd148;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149 = 8'd149;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150 = 8'd150;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151 = 8'd151;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152 = 8'd152;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_160_153 = 8'd153;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_160_154 = 8'd154;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_160_155 = 8'd155;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_164_156 = 8'd156;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_164_157 = 8'd157;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_164_158 = 8'd158;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_159 = 8'd159;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_160 = 8'd160;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_161 = 8'd161;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_162 = 8'd162;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_163 = 8'd163;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_164 = 8'd164;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_165 = 8'd165;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_166 = 8'd166;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_167 = 8'd167;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_168 = 8'd168;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_169 = 8'd169;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_170 = 8'd170;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_171 = 8'd171;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_172 = 8'd172;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_173 = 8'd173;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_174 = 8'd174;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_175 = 8'd175;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_176 = 8'd176;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_177 = 8'd177;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_168_178 = 8'd178;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB_190_179 = 8'd179;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180 = 8'd180;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181 = 8'd181;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182 = 8'd182;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183 = 8'd183;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184 = 8'd184;
parameter [7:0] LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185 = 8'd185;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bnad;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_buf;
input [31:0] arg_bi;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_0_1_reg;
reg [31:0] bnad_per_q_stats_fill_0_2;
reg [31:0] bnad_per_q_stats_fill_0_2_reg;
reg  bnad_per_q_stats_fill_0_3;
reg  bnad_per_q_stats_fill_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph28_6_reg;
reg  bnad_per_q_stats_fill__preheader14_7;
reg  bnad_per_q_stats_fill__preheader14_7_reg;
reg [31:0] bnad_per_q_stats_fill_8_9;
reg [31:0] bnad_per_q_stats_fill_8_9_reg;
reg [31:0] bnad_per_q_stats_fill_8__026;
reg [31:0] bnad_per_q_stats_fill_8__026_reg;
reg [31:0] bnad_per_q_stats_fill_8_i_025;
reg [31:0] bnad_per_q_stats_fill_8_i_025_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_8_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_8_scevgep56_reg;
reg [31:0] bnad_per_q_stats_fill_8_tmp71;
reg [31:0] bnad_per_q_stats_fill_8_tmp71_reg;
reg [31:0] bnad_per_q_stats_fill_8_10;
reg [31:0] bnad_per_q_stats_fill_8_10_reg;
reg  bnad_per_q_stats_fill_8_11;
reg  bnad_per_q_stats_fill_8_11_reg;
reg [31:0] bnad_per_q_stats_fill__preheader19_12;
reg [31:0] bnad_per_q_stats_fill__preheader19_12_reg;
reg  bnad_per_q_stats_fill__preheader19_13;
reg  bnad_per_q_stats_fill__preheader19_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph23_scevgep5758;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph23_scevgep5758_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph23_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph23_14_reg;
reg [31:0] bnad_per_q_stats_fill_15_16;
reg [31:0] bnad_per_q_stats_fill_15_16_reg;
reg [31:0] bnad_per_q_stats_fill_15__122;
reg [31:0] bnad_per_q_stats_fill_15__122_reg;
reg [31:0] bnad_per_q_stats_fill_15_j_021;
reg [31:0] bnad_per_q_stats_fill_15_j_021_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_15_scevgep4647;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_15_scevgep4647_reg;
reg [31:0] bnad_per_q_stats_fill_15_tmp55;
reg [31:0] bnad_per_q_stats_fill_15_tmp55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_15_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_15_17_reg;
reg  bnad_per_q_stats_fill_15_18;
reg  bnad_per_q_stats_fill_15_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_19_22_reg;
reg  bnad_per_q_stats_fill_19_23;
reg  bnad_per_q_stats_fill_19_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_24_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_24_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_24_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_24_26_reg;
reg  bnad_per_q_stats_fill_24_27;
reg  bnad_per_q_stats_fill_24_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_29_reg;
reg [31:0] bnad_per_q_stats_fill_28_30;
reg [31:0] bnad_per_q_stats_fill_28_30_reg;
reg [31:0] bnad_per_q_stats_fill_28_31;
reg [31:0] bnad_per_q_stats_fill_28_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_32_reg;
reg [31:0] bnad_per_q_stats_fill_28_33;
reg [31:0] bnad_per_q_stats_fill_28_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_36_reg;
reg [31:0] bnad_per_q_stats_fill_28_37;
reg [31:0] bnad_per_q_stats_fill_28_37_reg;
reg [31:0] bnad_per_q_stats_fill_28_38;
reg [31:0] bnad_per_q_stats_fill_28_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep50_reg;
reg [31:0] bnad_per_q_stats_fill_28_40;
reg [31:0] bnad_per_q_stats_fill_28_40_reg;
reg [31:0] bnad_per_q_stats_fill_28_41;
reg [31:0] bnad_per_q_stats_fill_28_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep51_reg;
reg [31:0] bnad_per_q_stats_fill_28_43;
reg [31:0] bnad_per_q_stats_fill_28_43_reg;
reg [31:0] bnad_per_q_stats_fill_28_44;
reg [31:0] bnad_per_q_stats_fill_28_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep52_reg;
reg [31:0] bnad_per_q_stats_fill_28_46;
reg [31:0] bnad_per_q_stats_fill_28_46_reg;
reg [31:0] bnad_per_q_stats_fill_28_47;
reg [31:0] bnad_per_q_stats_fill_28_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep53_reg;
reg [31:0] bnad_per_q_stats_fill_28_49;
reg [31:0] bnad_per_q_stats_fill_28_49_reg;
reg [31:0] bnad_per_q_stats_fill_28_50;
reg [31:0] bnad_per_q_stats_fill_28_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_scevgep54_reg;
reg [31:0] bnad_per_q_stats_fill_28_52;
reg [31:0] bnad_per_q_stats_fill_28_52_reg;
reg [31:0] bnad_per_q_stats_fill_28_53;
reg [31:0] bnad_per_q_stats_fill_28_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_28_54_reg;
reg [31:0] bnad_per_q_stats_fill_28__pre72;
reg [31:0] bnad_per_q_stats_fill_28__pre72_reg;
reg [31:0] bnad_per_q_stats_fill_55_56;
reg [31:0] bnad_per_q_stats_fill_55_56_reg;
reg [31:0] bnad_per_q_stats_fill_55__2;
reg [31:0] bnad_per_q_stats_fill_55__2_reg;
reg  bnad_per_q_stats_fill_55_57;
reg  bnad_per_q_stats_fill_55_57_reg;
reg [31:0] bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre;
reg [31:0] bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge73_58;
reg [31:0] bnad_per_q_stats_fill___crit_edge73_58_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge73__3;
reg [31:0] bnad_per_q_stats_fill___crit_edge73__3_reg;
reg  bnad_per_q_stats_fill___crit_edge73_59;
reg  bnad_per_q_stats_fill___crit_edge73_59_reg;
reg [31:0] bnad_per_q_stats_fill__preheader3__4_lcssa;
reg [31:0] bnad_per_q_stats_fill__preheader3__4_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__preheader3_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__preheader3_60_reg;
reg [31:0] bnad_per_q_stats_fill__preheader3_61;
reg [31:0] bnad_per_q_stats_fill__preheader3_61_reg;
reg  bnad_per_q_stats_fill__preheader3_62;
reg  bnad_per_q_stats_fill__preheader3_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph6_65_reg;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_66;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_66_reg;
reg [31:0] bnad_per_q_stats_fill__lr_ph17__416;
reg [31:0] bnad_per_q_stats_fill__lr_ph17__416_reg;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_i_115;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_i_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph17_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph17_scevgep40_reg;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_tmp45;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_tmp45_reg;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_67;
reg [31:0] bnad_per_q_stats_fill__lr_ph17_67_reg;
reg  bnad_per_q_stats_fill__lr_ph17_68;
reg  bnad_per_q_stats_fill__lr_ph17_68_reg;
reg [31:0] bnad_per_q_stats_fill__preheader8_69;
reg [31:0] bnad_per_q_stats_fill__preheader8_69_reg;
reg  bnad_per_q_stats_fill__preheader8_70;
reg  bnad_per_q_stats_fill__preheader8_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph12_scevgep4142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph12_scevgep4142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph12_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph12_71_reg;
reg [31:0] bnad_per_q_stats_fill_72__511;
reg [31:0] bnad_per_q_stats_fill_72__511_reg;
reg [31:0] bnad_per_q_stats_fill_72_j_110;
reg [31:0] bnad_per_q_stats_fill_72_j_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_72_scevgep3536;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_72_scevgep3536_reg;
reg [31:0] bnad_per_q_stats_fill_72_tmp39;
reg [31:0] bnad_per_q_stats_fill_72_tmp39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_72_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_72_73_reg;
reg  bnad_per_q_stats_fill_72_74;
reg  bnad_per_q_stats_fill_72_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_75_78_reg;
reg  bnad_per_q_stats_fill_75_79;
reg  bnad_per_q_stats_fill_75_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_80_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_80_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_80_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_80_82_reg;
reg  bnad_per_q_stats_fill_80_83;
reg  bnad_per_q_stats_fill_80_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_85_reg;
reg [31:0] bnad_per_q_stats_fill_84_86;
reg [31:0] bnad_per_q_stats_fill_84_86_reg;
reg [31:0] bnad_per_q_stats_fill_84_87;
reg [31:0] bnad_per_q_stats_fill_84_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_89_reg;
reg [31:0] bnad_per_q_stats_fill_84_90;
reg [31:0] bnad_per_q_stats_fill_84_90_reg;
reg [31:0] bnad_per_q_stats_fill_84_91;
reg [31:0] bnad_per_q_stats_fill_84_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_93_reg;
reg [31:0] bnad_per_q_stats_fill_84_94;
reg [31:0] bnad_per_q_stats_fill_84_94_reg;
reg [31:0] bnad_per_q_stats_fill_84_95;
reg [31:0] bnad_per_q_stats_fill_84_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_97_reg;
reg [31:0] bnad_per_q_stats_fill_84_98;
reg [31:0] bnad_per_q_stats_fill_84_98_reg;
reg [31:0] bnad_per_q_stats_fill_84_99;
reg [31:0] bnad_per_q_stats_fill_84_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_101_reg;
reg [31:0] bnad_per_q_stats_fill_84_102;
reg [31:0] bnad_per_q_stats_fill_84_102_reg;
reg [31:0] bnad_per_q_stats_fill_84_103;
reg [31:0] bnad_per_q_stats_fill_84_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_105_reg;
reg [31:0] bnad_per_q_stats_fill_84_106;
reg [31:0] bnad_per_q_stats_fill_84_106_reg;
reg [31:0] bnad_per_q_stats_fill_84_107;
reg [31:0] bnad_per_q_stats_fill_84_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_109_reg;
reg [31:0] bnad_per_q_stats_fill_84_110;
reg [31:0] bnad_per_q_stats_fill_84_110_reg;
reg [31:0] bnad_per_q_stats_fill_84_111;
reg [31:0] bnad_per_q_stats_fill_84_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_84_112_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge74__6;
reg [31:0] bnad_per_q_stats_fill___crit_edge74__6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill___crit_edge74_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill___crit_edge74_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill___crit_edge74_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill___crit_edge74_114_reg;
reg  bnad_per_q_stats_fill___crit_edge74_115;
reg  bnad_per_q_stats_fill___crit_edge74_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_116_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_116_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_116_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_116_118_reg;
reg  bnad_per_q_stats_fill_116_119;
reg  bnad_per_q_stats_fill_116_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_121_reg;
reg [31:0] bnad_per_q_stats_fill_120_122;
reg [31:0] bnad_per_q_stats_fill_120_122_reg;
reg [31:0] bnad_per_q_stats_fill_120_123;
reg [31:0] bnad_per_q_stats_fill_120_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_125_reg;
reg [31:0] bnad_per_q_stats_fill_120_126;
reg [31:0] bnad_per_q_stats_fill_120_126_reg;
reg [31:0] bnad_per_q_stats_fill_120_127;
reg [31:0] bnad_per_q_stats_fill_120_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_129_reg;
reg [31:0] bnad_per_q_stats_fill_120_130;
reg [31:0] bnad_per_q_stats_fill_120_130_reg;
reg [31:0] bnad_per_q_stats_fill_120_131;
reg [31:0] bnad_per_q_stats_fill_120_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_133_reg;
reg [31:0] bnad_per_q_stats_fill_120_134;
reg [31:0] bnad_per_q_stats_fill_120_134_reg;
reg [31:0] bnad_per_q_stats_fill_120_135;
reg [31:0] bnad_per_q_stats_fill_120_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_137_reg;
reg [31:0] bnad_per_q_stats_fill_120_138;
reg [31:0] bnad_per_q_stats_fill_120_138_reg;
reg [31:0] bnad_per_q_stats_fill_120_139;
reg [31:0] bnad_per_q_stats_fill_120_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_141_reg;
reg [31:0] bnad_per_q_stats_fill_120_142;
reg [31:0] bnad_per_q_stats_fill_120_142_reg;
reg [31:0] bnad_per_q_stats_fill_120_143;
reg [31:0] bnad_per_q_stats_fill_120_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_145_reg;
reg [31:0] bnad_per_q_stats_fill_120_146;
reg [31:0] bnad_per_q_stats_fill_120_146_reg;
reg [31:0] bnad_per_q_stats_fill_120_147;
reg [31:0] bnad_per_q_stats_fill_120_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_120_148_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge76__7;
reg [31:0] bnad_per_q_stats_fill___crit_edge76__7_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge76_149;
reg [31:0] bnad_per_q_stats_fill___crit_edge76_149_reg;
reg  bnad_per_q_stats_fill___crit_edge76_150;
reg  bnad_per_q_stats_fill___crit_edge76_150_reg;
reg [31:0] bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre;
reg [31:0] bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge78_151;
reg [31:0] bnad_per_q_stats_fill___crit_edge78_151_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge78__8;
reg [31:0] bnad_per_q_stats_fill___crit_edge78__8_reg;
reg  bnad_per_q_stats_fill___crit_edge78_152;
reg  bnad_per_q_stats_fill___crit_edge78_152_reg;
reg [31:0] bnad_per_q_stats_fill_153_154;
reg [31:0] bnad_per_q_stats_fill_153_154_reg;
reg [31:0] bnad_per_q_stats_fill_153__95;
reg [31:0] bnad_per_q_stats_fill_153__95_reg;
reg [31:0] bnad_per_q_stats_fill_153_i_24;
reg [31:0] bnad_per_q_stats_fill_153_i_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_153_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_153_scevgep31_reg;
reg [31:0] bnad_per_q_stats_fill_153_tmp34;
reg [31:0] bnad_per_q_stats_fill_153_tmp34_reg;
reg [31:0] bnad_per_q_stats_fill_153_155;
reg [31:0] bnad_per_q_stats_fill_153_155_reg;
reg  bnad_per_q_stats_fill_153_156;
reg  bnad_per_q_stats_fill_153_156_reg;
reg [31:0] bnad_per_q_stats_fill__preheader_157;
reg [31:0] bnad_per_q_stats_fill__preheader_157_reg;
reg  bnad_per_q_stats_fill__preheader_158;
reg  bnad_per_q_stats_fill__preheader_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph_scevgep3233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph_scevgep3233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill__lr_ph_159_reg;
reg [31:0] bnad_per_q_stats_fill_160_161;
reg [31:0] bnad_per_q_stats_fill_160_161_reg;
reg [31:0] bnad_per_q_stats_fill_160__102;
reg [31:0] bnad_per_q_stats_fill_160__102_reg;
reg [31:0] bnad_per_q_stats_fill_160_j_21;
reg [31:0] bnad_per_q_stats_fill_160_j_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_160_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_160_scevgep_reg;
reg [31:0] bnad_per_q_stats_fill_160_tmp;
reg [31:0] bnad_per_q_stats_fill_160_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_160_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_160_162_reg;
reg  bnad_per_q_stats_fill_160_163;
reg  bnad_per_q_stats_fill_160_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_164_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_164_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_164_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_164_166_reg;
reg  bnad_per_q_stats_fill_164_167;
reg  bnad_per_q_stats_fill_164_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_169_reg;
reg [31:0] bnad_per_q_stats_fill_168_170;
reg [31:0] bnad_per_q_stats_fill_168_170_reg;
reg [31:0] bnad_per_q_stats_fill_168_171;
reg [31:0] bnad_per_q_stats_fill_168_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_173_reg;
reg [31:0] bnad_per_q_stats_fill_168_174;
reg [31:0] bnad_per_q_stats_fill_168_174_reg;
reg [31:0] bnad_per_q_stats_fill_168_175;
reg [31:0] bnad_per_q_stats_fill_168_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_177_reg;
reg [31:0] bnad_per_q_stats_fill_168_178;
reg [31:0] bnad_per_q_stats_fill_168_178_reg;
reg [31:0] bnad_per_q_stats_fill_168_179;
reg [31:0] bnad_per_q_stats_fill_168_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_181_reg;
reg [31:0] bnad_per_q_stats_fill_168_182;
reg [31:0] bnad_per_q_stats_fill_168_182_reg;
reg [31:0] bnad_per_q_stats_fill_168_183;
reg [31:0] bnad_per_q_stats_fill_168_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_186_reg;
reg [31:0] bnad_per_q_stats_fill_168_187;
reg [31:0] bnad_per_q_stats_fill_168_187_reg;
reg [31:0] bnad_per_q_stats_fill_168_188;
reg [31:0] bnad_per_q_stats_fill_168_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_168_189_reg;
reg [31:0] bnad_per_q_stats_fill_168__pre;
reg [31:0] bnad_per_q_stats_fill_168__pre_reg;
reg [31:0] bnad_per_q_stats_fill_190_191;
reg [31:0] bnad_per_q_stats_fill_190_191_reg;
reg [31:0] bnad_per_q_stats_fill_190__11;
reg [31:0] bnad_per_q_stats_fill_190__11_reg;
reg  bnad_per_q_stats_fill_190_192;
reg  bnad_per_q_stats_fill_190_192_reg;
reg [31:0] bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre;
reg [31:0] bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge79_193;
reg [31:0] bnad_per_q_stats_fill___crit_edge79_193_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge79__12;
reg [31:0] bnad_per_q_stats_fill___crit_edge79__12_reg;
reg  bnad_per_q_stats_fill___crit_edge79_194;
reg  bnad_per_q_stats_fill___crit_edge79_194_reg;
reg [31:0] bnad_per_q_stats_fill___crit_edge__9_lcssa;
reg [31:0] bnad_per_q_stats_fill___crit_edge__9_lcssa_reg;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_0_3 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_0_3 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader14_7 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader14_7 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_11;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_18;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_18;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_19;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_19;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_20;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_20;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_21;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_21;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_22;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_22;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_23;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_23;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_24;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_24;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_25;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_19_25;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_19_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_26;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_26;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_27;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_27;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_28;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_24_28;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_29;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_29;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_30;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_30;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_31;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_31;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_32;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_32;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_33;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_33;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_34;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_34;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_35;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_35;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_36;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_36;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_37;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_37;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_38;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_38;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_39;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_39;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_40;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_40;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_41;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_41;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_42;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_42;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_43;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_43;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_44;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_44;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_45;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_45;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_46;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_46;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_47;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_47;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_48;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_48;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_49;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_49;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_50;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_50;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_51;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_51;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_52;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_52;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_53;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_53;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_54;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_28_54;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_15_18;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_8_9;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader3_62 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader3_62 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_144;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_76;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_76;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_77;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_77;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_78;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_78;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_72_74 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_72_74 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_79;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_79;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_80;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_80;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_81;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_81;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_82;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_82;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_83;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_75_83;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_75_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_75_79 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_75_79 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_84;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_84;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_85;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_85;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_86;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_80_86;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_80_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_80_83 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_80_83 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_87;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_87;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_88;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_88;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_89;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_89;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_90;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_90;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_91;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_91;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_92;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_92;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_93;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_93;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_94;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_94;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_95;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_95;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_96;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_96;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_97;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_97;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_98;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_98;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_99;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_99;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_100;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_100;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_101;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_101;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_102;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_102;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_103;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_103;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_104;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_104;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_105;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_105;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_106;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_106;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_107;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_107;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_108;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_84_108;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_84_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge74_115 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge74_115 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_112;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_112;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_113;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_113;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_114;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_116_114;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_116_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_116_119 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_116_119 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_115;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_115;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_116;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_116;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_117;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_117;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_118;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_118;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_119;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_119;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_120;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_120;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_121;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_121;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_122;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_122;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_123;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_123;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_124;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_124;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_125;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_125;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_126;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_126;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_127;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_127;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_128;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_128;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_129;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_129;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_130;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_130;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_131;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_131;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_132;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_132;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_133;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_133;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_134;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_134;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_135;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_135;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_136;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_120_136;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_120_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_72_76;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_144;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_145;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_145;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_146;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_146;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_153;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_153;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_154;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_154;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_155;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_155;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_190_179;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_190_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_156;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_156;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_157;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_157;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_158;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_164_158;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_164_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_190_179;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_190_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_159;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_159;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_160;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_160;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_161;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_161;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_162;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_162;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_163;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_163;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_164;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_164;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_165;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_165;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_166;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_166;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_167;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_167;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_168;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_168;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_169;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_169;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_170;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_170;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_171;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_171;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_172;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_172;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_173;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_173;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_174;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_174;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_175;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_175;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_176;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_176;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_177;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_177;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_178;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_168_178;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_168_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_190_179;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_190_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_190_179;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_190_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_160_153;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_160_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB_153_144;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB_153_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185;
if (reset == 1'b0 && ^(LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %0*/
/*   %1 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_0_1 = arg_bnad;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %0*/
/*   %1 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1))
begin
bnad_per_q_stats_fill_0_1_reg <= bnad_per_q_stats_fill_0_1;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_0_1_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3))
begin
bnad_per_q_stats_fill_0_2_reg <= bnad_per_q_stats_fill_0_2;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_0_2_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %0*/
/*   %3 = icmp sgt i32 %2, 0*/
begin
bnad_per_q_stats_fill_0_3 = ($signed(bnad_per_q_stats_fill_0_2) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %0*/
/*   %3 = icmp sgt i32 %2, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3))
begin
bnad_per_q_stats_fill_0_3_reg <= bnad_per_q_stats_fill_0_3;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_0_3_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %4 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 5*/
begin
bnad_per_q_stats_fill__lr_ph28_4 = (arg_bnad + 20);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %4 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
bnad_per_q_stats_fill__lr_ph28_4_reg <= bnad_per_q_stats_fill__lr_ph28_4;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph28_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph28_4_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill__lr_ph28_5 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6))
begin
bnad_per_q_stats_fill__lr_ph28_5_reg <= bnad_per_q_stats_fill__lr_ph28_5;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph28_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph28_5_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %6 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 1*/
begin
bnad_per_q_stats_fill__lr_ph28_6 = (arg_bnad + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %6 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
bnad_per_q_stats_fill__lr_ph28_6_reg <= bnad_per_q_stats_fill__lr_ph28_6;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph28_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph28_6_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader14*/
/*   %7 = icmp sgt i32 %58, 0*/
begin
bnad_per_q_stats_fill__preheader14_7 = ($signed(bnad_per_q_stats_fill___crit_edge73_58_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader14*/
/*   %7 = icmp sgt i32 %58, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7))
begin
bnad_per_q_stats_fill__preheader14_7_reg <= bnad_per_q_stats_fill__preheader14_7;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader14_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader14_7_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %9 = phi i32 [ %2, %.lr.ph28 ], [ %58, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8_9 = bnad_per_q_stats_fill_0_2_reg;
end
/* bnad_per_q_stats_fill: %8*/
/*   %9 = phi i32 [ %2, %.lr.ph28 ], [ %58, %._crit_edge73 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1))) */
begin
bnad_per_q_stats_fill_8_9 = bnad_per_q_stats_fill___crit_edge73_58_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %9 = phi i32 [ %2, %.lr.ph28 ], [ %58, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8_9_reg <= bnad_per_q_stats_fill_8_9;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_9_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %8*/
/*   %9 = phi i32 [ %2, %.lr.ph28 ], [ %58, %._crit_edge73 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1)))
begin
bnad_per_q_stats_fill_8_9_reg <= bnad_per_q_stats_fill_8_9;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_9_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %.026 = phi i32 [ %bi, %.lr.ph28 ], [ %.3, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8__026 = arg_bi;
end
/* bnad_per_q_stats_fill: %8*/
/*   %.026 = phi i32 [ %bi, %.lr.ph28 ], [ %.3, %._crit_edge73 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1))) */
begin
bnad_per_q_stats_fill_8__026 = bnad_per_q_stats_fill___crit_edge73__3_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %.026 = phi i32 [ %bi, %.lr.ph28 ], [ %.3, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8__026_reg <= bnad_per_q_stats_fill_8__026;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8__026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8__026_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %8*/
/*   %.026 = phi i32 [ %bi, %.lr.ph28 ], [ %.3, %._crit_edge73 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1)))
begin
bnad_per_q_stats_fill_8__026_reg <= bnad_per_q_stats_fill_8__026;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8__026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8__026_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %i.025 = phi i32 [ 0, %.lr.ph28 ], [ %tmp71, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8_i_025 = 32'd0;
end
/* bnad_per_q_stats_fill: %8*/
/*   %i.025 = phi i32 [ 0, %.lr.ph28 ], [ %tmp71, %._crit_edge73 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1))) */
begin
bnad_per_q_stats_fill_8_i_025 = bnad_per_q_stats_fill_8_tmp71_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %i.025 = phi i32 [ 0, %.lr.ph28 ], [ %tmp71, %._crit_edge73 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_6) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_8_i_025_reg <= bnad_per_q_stats_fill_8_i_025;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_i_025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_i_025_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %8*/
/*   %i.025 = phi i32 [ 0, %.lr.ph28 ], [ %tmp71, %._crit_edge73 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge73_59 == 1'd1)))
begin
bnad_per_q_stats_fill_8_i_025_reg <= bnad_per_q_stats_fill_8_i_025;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_i_025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_i_025_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %scevgep56 = getelementptr %struct.TYPE_12__* %5, i32 %i.025, i32 1*/
begin
bnad_per_q_stats_fill_8_scevgep56 = (bnad_per_q_stats_fill__lr_ph28_5_reg + ((8 * bnad_per_q_stats_fill_8_i_025_reg) + 4));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %scevgep56 = getelementptr %struct.TYPE_12__* %5, i32 %i.025, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
bnad_per_q_stats_fill_8_scevgep56_reg <= bnad_per_q_stats_fill_8_scevgep56;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_scevgep56_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %tmp71 = add i32 %i.025, 1*/
begin
bnad_per_q_stats_fill_8_tmp71 = (bnad_per_q_stats_fill_8_i_025_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %tmp71 = add i32 %i.025, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
bnad_per_q_stats_fill_8_tmp71_reg <= bnad_per_q_stats_fill_8_tmp71;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_tmp71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_tmp71_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_8_10 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11))
begin
bnad_per_q_stats_fill_8_10_reg <= bnad_per_q_stats_fill_8_10;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_10_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %8*/
/*   %11 = icmp eq i32 %10, 0*/
begin
bnad_per_q_stats_fill_8_11 = (bnad_per_q_stats_fill_8_10 == 32'd0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %8*/
/*   %11 = icmp eq i32 %10, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11))
begin
bnad_per_q_stats_fill_8_11_reg <= bnad_per_q_stats_fill_8_11;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_8_11_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill__preheader19_12 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14))
begin
bnad_per_q_stats_fill__preheader19_12_reg <= bnad_per_q_stats_fill__preheader19_12;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader19_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader19_12_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %13 = icmp sgt i32 %12, 0*/
begin
bnad_per_q_stats_fill__preheader19_13 = ($signed(bnad_per_q_stats_fill__preheader19_12) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %13 = icmp sgt i32 %12, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14))
begin
bnad_per_q_stats_fill__preheader19_13_reg <= bnad_per_q_stats_fill__preheader19_13;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader19_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader19_13_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %scevgep5758 = getelementptr inbounds %struct.TYPE_12__* %5, i32 %i.025, i32 0*/
begin
bnad_per_q_stats_fill__lr_ph23_scevgep5758 = (bnad_per_q_stats_fill__lr_ph28_5_reg + (8 * bnad_per_q_stats_fill_8_i_025_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %scevgep5758 = getelementptr inbounds %struct.TYPE_12__* %5, i32 %i.025, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15))
begin
bnad_per_q_stats_fill__lr_ph23_scevgep5758_reg <= bnad_per_q_stats_fill__lr_ph23_scevgep5758;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph23_scevgep5758) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph23_scevgep5758_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill__lr_ph23_14 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17))
begin
bnad_per_q_stats_fill__lr_ph23_14_reg <= bnad_per_q_stats_fill__lr_ph23_14;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph23_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph23_14_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %16 = phi i32 [ %12, %.lr.ph23 ], [ %56, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15_16 = bnad_per_q_stats_fill__preheader19_12_reg;
end
/* bnad_per_q_stats_fill: %15*/
/*   %16 = phi i32 [ %12, %.lr.ph23 ], [ %56, %55 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1))) */
begin
bnad_per_q_stats_fill_15_16 = bnad_per_q_stats_fill_55_56_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %16 = phi i32 [ %12, %.lr.ph23 ], [ %56, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15_16_reg <= bnad_per_q_stats_fill_15_16;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_16_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %15*/
/*   %16 = phi i32 [ %12, %.lr.ph23 ], [ %56, %55 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1)))
begin
bnad_per_q_stats_fill_15_16_reg <= bnad_per_q_stats_fill_15_16;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_16_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %.122 = phi i32 [ %.026, %.lr.ph23 ], [ %.2, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15__122 = bnad_per_q_stats_fill_8__026_reg;
end
/* bnad_per_q_stats_fill: %15*/
/*   %.122 = phi i32 [ %.026, %.lr.ph23 ], [ %.2, %55 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1))) */
begin
bnad_per_q_stats_fill_15__122 = bnad_per_q_stats_fill_55__2_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %.122 = phi i32 [ %.026, %.lr.ph23 ], [ %.2, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15__122_reg <= bnad_per_q_stats_fill_15__122;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15__122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15__122_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %15*/
/*   %.122 = phi i32 [ %.026, %.lr.ph23 ], [ %.2, %55 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1)))
begin
bnad_per_q_stats_fill_15__122_reg <= bnad_per_q_stats_fill_15__122;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15__122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15__122_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %j.021 = phi i32 [ 0, %.lr.ph23 ], [ %tmp55, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15_j_021 = 32'd0;
end
/* bnad_per_q_stats_fill: %15*/
/*   %j.021 = phi i32 [ 0, %.lr.ph23 ], [ %tmp55, %55 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1))) */
begin
bnad_per_q_stats_fill_15_j_021 = bnad_per_q_stats_fill_15_tmp55_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %j.021 = phi i32 [ 0, %.lr.ph23 ], [ %tmp55, %55 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_17) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_15_j_021_reg <= bnad_per_q_stats_fill_15_j_021;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_j_021) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_j_021_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %15*/
/*   %j.021 = phi i32 [ 0, %.lr.ph23 ], [ %tmp55, %55 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_55_57 == 1'd1)))
begin
bnad_per_q_stats_fill_15_j_021_reg <= bnad_per_q_stats_fill_15_j_021;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_j_021) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_j_021_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %scevgep4647 = getelementptr inbounds %struct.TYPE_11__* %14, i32 %j.021, i32 0*/
begin
bnad_per_q_stats_fill_15_scevgep4647 = (bnad_per_q_stats_fill__lr_ph23_14_reg + (24 * bnad_per_q_stats_fill_15_j_021_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %scevgep4647 = getelementptr inbounds %struct.TYPE_11__* %14, i32 %j.021, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
bnad_per_q_stats_fill_15_scevgep4647_reg <= bnad_per_q_stats_fill_15_scevgep4647;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_scevgep4647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_scevgep4647_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %tmp55 = add i32 %j.021, 1*/
begin
bnad_per_q_stats_fill_15_tmp55 = (bnad_per_q_stats_fill_15_j_021_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %tmp55 = add i32 %j.021, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
bnad_per_q_stats_fill_15_tmp55_reg <= bnad_per_q_stats_fill_15_tmp55;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_tmp55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_tmp55_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_15_17 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20))
begin
bnad_per_q_stats_fill_15_17_reg <= bnad_per_q_stats_fill_15_17;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_17_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %15*/
/*   %18 = icmp eq %struct.TYPE_10__* %17, null*/
begin
bnad_per_q_stats_fill_15_18 = (bnad_per_q_stats_fill_15_17 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %15*/
/*   %18 = icmp eq %struct.TYPE_10__* %17, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20))
begin
bnad_per_q_stats_fill_15_18_reg <= bnad_per_q_stats_fill_15_18;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_15_18_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %19*/
/*   %20 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_19_20 = bnad_per_q_stats_fill_15_17_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %19*/
/*   %20 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21))
begin
bnad_per_q_stats_fill_19_20_reg <= bnad_per_q_stats_fill_19_20;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_19_20_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_19_21 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23))
begin
bnad_per_q_stats_fill_19_21_reg <= bnad_per_q_stats_fill_19_21;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_19_21_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_19_22 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25))
begin
bnad_per_q_stats_fill_19_22_reg <= bnad_per_q_stats_fill_19_22;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_19_22_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %19*/
/*   %23 = icmp eq %struct.bna_rcb* %22, null*/
begin
bnad_per_q_stats_fill_19_23 = (bnad_per_q_stats_fill_19_22 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %19*/
/*   %23 = icmp eq %struct.bna_rcb* %22, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25))
begin
bnad_per_q_stats_fill_19_23_reg <= bnad_per_q_stats_fill_19_23;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_19_23_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %24*/
/*   %25 = getelementptr inbounds %struct.bna_rcb* %22, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_24_25 = (bnad_per_q_stats_fill_19_22_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %24*/
/*   %25 = getelementptr inbounds %struct.bna_rcb* %22, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26))
begin
bnad_per_q_stats_fill_24_25_reg <= bnad_per_q_stats_fill_24_25;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_24_25_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_24_26 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28))
begin
bnad_per_q_stats_fill_24_26_reg <= bnad_per_q_stats_fill_24_26;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_24_26_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %24*/
/*   %27 = icmp eq %struct.TYPE_9__* %26, null*/
begin
bnad_per_q_stats_fill_24_27 = (bnad_per_q_stats_fill_24_26 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %24*/
/*   %27 = icmp eq %struct.TYPE_9__* %26, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28))
begin
bnad_per_q_stats_fill_24_27_reg <= bnad_per_q_stats_fill_24_27;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_24_27_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %29 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_28_29 = (bnad_per_q_stats_fill_15_17_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %29 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_29_reg <= bnad_per_q_stats_fill_28_29;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_29_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
bnad_per_q_stats_fill_28_30_reg <= bnad_per_q_stats_fill_28_30;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_30_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %31 = add nsw i32 %.122, 1*/
begin
bnad_per_q_stats_fill_28_31 = (bnad_per_q_stats_fill_15__122_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %31 = add nsw i32 %.122, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_31_reg <= bnad_per_q_stats_fill_28_31;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_31_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %32 = getelementptr inbounds i32* %buf, i32 %.122*/
begin
bnad_per_q_stats_fill_28_32 = (arg_buf + (4 * bnad_per_q_stats_fill_15__122_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %32 = getelementptr inbounds i32* %buf, i32 %.122*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_32_reg <= bnad_per_q_stats_fill_28_32;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_32_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %33 = add i32 %.122, 2*/
begin
bnad_per_q_stats_fill_28_33 = (bnad_per_q_stats_fill_15__122_reg + 32'd2);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %33 = add i32 %.122, 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_33_reg <= bnad_per_q_stats_fill_28_33;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_33_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %34 = getelementptr inbounds i32* %buf, i32 %31*/
begin
bnad_per_q_stats_fill_28_34 = (arg_buf + (4 * bnad_per_q_stats_fill_28_31_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %34 = getelementptr inbounds i32* %buf, i32 %31*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_34_reg <= bnad_per_q_stats_fill_28_34;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_34_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %35 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_28_35 = (bnad_per_q_stats_fill_15_17_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %35 = getelementptr inbounds %struct.TYPE_10__* %17, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_35_reg <= bnad_per_q_stats_fill_28_35;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_35_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_28_36 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34))
begin
bnad_per_q_stats_fill_28_36_reg <= bnad_per_q_stats_fill_28_36;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_36_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_37 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
bnad_per_q_stats_fill_28_37_reg <= bnad_per_q_stats_fill_28_37;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_37_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %38 = add i32 %.122, 3*/
begin
bnad_per_q_stats_fill_28_38 = (bnad_per_q_stats_fill_15__122_reg + 32'd3);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %38 = add i32 %.122, 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_38_reg <= bnad_per_q_stats_fill_28_38;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_38_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %39 = getelementptr inbounds i32* %buf, i32 %33*/
begin
bnad_per_q_stats_fill_28_39 = (arg_buf + (4 * bnad_per_q_stats_fill_28_33_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %39 = getelementptr inbounds i32* %buf, i32 %33*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_39_reg <= bnad_per_q_stats_fill_28_39;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_39_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep50 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 5*/
begin
bnad_per_q_stats_fill_28_scevgep50 = (bnad_per_q_stats_fill__lr_ph23_14_reg + ((24 * bnad_per_q_stats_fill_15_j_021_reg) + 20));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep50 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_scevgep50_reg <= bnad_per_q_stats_fill_28_scevgep50;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_scevgep50_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
bnad_per_q_stats_fill_28_40_reg <= bnad_per_q_stats_fill_28_40;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_40_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %41 = add i32 %.122, 4*/
begin
bnad_per_q_stats_fill_28_41 = (bnad_per_q_stats_fill_15__122_reg + 32'd4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %41 = add i32 %.122, 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_41_reg <= bnad_per_q_stats_fill_28_41;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_41_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %42 = getelementptr inbounds i32* %buf, i32 %38*/
begin
bnad_per_q_stats_fill_28_42 = (arg_buf + (4 * bnad_per_q_stats_fill_28_38_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %42 = getelementptr inbounds i32* %buf, i32 %38*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_42_reg <= bnad_per_q_stats_fill_28_42;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_42_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep51 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 4*/
begin
bnad_per_q_stats_fill_28_scevgep51 = (bnad_per_q_stats_fill__lr_ph23_14_reg + ((24 * bnad_per_q_stats_fill_15_j_021_reg) + 16));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep51 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_scevgep51_reg <= bnad_per_q_stats_fill_28_scevgep51;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_scevgep51_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
bnad_per_q_stats_fill_28_43_reg <= bnad_per_q_stats_fill_28_43;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_43_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %44 = add i32 %.122, 5*/
begin
bnad_per_q_stats_fill_28_44 = (bnad_per_q_stats_fill_15__122_reg + 32'd5);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %44 = add i32 %.122, 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_44_reg <= bnad_per_q_stats_fill_28_44;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_44_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %45 = getelementptr inbounds i32* %buf, i32 %41*/
begin
bnad_per_q_stats_fill_28_45 = (arg_buf + (4 * bnad_per_q_stats_fill_28_41_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %45 = getelementptr inbounds i32* %buf, i32 %41*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_45_reg <= bnad_per_q_stats_fill_28_45;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_45_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep52 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 3*/
begin
bnad_per_q_stats_fill_28_scevgep52 = (bnad_per_q_stats_fill__lr_ph23_14_reg + ((24 * bnad_per_q_stats_fill_15_j_021_reg) + 12));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep52 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_scevgep52_reg <= bnad_per_q_stats_fill_28_scevgep52;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_scevgep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_scevgep52_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_46 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
bnad_per_q_stats_fill_28_46_reg <= bnad_per_q_stats_fill_28_46;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_46_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %47 = add i32 %.122, 6*/
begin
bnad_per_q_stats_fill_28_47 = (bnad_per_q_stats_fill_15__122_reg + 32'd6);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %47 = add i32 %.122, 6*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_47_reg <= bnad_per_q_stats_fill_28_47;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_47_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %48 = getelementptr inbounds i32* %buf, i32 %44*/
begin
bnad_per_q_stats_fill_28_48 = (arg_buf + (4 * bnad_per_q_stats_fill_28_44_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %48 = getelementptr inbounds i32* %buf, i32 %44*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_48_reg <= bnad_per_q_stats_fill_28_48;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_48_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep53 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 2*/
begin
bnad_per_q_stats_fill_28_scevgep53 = (bnad_per_q_stats_fill__lr_ph23_14_reg + ((24 * bnad_per_q_stats_fill_15_j_021_reg) + 8));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep53 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_scevgep53_reg <= bnad_per_q_stats_fill_28_scevgep53;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_scevgep53_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_49 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
bnad_per_q_stats_fill_28_49_reg <= bnad_per_q_stats_fill_28_49;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_49_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %50 = add i32 %.122, 7*/
begin
bnad_per_q_stats_fill_28_50 = (bnad_per_q_stats_fill_15__122_reg + 32'd7);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %50 = add i32 %.122, 7*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_50_reg <= bnad_per_q_stats_fill_28_50;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_50_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %51 = getelementptr inbounds i32* %buf, i32 %47*/
begin
bnad_per_q_stats_fill_28_51 = (arg_buf + (4 * bnad_per_q_stats_fill_28_47_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %51 = getelementptr inbounds i32* %buf, i32 %47*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_51_reg <= bnad_per_q_stats_fill_28_51;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_51_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep54 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 1*/
begin
bnad_per_q_stats_fill_28_scevgep54 = (bnad_per_q_stats_fill__lr_ph23_14_reg + ((24 * bnad_per_q_stats_fill_15_j_021_reg) + 4));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %scevgep54 = getelementptr %struct.TYPE_11__* %14, i32 %j.021, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_scevgep54_reg <= bnad_per_q_stats_fill_28_scevgep54;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_scevgep54_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28_52 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
bnad_per_q_stats_fill_28_52_reg <= bnad_per_q_stats_fill_28_52;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_52_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %53 = add i32 %.122, 8*/
begin
bnad_per_q_stats_fill_28_53 = (bnad_per_q_stats_fill_15__122_reg + 32'd8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %53 = add i32 %.122, 8*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
bnad_per_q_stats_fill_28_53_reg <= bnad_per_q_stats_fill_28_53;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_53_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %54 = getelementptr inbounds i32* %buf, i32 %50*/
begin
bnad_per_q_stats_fill_28_54 = (arg_buf + (4 * bnad_per_q_stats_fill_28_50_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %54 = getelementptr inbounds i32* %buf, i32 %50*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_30))
begin
bnad_per_q_stats_fill_28_54_reg <= bnad_per_q_stats_fill_28_54;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28_54_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_28__pre72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54))
begin
bnad_per_q_stats_fill_28__pre72_reg <= bnad_per_q_stats_fill_28__pre72;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_28__pre72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_28__pre72_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56 = bnad_per_q_stats_fill_15_16_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56 = bnad_per_q_stats_fill_15_16_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56 = bnad_per_q_stats_fill_15_16_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill_55_56 = bnad_per_q_stats_fill_28__pre72;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56_reg <= bnad_per_q_stats_fill_55_56;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55_56_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56_reg <= bnad_per_q_stats_fill_55_56;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55_56_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd1)))
begin
bnad_per_q_stats_fill_55_56_reg <= bnad_per_q_stats_fill_55_56;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55_56_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %56 = phi i32 [ %.pre72, %28 ], [ %16, %24 ], [ %16, %19 ], [ %16, %15 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_55_56_reg <= bnad_per_q_stats_fill_55_56;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55_56_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2 = bnad_per_q_stats_fill_15__122_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2 = bnad_per_q_stats_fill_15__122_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2 = bnad_per_q_stats_fill_15__122_reg;
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill_55__2 = bnad_per_q_stats_fill_28_53_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_20) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_15_18 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2_reg <= bnad_per_q_stats_fill_55__2;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55__2_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_25) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_19_23 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2_reg <= bnad_per_q_stats_fill_55__2;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55__2_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_28) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_24_27 == 1'd1)))
begin
bnad_per_q_stats_fill_55__2_reg <= bnad_per_q_stats_fill_55__2;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55__2_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %55*/
/*   %.2 = phi i32 [ %53, %28 ], [ %.122, %24 ], [ %.122, %19 ], [ %.122, %15 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_54) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_55__2_reg <= bnad_per_q_stats_fill_55__2;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55__2_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %55*/
/*   %57 = icmp slt i32 %tmp55, %56*/
begin
bnad_per_q_stats_fill_55_57 = ($signed(bnad_per_q_stats_fill_15_tmp55_reg) < $signed(bnad_per_q_stats_fill_55_56_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %55*/
/*   %57 = icmp slt i32 %tmp55, %56*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_55_55))
begin
bnad_per_q_stats_fill_55_57_reg <= bnad_per_q_stats_fill_55_57;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_55_57_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58))
begin
bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre_reg <= bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge73_58 = bnad_per_q_stats_fill_8_9_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73_58 = bnad_per_q_stats_fill_8_9_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge73_58 = bnad_per_q_stats_fill___loopexit20_crit_edge__pre82_pre;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge73_58_reg <= bnad_per_q_stats_fill___crit_edge73_58;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73_58_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73_58_reg <= bnad_per_q_stats_fill___crit_edge73_58;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73_58_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %58 = phi i32 [ %9, %8 ], [ %.pre82.pre, %..loopexit20_crit_edge ], [ %9, %.preheader19 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73_58_reg <= bnad_per_q_stats_fill___crit_edge73_58;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73_58_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge73__3 = bnad_per_q_stats_fill_8__026_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73__3 = bnad_per_q_stats_fill_8__026_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge73__3 = bnad_per_q_stats_fill_55__2_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_11) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_8_11 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge73__3_reg <= bnad_per_q_stats_fill___crit_edge73__3;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73__3_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_14) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader19_13 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73__3_reg <= bnad_per_q_stats_fill___crit_edge73__3;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73__3_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %.3 = phi i32 [ %.026, %8 ], [ %.2, %..loopexit20_crit_edge ], [ %.026, %.preheader19 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_58) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge73__3_reg <= bnad_per_q_stats_fill___crit_edge73__3;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73__3_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %59 = icmp slt i32 %tmp71, %58*/
begin
bnad_per_q_stats_fill___crit_edge73_59 = ($signed(bnad_per_q_stats_fill_8_tmp71_reg) < $signed(bnad_per_q_stats_fill___crit_edge73_58_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge73*/
/*   %59 = icmp slt i32 %tmp71, %58*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge73_59))
begin
bnad_per_q_stats_fill___crit_edge73_59_reg <= bnad_per_q_stats_fill___crit_edge73_59;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge73_59_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_0_3 == 1'd0)))
begin
bnad_per_q_stats_fill__preheader3__4_lcssa = arg_bi;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader14_7 == 1'd0)))
begin
bnad_per_q_stats_fill__preheader3__4_lcssa = bnad_per_q_stats_fill___crit_edge73__3_reg;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill__preheader3__4_lcssa = bnad_per_q_stats_fill___crit_edge78__8_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_0_3 == 1'd0)))
begin
bnad_per_q_stats_fill__preheader3__4_lcssa_reg <= bnad_per_q_stats_fill__preheader3__4_lcssa;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3__4_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3__4_lcssa_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader14_7) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader14_7 == 1'd0)))
begin
bnad_per_q_stats_fill__preheader3__4_lcssa_reg <= bnad_per_q_stats_fill__preheader3__4_lcssa;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3__4_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3__4_lcssa_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %.4.lcssa = phi i32 [ %.3, %.preheader14 ], [ %bi, %0 ], [ %.8, %.preheader3.loopexit ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_loopexit_60) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__preheader3__4_lcssa_reg <= bnad_per_q_stats_fill__preheader3__4_lcssa;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3__4_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3__4_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %60 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 2*/
begin
bnad_per_q_stats_fill__preheader3_60 = (arg_bnad + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %60 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61))
begin
bnad_per_q_stats_fill__preheader3_60_reg <= bnad_per_q_stats_fill__preheader3_60;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3_60_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill__preheader3_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63))
begin
bnad_per_q_stats_fill__preheader3_61_reg <= bnad_per_q_stats_fill__preheader3_61;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3_61_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %62 = icmp sgt i32 %61, 0*/
begin
bnad_per_q_stats_fill__preheader3_62 = ($signed(bnad_per_q_stats_fill__preheader3_61) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %62 = icmp sgt i32 %61, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63))
begin
bnad_per_q_stats_fill__preheader3_62_reg <= bnad_per_q_stats_fill__preheader3_62;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader3_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader3_62_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %63 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 4*/
begin
bnad_per_q_stats_fill__lr_ph6_63 = (arg_bnad + 16);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %63 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
bnad_per_q_stats_fill__lr_ph6_63_reg <= bnad_per_q_stats_fill__lr_ph6_63;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph6_63_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill__lr_ph6_64 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66))
begin
bnad_per_q_stats_fill__lr_ph6_64_reg <= bnad_per_q_stats_fill__lr_ph6_64;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph6_64_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %65 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 3*/
begin
bnad_per_q_stats_fill__lr_ph6_65 = (arg_bnad + 12);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %65 = getelementptr inbounds %struct.bnad* %bnad, i32 0, i32 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
bnad_per_q_stats_fill__lr_ph6_65_reg <= bnad_per_q_stats_fill__lr_ph6_65;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph6_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph6_65_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %66 = phi i32 [ %151, %._crit_edge78 ], [ %58, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17_66 = bnad_per_q_stats_fill___crit_edge73_58_reg;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %66 = phi i32 [ %151, %._crit_edge78 ], [ %58, %.lr.ph17.preheader ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1))) */
begin
bnad_per_q_stats_fill__lr_ph17_66 = bnad_per_q_stats_fill___crit_edge78_151_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %66 = phi i32 [ %151, %._crit_edge78 ], [ %58, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17_66_reg <= bnad_per_q_stats_fill__lr_ph17_66;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_66_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %66 = phi i32 [ %151, %._crit_edge78 ], [ %58, %.lr.ph17.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1)))
begin
bnad_per_q_stats_fill__lr_ph17_66_reg <= bnad_per_q_stats_fill__lr_ph17_66;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_66_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %.416 = phi i32 [ %.8, %._crit_edge78 ], [ %.3, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17__416 = bnad_per_q_stats_fill___crit_edge73__3_reg;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %.416 = phi i32 [ %.8, %._crit_edge78 ], [ %.3, %.lr.ph17.preheader ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1))) */
begin
bnad_per_q_stats_fill__lr_ph17__416 = bnad_per_q_stats_fill___crit_edge78__8_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %.416 = phi i32 [ %.8, %._crit_edge78 ], [ %.3, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17__416_reg <= bnad_per_q_stats_fill__lr_ph17__416;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17__416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17__416_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %.416 = phi i32 [ %.8, %._crit_edge78 ], [ %.3, %.lr.ph17.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1)))
begin
bnad_per_q_stats_fill__lr_ph17__416_reg <= bnad_per_q_stats_fill__lr_ph17__416;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17__416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17__416_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %i.115 = phi i32 [ %tmp45, %._crit_edge78 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17_i_115 = 32'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %i.115 = phi i32 [ %tmp45, %._crit_edge78 ], [ 0, %.lr.ph17.preheader ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1))) */
begin
bnad_per_q_stats_fill__lr_ph17_i_115 = bnad_per_q_stats_fill__lr_ph17_tmp45_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %i.115 = phi i32 [ %tmp45, %._crit_edge78 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill__lr_ph17_i_115_reg <= bnad_per_q_stats_fill__lr_ph17_i_115;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_i_115_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %i.115 = phi i32 [ %tmp45, %._crit_edge78 ], [ 0, %.lr.ph17.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge78_152 == 1'd1)))
begin
bnad_per_q_stats_fill__lr_ph17_i_115_reg <= bnad_per_q_stats_fill__lr_ph17_i_115;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_i_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_i_115_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %scevgep40 = getelementptr %struct.TYPE_12__* %5, i32 %i.115, i32 1*/
begin
bnad_per_q_stats_fill__lr_ph17_scevgep40 = (bnad_per_q_stats_fill__lr_ph28_5_reg + ((8 * bnad_per_q_stats_fill__lr_ph17_i_115_reg) + 4));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %scevgep40 = getelementptr %struct.TYPE_12__* %5, i32 %i.115, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
bnad_per_q_stats_fill__lr_ph17_scevgep40_reg <= bnad_per_q_stats_fill__lr_ph17_scevgep40;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_scevgep40_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %tmp45 = add i32 %i.115, 1*/
begin
bnad_per_q_stats_fill__lr_ph17_tmp45 = (bnad_per_q_stats_fill__lr_ph17_i_115_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %tmp45 = add i32 %i.115, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
bnad_per_q_stats_fill__lr_ph17_tmp45_reg <= bnad_per_q_stats_fill__lr_ph17_tmp45;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_tmp45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_tmp45_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill__lr_ph17_67 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69))
begin
bnad_per_q_stats_fill__lr_ph17_67_reg <= bnad_per_q_stats_fill__lr_ph17_67;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_67_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %68 = icmp eq i32 %67, 0*/
begin
bnad_per_q_stats_fill__lr_ph17_68 = (bnad_per_q_stats_fill__lr_ph17_67 == 32'd0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %68 = icmp eq i32 %67, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69))
begin
bnad_per_q_stats_fill__lr_ph17_68_reg <= bnad_per_q_stats_fill__lr_ph17_68;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph17_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph17_68_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill__preheader8_69 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72))
begin
bnad_per_q_stats_fill__preheader8_69_reg <= bnad_per_q_stats_fill__preheader8_69;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader8_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader8_69_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %70 = icmp sgt i32 %69, 0*/
begin
bnad_per_q_stats_fill__preheader8_70 = ($signed(bnad_per_q_stats_fill__preheader8_69) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %70 = icmp sgt i32 %69, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72))
begin
bnad_per_q_stats_fill__preheader8_70_reg <= bnad_per_q_stats_fill__preheader8_70;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader8_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader8_70_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %scevgep4142 = getelementptr inbounds %struct.TYPE_12__* %5, i32 %i.115, i32 0*/
begin
bnad_per_q_stats_fill__lr_ph12_scevgep4142 = (bnad_per_q_stats_fill__lr_ph28_5_reg + (8 * bnad_per_q_stats_fill__lr_ph17_i_115_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %scevgep4142 = getelementptr inbounds %struct.TYPE_12__* %5, i32 %i.115, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73))
begin
bnad_per_q_stats_fill__lr_ph12_scevgep4142_reg <= bnad_per_q_stats_fill__lr_ph12_scevgep4142;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph12_scevgep4142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph12_scevgep4142_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill__lr_ph12_71 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75))
begin
bnad_per_q_stats_fill__lr_ph12_71_reg <= bnad_per_q_stats_fill__lr_ph12_71;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph12_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph12_71_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %.511 = phi i32 [ %.416, %.lr.ph12 ], [ %.7, %._crit_edge76 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_72__511 = bnad_per_q_stats_fill__lr_ph17__416_reg;
end
/* bnad_per_q_stats_fill: %72*/
/*   %.511 = phi i32 [ %.416, %.lr.ph12 ], [ %.7, %._crit_edge76 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd1))) */
begin
bnad_per_q_stats_fill_72__511 = bnad_per_q_stats_fill___crit_edge76__7_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %.511 = phi i32 [ %.416, %.lr.ph12 ], [ %.7, %._crit_edge76 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_72__511_reg <= bnad_per_q_stats_fill_72__511;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72__511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72__511_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %72*/
/*   %.511 = phi i32 [ %.416, %.lr.ph12 ], [ %.7, %._crit_edge76 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd1)))
begin
bnad_per_q_stats_fill_72__511_reg <= bnad_per_q_stats_fill_72__511;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72__511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72__511_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %j.110 = phi i32 [ 0, %.lr.ph12 ], [ %tmp39, %._crit_edge76 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_72_j_110 = 32'd0;
end
/* bnad_per_q_stats_fill: %72*/
/*   %j.110 = phi i32 [ 0, %.lr.ph12 ], [ %tmp39, %._crit_edge76 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd1))) */
begin
bnad_per_q_stats_fill_72_j_110 = bnad_per_q_stats_fill_72_tmp39_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %j.110 = phi i32 [ 0, %.lr.ph12 ], [ %tmp39, %._crit_edge76 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_75) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_72_j_110_reg <= bnad_per_q_stats_fill_72_j_110;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_j_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_j_110_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %72*/
/*   %j.110 = phi i32 [ 0, %.lr.ph12 ], [ %tmp39, %._crit_edge76 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge76_150 == 1'd1)))
begin
bnad_per_q_stats_fill_72_j_110_reg <= bnad_per_q_stats_fill_72_j_110;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_j_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_j_110_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %scevgep3536 = getelementptr inbounds %struct.TYPE_11__* %71, i32 %j.110, i32 0*/
begin
bnad_per_q_stats_fill_72_scevgep3536 = (bnad_per_q_stats_fill__lr_ph12_71_reg + (24 * bnad_per_q_stats_fill_72_j_110_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %scevgep3536 = getelementptr inbounds %struct.TYPE_11__* %71, i32 %j.110, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
bnad_per_q_stats_fill_72_scevgep3536_reg <= bnad_per_q_stats_fill_72_scevgep3536;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_scevgep3536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_scevgep3536_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %tmp39 = add i32 %j.110, 1*/
begin
bnad_per_q_stats_fill_72_tmp39 = (bnad_per_q_stats_fill_72_j_110_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %tmp39 = add i32 %j.110, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
bnad_per_q_stats_fill_72_tmp39_reg <= bnad_per_q_stats_fill_72_tmp39;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_tmp39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_tmp39_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_72_73 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78))
begin
bnad_per_q_stats_fill_72_73_reg <= bnad_per_q_stats_fill_72_73;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_73_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %72*/
/*   %74 = icmp eq %struct.TYPE_10__* %73, null*/
begin
bnad_per_q_stats_fill_72_74 = (bnad_per_q_stats_fill_72_73 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %72*/
/*   %74 = icmp eq %struct.TYPE_10__* %73, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78))
begin
bnad_per_q_stats_fill_72_74_reg <= bnad_per_q_stats_fill_72_74;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_72_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_72_74_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %75*/
/*   %76 = getelementptr inbounds %struct.TYPE_10__* %73, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_75_76 = bnad_per_q_stats_fill_72_73_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %75*/
/*   %76 = getelementptr inbounds %struct.TYPE_10__* %73, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79))
begin
bnad_per_q_stats_fill_75_76_reg <= bnad_per_q_stats_fill_75_76;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_75_76_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_75_77 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81))
begin
bnad_per_q_stats_fill_75_77_reg <= bnad_per_q_stats_fill_75_77;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_75_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_75_77_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_75_78 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83))
begin
bnad_per_q_stats_fill_75_78_reg <= bnad_per_q_stats_fill_75_78;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_75_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_75_78_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %75*/
/*   %79 = icmp eq %struct.bna_rcb* %78, null*/
begin
bnad_per_q_stats_fill_75_79 = (bnad_per_q_stats_fill_75_78 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %75*/
/*   %79 = icmp eq %struct.bna_rcb* %78, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83))
begin
bnad_per_q_stats_fill_75_79_reg <= bnad_per_q_stats_fill_75_79;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_75_79_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %80*/
/*   %81 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_80_81 = (bnad_per_q_stats_fill_75_78_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %80*/
/*   %81 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84))
begin
bnad_per_q_stats_fill_80_81_reg <= bnad_per_q_stats_fill_80_81;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_80_81_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_80_82 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86))
begin
bnad_per_q_stats_fill_80_82_reg <= bnad_per_q_stats_fill_80_82;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_80_82_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %80*/
/*   %83 = icmp eq %struct.TYPE_9__* %82, null*/
begin
bnad_per_q_stats_fill_80_83 = (bnad_per_q_stats_fill_80_82 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %80*/
/*   %83 = icmp eq %struct.TYPE_9__* %82, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86))
begin
bnad_per_q_stats_fill_80_83_reg <= bnad_per_q_stats_fill_80_83;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_80_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_80_83_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %85 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 4*/
begin
bnad_per_q_stats_fill_84_85 = (bnad_per_q_stats_fill_80_82_reg + 16);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %85 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_85_reg <= bnad_per_q_stats_fill_84_85;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_85_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_86 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
bnad_per_q_stats_fill_84_86_reg <= bnad_per_q_stats_fill_84_86;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_86_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %87 = add nsw i32 %.511, 1*/
begin
bnad_per_q_stats_fill_84_87 = (bnad_per_q_stats_fill_72__511_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %87 = add nsw i32 %.511, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_87_reg <= bnad_per_q_stats_fill_84_87;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_87_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %88 = getelementptr inbounds i32* %buf, i32 %.511*/
begin
bnad_per_q_stats_fill_84_88 = (arg_buf + (4 * bnad_per_q_stats_fill_72__511_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %88 = getelementptr inbounds i32* %buf, i32 %.511*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_88_reg <= bnad_per_q_stats_fill_84_88;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_88_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %89 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 3*/
begin
bnad_per_q_stats_fill_84_89 = (bnad_per_q_stats_fill_80_82_reg + 12);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %89 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_89_reg <= bnad_per_q_stats_fill_84_89;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_89_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_90 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
bnad_per_q_stats_fill_84_90_reg <= bnad_per_q_stats_fill_84_90;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_90_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %91 = add i32 %.511, 2*/
begin
bnad_per_q_stats_fill_84_91 = (bnad_per_q_stats_fill_72__511_reg + 32'd2);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %91 = add i32 %.511, 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_91_reg <= bnad_per_q_stats_fill_84_91;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_91_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %92 = getelementptr inbounds i32* %buf, i32 %87*/
begin
bnad_per_q_stats_fill_84_92 = (arg_buf + (4 * bnad_per_q_stats_fill_84_87_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %92 = getelementptr inbounds i32* %buf, i32 %87*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_92_reg <= bnad_per_q_stats_fill_84_92;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_92_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %93 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_84_93 = (bnad_per_q_stats_fill_80_82_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %93 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_93_reg <= bnad_per_q_stats_fill_84_93;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_93_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_94 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
bnad_per_q_stats_fill_84_94_reg <= bnad_per_q_stats_fill_84_94;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_94_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %95 = add i32 %.511, 3*/
begin
bnad_per_q_stats_fill_84_95 = (bnad_per_q_stats_fill_72__511_reg + 32'd3);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %95 = add i32 %.511, 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_95_reg <= bnad_per_q_stats_fill_84_95;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_95_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %96 = getelementptr inbounds i32* %buf, i32 %91*/
begin
bnad_per_q_stats_fill_84_96 = (arg_buf + (4 * bnad_per_q_stats_fill_84_91_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %96 = getelementptr inbounds i32* %buf, i32 %91*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_96_reg <= bnad_per_q_stats_fill_84_96;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_96_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %97 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_84_97 = (bnad_per_q_stats_fill_80_82_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %97 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_97_reg <= bnad_per_q_stats_fill_84_97;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_97_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_98 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
bnad_per_q_stats_fill_84_98_reg <= bnad_per_q_stats_fill_84_98;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_98_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %99 = add i32 %.511, 4*/
begin
bnad_per_q_stats_fill_84_99 = (bnad_per_q_stats_fill_72__511_reg + 32'd4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %99 = add i32 %.511, 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_99_reg <= bnad_per_q_stats_fill_84_99;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_99_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %100 = getelementptr inbounds i32* %buf, i32 %95*/
begin
bnad_per_q_stats_fill_84_100 = (arg_buf + (4 * bnad_per_q_stats_fill_84_95_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %100 = getelementptr inbounds i32* %buf, i32 %95*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_100_reg <= bnad_per_q_stats_fill_84_100;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_100_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %101 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_84_101 = bnad_per_q_stats_fill_80_82_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %101 = getelementptr inbounds %struct.TYPE_9__* %82, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_101_reg <= bnad_per_q_stats_fill_84_101;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_101_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_102 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
bnad_per_q_stats_fill_84_102_reg <= bnad_per_q_stats_fill_84_102;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_102_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %103 = add i32 %.511, 5*/
begin
bnad_per_q_stats_fill_84_103 = (bnad_per_q_stats_fill_72__511_reg + 32'd5);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %103 = add i32 %.511, 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_103_reg <= bnad_per_q_stats_fill_84_103;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_103_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %104 = getelementptr inbounds i32* %buf, i32 %99*/
begin
bnad_per_q_stats_fill_84_104 = (arg_buf + (4 * bnad_per_q_stats_fill_84_99_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %104 = getelementptr inbounds i32* %buf, i32 %99*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_104_reg <= bnad_per_q_stats_fill_84_104;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_104_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %105 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_84_105 = (bnad_per_q_stats_fill_75_78_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %105 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_105_reg <= bnad_per_q_stats_fill_84_105;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_105_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_106 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
bnad_per_q_stats_fill_84_106_reg <= bnad_per_q_stats_fill_84_106;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_106_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %107 = add i32 %.511, 6*/
begin
bnad_per_q_stats_fill_84_107 = (bnad_per_q_stats_fill_72__511_reg + 32'd6);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %107 = add i32 %.511, 6*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_107_reg <= bnad_per_q_stats_fill_84_107;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_107_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %108 = getelementptr inbounds i32* %buf, i32 %103*/
begin
bnad_per_q_stats_fill_84_108 = (arg_buf + (4 * bnad_per_q_stats_fill_84_103_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %108 = getelementptr inbounds i32* %buf, i32 %103*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_108_reg <= bnad_per_q_stats_fill_84_108;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_108_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %109 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_84_109 = bnad_per_q_stats_fill_75_78_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %109 = getelementptr inbounds %struct.bna_rcb* %78, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_109_reg <= bnad_per_q_stats_fill_84_109;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_109_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_84_110 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
bnad_per_q_stats_fill_84_110_reg <= bnad_per_q_stats_fill_84_110;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_110_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %111 = add i32 %.511, 7*/
begin
bnad_per_q_stats_fill_84_111 = (bnad_per_q_stats_fill_72__511_reg + 32'd7);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %111 = add i32 %.511, 7*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
bnad_per_q_stats_fill_84_111_reg <= bnad_per_q_stats_fill_84_111;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_111_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %84*/
/*   %112 = getelementptr inbounds i32* %buf, i32 %107*/
begin
bnad_per_q_stats_fill_84_112 = (arg_buf + (4 * bnad_per_q_stats_fill_84_107_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %84*/
/*   %112 = getelementptr inbounds i32* %buf, i32 %107*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_88))
begin
bnad_per_q_stats_fill_84_112_reg <= bnad_per_q_stats_fill_84_112;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_84_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_84_112_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_75_79 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge74__6 = bnad_per_q_stats_fill_72__511_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_80_83 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge74__6 = bnad_per_q_stats_fill_72__511_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_108) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge74__6 = bnad_per_q_stats_fill_84_111_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_83) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_75_79 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge74__6_reg <= bnad_per_q_stats_fill___crit_edge74__6;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74__6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74__6_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_86) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_80_83 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge74__6_reg <= bnad_per_q_stats_fill___crit_edge74__6;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74__6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74__6_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %.6 = phi i32 [ %111, %84 ], [ %.511, %75 ], [ %.511, %80 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_108) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge74__6_reg <= bnad_per_q_stats_fill___crit_edge74__6;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74__6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74__6_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %113 = getelementptr inbounds %struct.bna_rcb** %77, i32 1*/
begin
bnad_per_q_stats_fill___crit_edge74_113 = (bnad_per_q_stats_fill_75_77_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %113 = getelementptr inbounds %struct.bna_rcb** %77, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109))
begin
bnad_per_q_stats_fill___crit_edge74_113_reg <= bnad_per_q_stats_fill___crit_edge74_113;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74_113_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill___crit_edge74_114 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111))
begin
bnad_per_q_stats_fill___crit_edge74_114_reg <= bnad_per_q_stats_fill___crit_edge74_114;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74_114_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %115 = icmp eq %struct.bna_rcb* %114, null*/
begin
bnad_per_q_stats_fill___crit_edge74_115 = (bnad_per_q_stats_fill___crit_edge74_114 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %115 = icmp eq %struct.bna_rcb* %114, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111))
begin
bnad_per_q_stats_fill___crit_edge74_115_reg <= bnad_per_q_stats_fill___crit_edge74_115;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge74_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge74_115_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %116*/
/*   %117 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_116_117 = (bnad_per_q_stats_fill___crit_edge74_114_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %116*/
/*   %117 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112))
begin
bnad_per_q_stats_fill_116_117_reg <= bnad_per_q_stats_fill_116_117;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_116_117_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_116_118 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114))
begin
bnad_per_q_stats_fill_116_118_reg <= bnad_per_q_stats_fill_116_118;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_116_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_116_118_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %116*/
/*   %119 = icmp eq %struct.TYPE_9__* %118, null*/
begin
bnad_per_q_stats_fill_116_119 = (bnad_per_q_stats_fill_116_118 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %116*/
/*   %119 = icmp eq %struct.TYPE_9__* %118, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114))
begin
bnad_per_q_stats_fill_116_119_reg <= bnad_per_q_stats_fill_116_119;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_116_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_116_119_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %121 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 4*/
begin
bnad_per_q_stats_fill_120_121 = (bnad_per_q_stats_fill_116_118_reg + 16);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %121 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_121_reg <= bnad_per_q_stats_fill_120_121;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_121_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_122 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
bnad_per_q_stats_fill_120_122_reg <= bnad_per_q_stats_fill_120_122;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_122_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %123 = add nsw i32 %.6, 1*/
begin
bnad_per_q_stats_fill_120_123 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %123 = add nsw i32 %.6, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_123_reg <= bnad_per_q_stats_fill_120_123;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_123_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %124 = getelementptr inbounds i32* %buf, i32 %.6*/
begin
bnad_per_q_stats_fill_120_124 = (arg_buf + (4 * bnad_per_q_stats_fill___crit_edge74__6_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %124 = getelementptr inbounds i32* %buf, i32 %.6*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_124_reg <= bnad_per_q_stats_fill_120_124;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_124_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %125 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 3*/
begin
bnad_per_q_stats_fill_120_125 = (bnad_per_q_stats_fill_116_118_reg + 12);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %125 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_125_reg <= bnad_per_q_stats_fill_120_125;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_125_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_126 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
bnad_per_q_stats_fill_120_126_reg <= bnad_per_q_stats_fill_120_126;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_126_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %127 = add i32 %.6, 2*/
begin
bnad_per_q_stats_fill_120_127 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd2);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %127 = add i32 %.6, 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_127_reg <= bnad_per_q_stats_fill_120_127;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_127_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %128 = getelementptr inbounds i32* %buf, i32 %123*/
begin
bnad_per_q_stats_fill_120_128 = (arg_buf + (4 * bnad_per_q_stats_fill_120_123_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %128 = getelementptr inbounds i32* %buf, i32 %123*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_128_reg <= bnad_per_q_stats_fill_120_128;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_128_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %129 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_120_129 = (bnad_per_q_stats_fill_116_118_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %129 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_129_reg <= bnad_per_q_stats_fill_120_129;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_129_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_130 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
bnad_per_q_stats_fill_120_130_reg <= bnad_per_q_stats_fill_120_130;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_130_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %131 = add i32 %.6, 3*/
begin
bnad_per_q_stats_fill_120_131 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd3);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %131 = add i32 %.6, 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_131_reg <= bnad_per_q_stats_fill_120_131;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_131_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %132 = getelementptr inbounds i32* %buf, i32 %127*/
begin
bnad_per_q_stats_fill_120_132 = (arg_buf + (4 * bnad_per_q_stats_fill_120_127_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %132 = getelementptr inbounds i32* %buf, i32 %127*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_132_reg <= bnad_per_q_stats_fill_120_132;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_132_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %133 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_120_133 = (bnad_per_q_stats_fill_116_118_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %133 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_133_reg <= bnad_per_q_stats_fill_120_133;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_133_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_134 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
bnad_per_q_stats_fill_120_134_reg <= bnad_per_q_stats_fill_120_134;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_134_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %135 = add i32 %.6, 4*/
begin
bnad_per_q_stats_fill_120_135 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %135 = add i32 %.6, 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_135_reg <= bnad_per_q_stats_fill_120_135;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_135_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %136 = getelementptr inbounds i32* %buf, i32 %131*/
begin
bnad_per_q_stats_fill_120_136 = (arg_buf + (4 * bnad_per_q_stats_fill_120_131_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %136 = getelementptr inbounds i32* %buf, i32 %131*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_136_reg <= bnad_per_q_stats_fill_120_136;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_136_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %137 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_120_137 = bnad_per_q_stats_fill_116_118_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %137 = getelementptr inbounds %struct.TYPE_9__* %118, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_137_reg <= bnad_per_q_stats_fill_120_137;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_137_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_138 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
bnad_per_q_stats_fill_120_138_reg <= bnad_per_q_stats_fill_120_138;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_138_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %139 = add i32 %.6, 5*/
begin
bnad_per_q_stats_fill_120_139 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd5);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %139 = add i32 %.6, 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_139_reg <= bnad_per_q_stats_fill_120_139;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_139_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %140 = getelementptr inbounds i32* %buf, i32 %135*/
begin
bnad_per_q_stats_fill_120_140 = (arg_buf + (4 * bnad_per_q_stats_fill_120_135_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %140 = getelementptr inbounds i32* %buf, i32 %135*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_140_reg <= bnad_per_q_stats_fill_120_140;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_140_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %141 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_120_141 = (bnad_per_q_stats_fill___crit_edge74_114_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %141 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_141_reg <= bnad_per_q_stats_fill_120_141;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_141_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_142 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
bnad_per_q_stats_fill_120_142_reg <= bnad_per_q_stats_fill_120_142;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_142_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %143 = add i32 %.6, 6*/
begin
bnad_per_q_stats_fill_120_143 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd6);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %143 = add i32 %.6, 6*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_143_reg <= bnad_per_q_stats_fill_120_143;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_143_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %144 = getelementptr inbounds i32* %buf, i32 %139*/
begin
bnad_per_q_stats_fill_120_144 = (arg_buf + (4 * bnad_per_q_stats_fill_120_139_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %144 = getelementptr inbounds i32* %buf, i32 %139*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_144_reg <= bnad_per_q_stats_fill_120_144;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_144_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %145 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_120_145 = bnad_per_q_stats_fill___crit_edge74_114_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %145 = getelementptr inbounds %struct.bna_rcb* %114, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_145_reg <= bnad_per_q_stats_fill_120_145;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_145_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_120_146 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
bnad_per_q_stats_fill_120_146_reg <= bnad_per_q_stats_fill_120_146;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_146_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %147 = add i32 %.6, 7*/
begin
bnad_per_q_stats_fill_120_147 = (bnad_per_q_stats_fill___crit_edge74__6_reg + 32'd7);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %147 = add i32 %.6, 7*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
bnad_per_q_stats_fill_120_147_reg <= bnad_per_q_stats_fill_120_147;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_147_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %120*/
/*   %148 = getelementptr inbounds i32* %buf, i32 %143*/
begin
bnad_per_q_stats_fill_120_148 = (arg_buf + (4 * bnad_per_q_stats_fill_120_143_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %120*/
/*   %148 = getelementptr inbounds i32* %buf, i32 %143*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_116))
begin
bnad_per_q_stats_fill_120_148_reg <= bnad_per_q_stats_fill_120_148;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_120_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_120_148_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_72_74 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7 = bnad_per_q_stats_fill_72__511_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge74_115 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7 = bnad_per_q_stats_fill___crit_edge74__6_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_116_119 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7 = bnad_per_q_stats_fill___crit_edge74__6_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_136) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge76__7 = bnad_per_q_stats_fill_120_147_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_78) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_72_74 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7_reg <= bnad_per_q_stats_fill___crit_edge76__7;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76__7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76__7_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_111) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge74_115 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7_reg <= bnad_per_q_stats_fill___crit_edge76__7;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76__7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76__7_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_114) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_116_119 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge76__7_reg <= bnad_per_q_stats_fill___crit_edge76__7;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76__7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76__7_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %.7 = phi i32 [ %147, %120 ], [ %.511, %72 ], [ %.6, %._crit_edge74 ], [ %.6, %116 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_136) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge76__7_reg <= bnad_per_q_stats_fill___crit_edge76__7;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76__7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76__7_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill___crit_edge76_149 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139))
begin
bnad_per_q_stats_fill___crit_edge76_149_reg <= bnad_per_q_stats_fill___crit_edge76_149;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76_149_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %150 = icmp slt i32 %tmp39, %149*/
begin
bnad_per_q_stats_fill___crit_edge76_150 = ($signed(bnad_per_q_stats_fill_72_tmp39_reg) < $signed(bnad_per_q_stats_fill___crit_edge76_149));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %150 = icmp slt i32 %tmp39, %149*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_139))
begin
bnad_per_q_stats_fill___crit_edge76_150_reg <= bnad_per_q_stats_fill___crit_edge76_150;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge76_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge76_150_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142))
begin
bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre_reg <= bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge78_151 = bnad_per_q_stats_fill__lr_ph17_66_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78_151 = bnad_per_q_stats_fill__lr_ph17_66_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge78_151 = bnad_per_q_stats_fill___loopexit9_crit_edge__pre81_pre;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge78_151_reg <= bnad_per_q_stats_fill___crit_edge78_151;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78_151_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78_151_reg <= bnad_per_q_stats_fill___crit_edge78_151;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78_151_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %151 = phi i32 [ %66, %.lr.ph17 ], [ %.pre81.pre, %..loopexit9_crit_edge ], [ %66, %.preheader8 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78_151_reg <= bnad_per_q_stats_fill___crit_edge78_151;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78_151_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge78__8 = bnad_per_q_stats_fill__lr_ph17__416_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78__8 = bnad_per_q_stats_fill__lr_ph17__416_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge78__8 = bnad_per_q_stats_fill___crit_edge76__7_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_69) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__lr_ph17_68 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge78__8_reg <= bnad_per_q_stats_fill___crit_edge78__8;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78__8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78__8_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_72) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader8_70 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78__8_reg <= bnad_per_q_stats_fill___crit_edge78__8;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78__8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78__8_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %.8 = phi i32 [ %.416, %.lr.ph17 ], [ %.7, %..loopexit9_crit_edge ], [ %.416, %.preheader8 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_142) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge78__8_reg <= bnad_per_q_stats_fill___crit_edge78__8;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78__8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78__8_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %152 = icmp slt i32 %tmp45, %151*/
begin
bnad_per_q_stats_fill___crit_edge78_152 = ($signed(bnad_per_q_stats_fill__lr_ph17_tmp45_reg) < $signed(bnad_per_q_stats_fill___crit_edge78_151_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge78*/
/*   %152 = icmp slt i32 %tmp45, %151*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge78_143))
begin
bnad_per_q_stats_fill___crit_edge78_152_reg <= bnad_per_q_stats_fill___crit_edge78_152;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge78_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge78_152_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %154 = phi i32 [ %61, %.lr.ph6 ], [ %193, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153_154 = bnad_per_q_stats_fill__preheader3_61_reg;
end
/* bnad_per_q_stats_fill: %153*/
/*   %154 = phi i32 [ %61, %.lr.ph6 ], [ %193, %._crit_edge79 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1))) */
begin
bnad_per_q_stats_fill_153_154 = bnad_per_q_stats_fill___crit_edge79_193_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %154 = phi i32 [ %61, %.lr.ph6 ], [ %193, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153_154_reg <= bnad_per_q_stats_fill_153_154;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_154_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %153*/
/*   %154 = phi i32 [ %61, %.lr.ph6 ], [ %193, %._crit_edge79 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1)))
begin
bnad_per_q_stats_fill_153_154_reg <= bnad_per_q_stats_fill_153_154;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_154_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %.95 = phi i32 [ %.4.lcssa, %.lr.ph6 ], [ %.12, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153__95 = bnad_per_q_stats_fill__preheader3__4_lcssa_reg;
end
/* bnad_per_q_stats_fill: %153*/
/*   %.95 = phi i32 [ %.4.lcssa, %.lr.ph6 ], [ %.12, %._crit_edge79 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1))) */
begin
bnad_per_q_stats_fill_153__95 = bnad_per_q_stats_fill___crit_edge79__12_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %.95 = phi i32 [ %.4.lcssa, %.lr.ph6 ], [ %.12, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153__95_reg <= bnad_per_q_stats_fill_153__95;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153__95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153__95_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %153*/
/*   %.95 = phi i32 [ %.4.lcssa, %.lr.ph6 ], [ %.12, %._crit_edge79 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1)))
begin
bnad_per_q_stats_fill_153__95_reg <= bnad_per_q_stats_fill_153__95;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153__95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153__95_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %i.24 = phi i32 [ 0, %.lr.ph6 ], [ %tmp34, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153_i_24 = 32'd0;
end
/* bnad_per_q_stats_fill: %153*/
/*   %i.24 = phi i32 [ 0, %.lr.ph6 ], [ %tmp34, %._crit_edge79 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1))) */
begin
bnad_per_q_stats_fill_153_i_24 = bnad_per_q_stats_fill_153_tmp34_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %i.24 = phi i32 [ 0, %.lr.ph6 ], [ %tmp34, %._crit_edge79 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_66) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_153_i_24_reg <= bnad_per_q_stats_fill_153_i_24;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_i_24_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %153*/
/*   %i.24 = phi i32 [ 0, %.lr.ph6 ], [ %tmp34, %._crit_edge79 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill___crit_edge79_194 == 1'd1)))
begin
bnad_per_q_stats_fill_153_i_24_reg <= bnad_per_q_stats_fill_153_i_24;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_i_24_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %scevgep31 = getelementptr %struct.TYPE_7__* %64, i32 %i.24, i32 1*/
begin
bnad_per_q_stats_fill_153_scevgep31 = (bnad_per_q_stats_fill__lr_ph6_64_reg + ((8 * bnad_per_q_stats_fill_153_i_24_reg) + 4));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %scevgep31 = getelementptr %struct.TYPE_7__* %64, i32 %i.24, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
bnad_per_q_stats_fill_153_scevgep31_reg <= bnad_per_q_stats_fill_153_scevgep31;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_scevgep31_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %tmp34 = add i32 %i.24, 1*/
begin
bnad_per_q_stats_fill_153_tmp34 = (bnad_per_q_stats_fill_153_i_24_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %tmp34 = add i32 %i.24, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
bnad_per_q_stats_fill_153_tmp34_reg <= bnad_per_q_stats_fill_153_tmp34;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_tmp34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_tmp34_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_153_155 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146))
begin
bnad_per_q_stats_fill_153_155_reg <= bnad_per_q_stats_fill_153_155;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_155_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %153*/
/*   %156 = icmp eq i32 %155, 0*/
begin
bnad_per_q_stats_fill_153_156 = (bnad_per_q_stats_fill_153_155 == 32'd0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %153*/
/*   %156 = icmp eq i32 %155, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146))
begin
bnad_per_q_stats_fill_153_156_reg <= bnad_per_q_stats_fill_153_156;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_153_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_153_156_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill__preheader_157 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149))
begin
bnad_per_q_stats_fill__preheader_157_reg <= bnad_per_q_stats_fill__preheader_157;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader_157_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.preheader*/
/*   %158 = icmp sgt i32 %157, 0*/
begin
bnad_per_q_stats_fill__preheader_158 = ($signed(bnad_per_q_stats_fill__preheader_157) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.preheader*/
/*   %158 = icmp sgt i32 %157, 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149))
begin
bnad_per_q_stats_fill__preheader_158_reg <= bnad_per_q_stats_fill__preheader_158;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__preheader_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__preheader_158_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %scevgep3233 = getelementptr inbounds %struct.TYPE_7__* %64, i32 %i.24, i32 0*/
begin
bnad_per_q_stats_fill__lr_ph_scevgep3233 = (bnad_per_q_stats_fill__lr_ph6_64_reg + (8 * bnad_per_q_stats_fill_153_i_24_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %scevgep3233 = getelementptr inbounds %struct.TYPE_7__* %64, i32 %i.24, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150))
begin
bnad_per_q_stats_fill__lr_ph_scevgep3233_reg <= bnad_per_q_stats_fill__lr_ph_scevgep3233;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph_scevgep3233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph_scevgep3233_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill__lr_ph_159 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152))
begin
bnad_per_q_stats_fill__lr_ph_159_reg <= bnad_per_q_stats_fill__lr_ph_159;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill__lr_ph_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill__lr_ph_159_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %161 = phi i32 [ %157, %.lr.ph ], [ %191, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160_161 = bnad_per_q_stats_fill__preheader_157_reg;
end
/* bnad_per_q_stats_fill: %160*/
/*   %161 = phi i32 [ %157, %.lr.ph ], [ %191, %190 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1))) */
begin
bnad_per_q_stats_fill_160_161 = bnad_per_q_stats_fill_190_191_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %161 = phi i32 [ %157, %.lr.ph ], [ %191, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160_161_reg <= bnad_per_q_stats_fill_160_161;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_161_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %160*/
/*   %161 = phi i32 [ %157, %.lr.ph ], [ %191, %190 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1)))
begin
bnad_per_q_stats_fill_160_161_reg <= bnad_per_q_stats_fill_160_161;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_161_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %.102 = phi i32 [ %.95, %.lr.ph ], [ %.11, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160__102 = bnad_per_q_stats_fill_153__95_reg;
end
/* bnad_per_q_stats_fill: %160*/
/*   %.102 = phi i32 [ %.95, %.lr.ph ], [ %.11, %190 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1))) */
begin
bnad_per_q_stats_fill_160__102 = bnad_per_q_stats_fill_190__11_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %.102 = phi i32 [ %.95, %.lr.ph ], [ %.11, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160__102_reg <= bnad_per_q_stats_fill_160__102;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160__102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160__102_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %160*/
/*   %.102 = phi i32 [ %.95, %.lr.ph ], [ %.11, %190 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1)))
begin
bnad_per_q_stats_fill_160__102_reg <= bnad_per_q_stats_fill_160__102;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160__102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160__102_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %j.21 = phi i32 [ 0, %.lr.ph ], [ %tmp, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160_j_21 = 32'd0;
end
/* bnad_per_q_stats_fill: %160*/
/*   %j.21 = phi i32 [ 0, %.lr.ph ], [ %tmp, %190 ]*/
else /* if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1))) */
begin
bnad_per_q_stats_fill_160_j_21 = bnad_per_q_stats_fill_160_tmp_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %j.21 = phi i32 [ 0, %.lr.ph ], [ %tmp, %190 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_152) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_160_j_21_reg <= bnad_per_q_stats_fill_160_j_21;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_j_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_j_21_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %160*/
/*   %j.21 = phi i32 [ 0, %.lr.ph ], [ %tmp, %190 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_190_192 == 1'd1)))
begin
bnad_per_q_stats_fill_160_j_21_reg <= bnad_per_q_stats_fill_160_j_21;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_j_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_j_21_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %scevgep = getelementptr %struct.bna_tcb** %159, i32 %j.21*/
begin
bnad_per_q_stats_fill_160_scevgep = (bnad_per_q_stats_fill__lr_ph_159_reg + (4 * bnad_per_q_stats_fill_160_j_21_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %scevgep = getelementptr %struct.bna_tcb** %159, i32 %j.21*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
bnad_per_q_stats_fill_160_scevgep_reg <= bnad_per_q_stats_fill_160_scevgep;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %tmp = add i32 %j.21, 1*/
begin
bnad_per_q_stats_fill_160_tmp = (bnad_per_q_stats_fill_160_j_21_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %tmp = add i32 %j.21, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
bnad_per_q_stats_fill_160_tmp_reg <= bnad_per_q_stats_fill_160_tmp;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_tmp_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_160_162 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155))
begin
bnad_per_q_stats_fill_160_162_reg <= bnad_per_q_stats_fill_160_162;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_162_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %160*/
/*   %163 = icmp eq %struct.bna_tcb* %162, null*/
begin
bnad_per_q_stats_fill_160_163 = (bnad_per_q_stats_fill_160_162 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %160*/
/*   %163 = icmp eq %struct.bna_tcb* %162, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155))
begin
bnad_per_q_stats_fill_160_163_reg <= bnad_per_q_stats_fill_160_163;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_160_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_160_163_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %164*/
/*   %165 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 3*/
begin
bnad_per_q_stats_fill_164_165 = (bnad_per_q_stats_fill_160_162_reg + 12);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %164*/
/*   %165 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156))
begin
bnad_per_q_stats_fill_164_165_reg <= bnad_per_q_stats_fill_164_165;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_164_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_164_165_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_164_166 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158))
begin
bnad_per_q_stats_fill_164_166_reg <= bnad_per_q_stats_fill_164_166;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_164_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_164_166_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %164*/
/*   %167 = icmp eq %struct.TYPE_8__* %166, null*/
begin
bnad_per_q_stats_fill_164_167 = (bnad_per_q_stats_fill_164_166 == 0);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %164*/
/*   %167 = icmp eq %struct.TYPE_8__* %166, null*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158))
begin
bnad_per_q_stats_fill_164_167_reg <= bnad_per_q_stats_fill_164_167;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_164_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_164_167_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %169 = getelementptr inbounds %struct.TYPE_8__* %166, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_168_169 = (bnad_per_q_stats_fill_164_166_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %169 = getelementptr inbounds %struct.TYPE_8__* %166, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_169_reg <= bnad_per_q_stats_fill_168_169;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_169_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168_170 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
bnad_per_q_stats_fill_168_170_reg <= bnad_per_q_stats_fill_168_170;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_170_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %171 = add nsw i32 %.102, 1*/
begin
bnad_per_q_stats_fill_168_171 = (bnad_per_q_stats_fill_160__102_reg + 32'd1);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %171 = add nsw i32 %.102, 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_171_reg <= bnad_per_q_stats_fill_168_171;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_171_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %172 = getelementptr inbounds i32* %buf, i32 %.102*/
begin
bnad_per_q_stats_fill_168_172 = (arg_buf + (4 * bnad_per_q_stats_fill_160__102_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %172 = getelementptr inbounds i32* %buf, i32 %.102*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_172_reg <= bnad_per_q_stats_fill_168_172;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_172_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %173 = getelementptr inbounds %struct.TYPE_8__* %166, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_168_173 = bnad_per_q_stats_fill_164_166_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %173 = getelementptr inbounds %struct.TYPE_8__* %166, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_173_reg <= bnad_per_q_stats_fill_168_173;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_173_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168_174 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
bnad_per_q_stats_fill_168_174_reg <= bnad_per_q_stats_fill_168_174;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_174_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %175 = add i32 %.102, 2*/
begin
bnad_per_q_stats_fill_168_175 = (bnad_per_q_stats_fill_160__102_reg + 32'd2);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %175 = add i32 %.102, 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_175_reg <= bnad_per_q_stats_fill_168_175;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_175_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %176 = getelementptr inbounds i32* %buf, i32 %171*/
begin
bnad_per_q_stats_fill_168_176 = (arg_buf + (4 * bnad_per_q_stats_fill_168_171_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %176 = getelementptr inbounds i32* %buf, i32 %171*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160))
begin
bnad_per_q_stats_fill_168_176_reg <= bnad_per_q_stats_fill_168_176;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_176_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %177 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 2*/
begin
bnad_per_q_stats_fill_168_177 = (bnad_per_q_stats_fill_160_162_reg + 8);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %177 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 2*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_177_reg <= bnad_per_q_stats_fill_168_177;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_177_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168_178 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
bnad_per_q_stats_fill_168_178_reg <= bnad_per_q_stats_fill_168_178;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_178_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %179 = add i32 %.102, 3*/
begin
bnad_per_q_stats_fill_168_179 = (bnad_per_q_stats_fill_160__102_reg + 32'd3);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %179 = add i32 %.102, 3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_179_reg <= bnad_per_q_stats_fill_168_179;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_179_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %180 = getelementptr inbounds i32* %buf, i32 %175*/
begin
bnad_per_q_stats_fill_168_180 = (arg_buf + (4 * bnad_per_q_stats_fill_168_175_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %180 = getelementptr inbounds i32* %buf, i32 %175*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160))
begin
bnad_per_q_stats_fill_168_180_reg <= bnad_per_q_stats_fill_168_180;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_180_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %181 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 1*/
begin
bnad_per_q_stats_fill_168_181 = (bnad_per_q_stats_fill_160_162_reg + 4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %181 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 1*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_181_reg <= bnad_per_q_stats_fill_168_181;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_181_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168_182 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
bnad_per_q_stats_fill_168_182_reg <= bnad_per_q_stats_fill_168_182;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_182_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %183 = add i32 %.102, 4*/
begin
bnad_per_q_stats_fill_168_183 = (bnad_per_q_stats_fill_160__102_reg + 32'd4);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %183 = add i32 %.102, 4*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_183_reg <= bnad_per_q_stats_fill_168_183;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_183_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %184 = getelementptr inbounds i32* %buf, i32 %179*/
begin
bnad_per_q_stats_fill_168_184 = (arg_buf + (4 * bnad_per_q_stats_fill_168_179_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %184 = getelementptr inbounds i32* %buf, i32 %179*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160))
begin
bnad_per_q_stats_fill_168_184_reg <= bnad_per_q_stats_fill_168_184;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_184_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %185 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 0*/
begin
bnad_per_q_stats_fill_168_185 = bnad_per_q_stats_fill_160_162_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %185 = getelementptr inbounds %struct.bna_tcb* %162, i32 0, i32 0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_185_reg <= bnad_per_q_stats_fill_168_185;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_185_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
begin
bnad_per_q_stats_fill_168_186 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173))
begin
bnad_per_q_stats_fill_168_186_reg <= bnad_per_q_stats_fill_168_186;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_186_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168_187 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
bnad_per_q_stats_fill_168_187_reg <= bnad_per_q_stats_fill_168_187;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_187_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %188 = add i32 %.102, 5*/
begin
bnad_per_q_stats_fill_168_188 = (bnad_per_q_stats_fill_160__102_reg + 32'd5);
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %188 = add i32 %.102, 5*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
bnad_per_q_stats_fill_168_188_reg <= bnad_per_q_stats_fill_168_188;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_188_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %189 = getelementptr inbounds i32* %buf, i32 %183*/
begin
bnad_per_q_stats_fill_168_189 = (arg_buf + (4 * bnad_per_q_stats_fill_168_183_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %189 = getelementptr inbounds i32* %buf, i32 %183*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_160))
begin
bnad_per_q_stats_fill_168_189_reg <= bnad_per_q_stats_fill_168_189;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168_189_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill_168__pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178))
begin
bnad_per_q_stats_fill_168__pre_reg <= bnad_per_q_stats_fill_168__pre;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_168__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_168__pre_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd1)))
begin
bnad_per_q_stats_fill_190_191 = bnad_per_q_stats_fill_160_161_reg;
end
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd1)))
begin
bnad_per_q_stats_fill_190_191 = bnad_per_q_stats_fill_160_161_reg;
end
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill_190_191 = bnad_per_q_stats_fill_168__pre;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd1)))
begin
bnad_per_q_stats_fill_190_191_reg <= bnad_per_q_stats_fill_190_191;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190_191_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd1)))
begin
bnad_per_q_stats_fill_190_191_reg <= bnad_per_q_stats_fill_190_191;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190_191_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %190*/
/*   %191 = phi i32 [ %.pre, %168 ], [ %161, %164 ], [ %161, %160 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_190_191_reg <= bnad_per_q_stats_fill_190_191;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190_191_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd1)))
begin
bnad_per_q_stats_fill_190__11 = bnad_per_q_stats_fill_160__102_reg;
end
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd1)))
begin
bnad_per_q_stats_fill_190__11 = bnad_per_q_stats_fill_160__102_reg;
end
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill_190__11 = bnad_per_q_stats_fill_168_188_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_155) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_160_163 == 1'd1)))
begin
bnad_per_q_stats_fill_190__11_reg <= bnad_per_q_stats_fill_190__11;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190__11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190__11_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_158) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_164_167 == 1'd1)))
begin
bnad_per_q_stats_fill_190__11_reg <= bnad_per_q_stats_fill_190__11;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190__11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190__11_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %190*/
/*   %.11 = phi i32 [ %188, %168 ], [ %.102, %164 ], [ %.102, %160 ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_178) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill_190__11_reg <= bnad_per_q_stats_fill_190__11;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190__11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190__11_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %190*/
/*   %192 = icmp slt i32 %tmp, %191*/
begin
bnad_per_q_stats_fill_190_192 = ($signed(bnad_per_q_stats_fill_160_tmp_reg) < $signed(bnad_per_q_stats_fill_190_191_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %190*/
/*   %192 = icmp slt i32 %tmp, %191*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_190_179))
begin
bnad_per_q_stats_fill_190_192_reg <= bnad_per_q_stats_fill_190_192;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill_190_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_190_192_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
begin
bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182))
begin
bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre_reg <= bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge79_193 = bnad_per_q_stats_fill_153_154_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79_193 = bnad_per_q_stats_fill_153_154_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge79_193 = bnad_per_q_stats_fill___loopexit_crit_edge__pre80_pre;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge79_193_reg <= bnad_per_q_stats_fill___crit_edge79_193;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79_193_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79_193_reg <= bnad_per_q_stats_fill___crit_edge79_193;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79_193_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %193 = phi i32 [ %154, %153 ], [ %.pre80.pre, %..loopexit_crit_edge ], [ %154, %.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79_193_reg <= bnad_per_q_stats_fill___crit_edge79_193;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79_193_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge79__12 = bnad_per_q_stats_fill_153__95_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
else if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79__12 = bnad_per_q_stats_fill_153__95_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge79__12 = bnad_per_q_stats_fill_190__11_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_146) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_153_156 == 1'd1)))
begin
bnad_per_q_stats_fill___crit_edge79__12_reg <= bnad_per_q_stats_fill___crit_edge79__12;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79__12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79__12_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_149) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader_158 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79__12_reg <= bnad_per_q_stats_fill___crit_edge79__12;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79__12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79__12_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %.12 = phi i32 [ %.95, %153 ], [ %.11, %..loopexit_crit_edge ], [ %.95, %.preheader ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_182) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge79__12_reg <= bnad_per_q_stats_fill___crit_edge79__12;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79__12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79__12_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %194 = icmp slt i32 %tmp34, %193*/
begin
bnad_per_q_stats_fill___crit_edge79_194 = ($signed(bnad_per_q_stats_fill_153_tmp34_reg) < $signed(bnad_per_q_stats_fill___crit_edge79_193_reg));
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge79*/
/*   %194 = icmp slt i32 %tmp34, %193*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge79_183))
begin
bnad_per_q_stats_fill___crit_edge79_194_reg <= bnad_per_q_stats_fill___crit_edge79_194;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge79_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge79_194_reg"); $finish; end
end
end
always @(*) begin
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   %.9.lcssa = phi i32 [ %.4.lcssa, %.preheader3 ], [ %.12, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader3_62 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge__9_lcssa = bnad_per_q_stats_fill__preheader3__4_lcssa_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   %.9.lcssa = phi i32 [ %.4.lcssa, %.preheader3 ], [ %.12, %._crit_edge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) & (memory_controller_waitrequest == 1'd0))) */
begin
bnad_per_q_stats_fill___crit_edge__9_lcssa = bnad_per_q_stats_fill___crit_edge79__12_reg;
end
end
always @(posedge clk) begin
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   %.9.lcssa = phi i32 [ %.4.lcssa, %.preheader3 ], [ %.12, %._crit_edge.loopexit ]*/
if ((((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_63) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill__preheader3_62 == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge__9_lcssa_reg <= bnad_per_q_stats_fill___crit_edge__9_lcssa;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge__9_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge__9_lcssa_reg"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   %.9.lcssa = phi i32 [ %.4.lcssa, %.preheader3 ], [ %.12, %._crit_edge.loopexit ]*/
if (((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_loopexit_184) & (memory_controller_waitrequest == 1'd0)))
begin
bnad_per_q_stats_fill___crit_edge__9_lcssa_reg <= bnad_per_q_stats_fill___crit_edge__9_lcssa;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge__9_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill___crit_edge__9_lcssa_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   ret i32 %.9.lcssa*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %30, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %46, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %52, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %90, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %98, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %106, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %122, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %130, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %138, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %146, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %170, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %178, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171))
begin
memory_controller_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1))
begin
memory_controller_address_a = bnad_per_q_stats_fill_0_1;
end
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
memory_controller_address_a = bnad_per_q_stats_fill_8_scevgep56;
end
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph28_6_reg;
end
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph23_scevgep5758;
end
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
memory_controller_address_a = bnad_per_q_stats_fill_15_scevgep4647;
end
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21))
begin
memory_controller_address_a = bnad_per_q_stats_fill_19_20;
end
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23))
begin
memory_controller_address_a = bnad_per_q_stats_fill_19_21;
end
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_29;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %30, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_32_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_scevgep51_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_scevgep52_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %46, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_48_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_scevgep54_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %52, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
memory_controller_address_a = bnad_per_q_stats_fill_28_54_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph28_6_reg;
end
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56))
begin
memory_controller_address_a = bnad_per_q_stats_fill_0_1_reg;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph17_scevgep40;
end
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph28_6_reg;
end
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
memory_controller_address_a = bnad_per_q_stats_fill_72_scevgep3536;
end
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81))
begin
memory_controller_address_a = bnad_per_q_stats_fill_75_77;
end
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_85;
end
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_89_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %90, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_92_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_97_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %98, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_100_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_105_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %106, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
memory_controller_address_a = bnad_per_q_stats_fill_84_108_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109))
begin
memory_controller_address_a = bnad_per_q_stats_fill___crit_edge74_113;
end
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112))
begin
memory_controller_address_a = bnad_per_q_stats_fill_116_117;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %122, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_124_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_129_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %130, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_132_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_137_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %138, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_140_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_145_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %146, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
memory_controller_address_a = bnad_per_q_stats_fill_120_148_reg;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph28_6_reg;
end
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140))
begin
memory_controller_address_a = bnad_per_q_stats_fill_0_1_reg;
end
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150))
begin
memory_controller_address_a = bnad_per_q_stats_fill__lr_ph_scevgep3233;
end
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156))
begin
memory_controller_address_a = bnad_per_q_stats_fill_164_165;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %170, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
memory_controller_address_a = bnad_per_q_stats_fill_168_172_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165))
begin
memory_controller_address_a = bnad_per_q_stats_fill_168_177_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %178, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
memory_controller_address_a = bnad_per_q_stats_fill_168_180_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171))
begin
memory_controller_address_a = bnad_per_q_stats_fill_168_185_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173))
begin
memory_controller_address_a = bnad_per_q_stats_fill_168_186;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %30, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %46, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %52, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %90, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %98, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %106, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %122, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %130, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %138, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %146, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %170, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %178, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
memory_controller_write_enable_a = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171))
begin
memory_controller_write_enable_a = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %30, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_in_a = bnad_per_q_stats_fill_28_30;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %46, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
memory_controller_in_a = bnad_per_q_stats_fill_28_46;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %52, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
memory_controller_in_a = bnad_per_q_stats_fill_28_52;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %90, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
memory_controller_in_a = bnad_per_q_stats_fill_84_90;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %98, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
memory_controller_in_a = bnad_per_q_stats_fill_84_98;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %106, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
memory_controller_in_a = bnad_per_q_stats_fill_84_106;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %122, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
memory_controller_in_a = bnad_per_q_stats_fill_120_122;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %130, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
memory_controller_in_a = bnad_per_q_stats_fill_120_130;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %138, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
memory_controller_in_a = bnad_per_q_stats_fill_120_138;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %146, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
memory_controller_in_a = bnad_per_q_stats_fill_120_146;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %170, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
memory_controller_in_a = bnad_per_q_stats_fill_168_170;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %178, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
memory_controller_in_a = bnad_per_q_stats_fill_168_178;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* bnad_per_q_stats_fill: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %8*/
/*   %10 = load i32* %scevgep56, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_8_9))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %.preheader19*/
/*   %12 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader19_12))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %.lr.ph23*/
/*   %14 = load %struct.TYPE_11__** %scevgep5758, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph23_15))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %15*/
/*   %17 = load %struct.TYPE_10__** %scevgep4647, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_15_18))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %19*/
/*   %21 = load %struct.bna_rcb*** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_21))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %19*/
/*   %22 = load %struct.bna_rcb** %21, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_19_23))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %30 = load i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_29))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %30, i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %43 = load i32* %scevgep51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_40))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %46 = load i32* %scevgep52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_43))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %46, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_45))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %52 = load i32* %scevgep54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_49))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %52, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_51))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %.pre72 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_52))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %..loopexit20_crit_edge*/
/*   %.pre82.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit20_crit_edge_56))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %.lr.ph17*/
/*   %67 = load i32* %scevgep40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph17_67))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %.preheader8*/
/*   %69 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader8_70))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %72*/
/*   %73 = load %struct.TYPE_10__** %scevgep3536, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_72_76))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %75*/
/*   %78 = load %struct.bna_rcb** %77, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_81))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %86 = load i32* %85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_87))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %90 = load i32* %89, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_90))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %90, i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_92))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %98 = load i32* %97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_96))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %98, i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_98))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_102))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %106, i32* %108, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_104))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %._crit_edge74*/
/*   %114 = load %struct.bna_rcb** %113, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge74_109))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %116*/
/*   %118 = load %struct.TYPE_9__** %117, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_116_112))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %122, i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_117))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %130 = load i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_121))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %130, i32* %132, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_123))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %138 = load i32* %137, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_127))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %138, i32* %140, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_129))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_133))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %146, i32* %148, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_135))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %._crit_edge76*/
/*   %149 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge76_137))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %..loopexit9_crit_edge*/
/*   %.pre81.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit9_crit_edge_140))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %.lr.ph*/
/*   %159 = load %struct.bna_tcb*** %scevgep3233, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph_150))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %164*/
/*   %166 = load %struct.TYPE_8__** %165, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_164_156))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %170, i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_161))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %178 = load i32* %177, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_165))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %178, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_167))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %186 = load i32** %185, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_171))
begin
memory_controller_size_a = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %187 = load i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_173))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %37, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %40, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %43, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %49, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %86, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %94, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %110, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %126, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %134, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %142, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %174, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %182, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %187, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176))
begin
memory_controller_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
memory_controller_address_b = bnad_per_q_stats_fill__lr_ph28_4;
end
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26))
begin
memory_controller_address_b = bnad_per_q_stats_fill_24_25;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_34_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_35_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_36;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %37, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_39_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_scevgep50_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %40, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_42_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %43, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_45_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_scevgep53_reg;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %49, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
memory_controller_address_b = bnad_per_q_stats_fill_28_51_reg;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61))
begin
memory_controller_address_b = bnad_per_q_stats_fill__preheader3_60;
end
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
memory_controller_address_b = bnad_per_q_stats_fill__lr_ph6_63;
end
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73))
begin
memory_controller_address_b = bnad_per_q_stats_fill__lr_ph12_scevgep4142;
end
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79))
begin
memory_controller_address_b = bnad_per_q_stats_fill_75_76;
end
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84))
begin
memory_controller_address_b = bnad_per_q_stats_fill_80_81;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %86, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_88_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_93_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %94, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_96_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_101_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_104_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_109_reg;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %110, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
memory_controller_address_b = bnad_per_q_stats_fill_84_112_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_121;
end
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_125_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %126, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_128_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_133_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %134, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_136_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_141_reg;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %142, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
memory_controller_address_b = bnad_per_q_stats_fill_120_144_reg;
end
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
memory_controller_address_b = bnad_per_q_stats_fill_153_scevgep31;
end
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147))
begin
memory_controller_address_b = bnad_per_q_stats_fill__lr_ph6_65_reg;
end
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
memory_controller_address_b = bnad_per_q_stats_fill_160_scevgep;
end
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_169;
end
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_173_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %174, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_176_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_181_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %182, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_184_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %187, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
memory_controller_address_b = bnad_per_q_stats_fill_168_189_reg;
end
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176))
begin
memory_controller_address_b = bnad_per_q_stats_fill__lr_ph6_65_reg;
end
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180))
begin
memory_controller_address_b = bnad_per_q_stats_fill__preheader3_60_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %37, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %40, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %43, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %49, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %86, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %94, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %110, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %126, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %134, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %142, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %174, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %182, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %187, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
memory_controller_write_enable_b = 1'd1;
end
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176))
begin
memory_controller_write_enable_b = 1'd0;
end
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_in_b = 32'd0;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %37, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
memory_controller_in_b = bnad_per_q_stats_fill_28_37;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %40, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
memory_controller_in_b = bnad_per_q_stats_fill_28_40;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %43, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
memory_controller_in_b = bnad_per_q_stats_fill_28_43;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %49, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
memory_controller_in_b = bnad_per_q_stats_fill_28_49;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %86, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
memory_controller_in_b = bnad_per_q_stats_fill_84_86;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %94, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
memory_controller_in_b = bnad_per_q_stats_fill_84_94;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
memory_controller_in_b = bnad_per_q_stats_fill_84_102;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %110, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
memory_controller_in_b = bnad_per_q_stats_fill_84_110;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %126, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
memory_controller_in_b = bnad_per_q_stats_fill_120_126;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %134, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
memory_controller_in_b = bnad_per_q_stats_fill_120_134;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %142, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
memory_controller_in_b = bnad_per_q_stats_fill_120_142;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %174, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
memory_controller_in_b = bnad_per_q_stats_fill_168_174;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %182, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
memory_controller_in_b = bnad_per_q_stats_fill_168_182;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %187, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
memory_controller_in_b = bnad_per_q_stats_fill_168_187;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* bnad_per_q_stats_fill: %.lr.ph28*/
/*   %5 = load %struct.TYPE_12__** %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph28_4))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %24*/
/*   %26 = load %struct.TYPE_9__** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_24_26))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 0, i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_31))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %36 = load i32** %35, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_32))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_34))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %37, i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_36))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %40 = load i32* %scevgep50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_37))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %40, i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_39))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %43, i32* %45, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_42))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   %49 = load i32* %scevgep53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_46))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %28*/
/*   store i32 %49, i32* %51, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_28_48))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %.preheader3*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader3_61))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %.lr.ph6*/
/*   %64 = load %struct.TYPE_7__** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph6_64))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %.lr.ph12*/
/*   %71 = load %struct.TYPE_11__** %scevgep4142, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__lr_ph12_73))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %75*/
/*   %77 = load %struct.bna_rcb*** %76, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_75_79))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %80*/
/*   %82 = load %struct.TYPE_9__** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_80_84))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %86, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_89))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %94 = load i32* %93, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_93))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %94, i32* %96, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_95))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %102 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_99))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %102, i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_101))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_105))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %84*/
/*   store i32 %110, i32* %112, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_84_107))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %122 = load i32* %121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_115))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %126 = load i32* %125, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_118))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %126, i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_120))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %134 = load i32* %133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_124))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %134, i32* %136, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_126))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   %142 = load i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_130))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %120*/
/*   store i32 %142, i32* %144, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_120_132))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %153*/
/*   %155 = load i32* %scevgep31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_153_144))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %.preheader*/
/*   %157 = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB__preheader_147))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %160*/
/*   %162 = load %struct.bna_tcb** %scevgep, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_160_153))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_159))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %174 = load i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_162))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %174, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_164))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %182 = load i32* %181, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_168))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %182, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_170))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   store i32 %187, i32* %189, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_175))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %168*/
/*   %.pre = load i32* %65, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB_168_176))
begin
memory_controller_size_b = 2'd2;
end
/* bnad_per_q_stats_fill: %..loopexit_crit_edge*/
/*   %.pre80.pre = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___loopexit_crit_edge_180))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* bnad_per_q_stats_fill: %._crit_edge*/
/*   ret i32 %.9.lcssa*/
if ((cur_state == LEGUP_F_bnad_per_q_stats_fill_BB___crit_edge_185))
begin
return_val <= bnad_per_q_stats_fill___crit_edge__9_lcssa_reg;
if (reset == 1'b0 && ^(bnad_per_q_stats_fill___crit_edge__9_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  bnad_per_q_stats_fill_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_arg_bnad;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_arg_buf;
reg [31:0] bnad_per_q_stats_fill_arg_bi;
wire  bnad_per_q_stats_fill_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_address_a;
wire  bnad_per_q_stats_fill_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_out_a;
wire [1:0] bnad_per_q_stats_fill_memory_controller_size_a;
wire  bnad_per_q_stats_fill_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_address_b;
wire  bnad_per_q_stats_fill_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] bnad_per_q_stats_fill_memory_controller_out_b;
wire [1:0] bnad_per_q_stats_fill_memory_controller_size_b;
reg  bnad_per_q_stats_fill_memory_controller_waitrequest;
wire  bnad_per_q_stats_fill_finish;
reg  bnad_per_q_stats_fill_finish_final;
wire [31:0] bnad_per_q_stats_fill_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


bnad_per_q_stats_fill bnad_per_q_stats_fill_inst (
	.memory_controller_enable_a (bnad_per_q_stats_fill_memory_controller_enable_a),
	.memory_controller_address_a (bnad_per_q_stats_fill_memory_controller_address_a),
	.memory_controller_write_enable_a (bnad_per_q_stats_fill_memory_controller_write_enable_a),
	.memory_controller_in_a (bnad_per_q_stats_fill_memory_controller_in_a),
	.memory_controller_size_a (bnad_per_q_stats_fill_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (bnad_per_q_stats_fill_memory_controller_enable_b),
	.memory_controller_address_b (bnad_per_q_stats_fill_memory_controller_address_b),
	.memory_controller_write_enable_b (bnad_per_q_stats_fill_memory_controller_write_enable_b),
	.memory_controller_in_b (bnad_per_q_stats_fill_memory_controller_in_b),
	.memory_controller_size_b (bnad_per_q_stats_fill_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (bnad_per_q_stats_fill_start),
	.finish (bnad_per_q_stats_fill_finish),
	.return_val (bnad_per_q_stats_fill_return_val),
	.arg_bnad (bnad_per_q_stats_fill_arg_bnad),
	.arg_buf (bnad_per_q_stats_fill_arg_buf),
	.arg_bi (bnad_per_q_stats_fill_arg_bi)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (bnad_per_q_stats_fill_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
begin
main_0_1 = bnad_per_q_stats_fill_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
bnad_per_q_stats_fill_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
bnad_per_q_stats_fill_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
bnad_per_q_stats_fill_arg_bnad <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_arg_bnad"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
bnad_per_q_stats_fill_arg_buf <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_arg_buf"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
bnad_per_q_stats_fill_arg_bi <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to bnad_per_q_stats_fill_arg_bi"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
begin
bnad_per_q_stats_fill_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
begin
bnad_per_q_stats_fill_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
bnad_per_q_stats_fill_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
bnad_per_q_stats_fill_finish_final = bnad_per_q_stats_fill_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = bnad_per_q_stats_fill_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = bnad_per_q_stats_fill_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = bnad_per_q_stats_fill_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = bnad_per_q_stats_fill_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = bnad_per_q_stats_fill_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = bnad_per_q_stats_fill_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = bnad_per_q_stats_fill_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = bnad_per_q_stats_fill_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = bnad_per_q_stats_fill_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = bnad_per_q_stats_fill_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = bnad_per_q_stats_fill_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = bnad_per_q_stats_fill_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @bnad_per_q_stats_fill(%struct.bnad* undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = bnad_per_q_stats_fill_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
