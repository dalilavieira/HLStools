//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:49 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module s_zero
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_cur_diff,
	arg_band
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_s_zero_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_s_zero_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_s_zero_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_s_zero_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_s_zero_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_s_zero_BB_0_6 = 7'd6;
parameter [6:0] LEGUP_F_s_zero_BB_12_7 = 7'd7;
parameter [6:0] LEGUP_F_s_zero_BB_12_8 = 7'd8;
parameter [6:0] LEGUP_F_s_zero_BB_12_9 = 7'd9;
parameter [6:0] LEGUP_F_s_zero_BB_12_10 = 7'd10;
parameter [6:0] LEGUP_F_s_zero_BB_12_11 = 7'd11;
parameter [6:0] LEGUP_F_s_zero_BB_12_12 = 7'd12;
parameter [6:0] LEGUP_F_s_zero_BB_12_13 = 7'd13;
parameter [6:0] LEGUP_F_s_zero_BB_12_14 = 7'd14;
parameter [6:0] LEGUP_F_s_zero_BB_12_15 = 7'd15;
parameter [6:0] LEGUP_F_s_zero_BB_12_16 = 7'd16;
parameter [6:0] LEGUP_F_s_zero_BB_12_17 = 7'd17;
parameter [6:0] LEGUP_F_s_zero_BB_12_18 = 7'd18;
parameter [6:0] LEGUP_F_s_zero_BB_12_19 = 7'd19;
parameter [6:0] LEGUP_F_s_zero_BB_12_20 = 7'd20;
parameter [6:0] LEGUP_F_s_zero_BB_12_21 = 7'd21;
parameter [6:0] LEGUP_F_s_zero_BB_12_22 = 7'd22;
parameter [6:0] LEGUP_F_s_zero_BB_12_23 = 7'd23;
parameter [6:0] LEGUP_F_s_zero_BB_12_24 = 7'd24;
parameter [6:0] LEGUP_F_s_zero_BB_12_25 = 7'd25;
parameter [6:0] LEGUP_F_s_zero_BB_12_26 = 7'd26;
parameter [6:0] LEGUP_F_s_zero_BB_12_27 = 7'd27;
parameter [6:0] LEGUP_F_s_zero_BB_12_28 = 7'd28;
parameter [6:0] LEGUP_F_s_zero_BB_12_29 = 7'd29;
parameter [6:0] LEGUP_F_s_zero_BB_12_30 = 7'd30;
parameter [6:0] LEGUP_F_s_zero_BB_12_31 = 7'd31;
parameter [6:0] LEGUP_F_s_zero_BB_12_32 = 7'd32;
parameter [6:0] LEGUP_F_s_zero_BB_12_33 = 7'd33;
parameter [6:0] LEGUP_F_s_zero_BB_12_34 = 7'd34;
parameter [6:0] LEGUP_F_s_zero_BB_12_35 = 7'd35;
parameter [6:0] LEGUP_F_s_zero_BB_12_36 = 7'd36;
parameter [6:0] LEGUP_F_s_zero_BB_12_37 = 7'd37;
parameter [6:0] LEGUP_F_s_zero_BB_12_38 = 7'd38;
parameter [6:0] LEGUP_F_s_zero_BB_12_39 = 7'd39;
parameter [6:0] LEGUP_F_s_zero_BB_100_40 = 7'd40;
parameter [6:0] LEGUP_F_s_zero_BB_100_41 = 7'd41;
parameter [6:0] LEGUP_F_s_zero_BB_100_42 = 7'd42;
parameter [6:0] LEGUP_F_s_zero_BB_100_43 = 7'd43;
parameter [6:0] LEGUP_F_s_zero_BB_100_44 = 7'd44;
parameter [6:0] LEGUP_F_s_zero_BB_100_45 = 7'd45;
parameter [6:0] LEGUP_F_s_zero_BB_100_46 = 7'd46;
parameter [6:0] LEGUP_F_s_zero_BB_100_47 = 7'd47;
parameter [6:0] LEGUP_F_s_zero_BB_100_48 = 7'd48;
parameter [6:0] LEGUP_F_s_zero_BB_100_49 = 7'd49;
parameter [6:0] LEGUP_F_s_zero_BB_100_50 = 7'd50;
parameter [6:0] LEGUP_F_s_zero_BB_100_51 = 7'd51;
parameter [6:0] LEGUP_F_s_zero_BB_100_52 = 7'd52;
parameter [6:0] LEGUP_F_s_zero_BB_100_53 = 7'd53;
parameter [6:0] LEGUP_F_s_zero_BB_100_54 = 7'd54;
parameter [6:0] LEGUP_F_s_zero_BB_100_55 = 7'd55;
parameter [6:0] LEGUP_F_s_zero_BB_100_56 = 7'd56;
parameter [6:0] LEGUP_F_s_zero_BB_100_57 = 7'd57;
parameter [6:0] LEGUP_F_s_zero_BB_100_58 = 7'd58;
parameter [6:0] LEGUP_F_s_zero_BB_100_59 = 7'd59;
parameter [6:0] LEGUP_F_s_zero_BB_100_60 = 7'd60;
parameter [6:0] LEGUP_F_s_zero_BB_100_61 = 7'd61;
parameter [6:0] LEGUP_F_s_zero_BB_100_62 = 7'd62;
parameter [6:0] LEGUP_F_s_zero_BB_100_63 = 7'd63;
parameter [6:0] LEGUP_F_s_zero_BB_100_64 = 7'd64;
parameter [6:0] LEGUP_F_s_zero_BB_100_65 = 7'd65;
parameter [6:0] LEGUP_F_s_zero_BB_100_66 = 7'd66;
parameter [6:0] LEGUP_F_s_zero_BB_100_67 = 7'd67;
parameter [6:0] LEGUP_F_s_zero_BB_100_68 = 7'd68;
parameter [6:0] LEGUP_F_s_zero_BB_100_69 = 7'd69;
parameter [6:0] LEGUP_F_s_zero_BB_100_70 = 7'd70;
parameter [6:0] LEGUP_F_s_zero_BB_152_71 = 7'd71;
parameter [6:0] LEGUP_F_s_zero_BB_152_72 = 7'd72;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [31:0] arg_cur_diff;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_band;
reg [6:0] cur_state;
reg  s_zero_0_1;
reg  s_zero_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_4_reg;
reg [31:0] s_zero_0_5;
reg [31:0] s_zero_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_0_8_reg;
reg [31:0] s_zero_0_9;
reg [31:0] s_zero_0_9_reg;
reg [31:0] s_zero_0_10;
reg [31:0] s_zero_0_10_reg;
reg [31:0] s_zero_0_11;
reg [31:0] s_zero_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_13_reg;
reg [31:0] s_zero_12_14;
reg [31:0] s_zero_12_14_reg;
reg [31:0] s_zero_12_15;
reg [31:0] s_zero_12_15_reg;
reg [31:0] s_zero_12_16;
reg [31:0] s_zero_12_16_reg;
reg [31:0] s_zero_12_17;
reg [31:0] s_zero_12_17_reg;
reg [31:0] s_zero_12_18;
reg [31:0] s_zero_12_18_reg;
reg [31:0] s_zero_12_19;
reg [31:0] s_zero_12_19_reg;
reg [31:0] s_zero_12_20;
reg [31:0] s_zero_12_20_reg;
reg [31:0] s_zero_12_21;
reg [31:0] s_zero_12_21_reg;
reg [31:0] s_zero_12_22;
reg [31:0] s_zero_12_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_23_reg;
reg [31:0] s_zero_12_24;
reg [31:0] s_zero_12_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_25_reg;
reg [31:0] s_zero_12_26;
reg [31:0] s_zero_12_26_reg;
reg [31:0] s_zero_12_27;
reg [31:0] s_zero_12_27_reg;
reg [31:0] s_zero_12_28;
reg [31:0] s_zero_12_28_reg;
reg [31:0] s_zero_12_29;
reg [31:0] s_zero_12_29_reg;
reg [31:0] s_zero_12_30;
reg [31:0] s_zero_12_30_reg;
reg [31:0] s_zero_12_31;
reg [31:0] s_zero_12_31_reg;
reg [31:0] s_zero_12_32;
reg [31:0] s_zero_12_32_reg;
reg [31:0] s_zero_12_33;
reg [31:0] s_zero_12_33_reg;
reg [31:0] s_zero_12_34;
reg [31:0] s_zero_12_34_reg;
reg [31:0] s_zero_12_35;
reg [31:0] s_zero_12_35_reg;
reg [31:0] s_zero_12_36;
reg [31:0] s_zero_12_36_reg;
reg [31:0] s_zero_12_37;
reg [31:0] s_zero_12_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_38_reg;
reg [31:0] s_zero_12_39;
reg [31:0] s_zero_12_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_40_reg;
reg [31:0] s_zero_12_41;
reg [31:0] s_zero_12_41_reg;
reg [31:0] s_zero_12_42;
reg [31:0] s_zero_12_42_reg;
reg [31:0] s_zero_12_43;
reg [31:0] s_zero_12_43_reg;
reg [31:0] s_zero_12_44;
reg [31:0] s_zero_12_44_reg;
reg [31:0] s_zero_12_45;
reg [31:0] s_zero_12_45_reg;
reg [31:0] s_zero_12_46;
reg [31:0] s_zero_12_46_reg;
reg [31:0] s_zero_12_47;
reg [31:0] s_zero_12_47_reg;
reg [31:0] s_zero_12_48;
reg [31:0] s_zero_12_48_reg;
reg [31:0] s_zero_12_49;
reg [31:0] s_zero_12_49_reg;
reg [31:0] s_zero_12_50;
reg [31:0] s_zero_12_50_reg;
reg [31:0] s_zero_12_51;
reg [31:0] s_zero_12_51_reg;
reg [31:0] s_zero_12_52;
reg [31:0] s_zero_12_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_53_reg;
reg [31:0] s_zero_12_54;
reg [31:0] s_zero_12_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_55_reg;
reg [31:0] s_zero_12_56;
reg [31:0] s_zero_12_56_reg;
reg [31:0] s_zero_12_57;
reg [31:0] s_zero_12_57_reg;
reg [31:0] s_zero_12_58;
reg [31:0] s_zero_12_58_reg;
reg [31:0] s_zero_12_59;
reg [31:0] s_zero_12_59_reg;
reg [31:0] s_zero_12_60;
reg [31:0] s_zero_12_60_reg;
reg [31:0] s_zero_12_61;
reg [31:0] s_zero_12_61_reg;
reg [31:0] s_zero_12_62;
reg [31:0] s_zero_12_62_reg;
reg [31:0] s_zero_12_63;
reg [31:0] s_zero_12_63_reg;
reg [31:0] s_zero_12_64;
reg [31:0] s_zero_12_64_reg;
reg [31:0] s_zero_12_65;
reg [31:0] s_zero_12_65_reg;
reg [31:0] s_zero_12_66;
reg [31:0] s_zero_12_66_reg;
reg [31:0] s_zero_12_67;
reg [31:0] s_zero_12_67_reg;
reg [31:0] s_zero_12_68;
reg [31:0] s_zero_12_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_12_69_reg;
reg [31:0] s_zero_12_70;
reg [31:0] s_zero_12_70_reg;
reg [31:0] s_zero_12_71;
reg [31:0] s_zero_12_71_reg;
reg [31:0] s_zero_12_72;
reg [31:0] s_zero_12_72_reg;
reg [31:0] s_zero_12_73;
reg [31:0] s_zero_12_73_reg;
reg [31:0] s_zero_12_74;
reg [31:0] s_zero_12_74_reg;
reg [31:0] s_zero_12_75;
reg [31:0] s_zero_12_75_reg;
reg [31:0] s_zero_12_76;
reg [31:0] s_zero_12_76_reg;
reg [31:0] s_zero_12_77;
reg [31:0] s_zero_12_77_reg;
reg [31:0] s_zero_12_78;
reg [31:0] s_zero_12_78_reg;
reg [31:0] s_zero_12_79;
reg [31:0] s_zero_12_79_reg;
reg [31:0] s_zero_12_80;
reg [31:0] s_zero_12_80_reg;
reg [31:0] s_zero_12_81;
reg [31:0] s_zero_12_81_reg;
reg [31:0] s_zero_12_82;
reg [31:0] s_zero_12_82_reg;
reg [31:0] s_zero_12_83;
reg [31:0] s_zero_12_83_reg;
reg [31:0] s_zero_12_84;
reg [31:0] s_zero_12_84_reg;
reg [31:0] s_zero_12_85;
reg [31:0] s_zero_12_85_reg;
reg [31:0] s_zero_12_86;
reg [31:0] s_zero_12_86_reg;
reg [31:0] s_zero_12_87;
reg [31:0] s_zero_12_87_reg;
reg [31:0] s_zero_12_88;
reg [31:0] s_zero_12_88_reg;
reg [31:0] s_zero_12_89;
reg [31:0] s_zero_12_89_reg;
reg [31:0] s_zero_12_90;
reg [31:0] s_zero_12_90_reg;
reg [31:0] s_zero_12_91;
reg [31:0] s_zero_12_91_reg;
reg [31:0] s_zero_12_92;
reg [31:0] s_zero_12_92_reg;
reg [31:0] s_zero_12_93;
reg [31:0] s_zero_12_93_reg;
reg [31:0] s_zero_12_94;
reg [31:0] s_zero_12_94_reg;
reg [31:0] s_zero_12_95;
reg [31:0] s_zero_12_95_reg;
reg [31:0] s_zero_12_96;
reg [31:0] s_zero_12_96_reg;
reg [31:0] s_zero_12_97;
reg [31:0] s_zero_12_97_reg;
reg [31:0] s_zero_12_98;
reg [31:0] s_zero_12_98_reg;
reg [31:0] s_zero_12_99;
reg [31:0] s_zero_12_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_101_reg;
reg [31:0] s_zero_100_102;
reg [31:0] s_zero_100_102_reg;
reg [31:0] s_zero_100_103;
reg [31:0] s_zero_100_103_reg;
reg [31:0] s_zero_100_104;
reg [31:0] s_zero_100_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_105_reg;
reg [31:0] s_zero_100_106;
reg [31:0] s_zero_100_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_107_reg;
reg [31:0] s_zero_100_108;
reg [31:0] s_zero_100_108_reg;
reg [31:0] s_zero_100_109;
reg [31:0] s_zero_100_109_reg;
reg [31:0] s_zero_100_110;
reg [31:0] s_zero_100_110_reg;
reg [31:0] s_zero_100_111;
reg [31:0] s_zero_100_111_reg;
reg [31:0] s_zero_100_112;
reg [31:0] s_zero_100_112_reg;
reg [31:0] s_zero_100_113;
reg [31:0] s_zero_100_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_114_reg;
reg [31:0] s_zero_100_115;
reg [31:0] s_zero_100_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_116_reg;
reg [31:0] s_zero_100_117;
reg [31:0] s_zero_100_117_reg;
reg [31:0] s_zero_100_118;
reg [31:0] s_zero_100_118_reg;
reg [31:0] s_zero_100_119;
reg [31:0] s_zero_100_119_reg;
reg [31:0] s_zero_100_120;
reg [31:0] s_zero_100_120_reg;
reg [31:0] s_zero_100_121;
reg [31:0] s_zero_100_121_reg;
reg [31:0] s_zero_100_122;
reg [31:0] s_zero_100_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_123_reg;
reg [31:0] s_zero_100_124;
reg [31:0] s_zero_100_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_125_reg;
reg [31:0] s_zero_100_126;
reg [31:0] s_zero_100_126_reg;
reg [31:0] s_zero_100_127;
reg [31:0] s_zero_100_127_reg;
reg [31:0] s_zero_100_128;
reg [31:0] s_zero_100_128_reg;
reg [31:0] s_zero_100_129;
reg [31:0] s_zero_100_129_reg;
reg [31:0] s_zero_100_130;
reg [31:0] s_zero_100_130_reg;
reg [31:0] s_zero_100_131;
reg [31:0] s_zero_100_131_reg;
reg [31:0] s_zero_100_132;
reg [31:0] s_zero_100_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_100_133_reg;
reg [31:0] s_zero_100_134;
reg [31:0] s_zero_100_134_reg;
reg [31:0] s_zero_100_135;
reg [31:0] s_zero_100_135_reg;
reg [31:0] s_zero_100_136;
reg [31:0] s_zero_100_136_reg;
reg [31:0] s_zero_100_137;
reg [31:0] s_zero_100_137_reg;
reg [31:0] s_zero_100_138;
reg [31:0] s_zero_100_138_reg;
reg [31:0] s_zero_100_139;
reg [31:0] s_zero_100_139_reg;
reg [31:0] s_zero_100_140;
reg [31:0] s_zero_100_140_reg;
reg [31:0] s_zero_100_141;
reg [31:0] s_zero_100_141_reg;
reg [31:0] s_zero_100_142;
reg [31:0] s_zero_100_142_reg;
reg [31:0] s_zero_100_143;
reg [31:0] s_zero_100_143_reg;
reg [31:0] s_zero_100_144;
reg [31:0] s_zero_100_144_reg;
reg [31:0] s_zero_100_145;
reg [31:0] s_zero_100_145_reg;
reg [31:0] s_zero_100_146;
reg [31:0] s_zero_100_146_reg;
reg [31:0] s_zero_100_147;
reg [31:0] s_zero_100_147_reg;
reg [31:0] s_zero_100_148;
reg [31:0] s_zero_100_148_reg;
reg [31:0] s_zero_100_149;
reg [31:0] s_zero_100_149_reg;
reg [31:0] s_zero_100_150;
reg [31:0] s_zero_100_150_reg;
reg [31:0] s_zero_100_151;
reg [31:0] s_zero_100_151_reg;
reg [31:0] s_zero_152_s_zero_0;
reg [31:0] s_zero_152_s_zero_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_152_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_152_153_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_s_zero_0_10_en;
reg [31:0] s_zero_0_10_stage0_reg;
reg  lpm_mult_s_zero_12_27_en;
reg [31:0] s_zero_12_27_stage0_reg;
reg  lpm_mult_s_zero_12_21_en;
reg [31:0] s_zero_12_21_stage0_reg;
reg  lpm_mult_s_zero_12_42_en;
reg [31:0] s_zero_12_42_stage0_reg;
reg  lpm_mult_s_zero_12_36_en;
reg [31:0] s_zero_12_36_stage0_reg;
reg  lpm_mult_s_zero_12_57_en;
reg [31:0] s_zero_12_57_stage0_reg;
reg  lpm_mult_s_zero_12_51_en;
reg [31:0] s_zero_12_51_stage0_reg;
reg  lpm_mult_s_zero_12_71_en;
reg [31:0] s_zero_12_71_stage0_reg;
reg  lpm_mult_s_zero_12_66_en;
reg [31:0] s_zero_12_66_stage0_reg;
reg  lpm_mult_s_zero_12_84_en;
reg [31:0] s_zero_12_84_stage0_reg;
reg  lpm_mult_s_zero_12_80_en;
reg [31:0] s_zero_12_80_stage0_reg;
reg  lpm_mult_s_zero_12_93_en;
reg [31:0] s_zero_12_93_stage0_reg;
reg  lpm_mult_s_zero_100_109_en;
reg [31:0] s_zero_100_109_stage0_reg;
reg  lpm_mult_s_zero_100_103_en;
reg [31:0] s_zero_100_103_stage0_reg;
reg  lpm_mult_s_zero_100_118_en;
reg [31:0] s_zero_100_118_stage0_reg;
reg  lpm_mult_s_zero_100_112_en;
reg [31:0] s_zero_100_112_stage0_reg;
reg  lpm_mult_s_zero_100_127_en;
reg [31:0] s_zero_100_127_stage0_reg;
reg  lpm_mult_s_zero_100_121_en;
reg [31:0] s_zero_100_121_stage0_reg;
reg  lpm_mult_s_zero_100_135_en;
reg [31:0] s_zero_100_135_stage0_reg;
reg  lpm_mult_s_zero_100_130_en;
reg [31:0] s_zero_100_130_stage0_reg;
reg  lpm_mult_s_zero_100_138_en;
reg [31:0] s_zero_100_138_stage0_reg;
reg  lpm_mult_s_zero_100_142_en;
reg [31:0] s_zero_100_142_stage0_reg;
reg  lpm_mult_s_zero_100_145_en;
reg [31:0] s_zero_100_145_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_s_zero_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (s_zero_0_1_reg == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_40;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_s_zero_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (s_zero_0_1_reg == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_9;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_11;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_11;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_12;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_12;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_13;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_14;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_15;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_16;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_17;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_18;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_19;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_19;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_20;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_21;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_22;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_23;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_23;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_24;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_24;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_25;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_25;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_26;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_26;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_27;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_27;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_28;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_28;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_29;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_29;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_30;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_30;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_31;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_31;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_32;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_32;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_33;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_33;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_34;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_34;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_35;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_35;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_36;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_36;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_37;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_37;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_38;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_38;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_39;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_12_39;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_12_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_152_71;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_152_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_40;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_41;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_41;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_42;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_42;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_43;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_43;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_44;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_44;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_45;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_45;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_46;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_46;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_47;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_47;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_48;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_48;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_49;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_49;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_50;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_50;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_51;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_51;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_52;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_52;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_53;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_53;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_54;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_54;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_55;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_55;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_56;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_56;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_57;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_57;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_58;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_58;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_59;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_59;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_60;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_60;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_61;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_61;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_62;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_62;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_63;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_63;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_64;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_64;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_65;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_65;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_66;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_66;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_67;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_67;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_68;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_68;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_69;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_69;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_70;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_100_70;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_100_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_100_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_152_71;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_152_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_152_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_152_71;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_152_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_152_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_s_zero_BB_152_72;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_152_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_152_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_s_zero_BB_152_72;
if (reset == 1'b0 && ^(LEGUP_F_s_zero_BB_152_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_s_zero_BB_152_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %1 = icmp eq i32 %cur_diff, 0*/
begin
s_zero_0_1 = (arg_cur_diff == 32'd0);
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %1 = icmp eq i32 %cur_diff, 0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
s_zero_0_1_reg <= s_zero_0_1;
if (reset == 1'b0 && ^(s_zero_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_1_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %2 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 0*/
begin
s_zero_0_2 = arg_band;
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %2 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
s_zero_0_2_reg <= s_zero_0_2;
if (reset == 1'b0 && ^(s_zero_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_2_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
begin
s_zero_0_3 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
s_zero_0_3_reg <= s_zero_0_3;
if (reset == 1'b0 && ^(s_zero_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_3_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %4 = getelementptr inbounds i32* %3, i32 4*/
begin
s_zero_0_4 = (s_zero_0_3 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %4 = getelementptr inbounds i32* %3, i32 4*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
s_zero_0_4_reg <= s_zero_0_4;
if (reset == 1'b0 && ^(s_zero_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_4_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
begin
s_zero_0_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_5))
begin
s_zero_0_5_reg <= s_zero_0_5;
if (reset == 1'b0 && ^(s_zero_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_5_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %6 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 1*/
begin
s_zero_0_6 = (arg_band + 4);
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %6 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 1*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
s_zero_0_6_reg <= s_zero_0_6;
if (reset == 1'b0 && ^(s_zero_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_6_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
begin
s_zero_0_7 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
s_zero_0_7_reg <= s_zero_0_7;
if (reset == 1'b0 && ^(s_zero_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_7_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %8 = getelementptr inbounds i32* %7, i32 5*/
begin
s_zero_0_8 = (s_zero_0_7 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %8 = getelementptr inbounds i32* %7, i32 5*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
s_zero_0_8_reg <= s_zero_0_8;
if (reset == 1'b0 && ^(s_zero_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_8_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
begin
s_zero_0_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_5))
begin
s_zero_0_9_reg <= s_zero_0_9;
if (reset == 1'b0 && ^(s_zero_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_9_reg"); $finish; end
end
end
always @(*) begin
s_zero_0_10 = s_zero_0_10_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %10 = mul nsw i32 %9, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_0_6))
begin
s_zero_0_10_reg <= s_zero_0_10;
if (reset == 1'b0 && ^(s_zero_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_10_reg"); $finish; end
end
/* s_zero: %0*/
/*   %10 = mul nsw i32 %9, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_0_6))
begin
s_zero_0_10_reg <= s_zero_0_10;
if (reset == 1'b0 && ^(s_zero_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_10_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %0*/
/*   %11 = ashr i32 %10, 8*/
begin
s_zero_0_11 = ($signed(s_zero_0_10) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %11 = ashr i32 %10, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_0_6))
begin
s_zero_0_11_reg <= s_zero_0_11;
if (reset == 1'b0 && ^(s_zero_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_0_11_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %13 = getelementptr inbounds i32* %3, i32 5*/
begin
s_zero_12_13 = (s_zero_0_3_reg + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %13 = getelementptr inbounds i32* %3, i32 5*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_13_reg <= s_zero_12_13;
if (reset == 1'b0 && ^(s_zero_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_13_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
begin
s_zero_12_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_14_reg <= s_zero_12_14;
if (reset == 1'b0 && ^(s_zero_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_14_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %15 = xor i32 %14, %cur_diff*/
begin
s_zero_12_15 = (s_zero_12_14 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %15 = xor i32 %14, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_15_reg <= s_zero_12_15;
if (reset == 1'b0 && ^(s_zero_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_15_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %16 = ashr i32 %15, 31*/
begin
s_zero_12_16 = ($signed(s_zero_12_15) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %16 = ashr i32 %15, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_16_reg <= s_zero_12_16;
if (reset == 1'b0 && ^(s_zero_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_16_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %17 = and i32 %16, -256*/
begin
s_zero_12_17 = (s_zero_12_16 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %17 = and i32 %16, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_17_reg <= s_zero_12_17;
if (reset == 1'b0 && ^(s_zero_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_17_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %18 = or i32 %17, 128*/
begin
s_zero_12_18 = (s_zero_12_17 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %18 = or i32 %17, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_18_reg <= s_zero_12_18;
if (reset == 1'b0 && ^(s_zero_12_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_18_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %19 = add nsw i32 %18, %11*/
begin
s_zero_12_19 = (s_zero_12_18 + s_zero_0_11_reg);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %19 = add nsw i32 %18, %11*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
s_zero_12_19_reg <= s_zero_12_19;
if (reset == 1'b0 && ^(s_zero_12_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_19_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
begin
s_zero_12_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_20_reg <= s_zero_12_20;
if (reset == 1'b0 && ^(s_zero_12_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_20_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_21 = s_zero_12_21_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %21 = mul nsw i32 %20, %5*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
s_zero_12_21_reg <= s_zero_12_21;
if (reset == 1'b0 && ^(s_zero_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_21_reg"); $finish; end
end
/* s_zero: %12*/
/*   %21 = mul nsw i32 %20, %5*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
s_zero_12_21_reg <= s_zero_12_21;
if (reset == 1'b0 && ^(s_zero_12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_21_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %22 = ashr i32 %21, 15*/
begin
s_zero_12_22 = ($signed(s_zero_12_21) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %22 = ashr i32 %21, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
s_zero_12_22_reg <= s_zero_12_22;
if (reset == 1'b0 && ^(s_zero_12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_22_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %23 = getelementptr inbounds i32* %3, i32 3*/
begin
s_zero_12_23 = (s_zero_0_3_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %23 = getelementptr inbounds i32* %3, i32 3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_23_reg <= s_zero_12_23;
if (reset == 1'b0 && ^(s_zero_12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_23_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
begin
s_zero_12_24 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_13))
begin
s_zero_12_24_reg <= s_zero_12_24;
if (reset == 1'b0 && ^(s_zero_12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_24_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %25 = getelementptr inbounds i32* %7, i32 4*/
begin
s_zero_12_25 = (s_zero_0_7_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %25 = getelementptr inbounds i32* %7, i32 4*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_25_reg <= s_zero_12_25;
if (reset == 1'b0 && ^(s_zero_12_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_25_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
begin
s_zero_12_26 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_13))
begin
s_zero_12_26_reg <= s_zero_12_26;
if (reset == 1'b0 && ^(s_zero_12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_26_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_27 = s_zero_12_27_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %27 = mul nsw i32 %26, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_27_reg <= s_zero_12_27;
if (reset == 1'b0 && ^(s_zero_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_27_reg"); $finish; end
end
/* s_zero: %12*/
/*   %27 = mul nsw i32 %26, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_27_reg <= s_zero_12_27;
if (reset == 1'b0 && ^(s_zero_12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_27_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %28 = ashr i32 %27, 8*/
begin
s_zero_12_28 = ($signed(s_zero_12_27) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %28 = ashr i32 %27, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_28_reg <= s_zero_12_28;
if (reset == 1'b0 && ^(s_zero_12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_28_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
begin
s_zero_12_29 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_29_reg <= s_zero_12_29;
if (reset == 1'b0 && ^(s_zero_12_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_29_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %30 = xor i32 %29, %cur_diff*/
begin
s_zero_12_30 = (s_zero_12_29 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %30 = xor i32 %29, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_30_reg <= s_zero_12_30;
if (reset == 1'b0 && ^(s_zero_12_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_30_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %31 = ashr i32 %30, 31*/
begin
s_zero_12_31 = ($signed(s_zero_12_30) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %31 = ashr i32 %30, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_31_reg <= s_zero_12_31;
if (reset == 1'b0 && ^(s_zero_12_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_31_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %32 = and i32 %31, -256*/
begin
s_zero_12_32 = (s_zero_12_31 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %32 = and i32 %31, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_32_reg <= s_zero_12_32;
if (reset == 1'b0 && ^(s_zero_12_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_32_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %33 = or i32 %32, 128*/
begin
s_zero_12_33 = (s_zero_12_32 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %33 = or i32 %32, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_33_reg <= s_zero_12_33;
if (reset == 1'b0 && ^(s_zero_12_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_33_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %34 = add nsw i32 %33, %28*/
begin
s_zero_12_34 = (s_zero_12_33 + s_zero_12_28);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %34 = add nsw i32 %33, %28*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
s_zero_12_34_reg <= s_zero_12_34;
if (reset == 1'b0 && ^(s_zero_12_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_34_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
begin
s_zero_12_35 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_35_reg <= s_zero_12_35;
if (reset == 1'b0 && ^(s_zero_12_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_35_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_36 = s_zero_12_36_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %36 = mul nsw i32 %35, %24*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
s_zero_12_36_reg <= s_zero_12_36;
if (reset == 1'b0 && ^(s_zero_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_36_reg"); $finish; end
end
/* s_zero: %12*/
/*   %36 = mul nsw i32 %35, %24*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
s_zero_12_36_reg <= s_zero_12_36;
if (reset == 1'b0 && ^(s_zero_12_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_36_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %37 = ashr i32 %36, 15*/
begin
s_zero_12_37 = ($signed(s_zero_12_36) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %37 = ashr i32 %36, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
s_zero_12_37_reg <= s_zero_12_37;
if (reset == 1'b0 && ^(s_zero_12_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_37_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %38 = getelementptr inbounds i32* %3, i32 2*/
begin
s_zero_12_38 = (s_zero_0_3_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %38 = getelementptr inbounds i32* %3, i32 2*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_38_reg <= s_zero_12_38;
if (reset == 1'b0 && ^(s_zero_12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_38_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
begin
s_zero_12_39 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_18))
begin
s_zero_12_39_reg <= s_zero_12_39;
if (reset == 1'b0 && ^(s_zero_12_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_39_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %40 = getelementptr inbounds i32* %7, i32 3*/
begin
s_zero_12_40 = (s_zero_0_7_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %40 = getelementptr inbounds i32* %7, i32 3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_40_reg <= s_zero_12_40;
if (reset == 1'b0 && ^(s_zero_12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_40_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
begin
s_zero_12_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_18))
begin
s_zero_12_41_reg <= s_zero_12_41;
if (reset == 1'b0 && ^(s_zero_12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_41_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_42 = s_zero_12_42_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %42 = mul nsw i32 %41, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_42_reg <= s_zero_12_42;
if (reset == 1'b0 && ^(s_zero_12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_42_reg"); $finish; end
end
/* s_zero: %12*/
/*   %42 = mul nsw i32 %41, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_42_reg <= s_zero_12_42;
if (reset == 1'b0 && ^(s_zero_12_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_42_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %43 = ashr i32 %42, 8*/
begin
s_zero_12_43 = ($signed(s_zero_12_42) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %43 = ashr i32 %42, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_43_reg <= s_zero_12_43;
if (reset == 1'b0 && ^(s_zero_12_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_43_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
begin
s_zero_12_44 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_44_reg <= s_zero_12_44;
if (reset == 1'b0 && ^(s_zero_12_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_44_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %45 = xor i32 %44, %cur_diff*/
begin
s_zero_12_45 = (s_zero_12_44 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %45 = xor i32 %44, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_45_reg <= s_zero_12_45;
if (reset == 1'b0 && ^(s_zero_12_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_45_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %46 = ashr i32 %45, 31*/
begin
s_zero_12_46 = ($signed(s_zero_12_45) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %46 = ashr i32 %45, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_46_reg <= s_zero_12_46;
if (reset == 1'b0 && ^(s_zero_12_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_46_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %47 = and i32 %46, -256*/
begin
s_zero_12_47 = (s_zero_12_46 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %47 = and i32 %46, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_47_reg <= s_zero_12_47;
if (reset == 1'b0 && ^(s_zero_12_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_47_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %48 = or i32 %47, 128*/
begin
s_zero_12_48 = (s_zero_12_47 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %48 = or i32 %47, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_48_reg <= s_zero_12_48;
if (reset == 1'b0 && ^(s_zero_12_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_48_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %49 = add nsw i32 %48, %43*/
begin
s_zero_12_49 = (s_zero_12_48 + s_zero_12_43);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %49 = add nsw i32 %48, %43*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
s_zero_12_49_reg <= s_zero_12_49;
if (reset == 1'b0 && ^(s_zero_12_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_49_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
begin
s_zero_12_50 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_50_reg <= s_zero_12_50;
if (reset == 1'b0 && ^(s_zero_12_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_50_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_51 = s_zero_12_51_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %51 = mul nsw i32 %50, %39*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
s_zero_12_51_reg <= s_zero_12_51;
if (reset == 1'b0 && ^(s_zero_12_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_51_reg"); $finish; end
end
/* s_zero: %12*/
/*   %51 = mul nsw i32 %50, %39*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
s_zero_12_51_reg <= s_zero_12_51;
if (reset == 1'b0 && ^(s_zero_12_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_51_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %52 = ashr i32 %51, 15*/
begin
s_zero_12_52 = ($signed(s_zero_12_51) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %52 = ashr i32 %51, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
s_zero_12_52_reg <= s_zero_12_52;
if (reset == 1'b0 && ^(s_zero_12_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_52_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %53 = getelementptr inbounds i32* %3, i32 1*/
begin
s_zero_12_53 = (s_zero_0_3_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %53 = getelementptr inbounds i32* %3, i32 1*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_53_reg <= s_zero_12_53;
if (reset == 1'b0 && ^(s_zero_12_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_53_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
begin
s_zero_12_54 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_23))
begin
s_zero_12_54_reg <= s_zero_12_54;
if (reset == 1'b0 && ^(s_zero_12_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_54_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %55 = getelementptr inbounds i32* %7, i32 2*/
begin
s_zero_12_55 = (s_zero_0_7_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %55 = getelementptr inbounds i32* %7, i32 2*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_55_reg <= s_zero_12_55;
if (reset == 1'b0 && ^(s_zero_12_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_55_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
begin
s_zero_12_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_23))
begin
s_zero_12_56_reg <= s_zero_12_56;
if (reset == 1'b0 && ^(s_zero_12_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_56_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_57 = s_zero_12_57_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %57 = mul nsw i32 %56, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_57_reg <= s_zero_12_57;
if (reset == 1'b0 && ^(s_zero_12_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_57_reg"); $finish; end
end
/* s_zero: %12*/
/*   %57 = mul nsw i32 %56, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_57_reg <= s_zero_12_57;
if (reset == 1'b0 && ^(s_zero_12_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_57_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %58 = ashr i32 %57, 8*/
begin
s_zero_12_58 = ($signed(s_zero_12_57) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %58 = ashr i32 %57, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_58_reg <= s_zero_12_58;
if (reset == 1'b0 && ^(s_zero_12_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_58_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
begin
s_zero_12_59 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_59_reg <= s_zero_12_59;
if (reset == 1'b0 && ^(s_zero_12_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_59_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %60 = xor i32 %59, %cur_diff*/
begin
s_zero_12_60 = (s_zero_12_59 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %60 = xor i32 %59, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_60_reg <= s_zero_12_60;
if (reset == 1'b0 && ^(s_zero_12_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_60_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %61 = ashr i32 %60, 31*/
begin
s_zero_12_61 = ($signed(s_zero_12_60) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %61 = ashr i32 %60, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_61_reg <= s_zero_12_61;
if (reset == 1'b0 && ^(s_zero_12_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_61_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %62 = and i32 %61, -256*/
begin
s_zero_12_62 = (s_zero_12_61 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %62 = and i32 %61, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_62_reg <= s_zero_12_62;
if (reset == 1'b0 && ^(s_zero_12_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_62_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %63 = or i32 %62, 128*/
begin
s_zero_12_63 = (s_zero_12_62 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %63 = or i32 %62, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_63_reg <= s_zero_12_63;
if (reset == 1'b0 && ^(s_zero_12_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_63_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %64 = add nsw i32 %63, %58*/
begin
s_zero_12_64 = (s_zero_12_63 + s_zero_12_58);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %64 = add nsw i32 %63, %58*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
s_zero_12_64_reg <= s_zero_12_64;
if (reset == 1'b0 && ^(s_zero_12_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_64_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
begin
s_zero_12_65 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_65_reg <= s_zero_12_65;
if (reset == 1'b0 && ^(s_zero_12_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_65_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_66 = s_zero_12_66_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %66 = mul nsw i32 %65, %54*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
s_zero_12_66_reg <= s_zero_12_66;
if (reset == 1'b0 && ^(s_zero_12_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_66_reg"); $finish; end
end
/* s_zero: %12*/
/*   %66 = mul nsw i32 %65, %54*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
s_zero_12_66_reg <= s_zero_12_66;
if (reset == 1'b0 && ^(s_zero_12_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_66_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %67 = ashr i32 %66, 15*/
begin
s_zero_12_67 = ($signed(s_zero_12_66) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %67 = ashr i32 %66, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
s_zero_12_67_reg <= s_zero_12_67;
if (reset == 1'b0 && ^(s_zero_12_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_67_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
begin
s_zero_12_68 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_28))
begin
s_zero_12_68_reg <= s_zero_12_68;
if (reset == 1'b0 && ^(s_zero_12_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_68_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %69 = getelementptr inbounds i32* %7, i32 1*/
begin
s_zero_12_69 = (s_zero_0_7_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %69 = getelementptr inbounds i32* %7, i32 1*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_69_reg <= s_zero_12_69;
if (reset == 1'b0 && ^(s_zero_12_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_69_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
begin
s_zero_12_70 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_28))
begin
s_zero_12_70_reg <= s_zero_12_70;
if (reset == 1'b0 && ^(s_zero_12_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_70_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_71 = s_zero_12_71_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %71 = mul nsw i32 %70, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_71_reg <= s_zero_12_71;
if (reset == 1'b0 && ^(s_zero_12_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_71_reg"); $finish; end
end
/* s_zero: %12*/
/*   %71 = mul nsw i32 %70, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_71_reg <= s_zero_12_71;
if (reset == 1'b0 && ^(s_zero_12_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_71_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %72 = ashr i32 %71, 8*/
begin
s_zero_12_72 = ($signed(s_zero_12_71) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %72 = ashr i32 %71, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_72_reg <= s_zero_12_72;
if (reset == 1'b0 && ^(s_zero_12_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_72_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
begin
s_zero_12_73 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_73_reg <= s_zero_12_73;
if (reset == 1'b0 && ^(s_zero_12_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_73_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %74 = xor i32 %73, %cur_diff*/
begin
s_zero_12_74 = (s_zero_12_73 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %74 = xor i32 %73, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_74_reg <= s_zero_12_74;
if (reset == 1'b0 && ^(s_zero_12_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_74_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %75 = ashr i32 %74, 31*/
begin
s_zero_12_75 = ($signed(s_zero_12_74) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %75 = ashr i32 %74, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_75_reg <= s_zero_12_75;
if (reset == 1'b0 && ^(s_zero_12_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_75_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %76 = and i32 %75, -256*/
begin
s_zero_12_76 = (s_zero_12_75 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %76 = and i32 %75, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_76_reg <= s_zero_12_76;
if (reset == 1'b0 && ^(s_zero_12_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_76_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %77 = or i32 %76, 128*/
begin
s_zero_12_77 = (s_zero_12_76 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %77 = or i32 %76, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_77_reg <= s_zero_12_77;
if (reset == 1'b0 && ^(s_zero_12_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_77_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %78 = add nsw i32 %77, %72*/
begin
s_zero_12_78 = (s_zero_12_77 + s_zero_12_72);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %78 = add nsw i32 %77, %72*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
s_zero_12_78_reg <= s_zero_12_78;
if (reset == 1'b0 && ^(s_zero_12_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_78_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
begin
s_zero_12_79 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
s_zero_12_79_reg <= s_zero_12_79;
if (reset == 1'b0 && ^(s_zero_12_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_79_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_80 = s_zero_12_80_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %80 = mul nsw i32 %79, %68*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
s_zero_12_80_reg <= s_zero_12_80;
if (reset == 1'b0 && ^(s_zero_12_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_80_reg"); $finish; end
end
/* s_zero: %12*/
/*   %80 = mul nsw i32 %79, %68*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
s_zero_12_80_reg <= s_zero_12_80;
if (reset == 1'b0 && ^(s_zero_12_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_80_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %81 = ashr i32 %80, 15*/
begin
s_zero_12_81 = ($signed(s_zero_12_80) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %81 = ashr i32 %80, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
s_zero_12_81_reg <= s_zero_12_81;
if (reset == 1'b0 && ^(s_zero_12_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_81_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %82 = shl nsw i32 %cur_diff, 1*/
begin
s_zero_12_82 = (arg_cur_diff <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %82 = shl nsw i32 %cur_diff, 1*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
s_zero_12_82_reg <= s_zero_12_82;
if (reset == 1'b0 && ^(s_zero_12_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_82_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
begin
s_zero_12_83 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_83_reg <= s_zero_12_83;
if (reset == 1'b0 && ^(s_zero_12_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_83_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_84 = s_zero_12_84_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %84 = mul nsw i32 %83, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
s_zero_12_84_reg <= s_zero_12_84;
if (reset == 1'b0 && ^(s_zero_12_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_84_reg"); $finish; end
end
/* s_zero: %12*/
/*   %84 = mul nsw i32 %83, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
s_zero_12_84_reg <= s_zero_12_84;
if (reset == 1'b0 && ^(s_zero_12_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_84_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %85 = ashr i32 %84, 8*/
begin
s_zero_12_85 = ($signed(s_zero_12_84) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %85 = ashr i32 %84, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
s_zero_12_85_reg <= s_zero_12_85;
if (reset == 1'b0 && ^(s_zero_12_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_85_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
begin
s_zero_12_86 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_86_reg <= s_zero_12_86;
if (reset == 1'b0 && ^(s_zero_12_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_86_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %87 = xor i32 %86, %cur_diff*/
begin
s_zero_12_87 = (s_zero_12_86 ^ arg_cur_diff);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %87 = xor i32 %86, %cur_diff*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_87_reg <= s_zero_12_87;
if (reset == 1'b0 && ^(s_zero_12_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_87_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %88 = ashr i32 %87, 31*/
begin
s_zero_12_88 = ($signed(s_zero_12_87) >>> 32'd31);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %88 = ashr i32 %87, 31*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_88_reg <= s_zero_12_88;
if (reset == 1'b0 && ^(s_zero_12_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_88_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %89 = and i32 %88, -256*/
begin
s_zero_12_89 = (s_zero_12_88 & -32'd256);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %89 = and i32 %88, -256*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_89_reg <= s_zero_12_89;
if (reset == 1'b0 && ^(s_zero_12_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_89_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %90 = or i32 %89, 128*/
begin
s_zero_12_90 = (s_zero_12_89 | 32'd128);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %90 = or i32 %89, 128*/
if ((cur_state == LEGUP_F_s_zero_BB_12_33))
begin
s_zero_12_90_reg <= s_zero_12_90;
if (reset == 1'b0 && ^(s_zero_12_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_90_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %91 = add nsw i32 %90, %85*/
begin
s_zero_12_91 = (s_zero_12_90_reg + s_zero_12_85);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %91 = add nsw i32 %90, %85*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
s_zero_12_91_reg <= s_zero_12_91;
if (reset == 1'b0 && ^(s_zero_12_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_91_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
begin
s_zero_12_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_38))
begin
s_zero_12_92_reg <= s_zero_12_92;
if (reset == 1'b0 && ^(s_zero_12_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_92_reg"); $finish; end
end
end
always @(*) begin
s_zero_12_93 = s_zero_12_93_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %93 = mul nsw i32 %92, %82*/
if ((cur_state == LEGUP_F_s_zero_BB_12_39))
begin
s_zero_12_93_reg <= s_zero_12_93;
if (reset == 1'b0 && ^(s_zero_12_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_93_reg"); $finish; end
end
/* s_zero: %12*/
/*   %93 = mul nsw i32 %92, %82*/
if ((cur_state == LEGUP_F_s_zero_BB_12_39))
begin
s_zero_12_93_reg <= s_zero_12_93;
if (reset == 1'b0 && ^(s_zero_12_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_93_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %94 = ashr i32 %93, 15*/
begin
s_zero_12_94 = ($signed(s_zero_12_93) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %94 = ashr i32 %93, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_12_39))
begin
s_zero_12_94_reg <= s_zero_12_94;
if (reset == 1'b0 && ^(s_zero_12_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_94_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %95 = add i32 %37, %22*/
begin
s_zero_12_95 = (s_zero_12_37 + s_zero_12_22_reg);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %95 = add i32 %37, %22*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
s_zero_12_95_reg <= s_zero_12_95;
if (reset == 1'b0 && ^(s_zero_12_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_95_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %96 = add i32 %95, %52*/
begin
s_zero_12_96 = (s_zero_12_95_reg + s_zero_12_52);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %96 = add i32 %95, %52*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
s_zero_12_96_reg <= s_zero_12_96;
if (reset == 1'b0 && ^(s_zero_12_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_96_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %97 = add i32 %96, %67*/
begin
s_zero_12_97 = (s_zero_12_96_reg + s_zero_12_67);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %97 = add i32 %96, %67*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
s_zero_12_97_reg <= s_zero_12_97;
if (reset == 1'b0 && ^(s_zero_12_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_97_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %98 = add i32 %97, %81*/
begin
s_zero_12_98 = (s_zero_12_97_reg + s_zero_12_81);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %98 = add i32 %97, %81*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
s_zero_12_98_reg <= s_zero_12_98;
if (reset == 1'b0 && ^(s_zero_12_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_98_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %12*/
/*   %99 = add i32 %98, %94*/
begin
s_zero_12_99 = (s_zero_12_98_reg + s_zero_12_94);
end
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %99 = add i32 %98, %94*/
if ((cur_state == LEGUP_F_s_zero_BB_12_39))
begin
s_zero_12_99_reg <= s_zero_12_99;
if (reset == 1'b0 && ^(s_zero_12_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_12_99_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %101 = getelementptr inbounds i32* %3, i32 5*/
begin
s_zero_100_101 = (s_zero_0_3_reg + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %101 = getelementptr inbounds i32* %3, i32 5*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_101_reg <= s_zero_100_101;
if (reset == 1'b0 && ^(s_zero_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_101_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
begin
s_zero_100_102 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
s_zero_100_102_reg <= s_zero_100_102;
if (reset == 1'b0 && ^(s_zero_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_102_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_103 = s_zero_100_103_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %103 = mul nsw i32 %102, %5*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
s_zero_100_103_reg <= s_zero_100_103;
if (reset == 1'b0 && ^(s_zero_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_103_reg"); $finish; end
end
/* s_zero: %100*/
/*   %103 = mul nsw i32 %102, %5*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
s_zero_100_103_reg <= s_zero_100_103;
if (reset == 1'b0 && ^(s_zero_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_103_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %104 = ashr i32 %103, 15*/
begin
s_zero_100_104 = ($signed(s_zero_100_103) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %104 = ashr i32 %103, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
s_zero_100_104_reg <= s_zero_100_104;
if (reset == 1'b0 && ^(s_zero_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_104_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %105 = getelementptr inbounds i32* %3, i32 3*/
begin
s_zero_100_105 = (s_zero_0_3_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %105 = getelementptr inbounds i32* %3, i32 3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_105_reg <= s_zero_100_105;
if (reset == 1'b0 && ^(s_zero_100_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_105_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
begin
s_zero_100_106 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_44))
begin
s_zero_100_106_reg <= s_zero_100_106;
if (reset == 1'b0 && ^(s_zero_100_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_106_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %107 = getelementptr inbounds i32* %7, i32 4*/
begin
s_zero_100_107 = (s_zero_0_7_reg + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %107 = getelementptr inbounds i32* %7, i32 4*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_107_reg <= s_zero_100_107;
if (reset == 1'b0 && ^(s_zero_100_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_107_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
begin
s_zero_100_108 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_44))
begin
s_zero_100_108_reg <= s_zero_100_108;
if (reset == 1'b0 && ^(s_zero_100_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_108_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_109 = s_zero_100_109_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %109 = mul nsw i32 %108, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
s_zero_100_109_reg <= s_zero_100_109;
if (reset == 1'b0 && ^(s_zero_100_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_109_reg"); $finish; end
end
/* s_zero: %100*/
/*   %109 = mul nsw i32 %108, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
s_zero_100_109_reg <= s_zero_100_109;
if (reset == 1'b0 && ^(s_zero_100_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_109_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %110 = ashr i32 %109, 8*/
begin
s_zero_100_110 = ($signed(s_zero_100_109) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %110 = ashr i32 %109, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
s_zero_100_110_reg <= s_zero_100_110;
if (reset == 1'b0 && ^(s_zero_100_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_110_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
begin
s_zero_100_111 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
s_zero_100_111_reg <= s_zero_100_111;
if (reset == 1'b0 && ^(s_zero_100_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_111_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_112 = s_zero_100_112_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %112 = mul nsw i32 %111, %106*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
s_zero_100_112_reg <= s_zero_100_112;
if (reset == 1'b0 && ^(s_zero_100_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_112_reg"); $finish; end
end
/* s_zero: %100*/
/*   %112 = mul nsw i32 %111, %106*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
s_zero_100_112_reg <= s_zero_100_112;
if (reset == 1'b0 && ^(s_zero_100_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_112_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %113 = ashr i32 %112, 15*/
begin
s_zero_100_113 = ($signed(s_zero_100_112) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %113 = ashr i32 %112, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
s_zero_100_113_reg <= s_zero_100_113;
if (reset == 1'b0 && ^(s_zero_100_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_113_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %114 = getelementptr inbounds i32* %3, i32 2*/
begin
s_zero_100_114 = (s_zero_0_3_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %114 = getelementptr inbounds i32* %3, i32 2*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_114_reg <= s_zero_100_114;
if (reset == 1'b0 && ^(s_zero_100_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_114_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
begin
s_zero_100_115 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_49))
begin
s_zero_100_115_reg <= s_zero_100_115;
if (reset == 1'b0 && ^(s_zero_100_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_115_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %116 = getelementptr inbounds i32* %7, i32 3*/
begin
s_zero_100_116 = (s_zero_0_7_reg + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %116 = getelementptr inbounds i32* %7, i32 3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_116_reg <= s_zero_100_116;
if (reset == 1'b0 && ^(s_zero_100_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_116_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
begin
s_zero_100_117 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_49))
begin
s_zero_100_117_reg <= s_zero_100_117;
if (reset == 1'b0 && ^(s_zero_100_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_117_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_118 = s_zero_100_118_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %118 = mul nsw i32 %117, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
s_zero_100_118_reg <= s_zero_100_118;
if (reset == 1'b0 && ^(s_zero_100_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_118_reg"); $finish; end
end
/* s_zero: %100*/
/*   %118 = mul nsw i32 %117, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
s_zero_100_118_reg <= s_zero_100_118;
if (reset == 1'b0 && ^(s_zero_100_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_118_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %119 = ashr i32 %118, 8*/
begin
s_zero_100_119 = ($signed(s_zero_100_118) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %119 = ashr i32 %118, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
s_zero_100_119_reg <= s_zero_100_119;
if (reset == 1'b0 && ^(s_zero_100_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_119_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
begin
s_zero_100_120 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
s_zero_100_120_reg <= s_zero_100_120;
if (reset == 1'b0 && ^(s_zero_100_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_120_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_121 = s_zero_100_121_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %121 = mul nsw i32 %120, %115*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
s_zero_100_121_reg <= s_zero_100_121;
if (reset == 1'b0 && ^(s_zero_100_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_121_reg"); $finish; end
end
/* s_zero: %100*/
/*   %121 = mul nsw i32 %120, %115*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
s_zero_100_121_reg <= s_zero_100_121;
if (reset == 1'b0 && ^(s_zero_100_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_121_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %122 = ashr i32 %121, 15*/
begin
s_zero_100_122 = ($signed(s_zero_100_121) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %122 = ashr i32 %121, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
s_zero_100_122_reg <= s_zero_100_122;
if (reset == 1'b0 && ^(s_zero_100_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_122_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %123 = getelementptr inbounds i32* %3, i32 1*/
begin
s_zero_100_123 = (s_zero_0_3_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %123 = getelementptr inbounds i32* %3, i32 1*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_123_reg <= s_zero_100_123;
if (reset == 1'b0 && ^(s_zero_100_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_123_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
begin
s_zero_100_124 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_54))
begin
s_zero_100_124_reg <= s_zero_100_124;
if (reset == 1'b0 && ^(s_zero_100_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_124_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %125 = getelementptr inbounds i32* %7, i32 2*/
begin
s_zero_100_125 = (s_zero_0_7_reg + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %125 = getelementptr inbounds i32* %7, i32 2*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_125_reg <= s_zero_100_125;
if (reset == 1'b0 && ^(s_zero_100_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_125_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
begin
s_zero_100_126 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_54))
begin
s_zero_100_126_reg <= s_zero_100_126;
if (reset == 1'b0 && ^(s_zero_100_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_126_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_127 = s_zero_100_127_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %127 = mul nsw i32 %126, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
s_zero_100_127_reg <= s_zero_100_127;
if (reset == 1'b0 && ^(s_zero_100_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_127_reg"); $finish; end
end
/* s_zero: %100*/
/*   %127 = mul nsw i32 %126, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
s_zero_100_127_reg <= s_zero_100_127;
if (reset == 1'b0 && ^(s_zero_100_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_127_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %128 = ashr i32 %127, 8*/
begin
s_zero_100_128 = ($signed(s_zero_100_127) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %128 = ashr i32 %127, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
s_zero_100_128_reg <= s_zero_100_128;
if (reset == 1'b0 && ^(s_zero_100_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_128_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
begin
s_zero_100_129 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
s_zero_100_129_reg <= s_zero_100_129;
if (reset == 1'b0 && ^(s_zero_100_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_129_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_130 = s_zero_100_130_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %130 = mul nsw i32 %129, %124*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
s_zero_100_130_reg <= s_zero_100_130;
if (reset == 1'b0 && ^(s_zero_100_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_130_reg"); $finish; end
end
/* s_zero: %100*/
/*   %130 = mul nsw i32 %129, %124*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
s_zero_100_130_reg <= s_zero_100_130;
if (reset == 1'b0 && ^(s_zero_100_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_130_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %131 = ashr i32 %130, 15*/
begin
s_zero_100_131 = ($signed(s_zero_100_130) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %131 = ashr i32 %130, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
s_zero_100_131_reg <= s_zero_100_131;
if (reset == 1'b0 && ^(s_zero_100_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_131_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
begin
s_zero_100_132 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_59))
begin
s_zero_100_132_reg <= s_zero_100_132;
if (reset == 1'b0 && ^(s_zero_100_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_132_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %133 = getelementptr inbounds i32* %7, i32 1*/
begin
s_zero_100_133 = (s_zero_0_7_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %133 = getelementptr inbounds i32* %7, i32 1*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_133_reg <= s_zero_100_133;
if (reset == 1'b0 && ^(s_zero_100_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_133_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
begin
s_zero_100_134 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_59))
begin
s_zero_100_134_reg <= s_zero_100_134;
if (reset == 1'b0 && ^(s_zero_100_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_134_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_135 = s_zero_100_135_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %135 = mul nsw i32 %134, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
s_zero_100_135_reg <= s_zero_100_135;
if (reset == 1'b0 && ^(s_zero_100_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_135_reg"); $finish; end
end
/* s_zero: %100*/
/*   %135 = mul nsw i32 %134, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
s_zero_100_135_reg <= s_zero_100_135;
if (reset == 1'b0 && ^(s_zero_100_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_135_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %136 = ashr i32 %135, 8*/
begin
s_zero_100_136 = ($signed(s_zero_100_135) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %136 = ashr i32 %135, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
s_zero_100_136_reg <= s_zero_100_136;
if (reset == 1'b0 && ^(s_zero_100_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_136_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
begin
s_zero_100_137 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_64))
begin
s_zero_100_137_reg <= s_zero_100_137;
if (reset == 1'b0 && ^(s_zero_100_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_137_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_138 = s_zero_100_138_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %138 = mul nsw i32 %137, %132*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_138_reg <= s_zero_100_138;
if (reset == 1'b0 && ^(s_zero_100_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_138_reg"); $finish; end
end
/* s_zero: %100*/
/*   %138 = mul nsw i32 %137, %132*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_138_reg <= s_zero_100_138;
if (reset == 1'b0 && ^(s_zero_100_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_138_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %139 = ashr i32 %138, 15*/
begin
s_zero_100_139 = ($signed(s_zero_100_138) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %139 = ashr i32 %138, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_139_reg <= s_zero_100_139;
if (reset == 1'b0 && ^(s_zero_100_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_139_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %140 = shl nsw i32 %cur_diff, 1*/
begin
s_zero_100_140 = (arg_cur_diff <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %140 = shl nsw i32 %cur_diff, 1*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
s_zero_100_140_reg <= s_zero_100_140;
if (reset == 1'b0 && ^(s_zero_100_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_140_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
begin
s_zero_100_141 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_64))
begin
s_zero_100_141_reg <= s_zero_100_141;
if (reset == 1'b0 && ^(s_zero_100_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_141_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_142 = s_zero_100_142_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %142 = mul nsw i32 %141, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_142_reg <= s_zero_100_142;
if (reset == 1'b0 && ^(s_zero_100_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_142_reg"); $finish; end
end
/* s_zero: %100*/
/*   %142 = mul nsw i32 %141, 255*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_142_reg <= s_zero_100_142;
if (reset == 1'b0 && ^(s_zero_100_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_142_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %143 = ashr i32 %142, 8*/
begin
s_zero_100_143 = ($signed(s_zero_100_142) >>> 32'd8);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %143 = ashr i32 %142, 8*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_143_reg <= s_zero_100_143;
if (reset == 1'b0 && ^(s_zero_100_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_143_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
begin
s_zero_100_144 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_69))
begin
s_zero_100_144_reg <= s_zero_100_144;
if (reset == 1'b0 && ^(s_zero_100_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_144_reg"); $finish; end
end
end
always @(*) begin
s_zero_100_145 = s_zero_100_145_stage0_reg;
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %145 = mul nsw i32 %144, %140*/
if ((cur_state == LEGUP_F_s_zero_BB_100_70))
begin
s_zero_100_145_reg <= s_zero_100_145;
if (reset == 1'b0 && ^(s_zero_100_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_145_reg"); $finish; end
end
/* s_zero: %100*/
/*   %145 = mul nsw i32 %144, %140*/
if ((cur_state == LEGUP_F_s_zero_BB_100_70))
begin
s_zero_100_145_reg <= s_zero_100_145;
if (reset == 1'b0 && ^(s_zero_100_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_145_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %146 = ashr i32 %145, 15*/
begin
s_zero_100_146 = ($signed(s_zero_100_145) >>> 32'd15);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %146 = ashr i32 %145, 15*/
if ((cur_state == LEGUP_F_s_zero_BB_100_70))
begin
s_zero_100_146_reg <= s_zero_100_146;
if (reset == 1'b0 && ^(s_zero_100_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_146_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %147 = add i32 %113, %104*/
begin
s_zero_100_147 = (s_zero_100_113 + s_zero_100_104_reg);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %147 = add i32 %113, %104*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
s_zero_100_147_reg <= s_zero_100_147;
if (reset == 1'b0 && ^(s_zero_100_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_147_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %148 = add i32 %147, %122*/
begin
s_zero_100_148 = (s_zero_100_147_reg + s_zero_100_122);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %148 = add i32 %147, %122*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
s_zero_100_148_reg <= s_zero_100_148;
if (reset == 1'b0 && ^(s_zero_100_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_148_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %149 = add i32 %148, %131*/
begin
s_zero_100_149 = (s_zero_100_148_reg + s_zero_100_131);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %149 = add i32 %148, %131*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
s_zero_100_149_reg <= s_zero_100_149;
if (reset == 1'b0 && ^(s_zero_100_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_149_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %150 = add i32 %149, %139*/
begin
s_zero_100_150 = (s_zero_100_149_reg + s_zero_100_139);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %150 = add i32 %149, %139*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
s_zero_100_150_reg <= s_zero_100_150;
if (reset == 1'b0 && ^(s_zero_100_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_150_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %100*/
/*   %151 = add i32 %150, %146*/
begin
s_zero_100_151 = (s_zero_100_150_reg + s_zero_100_146);
end
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %151 = add i32 %150, %146*/
if ((cur_state == LEGUP_F_s_zero_BB_100_70))
begin
s_zero_100_151_reg <= s_zero_100_151;
if (reset == 1'b0 && ^(s_zero_100_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_100_151_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %152*/
/*   %s_zero.0 = phi i32 [ %99, %12 ], [ %151, %100 ]*/
if (((cur_state == LEGUP_F_s_zero_BB_12_39) & (memory_controller_waitrequest == 1'd0)))
begin
s_zero_152_s_zero_0 = s_zero_12_99;
end
/* s_zero: %152*/
/*   %s_zero.0 = phi i32 [ %99, %12 ], [ %151, %100 ]*/
else /* if (((cur_state == LEGUP_F_s_zero_BB_100_70) & (memory_controller_waitrequest == 1'd0))) */
begin
s_zero_152_s_zero_0 = s_zero_100_151;
end
end
always @(posedge clk) begin
/* s_zero: %152*/
/*   %s_zero.0 = phi i32 [ %99, %12 ], [ %151, %100 ]*/
if (((cur_state == LEGUP_F_s_zero_BB_12_39) & (memory_controller_waitrequest == 1'd0)))
begin
s_zero_152_s_zero_0_reg <= s_zero_152_s_zero_0;
if (reset == 1'b0 && ^(s_zero_152_s_zero_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_152_s_zero_0_reg"); $finish; end
end
/* s_zero: %152*/
/*   %s_zero.0 = phi i32 [ %99, %12 ], [ %151, %100 ]*/
if (((cur_state == LEGUP_F_s_zero_BB_100_70) & (memory_controller_waitrequest == 1'd0)))
begin
s_zero_152_s_zero_0_reg <= s_zero_152_s_zero_0;
if (reset == 1'b0 && ^(s_zero_152_s_zero_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_152_s_zero_0_reg"); $finish; end
end
end
always @(*) begin
/* s_zero: %152*/
/*   %153 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 2*/
begin
s_zero_152_153 = (arg_band + 8);
end
end
always @(posedge clk) begin
/* s_zero: %152*/
/*   %153 = getelementptr inbounds %struct.G722Band* %band, i32 0, i32 2*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
s_zero_152_153_reg <= s_zero_152_153;
if (reset == 1'b0 && ^(s_zero_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_152_153_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_s_zero_0_10_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %0*/
/*   %10 = mul nsw i32 %9, 255*/
if ((lpm_mult_s_zero_0_10_en == 1'd1))
begin
s_zero_0_10_stage0_reg <= (s_zero_0_9 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %27 = mul nsw i32 %26, 255*/
if ((lpm_mult_s_zero_12_27_en == 1'd1))
begin
s_zero_12_27_stage0_reg <= (s_zero_12_26 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_21_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %21 = mul nsw i32 %20, %5*/
if ((lpm_mult_s_zero_12_21_en == 1'd1))
begin
s_zero_12_21_stage0_reg <= (s_zero_12_20 * s_zero_0_5_reg);
end
end
always @(*) begin
lpm_mult_s_zero_12_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %42 = mul nsw i32 %41, 255*/
if ((lpm_mult_s_zero_12_42_en == 1'd1))
begin
s_zero_12_42_stage0_reg <= (s_zero_12_41 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %36 = mul nsw i32 %35, %24*/
if ((lpm_mult_s_zero_12_36_en == 1'd1))
begin
s_zero_12_36_stage0_reg <= (s_zero_12_35 * s_zero_12_24_reg);
end
end
always @(*) begin
lpm_mult_s_zero_12_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %57 = mul nsw i32 %56, 255*/
if ((lpm_mult_s_zero_12_57_en == 1'd1))
begin
s_zero_12_57_stage0_reg <= (s_zero_12_56 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %51 = mul nsw i32 %50, %39*/
if ((lpm_mult_s_zero_12_51_en == 1'd1))
begin
s_zero_12_51_stage0_reg <= (s_zero_12_50 * s_zero_12_39_reg);
end
end
always @(*) begin
lpm_mult_s_zero_12_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %71 = mul nsw i32 %70, 255*/
if ((lpm_mult_s_zero_12_71_en == 1'd1))
begin
s_zero_12_71_stage0_reg <= (s_zero_12_70 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_66_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %66 = mul nsw i32 %65, %54*/
if ((lpm_mult_s_zero_12_66_en == 1'd1))
begin
s_zero_12_66_stage0_reg <= (s_zero_12_65 * s_zero_12_54_reg);
end
end
always @(*) begin
lpm_mult_s_zero_12_84_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %84 = mul nsw i32 %83, 255*/
if ((lpm_mult_s_zero_12_84_en == 1'd1))
begin
s_zero_12_84_stage0_reg <= (s_zero_12_83 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_12_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %80 = mul nsw i32 %79, %68*/
if ((lpm_mult_s_zero_12_80_en == 1'd1))
begin
s_zero_12_80_stage0_reg <= (s_zero_12_79 * s_zero_12_68_reg);
end
end
always @(*) begin
lpm_mult_s_zero_12_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %12*/
/*   %93 = mul nsw i32 %92, %82*/
if ((lpm_mult_s_zero_12_93_en == 1'd1))
begin
s_zero_12_93_stage0_reg <= (s_zero_12_92 * s_zero_12_82_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %109 = mul nsw i32 %108, 255*/
if ((lpm_mult_s_zero_100_109_en == 1'd1))
begin
s_zero_100_109_stage0_reg <= (s_zero_100_108 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_100_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %103 = mul nsw i32 %102, %5*/
if ((lpm_mult_s_zero_100_103_en == 1'd1))
begin
s_zero_100_103_stage0_reg <= (s_zero_100_102 * s_zero_0_5_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_118_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %118 = mul nsw i32 %117, 255*/
if ((lpm_mult_s_zero_100_118_en == 1'd1))
begin
s_zero_100_118_stage0_reg <= (s_zero_100_117 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_100_112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %112 = mul nsw i32 %111, %106*/
if ((lpm_mult_s_zero_100_112_en == 1'd1))
begin
s_zero_100_112_stage0_reg <= (s_zero_100_111 * s_zero_100_106_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %127 = mul nsw i32 %126, 255*/
if ((lpm_mult_s_zero_100_127_en == 1'd1))
begin
s_zero_100_127_stage0_reg <= (s_zero_100_126 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_100_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %121 = mul nsw i32 %120, %115*/
if ((lpm_mult_s_zero_100_121_en == 1'd1))
begin
s_zero_100_121_stage0_reg <= (s_zero_100_120 * s_zero_100_115_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %135 = mul nsw i32 %134, 255*/
if ((lpm_mult_s_zero_100_135_en == 1'd1))
begin
s_zero_100_135_stage0_reg <= (s_zero_100_134 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_100_130_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %130 = mul nsw i32 %129, %124*/
if ((lpm_mult_s_zero_100_130_en == 1'd1))
begin
s_zero_100_130_stage0_reg <= (s_zero_100_129 * s_zero_100_124_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %138 = mul nsw i32 %137, %132*/
if ((lpm_mult_s_zero_100_138_en == 1'd1))
begin
s_zero_100_138_stage0_reg <= (s_zero_100_137 * s_zero_100_132_reg);
end
end
always @(*) begin
lpm_mult_s_zero_100_142_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %142 = mul nsw i32 %141, 255*/
if ((lpm_mult_s_zero_100_142_en == 1'd1))
begin
s_zero_100_142_stage0_reg <= (s_zero_100_141 * 32'd255);
end
end
always @(*) begin
lpm_mult_s_zero_100_145_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* s_zero: %100*/
/*   %145 = mul nsw i32 %144, %140*/
if ((lpm_mult_s_zero_100_145_en == 1'd1))
begin
s_zero_100_145_stage0_reg <= (s_zero_100_144 * s_zero_100_140_reg);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* s_zero: %152*/
/*   ret void*/
if ((cur_state == LEGUP_F_s_zero_BB_152_72))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %5, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_10))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %24, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %39, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %54, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %68, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %82, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %5, i32* %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_41))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %106, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %115, i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %124, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %132, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %140, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_66))
begin
memory_controller_enable_a = 1'd1;
end
/* s_zero: %152*/
/*   store i32 %s_zero.0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_address_a = s_zero_0_2;
end
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_address_a = s_zero_0_4;
end
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
memory_controller_address_a = s_zero_12_13;
end
/* s_zero: %12*/
/*   store i32 %5, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_10))
begin
memory_controller_address_a = s_zero_12_13_reg;
end
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_address_a = s_zero_12_23_reg;
end
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_address_a = s_zero_0_4_reg;
end
/* s_zero: %12*/
/*   store i32 %24, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
memory_controller_address_a = s_zero_0_4_reg;
end
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_address_a = s_zero_12_38_reg;
end
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_address_a = s_zero_12_23_reg;
end
/* s_zero: %12*/
/*   store i32 %39, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
memory_controller_address_a = s_zero_12_23_reg;
end
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_address_a = s_zero_12_53_reg;
end
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_address_a = s_zero_12_38_reg;
end
/* s_zero: %12*/
/*   store i32 %54, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
memory_controller_address_a = s_zero_12_38_reg;
end
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_address_a = s_zero_0_3_reg;
end
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_address_a = s_zero_12_53_reg;
end
/* s_zero: %12*/
/*   store i32 %68, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
memory_controller_address_a = s_zero_12_53_reg;
end
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_address_a = s_zero_0_3_reg;
end
/* s_zero: %12*/
/*   store i32 %82, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
memory_controller_address_a = s_zero_0_3_reg;
end
/* s_zero: %100*/
/*   store i32 %5, i32* %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_41))
begin
memory_controller_address_a = s_zero_100_101_reg;
end
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_address_a = s_zero_100_105_reg;
end
/* s_zero: %100*/
/*   store i32 %106, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
memory_controller_address_a = s_zero_0_4_reg;
end
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_address_a = s_zero_100_114_reg;
end
/* s_zero: %100*/
/*   store i32 %115, i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
memory_controller_address_a = s_zero_100_105_reg;
end
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_address_a = s_zero_100_123_reg;
end
/* s_zero: %100*/
/*   store i32 %124, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
memory_controller_address_a = s_zero_100_114_reg;
end
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_address_a = s_zero_0_3_reg;
end
/* s_zero: %100*/
/*   store i32 %132, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
memory_controller_address_a = s_zero_100_123_reg;
end
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_address_a = s_zero_100_133_reg;
end
/* s_zero: %100*/
/*   store i32 %140, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_66))
begin
memory_controller_address_a = s_zero_0_3_reg;
end
/* s_zero: %152*/
/*   store i32 %s_zero.0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
memory_controller_address_a = s_zero_152_153;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %5, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_10))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %24, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %39, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %54, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %68, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %82, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %5, i32* %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_41))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %106, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %115, i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %124, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %132, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %140, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_66))
begin
memory_controller_write_enable_a = 1'd1;
end
/* s_zero: %152*/
/*   store i32 %s_zero.0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %5, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_10))
begin
memory_controller_in_a = s_zero_0_5_reg;
end
/* s_zero: %12*/
/*   store i32 %24, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
memory_controller_in_a = s_zero_12_24_reg;
end
/* s_zero: %12*/
/*   store i32 %39, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
memory_controller_in_a = s_zero_12_39_reg;
end
/* s_zero: %12*/
/*   store i32 %54, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
memory_controller_in_a = s_zero_12_54_reg;
end
/* s_zero: %12*/
/*   store i32 %68, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
memory_controller_in_a = s_zero_12_68_reg;
end
/* s_zero: %12*/
/*   store i32 %82, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
memory_controller_in_a = s_zero_12_82_reg;
end
/* s_zero: %100*/
/*   store i32 %5, i32* %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_41))
begin
memory_controller_in_a = s_zero_0_5_reg;
end
/* s_zero: %100*/
/*   store i32 %106, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
memory_controller_in_a = s_zero_100_106_reg;
end
/* s_zero: %100*/
/*   store i32 %115, i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
memory_controller_in_a = s_zero_100_115_reg;
end
/* s_zero: %100*/
/*   store i32 %124, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
memory_controller_in_a = s_zero_100_124_reg;
end
/* s_zero: %100*/
/*   store i32 %132, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
memory_controller_in_a = s_zero_100_132_reg;
end
/* s_zero: %100*/
/*   store i32 %140, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_66))
begin
memory_controller_in_a = s_zero_100_140_reg;
end
/* s_zero: %152*/
/*   store i32 %s_zero.0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
memory_controller_in_a = s_zero_152_s_zero_0_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* s_zero: %0*/
/*   %3 = load i32** %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %14 = load i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_7))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %5, i32* %13, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_10))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %24 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %29 = load i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %24, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_15))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %39 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %44 = load i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %39, i32* %23, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_20))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %54 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %59 = load i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %54, i32* %38, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_25))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %68 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %73 = load i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %68, i32* %53, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_30))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   %86 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %82, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_35))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %5, i32* %101, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_41))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   %106 = load i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %106, i32* %4, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_46))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   %115 = load i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %115, i32* %105, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_51))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   %124 = load i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %124, i32* %114, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_56))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   %132 = load i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %132, i32* %123, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_61))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   %137 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %140, i32* %3, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_66))
begin
memory_controller_size_a = 2'd2;
end
/* s_zero: %152*/
/*   store i32 %s_zero.0, i32* %153, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_152_71))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %19, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %34, i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %49, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %64, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %78, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_32))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   store i32 %91, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_36))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %11, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_43))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %110, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_48))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %119, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_53))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %128, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_58))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %136, i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   store i32 %143, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
memory_controller_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_67))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_address_b = s_zero_0_6;
end
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_address_b = s_zero_0_8;
end
/* s_zero: %12*/
/*   store i32 %19, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
memory_controller_address_b = s_zero_0_8_reg;
end
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_address_b = s_zero_12_25_reg;
end
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_address_b = s_zero_0_8_reg;
end
/* s_zero: %12*/
/*   store i32 %34, i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
memory_controller_address_b = s_zero_12_25_reg;
end
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_address_b = s_zero_12_40_reg;
end
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_address_b = s_zero_12_25_reg;
end
/* s_zero: %12*/
/*   store i32 %49, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
memory_controller_address_b = s_zero_12_40_reg;
end
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_address_b = s_zero_12_55_reg;
end
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_address_b = s_zero_12_40_reg;
end
/* s_zero: %12*/
/*   store i32 %64, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
memory_controller_address_b = s_zero_12_55_reg;
end
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_address_b = s_zero_12_69_reg;
end
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_address_b = s_zero_12_55_reg;
end
/* s_zero: %12*/
/*   store i32 %78, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
memory_controller_address_b = s_zero_12_69_reg;
end
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_32))
begin
memory_controller_address_b = s_zero_12_69_reg;
end
/* s_zero: %12*/
/*   store i32 %91, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_36))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
/* s_zero: %100*/
/*   store i32 %11, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
memory_controller_address_b = s_zero_0_8_reg;
end
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_address_b = s_zero_100_107_reg;
end
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_43))
begin
memory_controller_address_b = s_zero_0_8_reg;
end
/* s_zero: %100*/
/*   store i32 %110, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
memory_controller_address_b = s_zero_100_107_reg;
end
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_address_b = s_zero_100_116_reg;
end
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_48))
begin
memory_controller_address_b = s_zero_100_107_reg;
end
/* s_zero: %100*/
/*   store i32 %119, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
memory_controller_address_b = s_zero_100_116_reg;
end
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_address_b = s_zero_100_125_reg;
end
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_53))
begin
memory_controller_address_b = s_zero_100_116_reg;
end
/* s_zero: %100*/
/*   store i32 %128, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
memory_controller_address_b = s_zero_100_125_reg;
end
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_address_b = s_zero_100_133_reg;
end
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_58))
begin
memory_controller_address_b = s_zero_100_125_reg;
end
/* s_zero: %100*/
/*   store i32 %136, i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
memory_controller_address_b = s_zero_100_133_reg;
end
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
/* s_zero: %100*/
/*   store i32 %143, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_67))
begin
memory_controller_address_b = s_zero_0_7_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %19, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %34, i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %49, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %64, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %78, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %91, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_36))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %11, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %110, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %119, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %128, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %136, i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* s_zero: %100*/
/*   store i32 %143, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_67))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* s_zero: %12*/
/*   store i32 %19, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
memory_controller_in_b = s_zero_12_19;
end
/* s_zero: %12*/
/*   store i32 %34, i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
memory_controller_in_b = s_zero_12_34;
end
/* s_zero: %12*/
/*   store i32 %49, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
memory_controller_in_b = s_zero_12_49;
end
/* s_zero: %12*/
/*   store i32 %64, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
memory_controller_in_b = s_zero_12_64;
end
/* s_zero: %12*/
/*   store i32 %78, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
memory_controller_in_b = s_zero_12_78;
end
/* s_zero: %12*/
/*   store i32 %91, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
memory_controller_in_b = s_zero_12_91;
end
/* s_zero: %100*/
/*   store i32 %11, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
memory_controller_in_b = s_zero_0_11_reg;
end
/* s_zero: %100*/
/*   store i32 %110, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
memory_controller_in_b = s_zero_100_110;
end
/* s_zero: %100*/
/*   store i32 %119, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
memory_controller_in_b = s_zero_100_119;
end
/* s_zero: %100*/
/*   store i32 %128, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
memory_controller_in_b = s_zero_100_128;
end
/* s_zero: %100*/
/*   store i32 %136, i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
memory_controller_in_b = s_zero_100_136;
end
/* s_zero: %100*/
/*   store i32 %143, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
memory_controller_in_b = s_zero_100_143;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* s_zero: %0*/
/*   %7 = load i32** %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_s_zero_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %19, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_9))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %26 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_11))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %20 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_12))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %34, i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_14))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %41 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_16))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %35 = load i32* %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_17))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %49, i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_19))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %56 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_21))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %50 = load i32* %40, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_22))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %64, i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_24))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %70 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_26))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %65 = load i32* %55, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_27))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %78, i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_29))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %83 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_31))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %79 = load i32* %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_32))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   store i32 %91, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_34))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %12*/
/*   %92 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_12_36))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %11, i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_40))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %108 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_42))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %102 = load i32* %8, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_43))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %110, i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_45))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %117 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_47))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %111 = load i32* %107, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_48))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %119, i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_50))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %126 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_52))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %120 = load i32* %116, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_53))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %128, i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_55))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %134 = load i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_57))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %129 = load i32* %125, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_58))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %136, i32* %133, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_60))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %141 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_62))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   store i32 %143, i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_65))
begin
memory_controller_size_b = 2'd2;
end
/* s_zero: %100*/
/*   %144 = load i32* %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_s_zero_BB_100_67))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  s_zero_start;
reg [31:0] s_zero_arg_cur_diff;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_arg_band;
wire  s_zero_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_memory_controller_address_a;
wire  s_zero_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] s_zero_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] s_zero_memory_controller_out_a;
wire [1:0] s_zero_memory_controller_size_a;
wire  s_zero_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] s_zero_memory_controller_address_b;
wire  s_zero_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] s_zero_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] s_zero_memory_controller_out_b;
wire [1:0] s_zero_memory_controller_size_b;
reg  s_zero_memory_controller_waitrequest;
wire  s_zero_finish;
reg  s_zero_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


s_zero s_zero_inst (
	.memory_controller_enable_a (s_zero_memory_controller_enable_a),
	.memory_controller_address_a (s_zero_memory_controller_address_a),
	.memory_controller_write_enable_a (s_zero_memory_controller_write_enable_a),
	.memory_controller_in_a (s_zero_memory_controller_in_a),
	.memory_controller_size_a (s_zero_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (s_zero_memory_controller_enable_b),
	.memory_controller_address_b (s_zero_memory_controller_address_b),
	.memory_controller_write_enable_b (s_zero_memory_controller_write_enable_b),
	.memory_controller_in_b (s_zero_memory_controller_in_b),
	.memory_controller_size_b (s_zero_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (s_zero_start),
	.finish (s_zero_finish),
	.arg_cur_diff (s_zero_arg_cur_diff),
	.arg_band (s_zero_arg_band)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (s_zero_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (s_zero_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
s_zero_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_start"); $finish; end
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
s_zero_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
s_zero_arg_cur_diff <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_arg_cur_diff"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
s_zero_arg_band <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to s_zero_arg_band"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
begin
s_zero_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
begin
s_zero_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
s_zero_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
s_zero_finish_final = s_zero_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = s_zero_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = s_zero_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = s_zero_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = s_zero_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = s_zero_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = s_zero_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = s_zero_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = s_zero_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = s_zero_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = s_zero_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = s_zero_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = s_zero_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = s_zero_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = s_zero_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = s_zero_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = s_zero_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = s_zero_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = s_zero_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = s_zero_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @s_zero(i32 undef, %struct.G722Band* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = s_zero_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
