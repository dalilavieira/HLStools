//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:55:54 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module calc_crc8
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_data,
	arg_crc
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_calc_crc8_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_2 = 5'd2;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_3 = 5'd3;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_4 = 5'd4;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_5 = 5'd5;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_6 = 5'd6;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_7 = 5'd7;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_8 = 5'd8;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_9 = 5'd9;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_10 = 5'd10;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_11 = 5'd11;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_12 = 5'd12;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_13 = 5'd13;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_14 = 5'd14;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_15 = 5'd15;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_16 = 5'd16;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_17 = 5'd17;
parameter [4:0] LEGUP_F_calc_crc8_BB__preheader_18 = 5'd18;
parameter [4:0] LEGUP_F_calc_crc8_BB_230_19 = 5'd19;
parameter [4:0] LEGUP_F_calc_crc8_BB_230_20 = 5'd20;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [31:0] arg_data;
input [31:0] arg_crc;
reg [4:0] cur_state;
reg [31:0] calc_crc8__preheader_1;
reg [31:0] calc_crc8__preheader_1_reg;
reg [31:0] calc_crc8__preheader_2;
reg [31:0] calc_crc8__preheader_2_reg;
reg [31:0] calc_crc8__preheader_3;
reg [31:0] calc_crc8__preheader_3_reg;
reg [31:0] calc_crc8__preheader_4;
reg [31:0] calc_crc8__preheader_4_reg;
reg [31:0] calc_crc8__preheader_5;
reg [31:0] calc_crc8__preheader_5_reg;
reg [31:0] calc_crc8__preheader_6;
reg [31:0] calc_crc8__preheader_6_reg;
reg [31:0] calc_crc8__preheader_7;
reg [31:0] calc_crc8__preheader_7_reg;
reg [31:0] calc_crc8__preheader_8;
reg [31:0] calc_crc8__preheader_8_reg;
reg [31:0] calc_crc8__preheader_9;
reg [31:0] calc_crc8__preheader_9_reg;
reg [31:0] calc_crc8__preheader_10;
reg [31:0] calc_crc8__preheader_10_reg;
reg [31:0] calc_crc8__preheader_11;
reg [31:0] calc_crc8__preheader_11_reg;
reg [31:0] calc_crc8__preheader_12;
reg [31:0] calc_crc8__preheader_12_reg;
reg [31:0] calc_crc8__preheader_13;
reg [31:0] calc_crc8__preheader_13_reg;
reg [31:0] calc_crc8__preheader_14;
reg [31:0] calc_crc8__preheader_14_reg;
reg [31:0] calc_crc8__preheader_15;
reg [31:0] calc_crc8__preheader_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_16_reg;
reg [31:0] calc_crc8__preheader_17;
reg [31:0] calc_crc8__preheader_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_18_reg;
reg [31:0] calc_crc8__preheader_19;
reg [31:0] calc_crc8__preheader_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_20_reg;
reg [31:0] calc_crc8__preheader_21;
reg [31:0] calc_crc8__preheader_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_22_reg;
reg [31:0] calc_crc8__preheader_23;
reg [31:0] calc_crc8__preheader_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_24_reg;
reg [31:0] calc_crc8__preheader_25;
reg [31:0] calc_crc8__preheader_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_26_reg;
reg [31:0] calc_crc8__preheader_27;
reg [31:0] calc_crc8__preheader_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_28_reg;
reg [31:0] calc_crc8__preheader_29;
reg [31:0] calc_crc8__preheader_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_30_reg;
reg [31:0] calc_crc8__preheader_31;
reg [31:0] calc_crc8__preheader_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_32_reg;
reg [31:0] calc_crc8__preheader_33;
reg [31:0] calc_crc8__preheader_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_34_reg;
reg [31:0] calc_crc8__preheader_35;
reg [31:0] calc_crc8__preheader_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_36_reg;
reg [31:0] calc_crc8__preheader_37;
reg [31:0] calc_crc8__preheader_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_38_reg;
reg [31:0] calc_crc8__preheader_39;
reg [31:0] calc_crc8__preheader_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_40_reg;
reg [31:0] calc_crc8__preheader_41;
reg [31:0] calc_crc8__preheader_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_42_reg;
reg [31:0] calc_crc8__preheader_43;
reg [31:0] calc_crc8__preheader_43_reg;
reg [31:0] calc_crc8__preheader_44;
reg [31:0] calc_crc8__preheader_44_reg;
reg [31:0] calc_crc8__preheader_45;
reg [31:0] calc_crc8__preheader_45_reg;
reg [31:0] calc_crc8__preheader_46;
reg [31:0] calc_crc8__preheader_46_reg;
reg [31:0] calc_crc8__preheader_47;
reg [31:0] calc_crc8__preheader_47_reg;
reg [31:0] calc_crc8__preheader_48;
reg [31:0] calc_crc8__preheader_48_reg;
reg [31:0] calc_crc8__preheader_49;
reg [31:0] calc_crc8__preheader_49_reg;
reg [31:0] calc_crc8__preheader_50;
reg [31:0] calc_crc8__preheader_50_reg;
reg [31:0] calc_crc8__preheader_51;
reg [31:0] calc_crc8__preheader_51_reg;
reg [31:0] calc_crc8__preheader_52;
reg [31:0] calc_crc8__preheader_52_reg;
reg [31:0] calc_crc8__preheader_53;
reg [31:0] calc_crc8__preheader_53_reg;
reg [31:0] calc_crc8__preheader_54;
reg [31:0] calc_crc8__preheader_54_reg;
reg [31:0] calc_crc8__preheader_55;
reg [31:0] calc_crc8__preheader_55_reg;
reg [31:0] calc_crc8__preheader_56;
reg [31:0] calc_crc8__preheader_56_reg;
reg [31:0] calc_crc8__preheader_57;
reg [31:0] calc_crc8__preheader_57_reg;
reg [31:0] calc_crc8__preheader_58;
reg [31:0] calc_crc8__preheader_58_reg;
reg [31:0] calc_crc8__preheader_59;
reg [31:0] calc_crc8__preheader_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_60_reg;
reg [31:0] calc_crc8__preheader_61;
reg [31:0] calc_crc8__preheader_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_62_reg;
reg [31:0] calc_crc8__preheader_63;
reg [31:0] calc_crc8__preheader_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_64_reg;
reg [31:0] calc_crc8__preheader_65;
reg [31:0] calc_crc8__preheader_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_66_reg;
reg [31:0] calc_crc8__preheader_67;
reg [31:0] calc_crc8__preheader_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_68_reg;
reg [31:0] calc_crc8__preheader_69;
reg [31:0] calc_crc8__preheader_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_70_reg;
reg [31:0] calc_crc8__preheader_71;
reg [31:0] calc_crc8__preheader_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_72_reg;
reg [31:0] calc_crc8__preheader_73;
reg [31:0] calc_crc8__preheader_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_74_reg;
reg [31:0] calc_crc8__preheader_75;
reg [31:0] calc_crc8__preheader_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_76_reg;
reg [31:0] calc_crc8__preheader_77;
reg [31:0] calc_crc8__preheader_77_reg;
reg [31:0] calc_crc8__preheader_78;
reg [31:0] calc_crc8__preheader_78_reg;
reg [31:0] calc_crc8__preheader_79;
reg [31:0] calc_crc8__preheader_79_reg;
reg [31:0] calc_crc8__preheader_80;
reg [31:0] calc_crc8__preheader_80_reg;
reg [31:0] calc_crc8__preheader_81;
reg [31:0] calc_crc8__preheader_81_reg;
reg [31:0] calc_crc8__preheader_82;
reg [31:0] calc_crc8__preheader_82_reg;
reg [31:0] calc_crc8__preheader_83;
reg [31:0] calc_crc8__preheader_83_reg;
reg [31:0] calc_crc8__preheader_84;
reg [31:0] calc_crc8__preheader_84_reg;
reg [31:0] calc_crc8__preheader_85;
reg [31:0] calc_crc8__preheader_85_reg;
reg [31:0] calc_crc8__preheader_86;
reg [31:0] calc_crc8__preheader_86_reg;
reg [31:0] calc_crc8__preheader_87;
reg [31:0] calc_crc8__preheader_87_reg;
reg [31:0] calc_crc8__preheader_88;
reg [31:0] calc_crc8__preheader_88_reg;
reg [31:0] calc_crc8__preheader_89;
reg [31:0] calc_crc8__preheader_89_reg;
reg [31:0] calc_crc8__preheader_90;
reg [31:0] calc_crc8__preheader_90_reg;
reg [31:0] calc_crc8__preheader_91;
reg [31:0] calc_crc8__preheader_91_reg;
reg [31:0] calc_crc8__preheader_92;
reg [31:0] calc_crc8__preheader_92_reg;
reg [31:0] calc_crc8__preheader_93;
reg [31:0] calc_crc8__preheader_93_reg;
reg [31:0] calc_crc8__preheader_94;
reg [31:0] calc_crc8__preheader_94_reg;
reg [31:0] calc_crc8__preheader_95;
reg [31:0] calc_crc8__preheader_95_reg;
reg [31:0] calc_crc8__preheader_96;
reg [31:0] calc_crc8__preheader_96_reg;
reg [31:0] calc_crc8__preheader_97;
reg [31:0] calc_crc8__preheader_97_reg;
reg [31:0] calc_crc8__preheader_98;
reg [31:0] calc_crc8__preheader_98_reg;
reg [31:0] calc_crc8__preheader_99;
reg [31:0] calc_crc8__preheader_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_100_reg;
reg [31:0] calc_crc8__preheader_101;
reg [31:0] calc_crc8__preheader_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_102_reg;
reg [31:0] calc_crc8__preheader_103;
reg [31:0] calc_crc8__preheader_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_104_reg;
reg [31:0] calc_crc8__preheader_105;
reg [31:0] calc_crc8__preheader_105_reg;
reg [31:0] calc_crc8__preheader_106;
reg [31:0] calc_crc8__preheader_106_reg;
reg [31:0] calc_crc8__preheader_107;
reg [31:0] calc_crc8__preheader_107_reg;
reg [31:0] calc_crc8__preheader_108;
reg [31:0] calc_crc8__preheader_108_reg;
reg [31:0] calc_crc8__preheader_109;
reg [31:0] calc_crc8__preheader_109_reg;
reg [31:0] calc_crc8__preheader_110;
reg [31:0] calc_crc8__preheader_110_reg;
reg [31:0] calc_crc8__preheader_111;
reg [31:0] calc_crc8__preheader_111_reg;
reg [31:0] calc_crc8__preheader_112;
reg [31:0] calc_crc8__preheader_112_reg;
reg [31:0] calc_crc8__preheader_113;
reg [31:0] calc_crc8__preheader_113_reg;
reg [31:0] calc_crc8__preheader_114;
reg [31:0] calc_crc8__preheader_114_reg;
reg [31:0] calc_crc8__preheader_115;
reg [31:0] calc_crc8__preheader_115_reg;
reg [31:0] calc_crc8__preheader_116;
reg [31:0] calc_crc8__preheader_116_reg;
reg [31:0] calc_crc8__preheader_117;
reg [31:0] calc_crc8__preheader_117_reg;
reg [31:0] calc_crc8__preheader_118;
reg [31:0] calc_crc8__preheader_118_reg;
reg [31:0] calc_crc8__preheader_119;
reg [31:0] calc_crc8__preheader_119_reg;
reg [31:0] calc_crc8__preheader_120;
reg [31:0] calc_crc8__preheader_120_reg;
reg [31:0] calc_crc8__preheader_121;
reg [31:0] calc_crc8__preheader_121_reg;
reg [31:0] calc_crc8__preheader_122;
reg [31:0] calc_crc8__preheader_122_reg;
reg [31:0] calc_crc8__preheader_123;
reg [31:0] calc_crc8__preheader_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_124_reg;
reg [31:0] calc_crc8__preheader_125;
reg [31:0] calc_crc8__preheader_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_126_reg;
reg [31:0] calc_crc8__preheader_127;
reg [31:0] calc_crc8__preheader_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_128_reg;
reg [31:0] calc_crc8__preheader_129;
reg [31:0] calc_crc8__preheader_129_reg;
reg [31:0] calc_crc8__preheader_130;
reg [31:0] calc_crc8__preheader_130_reg;
reg [31:0] calc_crc8__preheader_131;
reg [31:0] calc_crc8__preheader_131_reg;
reg [31:0] calc_crc8__preheader_132;
reg [31:0] calc_crc8__preheader_132_reg;
reg [31:0] calc_crc8__preheader_133;
reg [31:0] calc_crc8__preheader_133_reg;
reg [31:0] calc_crc8__preheader_134;
reg [31:0] calc_crc8__preheader_134_reg;
reg [31:0] calc_crc8__preheader_135;
reg [31:0] calc_crc8__preheader_135_reg;
reg [31:0] calc_crc8__preheader_136;
reg [31:0] calc_crc8__preheader_136_reg;
reg [31:0] calc_crc8__preheader_137;
reg [31:0] calc_crc8__preheader_137_reg;
reg [31:0] calc_crc8__preheader_138;
reg [31:0] calc_crc8__preheader_138_reg;
reg [31:0] calc_crc8__preheader_139;
reg [31:0] calc_crc8__preheader_139_reg;
reg [31:0] calc_crc8__preheader_140;
reg [31:0] calc_crc8__preheader_140_reg;
reg [31:0] calc_crc8__preheader_141;
reg [31:0] calc_crc8__preheader_141_reg;
reg [31:0] calc_crc8__preheader_142;
reg [31:0] calc_crc8__preheader_142_reg;
reg [31:0] calc_crc8__preheader_143;
reg [31:0] calc_crc8__preheader_143_reg;
reg [31:0] calc_crc8__preheader_144;
reg [31:0] calc_crc8__preheader_144_reg;
reg [31:0] calc_crc8__preheader_145;
reg [31:0] calc_crc8__preheader_145_reg;
reg [31:0] calc_crc8__preheader_146;
reg [31:0] calc_crc8__preheader_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_147_reg;
reg [31:0] calc_crc8__preheader_148;
reg [31:0] calc_crc8__preheader_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_149_reg;
reg [31:0] calc_crc8__preheader_150;
reg [31:0] calc_crc8__preheader_150_reg;
reg [31:0] calc_crc8__preheader_151;
reg [31:0] calc_crc8__preheader_151_reg;
reg [31:0] calc_crc8__preheader_152;
reg [31:0] calc_crc8__preheader_152_reg;
reg [31:0] calc_crc8__preheader_153;
reg [31:0] calc_crc8__preheader_153_reg;
reg [31:0] calc_crc8__preheader_154;
reg [31:0] calc_crc8__preheader_154_reg;
reg [31:0] calc_crc8__preheader_155;
reg [31:0] calc_crc8__preheader_155_reg;
reg [31:0] calc_crc8__preheader_156;
reg [31:0] calc_crc8__preheader_156_reg;
reg [31:0] calc_crc8__preheader_157;
reg [31:0] calc_crc8__preheader_157_reg;
reg [31:0] calc_crc8__preheader_158;
reg [31:0] calc_crc8__preheader_158_reg;
reg [31:0] calc_crc8__preheader_159;
reg [31:0] calc_crc8__preheader_159_reg;
reg [31:0] calc_crc8__preheader_160;
reg [31:0] calc_crc8__preheader_160_reg;
reg [31:0] calc_crc8__preheader_161;
reg [31:0] calc_crc8__preheader_161_reg;
reg [31:0] calc_crc8__preheader_162;
reg [31:0] calc_crc8__preheader_162_reg;
reg [31:0] calc_crc8__preheader_163;
reg [31:0] calc_crc8__preheader_163_reg;
reg [31:0] calc_crc8__preheader_164;
reg [31:0] calc_crc8__preheader_164_reg;
reg [31:0] calc_crc8__preheader_165;
reg [31:0] calc_crc8__preheader_165_reg;
reg [31:0] calc_crc8__preheader_166;
reg [31:0] calc_crc8__preheader_166_reg;
reg [31:0] calc_crc8__preheader_167;
reg [31:0] calc_crc8__preheader_167_reg;
reg [31:0] calc_crc8__preheader_168;
reg [31:0] calc_crc8__preheader_168_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8__preheader_169_reg;
reg [31:0] calc_crc8__preheader_170;
reg [31:0] calc_crc8__preheader_170_reg;
reg [31:0] calc_crc8__preheader_171;
reg [31:0] calc_crc8__preheader_171_reg;
reg [31:0] calc_crc8__preheader_172;
reg [31:0] calc_crc8__preheader_172_reg;
reg [31:0] calc_crc8__preheader_173;
reg [31:0] calc_crc8__preheader_173_reg;
reg [31:0] calc_crc8__preheader_174;
reg [31:0] calc_crc8__preheader_174_reg;
reg [31:0] calc_crc8__preheader_175;
reg [31:0] calc_crc8__preheader_175_reg;
reg [31:0] calc_crc8__preheader_176;
reg [31:0] calc_crc8__preheader_176_reg;
reg [31:0] calc_crc8__preheader_177;
reg [31:0] calc_crc8__preheader_177_reg;
reg [31:0] calc_crc8__preheader_178;
reg [31:0] calc_crc8__preheader_178_reg;
reg [31:0] calc_crc8__preheader_179;
reg [31:0] calc_crc8__preheader_179_reg;
reg [31:0] calc_crc8__preheader_180;
reg [31:0] calc_crc8__preheader_180_reg;
reg [31:0] calc_crc8__preheader_181;
reg [31:0] calc_crc8__preheader_181_reg;
reg [31:0] calc_crc8__preheader_182;
reg [31:0] calc_crc8__preheader_182_reg;
reg [31:0] calc_crc8__preheader_183;
reg [31:0] calc_crc8__preheader_183_reg;
reg [31:0] calc_crc8__preheader_184;
reg [31:0] calc_crc8__preheader_184_reg;
reg [31:0] calc_crc8__preheader_185;
reg [31:0] calc_crc8__preheader_185_reg;
reg [31:0] calc_crc8__preheader_186;
reg [31:0] calc_crc8__preheader_186_reg;
reg [31:0] calc_crc8__preheader_187;
reg [31:0] calc_crc8__preheader_187_reg;
reg [31:0] calc_crc8__preheader_188;
reg [31:0] calc_crc8__preheader_188_reg;
reg [31:0] calc_crc8__preheader_189;
reg [31:0] calc_crc8__preheader_189_reg;
reg [31:0] calc_crc8__preheader_190;
reg [31:0] calc_crc8__preheader_190_reg;
reg [31:0] calc_crc8__preheader_191;
reg [31:0] calc_crc8__preheader_191_reg;
reg [31:0] calc_crc8__preheader_192;
reg [31:0] calc_crc8__preheader_192_reg;
reg [31:0] calc_crc8__preheader_193;
reg [31:0] calc_crc8__preheader_193_reg;
reg [31:0] calc_crc8__preheader_194;
reg [31:0] calc_crc8__preheader_194_reg;
reg [31:0] calc_crc8__preheader_195;
reg [31:0] calc_crc8__preheader_195_reg;
reg [31:0] calc_crc8__preheader_196;
reg [31:0] calc_crc8__preheader_196_reg;
reg [31:0] calc_crc8__preheader_197;
reg [31:0] calc_crc8__preheader_197_reg;
reg [31:0] calc_crc8__preheader_198;
reg [31:0] calc_crc8__preheader_198_reg;
reg [31:0] calc_crc8__preheader_199;
reg [31:0] calc_crc8__preheader_199_reg;
reg [31:0] calc_crc8__preheader_200;
reg [31:0] calc_crc8__preheader_200_reg;
reg [31:0] calc_crc8__preheader_201;
reg [31:0] calc_crc8__preheader_201_reg;
reg [31:0] calc_crc8__preheader_202;
reg [31:0] calc_crc8__preheader_202_reg;
reg [31:0] calc_crc8__preheader_203;
reg [31:0] calc_crc8__preheader_203_reg;
reg [31:0] calc_crc8__preheader_204;
reg [31:0] calc_crc8__preheader_204_reg;
reg [31:0] calc_crc8__preheader_205;
reg [31:0] calc_crc8__preheader_205_reg;
reg [31:0] calc_crc8__preheader_206;
reg [31:0] calc_crc8__preheader_206_reg;
reg [31:0] calc_crc8__preheader_207;
reg [31:0] calc_crc8__preheader_207_reg;
reg [31:0] calc_crc8__preheader_208;
reg [31:0] calc_crc8__preheader_208_reg;
reg [31:0] calc_crc8__preheader_209;
reg [31:0] calc_crc8__preheader_209_reg;
reg [31:0] calc_crc8__preheader_210;
reg [31:0] calc_crc8__preheader_210_reg;
reg [31:0] calc_crc8__preheader_211;
reg [31:0] calc_crc8__preheader_211_reg;
reg [31:0] calc_crc8__preheader_212;
reg [31:0] calc_crc8__preheader_212_reg;
reg [31:0] calc_crc8__preheader_213;
reg [31:0] calc_crc8__preheader_213_reg;
reg [31:0] calc_crc8__preheader_214;
reg [31:0] calc_crc8__preheader_214_reg;
reg [31:0] calc_crc8__preheader_215;
reg [31:0] calc_crc8__preheader_215_reg;
reg [31:0] calc_crc8__preheader_216;
reg [31:0] calc_crc8__preheader_216_reg;
reg [31:0] calc_crc8__preheader_217;
reg [31:0] calc_crc8__preheader_217_reg;
reg [31:0] calc_crc8__preheader_218;
reg [31:0] calc_crc8__preheader_218_reg;
reg [31:0] calc_crc8__preheader_219;
reg [31:0] calc_crc8__preheader_219_reg;
reg [31:0] calc_crc8__preheader_220;
reg [31:0] calc_crc8__preheader_220_reg;
reg [31:0] calc_crc8__preheader_221;
reg [31:0] calc_crc8__preheader_221_reg;
reg [31:0] calc_crc8__preheader_222;
reg [31:0] calc_crc8__preheader_222_reg;
reg [31:0] calc_crc8__preheader_223;
reg [31:0] calc_crc8__preheader_223_reg;
reg [31:0] calc_crc8__preheader_224;
reg [31:0] calc_crc8__preheader_224_reg;
reg [31:0] calc_crc8__preheader_225;
reg [31:0] calc_crc8__preheader_225_reg;
reg [31:0] calc_crc8__preheader_226;
reg [31:0] calc_crc8__preheader_226_reg;
reg [31:0] calc_crc8__preheader_227;
reg [31:0] calc_crc8__preheader_227_reg;
reg [31:0] calc_crc8__preheader_228;
reg [31:0] calc_crc8__preheader_228_reg;
reg [31:0] calc_crc8__preheader_229;
reg [31:0] calc_crc8__preheader_229_reg;
reg [31:0] calc_crc8_230__07;
reg [31:0] calc_crc8_230__07_reg;
reg [31:0] calc_crc8_230_i_06;
reg [31:0] calc_crc8_230_i_06_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8_230_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] calc_crc8_230_scevgep9_reg;
reg [31:0] calc_crc8_230_231;
reg [31:0] calc_crc8_230_231_reg;
reg [31:0] calc_crc8_230_232;
reg [31:0] calc_crc8_230_232_reg;
reg [31:0] calc_crc8_230_233;
reg [31:0] calc_crc8_230_233_reg;
reg  calc_crc8_230_exitcond;
reg  calc_crc8_230_exitcond_reg;
reg [4:0] calc_crc8_0_D_address_a;
reg  calc_crc8_0_D_write_enable_a;
reg [31:0] calc_crc8_0_D_in_a;
wire [31:0] calc_crc8_0_D_out_a;
reg [4:0] calc_crc8_0_D_address_b;
reg  calc_crc8_0_D_write_enable_b;
wire [31:0] calc_crc8_0_D_in_b;
wire [31:0] calc_crc8_0_D_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams

//   %D = alloca [32 x i32], align 4
ram_dual_port calc_crc8_0_D (
	.clk( clk ),
	.address_a( calc_crc8_0_D_address_a ),
	.address_b( calc_crc8_0_D_address_b ),
	.wren_a( calc_crc8_0_D_write_enable_a ),
	.wren_b( calc_crc8_0_D_write_enable_b ),
	.data_a( calc_crc8_0_D_in_a ),
	.data_b( calc_crc8_0_D_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( calc_crc8_0_D_out_a ),
	.q_b( calc_crc8_0_D_out_b)
);
defparam calc_crc8_0_D.width_a = 32;
defparam calc_crc8_0_D.width_b = 32;
defparam calc_crc8_0_D.widthad_a = 5;
defparam calc_crc8_0_D.widthad_b = 5;
defparam calc_crc8_0_D.width_be_a = 1;
defparam calc_crc8_0_D.width_be_b = 1;
defparam calc_crc8_0_D.numwords_a = 32;
defparam calc_crc8_0_D.numwords_b = 32;
defparam calc_crc8_0_D.latency = 1;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_230_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_230_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_3;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_3;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_4;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_5;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_5;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_6;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_6;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_7;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_7;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_8;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_9;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_9;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_10;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_14;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_15;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_16;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_17;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_18;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB__preheader_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB_230_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_230_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_230_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB_230_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_230_20;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_230_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_230_20;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_230_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_calc_crc8_BB__preheader_2;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_calc_crc8_BB_230_19;
if (reset == 1'b0 && ^(LEGUP_F_calc_crc8_BB_230_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (reset == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %1 = and i32 %crc, 1*/
begin
calc_crc8__preheader_1 = (arg_crc & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %1 = and i32 %crc, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_1_reg <= calc_crc8__preheader_1;
if (reset == 1'b0 && ^(calc_crc8__preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_1_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %2 = lshr i32 %crc, 1*/
begin
calc_crc8__preheader_2 = (arg_crc >>> (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %2 = lshr i32 %crc, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_2_reg <= calc_crc8__preheader_2;
if (reset == 1'b0 && ^(calc_crc8__preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_2_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %3 = and i32 %2, 1*/
begin
calc_crc8__preheader_3 = (calc_crc8__preheader_2 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %3 = and i32 %2, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_3_reg <= calc_crc8__preheader_3;
if (reset == 1'b0 && ^(calc_crc8__preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_3_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %4 = lshr i32 %crc, 2*/
begin
calc_crc8__preheader_4 = (arg_crc >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %4 = lshr i32 %crc, 2*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_4_reg <= calc_crc8__preheader_4;
if (reset == 1'b0 && ^(calc_crc8__preheader_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_4_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %5 = and i32 %4, 1*/
begin
calc_crc8__preheader_5 = (calc_crc8__preheader_4 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %5 = and i32 %4, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_5_reg <= calc_crc8__preheader_5;
if (reset == 1'b0 && ^(calc_crc8__preheader_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_5_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %6 = lshr i32 %crc, 3*/
begin
calc_crc8__preheader_6 = (arg_crc >>> (32'd3 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %6 = lshr i32 %crc, 3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_6_reg <= calc_crc8__preheader_6;
if (reset == 1'b0 && ^(calc_crc8__preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_6_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %7 = and i32 %6, 1*/
begin
calc_crc8__preheader_7 = (calc_crc8__preheader_6 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %7 = and i32 %6, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_7_reg <= calc_crc8__preheader_7;
if (reset == 1'b0 && ^(calc_crc8__preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_7_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %8 = lshr i32 %crc, 4*/
begin
calc_crc8__preheader_8 = (arg_crc >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %8 = lshr i32 %crc, 4*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_8_reg <= calc_crc8__preheader_8;
if (reset == 1'b0 && ^(calc_crc8__preheader_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_8_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %9 = and i32 %8, 1*/
begin
calc_crc8__preheader_9 = (calc_crc8__preheader_8 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %9 = and i32 %8, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_9_reg <= calc_crc8__preheader_9;
if (reset == 1'b0 && ^(calc_crc8__preheader_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_9_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %10 = lshr i32 %crc, 5*/
begin
calc_crc8__preheader_10 = (arg_crc >>> (32'd5 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %10 = lshr i32 %crc, 5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_10_reg <= calc_crc8__preheader_10;
if (reset == 1'b0 && ^(calc_crc8__preheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_10_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %11 = and i32 %10, 1*/
begin
calc_crc8__preheader_11 = (calc_crc8__preheader_10 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %11 = and i32 %10, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_11_reg <= calc_crc8__preheader_11;
if (reset == 1'b0 && ^(calc_crc8__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_11_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %12 = lshr i32 %crc, 6*/
begin
calc_crc8__preheader_12 = (arg_crc >>> (32'd6 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %12 = lshr i32 %crc, 6*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_12_reg <= calc_crc8__preheader_12;
if (reset == 1'b0 && ^(calc_crc8__preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_12_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %13 = and i32 %12, 1*/
begin
calc_crc8__preheader_13 = (calc_crc8__preheader_12 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %13 = and i32 %12, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_13_reg <= calc_crc8__preheader_13;
if (reset == 1'b0 && ^(calc_crc8__preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_13_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %14 = lshr i32 %crc, 7*/
begin
calc_crc8__preheader_14 = (arg_crc >>> (32'd7 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %14 = lshr i32 %crc, 7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_14_reg <= calc_crc8__preheader_14;
if (reset == 1'b0 && ^(calc_crc8__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_14_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %15 = and i32 %14, 1*/
begin
calc_crc8__preheader_15 = (calc_crc8__preheader_14 & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %15 = and i32 %14, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_15_reg <= calc_crc8__preheader_15;
if (reset == 1'b0 && ^(calc_crc8__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_15_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %16 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 31*/
if (reset) begin calc_crc8__preheader_16 = 0; end
begin
calc_crc8__preheader_16 = (1'd0 + (4 * 32'd31));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %16 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_16_reg <= calc_crc8__preheader_16;
if (reset == 1'b0 && ^(calc_crc8__preheader_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_16_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
begin
calc_crc8__preheader_17 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8__preheader_17_reg <= calc_crc8__preheader_17;
if (reset == 1'b0 && ^(calc_crc8__preheader_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_17_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %18 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 30*/
if (reset) begin calc_crc8__preheader_18 = 0; end
begin
calc_crc8__preheader_18 = (1'd0 + (4 * 32'd30));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %18 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 30*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_18_reg <= calc_crc8__preheader_18;
if (reset == 1'b0 && ^(calc_crc8__preheader_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_18_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
calc_crc8__preheader_19 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8__preheader_19_reg <= calc_crc8__preheader_19;
if (reset == 1'b0 && ^(calc_crc8__preheader_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_19_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %20 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 28*/
if (reset) begin calc_crc8__preheader_20 = 0; end
begin
calc_crc8__preheader_20 = (1'd0 + (4 * 32'd28));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %20 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 28*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_20_reg <= calc_crc8__preheader_20;
if (reset == 1'b0 && ^(calc_crc8__preheader_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_20_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
begin
calc_crc8__preheader_21 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8__preheader_21_reg <= calc_crc8__preheader_21;
if (reset == 1'b0 && ^(calc_crc8__preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_21_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %22 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 23*/
if (reset) begin calc_crc8__preheader_22 = 0; end
begin
calc_crc8__preheader_22 = (1'd0 + (4 * 32'd23));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %22 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 23*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_22_reg <= calc_crc8__preheader_22;
if (reset == 1'b0 && ^(calc_crc8__preheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_22_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
calc_crc8__preheader_23 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8__preheader_23_reg <= calc_crc8__preheader_23;
if (reset == 1'b0 && ^(calc_crc8__preheader_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_23_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %24 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 21*/
if (reset) begin calc_crc8__preheader_24 = 0; end
begin
calc_crc8__preheader_24 = (1'd0 + (4 * 32'd21));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %24 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 21*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_24_reg <= calc_crc8__preheader_24;
if (reset == 1'b0 && ^(calc_crc8__preheader_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_24_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
begin
calc_crc8__preheader_25 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8__preheader_25_reg <= calc_crc8__preheader_25;
if (reset == 1'b0 && ^(calc_crc8__preheader_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_25_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %26 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 19*/
if (reset) begin calc_crc8__preheader_26 = 0; end
begin
calc_crc8__preheader_26 = (1'd0 + (4 * 32'd19));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %26 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 19*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_26_reg <= calc_crc8__preheader_26;
if (reset == 1'b0 && ^(calc_crc8__preheader_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_26_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
begin
calc_crc8__preheader_27 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_27_reg <= calc_crc8__preheader_27;
if (reset == 1'b0 && ^(calc_crc8__preheader_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_27_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %28 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 18*/
if (reset) begin calc_crc8__preheader_28 = 0; end
begin
calc_crc8__preheader_28 = (1'd0 + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %28 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 18*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_28_reg <= calc_crc8__preheader_28;
if (reset == 1'b0 && ^(calc_crc8__preheader_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_28_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
begin
calc_crc8__preheader_29 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8__preheader_29_reg <= calc_crc8__preheader_29;
if (reset == 1'b0 && ^(calc_crc8__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_29_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %30 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 16*/
if (reset) begin calc_crc8__preheader_30 = 0; end
begin
calc_crc8__preheader_30 = (1'd0 + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %30 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 16*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_30_reg <= calc_crc8__preheader_30;
if (reset == 1'b0 && ^(calc_crc8__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_30_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
begin
calc_crc8__preheader_31 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8__preheader_31_reg <= calc_crc8__preheader_31;
if (reset == 1'b0 && ^(calc_crc8__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_31_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %32 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 14*/
if (reset) begin calc_crc8__preheader_32 = 0; end
begin
calc_crc8__preheader_32 = (1'd0 + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %32 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 14*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_32_reg <= calc_crc8__preheader_32;
if (reset == 1'b0 && ^(calc_crc8__preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_32_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
begin
calc_crc8__preheader_33 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_33_reg <= calc_crc8__preheader_33;
if (reset == 1'b0 && ^(calc_crc8__preheader_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_33_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %34 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 12*/
if (reset) begin calc_crc8__preheader_34 = 0; end
begin
calc_crc8__preheader_34 = (1'd0 + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %34 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 12*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_34_reg <= calc_crc8__preheader_34;
if (reset == 1'b0 && ^(calc_crc8__preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_34_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
begin
calc_crc8__preheader_35 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_35_reg <= calc_crc8__preheader_35;
if (reset == 1'b0 && ^(calc_crc8__preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_35_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %36 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 8*/
if (reset) begin calc_crc8__preheader_36 = 0; end
begin
calc_crc8__preheader_36 = (1'd0 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %36 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 8*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_36_reg <= calc_crc8__preheader_36;
if (reset == 1'b0 && ^(calc_crc8__preheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_36_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
begin
calc_crc8__preheader_37 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8__preheader_37_reg <= calc_crc8__preheader_37;
if (reset == 1'b0 && ^(calc_crc8__preheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_37_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %38 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 7*/
if (reset) begin calc_crc8__preheader_38 = 0; end
begin
calc_crc8__preheader_38 = (1'd0 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %38 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_38_reg <= calc_crc8__preheader_38;
if (reset == 1'b0 && ^(calc_crc8__preheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_38_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %39 = load i32* %38, align 4, !tbaa !0*/
begin
calc_crc8__preheader_39 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %39 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8__preheader_39_reg <= calc_crc8__preheader_39;
if (reset == 1'b0 && ^(calc_crc8__preheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_39_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %40 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 6*/
if (reset) begin calc_crc8__preheader_40 = 0; end
begin
calc_crc8__preheader_40 = (1'd0 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %40 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 6*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_40_reg <= calc_crc8__preheader_40;
if (reset == 1'b0 && ^(calc_crc8__preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_40_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
begin
calc_crc8__preheader_41 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_41_reg <= calc_crc8__preheader_41;
if (reset == 1'b0 && ^(calc_crc8__preheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_41_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %42 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 0*/
if (reset) begin calc_crc8__preheader_42 = 0; end
begin
calc_crc8__preheader_42 = 1'd0;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %42 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_42_reg <= calc_crc8__preheader_42;
if (reset == 1'b0 && ^(calc_crc8__preheader_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_42_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
begin
calc_crc8__preheader_43 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_43_reg <= calc_crc8__preheader_43;
if (reset == 1'b0 && ^(calc_crc8__preheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_43_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %44 = xor i32 %19, %17*/
begin
calc_crc8__preheader_44 = (calc_crc8__preheader_19 ^ calc_crc8__preheader_17);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %44 = xor i32 %19, %17*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8__preheader_44_reg <= calc_crc8__preheader_44;
if (reset == 1'b0 && ^(calc_crc8__preheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_44_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %45 = xor i32 %44, %21*/
begin
calc_crc8__preheader_45 = (calc_crc8__preheader_44_reg ^ calc_crc8__preheader_21);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %45 = xor i32 %44, %21*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8__preheader_45_reg <= calc_crc8__preheader_45;
if (reset == 1'b0 && ^(calc_crc8__preheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_45_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %46 = xor i32 %45, %23*/
begin
calc_crc8__preheader_46 = (calc_crc8__preheader_45 ^ calc_crc8__preheader_23);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %46 = xor i32 %45, %23*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8__preheader_46_reg <= calc_crc8__preheader_46;
if (reset == 1'b0 && ^(calc_crc8__preheader_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_46_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %47 = xor i32 %46, %25*/
begin
calc_crc8__preheader_47 = (calc_crc8__preheader_46_reg ^ calc_crc8__preheader_25);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %47 = xor i32 %46, %25*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8__preheader_47_reg <= calc_crc8__preheader_47;
if (reset == 1'b0 && ^(calc_crc8__preheader_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_47_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %48 = xor i32 %47, %27*/
begin
calc_crc8__preheader_48 = (calc_crc8__preheader_47_reg ^ calc_crc8__preheader_27);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %48 = xor i32 %47, %27*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_48_reg <= calc_crc8__preheader_48;
if (reset == 1'b0 && ^(calc_crc8__preheader_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_48_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %49 = xor i32 %48, %29*/
begin
calc_crc8__preheader_49 = (calc_crc8__preheader_48 ^ calc_crc8__preheader_29_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %49 = xor i32 %48, %29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_49_reg <= calc_crc8__preheader_49;
if (reset == 1'b0 && ^(calc_crc8__preheader_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_49_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %50 = xor i32 %49, %31*/
begin
calc_crc8__preheader_50 = (calc_crc8__preheader_49 ^ calc_crc8__preheader_31_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %50 = xor i32 %49, %31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_50_reg <= calc_crc8__preheader_50;
if (reset == 1'b0 && ^(calc_crc8__preheader_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_50_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %51 = xor i32 %50, %33*/
begin
calc_crc8__preheader_51 = (calc_crc8__preheader_50_reg ^ calc_crc8__preheader_33);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %51 = xor i32 %50, %33*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_51_reg <= calc_crc8__preheader_51;
if (reset == 1'b0 && ^(calc_crc8__preheader_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_51_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %52 = xor i32 %51, %35*/
begin
calc_crc8__preheader_52 = (calc_crc8__preheader_51 ^ calc_crc8__preheader_35);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %52 = xor i32 %51, %35*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_52_reg <= calc_crc8__preheader_52;
if (reset == 1'b0 && ^(calc_crc8__preheader_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_52_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %53 = xor i32 %52, %37*/
begin
calc_crc8__preheader_53 = (calc_crc8__preheader_52_reg ^ calc_crc8__preheader_37);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %53 = xor i32 %52, %37*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8__preheader_53_reg <= calc_crc8__preheader_53;
if (reset == 1'b0 && ^(calc_crc8__preheader_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_53_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %54 = xor i32 %53, %39*/
begin
calc_crc8__preheader_54 = (calc_crc8__preheader_53 ^ calc_crc8__preheader_39);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %54 = xor i32 %53, %39*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8__preheader_54_reg <= calc_crc8__preheader_54;
if (reset == 1'b0 && ^(calc_crc8__preheader_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_54_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %55 = xor i32 %54, %41*/
begin
calc_crc8__preheader_55 = (calc_crc8__preheader_54_reg ^ calc_crc8__preheader_41);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %55 = xor i32 %54, %41*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_55_reg <= calc_crc8__preheader_55;
if (reset == 1'b0 && ^(calc_crc8__preheader_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_55_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %56 = xor i32 %55, %43*/
begin
calc_crc8__preheader_56 = (calc_crc8__preheader_55 ^ calc_crc8__preheader_43);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %56 = xor i32 %55, %43*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_56_reg <= calc_crc8__preheader_56;
if (reset == 1'b0 && ^(calc_crc8__preheader_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_56_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %57 = xor i32 %56, %9*/
begin
calc_crc8__preheader_57 = (calc_crc8__preheader_56 ^ calc_crc8__preheader_9_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %57 = xor i32 %56, %9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_57_reg <= calc_crc8__preheader_57;
if (reset == 1'b0 && ^(calc_crc8__preheader_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_57_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %58 = xor i32 %57, %13*/
begin
calc_crc8__preheader_58 = (calc_crc8__preheader_57 ^ calc_crc8__preheader_13_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %58 = xor i32 %57, %13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_58_reg <= calc_crc8__preheader_58;
if (reset == 1'b0 && ^(calc_crc8__preheader_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_58_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %59 = xor i32 %58, %15*/
begin
calc_crc8__preheader_59 = (calc_crc8__preheader_58 ^ calc_crc8__preheader_15_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %59 = xor i32 %58, %15*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8__preheader_59_reg <= calc_crc8__preheader_59;
if (reset == 1'b0 && ^(calc_crc8__preheader_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_59_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %60 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 29*/
if (reset) begin calc_crc8__preheader_60 = 0; end
begin
calc_crc8__preheader_60 = (1'd0 + (4 * 32'd29));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %60 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_60_reg <= calc_crc8__preheader_60;
if (reset == 1'b0 && ^(calc_crc8__preheader_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_60_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
calc_crc8__preheader_61 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8__preheader_61_reg <= calc_crc8__preheader_61;
if (reset == 1'b0 && ^(calc_crc8__preheader_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_61_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %62 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 24*/
if (reset) begin calc_crc8__preheader_62 = 0; end
begin
calc_crc8__preheader_62 = (1'd0 + (4 * 32'd24));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %62 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 24*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_62_reg <= calc_crc8__preheader_62;
if (reset == 1'b0 && ^(calc_crc8__preheader_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_62_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
begin
calc_crc8__preheader_63 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_63_reg <= calc_crc8__preheader_63;
if (reset == 1'b0 && ^(calc_crc8__preheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_63_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %64 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 22*/
if (reset) begin calc_crc8__preheader_64 = 0; end
begin
calc_crc8__preheader_64 = (1'd0 + (4 * 32'd22));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %64 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 22*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_64_reg <= calc_crc8__preheader_64;
if (reset == 1'b0 && ^(calc_crc8__preheader_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_64_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
begin
calc_crc8__preheader_65 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_65_reg <= calc_crc8__preheader_65;
if (reset == 1'b0 && ^(calc_crc8__preheader_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_65_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %66 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 20*/
if (reset) begin calc_crc8__preheader_66 = 0; end
begin
calc_crc8__preheader_66 = (1'd0 + (4 * 32'd20));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %66 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 20*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_66_reg <= calc_crc8__preheader_66;
if (reset == 1'b0 && ^(calc_crc8__preheader_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_66_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
begin
calc_crc8__preheader_67 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_67_reg <= calc_crc8__preheader_67;
if (reset == 1'b0 && ^(calc_crc8__preheader_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_67_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %68 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 17*/
if (reset) begin calc_crc8__preheader_68 = 0; end
begin
calc_crc8__preheader_68 = (1'd0 + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %68 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 17*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_68_reg <= calc_crc8__preheader_68;
if (reset == 1'b0 && ^(calc_crc8__preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_68_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
begin
calc_crc8__preheader_69 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_69_reg <= calc_crc8__preheader_69;
if (reset == 1'b0 && ^(calc_crc8__preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_69_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %70 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 15*/
if (reset) begin calc_crc8__preheader_70 = 0; end
begin
calc_crc8__preheader_70 = (1'd0 + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %70 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 15*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_70_reg <= calc_crc8__preheader_70;
if (reset == 1'b0 && ^(calc_crc8__preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_70_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
begin
calc_crc8__preheader_71 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_71_reg <= calc_crc8__preheader_71;
if (reset == 1'b0 && ^(calc_crc8__preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_71_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %72 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 13*/
if (reset) begin calc_crc8__preheader_72 = 0; end
begin
calc_crc8__preheader_72 = (1'd0 + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %72 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_72_reg <= calc_crc8__preheader_72;
if (reset == 1'b0 && ^(calc_crc8__preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_72_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %73 = load i32* %72, align 4, !tbaa !0*/
begin
calc_crc8__preheader_73 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %73 = load i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_73_reg <= calc_crc8__preheader_73;
if (reset == 1'b0 && ^(calc_crc8__preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_73_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %74 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 9*/
if (reset) begin calc_crc8__preheader_74 = 0; end
begin
calc_crc8__preheader_74 = (1'd0 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %74 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_74_reg <= calc_crc8__preheader_74;
if (reset == 1'b0 && ^(calc_crc8__preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_74_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
begin
calc_crc8__preheader_75 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_75_reg <= calc_crc8__preheader_75;
if (reset == 1'b0 && ^(calc_crc8__preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_75_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %76 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 1*/
if (reset) begin calc_crc8__preheader_76 = 0; end
begin
calc_crc8__preheader_76 = (1'd0 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %76 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_76_reg <= calc_crc8__preheader_76;
if (reset == 1'b0 && ^(calc_crc8__preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_76_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
begin
calc_crc8__preheader_77 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_77_reg <= calc_crc8__preheader_77;
if (reset == 1'b0 && ^(calc_crc8__preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_77_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %78 = xor i32 %61, %19*/
begin
calc_crc8__preheader_78 = (calc_crc8__preheader_61 ^ calc_crc8__preheader_19_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %78 = xor i32 %61, %19*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8__preheader_78_reg <= calc_crc8__preheader_78;
if (reset == 1'b0 && ^(calc_crc8__preheader_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_78_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %79 = xor i32 %78, %21*/
begin
calc_crc8__preheader_79 = (calc_crc8__preheader_78 ^ calc_crc8__preheader_21_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %79 = xor i32 %78, %21*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8__preheader_79_reg <= calc_crc8__preheader_79;
if (reset == 1'b0 && ^(calc_crc8__preheader_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_79_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %80 = xor i32 %79, %63*/
begin
calc_crc8__preheader_80 = (calc_crc8__preheader_79_reg ^ calc_crc8__preheader_63);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %80 = xor i32 %79, %63*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_80_reg <= calc_crc8__preheader_80;
if (reset == 1'b0 && ^(calc_crc8__preheader_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_80_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %81 = xor i32 %80, %23*/
begin
calc_crc8__preheader_81 = (calc_crc8__preheader_80 ^ calc_crc8__preheader_23_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %81 = xor i32 %80, %23*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_81_reg <= calc_crc8__preheader_81;
if (reset == 1'b0 && ^(calc_crc8__preheader_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_81_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %82 = xor i32 %81, %65*/
begin
calc_crc8__preheader_82 = (calc_crc8__preheader_81 ^ calc_crc8__preheader_65);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %82 = xor i32 %81, %65*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_82_reg <= calc_crc8__preheader_82;
if (reset == 1'b0 && ^(calc_crc8__preheader_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_82_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %83 = xor i32 %82, %25*/
begin
calc_crc8__preheader_83 = (calc_crc8__preheader_82 ^ calc_crc8__preheader_25_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %83 = xor i32 %82, %25*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8__preheader_83_reg <= calc_crc8__preheader_83;
if (reset == 1'b0 && ^(calc_crc8__preheader_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_83_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %84 = xor i32 %83, %67*/
begin
calc_crc8__preheader_84 = (calc_crc8__preheader_83_reg ^ calc_crc8__preheader_67);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %84 = xor i32 %83, %67*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_84_reg <= calc_crc8__preheader_84;
if (reset == 1'b0 && ^(calc_crc8__preheader_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_84_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %85 = xor i32 %84, %29*/
begin
calc_crc8__preheader_85 = (calc_crc8__preheader_84 ^ calc_crc8__preheader_29_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %85 = xor i32 %84, %29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_85_reg <= calc_crc8__preheader_85;
if (reset == 1'b0 && ^(calc_crc8__preheader_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_85_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %86 = xor i32 %85, %69*/
begin
calc_crc8__preheader_86 = (calc_crc8__preheader_85 ^ calc_crc8__preheader_69);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %86 = xor i32 %85, %69*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_86_reg <= calc_crc8__preheader_86;
if (reset == 1'b0 && ^(calc_crc8__preheader_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_86_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %87 = xor i32 %86, %31*/
begin
calc_crc8__preheader_87 = (calc_crc8__preheader_86 ^ calc_crc8__preheader_31_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %87 = xor i32 %86, %31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8__preheader_87_reg <= calc_crc8__preheader_87;
if (reset == 1'b0 && ^(calc_crc8__preheader_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_87_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %88 = xor i32 %87, %71*/
begin
calc_crc8__preheader_88 = (calc_crc8__preheader_87_reg ^ calc_crc8__preheader_71);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %88 = xor i32 %87, %71*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_88_reg <= calc_crc8__preheader_88;
if (reset == 1'b0 && ^(calc_crc8__preheader_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_88_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %89 = xor i32 %88, %33*/
begin
calc_crc8__preheader_89 = (calc_crc8__preheader_88 ^ calc_crc8__preheader_33_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %89 = xor i32 %88, %33*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_89_reg <= calc_crc8__preheader_89;
if (reset == 1'b0 && ^(calc_crc8__preheader_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_89_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %90 = xor i32 %89, %73*/
begin
calc_crc8__preheader_90 = (calc_crc8__preheader_89 ^ calc_crc8__preheader_73);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %90 = xor i32 %89, %73*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_90_reg <= calc_crc8__preheader_90;
if (reset == 1'b0 && ^(calc_crc8__preheader_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_90_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %91 = xor i32 %90, %35*/
begin
calc_crc8__preheader_91 = (calc_crc8__preheader_90 ^ calc_crc8__preheader_35_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %91 = xor i32 %90, %35*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_91_reg <= calc_crc8__preheader_91;
if (reset == 1'b0 && ^(calc_crc8__preheader_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_91_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %92 = xor i32 %91, %75*/
begin
calc_crc8__preheader_92 = (calc_crc8__preheader_91_reg ^ calc_crc8__preheader_75);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %92 = xor i32 %91, %75*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_92_reg <= calc_crc8__preheader_92;
if (reset == 1'b0 && ^(calc_crc8__preheader_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_92_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %93 = xor i32 %92, %41*/
begin
calc_crc8__preheader_93 = (calc_crc8__preheader_92 ^ calc_crc8__preheader_41_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %93 = xor i32 %92, %41*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_93_reg <= calc_crc8__preheader_93;
if (reset == 1'b0 && ^(calc_crc8__preheader_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_93_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %94 = xor i32 %93, %77*/
begin
calc_crc8__preheader_94 = (calc_crc8__preheader_93 ^ calc_crc8__preheader_77);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %94 = xor i32 %93, %77*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_94_reg <= calc_crc8__preheader_94;
if (reset == 1'b0 && ^(calc_crc8__preheader_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_94_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %95 = xor i32 %94, %43*/
begin
calc_crc8__preheader_95 = (calc_crc8__preheader_94 ^ calc_crc8__preheader_43_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %95 = xor i32 %94, %43*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_95_reg <= calc_crc8__preheader_95;
if (reset == 1'b0 && ^(calc_crc8__preheader_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_95_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %96 = xor i32 %95, %1*/
begin
calc_crc8__preheader_96 = (calc_crc8__preheader_95 ^ calc_crc8__preheader_1_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %96 = xor i32 %95, %1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_96_reg <= calc_crc8__preheader_96;
if (reset == 1'b0 && ^(calc_crc8__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_96_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %97 = xor i32 %96, %9*/
begin
calc_crc8__preheader_97 = (calc_crc8__preheader_96 ^ calc_crc8__preheader_9_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %97 = xor i32 %96, %9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_97_reg <= calc_crc8__preheader_97;
if (reset == 1'b0 && ^(calc_crc8__preheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_97_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %98 = xor i32 %97, %11*/
begin
calc_crc8__preheader_98 = (calc_crc8__preheader_97 ^ calc_crc8__preheader_11_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %98 = xor i32 %97, %11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_98_reg <= calc_crc8__preheader_98;
if (reset == 1'b0 && ^(calc_crc8__preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_98_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %99 = xor i32 %98, %13*/
begin
calc_crc8__preheader_99 = (calc_crc8__preheader_98 ^ calc_crc8__preheader_13_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %99 = xor i32 %98, %13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_99_reg <= calc_crc8__preheader_99;
if (reset == 1'b0 && ^(calc_crc8__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_99_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %100 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 25*/
if (reset) begin calc_crc8__preheader_100 = 0; end
begin
calc_crc8__preheader_100 = (1'd0 + (4 * 32'd25));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %100 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 25*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_100_reg <= calc_crc8__preheader_100;
if (reset == 1'b0 && ^(calc_crc8__preheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_100_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
begin
calc_crc8__preheader_101 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_101_reg <= calc_crc8__preheader_101;
if (reset == 1'b0 && ^(calc_crc8__preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_101_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %102 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 10*/
if (reset) begin calc_crc8__preheader_102 = 0; end
begin
calc_crc8__preheader_102 = (1'd0 + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %102 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 10*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_102_reg <= calc_crc8__preheader_102;
if (reset == 1'b0 && ^(calc_crc8__preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_102_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
begin
calc_crc8__preheader_103 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_103_reg <= calc_crc8__preheader_103;
if (reset == 1'b0 && ^(calc_crc8__preheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_103_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %104 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 2*/
if (reset) begin calc_crc8__preheader_104 = 0; end
begin
calc_crc8__preheader_104 = (1'd0 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %104 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 2*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_104_reg <= calc_crc8__preheader_104;
if (reset == 1'b0 && ^(calc_crc8__preheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_104_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %105 = load i32* %104, align 4, !tbaa !0*/
begin
calc_crc8__preheader_105 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %105 = load i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_105_reg <= calc_crc8__preheader_105;
if (reset == 1'b0 && ^(calc_crc8__preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_105_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %106 = xor i32 %21, %61*/
begin
calc_crc8__preheader_106 = (calc_crc8__preheader_21_reg ^ calc_crc8__preheader_61);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %106 = xor i32 %21, %61*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8__preheader_106_reg <= calc_crc8__preheader_106;
if (reset == 1'b0 && ^(calc_crc8__preheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_106_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %107 = xor i32 %106, %101*/
begin
calc_crc8__preheader_107 = (calc_crc8__preheader_106_reg ^ calc_crc8__preheader_101);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %107 = xor i32 %106, %101*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_107_reg <= calc_crc8__preheader_107;
if (reset == 1'b0 && ^(calc_crc8__preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_107_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %108 = xor i32 %107, %63*/
begin
calc_crc8__preheader_108 = (calc_crc8__preheader_107 ^ calc_crc8__preheader_63_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %108 = xor i32 %107, %63*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_108_reg <= calc_crc8__preheader_108;
if (reset == 1'b0 && ^(calc_crc8__preheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_108_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %109 = xor i32 %108, %65*/
begin
calc_crc8__preheader_109 = (calc_crc8__preheader_108 ^ calc_crc8__preheader_65_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %109 = xor i32 %108, %65*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_109_reg <= calc_crc8__preheader_109;
if (reset == 1'b0 && ^(calc_crc8__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_109_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %110 = xor i32 %109, %69*/
begin
calc_crc8__preheader_110 = (calc_crc8__preheader_109 ^ calc_crc8__preheader_69_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %110 = xor i32 %109, %69*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_110_reg <= calc_crc8__preheader_110;
if (reset == 1'b0 && ^(calc_crc8__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_110_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %111 = xor i32 %110, %71*/
begin
calc_crc8__preheader_111 = (calc_crc8__preheader_110_reg ^ calc_crc8__preheader_71);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %111 = xor i32 %110, %71*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_111_reg <= calc_crc8__preheader_111;
if (reset == 1'b0 && ^(calc_crc8__preheader_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_111_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %112 = xor i32 %111, %73*/
begin
calc_crc8__preheader_112 = (calc_crc8__preheader_111 ^ calc_crc8__preheader_73);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %112 = xor i32 %111, %73*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_112_reg <= calc_crc8__preheader_112;
if (reset == 1'b0 && ^(calc_crc8__preheader_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_112_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %113 = xor i32 %112, %35*/
begin
calc_crc8__preheader_113 = (calc_crc8__preheader_112 ^ calc_crc8__preheader_35_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %113 = xor i32 %112, %35*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_113_reg <= calc_crc8__preheader_113;
if (reset == 1'b0 && ^(calc_crc8__preheader_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_113_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %114 = xor i32 %113, %103*/
begin
calc_crc8__preheader_114 = (calc_crc8__preheader_113_reg ^ calc_crc8__preheader_103);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %114 = xor i32 %113, %103*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_114_reg <= calc_crc8__preheader_114;
if (reset == 1'b0 && ^(calc_crc8__preheader_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_114_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %115 = xor i32 %114, %37*/
begin
calc_crc8__preheader_115 = (calc_crc8__preheader_114 ^ calc_crc8__preheader_37_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %115 = xor i32 %114, %37*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_115_reg <= calc_crc8__preheader_115;
if (reset == 1'b0 && ^(calc_crc8__preheader_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_115_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %116 = xor i32 %115, %41*/
begin
calc_crc8__preheader_116 = (calc_crc8__preheader_115 ^ calc_crc8__preheader_41_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %116 = xor i32 %115, %41*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_116_reg <= calc_crc8__preheader_116;
if (reset == 1'b0 && ^(calc_crc8__preheader_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_116_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %117 = xor i32 %116, %105*/
begin
calc_crc8__preheader_117 = (calc_crc8__preheader_116 ^ calc_crc8__preheader_105);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %117 = xor i32 %116, %105*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_117_reg <= calc_crc8__preheader_117;
if (reset == 1'b0 && ^(calc_crc8__preheader_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_117_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %118 = xor i32 %117, %77*/
begin
calc_crc8__preheader_118 = (calc_crc8__preheader_117 ^ calc_crc8__preheader_77_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %118 = xor i32 %117, %77*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_118_reg <= calc_crc8__preheader_118;
if (reset == 1'b0 && ^(calc_crc8__preheader_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_118_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %119 = xor i32 %118, %43*/
begin
calc_crc8__preheader_119 = (calc_crc8__preheader_118 ^ calc_crc8__preheader_43_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %119 = xor i32 %118, %43*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_119_reg <= calc_crc8__preheader_119;
if (reset == 1'b0 && ^(calc_crc8__preheader_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_119_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %120 = xor i32 %119, %1*/
begin
calc_crc8__preheader_120 = (calc_crc8__preheader_119 ^ calc_crc8__preheader_1_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %120 = xor i32 %119, %1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_120_reg <= calc_crc8__preheader_120;
if (reset == 1'b0 && ^(calc_crc8__preheader_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_120_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %121 = xor i32 %120, %3*/
begin
calc_crc8__preheader_121 = (calc_crc8__preheader_120 ^ calc_crc8__preheader_3_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %121 = xor i32 %120, %3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_121_reg <= calc_crc8__preheader_121;
if (reset == 1'b0 && ^(calc_crc8__preheader_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_121_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %122 = xor i32 %121, %9*/
begin
calc_crc8__preheader_122 = (calc_crc8__preheader_121 ^ calc_crc8__preheader_9_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %122 = xor i32 %121, %9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_122_reg <= calc_crc8__preheader_122;
if (reset == 1'b0 && ^(calc_crc8__preheader_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_122_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %123 = xor i32 %122, %11*/
begin
calc_crc8__preheader_123 = (calc_crc8__preheader_122 ^ calc_crc8__preheader_11_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %123 = xor i32 %122, %11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_123_reg <= calc_crc8__preheader_123;
if (reset == 1'b0 && ^(calc_crc8__preheader_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_123_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %124 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 26*/
if (reset) begin calc_crc8__preheader_124 = 0; end
begin
calc_crc8__preheader_124 = (1'd0 + (4 * 32'd26));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %124 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 26*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_124_reg <= calc_crc8__preheader_124;
if (reset == 1'b0 && ^(calc_crc8__preheader_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_124_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
begin
calc_crc8__preheader_125 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_125_reg <= calc_crc8__preheader_125;
if (reset == 1'b0 && ^(calc_crc8__preheader_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_125_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %126 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 11*/
if (reset) begin calc_crc8__preheader_126 = 0; end
begin
calc_crc8__preheader_126 = (1'd0 + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %126 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_126_reg <= calc_crc8__preheader_126;
if (reset == 1'b0 && ^(calc_crc8__preheader_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_126_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
begin
calc_crc8__preheader_127 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_127_reg <= calc_crc8__preheader_127;
if (reset == 1'b0 && ^(calc_crc8__preheader_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_127_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %128 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 3*/
if (reset) begin calc_crc8__preheader_128 = 0; end
begin
calc_crc8__preheader_128 = (1'd0 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %128 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_128_reg <= calc_crc8__preheader_128;
if (reset == 1'b0 && ^(calc_crc8__preheader_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_128_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
begin
calc_crc8__preheader_129 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_129_reg <= calc_crc8__preheader_129;
if (reset == 1'b0 && ^(calc_crc8__preheader_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_129_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %130 = xor i32 %78, %125*/
begin
calc_crc8__preheader_130 = (calc_crc8__preheader_78_reg ^ calc_crc8__preheader_125);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %130 = xor i32 %78, %125*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_130_reg <= calc_crc8__preheader_130;
if (reset == 1'b0 && ^(calc_crc8__preheader_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_130_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %131 = xor i32 %130, %101*/
begin
calc_crc8__preheader_131 = (calc_crc8__preheader_130 ^ calc_crc8__preheader_101);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %131 = xor i32 %130, %101*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_131_reg <= calc_crc8__preheader_131;
if (reset == 1'b0 && ^(calc_crc8__preheader_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_131_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %132 = xor i32 %131, %23*/
begin
calc_crc8__preheader_132 = (calc_crc8__preheader_131 ^ calc_crc8__preheader_23_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %132 = xor i32 %131, %23*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_132_reg <= calc_crc8__preheader_132;
if (reset == 1'b0 && ^(calc_crc8__preheader_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_132_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %133 = xor i32 %132, %29*/
begin
calc_crc8__preheader_133 = (calc_crc8__preheader_132 ^ calc_crc8__preheader_29_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %133 = xor i32 %132, %29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_133_reg <= calc_crc8__preheader_133;
if (reset == 1'b0 && ^(calc_crc8__preheader_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_133_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %134 = xor i32 %133, %31*/
begin
calc_crc8__preheader_134 = (calc_crc8__preheader_133 ^ calc_crc8__preheader_31_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %134 = xor i32 %133, %31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_134_reg <= calc_crc8__preheader_134;
if (reset == 1'b0 && ^(calc_crc8__preheader_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_134_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %135 = xor i32 %134, %33*/
begin
calc_crc8__preheader_135 = (calc_crc8__preheader_134_reg ^ calc_crc8__preheader_33);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %135 = xor i32 %134, %33*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_135_reg <= calc_crc8__preheader_135;
if (reset == 1'b0 && ^(calc_crc8__preheader_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_135_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %136 = xor i32 %135, %73*/
begin
calc_crc8__preheader_136 = (calc_crc8__preheader_135_reg ^ calc_crc8__preheader_73);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %136 = xor i32 %135, %73*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_136_reg <= calc_crc8__preheader_136;
if (reset == 1'b0 && ^(calc_crc8__preheader_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_136_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %137 = xor i32 %136, %127*/
begin
calc_crc8__preheader_137 = (calc_crc8__preheader_136_reg ^ calc_crc8__preheader_127);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %137 = xor i32 %136, %127*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_137_reg <= calc_crc8__preheader_137;
if (reset == 1'b0 && ^(calc_crc8__preheader_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_137_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %138 = xor i32 %137, %75*/
begin
calc_crc8__preheader_138 = (calc_crc8__preheader_137 ^ calc_crc8__preheader_75_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %138 = xor i32 %137, %75*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_138_reg <= calc_crc8__preheader_138;
if (reset == 1'b0 && ^(calc_crc8__preheader_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_138_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %139 = xor i32 %138, %39*/
begin
calc_crc8__preheader_139 = (calc_crc8__preheader_138 ^ calc_crc8__preheader_39_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %139 = xor i32 %138, %39*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_139_reg <= calc_crc8__preheader_139;
if (reset == 1'b0 && ^(calc_crc8__preheader_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_139_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %140 = xor i32 %139, %129*/
begin
calc_crc8__preheader_140 = (calc_crc8__preheader_139 ^ calc_crc8__preheader_129);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %140 = xor i32 %139, %129*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_140_reg <= calc_crc8__preheader_140;
if (reset == 1'b0 && ^(calc_crc8__preheader_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_140_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %141 = xor i32 %140, %105*/
begin
calc_crc8__preheader_141 = (calc_crc8__preheader_140 ^ calc_crc8__preheader_105_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %141 = xor i32 %140, %105*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_141_reg <= calc_crc8__preheader_141;
if (reset == 1'b0 && ^(calc_crc8__preheader_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_141_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %142 = xor i32 %141, %77*/
begin
calc_crc8__preheader_142 = (calc_crc8__preheader_141 ^ calc_crc8__preheader_77_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %142 = xor i32 %141, %77*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_142_reg <= calc_crc8__preheader_142;
if (reset == 1'b0 && ^(calc_crc8__preheader_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_142_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %143 = xor i32 %142, %3*/
begin
calc_crc8__preheader_143 = (calc_crc8__preheader_142 ^ calc_crc8__preheader_3_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %143 = xor i32 %142, %3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_143_reg <= calc_crc8__preheader_143;
if (reset == 1'b0 && ^(calc_crc8__preheader_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_143_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %144 = xor i32 %143, %5*/
begin
calc_crc8__preheader_144 = (calc_crc8__preheader_143 ^ calc_crc8__preheader_5_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %144 = xor i32 %143, %5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_144_reg <= calc_crc8__preheader_144;
if (reset == 1'b0 && ^(calc_crc8__preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_144_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %145 = xor i32 %144, %11*/
begin
calc_crc8__preheader_145 = (calc_crc8__preheader_144 ^ calc_crc8__preheader_11_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %145 = xor i32 %144, %11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_145_reg <= calc_crc8__preheader_145;
if (reset == 1'b0 && ^(calc_crc8__preheader_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_145_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %146 = xor i32 %145, %13*/
begin
calc_crc8__preheader_146 = (calc_crc8__preheader_145 ^ calc_crc8__preheader_13_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %146 = xor i32 %145, %13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_146_reg <= calc_crc8__preheader_146;
if (reset == 1'b0 && ^(calc_crc8__preheader_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_146_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %147 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 27*/
if (reset) begin calc_crc8__preheader_147 = 0; end
begin
calc_crc8__preheader_147 = (1'd0 + (4 * 32'd27));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %147 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 27*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_147_reg <= calc_crc8__preheader_147;
if (reset == 1'b0 && ^(calc_crc8__preheader_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_147_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
begin
calc_crc8__preheader_148 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_148_reg <= calc_crc8__preheader_148;
if (reset == 1'b0 && ^(calc_crc8__preheader_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_148_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %149 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 4*/
if (reset) begin calc_crc8__preheader_149 = 0; end
begin
calc_crc8__preheader_149 = (1'd0 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %149 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 4*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_149_reg <= calc_crc8__preheader_149;
if (reset == 1'b0 && ^(calc_crc8__preheader_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_149_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
calc_crc8__preheader_150 = calc_crc8_0_D_out_a;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_150_reg <= calc_crc8__preheader_150;
if (reset == 1'b0 && ^(calc_crc8__preheader_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_150_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %151 = xor i32 %44, %148*/
begin
calc_crc8__preheader_151 = (calc_crc8__preheader_44_reg ^ calc_crc8__preheader_148);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %151 = xor i32 %44, %148*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_151_reg <= calc_crc8__preheader_151;
if (reset == 1'b0 && ^(calc_crc8__preheader_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_151_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %152 = xor i32 %151, %125*/
begin
calc_crc8__preheader_152 = (calc_crc8__preheader_151 ^ calc_crc8__preheader_125_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %152 = xor i32 %151, %125*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_152_reg <= calc_crc8__preheader_152;
if (reset == 1'b0 && ^(calc_crc8__preheader_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_152_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %153 = xor i32 %152, %63*/
begin
calc_crc8__preheader_153 = (calc_crc8__preheader_152 ^ calc_crc8__preheader_63_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %153 = xor i32 %152, %63*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_153_reg <= calc_crc8__preheader_153;
if (reset == 1'b0 && ^(calc_crc8__preheader_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_153_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %154 = xor i32 %153, %27*/
begin
calc_crc8__preheader_154 = (calc_crc8__preheader_153 ^ calc_crc8__preheader_27);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %154 = xor i32 %153, %27*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_154_reg <= calc_crc8__preheader_154;
if (reset == 1'b0 && ^(calc_crc8__preheader_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_154_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %155 = xor i32 %154, %69*/
begin
calc_crc8__preheader_155 = (calc_crc8__preheader_154 ^ calc_crc8__preheader_69_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %155 = xor i32 %154, %69*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_155_reg <= calc_crc8__preheader_155;
if (reset == 1'b0 && ^(calc_crc8__preheader_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_155_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %156 = xor i32 %155, %71*/
begin
calc_crc8__preheader_156 = (calc_crc8__preheader_155_reg ^ calc_crc8__preheader_71);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %156 = xor i32 %155, %71*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_156_reg <= calc_crc8__preheader_156;
if (reset == 1'b0 && ^(calc_crc8__preheader_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_156_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %157 = xor i32 %156, %33*/
begin
calc_crc8__preheader_157 = (calc_crc8__preheader_156 ^ calc_crc8__preheader_33_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %157 = xor i32 %156, %33*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_157_reg <= calc_crc8__preheader_157;
if (reset == 1'b0 && ^(calc_crc8__preheader_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_157_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %158 = xor i32 %157, %35*/
begin
calc_crc8__preheader_158 = (calc_crc8__preheader_157 ^ calc_crc8__preheader_35_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %158 = xor i32 %157, %35*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_158_reg <= calc_crc8__preheader_158;
if (reset == 1'b0 && ^(calc_crc8__preheader_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_158_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %159 = xor i32 %158, %103*/
begin
calc_crc8__preheader_159 = (calc_crc8__preheader_158_reg ^ calc_crc8__preheader_103);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %159 = xor i32 %158, %103*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_159_reg <= calc_crc8__preheader_159;
if (reset == 1'b0 && ^(calc_crc8__preheader_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_159_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %160 = xor i32 %159, %37*/
begin
calc_crc8__preheader_160 = (calc_crc8__preheader_159 ^ calc_crc8__preheader_37_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %160 = xor i32 %159, %37*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_160_reg <= calc_crc8__preheader_160;
if (reset == 1'b0 && ^(calc_crc8__preheader_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_160_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %161 = xor i32 %160, %150*/
begin
calc_crc8__preheader_161 = (calc_crc8__preheader_160_reg ^ calc_crc8__preheader_150);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %161 = xor i32 %160, %150*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_161_reg <= calc_crc8__preheader_161;
if (reset == 1'b0 && ^(calc_crc8__preheader_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_161_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %162 = xor i32 %161, %129*/
begin
calc_crc8__preheader_162 = (calc_crc8__preheader_161 ^ calc_crc8__preheader_129_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %162 = xor i32 %161, %129*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_162_reg <= calc_crc8__preheader_162;
if (reset == 1'b0 && ^(calc_crc8__preheader_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_162_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %163 = xor i32 %162, %105*/
begin
calc_crc8__preheader_163 = (calc_crc8__preheader_162 ^ calc_crc8__preheader_105_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %163 = xor i32 %162, %105*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_163_reg <= calc_crc8__preheader_163;
if (reset == 1'b0 && ^(calc_crc8__preheader_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_163_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %164 = xor i32 %163, %1*/
begin
calc_crc8__preheader_164 = (calc_crc8__preheader_163 ^ calc_crc8__preheader_1_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %164 = xor i32 %163, %1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_164_reg <= calc_crc8__preheader_164;
if (reset == 1'b0 && ^(calc_crc8__preheader_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_164_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %165 = xor i32 %164, %5*/
begin
calc_crc8__preheader_165 = (calc_crc8__preheader_164 ^ calc_crc8__preheader_5_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %165 = xor i32 %164, %5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_165_reg <= calc_crc8__preheader_165;
if (reset == 1'b0 && ^(calc_crc8__preheader_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_165_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %166 = xor i32 %165, %7*/
begin
calc_crc8__preheader_166 = (calc_crc8__preheader_165 ^ calc_crc8__preheader_7_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %166 = xor i32 %165, %7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_166_reg <= calc_crc8__preheader_166;
if (reset == 1'b0 && ^(calc_crc8__preheader_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_166_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %167 = xor i32 %166, %13*/
begin
calc_crc8__preheader_167 = (calc_crc8__preheader_166 ^ calc_crc8__preheader_13_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %167 = xor i32 %166, %13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_167_reg <= calc_crc8__preheader_167;
if (reset == 1'b0 && ^(calc_crc8__preheader_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_167_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %168 = xor i32 %167, %15*/
begin
calc_crc8__preheader_168 = (calc_crc8__preheader_167 ^ calc_crc8__preheader_15_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %168 = xor i32 %167, %15*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_168_reg <= calc_crc8__preheader_168;
if (reset == 1'b0 && ^(calc_crc8__preheader_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_168_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %169 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 5*/
if (reset) begin calc_crc8__preheader_169 = 0; end
begin
calc_crc8__preheader_169 = (1'd0 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %169 = getelementptr inbounds [32 x i32]* %D, i32 0, i32 5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8__preheader_169_reg <= calc_crc8__preheader_169;
if (reset == 1'b0 && ^(calc_crc8__preheader_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_169_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
begin
calc_crc8__preheader_170 = calc_crc8_0_D_out_b;
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_170_reg <= calc_crc8__preheader_170;
if (reset == 1'b0 && ^(calc_crc8__preheader_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_170_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %171 = xor i32 %21, %17*/
begin
calc_crc8__preheader_171 = (calc_crc8__preheader_21 ^ calc_crc8__preheader_17_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %171 = xor i32 %21, %17*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8__preheader_171_reg <= calc_crc8__preheader_171;
if (reset == 1'b0 && ^(calc_crc8__preheader_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_171_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %172 = xor i32 %171, %148*/
begin
calc_crc8__preheader_172 = (calc_crc8__preheader_171_reg ^ calc_crc8__preheader_148);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %172 = xor i32 %171, %148*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_172_reg <= calc_crc8__preheader_172;
if (reset == 1'b0 && ^(calc_crc8__preheader_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_172_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %173 = xor i32 %172, %101*/
begin
calc_crc8__preheader_173 = (calc_crc8__preheader_172 ^ calc_crc8__preheader_101_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %173 = xor i32 %172, %101*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_173_reg <= calc_crc8__preheader_173;
if (reset == 1'b0 && ^(calc_crc8__preheader_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_173_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %174 = xor i32 %173, %67*/
begin
calc_crc8__preheader_174 = (calc_crc8__preheader_173 ^ calc_crc8__preheader_67_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %174 = xor i32 %173, %67*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_174_reg <= calc_crc8__preheader_174;
if (reset == 1'b0 && ^(calc_crc8__preheader_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_174_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %175 = xor i32 %174, %29*/
begin
calc_crc8__preheader_175 = (calc_crc8__preheader_174 ^ calc_crc8__preheader_29_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %175 = xor i32 %174, %29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_175_reg <= calc_crc8__preheader_175;
if (reset == 1'b0 && ^(calc_crc8__preheader_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_175_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %176 = xor i32 %175, %31*/
begin
calc_crc8__preheader_176 = (calc_crc8__preheader_175 ^ calc_crc8__preheader_31_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %176 = xor i32 %175, %31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_176_reg <= calc_crc8__preheader_176;
if (reset == 1'b0 && ^(calc_crc8__preheader_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_176_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %177 = xor i32 %176, %71*/
begin
calc_crc8__preheader_177 = (calc_crc8__preheader_176_reg ^ calc_crc8__preheader_71);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %177 = xor i32 %176, %71*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_177_reg <= calc_crc8__preheader_177;
if (reset == 1'b0 && ^(calc_crc8__preheader_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_177_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %178 = xor i32 %177, %73*/
begin
calc_crc8__preheader_178 = (calc_crc8__preheader_177 ^ calc_crc8__preheader_73);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %178 = xor i32 %177, %73*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_178_reg <= calc_crc8__preheader_178;
if (reset == 1'b0 && ^(calc_crc8__preheader_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_178_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %179 = xor i32 %178, %127*/
begin
calc_crc8__preheader_179 = (calc_crc8__preheader_178_reg ^ calc_crc8__preheader_127);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %179 = xor i32 %178, %127*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_179_reg <= calc_crc8__preheader_179;
if (reset == 1'b0 && ^(calc_crc8__preheader_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_179_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %180 = xor i32 %179, %75*/
begin
calc_crc8__preheader_180 = (calc_crc8__preheader_179 ^ calc_crc8__preheader_75_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %180 = xor i32 %179, %75*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_180_reg <= calc_crc8__preheader_180;
if (reset == 1'b0 && ^(calc_crc8__preheader_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_180_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %181 = xor i32 %180, %170*/
begin
calc_crc8__preheader_181 = (calc_crc8__preheader_180_reg ^ calc_crc8__preheader_170);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %181 = xor i32 %180, %170*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_181_reg <= calc_crc8__preheader_181;
if (reset == 1'b0 && ^(calc_crc8__preheader_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_181_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %182 = xor i32 %181, %150*/
begin
calc_crc8__preheader_182 = (calc_crc8__preheader_181 ^ calc_crc8__preheader_150);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %182 = xor i32 %181, %150*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_182_reg <= calc_crc8__preheader_182;
if (reset == 1'b0 && ^(calc_crc8__preheader_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_182_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %183 = xor i32 %182, %129*/
begin
calc_crc8__preheader_183 = (calc_crc8__preheader_182 ^ calc_crc8__preheader_129_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %183 = xor i32 %182, %129*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_183_reg <= calc_crc8__preheader_183;
if (reset == 1'b0 && ^(calc_crc8__preheader_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_183_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %184 = xor i32 %183, %3*/
begin
calc_crc8__preheader_184 = (calc_crc8__preheader_183 ^ calc_crc8__preheader_3_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %184 = xor i32 %183, %3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_184_reg <= calc_crc8__preheader_184;
if (reset == 1'b0 && ^(calc_crc8__preheader_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_184_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %185 = xor i32 %184, %7*/
begin
calc_crc8__preheader_185 = (calc_crc8__preheader_184 ^ calc_crc8__preheader_7_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %185 = xor i32 %184, %7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_185_reg <= calc_crc8__preheader_185;
if (reset == 1'b0 && ^(calc_crc8__preheader_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_185_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %186 = xor i32 %185, %9*/
begin
calc_crc8__preheader_186 = (calc_crc8__preheader_185 ^ calc_crc8__preheader_9_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %186 = xor i32 %185, %9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_186_reg <= calc_crc8__preheader_186;
if (reset == 1'b0 && ^(calc_crc8__preheader_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_186_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %187 = xor i32 %186, %15*/
begin
calc_crc8__preheader_187 = (calc_crc8__preheader_186 ^ calc_crc8__preheader_15_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %187 = xor i32 %186, %15*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_187_reg <= calc_crc8__preheader_187;
if (reset == 1'b0 && ^(calc_crc8__preheader_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_187_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %188 = xor i32 %106, %125*/
begin
calc_crc8__preheader_188 = (calc_crc8__preheader_106_reg ^ calc_crc8__preheader_125);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %188 = xor i32 %106, %125*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_188_reg <= calc_crc8__preheader_188;
if (reset == 1'b0 && ^(calc_crc8__preheader_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_188_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %189 = xor i32 %188, %25*/
begin
calc_crc8__preheader_189 = (calc_crc8__preheader_188 ^ calc_crc8__preheader_25_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %189 = xor i32 %188, %25*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8__preheader_189_reg <= calc_crc8__preheader_189;
if (reset == 1'b0 && ^(calc_crc8__preheader_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_189_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %190 = xor i32 %189, %27*/
begin
calc_crc8__preheader_190 = (calc_crc8__preheader_189_reg ^ calc_crc8__preheader_27);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %190 = xor i32 %189, %27*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_190_reg <= calc_crc8__preheader_190;
if (reset == 1'b0 && ^(calc_crc8__preheader_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_190_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %191 = xor i32 %190, %69*/
begin
calc_crc8__preheader_191 = (calc_crc8__preheader_190 ^ calc_crc8__preheader_69_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %191 = xor i32 %190, %69*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_191_reg <= calc_crc8__preheader_191;
if (reset == 1'b0 && ^(calc_crc8__preheader_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_191_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %192 = xor i32 %191, %31*/
begin
calc_crc8__preheader_192 = (calc_crc8__preheader_191 ^ calc_crc8__preheader_31_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %192 = xor i32 %191, %31*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_192_reg <= calc_crc8__preheader_192;
if (reset == 1'b0 && ^(calc_crc8__preheader_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_192_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %193 = xor i32 %192, %33*/
begin
calc_crc8__preheader_193 = (calc_crc8__preheader_192_reg ^ calc_crc8__preheader_33);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %193 = xor i32 %192, %33*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_193_reg <= calc_crc8__preheader_193;
if (reset == 1'b0 && ^(calc_crc8__preheader_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_193_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %194 = xor i32 %193, %35*/
begin
calc_crc8__preheader_194 = (calc_crc8__preheader_193 ^ calc_crc8__preheader_35);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %194 = xor i32 %193, %35*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8__preheader_194_reg <= calc_crc8__preheader_194;
if (reset == 1'b0 && ^(calc_crc8__preheader_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_194_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %195 = xor i32 %194, %103*/
begin
calc_crc8__preheader_195 = (calc_crc8__preheader_194_reg ^ calc_crc8__preheader_103);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %195 = xor i32 %194, %103*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_195_reg <= calc_crc8__preheader_195;
if (reset == 1'b0 && ^(calc_crc8__preheader_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_195_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %196 = xor i32 %195, %41*/
begin
calc_crc8__preheader_196 = (calc_crc8__preheader_195 ^ calc_crc8__preheader_41_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %196 = xor i32 %195, %41*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_196_reg <= calc_crc8__preheader_196;
if (reset == 1'b0 && ^(calc_crc8__preheader_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_196_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %197 = xor i32 %196, %170*/
begin
calc_crc8__preheader_197 = (calc_crc8__preheader_196_reg ^ calc_crc8__preheader_170);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %197 = xor i32 %196, %170*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_197_reg <= calc_crc8__preheader_197;
if (reset == 1'b0 && ^(calc_crc8__preheader_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_197_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %198 = xor i32 %197, %150*/
begin
calc_crc8__preheader_198 = (calc_crc8__preheader_197 ^ calc_crc8__preheader_150);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %198 = xor i32 %197, %150*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_198_reg <= calc_crc8__preheader_198;
if (reset == 1'b0 && ^(calc_crc8__preheader_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_198_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %199 = xor i32 %198, %5*/
begin
calc_crc8__preheader_199 = (calc_crc8__preheader_198 ^ calc_crc8__preheader_5_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %199 = xor i32 %198, %5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_199_reg <= calc_crc8__preheader_199;
if (reset == 1'b0 && ^(calc_crc8__preheader_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_199_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %200 = xor i32 %199, %9*/
begin
calc_crc8__preheader_200 = (calc_crc8__preheader_199 ^ calc_crc8__preheader_9_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %200 = xor i32 %199, %9*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_200_reg <= calc_crc8__preheader_200;
if (reset == 1'b0 && ^(calc_crc8__preheader_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_200_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %201 = xor i32 %200, %11*/
begin
calc_crc8__preheader_201 = (calc_crc8__preheader_200 ^ calc_crc8__preheader_11_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %201 = xor i32 %200, %11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_201_reg <= calc_crc8__preheader_201;
if (reset == 1'b0 && ^(calc_crc8__preheader_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_201_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %202 = xor i32 %78, %148*/
begin
calc_crc8__preheader_202 = (calc_crc8__preheader_78_reg ^ calc_crc8__preheader_148);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %202 = xor i32 %78, %148*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_202_reg <= calc_crc8__preheader_202;
if (reset == 1'b0 && ^(calc_crc8__preheader_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_202_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %203 = xor i32 %202, %65*/
begin
calc_crc8__preheader_203 = (calc_crc8__preheader_202 ^ calc_crc8__preheader_65_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %203 = xor i32 %202, %65*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_203_reg <= calc_crc8__preheader_203;
if (reset == 1'b0 && ^(calc_crc8__preheader_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_203_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %204 = xor i32 %203, %67*/
begin
calc_crc8__preheader_204 = (calc_crc8__preheader_203 ^ calc_crc8__preheader_67_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %204 = xor i32 %203, %67*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_204_reg <= calc_crc8__preheader_204;
if (reset == 1'b0 && ^(calc_crc8__preheader_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_204_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %205 = xor i32 %204, %29*/
begin
calc_crc8__preheader_205 = (calc_crc8__preheader_204 ^ calc_crc8__preheader_29_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %205 = xor i32 %204, %29*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_205_reg <= calc_crc8__preheader_205;
if (reset == 1'b0 && ^(calc_crc8__preheader_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_205_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %206 = xor i32 %205, %69*/
begin
calc_crc8__preheader_206 = (calc_crc8__preheader_205 ^ calc_crc8__preheader_69_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %206 = xor i32 %205, %69*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8__preheader_206_reg <= calc_crc8__preheader_206;
if (reset == 1'b0 && ^(calc_crc8__preheader_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_206_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %207 = xor i32 %206, %71*/
begin
calc_crc8__preheader_207 = (calc_crc8__preheader_206_reg ^ calc_crc8__preheader_71);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %207 = xor i32 %206, %71*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_207_reg <= calc_crc8__preheader_207;
if (reset == 1'b0 && ^(calc_crc8__preheader_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_207_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %208 = xor i32 %207, %73*/
begin
calc_crc8__preheader_208 = (calc_crc8__preheader_207 ^ calc_crc8__preheader_73);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %208 = xor i32 %207, %73*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8__preheader_208_reg <= calc_crc8__preheader_208;
if (reset == 1'b0 && ^(calc_crc8__preheader_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_208_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %209 = xor i32 %208, %127*/
begin
calc_crc8__preheader_209 = (calc_crc8__preheader_208_reg ^ calc_crc8__preheader_127);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %209 = xor i32 %208, %127*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_209_reg <= calc_crc8__preheader_209;
if (reset == 1'b0 && ^(calc_crc8__preheader_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_209_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %210 = xor i32 %209, %39*/
begin
calc_crc8__preheader_210 = (calc_crc8__preheader_209 ^ calc_crc8__preheader_39_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %210 = xor i32 %209, %39*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_210_reg <= calc_crc8__preheader_210;
if (reset == 1'b0 && ^(calc_crc8__preheader_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_210_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %211 = xor i32 %210, %41*/
begin
calc_crc8__preheader_211 = (calc_crc8__preheader_210 ^ calc_crc8__preheader_41_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %211 = xor i32 %210, %41*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_211_reg <= calc_crc8__preheader_211;
if (reset == 1'b0 && ^(calc_crc8__preheader_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_211_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %212 = xor i32 %211, %170*/
begin
calc_crc8__preheader_212 = (calc_crc8__preheader_211_reg ^ calc_crc8__preheader_170);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %212 = xor i32 %211, %170*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_212_reg <= calc_crc8__preheader_212;
if (reset == 1'b0 && ^(calc_crc8__preheader_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_212_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %213 = xor i32 %212, %7*/
begin
calc_crc8__preheader_213 = (calc_crc8__preheader_212 ^ calc_crc8__preheader_7_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %213 = xor i32 %212, %7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_213_reg <= calc_crc8__preheader_213;
if (reset == 1'b0 && ^(calc_crc8__preheader_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_213_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %214 = xor i32 %213, %11*/
begin
calc_crc8__preheader_214 = (calc_crc8__preheader_213 ^ calc_crc8__preheader_11_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %214 = xor i32 %213, %11*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_214_reg <= calc_crc8__preheader_214;
if (reset == 1'b0 && ^(calc_crc8__preheader_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_214_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %215 = xor i32 %214, %13*/
begin
calc_crc8__preheader_215 = (calc_crc8__preheader_214 ^ calc_crc8__preheader_13_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %215 = xor i32 %214, %13*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_215_reg <= calc_crc8__preheader_215;
if (reset == 1'b0 && ^(calc_crc8__preheader_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_215_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %216 = shl i32 %99, 1*/
begin
calc_crc8__preheader_216 = (calc_crc8__preheader_99 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %216 = shl i32 %99, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_216_reg <= calc_crc8__preheader_216;
if (reset == 1'b0 && ^(calc_crc8__preheader_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_216_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %217 = or i32 %216, %59*/
begin
calc_crc8__preheader_217 = (calc_crc8__preheader_216 | calc_crc8__preheader_59_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %217 = or i32 %216, %59*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8__preheader_217_reg <= calc_crc8__preheader_217;
if (reset == 1'b0 && ^(calc_crc8__preheader_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_217_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %218 = shl i32 %123, 2*/
begin
calc_crc8__preheader_218 = (calc_crc8__preheader_123 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %218 = shl i32 %123, 2*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_218_reg <= calc_crc8__preheader_218;
if (reset == 1'b0 && ^(calc_crc8__preheader_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_218_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %219 = or i32 %218, %217*/
begin
calc_crc8__preheader_219 = (calc_crc8__preheader_218 | calc_crc8__preheader_217_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %219 = or i32 %218, %217*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8__preheader_219_reg <= calc_crc8__preheader_219;
if (reset == 1'b0 && ^(calc_crc8__preheader_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_219_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %220 = shl i32 %146, 3*/
begin
calc_crc8__preheader_220 = (calc_crc8__preheader_146 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %220 = shl i32 %146, 3*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_220_reg <= calc_crc8__preheader_220;
if (reset == 1'b0 && ^(calc_crc8__preheader_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_220_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %221 = or i32 %220, %219*/
begin
calc_crc8__preheader_221 = (calc_crc8__preheader_220 | calc_crc8__preheader_219_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %221 = or i32 %220, %219*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8__preheader_221_reg <= calc_crc8__preheader_221;
if (reset == 1'b0 && ^(calc_crc8__preheader_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_221_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %222 = shl i32 %168, 4*/
begin
calc_crc8__preheader_222 = (calc_crc8__preheader_168 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %222 = shl i32 %168, 4*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_222_reg <= calc_crc8__preheader_222;
if (reset == 1'b0 && ^(calc_crc8__preheader_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_222_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %223 = or i32 %222, %221*/
begin
calc_crc8__preheader_223 = (calc_crc8__preheader_222 | calc_crc8__preheader_221_reg);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %223 = or i32 %222, %221*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_223_reg <= calc_crc8__preheader_223;
if (reset == 1'b0 && ^(calc_crc8__preheader_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_223_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %224 = shl i32 %187, 5*/
begin
calc_crc8__preheader_224 = (calc_crc8__preheader_187 <<< (32'd5 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %224 = shl i32 %187, 5*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_224_reg <= calc_crc8__preheader_224;
if (reset == 1'b0 && ^(calc_crc8__preheader_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_224_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %225 = or i32 %224, %223*/
begin
calc_crc8__preheader_225 = (calc_crc8__preheader_224 | calc_crc8__preheader_223);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %225 = or i32 %224, %223*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_225_reg <= calc_crc8__preheader_225;
if (reset == 1'b0 && ^(calc_crc8__preheader_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_225_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %226 = shl i32 %201, 6*/
begin
calc_crc8__preheader_226 = (calc_crc8__preheader_201 <<< (32'd6 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %226 = shl i32 %201, 6*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_226_reg <= calc_crc8__preheader_226;
if (reset == 1'b0 && ^(calc_crc8__preheader_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_226_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %227 = or i32 %226, %225*/
begin
calc_crc8__preheader_227 = (calc_crc8__preheader_226 | calc_crc8__preheader_225);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %227 = or i32 %226, %225*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_227_reg <= calc_crc8__preheader_227;
if (reset == 1'b0 && ^(calc_crc8__preheader_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_227_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %228 = shl i32 %215, 7*/
begin
calc_crc8__preheader_228 = (calc_crc8__preheader_215 <<< (32'd7 % 32));
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %228 = shl i32 %215, 7*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_228_reg <= calc_crc8__preheader_228;
if (reset == 1'b0 && ^(calc_crc8__preheader_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_228_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %.preheader*/
/*   %229 = or i32 %228, %227*/
begin
calc_crc8__preheader_229 = (calc_crc8__preheader_228 | calc_crc8__preheader_227);
end
end
always @(posedge clk) begin
/* calc_crc8: %.preheader*/
/*   %229 = or i32 %228, %227*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
calc_crc8__preheader_229_reg <= calc_crc8__preheader_229;
if (reset == 1'b0 && ^(calc_crc8__preheader_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8__preheader_229_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %.07 = phi i32 [ %data, %0 ], [ %232, %230 ]*/
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
calc_crc8_230__07 = arg_data;
end
/* calc_crc8: %230*/
/*   %.07 = phi i32 [ %data, %0 ], [ %232, %230 ]*/
else /* if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd0))) */
begin
calc_crc8_230__07 = calc_crc8_230_232_reg;
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %.07 = phi i32 [ %data, %0 ], [ %232, %230 ]*/
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
calc_crc8_230__07_reg <= calc_crc8_230__07;
if (reset == 1'b0 && ^(calc_crc8_230__07) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230__07_reg"); $finish; end
end
/* calc_crc8: %230*/
/*   %.07 = phi i32 [ %data, %0 ], [ %232, %230 ]*/
if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd0)))
begin
calc_crc8_230__07_reg <= calc_crc8_230__07;
if (reset == 1'b0 && ^(calc_crc8_230__07) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230__07_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %i.06 = phi i32 [ 0, %0 ], [ %233, %230 ]*/
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
calc_crc8_230_i_06 = 32'd0;
end
/* calc_crc8: %230*/
/*   %i.06 = phi i32 [ 0, %0 ], [ %233, %230 ]*/
else /* if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd0))) */
begin
calc_crc8_230_i_06 = calc_crc8_230_233_reg;
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %i.06 = phi i32 [ 0, %0 ], [ %233, %230 ]*/
if (((cur_state == LEGUP_F_calc_crc8_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
calc_crc8_230_i_06_reg <= calc_crc8_230_i_06;
if (reset == 1'b0 && ^(calc_crc8_230_i_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_i_06_reg"); $finish; end
end
/* calc_crc8: %230*/
/*   %i.06 = phi i32 [ 0, %0 ], [ %233, %230 ]*/
if ((((cur_state == LEGUP_F_calc_crc8_BB_230_20) & (memory_controller_waitrequest == 1'd0)) & (calc_crc8_230_exitcond_reg == 1'd0)))
begin
calc_crc8_230_i_06_reg <= calc_crc8_230_i_06;
if (reset == 1'b0 && ^(calc_crc8_230_i_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_i_06_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %scevgep9 = getelementptr [32 x i32]* %D, i32 0, i32 %i.06*/
begin
calc_crc8_230_scevgep9 = (1'd0 + (4 * calc_crc8_230_i_06_reg));
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %scevgep9 = getelementptr [32 x i32]* %D, i32 0, i32 %i.06*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_230_scevgep9_reg <= calc_crc8_230_scevgep9;
if (reset == 1'b0 && ^(calc_crc8_230_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_scevgep9_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %231 = and i32 %.07, 1*/
begin
calc_crc8_230_231 = (calc_crc8_230__07_reg & 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %231 = and i32 %.07, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_230_231_reg <= calc_crc8_230_231;
if (reset == 1'b0 && ^(calc_crc8_230_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_231_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %232 = ashr i32 %.07, 1*/
begin
calc_crc8_230_232 = ($signed(calc_crc8_230__07_reg) >>> 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %232 = ashr i32 %.07, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_230_232_reg <= calc_crc8_230_232;
if (reset == 1'b0 && ^(calc_crc8_230_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_232_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %233 = add nsw i32 %i.06, 1*/
begin
calc_crc8_230_233 = (calc_crc8_230_i_06_reg + 32'd1);
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %233 = add nsw i32 %i.06, 1*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_230_233_reg <= calc_crc8_230_233;
if (reset == 1'b0 && ^(calc_crc8_230_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_233_reg"); $finish; end
end
end
always @(*) begin
/* calc_crc8: %230*/
/*   %exitcond = icmp eq i32 %233, 32*/
begin
calc_crc8_230_exitcond = (calc_crc8_230_233 == 32'd32);
end
end
always @(posedge clk) begin
/* calc_crc8: %230*/
/*   %exitcond = icmp eq i32 %233, 32*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_230_exitcond_reg <= calc_crc8_230_exitcond;
if (reset == 1'b0 && ^(calc_crc8_230_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to calc_crc8_230_exitcond_reg"); $finish; end
end
end
always @(*) begin
calc_crc8_0_D_address_a = 1'd0;
/* calc_crc8: %.preheader*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_16 >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_20_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_24_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_30_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_62_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_66_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_100_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_26_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_32_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_36_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_40_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_70_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_74_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_102_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_126_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8_0_D_address_a = (calc_crc8__preheader_149_reg >>> 3'd2);
end
/* calc_crc8: %230*/
/*   store i32 %231, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_0_D_address_a = (calc_crc8_230_scevgep9 >>> 3'd2);
end
end
always @(*) begin
calc_crc8_0_D_write_enable_a = 1'd0;
/* calc_crc8: %.preheader*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %101 = load i32* %100, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %33 = load i32* %32, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %71 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %75 = load i32* %74, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %103 = load i32* %102, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %127 = load i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8_0_D_write_enable_a = 1'd0;
end
/* calc_crc8: %230*/
/*   store i32 %231, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_0_D_write_enable_a = 1'd1;
end
end
always @(*) begin
calc_crc8_0_D_in_a = 1'd0;
/* calc_crc8: %230*/
/*   store i32 %231, i32* %scevgep9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB_230_19))
begin
calc_crc8_0_D_in_a = calc_crc8_230_231;
end
end
always @(*) begin
calc_crc8_0_D_address_b = 1'd0;
/* calc_crc8: %.preheader*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_18 >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_22_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_28_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_60_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_64_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_68_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_124_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_147_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_34_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %39 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_38_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_42_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %73 = load i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_72_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_76_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %105 = load i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_104_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_128_reg >>> 3'd2);
end
/* calc_crc8: %.preheader*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8_0_D_address_b = (calc_crc8__preheader_169_reg >>> 3'd2);
end
end
always @(*) begin
calc_crc8_0_D_write_enable_b = 1'd0;
/* calc_crc8: %.preheader*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_2))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_3))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_4))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_5))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_6))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_7))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %125 = load i32* %124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_8))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %148 = load i32* %147, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_9))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %35 = load i32* %34, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_10))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %39 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_11))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_12))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %73 = load i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_13))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_14))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %105 = load i32* %104, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_15))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %129 = load i32* %128, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_16))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
/* calc_crc8: %.preheader*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_17))
begin
calc_crc8_0_D_write_enable_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* calc_crc8: %.preheader*/
/*   ret i32 %229*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* calc_crc8: %.preheader*/
/*   ret i32 %229*/
if ((cur_state == LEGUP_F_calc_crc8_BB__preheader_18))
begin
return_val <= calc_crc8__preheader_229;
if (reset == 1'b0 && ^(calc_crc8__preheader_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_main_BB_0_1 = 1'd1;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg  cur_state;
wire [4:0] calc_crc8_0_D_address_a;
wire  calc_crc8_0_D_write_enable_a;
wire [31:0] calc_crc8_0_D_in_a;
wire [31:0] calc_crc8_0_D_out_a;
wire [4:0] calc_crc8_0_D_address_b;
wire  calc_crc8_0_D_write_enable_b;
wire [31:0] calc_crc8_0_D_in_b;
wire [31:0] calc_crc8_0_D_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
