//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:51:52 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module copy_frame
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_s
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_copy_frame_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_copy_frame_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_copy_frame_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_copy_frame_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph33_5 = 7'd5;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph33_6 = 7'd6;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph33_7 = 7'd7;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge76_8 = 7'd8;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge76_9 = 7'd9;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge76_10 = 7'd10;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader_11 = 7'd11;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader_12 = 7'd12;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader_13 = 7'd13;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph13_14 = 7'd14;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph13_15 = 7'd15;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph13_16 = 7'd16;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph13_17 = 7'd17;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph13_18 = 7'd18;
parameter [6:0] LEGUP_F_copy_frame_BB_22_19 = 7'd19;
parameter [6:0] LEGUP_F_copy_frame_BB_22_20 = 7'd20;
parameter [6:0] LEGUP_F_copy_frame_BB_22_21 = 7'd21;
parameter [6:0] LEGUP_F_copy_frame_BB_22_22 = 7'd22;
parameter [6:0] LEGUP_F_copy_frame_BB_22_23 = 7'd23;
parameter [6:0] LEGUP_F_copy_frame_BB_22_24 = 7'd24;
parameter [6:0] LEGUP_F_copy_frame_BB_22_25 = 7'd25;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_26 = 7'd26;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_27 = 7'd27;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_28 = 7'd28;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_29 = 7'd29;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_30 = 7'd30;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph10_31 = 7'd31;
parameter [6:0] LEGUP_F_copy_frame_BB_39_32 = 7'd32;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph_33 = 7'd33;
parameter [6:0] LEGUP_F_copy_frame_BB_45_34 = 7'd34;
parameter [6:0] LEGUP_F_copy_frame_BB_45_35 = 7'd35;
parameter [6:0] LEGUP_F_copy_frame_BB_45_36 = 7'd36;
parameter [6:0] LEGUP_F_copy_frame_BB_45_37 = 7'd37;
parameter [6:0] LEGUP_F_copy_frame_BB_45_38 = 7'd38;
parameter [6:0] LEGUP_F_copy_frame_BB_45_39 = 7'd39;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge_40 = 7'd40;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge_41 = 7'd41;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge_42 = 7'd42;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge73_43 = 7'd43;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge74_44 = 7'd44;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge74_45 = 7'd45;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge74_46 = 7'd46;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge11_47 = 7'd47;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge11_48 = 7'd48;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge11_49 = 7'd49;
parameter [6:0] LEGUP_F_copy_frame_BB_55_50 = 7'd50;
parameter [6:0] LEGUP_F_copy_frame_BB_58_51 = 7'd51;
parameter [6:0] LEGUP_F_copy_frame_BB_58_52 = 7'd52;
parameter [6:0] LEGUP_F_copy_frame_BB_58_53 = 7'd53;
parameter [6:0] LEGUP_F_copy_frame_BB_58_54 = 7'd54;
parameter [6:0] LEGUP_F_copy_frame_BB_58_55 = 7'd55;
parameter [6:0] LEGUP_F_copy_frame_BB_58_56 = 7'd56;
parameter [6:0] LEGUP_F_copy_frame_BB_58_57 = 7'd57;
parameter [6:0] LEGUP_F_copy_frame_BB_58_58 = 7'd58;
parameter [6:0] LEGUP_F_copy_frame_BB_58_59 = 7'd59;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_60 = 7'd60;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_61 = 7'd61;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_62 = 7'd62;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_63 = 7'd63;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_64 = 7'd64;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_65 = 7'd65;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_66 = 7'd66;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph30_67 = 7'd67;
parameter [6:0] LEGUP_F_copy_frame_BB_82_68 = 7'd68;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader14_lr_ph_69 = 7'd69;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader14_70 = 7'd70;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_preheader_71 = 7'd71;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_72 = 7'd72;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_73 = 7'd73;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_74 = 7'd74;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_75 = 7'd75;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_76 = 7'd76;
parameter [6:0] LEGUP_F_copy_frame_BB__lr_ph17_77 = 7'd77;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge18_78 = 7'd78;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge18_79 = 7'd79;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge18_80 = 7'd80;
parameter [6:0] LEGUP_F_copy_frame_BB__preheader14__crit_edge_81 = 7'd81;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge23_82 = 7'd82;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge23_83 = 7'd83;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge23_84 = 7'd84;
parameter [6:0] LEGUP_F_copy_frame_BB_100_85 = 7'd85;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge75_86 = 7'd86;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge75_87 = 7'd87;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge75_88 = 7'd88;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_loopexit_89 = 7'd89;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_loopexit1_90 = 7'd90;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_91 = 7'd91;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_92 = 7'd92;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_93 = 7'd93;
parameter [6:0] LEGUP_F_copy_frame_BB__loopexit_94 = 7'd94;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95 = 7'd95;
parameter [6:0] LEGUP_F_copy_frame_BB___crit_edge34_96 = 7'd96;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_0_1_reg;
reg [31:0] copy_frame_0_2;
reg [31:0] copy_frame_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_0_3_reg;
reg [31:0] copy_frame_0_4;
reg [31:0] copy_frame_0_4_reg;
reg [31:0] copy_frame_0_5;
reg [31:0] copy_frame_0_5_reg;
reg  copy_frame_0_6;
reg  copy_frame_0_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph33_11_reg;
reg [31:0] copy_frame___crit_edge76_tileno_031;
reg [31:0] copy_frame___crit_edge76_tileno_031_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge76_scevgep6768;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge76_scevgep6768_reg;
reg [31:0] copy_frame___crit_edge76_tmp69;
reg [31:0] copy_frame___crit_edge76_tmp69_reg;
reg [31:0] copy_frame___crit_edge76_12;
reg [31:0] copy_frame___crit_edge76_12_reg;
reg  copy_frame___crit_edge76_13;
reg  copy_frame___crit_edge76_13_reg;
reg [31:0] copy_frame__preheader_14;
reg [31:0] copy_frame__preheader_14_reg;
reg  copy_frame__preheader_15;
reg  copy_frame__preheader_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph13_21_reg;
reg [31:0] copy_frame_22_23;
reg [31:0] copy_frame_22_23_reg;
reg [31:0] copy_frame_22_compno_012;
reg [31:0] copy_frame_22_compno_012_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_scevgep46_reg;
reg [31:0] copy_frame_22_tmp47;
reg [31:0] copy_frame_22_tmp47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_26_reg;
reg [31:0] copy_frame_22_27;
reg [31:0] copy_frame_22_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_22_28_reg;
reg [31:0] copy_frame_22_29;
reg [31:0] copy_frame_22_29_reg;
reg  copy_frame_22_30;
reg  copy_frame_22_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep4445;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep4445_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_scevgep41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_31_reg;
reg [31:0] copy_frame__lr_ph10_32;
reg [31:0] copy_frame__lr_ph10_32_reg;
reg [31:0] copy_frame__lr_ph10_33;
reg [31:0] copy_frame__lr_ph10_33_reg;
reg [31:0] copy_frame__lr_ph10_34;
reg [31:0] copy_frame__lr_ph10_34_reg;
reg [31:0] copy_frame__lr_ph10__sum2;
reg [31:0] copy_frame__lr_ph10__sum2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph10_38_reg;
reg [31:0] copy_frame__lr_ph10_tmp39;
reg [31:0] copy_frame__lr_ph10_tmp39_reg;
reg [31:0] copy_frame__lr_ph10__pre79;
reg [31:0] copy_frame__lr_ph10__pre79_reg;
reg [31:0] copy_frame_39_40;
reg [31:0] copy_frame_39_40_reg;
reg [31:0] copy_frame_39_41;
reg [31:0] copy_frame_39_41_reg;
reg [31:0] copy_frame_39_42;
reg [31:0] copy_frame_39_42_reg;
reg [31:0] copy_frame_39_43;
reg [31:0] copy_frame_39_43_reg;
reg [31:0] copy_frame_39_indvar37;
reg [31:0] copy_frame_39_indvar37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_39_line_07;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_39_line_07_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_39_dst_06;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_39_dst_06_reg;
reg [31:0] copy_frame_39_tmp40;
reg [31:0] copy_frame_39_tmp40_reg;
reg  copy_frame_39_44;
reg  copy_frame_39_44_reg;
reg [31:0] copy_frame__lr_ph_tmp;
reg [31:0] copy_frame__lr_ph_tmp_reg;
reg [31:0] copy_frame_45_indvar;
reg [31:0] copy_frame_45_indvar_reg;
reg [31:0] copy_frame_45_tmp35;
reg [31:0] copy_frame_45_tmp35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_45_ptr_04;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_45_ptr_04_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_45_dst_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_45_dst_13_reg;
reg [31:0] copy_frame_45_46;
reg [31:0] copy_frame_45_46_reg;
reg [31:0] copy_frame_45_47;
reg [31:0] copy_frame_45_47_reg;
reg [31:0] copy_frame_45_48;
reg [31:0] copy_frame_45_48_reg;
reg  copy_frame_45_49;
reg  copy_frame_45_49_reg;
reg [31:0] copy_frame_45_indvar_next;
reg [31:0] copy_frame_45_indvar_next_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge_scevgep_reg;
reg [31:0] copy_frame___crit_edge__pre72;
reg [31:0] copy_frame___crit_edge__pre72_reg;
reg [31:0] copy_frame___crit_edge__pre80;
reg [31:0] copy_frame___crit_edge__pre80_reg;
reg [31:0] copy_frame___crit_edge73_50;
reg [31:0] copy_frame___crit_edge73_50_reg;
reg [31:0] copy_frame___crit_edge73_51;
reg [31:0] copy_frame___crit_edge73_51_reg;
reg [31:0] copy_frame___crit_edge73_52;
reg [31:0] copy_frame___crit_edge73_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge73_dst_1_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge73_dst_1_lcssa_reg;
reg  copy_frame___crit_edge73_53;
reg  copy_frame___crit_edge73_53_reg;
reg [31:0] copy_frame___crit_edge74_indvar_next38;
reg [31:0] copy_frame___crit_edge74_indvar_next38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge74_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge74_54_reg;
reg [31:0] copy_frame___crit_edge74__pre78;
reg [31:0] copy_frame___crit_edge74__pre78_reg;
reg [31:0] copy_frame___crit_edge11__pre71;
reg [31:0] copy_frame___crit_edge11__pre71_reg;
reg [31:0] copy_frame_55_56;
reg [31:0] copy_frame_55_56_reg;
reg  copy_frame_55_57;
reg  copy_frame_55_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_64_reg;
reg [31:0] copy_frame_58_65;
reg [31:0] copy_frame_58_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_58_66_reg;
reg [31:0] copy_frame_58_67;
reg [31:0] copy_frame_58_67_reg;
reg  copy_frame_58_68;
reg  copy_frame_58_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_71_reg;
reg [31:0] copy_frame__lr_ph30_72;
reg [31:0] copy_frame__lr_ph30_72_reg;
reg [31:0] copy_frame__lr_ph30_73;
reg [31:0] copy_frame__lr_ph30_73_reg;
reg [31:0] copy_frame__lr_ph30_74;
reg [31:0] copy_frame__lr_ph30_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_75_reg;
reg [31:0] copy_frame__lr_ph30_76;
reg [31:0] copy_frame__lr_ph30_76_reg;
reg [31:0] copy_frame__lr_ph30_77;
reg [31:0] copy_frame__lr_ph30_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_78_reg;
reg [31:0] copy_frame__lr_ph30__sum;
reg [31:0] copy_frame__lr_ph30__sum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph30_81_reg;
reg [31:0] copy_frame__lr_ph30_tmp65;
reg [31:0] copy_frame__lr_ph30_tmp65_reg;
reg [31:0] copy_frame__lr_ph30__pre82;
reg [31:0] copy_frame__lr_ph30__pre82_reg;
reg [31:0] copy_frame_82_83;
reg [31:0] copy_frame_82_83_reg;
reg [31:0] copy_frame_82_84;
reg [31:0] copy_frame_82_84_reg;
reg [31:0] copy_frame_82_85;
reg [31:0] copy_frame_82_85_reg;
reg [31:0] copy_frame_82_86;
reg [31:0] copy_frame_82_86_reg;
reg [31:0] copy_frame_82_87;
reg [31:0] copy_frame_82_87_reg;
reg [31:0] copy_frame_82_indvar63;
reg [31:0] copy_frame_82_indvar63_reg;
reg [31:0] copy_frame_82_i_028;
reg [31:0] copy_frame_82_i_028_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_82_line_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_82_line_126_reg;
reg [31:0] copy_frame_82_tmp66;
reg [31:0] copy_frame_82_tmp66_reg;
reg  copy_frame_82_88;
reg  copy_frame_82_88_reg;
reg [31:0] copy_frame__preheader14_lr_ph_tmp59;
reg [31:0] copy_frame__preheader14_lr_ph_tmp59_reg;
reg [31:0] copy_frame__preheader14_lr_ph_tmp61;
reg [31:0] copy_frame__preheader14_lr_ph_tmp61_reg;
reg [31:0] copy_frame__preheader14_89;
reg [31:0] copy_frame__preheader14_89_reg;
reg [31:0] copy_frame__preheader14_90;
reg [31:0] copy_frame__preheader14_90_reg;
reg [31:0] copy_frame__preheader14_indvar55;
reg [31:0] copy_frame__preheader14_indvar55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__preheader14_ptr1_022;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__preheader14_ptr1_022_reg;
reg [31:0] copy_frame__preheader14_tmp57;
reg [31:0] copy_frame__preheader14_tmp57_reg;
reg [31:0] copy_frame__preheader14_tmp62;
reg [31:0] copy_frame__preheader14_tmp62_reg;
reg  copy_frame__preheader14_91;
reg  copy_frame__preheader14_91_reg;
reg [31:0] copy_frame__lr_ph17_compno_115;
reg [31:0] copy_frame__lr_ph17_compno_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_ptr1_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_ptr1_116_reg;
reg [31:0] copy_frame__lr_ph17_tmp50;
reg [31:0] copy_frame__lr_ph17_tmp50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_scevgep5253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_scevgep5253_reg;
reg [31:0] copy_frame__lr_ph17_92;
reg [31:0] copy_frame__lr_ph17_92_reg;
reg [31:0] copy_frame__lr_ph17_93;
reg [31:0] copy_frame__lr_ph17_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__lr_ph17_scevgep58_reg;
reg [31:0] copy_frame__lr_ph17_95;
reg [31:0] copy_frame__lr_ph17_95_reg;
reg  copy_frame__lr_ph17_96;
reg  copy_frame__lr_ph17_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge18_scevgep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge18_scevgep51_reg;
reg [31:0] copy_frame___crit_edge18__pre81;
reg [31:0] copy_frame___crit_edge18__pre81_reg;
reg [31:0] copy_frame__preheader14__crit_edge_97;
reg [31:0] copy_frame__preheader14__crit_edge_97_reg;
reg [31:0] copy_frame__preheader14__crit_edge_98;
reg [31:0] copy_frame__preheader14__crit_edge_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__preheader14__crit_edge_ptr1_1_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg;
reg  copy_frame__preheader14__crit_edge_99;
reg  copy_frame__preheader14__crit_edge_99_reg;
reg [31:0] copy_frame__preheader14__crit_edge_indvar_next56;
reg [31:0] copy_frame__preheader14__crit_edge_indvar_next56_reg;
reg [31:0] copy_frame___crit_edge23_tmp60;
reg [31:0] copy_frame___crit_edge23_tmp60_reg;
reg [31:0] copy_frame___crit_edge23__pre;
reg [31:0] copy_frame___crit_edge23__pre_reg;
reg [31:0] copy_frame___crit_edge23__pre70;
reg [31:0] copy_frame___crit_edge23__pre70_reg;
reg [31:0] copy_frame_100_101;
reg [31:0] copy_frame_100_101_reg;
reg [31:0] copy_frame_100_102;
reg [31:0] copy_frame_100_102_reg;
reg [31:0] copy_frame_100_103;
reg [31:0] copy_frame_100_103_reg;
reg [31:0] copy_frame_100_104;
reg [31:0] copy_frame_100_104_reg;
reg [31:0] copy_frame_100_i_1_lcssa;
reg [31:0] copy_frame_100_i_1_lcssa_reg;
reg  copy_frame_100_105;
reg  copy_frame_100_105_reg;
reg [31:0] copy_frame___crit_edge75_indvar_next64;
reg [31:0] copy_frame___crit_edge75_indvar_next64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge75_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame___crit_edge75_106_reg;
reg [31:0] copy_frame___crit_edge75__pre77;
reg [31:0] copy_frame___crit_edge75__pre77_reg;
reg [31:0] copy_frame__loopexit_107;
reg [31:0] copy_frame__loopexit_107_reg;
reg [31:0] copy_frame__loopexit_108;
reg [31:0] copy_frame__loopexit_108_reg;
reg [31:0] copy_frame__loopexit_109;
reg [31:0] copy_frame__loopexit_109_reg;
reg  copy_frame__loopexit_110;
reg  copy_frame__loopexit_110_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_copy_frame_0_5_en;
reg [31:0] copy_frame_0_5_stage0_reg;
reg  lpm_mult_copy_frame__lr_ph10_34_en;
reg [31:0] copy_frame__lr_ph10_34_stage0_reg;
reg  lpm_mult_copy_frame__lr_ph30_76_en;
reg [31:0] copy_frame__lr_ph30_76_stage0_reg;
reg  lpm_mult_copy_frame__lr_ph30_77_en;
reg [31:0] copy_frame__lr_ph30_77_stage0_reg;
reg  lpm_mult_copy_frame__loopexit_109_en;
reg [31:0] copy_frame__loopexit_109_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_0_6 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_5;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_0_4) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_0_6 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge34_96;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge34_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_5;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_6;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_6;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_7;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph33_7;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph33_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_8;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_8;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_9;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_9;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_10;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_10;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_10) & (memory_controller_waitrequest == 1'd0)) & (copy_frame___crit_edge76_13 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_51;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_10) & (memory_controller_waitrequest == 1'd0)) & (copy_frame___crit_edge76_13 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_11;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_12;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader_13;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader_13) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader_15 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_14;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader_13) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader_15 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_91;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_14;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_15;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_15;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_16;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_16;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_17;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_17;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_18;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph13_18;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph13_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_19;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_19;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_20;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_20;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_21;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_21;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_22;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_22;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_23;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_23;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_24;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_22_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_25;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_22_25) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_22_30 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_26;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_22_25) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_22_30 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_55_50;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_55_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_26;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_27;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_27;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_28;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_28;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_29;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_29;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_30;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_30;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_31;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph10_31;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_39_32;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_39_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_39_32;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_39_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph_33;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge73_43;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge73_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph_33;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_34;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_34;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_35;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_35;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_36;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_36;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_37;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_37;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_38;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_38;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_39;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_45_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_39;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_45_39) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_45_49 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_45_34;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_45_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_45_39) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_45_49 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_40;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_40;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_41;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_41;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_42;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge_42;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge73_43;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge73_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge73_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge73_43;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge73_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB___crit_edge73_43) & (memory_controller_waitrequest == 1'd0)) & (copy_frame___crit_edge73_53 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_44;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB___crit_edge73_43) & (memory_controller_waitrequest == 1'd0)) & (copy_frame___crit_edge73_53 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_47;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_44;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_45;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_45;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_46;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge74_46;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge74_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_39_32;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_39_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_47;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_48;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_48;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_49;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge11_49;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge11_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_55_50;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_55_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_55_50;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_55_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_22_19;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_22_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_loopexit1_90;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_loopexit1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_51;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_52;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_52;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_53;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_53;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_54;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_54;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_55;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_55;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_56;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_56;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_57;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_57;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_58;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_58;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_59;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_58_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_58_59;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_58_59) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_58_68 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_60;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_58_59) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_58_68 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_91;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_60;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_61;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_61;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_62;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_62;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_63;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_63;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_64;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_64;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_65;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_65;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_66;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_66;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_67;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph30_67;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph30_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_82_68;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_82_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_82_68;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_82_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14_lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_100_85;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_100_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14_lr_ph_69;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14_70;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14_70;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_preheader_71;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14__crit_edge_81;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_preheader_71;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_72;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_72;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_73;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_73;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_74;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_74;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_75;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_75;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_76;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_76;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_77;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_77;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__lr_ph17_96 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__lr_ph17_72;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__lr_ph17_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__lr_ph17_96 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_78;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_78;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_79;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_79;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_80;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge18_80;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge18_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14__crit_edge_81;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14__crit_edge_81;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__preheader14_70;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__preheader14_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_82;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_82;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_83;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_83;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_84;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge23_84;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge23_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_100_85;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_100_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB_100_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB_100_85;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_100_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_100_85) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_100_105 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_86;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB_100_85) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_100_105 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_loopexit_89;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_loopexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_86;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_87;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_87;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_88;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge75_88;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge75_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB_82_68;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB_82_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_loopexit_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_loopexit_89;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_loopexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_loopexit_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_91;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_loopexit1_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_loopexit1_90;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_loopexit1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_loopexit1_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_91;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_91;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_92;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_92;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_93;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_93;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB__loopexit_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB__loopexit_94;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB__loopexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__loopexit_94) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__loopexit_110 == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge76_8;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge76_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_copy_frame_BB__loopexit_94) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__loopexit_110 == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge34_loopexit_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge34_96;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge34_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge34_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_copy_frame_BB___crit_edge34_96;
if (reset == 1'b0 && ^(LEGUP_F_copy_frame_BB___crit_edge34_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge34_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* copy_frame: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
begin
copy_frame_0_1 = arg_s;
end
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
copy_frame_0_1_reg <= copy_frame_0_1;
if (reset == 1'b0 && ^(copy_frame_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_1_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
copy_frame_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_3))
begin
copy_frame_0_2_reg <= copy_frame_0_2;
if (reset == 1'b0 && ^(copy_frame_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_2_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 1*/
begin
copy_frame_0_3 = (arg_s + 4);
end
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
copy_frame_0_3_reg <= copy_frame_0_3;
if (reset == 1'b0 && ^(copy_frame_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_3_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
begin
copy_frame_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_3))
begin
copy_frame_0_4_reg <= copy_frame_0_4;
if (reset == 1'b0 && ^(copy_frame_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_4_reg"); $finish; end
end
end
always @(*) begin
copy_frame_0_5 = copy_frame_0_5_stage0_reg;
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %5 = mul nsw i32 %4, %2*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_4))
begin
copy_frame_0_5_reg <= copy_frame_0_5;
if (reset == 1'b0 && ^(copy_frame_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_5_reg"); $finish; end
end
/* copy_frame: %0*/
/*   %5 = mul nsw i32 %4, %2*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_4))
begin
copy_frame_0_5_reg <= copy_frame_0_5;
if (reset == 1'b0 && ^(copy_frame_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_5_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %0*/
/*   %6 = icmp sgt i32 %5, 0*/
begin
copy_frame_0_6 = ($signed(copy_frame_0_5) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %6 = icmp sgt i32 %5, 0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_4))
begin
copy_frame_0_6_reg <= copy_frame_0_6;
if (reset == 1'b0 && ^(copy_frame_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_0_6_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph33*/
/*   %7 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 5*/
begin
copy_frame__lr_ph33_7 = (arg_s + 20);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph33*/
/*   %7 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 5*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
copy_frame__lr_ph33_7_reg <= copy_frame__lr_ph33_7;
if (reset == 1'b0 && ^(copy_frame__lr_ph33_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph33_7_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
begin
copy_frame__lr_ph33_8 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_7))
begin
copy_frame__lr_ph33_8_reg <= copy_frame__lr_ph33_8;
if (reset == 1'b0 && ^(copy_frame__lr_ph33_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph33_8_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph33*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 4*/
begin
copy_frame__lr_ph33_9 = (arg_s + 16);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph33*/
/*   %9 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 4*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
copy_frame__lr_ph33_9_reg <= copy_frame__lr_ph33_9;
if (reset == 1'b0 && ^(copy_frame__lr_ph33_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph33_9_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph33*/
/*   %10 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
begin
copy_frame__lr_ph33_10 = (arg_s + 12);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph33*/
/*   %10 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
copy_frame__lr_ph33_10_reg <= copy_frame__lr_ph33_10;
if (reset == 1'b0 && ^(copy_frame__lr_ph33_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph33_10_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph33*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 2*/
begin
copy_frame__lr_ph33_11 = (arg_s + 8);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph33*/
/*   %11 = getelementptr inbounds %struct.TYPE_8__* %s, i32 0, i32 2*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
copy_frame__lr_ph33_11_reg <= copy_frame__lr_ph33_11;
if (reset == 1'b0 && ^(copy_frame__lr_ph33_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph33_11_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge76*/
/*   %tileno.031 = phi i32 [ 0, %.lr.ph33 ], [ %tmp69, %.loopexit ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_7) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge76_tileno_031 = 32'd0;
end
/* copy_frame: %._crit_edge76*/
/*   %tileno.031 = phi i32 [ 0, %.lr.ph33 ], [ %tmp69, %.loopexit ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__loopexit_94) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__loopexit_110 == 1'd1))) */
begin
copy_frame___crit_edge76_tileno_031 = copy_frame___crit_edge76_tmp69_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge76*/
/*   %tileno.031 = phi i32 [ 0, %.lr.ph33 ], [ %tmp69, %.loopexit ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_7) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge76_tileno_031_reg <= copy_frame___crit_edge76_tileno_031;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_tileno_031) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_tileno_031_reg"); $finish; end
end
/* copy_frame: %._crit_edge76*/
/*   %tileno.031 = phi i32 [ 0, %.lr.ph33 ], [ %tmp69, %.loopexit ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__loopexit_94) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__loopexit_110 == 1'd1)))
begin
copy_frame___crit_edge76_tileno_031_reg <= copy_frame___crit_edge76_tileno_031;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_tileno_031) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_tileno_031_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge76*/
/*   %scevgep6768 = getelementptr inbounds %struct.TYPE_7__* %8, i32 %tileno.031, i32 0*/
begin
copy_frame___crit_edge76_scevgep6768 = (copy_frame__lr_ph33_8_reg + (4 * copy_frame___crit_edge76_tileno_031_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge76*/
/*   %scevgep6768 = getelementptr inbounds %struct.TYPE_7__* %8, i32 %tileno.031, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
copy_frame___crit_edge76_scevgep6768_reg <= copy_frame___crit_edge76_scevgep6768;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_scevgep6768) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_scevgep6768_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge76*/
/*   %tmp69 = add i32 %tileno.031, 1*/
begin
copy_frame___crit_edge76_tmp69 = (copy_frame___crit_edge76_tileno_031_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge76*/
/*   %tmp69 = add i32 %tileno.031, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
copy_frame___crit_edge76_tmp69_reg <= copy_frame___crit_edge76_tmp69;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_tmp69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_tmp69_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
begin
copy_frame___crit_edge76_12 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_10))
begin
copy_frame___crit_edge76_12_reg <= copy_frame___crit_edge76_12;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_12_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge76*/
/*   %13 = icmp eq i32 %12, 0*/
begin
copy_frame___crit_edge76_13 = (copy_frame___crit_edge76_12 == 32'd0);
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge76*/
/*   %13 = icmp eq i32 %12, 0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_10))
begin
copy_frame___crit_edge76_13_reg <= copy_frame___crit_edge76_13;
if (reset == 1'b0 && ^(copy_frame___crit_edge76_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge76_13_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
begin
copy_frame__preheader_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_13))
begin
copy_frame__preheader_14_reg <= copy_frame__preheader_14;
if (reset == 1'b0 && ^(copy_frame__preheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader_14_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader*/
/*   %15 = icmp sgt i32 %14, 0*/
begin
copy_frame__preheader_15 = ($signed(copy_frame__preheader_14) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader*/
/*   %15 = icmp sgt i32 %14, 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_13))
begin
copy_frame__preheader_15_reg <= copy_frame__preheader_15;
if (reset == 1'b0 && ^(copy_frame__preheader_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader_15_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
begin
copy_frame__lr_ph13_16 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
copy_frame__lr_ph13_16_reg <= copy_frame__lr_ph13_16;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_16_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
begin
copy_frame__lr_ph13_17 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
copy_frame__lr_ph13_17_reg <= copy_frame__lr_ph13_17;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_17_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %17, i32 0, i32 1*/
begin
copy_frame__lr_ph13_18 = (copy_frame__lr_ph13_17 + 4);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %18 = getelementptr inbounds %struct.TYPE_6__* %17, i32 0, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
copy_frame__lr_ph13_18_reg <= copy_frame__lr_ph13_18;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_18_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
begin
copy_frame__lr_ph13_19 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18))
begin
copy_frame__lr_ph13_19_reg <= copy_frame__lr_ph13_19;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_19_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %20 = getelementptr inbounds %struct.TYPE_6__* %17, i32 0, i32 0*/
begin
copy_frame__lr_ph13_20 = copy_frame__lr_ph13_17;
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %20 = getelementptr inbounds %struct.TYPE_6__* %17, i32 0, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
copy_frame__lr_ph13_20_reg <= copy_frame__lr_ph13_20;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_20_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
begin
copy_frame__lr_ph13_21 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18))
begin
copy_frame__lr_ph13_21_reg <= copy_frame__lr_ph13_21;
if (reset == 1'b0 && ^(copy_frame__lr_ph13_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph13_21_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %23 = phi i32 [ %14, %.lr.ph13 ], [ %56, %55 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_22_23 = copy_frame__preheader_14_reg;
end
/* copy_frame: %22*/
/*   %23 = phi i32 [ %14, %.lr.ph13 ], [ %56, %55 ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd1))) */
begin
copy_frame_22_23 = copy_frame_55_56_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %23 = phi i32 [ %14, %.lr.ph13 ], [ %56, %55 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_22_23_reg <= copy_frame_22_23;
if (reset == 1'b0 && ^(copy_frame_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_23_reg"); $finish; end
end
/* copy_frame: %22*/
/*   %23 = phi i32 [ %14, %.lr.ph13 ], [ %56, %55 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd1)))
begin
copy_frame_22_23_reg <= copy_frame_22_23;
if (reset == 1'b0 && ^(copy_frame_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_23_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %compno.012 = phi i32 [ 0, %.lr.ph13 ], [ %tmp47, %55 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_22_compno_012 = 32'd0;
end
/* copy_frame: %22*/
/*   %compno.012 = phi i32 [ 0, %.lr.ph13 ], [ %tmp47, %55 ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd1))) */
begin
copy_frame_22_compno_012 = copy_frame_22_tmp47_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %compno.012 = phi i32 [ 0, %.lr.ph13 ], [ %tmp47, %55 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_18) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_22_compno_012_reg <= copy_frame_22_compno_012;
if (reset == 1'b0 && ^(copy_frame_22_compno_012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_compno_012_reg"); $finish; end
end
/* copy_frame: %22*/
/*   %compno.012 = phi i32 [ 0, %.lr.ph13 ], [ %tmp47, %55 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_55_50) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_55_57 == 1'd1)))
begin
copy_frame_22_compno_012_reg <= copy_frame_22_compno_012;
if (reset == 1'b0 && ^(copy_frame_22_compno_012) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_compno_012_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %scevgep46 = getelementptr %struct.TYPE_6__* %16, i32 %compno.012, i32 1*/
begin
copy_frame_22_scevgep46 = (copy_frame__lr_ph13_16_reg + ((8 * copy_frame_22_compno_012_reg) + 4));
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %scevgep46 = getelementptr %struct.TYPE_6__* %16, i32 %compno.012, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
copy_frame_22_scevgep46_reg <= copy_frame_22_scevgep46;
if (reset == 1'b0 && ^(copy_frame_22_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_scevgep46_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %tmp47 = add i32 %compno.012, 1*/
begin
copy_frame_22_tmp47 = (copy_frame_22_compno_012_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %tmp47 = add i32 %compno.012, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
copy_frame_22_tmp47_reg <= copy_frame_22_tmp47;
if (reset == 1'b0 && ^(copy_frame_22_tmp47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_tmp47_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
begin
copy_frame_22_24 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
copy_frame_22_24_reg <= copy_frame_22_24;
if (reset == 1'b0 && ^(copy_frame_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_24_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %25 = getelementptr inbounds i32** %24, i32 1*/
begin
copy_frame_22_25 = (copy_frame_22_24 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %25 = getelementptr inbounds i32** %24, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
copy_frame_22_25_reg <= copy_frame_22_25;
if (reset == 1'b0 && ^(copy_frame_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_25_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
begin
copy_frame_22_26 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
copy_frame_22_26_reg <= copy_frame_22_26;
if (reset == 1'b0 && ^(copy_frame_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_26_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
begin
copy_frame_22_27 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_25))
begin
copy_frame_22_27_reg <= copy_frame_22_27;
if (reset == 1'b0 && ^(copy_frame_22_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_27_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %28 = getelementptr inbounds i32* %26, i32 1*/
begin
copy_frame_22_28 = (copy_frame_22_26 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %28 = getelementptr inbounds i32* %26, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
copy_frame_22_28_reg <= copy_frame_22_28;
if (reset == 1'b0 && ^(copy_frame_22_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_28_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
begin
copy_frame_22_29 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_25))
begin
copy_frame_22_29_reg <= copy_frame_22_29;
if (reset == 1'b0 && ^(copy_frame_22_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_29_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %22*/
/*   %30 = icmp slt i32 %27, %29*/
begin
copy_frame_22_30 = ($signed(copy_frame_22_27) < $signed(copy_frame_22_29));
end
end
always @(posedge clk) begin
/* copy_frame: %22*/
/*   %30 = icmp slt i32 %27, %29*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_25))
begin
copy_frame_22_30_reg <= copy_frame_22_30;
if (reset == 1'b0 && ^(copy_frame_22_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_22_30_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep4445 = getelementptr inbounds %struct.TYPE_6__* %16, i32 %compno.012, i32 0*/
begin
copy_frame__lr_ph10_scevgep4445 = (copy_frame__lr_ph13_16_reg + (8 * copy_frame_22_compno_012_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep4445 = getelementptr inbounds %struct.TYPE_6__* %16, i32 %compno.012, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
copy_frame__lr_ph10_scevgep4445_reg <= copy_frame__lr_ph10_scevgep4445;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_scevgep4445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_scevgep4445_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep42 = getelementptr i32* %21, i32 %compno.012*/
begin
copy_frame__lr_ph10_scevgep42 = (copy_frame__lr_ph13_21_reg + (4 * copy_frame_22_compno_012_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep42 = getelementptr i32* %21, i32 %compno.012*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
copy_frame__lr_ph10_scevgep42_reg <= copy_frame__lr_ph10_scevgep42;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_scevgep42_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep41 = getelementptr i32** %19, i32 %compno.012*/
begin
copy_frame__lr_ph10_scevgep41 = (copy_frame__lr_ph13_19_reg + (4 * copy_frame_22_compno_012_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %scevgep41 = getelementptr i32** %19, i32 %compno.012*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
copy_frame__lr_ph10_scevgep41_reg <= copy_frame__lr_ph10_scevgep41;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_scevgep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_scevgep41_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
begin
copy_frame__lr_ph10_31 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
copy_frame__lr_ph10_31_reg <= copy_frame__lr_ph10_31;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_31_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
begin
copy_frame__lr_ph10_32 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
copy_frame__lr_ph10_32_reg <= copy_frame__lr_ph10_32;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_32_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
begin
copy_frame__lr_ph10_33 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_30))
begin
copy_frame__lr_ph10_33_reg <= copy_frame__lr_ph10_33;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_33_reg"); $finish; end
end
end
always @(*) begin
copy_frame__lr_ph10_34 = copy_frame__lr_ph10_34_stage0_reg;
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %34 = mul nsw i32 %32, %27*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
copy_frame__lr_ph10_34_reg <= copy_frame__lr_ph10_34;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_34_reg"); $finish; end
end
/* copy_frame: %.lr.ph10*/
/*   %34 = mul nsw i32 %32, %27*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
copy_frame__lr_ph10_34_reg <= copy_frame__lr_ph10_34;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_34_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %.sum2 = add i32 %33, %34*/
begin
copy_frame__lr_ph10__sum2 = (copy_frame__lr_ph10_33 + copy_frame__lr_ph10_34_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %.sum2 = add i32 %33, %34*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_30))
begin
copy_frame__lr_ph10__sum2_reg <= copy_frame__lr_ph10__sum2;
if (reset == 1'b0 && ^(copy_frame__lr_ph10__sum2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10__sum2_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
begin
copy_frame__lr_ph10_35 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
copy_frame__lr_ph10_35_reg <= copy_frame__lr_ph10_35;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_35_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %36 = getelementptr inbounds i32* %35, i32 %.sum2*/
begin
copy_frame__lr_ph10_36 = (copy_frame__lr_ph10_35_reg + (4 * copy_frame__lr_ph10__sum2_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %36 = getelementptr inbounds i32* %35, i32 %.sum2*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31))
begin
copy_frame__lr_ph10_36_reg <= copy_frame__lr_ph10_36;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_36_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
begin
copy_frame__lr_ph10_37 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31))
begin
copy_frame__lr_ph10_37_reg <= copy_frame__lr_ph10_37;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_37_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %38 = getelementptr inbounds i32* %31, i32 1*/
begin
copy_frame__lr_ph10_38 = (copy_frame__lr_ph10_31 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %38 = getelementptr inbounds i32* %31, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
copy_frame__lr_ph10_38_reg <= copy_frame__lr_ph10_38;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_38_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %tmp39 = add i32 %27, 1*/
begin
copy_frame__lr_ph10_tmp39 = (copy_frame_22_27_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %tmp39 = add i32 %27, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
copy_frame__lr_ph10_tmp39_reg <= copy_frame__lr_ph10_tmp39;
if (reset == 1'b0 && ^(copy_frame__lr_ph10_tmp39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10_tmp39_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
begin
copy_frame__lr_ph10__pre79 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_30))
begin
copy_frame__lr_ph10__pre79_reg <= copy_frame__lr_ph10__pre79;
if (reset == 1'b0 && ^(copy_frame__lr_ph10__pre79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph10__pre79_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %40 = phi i32 [ %32, %.lr.ph10 ], [ %50, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_40 = copy_frame__lr_ph10_32_reg;
end
/* copy_frame: %39*/
/*   %40 = phi i32 [ %32, %.lr.ph10 ], [ %50, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_40 = copy_frame___crit_edge73_50_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %40 = phi i32 [ %32, %.lr.ph10 ], [ %50, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_40_reg <= copy_frame_39_40;
if (reset == 1'b0 && ^(copy_frame_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_40_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %40 = phi i32 [ %32, %.lr.ph10 ], [ %50, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_40_reg <= copy_frame_39_40;
if (reset == 1'b0 && ^(copy_frame_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_40_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %41 = phi i32 [ %.pre79, %.lr.ph10 ], [ %51, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_41 = copy_frame__lr_ph10__pre79_reg;
end
/* copy_frame: %39*/
/*   %41 = phi i32 [ %.pre79, %.lr.ph10 ], [ %51, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_41 = copy_frame___crit_edge73_51_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %41 = phi i32 [ %.pre79, %.lr.ph10 ], [ %51, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_41_reg <= copy_frame_39_41;
if (reset == 1'b0 && ^(copy_frame_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_41_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %41 = phi i32 [ %.pre79, %.lr.ph10 ], [ %51, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_41_reg <= copy_frame_39_41;
if (reset == 1'b0 && ^(copy_frame_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_41_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %42 = phi i32 [ %33, %.lr.ph10 ], [ %.pre78, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_42 = copy_frame__lr_ph10_33_reg;
end
/* copy_frame: %39*/
/*   %42 = phi i32 [ %33, %.lr.ph10 ], [ %.pre78, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_42 = copy_frame___crit_edge74__pre78;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %42 = phi i32 [ %33, %.lr.ph10 ], [ %.pre78, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_42_reg <= copy_frame_39_42;
if (reset == 1'b0 && ^(copy_frame_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_42_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %42 = phi i32 [ %33, %.lr.ph10 ], [ %.pre78, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_42_reg <= copy_frame_39_42;
if (reset == 1'b0 && ^(copy_frame_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_42_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %43 = phi i32 [ %29, %.lr.ph10 ], [ %52, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_43 = copy_frame_22_29_reg;
end
/* copy_frame: %39*/
/*   %43 = phi i32 [ %29, %.lr.ph10 ], [ %52, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_43 = copy_frame___crit_edge73_52_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %43 = phi i32 [ %29, %.lr.ph10 ], [ %52, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_43_reg <= copy_frame_39_43;
if (reset == 1'b0 && ^(copy_frame_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_43_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %43 = phi i32 [ %29, %.lr.ph10 ], [ %52, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_43_reg <= copy_frame_39_43;
if (reset == 1'b0 && ^(copy_frame_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_43_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next38, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_indvar37 = 32'd0;
end
/* copy_frame: %39*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next38, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_indvar37 = copy_frame___crit_edge74_indvar_next38_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next38, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_indvar37_reg <= copy_frame_39_indvar37;
if (reset == 1'b0 && ^(copy_frame_39_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_indvar37_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %indvar37 = phi i32 [ 0, %.lr.ph10 ], [ %indvar.next38, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_indvar37_reg <= copy_frame_39_indvar37;
if (reset == 1'b0 && ^(copy_frame_39_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_indvar37_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %line.07 = phi i32* [ %36, %.lr.ph10 ], [ %54, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_line_07 = copy_frame__lr_ph10_36;
end
/* copy_frame: %39*/
/*   %line.07 = phi i32* [ %36, %.lr.ph10 ], [ %54, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_line_07 = copy_frame___crit_edge74_54_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %line.07 = phi i32* [ %36, %.lr.ph10 ], [ %54, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_line_07_reg <= copy_frame_39_line_07;
if (reset == 1'b0 && ^(copy_frame_39_line_07) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_line_07_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %line.07 = phi i32* [ %36, %.lr.ph10 ], [ %54, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_line_07_reg <= copy_frame_39_line_07;
if (reset == 1'b0 && ^(copy_frame_39_line_07) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_line_07_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %dst.06 = phi i32* [ %37, %.lr.ph10 ], [ %dst.1.lcssa, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_dst_06 = copy_frame__lr_ph10_37;
end
/* copy_frame: %39*/
/*   %dst.06 = phi i32* [ %37, %.lr.ph10 ], [ %dst.1.lcssa, %._crit_edge74 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_39_dst_06 = copy_frame___crit_edge73_dst_1_lcssa_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %dst.06 = phi i32* [ %37, %.lr.ph10 ], [ %dst.1.lcssa, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_31) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_dst_06_reg <= copy_frame_39_dst_06;
if (reset == 1'b0 && ^(copy_frame_39_dst_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_dst_06_reg"); $finish; end
end
/* copy_frame: %39*/
/*   %dst.06 = phi i32* [ %37, %.lr.ph10 ], [ %dst.1.lcssa, %._crit_edge74 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_39_dst_06_reg <= copy_frame_39_dst_06;
if (reset == 1'b0 && ^(copy_frame_39_dst_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_dst_06_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %tmp40 = add i32 %tmp39, %indvar37*/
begin
copy_frame_39_tmp40 = (copy_frame__lr_ph10_tmp39_reg + copy_frame_39_indvar37_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %tmp40 = add i32 %tmp39, %indvar37*/
if ((cur_state == LEGUP_F_copy_frame_BB_39_32))
begin
copy_frame_39_tmp40_reg <= copy_frame_39_tmp40;
if (reset == 1'b0 && ^(copy_frame_39_tmp40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_tmp40_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %39*/
/*   %44 = icmp slt i32 %42, %41*/
begin
copy_frame_39_44 = ($signed(copy_frame_39_42_reg) < $signed(copy_frame_39_41_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %39*/
/*   %44 = icmp slt i32 %42, %41*/
if ((cur_state == LEGUP_F_copy_frame_BB_39_32))
begin
copy_frame_39_44_reg <= copy_frame_39_44;
if (reset == 1'b0 && ^(copy_frame_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_39_44_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph*/
/*   %tmp = add i32 %42, 1*/
begin
copy_frame__lr_ph_tmp = (copy_frame_39_42_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph*/
/*   %tmp = add i32 %42, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph_33))
begin
copy_frame__lr_ph_tmp_reg <= copy_frame__lr_ph_tmp;
if (reset == 1'b0 && ^(copy_frame__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %45 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_45_indvar = 32'd0;
end
/* copy_frame: %45*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %45 ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB_45_39) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_45_49 == 1'd1))) */
begin
copy_frame_45_indvar = copy_frame_45_indvar_next_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %45 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_45_indvar_reg <= copy_frame_45_indvar;
if (reset == 1'b0 && ^(copy_frame_45_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_indvar_reg"); $finish; end
end
/* copy_frame: %45*/
/*   %indvar = phi i32 [ 0, %.lr.ph ], [ %indvar.next, %45 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_45_39) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_45_49 == 1'd1)))
begin
copy_frame_45_indvar_reg <= copy_frame_45_indvar;
if (reset == 1'b0 && ^(copy_frame_45_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_indvar_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %tmp35 = add i32 %tmp, %indvar*/
begin
copy_frame_45_tmp35 = (copy_frame__lr_ph_tmp_reg + copy_frame_45_indvar_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %tmp35 = add i32 %tmp, %indvar*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
copy_frame_45_tmp35_reg <= copy_frame_45_tmp35;
if (reset == 1'b0 && ^(copy_frame_45_tmp35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_tmp35_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %ptr.04 = getelementptr i32* %line.07, i32 %indvar*/
begin
copy_frame_45_ptr_04 = (copy_frame_39_line_07_reg + (4 * copy_frame_45_indvar_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %ptr.04 = getelementptr i32* %line.07, i32 %indvar*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
copy_frame_45_ptr_04_reg <= copy_frame_45_ptr_04;
if (reset == 1'b0 && ^(copy_frame_45_ptr_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_ptr_04_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %dst.13 = getelementptr i32* %dst.06, i32 %indvar*/
begin
copy_frame_45_dst_13 = (copy_frame_39_dst_06_reg + (4 * copy_frame_45_indvar_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %dst.13 = getelementptr i32* %dst.06, i32 %indvar*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
copy_frame_45_dst_13_reg <= copy_frame_45_dst_13;
if (reset == 1'b0 && ^(copy_frame_45_dst_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_dst_13_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
begin
copy_frame_45_46 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
copy_frame_45_46_reg <= copy_frame_45_46;
if (reset == 1'b0 && ^(copy_frame_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_46_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %47 = add nsw i32 %46, -128*/
begin
copy_frame_45_47 = (copy_frame_45_46 + -32'd128);
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %47 = add nsw i32 %46, -128*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
copy_frame_45_47_reg <= copy_frame_45_47;
if (reset == 1'b0 && ^(copy_frame_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_47_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
begin
copy_frame_45_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_39))
begin
copy_frame_45_48_reg <= copy_frame_45_48;
if (reset == 1'b0 && ^(copy_frame_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_48_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %49 = icmp slt i32 %tmp35, %48*/
begin
copy_frame_45_49 = ($signed(copy_frame_45_tmp35_reg) < $signed(copy_frame_45_48));
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %49 = icmp slt i32 %tmp35, %48*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_39))
begin
copy_frame_45_49_reg <= copy_frame_45_49;
if (reset == 1'b0 && ^(copy_frame_45_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_49_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %45*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
copy_frame_45_indvar_next = (copy_frame_45_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %45*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
copy_frame_45_indvar_next_reg <= copy_frame_45_indvar_next;
if (reset == 1'b0 && ^(copy_frame_45_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_45_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge*/
/*   %scevgep = getelementptr i32* %dst.06, i32 %indvar.next*/
begin
copy_frame___crit_edge_scevgep = (copy_frame_39_dst_06_reg + (4 * copy_frame_45_indvar_next_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge*/
/*   %scevgep = getelementptr i32* %dst.06, i32 %indvar.next*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
copy_frame___crit_edge_scevgep_reg <= copy_frame___crit_edge_scevgep;
if (reset == 1'b0 && ^(copy_frame___crit_edge_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
begin
copy_frame___crit_edge__pre72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42))
begin
copy_frame___crit_edge__pre72_reg <= copy_frame___crit_edge__pre72;
if (reset == 1'b0 && ^(copy_frame___crit_edge__pre72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge__pre72_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
begin
copy_frame___crit_edge__pre80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42))
begin
copy_frame___crit_edge__pre80_reg <= copy_frame___crit_edge__pre80;
if (reset == 1'b0 && ^(copy_frame___crit_edge__pre80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge__pre80_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge73*/
/*   %50 = phi i32 [ %.pre80, %._crit_edge ], [ %40, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_50 = copy_frame_39_40_reg;
end
/* copy_frame: %._crit_edge73*/
/*   %50 = phi i32 [ %.pre80, %._crit_edge ], [ %40, %39 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame___crit_edge73_50 = copy_frame___crit_edge__pre80;
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge73*/
/*   %50 = phi i32 [ %.pre80, %._crit_edge ], [ %40, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_50_reg <= copy_frame___crit_edge73_50;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_50_reg"); $finish; end
end
/* copy_frame: %._crit_edge73*/
/*   %50 = phi i32 [ %.pre80, %._crit_edge ], [ %40, %39 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge73_50_reg <= copy_frame___crit_edge73_50;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_50_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge73*/
/*   %51 = phi i32 [ %48, %._crit_edge ], [ %41, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_51 = copy_frame_39_41_reg;
end
/* copy_frame: %._crit_edge73*/
/*   %51 = phi i32 [ %48, %._crit_edge ], [ %41, %39 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame___crit_edge73_51 = copy_frame_45_48_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge73*/
/*   %51 = phi i32 [ %48, %._crit_edge ], [ %41, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_51_reg <= copy_frame___crit_edge73_51;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_51_reg"); $finish; end
end
/* copy_frame: %._crit_edge73*/
/*   %51 = phi i32 [ %48, %._crit_edge ], [ %41, %39 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge73_51_reg <= copy_frame___crit_edge73_51;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_51_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge73*/
/*   %52 = phi i32 [ %.pre72, %._crit_edge ], [ %43, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_52 = copy_frame_39_43_reg;
end
/* copy_frame: %._crit_edge73*/
/*   %52 = phi i32 [ %.pre72, %._crit_edge ], [ %43, %39 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame___crit_edge73_52 = copy_frame___crit_edge__pre72;
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge73*/
/*   %52 = phi i32 [ %.pre72, %._crit_edge ], [ %43, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_52_reg <= copy_frame___crit_edge73_52;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_52_reg"); $finish; end
end
/* copy_frame: %._crit_edge73*/
/*   %52 = phi i32 [ %.pre72, %._crit_edge ], [ %43, %39 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge73_52_reg <= copy_frame___crit_edge73_52;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_52_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge73*/
/*   %dst.1.lcssa = phi i32* [ %scevgep, %._crit_edge ], [ %dst.06, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_dst_1_lcssa = copy_frame_39_dst_06_reg;
end
/* copy_frame: %._crit_edge73*/
/*   %dst.1.lcssa = phi i32* [ %scevgep, %._crit_edge ], [ %dst.06, %39 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame___crit_edge73_dst_1_lcssa = copy_frame___crit_edge_scevgep_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge73*/
/*   %dst.1.lcssa = phi i32* [ %scevgep, %._crit_edge ], [ %dst.06, %39 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_39_32) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_39_44 == 1'd0)))
begin
copy_frame___crit_edge73_dst_1_lcssa_reg <= copy_frame___crit_edge73_dst_1_lcssa;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_dst_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_dst_1_lcssa_reg"); $finish; end
end
/* copy_frame: %._crit_edge73*/
/*   %dst.1.lcssa = phi i32* [ %scevgep, %._crit_edge ], [ %dst.06, %39 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge_42) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame___crit_edge73_dst_1_lcssa_reg <= copy_frame___crit_edge73_dst_1_lcssa;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_dst_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_dst_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge73*/
/*   %53 = icmp slt i32 %tmp40, %52*/
begin
copy_frame___crit_edge73_53 = ($signed(copy_frame_39_tmp40_reg) < $signed(copy_frame___crit_edge73_52_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge73*/
/*   %53 = icmp slt i32 %tmp40, %52*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge73_43))
begin
copy_frame___crit_edge73_53_reg <= copy_frame___crit_edge73_53;
if (reset == 1'b0 && ^(copy_frame___crit_edge73_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge73_53_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge74*/
/*   %indvar.next38 = add i32 %indvar37, 1*/
begin
copy_frame___crit_edge74_indvar_next38 = (copy_frame_39_indvar37_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge74*/
/*   %indvar.next38 = add i32 %indvar37, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
copy_frame___crit_edge74_indvar_next38_reg <= copy_frame___crit_edge74_indvar_next38;
if (reset == 1'b0 && ^(copy_frame___crit_edge74_indvar_next38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge74_indvar_next38_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge74*/
/*   %54 = getelementptr inbounds i32* %line.07, i32 %50*/
begin
copy_frame___crit_edge74_54 = (copy_frame_39_line_07_reg + (4 * copy_frame___crit_edge73_50_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge74*/
/*   %54 = getelementptr inbounds i32* %line.07, i32 %50*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
copy_frame___crit_edge74_54_reg <= copy_frame___crit_edge74_54;
if (reset == 1'b0 && ^(copy_frame___crit_edge74_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge74_54_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
begin
copy_frame___crit_edge74__pre78 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_46))
begin
copy_frame___crit_edge74__pre78_reg <= copy_frame___crit_edge74__pre78;
if (reset == 1'b0 && ^(copy_frame___crit_edge74__pre78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge74__pre78_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
begin
copy_frame___crit_edge11__pre71 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_49))
begin
copy_frame___crit_edge11__pre71_reg <= copy_frame___crit_edge11__pre71;
if (reset == 1'b0 && ^(copy_frame___crit_edge11__pre71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge11__pre71_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %55*/
/*   %56 = phi i32 [ %.pre71, %._crit_edge11 ], [ %23, %22 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_22_25) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_22_30 == 1'd0)))
begin
copy_frame_55_56 = copy_frame_22_23_reg;
end
/* copy_frame: %55*/
/*   %56 = phi i32 [ %.pre71, %._crit_edge11 ], [ %23, %22 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_49) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_55_56 = copy_frame___crit_edge11__pre71;
end
end
always @(posedge clk) begin
/* copy_frame: %55*/
/*   %56 = phi i32 [ %.pre71, %._crit_edge11 ], [ %23, %22 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_22_25) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_22_30 == 1'd0)))
begin
copy_frame_55_56_reg <= copy_frame_55_56;
if (reset == 1'b0 && ^(copy_frame_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_55_56_reg"); $finish; end
end
/* copy_frame: %55*/
/*   %56 = phi i32 [ %.pre71, %._crit_edge11 ], [ %23, %22 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_49) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_55_56_reg <= copy_frame_55_56;
if (reset == 1'b0 && ^(copy_frame_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_55_56_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %55*/
/*   %57 = icmp slt i32 %tmp47, %56*/
begin
copy_frame_55_57 = ($signed(copy_frame_22_tmp47_reg) < $signed(copy_frame_55_56_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %55*/
/*   %57 = icmp slt i32 %tmp47, %56*/
if ((cur_state == LEGUP_F_copy_frame_BB_55_50))
begin
copy_frame_55_57_reg <= copy_frame_55_57;
if (reset == 1'b0 && ^(copy_frame_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_55_57_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
begin
copy_frame_58_59 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
copy_frame_58_59_reg <= copy_frame_58_59;
if (reset == 1'b0 && ^(copy_frame_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_59_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
begin
copy_frame_58_60 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
copy_frame_58_60_reg <= copy_frame_58_60;
if (reset == 1'b0 && ^(copy_frame_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_60_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %61 = getelementptr inbounds %struct.TYPE_6__* %60, i32 0, i32 1*/
begin
copy_frame_58_61 = (copy_frame_58_60 + 4);
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %61 = getelementptr inbounds %struct.TYPE_6__* %60, i32 0, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
copy_frame_58_61_reg <= copy_frame_58_61;
if (reset == 1'b0 && ^(copy_frame_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_61_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
begin
copy_frame_58_62 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
copy_frame_58_62_reg <= copy_frame_58_62;
if (reset == 1'b0 && ^(copy_frame_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_62_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %63 = getelementptr inbounds i32** %62, i32 1*/
begin
copy_frame_58_63 = (copy_frame_58_62 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %63 = getelementptr inbounds i32** %62, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
copy_frame_58_63_reg <= copy_frame_58_63;
if (reset == 1'b0 && ^(copy_frame_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_63_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
begin
copy_frame_58_64 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
copy_frame_58_64_reg <= copy_frame_58_64;
if (reset == 1'b0 && ^(copy_frame_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_64_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
begin
copy_frame_58_65 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_59))
begin
copy_frame_58_65_reg <= copy_frame_58_65;
if (reset == 1'b0 && ^(copy_frame_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_65_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %66 = getelementptr inbounds i32* %64, i32 1*/
begin
copy_frame_58_66 = (copy_frame_58_64 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %66 = getelementptr inbounds i32* %64, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
copy_frame_58_66_reg <= copy_frame_58_66;
if (reset == 1'b0 && ^(copy_frame_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_66_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
begin
copy_frame_58_67 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_59))
begin
copy_frame_58_67_reg <= copy_frame_58_67;
if (reset == 1'b0 && ^(copy_frame_58_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_67_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %58*/
/*   %68 = icmp slt i32 %65, %67*/
begin
copy_frame_58_68 = ($signed(copy_frame_58_65) < $signed(copy_frame_58_67));
end
end
always @(posedge clk) begin
/* copy_frame: %58*/
/*   %68 = icmp slt i32 %65, %67*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_59))
begin
copy_frame_58_68_reg <= copy_frame_58_68;
if (reset == 1'b0 && ^(copy_frame_58_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_58_68_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %69 = getelementptr inbounds %struct.TYPE_6__* %59, i32 0, i32 0*/
begin
copy_frame__lr_ph30_69 = copy_frame_58_59_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %69 = getelementptr inbounds %struct.TYPE_6__* %59, i32 0, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
copy_frame__lr_ph30_69_reg <= copy_frame__lr_ph30_69;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_69_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
begin
copy_frame__lr_ph30_70 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
copy_frame__lr_ph30_70_reg <= copy_frame__lr_ph30_70;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_70_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
begin
copy_frame__lr_ph30_71 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
copy_frame__lr_ph30_71_reg <= copy_frame__lr_ph30_71;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_71_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
begin
copy_frame__lr_ph30_72 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63))
begin
copy_frame__lr_ph30_72_reg <= copy_frame__lr_ph30_72;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_72_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
begin
copy_frame__lr_ph30_73 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
copy_frame__lr_ph30_73_reg <= copy_frame__lr_ph30_73;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_73_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
begin
copy_frame__lr_ph30_74 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
copy_frame__lr_ph30_74_reg <= copy_frame__lr_ph30_74;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_74_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %75 = getelementptr inbounds %struct.TYPE_6__* %59, i32 0, i32 1*/
begin
copy_frame__lr_ph30_75 = (copy_frame_58_59_reg + 4);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %75 = getelementptr inbounds %struct.TYPE_6__* %59, i32 0, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
copy_frame__lr_ph30_75_reg <= copy_frame__lr_ph30_75;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_75_reg"); $finish; end
end
end
always @(*) begin
copy_frame__lr_ph30_76 = copy_frame__lr_ph30_76_stage0_reg;
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %76 = mul nsw i32 %72, %73*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30_76_reg <= copy_frame__lr_ph30_76;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_76_reg"); $finish; end
end
/* copy_frame: %.lr.ph30*/
/*   %76 = mul nsw i32 %72, %73*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30_76_reg <= copy_frame__lr_ph30_76;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_76_reg"); $finish; end
end
end
always @(*) begin
copy_frame__lr_ph30_77 = copy_frame__lr_ph30_77_stage0_reg;
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %77 = mul nsw i32 %74, %65*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30_77_reg <= copy_frame__lr_ph30_77;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_77_reg"); $finish; end
end
/* copy_frame: %.lr.ph30*/
/*   %77 = mul nsw i32 %74, %65*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30_77_reg <= copy_frame__lr_ph30_77;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_77_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
begin
copy_frame__lr_ph30_78 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30_78_reg <= copy_frame__lr_ph30_78;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_78_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %.sum = add i32 %76, %77*/
begin
copy_frame__lr_ph30__sum = (copy_frame__lr_ph30_76 + copy_frame__lr_ph30_77);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %.sum = add i32 %76, %77*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
copy_frame__lr_ph30__sum_reg <= copy_frame__lr_ph30__sum;
if (reset == 1'b0 && ^(copy_frame__lr_ph30__sum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30__sum_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
begin
copy_frame__lr_ph30_79 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67))
begin
copy_frame__lr_ph30_79_reg <= copy_frame__lr_ph30_79;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_79_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %80 = getelementptr inbounds i32* %79, i32 %.sum*/
begin
copy_frame__lr_ph30_80 = (copy_frame__lr_ph30_79 + (4 * copy_frame__lr_ph30__sum_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %80 = getelementptr inbounds i32* %79, i32 %.sum*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67))
begin
copy_frame__lr_ph30_80_reg <= copy_frame__lr_ph30_80;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_80_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %81 = getelementptr inbounds i32* %70, i32 1*/
begin
copy_frame__lr_ph30_81 = (copy_frame__lr_ph30_70 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %81 = getelementptr inbounds i32* %70, i32 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
copy_frame__lr_ph30_81_reg <= copy_frame__lr_ph30_81;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_81_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %tmp65 = add i32 %65, 1*/
begin
copy_frame__lr_ph30_tmp65 = (copy_frame_58_65_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %tmp65 = add i32 %65, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
copy_frame__lr_ph30_tmp65_reg <= copy_frame__lr_ph30_tmp65;
if (reset == 1'b0 && ^(copy_frame__lr_ph30_tmp65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30_tmp65_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
begin
copy_frame__lr_ph30__pre82 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_66))
begin
copy_frame__lr_ph30__pre82_reg <= copy_frame__lr_ph30__pre82;
if (reset == 1'b0 && ^(copy_frame__lr_ph30__pre82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph30__pre82_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %83 = phi i32 [ %.pre82, %.lr.ph30 ], [ %101, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_83 = copy_frame__lr_ph30__pre82_reg;
end
/* copy_frame: %82*/
/*   %83 = phi i32 [ %.pre82, %.lr.ph30 ], [ %101, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_83 = copy_frame_100_101_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %83 = phi i32 [ %.pre82, %.lr.ph30 ], [ %101, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_83_reg <= copy_frame_82_83;
if (reset == 1'b0 && ^(copy_frame_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_83_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %83 = phi i32 [ %.pre82, %.lr.ph30 ], [ %101, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_83_reg <= copy_frame_82_83;
if (reset == 1'b0 && ^(copy_frame_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_83_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %84 = phi i32 [ %73, %.lr.ph30 ], [ %.pre77, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_84 = copy_frame__lr_ph30_73_reg;
end
/* copy_frame: %82*/
/*   %84 = phi i32 [ %73, %.lr.ph30 ], [ %.pre77, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_84 = copy_frame___crit_edge75__pre77;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %84 = phi i32 [ %73, %.lr.ph30 ], [ %.pre77, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_84_reg <= copy_frame_82_84;
if (reset == 1'b0 && ^(copy_frame_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_84_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %84 = phi i32 [ %73, %.lr.ph30 ], [ %.pre77, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_84_reg <= copy_frame_82_84;
if (reset == 1'b0 && ^(copy_frame_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_84_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %85 = phi i32 [ %72, %.lr.ph30 ], [ %102, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_85 = copy_frame__lr_ph30_72_reg;
end
/* copy_frame: %82*/
/*   %85 = phi i32 [ %72, %.lr.ph30 ], [ %102, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_85 = copy_frame_100_102_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %85 = phi i32 [ %72, %.lr.ph30 ], [ %102, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_85_reg <= copy_frame_82_85;
if (reset == 1'b0 && ^(copy_frame_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_85_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %85 = phi i32 [ %72, %.lr.ph30 ], [ %102, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_85_reg <= copy_frame_82_85;
if (reset == 1'b0 && ^(copy_frame_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_85_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %86 = phi i32 [ %67, %.lr.ph30 ], [ %103, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_86 = copy_frame_58_67_reg;
end
/* copy_frame: %82*/
/*   %86 = phi i32 [ %67, %.lr.ph30 ], [ %103, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_86 = copy_frame_100_103_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %86 = phi i32 [ %67, %.lr.ph30 ], [ %103, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_86_reg <= copy_frame_82_86;
if (reset == 1'b0 && ^(copy_frame_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_86_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %86 = phi i32 [ %67, %.lr.ph30 ], [ %103, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_86_reg <= copy_frame_82_86;
if (reset == 1'b0 && ^(copy_frame_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_86_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %87 = phi i32 [ %74, %.lr.ph30 ], [ %104, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_87 = copy_frame__lr_ph30_74_reg;
end
/* copy_frame: %82*/
/*   %87 = phi i32 [ %74, %.lr.ph30 ], [ %104, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_87 = copy_frame_100_104_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %87 = phi i32 [ %74, %.lr.ph30 ], [ %104, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_87_reg <= copy_frame_82_87;
if (reset == 1'b0 && ^(copy_frame_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_87_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %87 = phi i32 [ %74, %.lr.ph30 ], [ %104, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_87_reg <= copy_frame_82_87;
if (reset == 1'b0 && ^(copy_frame_82_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_87_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %indvar63 = phi i32 [ 0, %.lr.ph30 ], [ %indvar.next64, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_indvar63 = 32'd0;
end
/* copy_frame: %82*/
/*   %indvar63 = phi i32 [ 0, %.lr.ph30 ], [ %indvar.next64, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_indvar63 = copy_frame___crit_edge75_indvar_next64_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %indvar63 = phi i32 [ 0, %.lr.ph30 ], [ %indvar.next64, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_indvar63_reg <= copy_frame_82_indvar63;
if (reset == 1'b0 && ^(copy_frame_82_indvar63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_indvar63_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %indvar63 = phi i32 [ 0, %.lr.ph30 ], [ %indvar.next64, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_indvar63_reg <= copy_frame_82_indvar63;
if (reset == 1'b0 && ^(copy_frame_82_indvar63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_indvar63_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %i.028 = phi i32 [ 0, %.lr.ph30 ], [ %i.1.lcssa, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_i_028 = 32'd0;
end
/* copy_frame: %82*/
/*   %i.028 = phi i32 [ 0, %.lr.ph30 ], [ %i.1.lcssa, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_i_028 = copy_frame_100_i_1_lcssa_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %i.028 = phi i32 [ 0, %.lr.ph30 ], [ %i.1.lcssa, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_i_028_reg <= copy_frame_82_i_028;
if (reset == 1'b0 && ^(copy_frame_82_i_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_i_028_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %i.028 = phi i32 [ 0, %.lr.ph30 ], [ %i.1.lcssa, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_i_028_reg <= copy_frame_82_i_028;
if (reset == 1'b0 && ^(copy_frame_82_i_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_i_028_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %line.126 = phi i32* [ %80, %.lr.ph30 ], [ %106, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_line_126 = copy_frame__lr_ph30_80;
end
/* copy_frame: %82*/
/*   %line.126 = phi i32* [ %80, %.lr.ph30 ], [ %106, %._crit_edge75 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_82_line_126 = copy_frame___crit_edge75_106_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %line.126 = phi i32* [ %80, %.lr.ph30 ], [ %106, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_67) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_line_126_reg <= copy_frame_82_line_126;
if (reset == 1'b0 && ^(copy_frame_82_line_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_line_126_reg"); $finish; end
end
/* copy_frame: %82*/
/*   %line.126 = phi i32* [ %80, %.lr.ph30 ], [ %106, %._crit_edge75 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_82_line_126_reg <= copy_frame_82_line_126;
if (reset == 1'b0 && ^(copy_frame_82_line_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_line_126_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %tmp66 = add i32 %tmp65, %indvar63*/
begin
copy_frame_82_tmp66 = (copy_frame__lr_ph30_tmp65_reg + copy_frame_82_indvar63_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %tmp66 = add i32 %tmp65, %indvar63*/
if ((cur_state == LEGUP_F_copy_frame_BB_82_68))
begin
copy_frame_82_tmp66_reg <= copy_frame_82_tmp66;
if (reset == 1'b0 && ^(copy_frame_82_tmp66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_tmp66_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %82*/
/*   %88 = icmp slt i32 %84, %83*/
begin
copy_frame_82_88 = ($signed(copy_frame_82_84_reg) < $signed(copy_frame_82_83_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %82*/
/*   %88 = icmp slt i32 %84, %83*/
if ((cur_state == LEGUP_F_copy_frame_BB_82_68))
begin
copy_frame_82_88_reg <= copy_frame_82_88;
if (reset == 1'b0 && ^(copy_frame_82_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_82_88_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14.lr.ph*/
/*   %tmp59 = add i32 %i.028, 1*/
begin
copy_frame__preheader14_lr_ph_tmp59 = (copy_frame_82_i_028_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14.lr.ph*/
/*   %tmp59 = add i32 %i.028, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69))
begin
copy_frame__preheader14_lr_ph_tmp59_reg <= copy_frame__preheader14_lr_ph_tmp59;
if (reset == 1'b0 && ^(copy_frame__preheader14_lr_ph_tmp59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_lr_ph_tmp59_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14.lr.ph*/
/*   %tmp61 = add i32 %84, 1*/
begin
copy_frame__preheader14_lr_ph_tmp61 = (copy_frame_82_84_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14.lr.ph*/
/*   %tmp61 = add i32 %84, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69))
begin
copy_frame__preheader14_lr_ph_tmp61_reg <= copy_frame__preheader14_lr_ph_tmp61;
if (reset == 1'b0 && ^(copy_frame__preheader14_lr_ph_tmp61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_lr_ph_tmp61_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %89 = phi i32 [ %83, %.preheader14.lr.ph ], [ %97, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_89 = copy_frame_82_83_reg;
end
/* copy_frame: %.preheader14*/
/*   %89 = phi i32 [ %83, %.preheader14.lr.ph ], [ %97, %.preheader14._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1))) */
begin
copy_frame__preheader14_89 = copy_frame__preheader14__crit_edge_97_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %89 = phi i32 [ %83, %.preheader14.lr.ph ], [ %97, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_89_reg <= copy_frame__preheader14_89;
if (reset == 1'b0 && ^(copy_frame__preheader14_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_89_reg"); $finish; end
end
/* copy_frame: %.preheader14*/
/*   %89 = phi i32 [ %83, %.preheader14.lr.ph ], [ %97, %.preheader14._crit_edge ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1)))
begin
copy_frame__preheader14_89_reg <= copy_frame__preheader14_89;
if (reset == 1'b0 && ^(copy_frame__preheader14_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_89_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %90 = phi i32 [ %85, %.preheader14.lr.ph ], [ %98, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_90 = copy_frame_82_85_reg;
end
/* copy_frame: %.preheader14*/
/*   %90 = phi i32 [ %85, %.preheader14.lr.ph ], [ %98, %.preheader14._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1))) */
begin
copy_frame__preheader14_90 = copy_frame__preheader14__crit_edge_98_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %90 = phi i32 [ %85, %.preheader14.lr.ph ], [ %98, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_90_reg <= copy_frame__preheader14_90;
if (reset == 1'b0 && ^(copy_frame__preheader14_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_90_reg"); $finish; end
end
/* copy_frame: %.preheader14*/
/*   %90 = phi i32 [ %85, %.preheader14.lr.ph ], [ %98, %.preheader14._crit_edge ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1)))
begin
copy_frame__preheader14_90_reg <= copy_frame__preheader14_90;
if (reset == 1'b0 && ^(copy_frame__preheader14_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_90_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %indvar55 = phi i32 [ 0, %.preheader14.lr.ph ], [ %indvar.next56, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_indvar55 = 32'd0;
end
/* copy_frame: %.preheader14*/
/*   %indvar55 = phi i32 [ 0, %.preheader14.lr.ph ], [ %indvar.next56, %.preheader14._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1))) */
begin
copy_frame__preheader14_indvar55 = copy_frame__preheader14__crit_edge_indvar_next56;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %indvar55 = phi i32 [ 0, %.preheader14.lr.ph ], [ %indvar.next56, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_indvar55_reg <= copy_frame__preheader14_indvar55;
if (reset == 1'b0 && ^(copy_frame__preheader14_indvar55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_indvar55_reg"); $finish; end
end
/* copy_frame: %.preheader14*/
/*   %indvar55 = phi i32 [ 0, %.preheader14.lr.ph ], [ %indvar.next56, %.preheader14._crit_edge ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1)))
begin
copy_frame__preheader14_indvar55_reg <= copy_frame__preheader14_indvar55;
if (reset == 1'b0 && ^(copy_frame__preheader14_indvar55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_indvar55_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %ptr1.022 = phi i32* [ %line.126, %.preheader14.lr.ph ], [ %ptr1.1.lcssa, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_ptr1_022 = copy_frame_82_line_126_reg;
end
/* copy_frame: %.preheader14*/
/*   %ptr1.022 = phi i32* [ %line.126, %.preheader14.lr.ph ], [ %ptr1.1.lcssa, %.preheader14._crit_edge ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1))) */
begin
copy_frame__preheader14_ptr1_022 = copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %ptr1.022 = phi i32* [ %line.126, %.preheader14.lr.ph ], [ %ptr1.1.lcssa, %.preheader14._crit_edge ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__preheader14_lr_ph_69) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14_ptr1_022_reg <= copy_frame__preheader14_ptr1_022;
if (reset == 1'b0 && ^(copy_frame__preheader14_ptr1_022) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_ptr1_022_reg"); $finish; end
end
/* copy_frame: %.preheader14*/
/*   %ptr1.022 = phi i32* [ %line.126, %.preheader14.lr.ph ], [ %ptr1.1.lcssa, %.preheader14._crit_edge ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14__crit_edge_99 == 1'd1)))
begin
copy_frame__preheader14_ptr1_022_reg <= copy_frame__preheader14_ptr1_022;
if (reset == 1'b0 && ^(copy_frame__preheader14_ptr1_022) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_ptr1_022_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %tmp57 = add i32 %i.028, %indvar55*/
begin
copy_frame__preheader14_tmp57 = (copy_frame_82_i_028_reg + copy_frame__preheader14_indvar55_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %tmp57 = add i32 %i.028, %indvar55*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14_70))
begin
copy_frame__preheader14_tmp57_reg <= copy_frame__preheader14_tmp57;
if (reset == 1'b0 && ^(copy_frame__preheader14_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %tmp62 = add i32 %tmp61, %indvar55*/
begin
copy_frame__preheader14_tmp62 = (copy_frame__preheader14_lr_ph_tmp61_reg + copy_frame__preheader14_indvar55_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %tmp62 = add i32 %tmp61, %indvar55*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14_70))
begin
copy_frame__preheader14_tmp62_reg <= copy_frame__preheader14_tmp62;
if (reset == 1'b0 && ^(copy_frame__preheader14_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_tmp62_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14*/
/*   %91 = icmp sgt i32 %90, 0*/
begin
copy_frame__preheader14_91 = ($signed(copy_frame__preheader14_90_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14*/
/*   %91 = icmp sgt i32 %90, 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14_70))
begin
copy_frame__preheader14_91_reg <= copy_frame__preheader14_91;
if (reset == 1'b0 && ^(copy_frame__preheader14_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14_91_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %compno.115 = phi i32 [ %tmp50, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__lr_ph17_compno_115 = 32'd0;
end
/* copy_frame: %.lr.ph17*/
/*   %compno.115 = phi i32 [ %tmp50, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
else /* if ((((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__lr_ph17_96 == 1'd1))) */
begin
copy_frame__lr_ph17_compno_115 = copy_frame__lr_ph17_tmp50_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %compno.115 = phi i32 [ %tmp50, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if (((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_preheader_71) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__lr_ph17_compno_115_reg <= copy_frame__lr_ph17_compno_115;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_compno_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_compno_115_reg"); $finish; end
end
/* copy_frame: %.lr.ph17*/
/*   %compno.115 = phi i32 [ %tmp50, %.lr.ph17 ], [ 0, %.lr.ph17.preheader ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__lr_ph17_96 == 1'd1)))
begin
copy_frame__lr_ph17_compno_115_reg <= copy_frame__lr_ph17_compno_115;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_compno_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_compno_115_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %ptr1.116 = getelementptr i32* %ptr1.022, i32 %compno.115*/
begin
copy_frame__lr_ph17_ptr1_116 = (copy_frame__preheader14_ptr1_022_reg + (4 * copy_frame__lr_ph17_compno_115_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %ptr1.116 = getelementptr i32* %ptr1.022, i32 %compno.115*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
copy_frame__lr_ph17_ptr1_116_reg <= copy_frame__lr_ph17_ptr1_116;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_ptr1_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_ptr1_116_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %tmp50 = add i32 %compno.115, 1*/
begin
copy_frame__lr_ph17_tmp50 = (copy_frame__lr_ph17_compno_115_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %tmp50 = add i32 %compno.115, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
copy_frame__lr_ph17_tmp50_reg <= copy_frame__lr_ph17_tmp50;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_tmp50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_tmp50_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %scevgep5253 = getelementptr inbounds %struct.TYPE_6__* %60, i32 %compno.115, i32 0*/
begin
copy_frame__lr_ph17_scevgep5253 = (copy_frame_58_60_reg + (8 * copy_frame__lr_ph17_compno_115_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %scevgep5253 = getelementptr inbounds %struct.TYPE_6__* %60, i32 %compno.115, i32 0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
copy_frame__lr_ph17_scevgep5253_reg <= copy_frame__lr_ph17_scevgep5253;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_scevgep5253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_scevgep5253_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
begin
copy_frame__lr_ph17_92 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
copy_frame__lr_ph17_92_reg <= copy_frame__lr_ph17_92;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_92_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %93 = add nsw i32 %92, -128*/
begin
copy_frame__lr_ph17_93 = (copy_frame__lr_ph17_92 + -32'd128);
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %93 = add nsw i32 %92, -128*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
copy_frame__lr_ph17_93_reg <= copy_frame__lr_ph17_93;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_93_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
begin
copy_frame__lr_ph17_94 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
copy_frame__lr_ph17_94_reg <= copy_frame__lr_ph17_94;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_94_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %scevgep58 = getelementptr i32* %94, i32 %tmp57*/
begin
copy_frame__lr_ph17_scevgep58 = (copy_frame__lr_ph17_94 + (4 * copy_frame__preheader14_tmp57_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %scevgep58 = getelementptr i32* %94, i32 %tmp57*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
copy_frame__lr_ph17_scevgep58_reg <= copy_frame__lr_ph17_scevgep58;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_scevgep58_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
begin
copy_frame__lr_ph17_95 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77))
begin
copy_frame__lr_ph17_95_reg <= copy_frame__lr_ph17_95;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_95_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.lr.ph17*/
/*   %96 = icmp slt i32 %tmp50, %95*/
begin
copy_frame__lr_ph17_96 = ($signed(copy_frame__lr_ph17_tmp50_reg) < $signed(copy_frame__lr_ph17_95));
end
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph17*/
/*   %96 = icmp slt i32 %tmp50, %95*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_77))
begin
copy_frame__lr_ph17_96_reg <= copy_frame__lr_ph17_96;
if (reset == 1'b0 && ^(copy_frame__lr_ph17_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__lr_ph17_96_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge18*/
/*   %scevgep51 = getelementptr i32* %ptr1.022, i32 %tmp50*/
begin
copy_frame___crit_edge18_scevgep51 = (copy_frame__preheader14_ptr1_022_reg + (4 * copy_frame__lr_ph17_tmp50_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge18*/
/*   %scevgep51 = getelementptr i32* %ptr1.022, i32 %tmp50*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78))
begin
copy_frame___crit_edge18_scevgep51_reg <= copy_frame___crit_edge18_scevgep51;
if (reset == 1'b0 && ^(copy_frame___crit_edge18_scevgep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge18_scevgep51_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
begin
copy_frame___crit_edge18__pre81 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80))
begin
copy_frame___crit_edge18__pre81_reg <= copy_frame___crit_edge18__pre81;
if (reset == 1'b0 && ^(copy_frame___crit_edge18__pre81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge18__pre81_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %97 = phi i32 [ %.pre81, %._crit_edge18 ], [ %89, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_97 = copy_frame__preheader14_89_reg;
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %97 = phi i32 [ %.pre81, %._crit_edge18 ], [ %89, %.preheader14 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame__preheader14__crit_edge_97 = copy_frame___crit_edge18__pre81;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %97 = phi i32 [ %.pre81, %._crit_edge18 ], [ %89, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_97_reg <= copy_frame__preheader14__crit_edge_97;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_97_reg"); $finish; end
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %97 = phi i32 [ %.pre81, %._crit_edge18 ], [ %89, %.preheader14 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14__crit_edge_97_reg <= copy_frame__preheader14__crit_edge_97;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_97_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %98 = phi i32 [ %95, %._crit_edge18 ], [ %90, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_98 = copy_frame__preheader14_90_reg;
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %98 = phi i32 [ %95, %._crit_edge18 ], [ %90, %.preheader14 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame__preheader14__crit_edge_98 = copy_frame__lr_ph17_95_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %98 = phi i32 [ %95, %._crit_edge18 ], [ %90, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_98_reg <= copy_frame__preheader14__crit_edge_98;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_98_reg"); $finish; end
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %98 = phi i32 [ %95, %._crit_edge18 ], [ %90, %.preheader14 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14__crit_edge_98_reg <= copy_frame__preheader14__crit_edge_98;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_98_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %ptr1.1.lcssa = phi i32* [ %scevgep51, %._crit_edge18 ], [ %ptr1.022, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_ptr1_1_lcssa = copy_frame__preheader14_ptr1_022_reg;
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %ptr1.1.lcssa = phi i32* [ %scevgep51, %._crit_edge18 ], [ %ptr1.022, %.preheader14 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame__preheader14__crit_edge_ptr1_1_lcssa = copy_frame___crit_edge18_scevgep51_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %ptr1.1.lcssa = phi i32* [ %scevgep51, %._crit_edge18 ], [ %ptr1.022, %.preheader14 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB__preheader14_70) & (memory_controller_waitrequest == 1'd0)) & (copy_frame__preheader14_91 == 1'd0)))
begin
copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg <= copy_frame__preheader14__crit_edge_ptr1_1_lcssa;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_ptr1_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg"); $finish; end
end
/* copy_frame: %.preheader14._crit_edge*/
/*   %ptr1.1.lcssa = phi i32* [ %scevgep51, %._crit_edge18 ], [ %ptr1.022, %.preheader14 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_80) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg <= copy_frame__preheader14__crit_edge_ptr1_1_lcssa;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_ptr1_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_ptr1_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %99 = icmp slt i32 %tmp62, %97*/
begin
copy_frame__preheader14__crit_edge_99 = ($signed(copy_frame__preheader14_tmp62_reg) < $signed(copy_frame__preheader14__crit_edge_97_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %99 = icmp slt i32 %tmp62, %97*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81))
begin
copy_frame__preheader14__crit_edge_99_reg <= copy_frame__preheader14__crit_edge_99;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_99_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %indvar.next56 = add i32 %indvar55, 1*/
begin
copy_frame__preheader14__crit_edge_indvar_next56 = (copy_frame__preheader14_indvar55_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %.preheader14._crit_edge*/
/*   %indvar.next56 = add i32 %indvar55, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader14__crit_edge_81))
begin
copy_frame__preheader14__crit_edge_indvar_next56_reg <= copy_frame__preheader14__crit_edge_indvar_next56;
if (reset == 1'b0 && ^(copy_frame__preheader14__crit_edge_indvar_next56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__preheader14__crit_edge_indvar_next56_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge23*/
/*   %tmp60 = add i32 %tmp59, %indvar55*/
begin
copy_frame___crit_edge23_tmp60 = (copy_frame__preheader14_lr_ph_tmp59_reg + copy_frame__preheader14_indvar55_reg);
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge23*/
/*   %tmp60 = add i32 %tmp59, %indvar55*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
copy_frame___crit_edge23_tmp60_reg <= copy_frame___crit_edge23_tmp60;
if (reset == 1'b0 && ^(copy_frame___crit_edge23_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge23_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
begin
copy_frame___crit_edge23__pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84))
begin
copy_frame___crit_edge23__pre_reg <= copy_frame___crit_edge23__pre;
if (reset == 1'b0 && ^(copy_frame___crit_edge23__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge23__pre_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
begin
copy_frame___crit_edge23__pre70 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84))
begin
copy_frame___crit_edge23__pre70_reg <= copy_frame___crit_edge23__pre70;
if (reset == 1'b0 && ^(copy_frame___crit_edge23__pre70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge23__pre70_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %101 = phi i32 [ %97, %._crit_edge23 ], [ %83, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_101 = copy_frame_82_83_reg;
end
/* copy_frame: %100*/
/*   %101 = phi i32 [ %97, %._crit_edge23 ], [ %83, %82 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_100_101 = copy_frame__preheader14__crit_edge_97_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %101 = phi i32 [ %97, %._crit_edge23 ], [ %83, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_101_reg <= copy_frame_100_101;
if (reset == 1'b0 && ^(copy_frame_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_101_reg"); $finish; end
end
/* copy_frame: %100*/
/*   %101 = phi i32 [ %97, %._crit_edge23 ], [ %83, %82 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_100_101_reg <= copy_frame_100_101;
if (reset == 1'b0 && ^(copy_frame_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_101_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %102 = phi i32 [ %98, %._crit_edge23 ], [ %85, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_102 = copy_frame_82_85_reg;
end
/* copy_frame: %100*/
/*   %102 = phi i32 [ %98, %._crit_edge23 ], [ %85, %82 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_100_102 = copy_frame__preheader14__crit_edge_98_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %102 = phi i32 [ %98, %._crit_edge23 ], [ %85, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_102_reg <= copy_frame_100_102;
if (reset == 1'b0 && ^(copy_frame_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_102_reg"); $finish; end
end
/* copy_frame: %100*/
/*   %102 = phi i32 [ %98, %._crit_edge23 ], [ %85, %82 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_100_102_reg <= copy_frame_100_102;
if (reset == 1'b0 && ^(copy_frame_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_102_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %103 = phi i32 [ %.pre70, %._crit_edge23 ], [ %86, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_103 = copy_frame_82_86_reg;
end
/* copy_frame: %100*/
/*   %103 = phi i32 [ %.pre70, %._crit_edge23 ], [ %86, %82 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_100_103 = copy_frame___crit_edge23__pre70;
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %103 = phi i32 [ %.pre70, %._crit_edge23 ], [ %86, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_103_reg <= copy_frame_100_103;
if (reset == 1'b0 && ^(copy_frame_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_103_reg"); $finish; end
end
/* copy_frame: %100*/
/*   %103 = phi i32 [ %.pre70, %._crit_edge23 ], [ %86, %82 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_100_103_reg <= copy_frame_100_103;
if (reset == 1'b0 && ^(copy_frame_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_103_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %104 = phi i32 [ %.pre, %._crit_edge23 ], [ %87, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_104 = copy_frame_82_87_reg;
end
/* copy_frame: %100*/
/*   %104 = phi i32 [ %.pre, %._crit_edge23 ], [ %87, %82 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_100_104 = copy_frame___crit_edge23__pre;
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %104 = phi i32 [ %.pre, %._crit_edge23 ], [ %87, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_104_reg <= copy_frame_100_104;
if (reset == 1'b0 && ^(copy_frame_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_104_reg"); $finish; end
end
/* copy_frame: %100*/
/*   %104 = phi i32 [ %.pre, %._crit_edge23 ], [ %87, %82 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_100_104_reg <= copy_frame_100_104;
if (reset == 1'b0 && ^(copy_frame_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_104_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %i.1.lcssa = phi i32 [ %tmp60, %._crit_edge23 ], [ %i.028, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_i_1_lcssa = copy_frame_82_i_028_reg;
end
/* copy_frame: %100*/
/*   %i.1.lcssa = phi i32 [ %tmp60, %._crit_edge23 ], [ %i.028, %82 ]*/
else /* if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0))) */
begin
copy_frame_100_i_1_lcssa = copy_frame___crit_edge23_tmp60_reg;
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %i.1.lcssa = phi i32 [ %tmp60, %._crit_edge23 ], [ %i.028, %82 ]*/
if ((((cur_state == LEGUP_F_copy_frame_BB_82_68) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_82_88 == 1'd0)))
begin
copy_frame_100_i_1_lcssa_reg <= copy_frame_100_i_1_lcssa;
if (reset == 1'b0 && ^(copy_frame_100_i_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_i_1_lcssa_reg"); $finish; end
end
/* copy_frame: %100*/
/*   %i.1.lcssa = phi i32 [ %tmp60, %._crit_edge23 ], [ %i.028, %82 ]*/
if (((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_84) & (memory_controller_waitrequest == 1'd0)))
begin
copy_frame_100_i_1_lcssa_reg <= copy_frame_100_i_1_lcssa;
if (reset == 1'b0 && ^(copy_frame_100_i_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_i_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %100*/
/*   %105 = icmp slt i32 %tmp66, %103*/
begin
copy_frame_100_105 = ($signed(copy_frame_82_tmp66_reg) < $signed(copy_frame_100_103_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %100*/
/*   %105 = icmp slt i32 %tmp66, %103*/
if ((cur_state == LEGUP_F_copy_frame_BB_100_85))
begin
copy_frame_100_105_reg <= copy_frame_100_105;
if (reset == 1'b0 && ^(copy_frame_100_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_100_105_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge75*/
/*   %indvar.next64 = add i32 %indvar63, 1*/
begin
copy_frame___crit_edge75_indvar_next64 = (copy_frame_82_indvar63_reg + 32'd1);
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge75*/
/*   %indvar.next64 = add i32 %indvar63, 1*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
copy_frame___crit_edge75_indvar_next64_reg <= copy_frame___crit_edge75_indvar_next64;
if (reset == 1'b0 && ^(copy_frame___crit_edge75_indvar_next64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge75_indvar_next64_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge75*/
/*   %106 = getelementptr inbounds i32* %line.126, i32 %104*/
begin
copy_frame___crit_edge75_106 = (copy_frame_82_line_126_reg + (4 * copy_frame_100_104_reg));
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge75*/
/*   %106 = getelementptr inbounds i32* %line.126, i32 %104*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
copy_frame___crit_edge75_106_reg <= copy_frame___crit_edge75_106;
if (reset == 1'b0 && ^(copy_frame___crit_edge75_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge75_106_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
begin
copy_frame___crit_edge75__pre77 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_88))
begin
copy_frame___crit_edge75__pre77_reg <= copy_frame___crit_edge75__pre77;
if (reset == 1'b0 && ^(copy_frame___crit_edge75__pre77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame___crit_edge75__pre77_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
begin
copy_frame__loopexit_107 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_93))
begin
copy_frame__loopexit_107_reg <= copy_frame__loopexit_107;
if (reset == 1'b0 && ^(copy_frame__loopexit_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__loopexit_107_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
begin
copy_frame__loopexit_108 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_93))
begin
copy_frame__loopexit_108_reg <= copy_frame__loopexit_108;
if (reset == 1'b0 && ^(copy_frame__loopexit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__loopexit_108_reg"); $finish; end
end
end
always @(*) begin
copy_frame__loopexit_109 = copy_frame__loopexit_109_stage0_reg;
end
always @(posedge clk) begin
/* copy_frame: %.loopexit*/
/*   %109 = mul nsw i32 %108, %107*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_94))
begin
copy_frame__loopexit_109_reg <= copy_frame__loopexit_109;
if (reset == 1'b0 && ^(copy_frame__loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__loopexit_109_reg"); $finish; end
end
/* copy_frame: %.loopexit*/
/*   %109 = mul nsw i32 %108, %107*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_94))
begin
copy_frame__loopexit_109_reg <= copy_frame__loopexit_109;
if (reset == 1'b0 && ^(copy_frame__loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__loopexit_109_reg"); $finish; end
end
end
always @(*) begin
/* copy_frame: %.loopexit*/
/*   %110 = icmp slt i32 %tmp69, %109*/
begin
copy_frame__loopexit_110 = ($signed(copy_frame___crit_edge76_tmp69_reg) < $signed(copy_frame__loopexit_109));
end
end
always @(posedge clk) begin
/* copy_frame: %.loopexit*/
/*   %110 = icmp slt i32 %tmp69, %109*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_94))
begin
copy_frame__loopexit_110_reg <= copy_frame__loopexit_110;
if (reset == 1'b0 && ^(copy_frame__loopexit_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame__loopexit_110_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_copy_frame_0_5_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* copy_frame: %0*/
/*   %5 = mul nsw i32 %4, %2*/
if ((lpm_mult_copy_frame_0_5_en == 1'd1))
begin
copy_frame_0_5_stage0_reg <= (copy_frame_0_4 * copy_frame_0_2);
end
end
always @(*) begin
lpm_mult_copy_frame__lr_ph10_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph10*/
/*   %34 = mul nsw i32 %32, %27*/
if ((lpm_mult_copy_frame__lr_ph10_34_en == 1'd1))
begin
copy_frame__lr_ph10_34_stage0_reg <= (copy_frame__lr_ph10_32 * copy_frame_22_27_reg);
end
end
always @(*) begin
lpm_mult_copy_frame__lr_ph30_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %76 = mul nsw i32 %72, %73*/
if ((lpm_mult_copy_frame__lr_ph30_76_en == 1'd1))
begin
copy_frame__lr_ph30_76_stage0_reg <= (copy_frame__lr_ph30_72_reg * copy_frame__lr_ph30_73);
end
end
always @(*) begin
lpm_mult_copy_frame__lr_ph30_77_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* copy_frame: %.lr.ph30*/
/*   %77 = mul nsw i32 %74, %65*/
if ((lpm_mult_copy_frame__lr_ph30_77_en == 1'd1))
begin
copy_frame__lr_ph30_77_stage0_reg <= (copy_frame__lr_ph30_74 * copy_frame_58_65_reg);
end
end
always @(*) begin
lpm_mult_copy_frame__loopexit_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* copy_frame: %.loopexit*/
/*   %109 = mul nsw i32 %108, %107*/
if ((lpm_mult_copy_frame__loopexit_109_en == 1'd1))
begin
copy_frame__loopexit_109_stage0_reg <= (copy_frame__loopexit_108 * copy_frame__loopexit_107);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* copy_frame: %._crit_edge34*/
/*   ret void*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge34_96))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_11))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph17*/
/*   store i32 %93, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
memory_controller_enable_a = 1'd1;
end
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_address_a = copy_frame_0_1;
end
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
memory_controller_address_a = copy_frame__lr_ph33_7;
end
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_11))
begin
memory_controller_address_a = copy_frame__lr_ph33_11_reg;
end
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_address_a = copy_frame___crit_edge76_scevgep6768_reg;
end
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_address_a = copy_frame__lr_ph13_18;
end
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
memory_controller_address_a = copy_frame_22_25;
end
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_address_a = copy_frame_22_26;
end
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_address_a = copy_frame_22_24_reg;
end
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_address_a = copy_frame__lr_ph10_31;
end
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_address_a = copy_frame_22_28_reg;
end
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
memory_controller_address_a = copy_frame__lr_ph10_31_reg;
end
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47))
begin
memory_controller_address_a = copy_frame__lr_ph33_11_reg;
end
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_address_a = copy_frame___crit_edge76_scevgep6768_reg;
end
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
memory_controller_address_a = copy_frame_58_61;
end
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
memory_controller_address_a = copy_frame_58_63;
end
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_address_a = copy_frame_58_64;
end
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_address_a = copy_frame_58_62_reg;
end
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61))
begin
memory_controller_address_a = copy_frame__lr_ph33_11_reg;
end
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_address_a = copy_frame__lr_ph30_70;
end
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63))
begin
memory_controller_address_a = copy_frame__lr_ph30_75_reg;
end
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
memory_controller_address_a = copy_frame__lr_ph30_81_reg;
end
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_address_a = copy_frame__lr_ph17_ptr1_116;
end
/* copy_frame: %.lr.ph17*/
/*   store i32 %93, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
memory_controller_address_a = copy_frame__lr_ph17_scevgep58;
end
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75))
begin
memory_controller_address_a = copy_frame__lr_ph33_11_reg;
end
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78))
begin
memory_controller_address_a = copy_frame__lr_ph30_81_reg;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_address_a = copy_frame__lr_ph30_71_reg;
end
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
memory_controller_address_a = copy_frame__lr_ph30_70_reg;
end
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_address_a = copy_frame_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.lr.ph17*/
/*   store i32 %93, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
memory_controller_write_enable_a = 1'd1;
end
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
memory_controller_write_enable_a = 1'd0;
end
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* copy_frame: %.lr.ph17*/
/*   store i32 %93, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
memory_controller_in_a = copy_frame__lr_ph17_93;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* copy_frame: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph33*/
/*   %8 = load %struct.TYPE_7__** %7, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph33_5))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.preheader*/
/*   %14 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__preheader_11))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph13*/
/*   %16 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph13*/
/*   %19 = load i32*** %18, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %22*/
/*   %26 = load i32** %25, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_21))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %22*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %31 = load i32** %24, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %33 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge*/
/*   %.pre72 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge74*/
/*   %.pre78 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge74_44))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge11*/
/*   %.pre71 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge11_47))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %58*/
/*   %60 = load %struct.TYPE_6__** %scevgep6768, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %58*/
/*   %62 = load i32*** %61, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_53))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %58*/
/*   %64 = load i32** %63, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_55))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %58*/
/*   %65 = load i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %70 = load i32** %62, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %72 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_61))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %73 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %78 = load i32*** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_63))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %.pre82 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_64))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph17*/
/*   %92 = load i32* %ptr1.116, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph17*/
/*   store i32 %93, i32* %scevgep58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_74))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.lr.ph17*/
/*   %95 = load i32* %11, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_75))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge18*/
/*   %.pre81 = load i32* %81, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge18_78))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %._crit_edge75*/
/*   %.pre77 = load i32* %70, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge75_86))
begin
memory_controller_size_a = 2'd2;
end
/* copy_frame: %.loopexit*/
/*   %107 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %45*/
/*   store i32 %47, i32* %dst.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_37))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_enable_b = 1'd1;
end
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_address_b = copy_frame_0_3;
end
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
memory_controller_address_b = copy_frame__lr_ph33_9_reg;
end
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_address_b = copy_frame__lr_ph33_10_reg;
end
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_address_b = copy_frame__lr_ph13_20;
end
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
memory_controller_address_b = copy_frame_22_scevgep46;
end
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_address_b = copy_frame_22_28;
end
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_address_b = copy_frame__lr_ph10_scevgep42;
end
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27))
begin
memory_controller_address_b = copy_frame__lr_ph10_scevgep41_reg;
end
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_address_b = copy_frame__lr_ph10_38;
end
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
memory_controller_address_b = copy_frame__lr_ph10_scevgep4445_reg;
end
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
memory_controller_address_b = copy_frame_45_ptr_04;
end
/* copy_frame: %45*/
/*   store i32 %47, i32* %dst.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
memory_controller_address_b = copy_frame_45_dst_13_reg;
end
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_37))
begin
memory_controller_address_b = copy_frame__lr_ph10_38_reg;
end
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_address_b = copy_frame__lr_ph10_scevgep42_reg;
end
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_address_b = copy_frame__lr_ph33_10_reg;
end
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_address_b = copy_frame_58_66;
end
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_address_b = copy_frame__lr_ph30_69;
end
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_address_b = copy_frame__lr_ph30_71;
end
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
memory_controller_address_b = copy_frame__lr_ph30_78;
end
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_address_b = copy_frame__lr_ph17_scevgep5253;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_address_b = copy_frame_58_66_reg;
end
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_address_b = copy_frame_0_3_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %45*/
/*   store i32 %47, i32* %dst.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
memory_controller_write_enable_b = 1'd1;
end
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_37))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* copy_frame: %45*/
/*   store i32 %47, i32* %dst.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
memory_controller_in_b = copy_frame_45_47;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* copy_frame: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %._crit_edge76*/
/*   %12 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge76_8))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph13*/
/*   %17 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_14))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph13*/
/*   %21 = load i32** %20, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph13_16))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %22*/
/*   %24 = load i32*** %scevgep46, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_19))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %22*/
/*   %29 = load i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_22_23))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %32 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_26))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %35 = load i32** %scevgep41, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_27))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %.pre79 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_28))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph10*/
/*   %37 = load i32** %scevgep4445, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph10_29))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %45*/
/*   %46 = load i32* %ptr.04, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_34))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %45*/
/*   store i32 %47, i32* %dst.13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_36))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %45*/
/*   %48 = load i32* %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_45_37))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %._crit_edge*/
/*   %.pre80 = load i32* %scevgep42, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge_40))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %58*/
/*   %59 = load %struct.TYPE_6__** %10, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_51))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %58*/
/*   %67 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB_58_57))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %71 = load i32** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_60))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %74 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_62))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph30*/
/*   %79 = load i32** %78, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph30_65))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.lr.ph17*/
/*   %94 = load i32** %scevgep5253, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_copy_frame_BB__lr_ph17_72))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %._crit_edge23*/
/*   %.pre70 = load i32* %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB___crit_edge23_82))
begin
memory_controller_size_b = 2'd2;
end
/* copy_frame: %.loopexit*/
/*   %108 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_copy_frame_BB__loopexit_91))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  copy_frame_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_arg_s;
wire  copy_frame_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_memory_controller_address_a;
wire  copy_frame_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] copy_frame_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] copy_frame_memory_controller_out_a;
wire [1:0] copy_frame_memory_controller_size_a;
wire  copy_frame_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] copy_frame_memory_controller_address_b;
wire  copy_frame_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] copy_frame_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] copy_frame_memory_controller_out_b;
wire [1:0] copy_frame_memory_controller_size_b;
reg  copy_frame_memory_controller_waitrequest;
wire  copy_frame_finish;
reg  copy_frame_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


copy_frame copy_frame_inst (
	.memory_controller_enable_a (copy_frame_memory_controller_enable_a),
	.memory_controller_address_a (copy_frame_memory_controller_address_a),
	.memory_controller_write_enable_a (copy_frame_memory_controller_write_enable_a),
	.memory_controller_in_a (copy_frame_memory_controller_in_a),
	.memory_controller_size_a (copy_frame_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (copy_frame_memory_controller_enable_b),
	.memory_controller_address_b (copy_frame_memory_controller_address_b),
	.memory_controller_write_enable_b (copy_frame_memory_controller_write_enable_b),
	.memory_controller_in_b (copy_frame_memory_controller_in_b),
	.memory_controller_size_b (copy_frame_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (copy_frame_start),
	.finish (copy_frame_finish),
	.arg_s (copy_frame_arg_s)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (copy_frame_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
copy_frame_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_start"); $finish; end
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
copy_frame_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
copy_frame_arg_s <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to copy_frame_arg_s"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
begin
copy_frame_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
begin
copy_frame_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
copy_frame_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
copy_frame_finish_final = copy_frame_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = copy_frame_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = copy_frame_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = copy_frame_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = copy_frame_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = copy_frame_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = copy_frame_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = copy_frame_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = copy_frame_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = copy_frame_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = copy_frame_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = copy_frame_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = copy_frame_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = copy_frame_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = copy_frame_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = copy_frame_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = copy_frame_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = copy_frame_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = copy_frame_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = copy_frame_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @copy_frame(%struct.TYPE_8__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = copy_frame_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
