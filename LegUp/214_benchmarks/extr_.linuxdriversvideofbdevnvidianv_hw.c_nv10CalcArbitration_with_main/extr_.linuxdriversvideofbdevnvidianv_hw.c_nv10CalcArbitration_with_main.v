//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:31 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module nv10CalcArbitration
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_fifo,
	arg_arb
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_1 = 9'd1;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_2 = 9'd2;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_3 = 9'd3;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_4 = 9'd4;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_5 = 9'd5;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_6 = 9'd6;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_7 = 9'd7;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_0_8 = 9'd8;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_22_9 = 9'd9;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_23_10 = 9'd10;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_24_11 = 9'd11;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_24_12 = 9'd12;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_28_13 = 9'd13;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_30_14 = 9'd14;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_15 = 9'd15;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_16 = 9'd16;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_17 = 9'd17;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_18 = 9'd18;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_19 = 9'd19;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_20 = 9'd20;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_21 = 9'd21;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_22 = 9'd22;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_23 = 9'd23;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_24 = 9'd24;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_25 = 9'd25;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_26 = 9'd26;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_27 = 9'd27;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_28 = 9'd28;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_29 = 9'd29;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_30 = 9'd30;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_31 = 9'd31;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_32 = 9'd32;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_33 = 9'd33;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_34 = 9'd34;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_35 = 9'd35;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_36 = 9'd36;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_37 = 9'd37;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_38 = 9'd38;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_39 = 9'd39;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_40 = 9'd40;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_41 = 9'd41;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_42 = 9'd42;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_43 = 9'd43;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_44 = 9'd44;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_45 = 9'd45;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_46 = 9'd46;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_47 = 9'd47;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_48 = 9'd48;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_49 = 9'd49;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_50 = 9'd50;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_32_51 = 9'd51;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_52 = 9'd52;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_53 = 9'd53;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_54 = 9'd54;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_55 = 9'd55;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_56 = 9'd56;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_57 = 9'd57;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_58 = 9'd58;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_59 = 9'd59;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_60 = 9'd60;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_61 = 9'd61;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_62 = 9'd62;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_63 = 9'd63;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_64 = 9'd64;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_65 = 9'd65;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_66 = 9'd66;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_67 = 9'd67;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_68 = 9'd68;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_69 = 9'd69;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_70 = 9'd70;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_71 = 9'd71;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_72 = 9'd72;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_73 = 9'd73;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_74 = 9'd74;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_75 = 9'd75;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_76 = 9'd76;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_77 = 9'd77;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_78 = 9'd78;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_79 = 9'd79;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_80 = 9'd80;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_81 = 9'd81;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_82 = 9'd82;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_83 = 9'd83;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_84 = 9'd84;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_85 = 9'd85;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_86 = 9'd86;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_87 = 9'd87;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_88 = 9'd88;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_89 = 9'd89;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_90 = 9'd90;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_91 = 9'd91;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_92 = 9'd92;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_93 = 9'd93;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_94 = 9'd94;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_95 = 9'd95;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_96 = 9'd96;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_97 = 9'd97;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_98 = 9'd98;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_99 = 9'd99;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_100 = 9'd100;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_101 = 9'd101;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_102 = 9'd102;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_103 = 9'd103;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_104 = 9'd104;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_105 = 9'd105;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_106 = 9'd106;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_107 = 9'd107;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_108 = 9'd108;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_109 = 9'd109;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_110 = 9'd110;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_111 = 9'd111;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_112 = 9'd112;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_113 = 9'd113;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_114 = 9'd114;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_115 = 9'd115;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_116 = 9'd116;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_117 = 9'd117;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_118 = 9'd118;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_119 = 9'd119;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_120 = 9'd120;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_121 = 9'd121;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_122 = 9'd122;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_123 = 9'd123;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_124 = 9'd124;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_125 = 9'd125;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_126 = 9'd126;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_127 = 9'd127;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_128 = 9'd128;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_129 = 9'd129;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_130 = 9'd130;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_131 = 9'd131;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_132 = 9'd132;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_133 = 9'd133;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_134 = 9'd134;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_135 = 9'd135;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_136 = 9'd136;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_137 = 9'd137;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_138 = 9'd138;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_139 = 9'd139;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_140 = 9'd140;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_141 = 9'd141;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_142 = 9'd142;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_143 = 9'd143;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_144 = 9'd144;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_145 = 9'd145;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_146 = 9'd146;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_147 = 9'd147;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_148 = 9'd148;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_149 = 9'd149;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_150 = 9'd150;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_151 = 9'd151;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_58_152 = 9'd152;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_153 = 9'd153;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_154 = 9'd154;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_155 = 9'd155;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_156 = 9'd156;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_157 = 9'd157;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_158 = 9'd158;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_159 = 9'd159;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_160 = 9'd160;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_161 = 9'd161;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_162 = 9'd162;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_163 = 9'd163;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_164 = 9'd164;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_165 = 9'd165;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_166 = 9'd166;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_167 = 9'd167;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_168 = 9'd168;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_169 = 9'd169;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_170 = 9'd170;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_171 = 9'd171;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_172 = 9'd172;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_173 = 9'd173;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_174 = 9'd174;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_175 = 9'd175;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_176 = 9'd176;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_177 = 9'd177;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_178 = 9'd178;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_179 = 9'd179;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_180 = 9'd180;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_181 = 9'd181;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_182 = 9'd182;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_183 = 9'd183;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_184 = 9'd184;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_185 = 9'd185;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_186 = 9'd186;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_187 = 9'd187;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_188 = 9'd188;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_189 = 9'd189;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_190 = 9'd190;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_191 = 9'd191;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_192 = 9'd192;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_193 = 9'd193;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_194 = 9'd194;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_195 = 9'd195;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_196 = 9'd196;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_197 = 9'd197;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_198 = 9'd198;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_199 = 9'd199;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_200 = 9'd200;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_201 = 9'd201;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_202 = 9'd202;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_203 = 9'd203;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_204 = 9'd204;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_205 = 9'd205;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_206 = 9'd206;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_207 = 9'd207;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_208 = 9'd208;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_209 = 9'd209;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_210 = 9'd210;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_211 = 9'd211;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_212 = 9'd212;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_213 = 9'd213;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_214 = 9'd214;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_215 = 9'd215;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_216 = 9'd216;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_217 = 9'd217;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_67_218 = 9'd218;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_73_219 = 9'd219;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_220 = 9'd220;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_221 = 9'd221;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_222 = 9'd222;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_223 = 9'd223;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_224 = 9'd224;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_225 = 9'd225;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_226 = 9'd226;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_227 = 9'd227;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_228 = 9'd228;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_229 = 9'd229;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_230 = 9'd230;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_231 = 9'd231;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_232 = 9'd232;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_233 = 9'd233;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_234 = 9'd234;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_235 = 9'd235;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_236 = 9'd236;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_237 = 9'd237;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_238 = 9'd238;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_239 = 9'd239;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_240 = 9'd240;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_241 = 9'd241;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_242 = 9'd242;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_243 = 9'd243;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_244 = 9'd244;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_245 = 9'd245;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_246 = 9'd246;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_247 = 9'd247;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_248 = 9'd248;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_249 = 9'd249;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_250 = 9'd250;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_251 = 9'd251;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_252 = 9'd252;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_253 = 9'd253;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_254 = 9'd254;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_255 = 9'd255;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_256 = 9'd256;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_257 = 9'd257;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_258 = 9'd258;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_259 = 9'd259;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_260 = 9'd260;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_261 = 9'd261;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_262 = 9'd262;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_263 = 9'd263;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_264 = 9'd264;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_265 = 9'd265;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_266 = 9'd266;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_267 = 9'd267;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_268 = 9'd268;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_269 = 9'd269;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_270 = 9'd270;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_271 = 9'd271;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_272 = 9'd272;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_273 = 9'd273;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_274 = 9'd274;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_275 = 9'd275;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_276 = 9'd276;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_277 = 9'd277;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_278 = 9'd278;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_279 = 9'd279;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_280 = 9'd280;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_281 = 9'd281;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_282 = 9'd282;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_283 = 9'd283;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_284 = 9'd284;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_285 = 9'd285;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_74_286 = 9'd286;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_90_287 = 9'd287;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_92_288 = 9'd288;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_289 = 9'd289;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_290 = 9'd290;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_291 = 9'd291;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_292 = 9'd292;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_293 = 9'd293;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_294 = 9'd294;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_295 = 9'd295;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_296 = 9'd296;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_297 = 9'd297;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_298 = 9'd298;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_299 = 9'd299;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_300 = 9'd300;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_301 = 9'd301;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_302 = 9'd302;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_303 = 9'd303;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_304 = 9'd304;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_305 = 9'd305;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_306 = 9'd306;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_307 = 9'd307;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_308 = 9'd308;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_309 = 9'd309;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_310 = 9'd310;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_311 = 9'd311;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_312 = 9'd312;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_313 = 9'd313;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_314 = 9'd314;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_315 = 9'd315;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_316 = 9'd316;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_317 = 9'd317;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_318 = 9'd318;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_319 = 9'd319;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_320 = 9'd320;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_94_321 = 9'd321;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322 = 9'd322;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_96_323 = 9'd323;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_98_324 = 9'd324;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_100_325 = 9'd325;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_100_326 = 9'd326;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_100_327 = 9'd327;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_103_328 = 9'd328;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_103_329 = 9'd329;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_103_330 = 9'd330;
parameter [8:0] LEGUP_F_nv10CalcArbitration_BB_103_331 = 9'd331;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_fifo;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_arb;
reg [8:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_2_reg;
reg [31:0] nv10CalcArbitration_0_3;
reg [31:0] nv10CalcArbitration_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_4_reg;
reg [31:0] nv10CalcArbitration_0_5;
reg [31:0] nv10CalcArbitration_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_6_reg;
reg [31:0] nv10CalcArbitration_0_7;
reg [31:0] nv10CalcArbitration_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_8_reg;
reg [31:0] nv10CalcArbitration_0_9;
reg [31:0] nv10CalcArbitration_0_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_10_reg;
reg [31:0] nv10CalcArbitration_0_11;
reg [31:0] nv10CalcArbitration_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_12_reg;
reg [31:0] nv10CalcArbitration_0_13;
reg [31:0] nv10CalcArbitration_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_14_reg;
reg [31:0] nv10CalcArbitration_0_15;
reg [31:0] nv10CalcArbitration_0_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_16_reg;
reg [31:0] nv10CalcArbitration_0_17;
reg [31:0] nv10CalcArbitration_0_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_0_18_reg;
reg [31:0] nv10CalcArbitration_0_19;
reg [31:0] nv10CalcArbitration_0_19_reg;
reg  nv10CalcArbitration_0_20;
reg  nv10CalcArbitration_0_20_reg;
reg  nv10CalcArbitration_0_21;
reg  nv10CalcArbitration_0_21_reg;
reg [31:0] nv10CalcArbitration_22__;
reg [31:0] nv10CalcArbitration_22___reg;
reg [31:0] nv10CalcArbitration_23__2;
reg [31:0] nv10CalcArbitration_23__2_reg;
reg [31:0] nv10CalcArbitration_24_mclks_0;
reg [31:0] nv10CalcArbitration_24_mclks_0_reg;
reg  nv10CalcArbitration_24_25;
reg  nv10CalcArbitration_24_25_reg;
reg  nv10CalcArbitration_24__not;
reg  nv10CalcArbitration_24__not_reg;
reg  nv10CalcArbitration_24_26;
reg  nv10CalcArbitration_24_26_reg;
reg  nv10CalcArbitration_24_or_cond14;
reg  nv10CalcArbitration_24_or_cond14_reg;
reg  nv10CalcArbitration_24_27;
reg  nv10CalcArbitration_24_27_reg;
reg [31:0] nv10CalcArbitration_28_29;
reg [31:0] nv10CalcArbitration_28_29_reg;
reg [31:0] nv10CalcArbitration_30_31;
reg [31:0] nv10CalcArbitration_30_31_reg;
reg [31:0] nv10CalcArbitration_32_mclk_extra_0;
reg [31:0] nv10CalcArbitration_32_mclk_extra_0_reg;
reg [31:0] nv10CalcArbitration_32_min_mclk_extra_0;
reg [31:0] nv10CalcArbitration_32_min_mclk_extra_0_reg;
reg [31:0] nv10CalcArbitration_32_33;
reg [31:0] nv10CalcArbitration_32_33_reg;
reg  nv10CalcArbitration_32_34;
reg  nv10CalcArbitration_32_34_reg;
reg [31:0] nv10CalcArbitration_32__mclks_0;
reg [31:0] nv10CalcArbitration_32__mclks_0_reg;
reg [31:0] nv10CalcArbitration_32_35;
reg [31:0] nv10CalcArbitration_32_35_reg;
reg [31:0] nv10CalcArbitration_32_36;
reg [31:0] nv10CalcArbitration_32_36_reg;
reg [31:0] nv10CalcArbitration_32_37;
reg [31:0] nv10CalcArbitration_32_37_reg;
reg [31:0] nv10CalcArbitration_32_38;
reg [31:0] nv10CalcArbitration_32_38_reg;
reg [31:0] nv10CalcArbitration_32_39;
reg [31:0] nv10CalcArbitration_32_39_reg;
reg [31:0] nv10CalcArbitration_32_40;
reg [31:0] nv10CalcArbitration_32_40_reg;
reg [31:0] nv10CalcArbitration_32_41;
reg [31:0] nv10CalcArbitration_32_41_reg;
reg [31:0] nv10CalcArbitration_32_42;
reg [31:0] nv10CalcArbitration_32_42_reg;
reg [31:0] nv10CalcArbitration_32_43;
reg [31:0] nv10CalcArbitration_32_43_reg;
reg [31:0] nv10CalcArbitration_32_crtpagemiss_0;
reg [31:0] nv10CalcArbitration_32_crtpagemiss_0_reg;
reg [31:0] nv10CalcArbitration_32_44;
reg [31:0] nv10CalcArbitration_32_44_reg;
reg [31:0] nv10CalcArbitration_32_45;
reg [31:0] nv10CalcArbitration_32_45_reg;
reg [31:0] nv10CalcArbitration_32_46;
reg [31:0] nv10CalcArbitration_32_46_reg;
reg [31:0] nv10CalcArbitration_32_factor;
reg [31:0] nv10CalcArbitration_32_factor_reg;
reg [31:0] nv10CalcArbitration_32_47;
reg [31:0] nv10CalcArbitration_32_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_32_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_32_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_32_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_32_49_reg;
reg [31:0] nv10CalcArbitration_32_50;
reg [31:0] nv10CalcArbitration_32_50_reg;
reg [31:0] nv10CalcArbitration_32_51;
reg [31:0] nv10CalcArbitration_32_51_reg;
reg [31:0] nv10CalcArbitration_32__off;
reg [31:0] nv10CalcArbitration_32__off_reg;
reg [31:0] nv10CalcArbitration_32_52;
reg [31:0] nv10CalcArbitration_32_52_reg;
reg [31:0] nv10CalcArbitration_32_53;
reg [31:0] nv10CalcArbitration_32_53_reg;
reg [31:0] nv10CalcArbitration_32_54;
reg [31:0] nv10CalcArbitration_32_54_reg;
reg  nv10CalcArbitration_32_55;
reg  nv10CalcArbitration_32_55_reg;
reg  nv10CalcArbitration_32__not15;
reg  nv10CalcArbitration_32__not15_reg;
reg  nv10CalcArbitration_32__not16;
reg  nv10CalcArbitration_32__not16_reg;
reg  nv10CalcArbitration_32_brmerge;
reg  nv10CalcArbitration_32_brmerge_reg;
reg  nv10CalcArbitration_32_brmerge17;
reg  nv10CalcArbitration_32_brmerge17_reg;
reg [31:0] nv10CalcArbitration__thread13_min_mclk_extra_14;
reg [31:0] nv10CalcArbitration__thread13_min_mclk_extra_14_reg;
reg [31:0] nv10CalcArbitration__thread13_cbs_03;
reg [31:0] nv10CalcArbitration__thread13_cbs_03_reg;
reg [31:0] nv10CalcArbitration__thread13_56;
reg [31:0] nv10CalcArbitration__thread13_56_reg;
reg [31:0] nv10CalcArbitration__thread13_57;
reg [31:0] nv10CalcArbitration__thread13_57_reg;
reg [31:0] nv10CalcArbitration_58_59;
reg [31:0] nv10CalcArbitration_58_59_reg;
reg [31:0] nv10CalcArbitration_58_60;
reg [31:0] nv10CalcArbitration_58_60_reg;
reg [31:0] nv10CalcArbitration_58_61;
reg [31:0] nv10CalcArbitration_58_61_reg;
reg [31:0] nv10CalcArbitration_58_62;
reg [31:0] nv10CalcArbitration_58_62_reg;
reg [31:0] nv10CalcArbitration_58_63;
reg [31:0] nv10CalcArbitration_58_63_reg;
reg [31:0] nv10CalcArbitration_58_64;
reg [31:0] nv10CalcArbitration_58_64_reg;
reg [31:0] nv10CalcArbitration_58_65;
reg [31:0] nv10CalcArbitration_58_65_reg;
reg [31:0] nv10CalcArbitration_58_66;
reg [31:0] nv10CalcArbitration_58_66_reg;
reg [31:0] nv10CalcArbitration_67_68;
reg [31:0] nv10CalcArbitration_67_68_reg;
reg [31:0] nv10CalcArbitration_67_69;
reg [31:0] nv10CalcArbitration_67_69_reg;
reg [31:0] nv10CalcArbitration_67_70;
reg [31:0] nv10CalcArbitration_67_70_reg;
reg [31:0] nv10CalcArbitration_67_71;
reg [31:0] nv10CalcArbitration_67_71_reg;
reg [31:0] nv10CalcArbitration_67_72;
reg [31:0] nv10CalcArbitration_67_72_reg;
reg [31:0] nv10CalcArbitration_67__mux;
reg [31:0] nv10CalcArbitration_67__mux_reg;
reg [31:0] nv10CalcArbitration_67__mux_mux;
reg [31:0] nv10CalcArbitration_67__mux_mux_reg;
reg [31:0] nv10CalcArbitration_74_cbs_1;
reg [31:0] nv10CalcArbitration_74_cbs_1_reg;
reg [31:0] nv10CalcArbitration_74_clwm_0;
reg [31:0] nv10CalcArbitration_74_clwm_0_reg;
reg [31:0] nv10CalcArbitration_74_75;
reg [31:0] nv10CalcArbitration_74_75_reg;
reg [31:0] nv10CalcArbitration_74_76;
reg [31:0] nv10CalcArbitration_74_76_reg;
reg [31:0] nv10CalcArbitration_74_77;
reg [31:0] nv10CalcArbitration_74_77_reg;
reg  nv10CalcArbitration_74_78;
reg  nv10CalcArbitration_74_78_reg;
reg [31:0] nv10CalcArbitration_74__clwm_0;
reg [31:0] nv10CalcArbitration_74__clwm_0_reg;
reg [31:0] nv10CalcArbitration_74_79;
reg [31:0] nv10CalcArbitration_74_79_reg;
reg [31:0] nv10CalcArbitration_74_80;
reg [31:0] nv10CalcArbitration_74_80_reg;
reg [31:0] nv10CalcArbitration_74_81;
reg [31:0] nv10CalcArbitration_74_81_reg;
reg [31:0] nv10CalcArbitration_74_82;
reg [31:0] nv10CalcArbitration_74_82_reg;
reg [31:0] nv10CalcArbitration_74_83;
reg [31:0] nv10CalcArbitration_74_83_reg;
reg [31:0] nv10CalcArbitration_74_84;
reg [31:0] nv10CalcArbitration_74_84_reg;
reg [31:0] nv10CalcArbitration_74_85;
reg [31:0] nv10CalcArbitration_74_85_reg;
reg [31:0] nv10CalcArbitration_74_86;
reg [31:0] nv10CalcArbitration_74_86_reg;
reg [31:0] nv10CalcArbitration_74_87;
reg [31:0] nv10CalcArbitration_74_87_reg;
reg  nv10CalcArbitration_74_88;
reg  nv10CalcArbitration_74_88_reg;
reg  nv10CalcArbitration_74_89;
reg  nv10CalcArbitration_74_89_reg;
reg  nv10CalcArbitration_74_or_cond;
reg  nv10CalcArbitration_74_or_cond_reg;
reg  nv10CalcArbitration_90_91;
reg  nv10CalcArbitration_90_91_reg;
reg  nv10CalcArbitration_92_93;
reg  nv10CalcArbitration_92_93_reg;
reg [31:0] nv10CalcArbitration_94_95;
reg [31:0] nv10CalcArbitration_94_95_reg;
reg [31:0] nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be;
reg [31:0] nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg;
reg [31:0] nv10CalcArbitration__thread13_backedge_cbs_03_be;
reg [31:0] nv10CalcArbitration__thread13_backedge_cbs_03_be_reg;
reg [31:0] nv10CalcArbitration_96_97;
reg [31:0] nv10CalcArbitration_96_97_reg;
reg  nv10CalcArbitration_98_99;
reg  nv10CalcArbitration_98_99_reg;
reg  nv10CalcArbitration_100_101;
reg  nv10CalcArbitration_100_101_reg;
reg  nv10CalcArbitration_100_not_;
reg  nv10CalcArbitration_100_not__reg;
reg [31:0] nv10CalcArbitration_100_102;
reg [31:0] nv10CalcArbitration_100_102_reg;
reg [31:0] nv10CalcArbitration_100_min_mclk_extra_1_;
reg [31:0] nv10CalcArbitration_100_min_mclk_extra_1__reg;
reg [31:0] nv10CalcArbitration_103__ph;
reg [31:0] nv10CalcArbitration_103__ph_reg;
reg [31:0] nv10CalcArbitration_103_104;
reg [31:0] nv10CalcArbitration_103_104_reg;
reg [31:0] nv10CalcArbitration_103_105;
reg [31:0] nv10CalcArbitration_103_105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_103_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_103_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_103_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_103_107_reg;
reg  nv10CalcArbitration_103_108;
reg  nv10CalcArbitration_103_108_reg;
reg [31:0] nv10CalcArbitration_103_clwm_2;
reg [31:0] nv10CalcArbitration_103_clwm_2_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] nv10CalcArbitration_signed_divide_32_0_op0;
reg [31:0] nv10CalcArbitration_signed_divide_32_0_op1;
wire [31:0] lpm_divide_nv10CalcArbitration__thread13_57_temp_out;
wire [31:0] nv10CalcArbitration__thread13_57_unused;
reg  lpm_divide_nv10CalcArbitration__thread13_57_en;
reg [31:0] lpm_divide_nv10CalcArbitration__thread13_57_out;
reg [31:0] nv10CalcArbitration_signed_divide_32_0;
reg  lpm_mult_nv10CalcArbitration_32_36_en;
reg [31:0] nv10CalcArbitration_32_36_stage0_reg;
reg  lpm_mult_nv10CalcArbitration_32_38_en;
reg [31:0] nv10CalcArbitration_32_38_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_32_40_en;
reg  lpm_mult_nv10CalcArbitration_32_42_en;
reg [31:0] nv10CalcArbitration_32_42_stage0_reg;
reg  lpm_mult_nv10CalcArbitration_32_44_en;
reg [31:0] nv10CalcArbitration_32_44_stage0_reg;
reg  lpm_mult_nv10CalcArbitration_32_45_en;
reg [31:0] nv10CalcArbitration_32_45_stage0_reg;
reg  lpm_mult_nv10CalcArbitration_32_53_en;
reg [31:0] nv10CalcArbitration_32_53_stage0_reg;
reg  lpm_mult_nv10CalcArbitration_32_54_en;
reg [31:0] nv10CalcArbitration_32_54_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_32_41_en;
reg  lpm_mult_nv10CalcArbitration_32_46_en;
reg [31:0] nv10CalcArbitration_32_46_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_32_43_en;
reg  lpm_divide_nv10CalcArbitration_32_37_en;
reg  lpm_divide_nv10CalcArbitration_32_39_en;
reg  lpm_mult_nv10CalcArbitration_32_52_en;
reg [31:0] nv10CalcArbitration_32_52_stage0_reg;
reg  lpm_mult_nv10CalcArbitration__thread13_56_en;
reg [31:0] nv10CalcArbitration__thread13_56_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_58_59_en;
reg  lpm_divide_nv10CalcArbitration_58_60_en;
reg  lpm_mult_nv10CalcArbitration_58_64_en;
reg [31:0] nv10CalcArbitration_58_64_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_58_65_en;
reg  lpm_divide_nv10CalcArbitration_67_68_en;
reg  lpm_mult_nv10CalcArbitration_67_70_en;
reg [31:0] nv10CalcArbitration_67_70_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_67_71_en;
reg  lpm_mult_nv10CalcArbitration_74_84_en;
reg [31:0] nv10CalcArbitration_74_84_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_74_85_en;
reg  lpm_divide_nv10CalcArbitration_74_75_en;
reg  lpm_mult_nv10CalcArbitration_74_86_en;
reg [31:0] nv10CalcArbitration_74_86_stage0_reg;
reg  lpm_divide_nv10CalcArbitration_74_87_en;
reg  lpm_divide_nv10CalcArbitration_94_95_en;

/*   %57 = sdiv i32 %56, %5*/
lpm_divide lpm_divide_nv10CalcArbitration__thread13_57 (
	.quotient (lpm_divide_nv10CalcArbitration__thread13_57_temp_out),
	.remain (nv10CalcArbitration__thread13_57_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_nv10CalcArbitration__thread13_57_en),
	.numer (nv10CalcArbitration_signed_divide_32_0_op0),
	.denom (nv10CalcArbitration_signed_divide_32_0_op1)
);

defparam
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_pipeline = 32,
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_widthn = 32,
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_widthd = 32,
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_drepresentation = "SIGNED",
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_nrepresentation = "SIGNED",
	lpm_divide_nv10CalcArbitration__thread13_57.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_8) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_0_20 == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_22_9;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_8) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_0_20 == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_23_10;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_23_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_22_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_22_9;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_22_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_22_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_24_11;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_24_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_23_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_23_10;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_23_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_23_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_24_11;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_24_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_24_11;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_24_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_24_12;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_24_12;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_12) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_24_or_cond14 == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_28_13;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_28_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_12) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_24_or_cond14 == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_30_14;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_30_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_28_13;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_28_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_15;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_30_14;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_30_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_15;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_15;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_16;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_16;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_17;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_17;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_18;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_18;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_19;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_19;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_20;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_21;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_22;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_22;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_23;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_23;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_25;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_25;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_26;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_26;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_27;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_27;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_28;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_28;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_29;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_29;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_30;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_30;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_31;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_31;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_32;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_32;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_33;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_33;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_34;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_34;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_35;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_35;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_36;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_36;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_37;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_37;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_38;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_38;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_39;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_39;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_40;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_40;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_41;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_41;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_42;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_42;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_43;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_43;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_44;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_44;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_45;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_45;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_46;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_46;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_47;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_47;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_48;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_48;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_49;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_49;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_50;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_50;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_51;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_32_51;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_32_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_52;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_52;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_53;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_53;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_54;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_54;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_55;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_55;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_56;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_56;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_57;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_57;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_58;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_58;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_59;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_59;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_60;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_60;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_61;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_61;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_62;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_62;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_63;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_63;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_64;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_64;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_65;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_65;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_66;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_66;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_67;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_67;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_68;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_68;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_69;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_69;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_70;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_70;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_71;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_71;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_72;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_72;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_73;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_73;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_74;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_74;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_75;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_75;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_76;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_76;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_77;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_77;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_78;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_78;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_79;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_79;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_80;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_80;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_81;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_81;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_82;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_82;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_83;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_83;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_84;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_84;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_85;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_85;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_85) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_24_25_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_86;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_85) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_24_25_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_153;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_86;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_87;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_87;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_88;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_88;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_89;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_89;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_90;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_90;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_91;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_91;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_92;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_92;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_93;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_93;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_94;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_94;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_95;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_95;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_96;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_96;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_97;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_97;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_98;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_98;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_99;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_99;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_100;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_100;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_101;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_101;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_102;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_102;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_103;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_103;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_104;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_104;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_105;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_105;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_106;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_106;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_107;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_107;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_108;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_108;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_109;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_109;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_110;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_110;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_111;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_111;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_112;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_112;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_113;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_113;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_114;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_114;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_115;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_115;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_116;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_116;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_117;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_117;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_118;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_118;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_119;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_119;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_120;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_120;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_121;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_121;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_122;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_122;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_123;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_123;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_124;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_124;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_125;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_125;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_126;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_126;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_127;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_127;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_128;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_128;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_129;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_129;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_130;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_130;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_131;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_131;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_132;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_132;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_133;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_133;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_134;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_134;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_135;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_135;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_136;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_136;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_137;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_137;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_138;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_138;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_139;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_139;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_140;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_140;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_141;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_141;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_142;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_142;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_143;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_143;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_144;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_144;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_145;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_145;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_146;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_146;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_147;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_147;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_148;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_148;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_149;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_149;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_150;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_150;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_151;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_151;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_152;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_58_152;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_58_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_220;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_153;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_154;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_154;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_155;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_155;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_156;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_156;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_157;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_157;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_158;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_158;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_159;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_159;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_160;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_160;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_161;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_161;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_162;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_162;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_163;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_163;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_164;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_164;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_165;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_165;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_166;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_166;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_167;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_167;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_168;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_168;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_169;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_169;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_170;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_170) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_170;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_170) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_171;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_171) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_171;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_171) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_172;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_172) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_172;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_172) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_173;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_173) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_173;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_173) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_174;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_174) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_174;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_174) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_175;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_175) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_175;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_175) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_176;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_176) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_176;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_176) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_177;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_177) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_177;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_177) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_178;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_178) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_178;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_178) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_179;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_179) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_179;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_179) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_180;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_180) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_180;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_180) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_181;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_181) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_181;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_181) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_182;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_182) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_182;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_182) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_183;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_183) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_183;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_183) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_184;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_184) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_184;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_184) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_185;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_185) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_185;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_185) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_186;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_186;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_187;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_187) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_187;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_187) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_188;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_188) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_188;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_188) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_189;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_189) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_189;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_189) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_190;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_190) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_190;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_190) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_191;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_191) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_191;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_191) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_192;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_192) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_192;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_192) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_193;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_193) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_193;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_193) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_194;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_194) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_194;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_194) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_195;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_195) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_195;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_195) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_196;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_196) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_196;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_196) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_197;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_197) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_197;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_197) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_198;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_198) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_198;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_198) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_199;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_199) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_199;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_199) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_200;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_200) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_200;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_200) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_201;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_201) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_201;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_201) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_202;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_202) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_202;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_202) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_203;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_203) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_203;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_203) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_204;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_204) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_204;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_204) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_205;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_205) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_205;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_205) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_206;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_206) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_206;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_206) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_207;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_207) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_207;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_207) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_208;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_208) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_208;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_208) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_209;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_209) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_209;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_209) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_210;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_210) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_210;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_210) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_211;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_211) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_211;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_211) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_212;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_212) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_212;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_212) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_213;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_213) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_213;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_213) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_214;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_214) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_214;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_214) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_215;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_215) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_215;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_215) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_216;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_216) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_216;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_216) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_217;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_217) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_217;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_217) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_218;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_67_218;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_67_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_220;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_73_219;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_73_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_73_219;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_73_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_220;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_220;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_221;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_221;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_222;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_222) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_222;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_222) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_223;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_223) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_223;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_223) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_224;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_224) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_224;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_224) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_225;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_225) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_225;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_225) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_226;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_226) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_226;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_226) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_227;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_227) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_227;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_227) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_228;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_228) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_228;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_228) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_229;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_229) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_229;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_229) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_230;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_230) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_230;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_230) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_231;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_231) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_231;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_231) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_232;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_232) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_232;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_232) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_233;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_233) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_233;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_233) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_234;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_234) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_234;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_234) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_235;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_235) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_235;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_235) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_236;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_236) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_236;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_236) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_237;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_237) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_237;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_237) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_238;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_238) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_238;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_238) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_239;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_239) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_239;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_239) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_240;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_240) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_240;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_240) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_241;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_241) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_241;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_241) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_242;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_242) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_242;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_242) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_243;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_243) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_243;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_243) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_244;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_244) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_244;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_244) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_245;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_245) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_245;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_245) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_246;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_246) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_246;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_246) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_247;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_247) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_247;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_247) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_248;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_248) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_248;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_248) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_249;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_249) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_249;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_249) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_250;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_250) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_250;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_250) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_251;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_251) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_251;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_251) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_252;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_252) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_252;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_252) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_253;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_253) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_253;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_253) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_254;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_254;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_255;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_255) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_255;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_255) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_256;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_256) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_256;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_256) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_257;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_257) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_257;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_257) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_258;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_258) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_258;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_258) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_259;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_259) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_259;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_259) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_260;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_260) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_260;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_260) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_261;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_261) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_261;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_261) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_262;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_262) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_262;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_262) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_263;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_263) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_263;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_263) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_264;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_264) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_264;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_264) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_265;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_265) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_265;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_265) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_266;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_266) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_266;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_266) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_267;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_267) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_267;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_267) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_268;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_268) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_268;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_268) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_269;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_269) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_269;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_269) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_270;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_270) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_270;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_270) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_271;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_271) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_271;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_271) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_272;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_272) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_272;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_272) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_273;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_273) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_273;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_273) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_274;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_274) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_274;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_274) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_275;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_275) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_275;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_275) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_276;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_276) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_276;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_276) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_277;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_277) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_277;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_277) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_278;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_278) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_278;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_278) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_279;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_279) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_279;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_279) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_280;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_280) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_280;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_280) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_281;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_281) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_281;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_281) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_282;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_282) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_282;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_282) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_283;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_283) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_283;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_283) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_284;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_284) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_284;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_284) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_285;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_285) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_285;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_285) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_286;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_74_286;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_74_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_74_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_90_287;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_90_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_74_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_98_324;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_98_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_90_287) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_90_287;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_90_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_90_287) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_90_91 == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_92_288;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_92_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_90_287) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_90_91 == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_96_323;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_96_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_92_288;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_92_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_92_93 == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_328;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_92_93 == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_289;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_289) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_289;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_289) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_290;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_290) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_290;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_290) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_291;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_291) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_291;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_291) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_292;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_292) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_292;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_292) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_293;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_293) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_293;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_293) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_294;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_294) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_294;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_294) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_295;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_295) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_295;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_295) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_296;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_296) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_296;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_296) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_297;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_297) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_297;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_297) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_298;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_298) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_298;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_298) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_299;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_299) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_299;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_299) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_300;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_300) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_300;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_300) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_301;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_301) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_301;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_301) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_302;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_302) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_302;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_302) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_303;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_303) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_303;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_303) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_304;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_304) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_304;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_304) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_305;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_305) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_305;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_305) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_306;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_306) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_306;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_306) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_307;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_307) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_307;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_307) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_308;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_308) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_308;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_308) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_309;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_309) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_309;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_309) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_310;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_310) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_310;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_310) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_311;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_311) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_311;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_311) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_312;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_312) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_312;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_312) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_313;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_313) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_313;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_313) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_314;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_314) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_314;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_314) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_315;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_315) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_315;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_315) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_316;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_316) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_316;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_316) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_317;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_317) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_317;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_317) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_318;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_318) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_318;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_318) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_319;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_319) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_319;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_319) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_320;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_320) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_320;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_320) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_321;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_94_321;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_94_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_52;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_96_323;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_96_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_98_324;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_98_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_98_99 == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_325;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_98_99 == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_328;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_325) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_325;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_325) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_326;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_326) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_326;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_326) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_327;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_100_327;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_100_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_328;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_328;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_329;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_329;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_330;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_330;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_331;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_331) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_nv10CalcArbitration_BB_103_331;
if (reset == 1'b0 && ^(LEGUP_F_nv10CalcArbitration_BB_103_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_331) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 9'd0;
if (reset == 1'b0 && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 0*/
begin
nv10CalcArbitration_0_1 = arg_fifo;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_1_reg <= nv10CalcArbitration_0_1;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_1_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 0*/
begin
nv10CalcArbitration_0_2 = arg_arb;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_2_reg <= nv10CalcArbitration_0_2;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_2_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
nv10CalcArbitration_0_3_reg <= nv10CalcArbitration_0_3;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_3_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 1*/
begin
nv10CalcArbitration_0_4 = (arg_arb + 4);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %4 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_4_reg <= nv10CalcArbitration_0_4;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_4_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
nv10CalcArbitration_0_5_reg <= nv10CalcArbitration_0_5;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_5_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 2*/
begin
nv10CalcArbitration_0_6 = (arg_arb + 8);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %6 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_6_reg <= nv10CalcArbitration_0_6;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_6_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
nv10CalcArbitration_0_7_reg <= nv10CalcArbitration_0_7;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_7_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 3*/
begin
nv10CalcArbitration_0_8 = (arg_arb + 12);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %8 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_8_reg <= nv10CalcArbitration_0_8;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_8_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
nv10CalcArbitration_0_9_reg <= nv10CalcArbitration_0_9;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_9_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 4*/
begin
nv10CalcArbitration_0_10 = (arg_arb + 16);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_10_reg <= nv10CalcArbitration_0_10;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_10_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
nv10CalcArbitration_0_11_reg <= nv10CalcArbitration_0_11;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_11_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 5*/
begin
nv10CalcArbitration_0_12 = (arg_arb + 20);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_12_reg <= nv10CalcArbitration_0_12;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_12_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_13 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
nv10CalcArbitration_0_13_reg <= nv10CalcArbitration_0_13;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_13_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 6*/
begin
nv10CalcArbitration_0_14 = (arg_arb + 24);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 6*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_14_reg <= nv10CalcArbitration_0_14;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_14_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_15 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_7))
begin
nv10CalcArbitration_0_15_reg <= nv10CalcArbitration_0_15;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_15_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %16 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 7*/
begin
nv10CalcArbitration_0_16 = (arg_arb + 28);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %16 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 7*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_16_reg <= nv10CalcArbitration_0_16;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_16_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_17 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_7))
begin
nv10CalcArbitration_0_17_reg <= nv10CalcArbitration_0_17;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_17_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %18 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 8*/
begin
nv10CalcArbitration_0_18 = (arg_arb + 32);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %18 = getelementptr inbounds %struct.TYPE_5__* %arb, i32 0, i32 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
nv10CalcArbitration_0_18_reg <= nv10CalcArbitration_0_18;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_18_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
nv10CalcArbitration_0_19 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_8))
begin
nv10CalcArbitration_0_19_reg <= nv10CalcArbitration_0_19;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_19_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %20 = icmp eq i32 %19, 0*/
begin
nv10CalcArbitration_0_20 = (nv10CalcArbitration_0_19 == 32'd0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %20 = icmp eq i32 %19, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_8))
begin
nv10CalcArbitration_0_20_reg <= nv10CalcArbitration_0_20;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_20_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %0*/
/*   %21 = icmp eq i32 %11, 64*/
begin
nv10CalcArbitration_0_21 = (nv10CalcArbitration_0_11 == 32'd64);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %0*/
/*   %21 = icmp eq i32 %11, 64*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
nv10CalcArbitration_0_21_reg <= nv10CalcArbitration_0_21;
if (reset == 1'b0 && ^(nv10CalcArbitration_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_0_21_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %22*/
/*   %. = select i1 %21, i32 22, i32 20*/
begin
nv10CalcArbitration_22__ = (nv10CalcArbitration_0_21_reg ? 32'd22 : 32'd20);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %22*/
/*   %. = select i1 %21, i32 22, i32 20*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_22_9))
begin
nv10CalcArbitration_22___reg <= nv10CalcArbitration_22__;
if (reset == 1'b0 && ^(nv10CalcArbitration_22__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_22___reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %23*/
/*   %.2 = select i1 %21, i32 20, i32 19*/
begin
nv10CalcArbitration_23__2 = (nv10CalcArbitration_0_21_reg ? 32'd20 : 32'd19);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %23*/
/*   %.2 = select i1 %21, i32 20, i32 19*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_23_10))
begin
nv10CalcArbitration_23__2_reg <= nv10CalcArbitration_23__2;
if (reset == 1'b0 && ^(nv10CalcArbitration_23__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_23__2_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %mclks.0 = phi i32 [ %., %22 ], [ %.2, %23 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_22_9) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_24_mclks_0 = nv10CalcArbitration_22__;
end
/* nv10CalcArbitration: %24*/
/*   %mclks.0 = phi i32 [ %., %22 ], [ %.2, %23 ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_23_10) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration_24_mclks_0 = nv10CalcArbitration_23__2;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %mclks.0 = phi i32 [ %., %22 ], [ %.2, %23 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_22_9) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_24_mclks_0_reg <= nv10CalcArbitration_24_mclks_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_mclks_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_mclks_0_reg"); $finish; end
end
/* nv10CalcArbitration: %24*/
/*   %mclks.0 = phi i32 [ %., %22 ], [ %.2, %23 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_23_10) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_24_mclks_0_reg <= nv10CalcArbitration_24_mclks_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_mclks_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_mclks_0_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %25 = icmp ne i32 %13, 0*/
begin
nv10CalcArbitration_24_25 = (nv10CalcArbitration_0_13_reg != 32'd0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %25 = icmp ne i32 %13, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_11))
begin
nv10CalcArbitration_24_25_reg <= nv10CalcArbitration_24_25;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_25_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %.not = xor i1 %25, true*/
begin
nv10CalcArbitration_24__not = (nv10CalcArbitration_24_25_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %.not = xor i1 %25, true*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_12))
begin
nv10CalcArbitration_24__not_reg <= nv10CalcArbitration_24__not;
if (reset == 1'b0 && ^(nv10CalcArbitration_24__not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24__not_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %26 = icmp eq i32 %11, 128*/
begin
nv10CalcArbitration_24_26 = (nv10CalcArbitration_0_11_reg == 32'd128);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %26 = icmp eq i32 %11, 128*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_11))
begin
nv10CalcArbitration_24_26_reg <= nv10CalcArbitration_24_26;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_26_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %or.cond14 = and i1 %26, %.not*/
begin
nv10CalcArbitration_24_or_cond14 = (nv10CalcArbitration_24_26_reg & nv10CalcArbitration_24__not);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %or.cond14 = and i1 %26, %.not*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_12))
begin
nv10CalcArbitration_24_or_cond14_reg <= nv10CalcArbitration_24_or_cond14;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_or_cond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_or_cond14_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %24*/
/*   %27 = icmp eq i32 %15, 32*/
begin
nv10CalcArbitration_24_27 = (nv10CalcArbitration_0_15_reg == 32'd32);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %24*/
/*   %27 = icmp eq i32 %15, 32*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_24_11))
begin
nv10CalcArbitration_24_27_reg <= nv10CalcArbitration_24_27;
if (reset == 1'b0 && ^(nv10CalcArbitration_24_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_24_27_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %28*/
/*   %29 = select i1 %27, i32 31, i32 42*/
begin
nv10CalcArbitration_28_29 = (nv10CalcArbitration_24_27_reg ? 32'd31 : 32'd42);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %28*/
/*   %29 = select i1 %27, i32 31, i32 42*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13))
begin
nv10CalcArbitration_28_29_reg <= nv10CalcArbitration_28_29;
if (reset == 1'b0 && ^(nv10CalcArbitration_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_28_29_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %30*/
/*   %31 = select i1 %27, i32 8, i32 4*/
begin
nv10CalcArbitration_30_31 = (nv10CalcArbitration_24_27_reg ? 32'd8 : 32'd4);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %30*/
/*   %31 = select i1 %27, i32 8, i32 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14))
begin
nv10CalcArbitration_30_31_reg <= nv10CalcArbitration_30_31;
if (reset == 1'b0 && ^(nv10CalcArbitration_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_30_31_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %mclk_extra.0 = phi i32 [ %31, %30 ], [ %29, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_mclk_extra_0 = nv10CalcArbitration_28_29;
end
/* nv10CalcArbitration: %32*/
/*   %mclk_extra.0 = phi i32 [ %31, %30 ], [ %29, %28 ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration_32_mclk_extra_0 = nv10CalcArbitration_30_31;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %mclk_extra.0 = phi i32 [ %31, %30 ], [ %29, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_mclk_extra_0_reg <= nv10CalcArbitration_32_mclk_extra_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_mclk_extra_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_mclk_extra_0_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %mclk_extra.0 = phi i32 [ %31, %30 ], [ %29, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_mclk_extra_0_reg <= nv10CalcArbitration_32_mclk_extra_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_mclk_extra_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_mclk_extra_0_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %min_mclk_extra.0 = phi i32 [ 18, %30 ], [ 17, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_min_mclk_extra_0 = 32'd17;
end
/* nv10CalcArbitration: %32*/
/*   %min_mclk_extra.0 = phi i32 [ 18, %30 ], [ 17, %28 ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration_32_min_mclk_extra_0 = 32'd18;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %min_mclk_extra.0 = phi i32 [ 18, %30 ], [ 17, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_28_13) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_min_mclk_extra_0_reg <= nv10CalcArbitration_32_min_mclk_extra_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_min_mclk_extra_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_min_mclk_extra_0_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %min_mclk_extra.0 = phi i32 [ 18, %30 ], [ 17, %28 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_30_14) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_32_min_mclk_extra_0_reg <= nv10CalcArbitration_32_min_mclk_extra_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_min_mclk_extra_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_min_mclk_extra_0_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %33 = add nsw i32 %mclks.0, 4*/
begin
nv10CalcArbitration_32_33 = (nv10CalcArbitration_24_mclks_0_reg + 32'd4);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %33 = add nsw i32 %mclks.0, 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_33_reg <= nv10CalcArbitration_32_33;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_33_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %34 = icmp ne i32 %17, 0*/
begin
nv10CalcArbitration_32_34 = (nv10CalcArbitration_0_17_reg != 32'd0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %34 = icmp ne i32 %17, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_34_reg <= nv10CalcArbitration_32_34;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_34_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %.mclks.0 = select i1 %34, i32 %33, i32 %mclks.0*/
begin
nv10CalcArbitration_32__mclks_0 = (nv10CalcArbitration_32_34 ? nv10CalcArbitration_32_33 : nv10CalcArbitration_24_mclks_0_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %.mclks.0 = select i1 %34, i32 %33, i32 %mclks.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32__mclks_0_reg <= nv10CalcArbitration_32__mclks_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32__mclks_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32__mclks_0_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %35 = add nsw i32 %mclk_extra.0, %.mclks.0*/
begin
nv10CalcArbitration_32_35 = (nv10CalcArbitration_32_mclk_extra_0_reg + nv10CalcArbitration_32__mclks_0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %35 = add nsw i32 %mclk_extra.0, %.mclks.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_35_reg <= nv10CalcArbitration_32_35;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_35_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_36 = nv10CalcArbitration_32_36_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %36 = mul i32 %35, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_36_reg <= nv10CalcArbitration_32_36;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_36_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %36 = mul i32 %35, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_36_reg <= nv10CalcArbitration_32_36;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_36_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_37 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %37 = sdiv i32 %36, %5*/
nv10CalcArbitration_32_37_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
nv10CalcArbitration_32_38 = nv10CalcArbitration_32_38_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %38 = mul i32 %.mclks.0, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_38_reg <= nv10CalcArbitration_32_38;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_38_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %38 = mul i32 %.mclks.0, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_38_reg <= nv10CalcArbitration_32_38;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_38_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_39 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %39 = sdiv i32 %38, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51))
begin
nv10CalcArbitration_32_39_reg <= nv10CalcArbitration_32_39;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_39_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %39 = sdiv i32 %38, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51))
begin
nv10CalcArbitration_32_39_reg <= nv10CalcArbitration_32_39;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_39_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_40 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %40 = sdiv i32 9000000, %7*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_47))
begin
nv10CalcArbitration_32_40_reg <= nv10CalcArbitration_32_40;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_40_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %40 = sdiv i32 9000000, %7*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_47))
begin
nv10CalcArbitration_32_40_reg <= nv10CalcArbitration_32_40;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_40_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_41 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %41 = sdiv i32 4000000, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_48))
begin
nv10CalcArbitration_32_41_reg <= nv10CalcArbitration_32_41;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_41_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %41 = sdiv i32 4000000, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_48))
begin
nv10CalcArbitration_32_41_reg <= nv10CalcArbitration_32_41;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_41_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_42 = nv10CalcArbitration_32_42_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %42 = mul nsw i32 %15, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_42_reg <= nv10CalcArbitration_32_42;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_42_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %42 = mul nsw i32 %15, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_42_reg <= nv10CalcArbitration_32_42;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_42_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_43 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %43 = sdiv i32 %42, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_49))
begin
nv10CalcArbitration_32_43_reg <= nv10CalcArbitration_32_43;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_43_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %43 = sdiv i32 %42, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_49))
begin
nv10CalcArbitration_32_43_reg <= nv10CalcArbitration_32_43;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_43_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %crtpagemiss.0 = select i1 %34, i32 3, i32 2*/
begin
nv10CalcArbitration_32_crtpagemiss_0 = (nv10CalcArbitration_32_34 ? 32'd3 : 32'd2);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %crtpagemiss.0 = select i1 %34, i32 3, i32 2*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_crtpagemiss_0_reg <= nv10CalcArbitration_32_crtpagemiss_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_crtpagemiss_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_crtpagemiss_0_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_44 = nv10CalcArbitration_32_44_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %44 = mul i32 %9, 2000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_44_reg <= nv10CalcArbitration_32_44;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_44_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %44 = mul i32 %9, 2000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_44_reg <= nv10CalcArbitration_32_44;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_44_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_45 = nv10CalcArbitration_32_45_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %45 = mul i32 %9, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_45_reg <= nv10CalcArbitration_32_45;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_45_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %45 = mul i32 %9, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_45_reg <= nv10CalcArbitration_32_45;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_45_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_46 = nv10CalcArbitration_32_46_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %46 = mul i32 %45, %crtpagemiss.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17))
begin
nv10CalcArbitration_32_46_reg <= nv10CalcArbitration_32_46;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_46_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %46 = mul i32 %45, %crtpagemiss.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17))
begin
nv10CalcArbitration_32_46_reg <= nv10CalcArbitration_32_46;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_46_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %factor = shl i32 %37, 1*/
begin
nv10CalcArbitration_32_factor = (nv10CalcArbitration_32_37 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %factor = shl i32 %37, 1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_factor_reg <= nv10CalcArbitration_32_factor;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_factor) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_factor_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %47 = add i32 %41, %40*/
begin
nv10CalcArbitration_32_47 = (nv10CalcArbitration_32_41 + nv10CalcArbitration_32_40_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %47 = add i32 %41, %40*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_48))
begin
nv10CalcArbitration_32_47_reg <= nv10CalcArbitration_32_47;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_47_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %48 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 1*/
begin
nv10CalcArbitration_32_48 = (arg_fifo + 4);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %48 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_48_reg <= nv10CalcArbitration_32_48;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_48_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %49 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 3*/
begin
nv10CalcArbitration_32_49 = (arg_fifo + 12);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %49 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32_49_reg <= nv10CalcArbitration_32_49;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_49_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %50 = add i32 %40, %37*/
begin
nv10CalcArbitration_32_50 = (nv10CalcArbitration_32_40_reg + nv10CalcArbitration_32_37);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %50 = add i32 %40, %37*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_50_reg <= nv10CalcArbitration_32_50;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_50_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %51 = add i32 %50, %41*/
begin
nv10CalcArbitration_32_51 = (nv10CalcArbitration_32_50 + nv10CalcArbitration_32_41_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %51 = add i32 %50, %41*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_51_reg <= nv10CalcArbitration_32_51;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_51_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %.off = add i32 %11, -64*/
begin
nv10CalcArbitration_32__off = (nv10CalcArbitration_0_11_reg + -32'd64);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %.off = add i32 %11, -64*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32__off_reg <= nv10CalcArbitration_32__off;
if (reset == 1'b0 && ^(nv10CalcArbitration_32__off) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32__off_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_52 = nv10CalcArbitration_32_52_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %52 = mul nsw i32 %43, 100*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_52_reg <= nv10CalcArbitration_32_52;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_52_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %52 = mul nsw i32 %43, 100*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_52_reg <= nv10CalcArbitration_32_52;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_52_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_53 = nv10CalcArbitration_32_53_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %53 = mul i32 %7, 816*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_53_reg <= nv10CalcArbitration_32_53;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_53_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %53 = mul i32 %7, 816*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_53_reg <= nv10CalcArbitration_32_53;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_53_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_32_54 = nv10CalcArbitration_32_54_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %54 = mul i32 %7, 784*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_54_reg <= nv10CalcArbitration_32_54;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_54_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %54 = mul i32 %7, 784*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_32_54_reg <= nv10CalcArbitration_32_54;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_54_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %55 = icmp slt i32 %52, %54*/
begin
nv10CalcArbitration_32_55 = ($signed(nv10CalcArbitration_32_52) < $signed(nv10CalcArbitration_32_54_reg));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %55 = icmp slt i32 %52, %54*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_55_reg <= nv10CalcArbitration_32_55;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_55_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %.not15 = icmp ugt i32 %.off, 63*/
begin
nv10CalcArbitration_32__not15 = (nv10CalcArbitration_32__off > 32'd63);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %.not15 = icmp ugt i32 %.off, 63*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_32__not15_reg <= nv10CalcArbitration_32__not15;
if (reset == 1'b0 && ^(nv10CalcArbitration_32__not15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32__not15_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %.not16 = icmp sge i32 %52, %53*/
begin
nv10CalcArbitration_32__not16 = ($signed(nv10CalcArbitration_32_52) >= $signed(nv10CalcArbitration_32_53_reg));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %.not16 = icmp sge i32 %52, %53*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32__not16_reg <= nv10CalcArbitration_32__not16;
if (reset == 1'b0 && ^(nv10CalcArbitration_32__not16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32__not16_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %brmerge = or i1 %.not15, %.not16*/
begin
nv10CalcArbitration_32_brmerge = (nv10CalcArbitration_32__not15_reg | nv10CalcArbitration_32__not16);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %brmerge = or i1 %.not15, %.not16*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_brmerge_reg <= nv10CalcArbitration_32_brmerge;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_brmerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_brmerge_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %brmerge17 = or i1 %brmerge, %55*/
begin
nv10CalcArbitration_32_brmerge17 = (nv10CalcArbitration_32_brmerge | nv10CalcArbitration_32_55);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %brmerge17 = or i1 %brmerge, %55*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_32_brmerge17_reg <= nv10CalcArbitration_32_brmerge17;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_brmerge17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_32_brmerge17_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %.thread13*/
/*   %min_mclk_extra.14 = phi i32 [ %min_mclk_extra.0, %32 ], [ %min_mclk_extra.14.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_min_mclk_extra_14 = nv10CalcArbitration_32_min_mclk_extra_0_reg;
end
/* nv10CalcArbitration: %.thread13*/
/*   %min_mclk_extra.14 = phi i32 [ %min_mclk_extra.0, %32 ], [ %min_mclk_extra.14.be, %.thread13.backedge ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration__thread13_min_mclk_extra_14 = nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13*/
/*   %min_mclk_extra.14 = phi i32 [ %min_mclk_extra.0, %32 ], [ %min_mclk_extra.14.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_min_mclk_extra_14_reg <= nv10CalcArbitration__thread13_min_mclk_extra_14;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_min_mclk_extra_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_min_mclk_extra_14_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13*/
/*   %min_mclk_extra.14 = phi i32 [ %min_mclk_extra.0, %32 ], [ %min_mclk_extra.14.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_min_mclk_extra_14_reg <= nv10CalcArbitration__thread13_min_mclk_extra_14;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_min_mclk_extra_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_min_mclk_extra_14_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %.thread13*/
/*   %cbs.03 = phi i32 [ 512, %32 ], [ %cbs.03.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_cbs_03 = 32'd512;
end
/* nv10CalcArbitration: %.thread13*/
/*   %cbs.03 = phi i32 [ 512, %32 ], [ %cbs.03.be, %.thread13.backedge ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration__thread13_cbs_03 = nv10CalcArbitration__thread13_backedge_cbs_03_be_reg;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13*/
/*   %cbs.03 = phi i32 [ 512, %32 ], [ %cbs.03.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_51) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_cbs_03_reg <= nv10CalcArbitration__thread13_cbs_03;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_cbs_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_cbs_03_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13*/
/*   %cbs.03 = phi i32 [ 512, %32 ], [ %cbs.03.be, %.thread13.backedge ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_backedge_322) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_cbs_03_reg <= nv10CalcArbitration__thread13_cbs_03;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_cbs_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_cbs_03_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration__thread13_56 = nv10CalcArbitration__thread13_56_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13*/
/*   %56 = mul i32 %min_mclk_extra.14, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53))
begin
nv10CalcArbitration__thread13_56_reg <= nv10CalcArbitration__thread13_56;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_56_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13*/
/*   %56 = mul i32 %min_mclk_extra.14, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53))
begin
nv10CalcArbitration__thread13_56_reg <= nv10CalcArbitration__thread13_56;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_56_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration__thread13_57 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13*/
/*   %57 = sdiv i32 %56, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_85))
begin
nv10CalcArbitration__thread13_57_reg <= nv10CalcArbitration__thread13_57;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_57_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13*/
/*   %57 = sdiv i32 %56, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_85))
begin
nv10CalcArbitration__thread13_57_reg <= nv10CalcArbitration__thread13_57;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_57_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %85 = sdiv i32 %84, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_253))
begin
nv10CalcArbitration__thread13_57_reg <= nv10CalcArbitration_74_85;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_57_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_58_59 = nv10CalcArbitration_signed_divide_32_0;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %59 = sdiv i32 %44, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_118))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_58_59;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %58*/
/*   %59 = sdiv i32 %44, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_118))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_58_59;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %58*/
/*   %60 = sdiv i32 %46, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_119))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_58_60;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %58*/
/*   %65 = sdiv i32 %64, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_58_65;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %67*/
/*   %68 = sdiv i32 %46, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_185))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_67_68;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %67*/
/*   %71 = sdiv i32 %70, 1000000*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_67_71;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %32*/
/*   %37 = sdiv i32 %36, %5*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_50))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_32_37;
if (reset == 1'b0 && ^(nv10CalcArbitration_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %75 = sdiv i32 %clwm.0, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_74_75;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %87 = sdiv i32 %86, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_74_87;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
/* nv10CalcArbitration: %94*/
/*   %95 = sdiv i32 %cbs.1, 2*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321))
begin
nv10CalcArbitration_58_59_reg <= nv10CalcArbitration_94_95;
if (reset == 1'b0 && ^(nv10CalcArbitration_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_59_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_58_60 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %60 = sdiv i32 %46, %5*/
nv10CalcArbitration_58_60_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %61 = add i32 %47, %59*/
begin
nv10CalcArbitration_58_61 = (nv10CalcArbitration_32_47_reg + nv10CalcArbitration_58_59);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %61 = add i32 %47, %59*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_118))
begin
nv10CalcArbitration_58_61_reg <= nv10CalcArbitration_58_61;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_61_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %62 = add i32 %61, %60*/
begin
nv10CalcArbitration_58_62 = (nv10CalcArbitration_58_61_reg + nv10CalcArbitration_58_60);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %62 = add i32 %61, %60*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_119))
begin
nv10CalcArbitration_58_62_reg <= nv10CalcArbitration_58_62;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_62_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %63 = add i32 %62, %factor*/
begin
nv10CalcArbitration_58_63 = (nv10CalcArbitration_58_62 + nv10CalcArbitration_32_factor_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %63 = add i32 %62, %factor*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_119))
begin
nv10CalcArbitration_58_63_reg <= nv10CalcArbitration_58_63;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_63_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_58_64 = nv10CalcArbitration_58_64_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %64 = mul nsw i32 %63, %43*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120))
begin
nv10CalcArbitration_58_64_reg <= nv10CalcArbitration_58_64;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_64_reg"); $finish; end
end
/* nv10CalcArbitration: %58*/
/*   %64 = mul nsw i32 %63, %43*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120))
begin
nv10CalcArbitration_58_64_reg <= nv10CalcArbitration_58_64;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_64_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_58_65 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %65 = sdiv i32 %64, 1000000*/
nv10CalcArbitration_58_65_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %58*/
/*   %66 = add nsw i32 %65, 1*/
begin
nv10CalcArbitration_58_66 = (nv10CalcArbitration_58_65 + 32'd1);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %66 = add nsw i32 %65, 1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152))
begin
nv10CalcArbitration_58_66_reg <= nv10CalcArbitration_58_66;
if (reset == 1'b0 && ^(nv10CalcArbitration_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_58_66_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_67_68 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %68 = sdiv i32 %46, %5*/
nv10CalcArbitration_67_68_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %69 = add i32 %51, %68*/
begin
nv10CalcArbitration_67_69 = (nv10CalcArbitration_32_51_reg + nv10CalcArbitration_67_68);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %69 = add i32 %51, %68*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_185))
begin
nv10CalcArbitration_67_69_reg <= nv10CalcArbitration_67_69;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67_69_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_67_70 = nv10CalcArbitration_67_70_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %70 = mul nsw i32 %69, %43*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186))
begin
nv10CalcArbitration_67_70_reg <= nv10CalcArbitration_67_70;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67_70_reg"); $finish; end
end
/* nv10CalcArbitration: %67*/
/*   %70 = mul nsw i32 %69, %43*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186))
begin
nv10CalcArbitration_67_70_reg <= nv10CalcArbitration_67_70;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67_70_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_67_71 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %71 = sdiv i32 %70, 1000000*/
nv10CalcArbitration_67_71_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %72 = add nsw i32 %71, 1*/
begin
nv10CalcArbitration_67_72 = (nv10CalcArbitration_67_71 + 32'd1);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %72 = add nsw i32 %71, 1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218))
begin
nv10CalcArbitration_67_72_reg <= nv10CalcArbitration_67_72;
if (reset == 1'b0 && ^(nv10CalcArbitration_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67_72_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %.mux = select i1 %.not15, i32 %72, i32 4095*/
begin
nv10CalcArbitration_67__mux = (nv10CalcArbitration_32__not15_reg ? nv10CalcArbitration_67_72 : 32'd4095);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %.mux = select i1 %.not15, i32 %72, i32 4095*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218))
begin
nv10CalcArbitration_67__mux_reg <= nv10CalcArbitration_67__mux;
if (reset == 1'b0 && ^(nv10CalcArbitration_67__mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67__mux_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %67*/
/*   %.mux.mux = select i1 %brmerge, i32 %.mux, i32 %72*/
begin
nv10CalcArbitration_67__mux_mux = (nv10CalcArbitration_32_brmerge_reg ? nv10CalcArbitration_67__mux : nv10CalcArbitration_67_72);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %.mux.mux = select i1 %brmerge, i32 %.mux, i32 %72*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218))
begin
nv10CalcArbitration_67__mux_mux_reg <= nv10CalcArbitration_67__mux_mux;
if (reset == 1'b0 && ^(nv10CalcArbitration_67__mux_mux) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_67__mux_mux_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_cbs_1 = nv10CalcArbitration__thread13_cbs_03_reg;
end
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
else if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd1)))
begin
nv10CalcArbitration_74_cbs_1 = nv10CalcArbitration__thread13_cbs_03_reg;
end
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration_74_cbs_1 = 32'd512;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_cbs_1_reg <= nv10CalcArbitration_74_cbs_1;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_cbs_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_cbs_1_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd1)))
begin
nv10CalcArbitration_74_cbs_1_reg <= nv10CalcArbitration_74_cbs_1;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_cbs_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_cbs_1_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %cbs.1 = phi i32 [ %cbs.03, %58 ], [ 512, %73 ], [ %cbs.03, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_cbs_1_reg <= nv10CalcArbitration_74_cbs_1;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_cbs_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_cbs_1_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_clwm_0 = nv10CalcArbitration_58_66;
end
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
else if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd1)))
begin
nv10CalcArbitration_74_clwm_0 = nv10CalcArbitration_67__mux_mux;
end
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
else /* if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd0))) */
begin
nv10CalcArbitration_74_clwm_0 = 32'd1024;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_152) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_clwm_0_reg <= nv10CalcArbitration_74_clwm_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_clwm_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_clwm_0_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_218) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_32_brmerge17_reg == 1'd1)))
begin
nv10CalcArbitration_74_clwm_0_reg <= nv10CalcArbitration_74_clwm_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_clwm_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_clwm_0_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %clwm.0 = phi i32 [ %66, %58 ], [ 1024, %73 ], [ %.mux.mux, %67 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_73_219) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration_74_clwm_0_reg <= nv10CalcArbitration_74_clwm_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_clwm_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_clwm_0_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_74_75 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %75 = sdiv i32 %clwm.0, 8*/
nv10CalcArbitration_74_75_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %76 = shl nsw i32 %75, 3*/
begin
nv10CalcArbitration_74_76 = (nv10CalcArbitration_74_75 <<< (32'd3 % 32));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %76 = shl nsw i32 %75, 3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74_76_reg <= nv10CalcArbitration_74_76;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_76_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %77 = add nsw i32 %clwm.0, 8*/
begin
nv10CalcArbitration_74_77 = (nv10CalcArbitration_74_clwm_0_reg + 32'd8);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %77 = add nsw i32 %clwm.0, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220))
begin
nv10CalcArbitration_74_77_reg <= nv10CalcArbitration_74_77;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_77_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %78 = icmp slt i32 %76, %clwm.0*/
begin
nv10CalcArbitration_74_78 = ($signed(nv10CalcArbitration_74_76) < $signed(nv10CalcArbitration_74_clwm_0_reg));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %78 = icmp slt i32 %76, %clwm.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74_78_reg <= nv10CalcArbitration_74_78;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_78_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %.clwm.0 = select i1 %78, i32 %77, i32 %clwm.0*/
begin
nv10CalcArbitration_74__clwm_0 = (nv10CalcArbitration_74_78 ? nv10CalcArbitration_74_77_reg : nv10CalcArbitration_74_clwm_0_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %.clwm.0 = select i1 %78, i32 %77, i32 %clwm.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74__clwm_0_reg <= nv10CalcArbitration_74__clwm_0;
if (reset == 1'b0 && ^(nv10CalcArbitration_74__clwm_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74__clwm_0_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %79 = add i32 %cbs.1, -1024*/
begin
nv10CalcArbitration_74_79 = (nv10CalcArbitration_74_cbs_1_reg + -32'd1024);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %79 = add i32 %cbs.1, -1024*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220))
begin
nv10CalcArbitration_74_79_reg <= nv10CalcArbitration_74_79;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_79_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %80 = add i32 %79, %.clwm.0*/
begin
nv10CalcArbitration_74_80 = (nv10CalcArbitration_74_79_reg + nv10CalcArbitration_74__clwm_0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %80 = add i32 %79, %.clwm.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74_80_reg <= nv10CalcArbitration_74_80;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_80_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %81 = add i32 %57, %39*/
begin
nv10CalcArbitration_74_81 = (nv10CalcArbitration__thread13_57_reg + nv10CalcArbitration_32_39_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %81 = add i32 %57, %39*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220))
begin
nv10CalcArbitration_74_81_reg <= nv10CalcArbitration_74_81;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_81_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %82 = add i32 %81, %40*/
begin
nv10CalcArbitration_74_82 = (nv10CalcArbitration_74_81 + nv10CalcArbitration_32_40_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %82 = add i32 %81, %40*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220))
begin
nv10CalcArbitration_74_82_reg <= nv10CalcArbitration_74_82;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_82_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %83 = add i32 %82, %41*/
begin
nv10CalcArbitration_74_83 = (nv10CalcArbitration_74_82 + nv10CalcArbitration_32_41_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %83 = add i32 %82, %41*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_220))
begin
nv10CalcArbitration_74_83_reg <= nv10CalcArbitration_74_83;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_83_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_74_84 = nv10CalcArbitration_74_84_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %84 = mul nsw i32 %83, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221))
begin
nv10CalcArbitration_74_84_reg <= nv10CalcArbitration_74_84;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_84_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %84 = mul nsw i32 %83, %3*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221))
begin
nv10CalcArbitration_74_84_reg <= nv10CalcArbitration_74_84;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_84_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_74_85 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %85 = sdiv i32 %84, 1000000*/
nv10CalcArbitration_74_85_reg = nv10CalcArbitration__thread13_57_reg;
end
always @(*) begin
nv10CalcArbitration_74_86 = nv10CalcArbitration_74_86_stage0_reg;
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %86 = mul nsw i32 %85, %15*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74_86_reg <= nv10CalcArbitration_74_86;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_86_reg"); $finish; end
end
/* nv10CalcArbitration: %74*/
/*   %86 = mul nsw i32 %85, %15*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_74_86_reg <= nv10CalcArbitration_74_86;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_86_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_74_87 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %87 = sdiv i32 %86, 8*/
nv10CalcArbitration_74_87_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %88 = icmp slt i32 %87, %80*/
begin
nv10CalcArbitration_74_88 = ($signed(nv10CalcArbitration_74_87) < $signed(nv10CalcArbitration_74_80_reg));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %88 = icmp slt i32 %87, %80*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286))
begin
nv10CalcArbitration_74_88_reg <= nv10CalcArbitration_74_88;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_88_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %89 = icmp sgt i32 %80, 0*/
begin
nv10CalcArbitration_74_89 = ($signed(nv10CalcArbitration_74_80_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %89 = icmp sgt i32 %80, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_255))
begin
nv10CalcArbitration_74_89_reg <= nv10CalcArbitration_74_89;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_89_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %74*/
/*   %or.cond = and i1 %88, %89*/
begin
nv10CalcArbitration_74_or_cond = (nv10CalcArbitration_74_88 & nv10CalcArbitration_74_89_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %or.cond = and i1 %88, %89*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_286))
begin
nv10CalcArbitration_74_or_cond_reg <= nv10CalcArbitration_74_or_cond;
if (reset == 1'b0 && ^(nv10CalcArbitration_74_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_74_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %90*/
/*   %91 = icmp eq i32 %min_mclk_extra.14, 0*/
begin
nv10CalcArbitration_90_91 = (nv10CalcArbitration__thread13_min_mclk_extra_14_reg == 32'd0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %90*/
/*   %91 = icmp eq i32 %min_mclk_extra.14, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_90_287))
begin
nv10CalcArbitration_90_91_reg <= nv10CalcArbitration_90_91;
if (reset == 1'b0 && ^(nv10CalcArbitration_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_90_91_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %92*/
/*   %93 = icmp slt i32 %cbs.1, 33*/
begin
nv10CalcArbitration_92_93 = ($signed(nv10CalcArbitration_74_cbs_1_reg) < $signed(32'd33));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %92*/
/*   %93 = icmp slt i32 %cbs.1, 33*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288))
begin
nv10CalcArbitration_92_93_reg <= nv10CalcArbitration_92_93;
if (reset == 1'b0 && ^(nv10CalcArbitration_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_92_93_reg"); $finish; end
end
end
always @(*) begin
nv10CalcArbitration_94_95 = nv10CalcArbitration_signed_divide_32_0;
end
always @(*) begin
/* nv10CalcArbitration: %94*/
/*   %95 = sdiv i32 %cbs.1, 2*/
nv10CalcArbitration_94_95_reg = nv10CalcArbitration_58_59_reg;
end
always @(*) begin
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be = 32'd0;
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
else if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be = nv10CalcArbitration_96_97;
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
else /* if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd0))) */
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be = nv10CalcArbitration_100_min_mclk_extra_1_;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg <= nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg <= nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %min_mclk_extra.14.be = phi i32 [ 0, %94 ], [ %97, %96 ], [ %min_mclk_extra.1., %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg <= nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_min_mclk_extra_14_be_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be = nv10CalcArbitration_94_95;
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
else if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be = nv10CalcArbitration_74_cbs_1_reg;
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
else /* if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd0))) */
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be = nv10CalcArbitration_74_cbs_1_reg;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_321) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be_reg <= nv10CalcArbitration__thread13_backedge_cbs_03_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_cbs_03_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_cbs_03_be_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
if (((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323) & (memory_controller_waitrequest == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be_reg <= nv10CalcArbitration__thread13_backedge_cbs_03_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_cbs_03_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_cbs_03_be_reg"); $finish; end
end
/* nv10CalcArbitration: %.thread13.backedge*/
/*   %cbs.03.be = phi i32 [ %95, %94 ], [ %cbs.1, %96 ], [ %cbs.1, %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd0)))
begin
nv10CalcArbitration__thread13_backedge_cbs_03_be_reg <= nv10CalcArbitration__thread13_backedge_cbs_03_be;
if (reset == 1'b0 && ^(nv10CalcArbitration__thread13_backedge_cbs_03_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration__thread13_backedge_cbs_03_be_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %96*/
/*   %97 = add nsw i32 %min_mclk_extra.14, -1*/
begin
nv10CalcArbitration_96_97 = (nv10CalcArbitration__thread13_min_mclk_extra_14_reg + -32'd1);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %96*/
/*   %97 = add nsw i32 %min_mclk_extra.14, -1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_96_323))
begin
nv10CalcArbitration_96_97_reg <= nv10CalcArbitration_96_97;
if (reset == 1'b0 && ^(nv10CalcArbitration_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_96_97_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %98*/
/*   %99 = icmp sgt i32 %.clwm.0, 1023*/
begin
nv10CalcArbitration_98_99 = ($signed(nv10CalcArbitration_74__clwm_0_reg) > $signed(32'd1023));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %98*/
/*   %99 = icmp sgt i32 %.clwm.0, 1023*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324))
begin
nv10CalcArbitration_98_99_reg <= nv10CalcArbitration_98_99;
if (reset == 1'b0 && ^(nv10CalcArbitration_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_98_99_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %100*/
/*   %101 = icmp eq i32 %min_mclk_extra.14, 0*/
begin
nv10CalcArbitration_100_101 = (nv10CalcArbitration__thread13_min_mclk_extra_14_reg == 32'd0);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %100*/
/*   %101 = icmp eq i32 %min_mclk_extra.14, 0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_325))
begin
nv10CalcArbitration_100_101_reg <= nv10CalcArbitration_100_101;
if (reset == 1'b0 && ^(nv10CalcArbitration_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_100_101_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %100*/
/*   %not. = xor i1 %101, true*/
begin
nv10CalcArbitration_100_not_ = (nv10CalcArbitration_100_101_reg ^ 1'd1);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %100*/
/*   %not. = xor i1 %101, true*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_326))
begin
nv10CalcArbitration_100_not__reg <= nv10CalcArbitration_100_not_;
if (reset == 1'b0 && ^(nv10CalcArbitration_100_not_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_100_not__reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %100*/
/*   %102 = sext i1 %not. to i32*/
begin
nv10CalcArbitration_100_102 = $signed(nv10CalcArbitration_100_not_);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %100*/
/*   %102 = sext i1 %not. to i32*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_326))
begin
nv10CalcArbitration_100_102_reg <= nv10CalcArbitration_100_102;
if (reset == 1'b0 && ^(nv10CalcArbitration_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_100_102_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %100*/
/*   %min_mclk_extra.1. = add i32 %102, %min_mclk_extra.14*/
begin
nv10CalcArbitration_100_min_mclk_extra_1_ = (nv10CalcArbitration_100_102_reg + nv10CalcArbitration__thread13_min_mclk_extra_14_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %100*/
/*   %min_mclk_extra.1. = add i32 %102, %min_mclk_extra.14*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327))
begin
nv10CalcArbitration_100_min_mclk_extra_1__reg <= nv10CalcArbitration_100_min_mclk_extra_1_;
if (reset == 1'b0 && ^(nv10CalcArbitration_100_min_mclk_extra_1_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_100_min_mclk_extra_1__reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_92_93 == 1'd1)))
begin
nv10CalcArbitration_103__ph = 32'd0;
end
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
else if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_98_99 == 1'd0)))
begin
nv10CalcArbitration_103__ph = 32'd1;
end
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
else /* if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd1))) */
begin
nv10CalcArbitration_103__ph = 32'd0;
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_92_288) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_92_93 == 1'd1)))
begin
nv10CalcArbitration_103__ph_reg <= nv10CalcArbitration_103__ph;
if (reset == 1'b0 && ^(nv10CalcArbitration_103__ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103__ph_reg"); $finish; end
end
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_98_324) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_98_99 == 1'd0)))
begin
nv10CalcArbitration_103__ph_reg <= nv10CalcArbitration_103__ph;
if (reset == 1'b0 && ^(nv10CalcArbitration_103__ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103__ph_reg"); $finish; end
end
/* nv10CalcArbitration: %103*/
/*   %.ph = phi i32 [ 1, %98 ], [ 0, %92 ], [ 0, %100 ]*/
if ((((cur_state == LEGUP_F_nv10CalcArbitration_BB_100_327) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_100_101_reg == 1'd1)))
begin
nv10CalcArbitration_103__ph_reg <= nv10CalcArbitration_103__ph;
if (reset == 1'b0 && ^(nv10CalcArbitration_103__ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103__ph_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %104 = sub nsw i32 1024, %cbs.1*/
begin
nv10CalcArbitration_103_104 = (32'd1024 - nv10CalcArbitration_74_cbs_1_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %104 = sub nsw i32 1024, %cbs.1*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
nv10CalcArbitration_103_104_reg <= nv10CalcArbitration_103_104;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_104_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %105 = add nsw i32 %104, 8*/
begin
nv10CalcArbitration_103_105 = (nv10CalcArbitration_103_104 + 32'd8);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %105 = add nsw i32 %104, 8*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
nv10CalcArbitration_103_105_reg <= nv10CalcArbitration_103_105;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_105_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %106 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 2*/
begin
nv10CalcArbitration_103_106 = (arg_fifo + 8);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %106 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 2*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
nv10CalcArbitration_103_106_reg <= nv10CalcArbitration_103_106;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_106_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %107 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 4*/
begin
nv10CalcArbitration_103_107 = (arg_fifo + 16);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %107 = getelementptr inbounds %struct.TYPE_6__* %fifo, i32 0, i32 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
nv10CalcArbitration_103_107_reg <= nv10CalcArbitration_103_107;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_107_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %108 = icmp slt i32 %.clwm.0, %105*/
begin
nv10CalcArbitration_103_108 = ($signed(nv10CalcArbitration_74__clwm_0_reg) < $signed(nv10CalcArbitration_103_105));
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %108 = icmp slt i32 %.clwm.0, %105*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
nv10CalcArbitration_103_108_reg <= nv10CalcArbitration_103_108;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_108_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %103*/
/*   %clwm.2 = select i1 %108, i32 %105, i32 %.clwm.0*/
begin
nv10CalcArbitration_103_clwm_2 = (nv10CalcArbitration_103_108_reg ? nv10CalcArbitration_103_105_reg : nv10CalcArbitration_74__clwm_0_reg);
end
end
always @(posedge clk) begin
/* nv10CalcArbitration: %103*/
/*   %clwm.2 = select i1 %108, i32 %105, i32 %.clwm.0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
nv10CalcArbitration_103_clwm_2_reg <= nv10CalcArbitration_103_clwm_2;
if (reset == 1'b0 && ^(nv10CalcArbitration_103_clwm_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_103_clwm_2_reg"); $finish; end
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %40 = sdiv i32 9000000, %7*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = 32'd9000000;
end
/* nv10CalcArbitration: %32*/
/*   %41 = sdiv i32 4000000, %3*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = 32'd4000000;
end
/* nv10CalcArbitration: %32*/
/*   %43 = sdiv i32 %42, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_42_reg;
end
/* nv10CalcArbitration: %32*/
/*   %37 = sdiv i32 %36, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_18))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_36_reg;
end
/* nv10CalcArbitration: %32*/
/*   %39 = sdiv i32 %38, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_19))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_38_reg;
end
/* nv10CalcArbitration: %.thread13*/
/*   %57 = sdiv i32 %56, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration__thread13_56;
end
/* nv10CalcArbitration: %58*/
/*   %59 = sdiv i32 %44, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_86))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_44_reg;
end
/* nv10CalcArbitration: %58*/
/*   %60 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_87))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_46_reg;
end
/* nv10CalcArbitration: %58*/
/*   %65 = sdiv i32 %64, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_58_64;
end
/* nv10CalcArbitration: %67*/
/*   %68 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_153))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_32_46_reg;
end
/* nv10CalcArbitration: %67*/
/*   %71 = sdiv i32 %70, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_67_70;
end
/* nv10CalcArbitration: %74*/
/*   %85 = sdiv i32 %84, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_74_84;
end
/* nv10CalcArbitration: %74*/
/*   %75 = sdiv i32 %clwm.0, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_222))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_74_clwm_0_reg;
end
/* nv10CalcArbitration: %74*/
/*   %87 = sdiv i32 %86, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_74_86;
end
/* nv10CalcArbitration: %94*/
/*   %95 = sdiv i32 %cbs.1, 2*/
else /* if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_289)) */
begin
nv10CalcArbitration_signed_divide_32_0_op0 = nv10CalcArbitration_74_cbs_1_reg;
end
end
always @(*) begin
/* nv10CalcArbitration: %32*/
/*   %40 = sdiv i32 9000000, %7*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_15))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_7_reg;
end
/* nv10CalcArbitration: %32*/
/*   %41 = sdiv i32 4000000, %3*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_16))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_3_reg;
end
/* nv10CalcArbitration: %32*/
/*   %43 = sdiv i32 %42, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_17))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd8;
end
/* nv10CalcArbitration: %32*/
/*   %37 = sdiv i32 %36, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_18))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %32*/
/*   %39 = sdiv i32 %38, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_32_19))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %.thread13*/
/*   %57 = sdiv i32 %56, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB__thread13_53))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %58*/
/*   %59 = sdiv i32 %44, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_86))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %58*/
/*   %60 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_87))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %58*/
/*   %65 = sdiv i32 %64, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_58_120))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd1000000;
end
/* nv10CalcArbitration: %67*/
/*   %68 = sdiv i32 %46, %5*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_153))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = nv10CalcArbitration_0_5_reg;
end
/* nv10CalcArbitration: %67*/
/*   %71 = sdiv i32 %70, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_67_186))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd1000000;
end
/* nv10CalcArbitration: %74*/
/*   %85 = sdiv i32 %84, 1000000*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_221))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd1000000;
end
/* nv10CalcArbitration: %74*/
/*   %75 = sdiv i32 %clwm.0, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_222))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd8;
end
/* nv10CalcArbitration: %74*/
/*   %87 = sdiv i32 %86, 8*/
else if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_74_254))
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd8;
end
/* nv10CalcArbitration: %94*/
/*   %95 = sdiv i32 %cbs.1, 2*/
else /* if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_94_289)) */
begin
nv10CalcArbitration_signed_divide_32_0_op1 = 32'd2;
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration__thread13_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration__thread13_57_out = lpm_divide_nv10CalcArbitration__thread13_57_temp_out;
end
always @(*) begin
nv10CalcArbitration_signed_divide_32_0 = lpm_divide_nv10CalcArbitration__thread13_57_out;
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %36 = mul i32 %35, 1000000*/
if ((lpm_mult_nv10CalcArbitration_32_36_en == 1'd1))
begin
nv10CalcArbitration_32_36_stage0_reg <= (nv10CalcArbitration_32_35 * 32'd1000000);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %38 = mul i32 %.mclks.0, 1000000*/
if ((lpm_mult_nv10CalcArbitration_32_38_en == 1'd1))
begin
nv10CalcArbitration_32_38_stage0_reg <= (nv10CalcArbitration_32__mclks_0 * 32'd1000000);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_32_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %42 = mul nsw i32 %15, %3*/
if ((lpm_mult_nv10CalcArbitration_32_42_en == 1'd1))
begin
nv10CalcArbitration_32_42_stage0_reg <= (nv10CalcArbitration_0_15_reg * nv10CalcArbitration_0_3_reg);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %44 = mul i32 %9, 2000000*/
if ((lpm_mult_nv10CalcArbitration_32_44_en == 1'd1))
begin
nv10CalcArbitration_32_44_stage0_reg <= (nv10CalcArbitration_0_9_reg * 32'd2000000);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_45_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %45 = mul i32 %9, 1000000*/
if ((lpm_mult_nv10CalcArbitration_32_45_en == 1'd1))
begin
nv10CalcArbitration_32_45_stage0_reg <= (nv10CalcArbitration_0_9_reg * 32'd1000000);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_53_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %53 = mul i32 %7, 816*/
if ((lpm_mult_nv10CalcArbitration_32_53_en == 1'd1))
begin
nv10CalcArbitration_32_53_stage0_reg <= (nv10CalcArbitration_0_7_reg * 32'd816);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %54 = mul i32 %7, 784*/
if ((lpm_mult_nv10CalcArbitration_32_54_en == 1'd1))
begin
nv10CalcArbitration_32_54_stage0_reg <= (nv10CalcArbitration_0_7_reg * 32'd784);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_32_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_46_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %46 = mul i32 %45, %crtpagemiss.0*/
if ((lpm_mult_nv10CalcArbitration_32_46_en == 1'd1))
begin
nv10CalcArbitration_32_46_stage0_reg <= (nv10CalcArbitration_32_45 * nv10CalcArbitration_32_crtpagemiss_0_reg);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_32_43_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_32_37_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_32_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_32_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %32*/
/*   %52 = mul nsw i32 %43, 100*/
if ((lpm_mult_nv10CalcArbitration_32_52_en == 1'd1))
begin
nv10CalcArbitration_32_52_stage0_reg <= (nv10CalcArbitration_32_43 * 32'd100);
end
end
always @(*) begin
lpm_mult_nv10CalcArbitration__thread13_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %.thread13*/
/*   %56 = mul i32 %min_mclk_extra.14, 1000000*/
if ((lpm_mult_nv10CalcArbitration__thread13_56_en == 1'd1))
begin
nv10CalcArbitration__thread13_56_stage0_reg <= (nv10CalcArbitration__thread13_min_mclk_extra_14_reg * 32'd1000000);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_58_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_58_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_58_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %58*/
/*   %64 = mul nsw i32 %63, %43*/
if ((lpm_mult_nv10CalcArbitration_58_64_en == 1'd1))
begin
nv10CalcArbitration_58_64_stage0_reg <= (nv10CalcArbitration_58_63 * nv10CalcArbitration_32_43_reg);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_58_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_67_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_67_70_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %67*/
/*   %70 = mul nsw i32 %69, %43*/
if ((lpm_mult_nv10CalcArbitration_67_70_en == 1'd1))
begin
nv10CalcArbitration_67_70_stage0_reg <= (nv10CalcArbitration_67_69 * nv10CalcArbitration_32_43_reg);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_67_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_74_84_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %84 = mul nsw i32 %83, %3*/
if ((lpm_mult_nv10CalcArbitration_74_84_en == 1'd1))
begin
nv10CalcArbitration_74_84_stage0_reg <= (nv10CalcArbitration_74_83 * nv10CalcArbitration_0_3_reg);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_74_85_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_74_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_mult_nv10CalcArbitration_74_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* nv10CalcArbitration: %74*/
/*   %86 = mul nsw i32 %85, %15*/
if ((lpm_mult_nv10CalcArbitration_74_86_en == 1'd1))
begin
nv10CalcArbitration_74_86_stage0_reg <= (nv10CalcArbitration_74_85 * nv10CalcArbitration_0_15_reg);
end
end
always @(*) begin
lpm_divide_nv10CalcArbitration_74_87_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
lpm_divide_nv10CalcArbitration_94_95_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* nv10CalcArbitration: %103*/
/*   ret void*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_331))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 512, i32* %107, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %cbs.1, i32* %106, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_enable_a = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %.ph, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
memory_controller_address_a = nv10CalcArbitration_0_1;
end
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_address_a = nv10CalcArbitration_0_2_reg;
end
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_address_a = nv10CalcArbitration_0_6_reg;
end
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_address_a = nv10CalcArbitration_0_10_reg;
end
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_address_a = nv10CalcArbitration_0_14_reg;
end
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
memory_controller_address_a = nv10CalcArbitration_0_18_reg;
end
/* nv10CalcArbitration: %103*/
/*   store i32 512, i32* %107, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_address_a = nv10CalcArbitration_103_107;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %cbs.1, i32* %106, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_address_a = nv10CalcArbitration_103_106_reg;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %.ph, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330))
begin
memory_controller_address_a = nv10CalcArbitration_0_1_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* nv10CalcArbitration: %103*/
/*   store i32 512, i32* %107, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %cbs.1, i32* %106, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_write_enable_a = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %.ph, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
memory_controller_in_a = 32'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 512, i32* %107, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_in_a = 32'd512;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %cbs.1, i32* %106, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_in_a = nv10CalcArbitration_74_cbs_1_reg;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %.ph, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330))
begin
memory_controller_in_a = nv10CalcArbitration_103__ph_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   store i32 1, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %3 = load i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %103*/
/*   store i32 512, i32* %107, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %cbs.1, i32* %106, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_size_a = 2'd2;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %.ph, i32* %1, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_330))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_enable_b = 1'd1;
end
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 1024, i32* %49, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_enable_b = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %clwm.2, i32* %48, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_address_b = nv10CalcArbitration_0_4_reg;
end
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_address_b = nv10CalcArbitration_0_8_reg;
end
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_address_b = nv10CalcArbitration_0_12_reg;
end
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_address_b = nv10CalcArbitration_0_16_reg;
end
/* nv10CalcArbitration: %103*/
/*   store i32 1024, i32* %49, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_address_b = nv10CalcArbitration_32_49_reg;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %clwm.2, i32* %48, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_address_b = nv10CalcArbitration_32_48_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* nv10CalcArbitration: %103*/
/*   store i32 1024, i32* %49, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_write_enable_b = 1'd1;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %clwm.2, i32* %48, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* nv10CalcArbitration: %103*/
/*   store i32 1024, i32* %49, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_in_b = 32'd1024;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %clwm.2, i32* %48, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_in_b = nv10CalcArbitration_103_clwm_2;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* nv10CalcArbitration: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_4))
begin
memory_controller_size_b = 2'd2;
end
/* nv10CalcArbitration: %0*/
/*   %17 = load i32* %16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* nv10CalcArbitration: %103*/
/*   store i32 1024, i32* %49, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_328))
begin
memory_controller_size_b = 2'd2;
end
/* nv10CalcArbitration: %103*/
/*   store i32 %clwm.2, i32* %48, align 4*/
if ((cur_state == LEGUP_F_nv10CalcArbitration_BB_103_329))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  nv10CalcArbitration_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_arg_fifo;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_arg_arb;
wire  nv10CalcArbitration_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_memory_controller_address_a;
wire  nv10CalcArbitration_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv10CalcArbitration_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv10CalcArbitration_memory_controller_out_a;
wire [1:0] nv10CalcArbitration_memory_controller_size_a;
wire  nv10CalcArbitration_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] nv10CalcArbitration_memory_controller_address_b;
wire  nv10CalcArbitration_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv10CalcArbitration_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] nv10CalcArbitration_memory_controller_out_b;
wire [1:0] nv10CalcArbitration_memory_controller_size_b;
reg  nv10CalcArbitration_memory_controller_waitrequest;
wire  nv10CalcArbitration_finish;
reg  nv10CalcArbitration_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


nv10CalcArbitration nv10CalcArbitration_inst (
	.memory_controller_enable_a (nv10CalcArbitration_memory_controller_enable_a),
	.memory_controller_address_a (nv10CalcArbitration_memory_controller_address_a),
	.memory_controller_write_enable_a (nv10CalcArbitration_memory_controller_write_enable_a),
	.memory_controller_in_a (nv10CalcArbitration_memory_controller_in_a),
	.memory_controller_size_a (nv10CalcArbitration_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (nv10CalcArbitration_memory_controller_enable_b),
	.memory_controller_address_b (nv10CalcArbitration_memory_controller_address_b),
	.memory_controller_write_enable_b (nv10CalcArbitration_memory_controller_write_enable_b),
	.memory_controller_in_b (nv10CalcArbitration_memory_controller_in_b),
	.memory_controller_size_b (nv10CalcArbitration_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (nv10CalcArbitration_start),
	.finish (nv10CalcArbitration_finish),
	.arg_fifo (nv10CalcArbitration_arg_fifo),
	.arg_arb (nv10CalcArbitration_arg_arb)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (nv10CalcArbitration_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv10CalcArbitration_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_start"); $finish; end
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
nv10CalcArbitration_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv10CalcArbitration_arg_fifo <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_arg_fifo"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
nv10CalcArbitration_arg_arb <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to nv10CalcArbitration_arg_arb"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
begin
nv10CalcArbitration_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
begin
nv10CalcArbitration_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
nv10CalcArbitration_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
nv10CalcArbitration_finish_final = nv10CalcArbitration_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = nv10CalcArbitration_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = nv10CalcArbitration_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv10CalcArbitration_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv10CalcArbitration_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = nv10CalcArbitration_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = nv10CalcArbitration_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv10CalcArbitration_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv10CalcArbitration_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = nv10CalcArbitration_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = nv10CalcArbitration_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = nv10CalcArbitration_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = nv10CalcArbitration_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv10CalcArbitration_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = nv10CalcArbitration_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = nv10CalcArbitration_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = nv10CalcArbitration_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv10CalcArbitration_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = nv10CalcArbitration_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = nv10CalcArbitration_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @nv10CalcArbitration(%struct.TYPE_6__* undef, %struct.TYPE_5__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = nv10CalcArbitration_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
