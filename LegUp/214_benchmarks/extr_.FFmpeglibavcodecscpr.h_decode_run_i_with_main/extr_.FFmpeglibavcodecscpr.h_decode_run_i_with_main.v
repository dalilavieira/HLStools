//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:38 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module decode_run_i
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_avctx,
	arg_ptype,
	arg_run,
	arg_px,
	arg_py,
	arg_clr,
	arg_dst,
	arg_linesize,
	arg_plx,
	arg_ply,
	arg_backstep,
	arg_off,
	arg_cx,
	arg_cx1
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_decode_run_i_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_decode_run_i_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_decode_run_i_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_decode_run_i_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_decode_run_i_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_decode_run_i_BB_8_6 = 7'd6;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader50_7 = 7'd7;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader40_8 = 7'd8;
parameter [6:0] LEGUP_F_decode_run_i_BB_11_9 = 7'd9;
parameter [6:0] LEGUP_F_decode_run_i_BB_13_10 = 7'd10;
parameter [6:0] LEGUP_F_decode_run_i_BB_13_11 = 7'd11;
parameter [6:0] LEGUP_F_decode_run_i_BB_13_12 = 7'd12;
parameter [6:0] LEGUP_F_decode_run_i_BB_13_13 = 7'd13;
parameter [6:0] LEGUP_F_decode_run_i_BB_13_14 = 7'd14;
parameter [6:0] LEGUP_F_decode_run_i_BB_16_15 = 7'd15;
parameter [6:0] LEGUP_F_decode_run_i_BB_16_16 = 7'd16;
parameter [6:0] LEGUP_F_decode_run_i_BB_16_17 = 7'd17;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer52_18 = 7'd18;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer52_19 = 7'd19;
parameter [6:0] LEGUP_F_decode_run_i_BB_20_20 = 7'd20;
parameter [6:0] LEGUP_F_decode_run_i_BB_20_21 = 7'd21;
parameter [6:0] LEGUP_F_decode_run_i_BB_20_22 = 7'd22;
parameter [6:0] LEGUP_F_decode_run_i_BB_20_23 = 7'd23;
parameter [6:0] LEGUP_F_decode_run_i_BB_20_24 = 7'd24;
parameter [6:0] LEGUP_F_decode_run_i_BB_26_25 = 7'd25;
parameter [6:0] LEGUP_F_decode_run_i_BB_26_26 = 7'd26;
parameter [6:0] LEGUP_F_decode_run_i_BB_26_27 = 7'd27;
parameter [6:0] LEGUP_F_decode_run_i_BB_26_28 = 7'd28;
parameter [6:0] LEGUP_F_decode_run_i_BB_26_29 = 7'd29;
parameter [6:0] LEGUP_F_decode_run_i_BB_29_30 = 7'd30;
parameter [6:0] LEGUP_F_decode_run_i_BB_29_31 = 7'd31;
parameter [6:0] LEGUP_F_decode_run_i_BB_29_32 = 7'd32;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer42_33 = 7'd33;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer42_34 = 7'd34;
parameter [6:0] LEGUP_F_decode_run_i_BB_33_35 = 7'd35;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader30_36 = 7'd36;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader30_37 = 7'd37;
parameter [6:0] LEGUP_F_decode_run_i_BB_36_38 = 7'd38;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_39 = 7'd39;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_40 = 7'd40;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_41 = 7'd41;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_42 = 7'd42;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_43 = 7'd43;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_44 = 7'd44;
parameter [6:0] LEGUP_F_decode_run_i_BB_38_45 = 7'd45;
parameter [6:0] LEGUP_F_decode_run_i_BB_42_46 = 7'd46;
parameter [6:0] LEGUP_F_decode_run_i_BB_42_47 = 7'd47;
parameter [6:0] LEGUP_F_decode_run_i_BB_42_48 = 7'd48;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer32_49 = 7'd49;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer32_50 = 7'd50;
parameter [6:0] LEGUP_F_decode_run_i_BB_46_51 = 7'd51;
parameter [6:0] LEGUP_F_decode_run_i_BB_48_52 = 7'd52;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader20_53 = 7'd53;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader20_54 = 7'd54;
parameter [6:0] LEGUP_F_decode_run_i_BB_53_55 = 7'd55;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_56 = 7'd56;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_57 = 7'd57;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_58 = 7'd58;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_59 = 7'd59;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_60 = 7'd60;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_61 = 7'd61;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_62 = 7'd62;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_63 = 7'd63;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_64 = 7'd64;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_65 = 7'd65;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_66 = 7'd66;
parameter [6:0] LEGUP_F_decode_run_i_BB_55_67 = 7'd67;
parameter [6:0] LEGUP_F_decode_run_i_BB_92_68 = 7'd68;
parameter [6:0] LEGUP_F_decode_run_i_BB_92_69 = 7'd69;
parameter [6:0] LEGUP_F_decode_run_i_BB_92_70 = 7'd70;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer22_71 = 7'd71;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer22_72 = 7'd72;
parameter [6:0] LEGUP_F_decode_run_i_BB_96_73 = 7'd73;
parameter [6:0] LEGUP_F_decode_run_i_BB_98_74 = 7'd74;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader_75 = 7'd75;
parameter [6:0] LEGUP_F_decode_run_i_BB__preheader_76 = 7'd76;
parameter [6:0] LEGUP_F_decode_run_i_BB_102_77 = 7'd77;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_78 = 7'd78;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_79 = 7'd79;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_80 = 7'd80;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_81 = 7'd81;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_82 = 7'd82;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_83 = 7'd83;
parameter [6:0] LEGUP_F_decode_run_i_BB_104_84 = 7'd84;
parameter [6:0] LEGUP_F_decode_run_i_BB_110_85 = 7'd85;
parameter [6:0] LEGUP_F_decode_run_i_BB_110_86 = 7'd86;
parameter [6:0] LEGUP_F_decode_run_i_BB_110_87 = 7'd87;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer_88 = 7'd88;
parameter [6:0] LEGUP_F_decode_run_i_BB__outer_89 = 7'd89;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_loopexit_90 = 7'd90;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91 = 7'd91;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92 = 7'd92;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93 = 7'd93;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94 = 7'd94;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_95 = 7'd95;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_96 = 7'd96;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_97 = 7'd97;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_98 = 7'd98;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_99 = 7'd99;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_100 = 7'd100;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit_101 = 7'd101;
parameter [6:0] LEGUP_F_decode_run_i_BB_117_102 = 7'd102;
parameter [6:0] LEGUP_F_decode_run_i_BB_117_103 = 7'd103;
parameter [6:0] LEGUP_F_decode_run_i_BB_121_104 = 7'd104;
parameter [6:0] LEGUP_F_decode_run_i_BB_121_105 = 7'd105;
parameter [6:0] LEGUP_F_decode_run_i_BB_125_106 = 7'd106;
parameter [6:0] LEGUP_F_decode_run_i_BB_125_107 = 7'd107;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108 = 7'd108;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109 = 7'd109;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110 = 7'd110;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111 = 7'd111;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112 = 7'd112;
parameter [6:0] LEGUP_F_decode_run_i_BB__loopexit1_113 = 7'd113;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_avctx;
input [31:0] arg_ptype;
input [31:0] arg_run;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_px;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_py;
input [31:0] arg_clr;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dst;
input [31:0] arg_linesize;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_plx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ply;
input [31:0] arg_backstep;
input [31:0] arg_off;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_cx;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_cx1;
reg [6:0] cur_state;
reg [31:0] decode_run_i_0_1;
reg [31:0] decode_run_i_0_1_reg;
reg [31:0] decode_run_i_0_2;
reg [31:0] decode_run_i_0_2_reg;
reg [31:0] decode_run_i_0_3;
reg [31:0] decode_run_i_0_3_reg;
reg [31:0] decode_run_i_0_4;
reg [31:0] decode_run_i_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_0_5_reg;
reg [31:0] decode_run_i_0_6;
reg [31:0] decode_run_i_0_6_reg;
reg  decode_run_i_0_7;
reg  decode_run_i_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader50_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader50_9_reg;
reg [31:0] decode_run_i__preheader50_tmp255;
reg [31:0] decode_run_i__preheader50_tmp255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader40_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader40_10_reg;
reg [31:0] decode_run_i__preheader40_tmp225;
reg [31:0] decode_run_i__preheader40_tmp225_reg;
reg [31:0] decode_run_i_11_indvar232;
reg [31:0] decode_run_i_11_indvar232_reg;
reg [31:0] decode_run_i_11_lx_0;
reg [31:0] decode_run_i_11_lx_0_reg;
reg [31:0] decode_run_i_11_ly_0;
reg [31:0] decode_run_i_11_ly_0_reg;
reg [31:0] decode_run_i_11_x_0;
reg [31:0] decode_run_i_11_x_0_reg;
reg [31:0] decode_run_i_11__01;
reg [31:0] decode_run_i_11__01_reg;
reg  decode_run_i_11_12;
reg  decode_run_i_11_12_reg;
reg [31:0] decode_run_i_13_tmp243;
reg [31:0] decode_run_i_13_tmp243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_13_scevgep244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_13_scevgep244_reg;
reg [31:0] decode_run_i_13_tmp236;
reg [31:0] decode_run_i_13_tmp236_reg;
reg [31:0] decode_run_i_13_14;
reg [31:0] decode_run_i_13_14_reg;
reg  decode_run_i_13_15;
reg  decode_run_i_13_15_reg;
reg [31:0] decode_run_i_13_indvar_next233;
reg [31:0] decode_run_i_13_indvar_next233_reg;
reg [31:0] decode_run_i_16_tmp247;
reg [31:0] decode_run_i_16_tmp247_reg;
reg [31:0] decode_run_i_16_17;
reg [31:0] decode_run_i_16_17_reg;
reg  decode_run_i_16_18;
reg  decode_run_i_16_18_reg;
reg  decode_run_i_16_19;
reg  decode_run_i_16_19_reg;
reg  decode_run_i_16_or_cond;
reg  decode_run_i_16_or_cond_reg;
reg [31:0] decode_run_i_16_indvar_next238;
reg [31:0] decode_run_i_16_indvar_next238_reg;
reg [31:0] decode_run_i__outer52_indvar237;
reg [31:0] decode_run_i__outer52_indvar237_reg;
reg [31:0] decode_run_i__outer52_x_0_ph;
reg [31:0] decode_run_i__outer52_x_0_ph_reg;
reg [31:0] decode_run_i__outer52__01_ph;
reg [31:0] decode_run_i__outer52__01_ph_reg;
reg [31:0] decode_run_i__outer52_lx_0_ph;
reg [31:0] decode_run_i__outer52_lx_0_ph_reg;
reg [31:0] decode_run_i__outer52_ly_0_ph;
reg [31:0] decode_run_i__outer52_ly_0_ph_reg;
reg [31:0] decode_run_i__outer52_tmp240263;
reg [31:0] decode_run_i__outer52_tmp240263_reg;
reg [31:0] decode_run_i__outer52_tmp251;
reg [31:0] decode_run_i__outer52_tmp251_reg;
reg [31:0] decode_run_i__outer52_tmp256;
reg [31:0] decode_run_i__outer52_tmp256_reg;
reg [31:0] decode_run_i__outer52_tmp235;
reg [31:0] decode_run_i__outer52_tmp235_reg;
reg [31:0] decode_run_i__outer52_tmp246;
reg [31:0] decode_run_i__outer52_tmp246_reg;
reg [31:0] decode_run_i__outer52_tmp252;
reg [31:0] decode_run_i__outer52_tmp252_reg;
reg [31:0] decode_run_i_20_indvar202;
reg [31:0] decode_run_i_20_indvar202_reg;
reg [31:0] decode_run_i_20_lx_1;
reg [31:0] decode_run_i_20_lx_1_reg;
reg [31:0] decode_run_i_20_ly_1;
reg [31:0] decode_run_i_20_ly_1_reg;
reg [31:0] decode_run_i_20_x_1;
reg [31:0] decode_run_i_20_x_1_reg;
reg [31:0] decode_run_i_20__1;
reg [31:0] decode_run_i_20__1_reg;
reg  decode_run_i_20_21;
reg  decode_run_i_20_21_reg;
reg [31:0] decode_run_i_20_22;
reg [31:0] decode_run_i_20_22_reg;
reg [31:0] decode_run_i_20_23;
reg [31:0] decode_run_i_20_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_20_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_20_24_reg;
reg [31:0] decode_run_i_20_25;
reg [31:0] decode_run_i_20_25_reg;
reg [31:0] decode_run_i_26_tmp213;
reg [31:0] decode_run_i_26_tmp213_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_26_scevgep214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_26_scevgep214_reg;
reg [31:0] decode_run_i_26_tmp206;
reg [31:0] decode_run_i_26_tmp206_reg;
reg [31:0] decode_run_i_26_27;
reg [31:0] decode_run_i_26_27_reg;
reg  decode_run_i_26_28;
reg  decode_run_i_26_28_reg;
reg [31:0] decode_run_i_26_indvar_next203;
reg [31:0] decode_run_i_26_indvar_next203_reg;
reg [31:0] decode_run_i_29_tmp217;
reg [31:0] decode_run_i_29_tmp217_reg;
reg [31:0] decode_run_i_29_30;
reg [31:0] decode_run_i_29_30_reg;
reg  decode_run_i_29_31;
reg  decode_run_i_29_31_reg;
reg  decode_run_i_29_32;
reg  decode_run_i_29_32_reg;
reg  decode_run_i_29_or_cond6;
reg  decode_run_i_29_or_cond6_reg;
reg [31:0] decode_run_i_29_indvar_next208;
reg [31:0] decode_run_i_29_indvar_next208_reg;
reg [31:0] decode_run_i__outer42_indvar207;
reg [31:0] decode_run_i__outer42_indvar207_reg;
reg [31:0] decode_run_i__outer42_x_1_ph;
reg [31:0] decode_run_i__outer42_x_1_ph_reg;
reg [31:0] decode_run_i__outer42__1_ph;
reg [31:0] decode_run_i__outer42__1_ph_reg;
reg [31:0] decode_run_i__outer42_lx_1_ph;
reg [31:0] decode_run_i__outer42_lx_1_ph_reg;
reg [31:0] decode_run_i__outer42_ly_1_ph;
reg [31:0] decode_run_i__outer42_ly_1_ph_reg;
reg [31:0] decode_run_i__outer42_tmp210262;
reg [31:0] decode_run_i__outer42_tmp210262_reg;
reg [31:0] decode_run_i__outer42_tmp221;
reg [31:0] decode_run_i__outer42_tmp221_reg;
reg [31:0] decode_run_i__outer42_tmp226;
reg [31:0] decode_run_i__outer42_tmp226_reg;
reg [31:0] decode_run_i__outer42_tmp205;
reg [31:0] decode_run_i__outer42_tmp205_reg;
reg [31:0] decode_run_i__outer42_tmp216;
reg [31:0] decode_run_i__outer42_tmp216_reg;
reg [31:0] decode_run_i__outer42_tmp222;
reg [31:0] decode_run_i__outer42_tmp222_reg;
reg  decode_run_i_33_34;
reg  decode_run_i_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader30_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader30_35_reg;
reg [31:0] decode_run_i__preheader30_tmp169;
reg [31:0] decode_run_i__preheader30_tmp169_reg;
reg [31:0] decode_run_i__preheader30_tmp170;
reg [31:0] decode_run_i__preheader30_tmp170_reg;
reg [31:0] decode_run_i__preheader30_tmp171;
reg [31:0] decode_run_i__preheader30_tmp171_reg;
reg [31:0] decode_run_i__preheader30_tmp193;
reg [31:0] decode_run_i__preheader30_tmp193_reg;
reg [31:0] decode_run_i_36_indvar161;
reg [31:0] decode_run_i_36_indvar161_reg;
reg [31:0] decode_run_i_36__02;
reg [31:0] decode_run_i_36__02_reg;
reg [31:0] decode_run_i_36_lx_2;
reg [31:0] decode_run_i_36_lx_2_reg;
reg [31:0] decode_run_i_36_ly_2;
reg [31:0] decode_run_i_36_ly_2_reg;
reg [31:0] decode_run_i_36_x_2;
reg [31:0] decode_run_i_36_x_2_reg;
reg [31:0] decode_run_i_36__2;
reg [31:0] decode_run_i_36__2_reg;
reg  decode_run_i_36_37;
reg  decode_run_i_36_37_reg;
reg [31:0] decode_run_i_38_tmp174;
reg [31:0] decode_run_i_38_tmp174_reg;
reg [31:0] decode_run_i_38_tmp178;
reg [31:0] decode_run_i_38_tmp178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_38_scevgep179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_38_scevgep179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_38_scevgep175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_38_scevgep175_reg;
reg [31:0] decode_run_i_38_tmp165;
reg [31:0] decode_run_i_38_tmp165_reg;
reg [31:0] decode_run_i_38_39;
reg [31:0] decode_run_i_38_39_reg;
reg [31:0] decode_run_i_38_40;
reg [31:0] decode_run_i_38_40_reg;
reg  decode_run_i_38_41;
reg  decode_run_i_38_41_reg;
reg [31:0] decode_run_i_38_indvar_next162;
reg [31:0] decode_run_i_38_indvar_next162_reg;
reg [31:0] decode_run_i_42_tmp182;
reg [31:0] decode_run_i_42_tmp182_reg;
reg [31:0] decode_run_i_42_43;
reg [31:0] decode_run_i_42_43_reg;
reg  decode_run_i_42_44;
reg  decode_run_i_42_44_reg;
reg  decode_run_i_42_45;
reg  decode_run_i_42_45_reg;
reg  decode_run_i_42_or_cond7;
reg  decode_run_i_42_or_cond7_reg;
reg [31:0] decode_run_i_42_indvar_next167;
reg [31:0] decode_run_i_42_indvar_next167_reg;
reg [31:0] decode_run_i__outer32_indvar166;
reg [31:0] decode_run_i__outer32_indvar166_reg;
reg [31:0] decode_run_i__outer32__02_ph;
reg [31:0] decode_run_i__outer32__02_ph_reg;
reg [31:0] decode_run_i__outer32_x_2_ph;
reg [31:0] decode_run_i__outer32_x_2_ph_reg;
reg [31:0] decode_run_i__outer32__2_ph;
reg [31:0] decode_run_i__outer32__2_ph_reg;
reg [31:0] decode_run_i__outer32_lx_2_ph;
reg [31:0] decode_run_i__outer32_lx_2_ph_reg;
reg [31:0] decode_run_i__outer32_ly_2_ph;
reg [31:0] decode_run_i__outer32_ly_2_ph_reg;
reg [31:0] decode_run_i__outer32_tmp185;
reg [31:0] decode_run_i__outer32_tmp185_reg;
reg [31:0] decode_run_i__outer32_tmp169261;
reg [31:0] decode_run_i__outer32_tmp169261_reg;
reg [31:0] decode_run_i__outer32_tmp186;
reg [31:0] decode_run_i__outer32_tmp186_reg;
reg [31:0] decode_run_i__outer32_tmp189;
reg [31:0] decode_run_i__outer32_tmp189_reg;
reg [31:0] decode_run_i__outer32_tmp194;
reg [31:0] decode_run_i__outer32_tmp194_reg;
reg [31:0] decode_run_i__outer32_tmp164;
reg [31:0] decode_run_i__outer32_tmp164_reg;
reg [31:0] decode_run_i__outer32_tmp181;
reg [31:0] decode_run_i__outer32_tmp181_reg;
reg [31:0] decode_run_i__outer32_tmp187;
reg [31:0] decode_run_i__outer32_tmp187_reg;
reg [31:0] decode_run_i__outer32_tmp190;
reg [31:0] decode_run_i__outer32_tmp190_reg;
reg  decode_run_i_46_47;
reg  decode_run_i_46_47_reg;
reg  decode_run_i_48_49;
reg  decode_run_i_48_49_reg;
reg  decode_run_i_48_50;
reg  decode_run_i_48_50_reg;
reg  decode_run_i_48_or_cond8;
reg  decode_run_i_48_or_cond8_reg;
reg [31:0] decode_run_i__preheader20_51;
reg [31:0] decode_run_i__preheader20_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader20_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader20_52_reg;
reg [31:0] decode_run_i__preheader20_tmp114;
reg [31:0] decode_run_i__preheader20_tmp114_reg;
reg [31:0] decode_run_i__preheader20_tmp115;
reg [31:0] decode_run_i__preheader20_tmp115_reg;
reg [31:0] decode_run_i__preheader20_tmp152;
reg [31:0] decode_run_i__preheader20_tmp152_reg;
reg [31:0] decode_run_i_53_indvar105;
reg [31:0] decode_run_i_53_indvar105_reg;
reg [31:0] decode_run_i_53__13;
reg [31:0] decode_run_i_53__13_reg;
reg [31:0] decode_run_i_53_lx_3;
reg [31:0] decode_run_i_53_lx_3_reg;
reg [31:0] decode_run_i_53_ly_3;
reg [31:0] decode_run_i_53_ly_3_reg;
reg [31:0] decode_run_i_53_x_3;
reg [31:0] decode_run_i_53_x_3_reg;
reg [31:0] decode_run_i_53_tmp110;
reg [31:0] decode_run_i_53_tmp110_reg;
reg [31:0] decode_run_i_53__3;
reg [31:0] decode_run_i_53__3_reg;
reg  decode_run_i_53_54;
reg  decode_run_i_53_54_reg;
reg [31:0] decode_run_i_55_tmp126;
reg [31:0] decode_run_i_55_tmp126_reg;
reg [31:0] decode_run_i_55_tmp123;
reg [31:0] decode_run_i_55_tmp123_reg;
reg [31:0] decode_run_i_55_tmp120;
reg [31:0] decode_run_i_55_tmp120_reg;
reg [31:0] decode_run_i_55_tmp138;
reg [31:0] decode_run_i_55_tmp138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep139_reg;
reg [31:0] decode_run_i_55_tmp134;
reg [31:0] decode_run_i_55_tmp134_reg;
reg [31:0] decode_run_i_55_tmp132;
reg [31:0] decode_run_i_55_tmp132_reg;
reg [31:0] decode_run_i_55_tmp129;
reg [31:0] decode_run_i_55_tmp129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_scevgep121_reg;
reg [31:0] decode_run_i_55_tmp109;
reg [31:0] decode_run_i_55_tmp109_reg;
reg [31:0] decode_run_i_55_56;
reg [31:0] decode_run_i_55_56_reg;
reg [31:0] decode_run_i_55_57;
reg [31:0] decode_run_i_55_57_reg;
reg [31:0] decode_run_i_55_58;
reg [31:0] decode_run_i_55_58_reg;
reg  decode_run_i_55_59;
reg  decode_run_i_55_59_reg;
reg [31:0] decode_run_i_55_z_0;
reg [31:0] decode_run_i_55_z_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_60_reg;
reg [31:0] decode_run_i_55_61;
reg [31:0] decode_run_i_55_61_reg;
reg [31:0] decode_run_i_55_62;
reg [31:0] decode_run_i_55_62_reg;
reg [31:0] decode_run_i_55_tmp135;
reg [31:0] decode_run_i_55_tmp135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_63_reg;
reg [31:0] decode_run_i_55_64;
reg [31:0] decode_run_i_55_64_reg;
reg [31:0] decode_run_i_55_65;
reg [31:0] decode_run_i_55_65_reg;
reg [31:0] decode_run_i_55_66;
reg [31:0] decode_run_i_55_66_reg;
reg [31:0] decode_run_i_55_67;
reg [31:0] decode_run_i_55_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_68_reg;
reg [31:0] decode_run_i_55_69;
reg [31:0] decode_run_i_55_69_reg;
reg [31:0] decode_run_i_55_70;
reg [31:0] decode_run_i_55_70_reg;
reg [31:0] decode_run_i_55_tmp133;
reg [31:0] decode_run_i_55_tmp133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_71_reg;
reg [31:0] decode_run_i_55_72;
reg [31:0] decode_run_i_55_72_reg;
reg [31:0] decode_run_i_55_73;
reg [31:0] decode_run_i_55_73_reg;
reg [31:0] decode_run_i_55_74;
reg [31:0] decode_run_i_55_74_reg;
reg [31:0] decode_run_i_55_75;
reg [31:0] decode_run_i_55_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_76_reg;
reg [31:0] decode_run_i_55_77;
reg [31:0] decode_run_i_55_77_reg;
reg [31:0] decode_run_i_55_78;
reg [31:0] decode_run_i_55_78_reg;
reg [31:0] decode_run_i_55_tmp130;
reg [31:0] decode_run_i_55_tmp130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_55_79_reg;
reg [31:0] decode_run_i_55_80;
reg [31:0] decode_run_i_55_80_reg;
reg [31:0] decode_run_i_55_81;
reg [31:0] decode_run_i_55_81_reg;
reg [31:0] decode_run_i_55_82;
reg [31:0] decode_run_i_55_82_reg;
reg [31:0] decode_run_i_55_83;
reg [31:0] decode_run_i_55_83_reg;
reg [31:0] decode_run_i_55_84;
reg [31:0] decode_run_i_55_84_reg;
reg [31:0] decode_run_i_55_85;
reg [31:0] decode_run_i_55_85_reg;
reg [31:0] decode_run_i_55_86;
reg [31:0] decode_run_i_55_86_reg;
reg [31:0] decode_run_i_55_87;
reg [31:0] decode_run_i_55_87_reg;
reg [31:0] decode_run_i_55_88;
reg [31:0] decode_run_i_55_88_reg;
reg [31:0] decode_run_i_55_89;
reg [31:0] decode_run_i_55_89_reg;
reg [31:0] decode_run_i_55_90;
reg [31:0] decode_run_i_55_90_reg;
reg  decode_run_i_55_91;
reg  decode_run_i_55_91_reg;
reg [31:0] decode_run_i_55_indvar_next106;
reg [31:0] decode_run_i_55_indvar_next106_reg;
reg [31:0] decode_run_i_92_tmp142;
reg [31:0] decode_run_i_92_tmp142_reg;
reg [31:0] decode_run_i_92_93;
reg [31:0] decode_run_i_92_93_reg;
reg  decode_run_i_92_94;
reg  decode_run_i_92_94_reg;
reg  decode_run_i_92_95;
reg  decode_run_i_92_95_reg;
reg  decode_run_i_92_or_cond9;
reg  decode_run_i_92_or_cond9_reg;
reg [31:0] decode_run_i_92_indvar_next112;
reg [31:0] decode_run_i_92_indvar_next112_reg;
reg [31:0] decode_run_i__outer22_indvar111;
reg [31:0] decode_run_i__outer22_indvar111_reg;
reg [31:0] decode_run_i__outer22__13_ph;
reg [31:0] decode_run_i__outer22__13_ph_reg;
reg [31:0] decode_run_i__outer22_x_3_ph;
reg [31:0] decode_run_i__outer22_x_3_ph_reg;
reg [31:0] decode_run_i__outer22__3_ph;
reg [31:0] decode_run_i__outer22__3_ph_reg;
reg [31:0] decode_run_i__outer22_lx_3_ph;
reg [31:0] decode_run_i__outer22_lx_3_ph_reg;
reg [31:0] decode_run_i__outer22_ly_3_ph;
reg [31:0] decode_run_i__outer22_ly_3_ph_reg;
reg [31:0] decode_run_i__outer22_tmp145;
reg [31:0] decode_run_i__outer22_tmp145_reg;
reg [31:0] decode_run_i__outer22_tmp114258;
reg [31:0] decode_run_i__outer22_tmp114258_reg;
reg [31:0] decode_run_i__outer22_tmp146;
reg [31:0] decode_run_i__outer22_tmp146_reg;
reg [31:0] decode_run_i__outer22_tmp149;
reg [31:0] decode_run_i__outer22_tmp149_reg;
reg [31:0] decode_run_i__outer22_tmp153;
reg [31:0] decode_run_i__outer22_tmp153_reg;
reg [31:0] decode_run_i__outer22_tmp108;
reg [31:0] decode_run_i__outer22_tmp108_reg;
reg [31:0] decode_run_i__outer22_tmp117;
reg [31:0] decode_run_i__outer22_tmp117_reg;
reg [31:0] decode_run_i__outer22_tmp118;
reg [31:0] decode_run_i__outer22_tmp118_reg;
reg [31:0] decode_run_i__outer22_tmp119;
reg [31:0] decode_run_i__outer22_tmp119_reg;
reg [31:0] decode_run_i__outer22_tmp122;
reg [31:0] decode_run_i__outer22_tmp122_reg;
reg [31:0] decode_run_i__outer22_tmp125;
reg [31:0] decode_run_i__outer22_tmp125_reg;
reg [31:0] decode_run_i__outer22_tmp128259;
reg [31:0] decode_run_i__outer22_tmp128259_reg;
reg [31:0] decode_run_i__outer22_tmp131260;
reg [31:0] decode_run_i__outer22_tmp131260_reg;
reg [31:0] decode_run_i__outer22_tmp141;
reg [31:0] decode_run_i__outer22_tmp141_reg;
reg [31:0] decode_run_i__outer22_tmp147;
reg [31:0] decode_run_i__outer22_tmp147_reg;
reg  decode_run_i_96_97;
reg  decode_run_i_96_97_reg;
reg  decode_run_i_98_99;
reg  decode_run_i_98_99_reg;
reg  decode_run_i_98_100;
reg  decode_run_i_98_100_reg;
reg  decode_run_i_98_or_cond10;
reg  decode_run_i_98_or_cond10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__preheader_101_reg;
reg [31:0] decode_run_i__preheader_tmp73;
reg [31:0] decode_run_i__preheader_tmp73_reg;
reg [31:0] decode_run_i__preheader_tmp74;
reg [31:0] decode_run_i__preheader_tmp74_reg;
reg [31:0] decode_run_i__preheader_tmp96;
reg [31:0] decode_run_i__preheader_tmp96_reg;
reg [31:0] decode_run_i__preheader_backstep_op;
reg [31:0] decode_run_i__preheader_backstep_op_reg;
reg [31:0] decode_run_i_102_indvar;
reg [31:0] decode_run_i_102_indvar_reg;
reg [31:0] decode_run_i_102__24;
reg [31:0] decode_run_i_102__24_reg;
reg [31:0] decode_run_i_102_lx_4;
reg [31:0] decode_run_i_102_lx_4_reg;
reg [31:0] decode_run_i_102_ly_4;
reg [31:0] decode_run_i_102_ly_4_reg;
reg [31:0] decode_run_i_102_x_4;
reg [31:0] decode_run_i_102_x_4_reg;
reg [31:0] decode_run_i_102__4;
reg [31:0] decode_run_i_102__4_reg;
reg  decode_run_i_102_103;
reg  decode_run_i_102_103_reg;
reg [31:0] decode_run_i_104_tmp81;
reg [31:0] decode_run_i_104_tmp81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_104_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_104_scevgep_reg;
reg [31:0] decode_run_i_104_tmp69;
reg [31:0] decode_run_i_104_tmp69_reg;
reg [31:0] decode_run_i_104_tmp93;
reg [31:0] decode_run_i_104_tmp93_reg;
reg  decode_run_i_104_105;
reg  decode_run_i_104_105_reg;
reg [31:0] decode_run_i_104_backstep__neg;
reg [31:0] decode_run_i_104_backstep__neg_reg;
reg [31:0] decode_run_i_104_tmp78;
reg [31:0] decode_run_i_104_tmp78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_104_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_104_106_reg;
reg [31:0] decode_run_i_104_107;
reg [31:0] decode_run_i_104_107_reg;
reg [31:0] decode_run_i_104_108;
reg [31:0] decode_run_i_104_108_reg;
reg  decode_run_i_104_109;
reg  decode_run_i_104_109_reg;
reg [31:0] decode_run_i_104_indvar_next;
reg [31:0] decode_run_i_104_indvar_next_reg;
reg [31:0] decode_run_i_110_tmp84;
reg [31:0] decode_run_i_110_tmp84_reg;
reg [31:0] decode_run_i_110_111;
reg [31:0] decode_run_i_110_111_reg;
reg  decode_run_i_110_112;
reg  decode_run_i_110_112_reg;
reg  decode_run_i_110_113;
reg  decode_run_i_110_113_reg;
reg  decode_run_i_110_or_cond11;
reg  decode_run_i_110_or_cond11_reg;
reg [31:0] decode_run_i_110_indvar_next71;
reg [31:0] decode_run_i_110_indvar_next71_reg;
reg [31:0] decode_run_i__outer_indvar70;
reg [31:0] decode_run_i__outer_indvar70_reg;
reg [31:0] decode_run_i__outer__24_ph;
reg [31:0] decode_run_i__outer__24_ph_reg;
reg [31:0] decode_run_i__outer_x_4_ph;
reg [31:0] decode_run_i__outer_x_4_ph_reg;
reg [31:0] decode_run_i__outer__4_ph;
reg [31:0] decode_run_i__outer__4_ph_reg;
reg [31:0] decode_run_i__outer_lx_4_ph;
reg [31:0] decode_run_i__outer_lx_4_ph_reg;
reg [31:0] decode_run_i__outer_ly_4_ph;
reg [31:0] decode_run_i__outer_ly_4_ph_reg;
reg [31:0] decode_run_i__outer_tmp87;
reg [31:0] decode_run_i__outer_tmp87_reg;
reg [31:0] decode_run_i__outer_tmp73257;
reg [31:0] decode_run_i__outer_tmp73257_reg;
reg [31:0] decode_run_i__outer_tmp88;
reg [31:0] decode_run_i__outer_tmp88_reg;
reg [31:0] decode_run_i__outer_tmp91;
reg [31:0] decode_run_i__outer_tmp91_reg;
reg [31:0] decode_run_i__outer_tmp97;
reg [31:0] decode_run_i__outer_tmp97_reg;
reg [31:0] decode_run_i__outer_tmp;
reg [31:0] decode_run_i__outer_tmp_reg;
reg [31:0] decode_run_i__outer_tmp83;
reg [31:0] decode_run_i__outer_tmp83_reg;
reg [31:0] decode_run_i__outer_tmp89;
reg [31:0] decode_run_i__outer_tmp89_reg;
reg [31:0] decode_run_i__outer_tmp92;
reg [31:0] decode_run_i__outer_tmp92_reg;
reg [31:0] decode_run_i__loopexit__35;
reg [31:0] decode_run_i__loopexit__35_reg;
reg [31:0] decode_run_i__loopexit_x_5;
reg [31:0] decode_run_i__loopexit_x_5_reg;
reg [31:0] decode_run_i__loopexit_y_5;
reg [31:0] decode_run_i__loopexit_y_5_reg;
reg [31:0] decode_run_i__loopexit_lx_5;
reg [31:0] decode_run_i__loopexit_lx_5_reg;
reg [31:0] decode_run_i__loopexit_ly_5;
reg [31:0] decode_run_i__loopexit_ly_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__loopexit_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i__loopexit_114_reg;
reg [31:0] decode_run_i__loopexit_115;
reg [31:0] decode_run_i__loopexit_115_reg;
reg  decode_run_i__loopexit_116;
reg  decode_run_i__loopexit_116_reg;
reg [31:0] decode_run_i_117_118;
reg [31:0] decode_run_i_117_118_reg;
reg [31:0] decode_run_i_117_119;
reg [31:0] decode_run_i_117_119_reg;
reg [31:0] decode_run_i_117_120;
reg [31:0] decode_run_i_117_120_reg;
reg [31:0] decode_run_i_121_122;
reg [31:0] decode_run_i_121_122_reg;
reg [31:0] decode_run_i_121_123;
reg [31:0] decode_run_i_121_123_reg;
reg [31:0] decode_run_i_121_124;
reg [31:0] decode_run_i_121_124_reg;
reg [31:0] decode_run_i_125_storemerge_in;
reg [31:0] decode_run_i_125_storemerge_in_reg;
reg [31:0] decode_run_i_125_storemerge;
reg [31:0] decode_run_i_125_storemerge_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_decode_run_i__outer52_tmp251_en;
reg [31:0] decode_run_i__outer52_tmp251_stage0_reg;
reg  lpm_mult_decode_run_i_20_22_en;
reg [31:0] decode_run_i_20_22_stage0_reg;
reg  lpm_mult_decode_run_i__outer42_tmp221_en;
reg [31:0] decode_run_i__outer42_tmp221_stage0_reg;
reg  lpm_mult_decode_run_i__preheader30_tmp169_en;
reg [31:0] decode_run_i__preheader30_tmp169_stage0_reg;
reg  lpm_mult_decode_run_i__outer32_tmp185_en;
reg [31:0] decode_run_i__outer32_tmp185_stage0_reg;
reg  lpm_mult_decode_run_i__outer32_tmp186_en;
reg [31:0] decode_run_i__outer32_tmp186_stage0_reg;
reg  lpm_mult_decode_run_i__preheader20_tmp114_en;
reg [31:0] decode_run_i__preheader20_tmp114_stage0_reg;
reg  lpm_mult_decode_run_i_55_56_en;
reg [31:0] decode_run_i_55_56_stage0_reg;
reg  lpm_mult_decode_run_i__outer22_tmp145_en;
reg [31:0] decode_run_i__outer22_tmp145_stage0_reg;
reg  lpm_mult_decode_run_i__outer22_tmp146_en;
reg [31:0] decode_run_i__outer22_tmp146_stage0_reg;
reg  lpm_mult_decode_run_i__preheader_tmp73_en;
reg [31:0] decode_run_i__preheader_tmp73_stage0_reg;
reg  lpm_mult_decode_run_i__outer_tmp87_en;
reg [31:0] decode_run_i__outer_tmp87_stage0_reg;
reg  lpm_mult_decode_run_i__outer_tmp88_en;
reg [31:0] decode_run_i__outer_tmp88_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_0_7 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_8_6;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_0_7 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_8_6;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype == 32'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader50_7;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader50_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype == 32'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader40_8;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader40_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype == 32'd2)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_33_35;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype == 32'd4)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_46_51;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_46_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype == 32'd5)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_96_73;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_96_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader50_7;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader50_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer52_18;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer52_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader40_8;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader40_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer42_33;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer42_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_11_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_11_9;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_11_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_11_9) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_11_12 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_10;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_11_9) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_11_12 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_10;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_11;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_11;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_12;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_12;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_13;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_13;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_14;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_13_14;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_11_9;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_11_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_16_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_15;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_16_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_16_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_16_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer52_18;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer52_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer52_18;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer52_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer52_19;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer52_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer52_19;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer52_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_11_9;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_11_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_20;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_21;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_21;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_22;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_22;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_23;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_23;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_24;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_20_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_24;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_20_24) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_20_21_reg == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_25;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_20_24) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_20_21_reg == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_25;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_26;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_26;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_27;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_28;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_29;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_26_29;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_20;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_30;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_29_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_30;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_29_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_31;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_29_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_31;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_29_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_32;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_29_32;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer42_33;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer42_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer42_33;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer42_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer42_34;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer42_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer42_34;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer42_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_20_20;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_20_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_33_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_33_35;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_33_35) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_33_34 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_33_35) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_33_34 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader30_36;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader30_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader30_36;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader30_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader30_37;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader30_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader30_37;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader30_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer32_49;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_36_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_36_38;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_36_38) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_36_37 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_39;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_36_38) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_36_37 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_39;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_40;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_40;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_41;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_41;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_42;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_43;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_43;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_44;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_44;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_45;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_38_45;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_38_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_36_38;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_46;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_42_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_46;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_42_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_47;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_42_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_47;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_42_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_48;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_42_48;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_42_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer32_49;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer32_49;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer32_50;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer32_50;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_36_38;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_46_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_46_51;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_46_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_46_51) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_46_47 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_46_51) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_46_47 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_48_52;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_48_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_48_52;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_48_52) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_48_or_cond8 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_48_52) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_48_or_cond8 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader20_53;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader20_53;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader20_54;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader20_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader20_54;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader20_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer22_71;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer22_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_53_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_53_55;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_53_55) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_53_54 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_56;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_53_55) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_53_54 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_56;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_57;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_57;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_58;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_58;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_59;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_59;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_60;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_60;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_61;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_61;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_62;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_62;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_63;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_63;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_64;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_64;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_65;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_65;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_66;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_66;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_67;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_55_67;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_55_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_53_55;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_68;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_92_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_68;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_92_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_69;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_92_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_69;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_92_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_70;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_92_70;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_92_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer22_71;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer22_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer22_71;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer22_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer22_72;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer22_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer22_72;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer22_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_53_55;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_96_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_96_73;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_96_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_96_73) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_96_97 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_96_73) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_96_97 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_98_74;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_98_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_98_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_98_74;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_98_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_98_74) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_98_or_cond10 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_98_74) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_98_or_cond10 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader_75;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader_75;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader_76;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__preheader_76;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer_88;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_102_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_102_77;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_102_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_102_77) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_102_103 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_78;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_102_77) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_102_103 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit_90;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_78;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_79;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_79;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_80;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_80;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_81;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_81;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_82;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_82;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_83;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_83;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_84;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_104_84;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_104_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_102_77;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_102_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_85;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_110_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_85;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_110_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_86;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_110_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_86;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_110_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_87;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_110_87;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_110_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer_88;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer_88;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer_89;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__outer_89;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__outer_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_102_77;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_102_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit_90;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_95;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_96;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_96;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_97;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_97;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_98;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_98;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_99;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_99;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_100;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_100;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit_101;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB__loopexit_101) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i__loopexit_116 == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_117_102;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_117_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_decode_run_i_BB__loopexit_101) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i__loopexit_116 == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_121_104;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_121_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_117_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_117_102;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_117_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_117_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_117_103;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_117_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_117_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_117_103;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_117_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_117_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_125_106;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_125_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_121_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_121_104;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_121_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_121_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_121_105;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_121_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_121_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_121_105;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_121_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_121_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_125_106;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_125_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_125_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_125_106;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_125_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_125_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_125_107;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_125_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_125_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB_125_107;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB_125_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB_125_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit2_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit4_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit6_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_loopexit8_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_decode_run_i_BB__loopexit1_113;
if (reset == 1'b0 && ^(LEGUP_F_decode_run_i_BB__loopexit1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
begin
decode_run_i_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
decode_run_i_0_1_reg <= decode_run_i_0_1;
if (reset == 1'b0 && ^(decode_run_i_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_1_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
begin
decode_run_i_0_2 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
decode_run_i_0_2_reg <= decode_run_i_0_2;
if (reset == 1'b0 && ^(decode_run_i_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_2_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
begin
decode_run_i_0_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_4))
begin
decode_run_i_0_3_reg <= decode_run_i_0_3;
if (reset == 1'b0 && ^(decode_run_i_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_3_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
begin
decode_run_i_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_4))
begin
decode_run_i_0_4_reg <= decode_run_i_0_4;
if (reset == 1'b0 && ^(decode_run_i_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_4_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 0*/
begin
decode_run_i_0_5 = arg_avctx;
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
decode_run_i_0_5_reg <= decode_run_i_0_5;
if (reset == 1'b0 && ^(decode_run_i_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_5_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_0_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_5))
begin
decode_run_i_0_6_reg <= decode_run_i_0_6;
if (reset == 1'b0 && ^(decode_run_i_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_6_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %0*/
/*   %7 = icmp slt i32 %2, %6*/
begin
decode_run_i_0_7 = ($signed(decode_run_i_0_2_reg) < $signed(decode_run_i_0_6));
end
end
always @(posedge clk) begin
/* decode_run_i: %0*/
/*   %7 = icmp slt i32 %2, %6*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_5))
begin
decode_run_i_0_7_reg <= decode_run_i_0_7;
if (reset == 1'b0 && ^(decode_run_i_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_0_7_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader50*/
/*   %9 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
begin
decode_run_i__preheader50_9 = (arg_avctx + 4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader50*/
/*   %9 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7))
begin
decode_run_i__preheader50_9_reg <= decode_run_i__preheader50_9;
if (reset == 1'b0 && ^(decode_run_i__preheader50_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader50_9_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader50*/
/*   %tmp255 = add i32 %2, 1*/
begin
decode_run_i__preheader50_tmp255 = (decode_run_i_0_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader50*/
/*   %tmp255 = add i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7))
begin
decode_run_i__preheader50_tmp255_reg <= decode_run_i__preheader50_tmp255;
if (reset == 1'b0 && ^(decode_run_i__preheader50_tmp255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader50_tmp255_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader40*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
begin
decode_run_i__preheader40_10 = (arg_avctx + 4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader40*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8))
begin
decode_run_i__preheader40_10_reg <= decode_run_i__preheader40_10;
if (reset == 1'b0 && ^(decode_run_i__preheader40_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader40_10_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader40*/
/*   %tmp225 = add i32 %2, 1*/
begin
decode_run_i__preheader40_tmp225 = (decode_run_i_0_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader40*/
/*   %tmp225 = add i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8))
begin
decode_run_i__preheader40_tmp225_reg <= decode_run_i__preheader40_tmp225;
if (reset == 1'b0 && ^(decode_run_i__preheader40_tmp225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader40_tmp225_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %indvar232 = phi i32 [ 0, %.outer52 ], [ %indvar.next233, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_indvar232 = decode_run_i_13_indvar_next233_reg;
end
/* decode_run_i: %11*/
/*   %indvar232 = phi i32 [ 0, %.outer52 ], [ %indvar.next233, %13 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_11_indvar232 = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %indvar232 = phi i32 [ 0, %.outer52 ], [ %indvar.next233, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_indvar232_reg <= decode_run_i_11_indvar232;
if (reset == 1'b0 && ^(decode_run_i_11_indvar232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_indvar232_reg"); $finish; end
end
/* decode_run_i: %11*/
/*   %indvar232 = phi i32 [ 0, %.outer52 ], [ %indvar.next233, %13 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_11_indvar232_reg <= decode_run_i_11_indvar232;
if (reset == 1'b0 && ^(decode_run_i_11_indvar232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_indvar232_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %lx.0 = phi i32 [ %lx.0.ph, %.outer52 ], [ %x.0, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_lx_0 = decode_run_i_11_x_0_reg;
end
/* decode_run_i: %11*/
/*   %lx.0 = phi i32 [ %lx.0.ph, %.outer52 ], [ %x.0, %13 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_11_lx_0 = decode_run_i__outer52_lx_0_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %lx.0 = phi i32 [ %lx.0.ph, %.outer52 ], [ %x.0, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_lx_0_reg <= decode_run_i_11_lx_0;
if (reset == 1'b0 && ^(decode_run_i_11_lx_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_lx_0_reg"); $finish; end
end
/* decode_run_i: %11*/
/*   %lx.0 = phi i32 [ %lx.0.ph, %.outer52 ], [ %x.0, %13 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_11_lx_0_reg <= decode_run_i_11_lx_0;
if (reset == 1'b0 && ^(decode_run_i_11_lx_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_lx_0_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %ly.0 = phi i32 [ %ly.0.ph, %.outer52 ], [ %tmp240263, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_ly_0 = decode_run_i__outer52_tmp240263_reg;
end
/* decode_run_i: %11*/
/*   %ly.0 = phi i32 [ %ly.0.ph, %.outer52 ], [ %tmp240263, %13 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_11_ly_0 = decode_run_i__outer52_ly_0_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %ly.0 = phi i32 [ %ly.0.ph, %.outer52 ], [ %tmp240263, %13 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_13_14) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_13_15 == 1'd1)))
begin
decode_run_i_11_ly_0_reg <= decode_run_i_11_ly_0;
if (reset == 1'b0 && ^(decode_run_i_11_ly_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_ly_0_reg"); $finish; end
end
/* decode_run_i: %11*/
/*   %ly.0 = phi i32 [ %ly.0.ph, %.outer52 ], [ %tmp240263, %13 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer52_19) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_11_ly_0_reg <= decode_run_i_11_ly_0;
if (reset == 1'b0 && ^(decode_run_i_11_ly_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_ly_0_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %x.0 = add i32 %x.0.ph, %indvar232*/
begin
decode_run_i_11_x_0 = (decode_run_i__outer52_x_0_ph_reg + decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %x.0 = add i32 %x.0.ph, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_11_9))
begin
decode_run_i_11_x_0_reg <= decode_run_i_11_x_0;
if (reset == 1'b0 && ^(decode_run_i_11_x_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_x_0_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %.01 = sub i32 %.01.ph, %indvar232*/
begin
decode_run_i_11__01 = (decode_run_i__outer52__01_ph_reg - decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %.01 = sub i32 %.01.ph, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_11_9))
begin
decode_run_i_11__01_reg <= decode_run_i_11__01;
if (reset == 1'b0 && ^(decode_run_i_11__01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11__01_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %11*/
/*   %12 = icmp sgt i32 %.01, 0*/
begin
decode_run_i_11_12 = ($signed(decode_run_i_11__01) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* decode_run_i: %11*/
/*   %12 = icmp sgt i32 %.01, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_11_9))
begin
decode_run_i_11_12_reg <= decode_run_i_11_12;
if (reset == 1'b0 && ^(decode_run_i_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_11_12_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %tmp243 = add i32 %tmp252, %indvar232*/
begin
decode_run_i_13_tmp243 = (decode_run_i__outer52_tmp252_reg + decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %tmp243 = add i32 %tmp252, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_10))
begin
decode_run_i_13_tmp243_reg <= decode_run_i_13_tmp243;
if (reset == 1'b0 && ^(decode_run_i_13_tmp243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_tmp243_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %scevgep244 = getelementptr i32* %dst, i32 %tmp243*/
begin
decode_run_i_13_scevgep244 = (arg_dst + (4 * decode_run_i_13_tmp243_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %scevgep244 = getelementptr i32* %dst, i32 %tmp243*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
decode_run_i_13_scevgep244_reg <= decode_run_i_13_scevgep244;
if (reset == 1'b0 && ^(decode_run_i_13_scevgep244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_scevgep244_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %tmp236 = add i32 %tmp235, %indvar232*/
begin
decode_run_i_13_tmp236 = (decode_run_i__outer52_tmp235_reg + decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %tmp236 = add i32 %tmp235, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_10))
begin
decode_run_i_13_tmp236_reg <= decode_run_i_13_tmp236;
if (reset == 1'b0 && ^(decode_run_i_13_tmp236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_tmp236_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
begin
decode_run_i_13_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_14))
begin
decode_run_i_13_14_reg <= decode_run_i_13_14;
if (reset == 1'b0 && ^(decode_run_i_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_14_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %15 = icmp slt i32 %tmp236, %14*/
begin
decode_run_i_13_15 = ($signed(decode_run_i_13_tmp236_reg) < $signed(decode_run_i_13_14));
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %15 = icmp slt i32 %tmp236, %14*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_14))
begin
decode_run_i_13_15_reg <= decode_run_i_13_15;
if (reset == 1'b0 && ^(decode_run_i_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_15_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %13*/
/*   %indvar.next233 = add i32 %indvar232, 1*/
begin
decode_run_i_13_indvar_next233 = (decode_run_i_11_indvar232_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %13*/
/*   %indvar.next233 = add i32 %indvar232, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_10))
begin
decode_run_i_13_indvar_next233_reg <= decode_run_i_13_indvar_next233;
if (reset == 1'b0 && ^(decode_run_i_13_indvar_next233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_13_indvar_next233_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %tmp247 = sub i32 %tmp246, %indvar232*/
begin
decode_run_i_16_tmp247 = (decode_run_i__outer52_tmp246_reg - decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %tmp247 = sub i32 %tmp246, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
decode_run_i_16_tmp247_reg <= decode_run_i_16_tmp247;
if (reset == 1'b0 && ^(decode_run_i_16_tmp247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_tmp247_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_16_17 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_17))
begin
decode_run_i_16_17_reg <= decode_run_i_16_17;
if (reset == 1'b0 && ^(decode_run_i_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_17_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %18 = icmp slt i32 %tmp256, %17*/
begin
decode_run_i_16_18 = ($signed(decode_run_i__outer52_tmp256_reg) < $signed(decode_run_i_16_17));
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %18 = icmp slt i32 %tmp256, %17*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_17))
begin
decode_run_i_16_18_reg <= decode_run_i_16_18;
if (reset == 1'b0 && ^(decode_run_i_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_18_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %19 = icmp eq i32 %tmp246, %indvar232*/
begin
decode_run_i_16_19 = (decode_run_i__outer52_tmp246_reg == decode_run_i_11_indvar232_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %19 = icmp eq i32 %tmp246, %indvar232*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
decode_run_i_16_19_reg <= decode_run_i_16_19;
if (reset == 1'b0 && ^(decode_run_i_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_19_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %or.cond = or i1 %18, %19*/
begin
decode_run_i_16_or_cond = (decode_run_i_16_18 | decode_run_i_16_19_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %or.cond = or i1 %18, %19*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_17))
begin
decode_run_i_16_or_cond_reg <= decode_run_i_16_or_cond;
if (reset == 1'b0 && ^(decode_run_i_16_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %16*/
/*   %indvar.next238 = add i32 %indvar237, 1*/
begin
decode_run_i_16_indvar_next238 = (decode_run_i__outer52_indvar237_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %16*/
/*   %indvar.next238 = add i32 %indvar237, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
decode_run_i_16_indvar_next238_reg <= decode_run_i_16_indvar_next238;
if (reset == 1'b0 && ^(decode_run_i_16_indvar_next238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_16_indvar_next238_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %indvar237 = phi i32 [ 0, %.preheader50 ], [ %indvar.next238, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_indvar237 = 32'd0;
end
/* decode_run_i: %.outer52*/
/*   %indvar237 = phi i32 [ 0, %.preheader50 ], [ %indvar.next238, %16 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1))) */
begin
decode_run_i__outer52_indvar237 = decode_run_i_16_indvar_next238_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %indvar237 = phi i32 [ 0, %.preheader50 ], [ %indvar.next238, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_indvar237_reg <= decode_run_i__outer52_indvar237;
if (reset == 1'b0 && ^(decode_run_i__outer52_indvar237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_indvar237_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %indvar237 = phi i32 [ 0, %.preheader50 ], [ %indvar.next238, %16 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
decode_run_i__outer52_indvar237_reg <= decode_run_i__outer52_indvar237;
if (reset == 1'b0 && ^(decode_run_i__outer52_indvar237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_indvar237_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %x.0.ph = phi i32 [ %1, %.preheader50 ], [ 0, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_x_0_ph = decode_run_i_0_1_reg;
end
/* decode_run_i: %.outer52*/
/*   %x.0.ph = phi i32 [ %1, %.preheader50 ], [ 0, %16 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1))) */
begin
decode_run_i__outer52_x_0_ph = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %x.0.ph = phi i32 [ %1, %.preheader50 ], [ 0, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_x_0_ph_reg <= decode_run_i__outer52_x_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_x_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_x_0_ph_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %x.0.ph = phi i32 [ %1, %.preheader50 ], [ 0, %16 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
decode_run_i__outer52_x_0_ph_reg <= decode_run_i__outer52_x_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_x_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_x_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %.01.ph = phi i32 [ %run, %.preheader50 ], [ %tmp247, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52__01_ph = arg_run;
end
/* decode_run_i: %.outer52*/
/*   %.01.ph = phi i32 [ %run, %.preheader50 ], [ %tmp247, %16 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1))) */
begin
decode_run_i__outer52__01_ph = decode_run_i_16_tmp247_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %.01.ph = phi i32 [ %run, %.preheader50 ], [ %tmp247, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52__01_ph_reg <= decode_run_i__outer52__01_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52__01_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52__01_ph_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %.01.ph = phi i32 [ %run, %.preheader50 ], [ %tmp247, %16 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
decode_run_i__outer52__01_ph_reg <= decode_run_i__outer52__01_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52__01_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52__01_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %lx.0.ph = phi i32 [ %3, %.preheader50 ], [ %x.0, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_lx_0_ph = decode_run_i_0_3_reg;
end
/* decode_run_i: %.outer52*/
/*   %lx.0.ph = phi i32 [ %3, %.preheader50 ], [ %x.0, %16 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1))) */
begin
decode_run_i__outer52_lx_0_ph = decode_run_i_11_x_0_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %lx.0.ph = phi i32 [ %3, %.preheader50 ], [ %x.0, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_lx_0_ph_reg <= decode_run_i__outer52_lx_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_lx_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_lx_0_ph_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %lx.0.ph = phi i32 [ %3, %.preheader50 ], [ %x.0, %16 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
decode_run_i__outer52_lx_0_ph_reg <= decode_run_i__outer52_lx_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_lx_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_lx_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %ly.0.ph = phi i32 [ %4, %.preheader50 ], [ %tmp240263, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_ly_0_ph = decode_run_i_0_4_reg;
end
/* decode_run_i: %.outer52*/
/*   %ly.0.ph = phi i32 [ %4, %.preheader50 ], [ %tmp240263, %16 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1))) */
begin
decode_run_i__outer52_ly_0_ph = decode_run_i__outer52_tmp240263_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %ly.0.ph = phi i32 [ %4, %.preheader50 ], [ %tmp240263, %16 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader50_7) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer52_ly_0_ph_reg <= decode_run_i__outer52_ly_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_ly_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_ly_0_ph_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %ly.0.ph = phi i32 [ %4, %.preheader50 ], [ %tmp240263, %16 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_16_17) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_16_or_cond == 1'd1)))
begin
decode_run_i__outer52_ly_0_ph_reg <= decode_run_i__outer52_ly_0_ph;
if (reset == 1'b0 && ^(decode_run_i__outer52_ly_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_ly_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %tmp240263 = add i32 %2, %indvar237*/
begin
decode_run_i__outer52_tmp240263 = (decode_run_i_0_2_reg + decode_run_i__outer52_indvar237_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp240263 = add i32 %2, %indvar237*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_18))
begin
decode_run_i__outer52_tmp240263_reg <= decode_run_i__outer52_tmp240263;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp240263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp240263_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer52_tmp251 = decode_run_i__outer52_tmp251_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp251 = mul i32 %tmp240263, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_19))
begin
decode_run_i__outer52_tmp251_reg <= decode_run_i__outer52_tmp251;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp251_reg"); $finish; end
end
/* decode_run_i: %.outer52*/
/*   %tmp251 = mul i32 %tmp240263, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_19))
begin
decode_run_i__outer52_tmp251_reg <= decode_run_i__outer52_tmp251;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp251_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %tmp256 = add i32 %tmp255, %indvar237*/
begin
decode_run_i__outer52_tmp256 = (decode_run_i__preheader50_tmp255_reg + decode_run_i__outer52_indvar237_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp256 = add i32 %tmp255, %indvar237*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_18))
begin
decode_run_i__outer52_tmp256_reg <= decode_run_i__outer52_tmp256;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp256_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %tmp235 = add i32 %x.0.ph, 1*/
begin
decode_run_i__outer52_tmp235 = (decode_run_i__outer52_x_0_ph_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp235 = add i32 %x.0.ph, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_18))
begin
decode_run_i__outer52_tmp235_reg <= decode_run_i__outer52_tmp235;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp235_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %tmp246 = add i32 %.01.ph, -1*/
begin
decode_run_i__outer52_tmp246 = (decode_run_i__outer52__01_ph_reg + -32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp246 = add i32 %.01.ph, -1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_18))
begin
decode_run_i__outer52_tmp246_reg <= decode_run_i__outer52_tmp246;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp246_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer52*/
/*   %tmp252 = add i32 %x.0.ph, %tmp251*/
begin
decode_run_i__outer52_tmp252 = (decode_run_i__outer52_x_0_ph_reg + decode_run_i__outer52_tmp251);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp252 = add i32 %x.0.ph, %tmp251*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer52_19))
begin
decode_run_i__outer52_tmp252_reg <= decode_run_i__outer52_tmp252;
if (reset == 1'b0 && ^(decode_run_i__outer52_tmp252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer52_tmp252_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %indvar202 = phi i32 [ 0, %.outer42 ], [ %indvar.next203, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_indvar202 = decode_run_i_26_indvar_next203_reg;
end
/* decode_run_i: %20*/
/*   %indvar202 = phi i32 [ 0, %.outer42 ], [ %indvar.next203, %26 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_20_indvar202 = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %indvar202 = phi i32 [ 0, %.outer42 ], [ %indvar.next203, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_indvar202_reg <= decode_run_i_20_indvar202;
if (reset == 1'b0 && ^(decode_run_i_20_indvar202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_indvar202_reg"); $finish; end
end
/* decode_run_i: %20*/
/*   %indvar202 = phi i32 [ 0, %.outer42 ], [ %indvar.next203, %26 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_20_indvar202_reg <= decode_run_i_20_indvar202;
if (reset == 1'b0 && ^(decode_run_i_20_indvar202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_indvar202_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %lx.1 = phi i32 [ %lx.1.ph, %.outer42 ], [ %x.1, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_lx_1 = decode_run_i_20_x_1_reg;
end
/* decode_run_i: %20*/
/*   %lx.1 = phi i32 [ %lx.1.ph, %.outer42 ], [ %x.1, %26 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_20_lx_1 = decode_run_i__outer42_lx_1_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %lx.1 = phi i32 [ %lx.1.ph, %.outer42 ], [ %x.1, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_lx_1_reg <= decode_run_i_20_lx_1;
if (reset == 1'b0 && ^(decode_run_i_20_lx_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_lx_1_reg"); $finish; end
end
/* decode_run_i: %20*/
/*   %lx.1 = phi i32 [ %lx.1.ph, %.outer42 ], [ %x.1, %26 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_20_lx_1_reg <= decode_run_i_20_lx_1;
if (reset == 1'b0 && ^(decode_run_i_20_lx_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_lx_1_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %ly.1 = phi i32 [ %ly.1.ph, %.outer42 ], [ %tmp210262, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_ly_1 = decode_run_i__outer42_tmp210262_reg;
end
/* decode_run_i: %20*/
/*   %ly.1 = phi i32 [ %ly.1.ph, %.outer42 ], [ %tmp210262, %26 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_20_ly_1 = decode_run_i__outer42_ly_1_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %ly.1 = phi i32 [ %ly.1.ph, %.outer42 ], [ %tmp210262, %26 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_26_29) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_26_28 == 1'd1)))
begin
decode_run_i_20_ly_1_reg <= decode_run_i_20_ly_1;
if (reset == 1'b0 && ^(decode_run_i_20_ly_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_ly_1_reg"); $finish; end
end
/* decode_run_i: %20*/
/*   %ly.1 = phi i32 [ %ly.1.ph, %.outer42 ], [ %tmp210262, %26 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer42_34) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_20_ly_1_reg <= decode_run_i_20_ly_1;
if (reset == 1'b0 && ^(decode_run_i_20_ly_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_ly_1_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %x.1 = add i32 %x.1.ph, %indvar202*/
begin
decode_run_i_20_x_1 = (decode_run_i__outer42_x_1_ph_reg + decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %x.1 = add i32 %x.1.ph, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_20))
begin
decode_run_i_20_x_1_reg <= decode_run_i_20_x_1;
if (reset == 1'b0 && ^(decode_run_i_20_x_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_x_1_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %.1 = sub i32 %.1.ph, %indvar202*/
begin
decode_run_i_20__1 = (decode_run_i__outer42__1_ph_reg - decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %.1 = sub i32 %.1.ph, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_20))
begin
decode_run_i_20__1_reg <= decode_run_i_20__1;
if (reset == 1'b0 && ^(decode_run_i_20__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20__1_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %21 = icmp sgt i32 %.1, 0*/
begin
decode_run_i_20_21 = ($signed(decode_run_i_20__1) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %21 = icmp sgt i32 %.1, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_20))
begin
decode_run_i_20_21_reg <= decode_run_i_20_21;
if (reset == 1'b0 && ^(decode_run_i_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_21_reg"); $finish; end
end
end
always @(*) begin
decode_run_i_20_22 = decode_run_i_20_22_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %22 = mul nsw i32 %ly.1, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_21))
begin
decode_run_i_20_22_reg <= decode_run_i_20_22;
if (reset == 1'b0 && ^(decode_run_i_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_22_reg"); $finish; end
end
/* decode_run_i: %20*/
/*   %22 = mul nsw i32 %ly.1, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_21))
begin
decode_run_i_20_22_reg <= decode_run_i_20_22;
if (reset == 1'b0 && ^(decode_run_i_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_22_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %23 = add nsw i32 %22, %lx.1*/
begin
decode_run_i_20_23 = (decode_run_i_20_22 + decode_run_i_20_lx_1_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %23 = add nsw i32 %22, %lx.1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_21))
begin
decode_run_i_20_23_reg <= decode_run_i_20_23;
if (reset == 1'b0 && ^(decode_run_i_20_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_23_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %24 = getelementptr inbounds i32* %dst, i32 %23*/
begin
decode_run_i_20_24 = (arg_dst + (4 * decode_run_i_20_23_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %24 = getelementptr inbounds i32* %dst, i32 %23*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_22))
begin
decode_run_i_20_24_reg <= decode_run_i_20_24;
if (reset == 1'b0 && ^(decode_run_i_20_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_24_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
begin
decode_run_i_20_25 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_24))
begin
decode_run_i_20_25_reg <= decode_run_i_20_25;
if (reset == 1'b0 && ^(decode_run_i_20_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_20_25_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %tmp213 = add i32 %tmp222, %indvar202*/
begin
decode_run_i_26_tmp213 = (decode_run_i__outer42_tmp222_reg + decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %tmp213 = add i32 %tmp222, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_25))
begin
decode_run_i_26_tmp213_reg <= decode_run_i_26_tmp213;
if (reset == 1'b0 && ^(decode_run_i_26_tmp213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_tmp213_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %scevgep214 = getelementptr i32* %dst, i32 %tmp213*/
begin
decode_run_i_26_scevgep214 = (arg_dst + (4 * decode_run_i_26_tmp213_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %scevgep214 = getelementptr i32* %dst, i32 %tmp213*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
decode_run_i_26_scevgep214_reg <= decode_run_i_26_scevgep214;
if (reset == 1'b0 && ^(decode_run_i_26_scevgep214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_scevgep214_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %tmp206 = add i32 %tmp205, %indvar202*/
begin
decode_run_i_26_tmp206 = (decode_run_i__outer42_tmp205_reg + decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %tmp206 = add i32 %tmp205, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_25))
begin
decode_run_i_26_tmp206_reg <= decode_run_i_26_tmp206;
if (reset == 1'b0 && ^(decode_run_i_26_tmp206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_tmp206_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
begin
decode_run_i_26_27 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_29))
begin
decode_run_i_26_27_reg <= decode_run_i_26_27;
if (reset == 1'b0 && ^(decode_run_i_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_27_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %28 = icmp slt i32 %tmp206, %27*/
begin
decode_run_i_26_28 = ($signed(decode_run_i_26_tmp206_reg) < $signed(decode_run_i_26_27));
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %28 = icmp slt i32 %tmp206, %27*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_29))
begin
decode_run_i_26_28_reg <= decode_run_i_26_28;
if (reset == 1'b0 && ^(decode_run_i_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_28_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %26*/
/*   %indvar.next203 = add i32 %indvar202, 1*/
begin
decode_run_i_26_indvar_next203 = (decode_run_i_20_indvar202_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %26*/
/*   %indvar.next203 = add i32 %indvar202, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_25))
begin
decode_run_i_26_indvar_next203_reg <= decode_run_i_26_indvar_next203;
if (reset == 1'b0 && ^(decode_run_i_26_indvar_next203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_26_indvar_next203_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %tmp217 = sub i32 %tmp216, %indvar202*/
begin
decode_run_i_29_tmp217 = (decode_run_i__outer42_tmp216_reg - decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %tmp217 = sub i32 %tmp216, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
decode_run_i_29_tmp217_reg <= decode_run_i_29_tmp217;
if (reset == 1'b0 && ^(decode_run_i_29_tmp217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_tmp217_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_29_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_32))
begin
decode_run_i_29_30_reg <= decode_run_i_29_30;
if (reset == 1'b0 && ^(decode_run_i_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_30_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %31 = icmp slt i32 %tmp226, %30*/
begin
decode_run_i_29_31 = ($signed(decode_run_i__outer42_tmp226_reg) < $signed(decode_run_i_29_30));
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %31 = icmp slt i32 %tmp226, %30*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_32))
begin
decode_run_i_29_31_reg <= decode_run_i_29_31;
if (reset == 1'b0 && ^(decode_run_i_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_31_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %32 = icmp eq i32 %tmp216, %indvar202*/
begin
decode_run_i_29_32 = (decode_run_i__outer42_tmp216_reg == decode_run_i_20_indvar202_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %32 = icmp eq i32 %tmp216, %indvar202*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
decode_run_i_29_32_reg <= decode_run_i_29_32;
if (reset == 1'b0 && ^(decode_run_i_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_32_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %or.cond6 = or i1 %31, %32*/
begin
decode_run_i_29_or_cond6 = (decode_run_i_29_31 | decode_run_i_29_32_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %or.cond6 = or i1 %31, %32*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_32))
begin
decode_run_i_29_or_cond6_reg <= decode_run_i_29_or_cond6;
if (reset == 1'b0 && ^(decode_run_i_29_or_cond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_or_cond6_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %29*/
/*   %indvar.next208 = add i32 %indvar207, 1*/
begin
decode_run_i_29_indvar_next208 = (decode_run_i__outer42_indvar207_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %29*/
/*   %indvar.next208 = add i32 %indvar207, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
decode_run_i_29_indvar_next208_reg <= decode_run_i_29_indvar_next208;
if (reset == 1'b0 && ^(decode_run_i_29_indvar_next208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_29_indvar_next208_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %indvar207 = phi i32 [ 0, %.preheader40 ], [ %indvar.next208, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_indvar207 = 32'd0;
end
/* decode_run_i: %.outer42*/
/*   %indvar207 = phi i32 [ 0, %.preheader40 ], [ %indvar.next208, %29 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1))) */
begin
decode_run_i__outer42_indvar207 = decode_run_i_29_indvar_next208_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %indvar207 = phi i32 [ 0, %.preheader40 ], [ %indvar.next208, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_indvar207_reg <= decode_run_i__outer42_indvar207;
if (reset == 1'b0 && ^(decode_run_i__outer42_indvar207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_indvar207_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %indvar207 = phi i32 [ 0, %.preheader40 ], [ %indvar.next208, %29 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
decode_run_i__outer42_indvar207_reg <= decode_run_i__outer42_indvar207;
if (reset == 1'b0 && ^(decode_run_i__outer42_indvar207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_indvar207_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %x.1.ph = phi i32 [ %1, %.preheader40 ], [ 0, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_x_1_ph = decode_run_i_0_1_reg;
end
/* decode_run_i: %.outer42*/
/*   %x.1.ph = phi i32 [ %1, %.preheader40 ], [ 0, %29 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1))) */
begin
decode_run_i__outer42_x_1_ph = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %x.1.ph = phi i32 [ %1, %.preheader40 ], [ 0, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_x_1_ph_reg <= decode_run_i__outer42_x_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_x_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_x_1_ph_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %x.1.ph = phi i32 [ %1, %.preheader40 ], [ 0, %29 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
decode_run_i__outer42_x_1_ph_reg <= decode_run_i__outer42_x_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_x_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_x_1_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %.1.ph = phi i32 [ %run, %.preheader40 ], [ %tmp217, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42__1_ph = arg_run;
end
/* decode_run_i: %.outer42*/
/*   %.1.ph = phi i32 [ %run, %.preheader40 ], [ %tmp217, %29 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1))) */
begin
decode_run_i__outer42__1_ph = decode_run_i_29_tmp217_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %.1.ph = phi i32 [ %run, %.preheader40 ], [ %tmp217, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42__1_ph_reg <= decode_run_i__outer42__1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42__1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42__1_ph_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %.1.ph = phi i32 [ %run, %.preheader40 ], [ %tmp217, %29 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
decode_run_i__outer42__1_ph_reg <= decode_run_i__outer42__1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42__1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42__1_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %lx.1.ph = phi i32 [ %3, %.preheader40 ], [ %x.1, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_lx_1_ph = decode_run_i_0_3_reg;
end
/* decode_run_i: %.outer42*/
/*   %lx.1.ph = phi i32 [ %3, %.preheader40 ], [ %x.1, %29 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1))) */
begin
decode_run_i__outer42_lx_1_ph = decode_run_i_20_x_1_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %lx.1.ph = phi i32 [ %3, %.preheader40 ], [ %x.1, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_lx_1_ph_reg <= decode_run_i__outer42_lx_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_lx_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_lx_1_ph_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %lx.1.ph = phi i32 [ %3, %.preheader40 ], [ %x.1, %29 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
decode_run_i__outer42_lx_1_ph_reg <= decode_run_i__outer42_lx_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_lx_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_lx_1_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %ly.1.ph = phi i32 [ %4, %.preheader40 ], [ %tmp210262, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_ly_1_ph = decode_run_i_0_4_reg;
end
/* decode_run_i: %.outer42*/
/*   %ly.1.ph = phi i32 [ %4, %.preheader40 ], [ %tmp210262, %29 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1))) */
begin
decode_run_i__outer42_ly_1_ph = decode_run_i__outer42_tmp210262_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %ly.1.ph = phi i32 [ %4, %.preheader40 ], [ %tmp210262, %29 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader40_8) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer42_ly_1_ph_reg <= decode_run_i__outer42_ly_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_ly_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_ly_1_ph_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %ly.1.ph = phi i32 [ %4, %.preheader40 ], [ %tmp210262, %29 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_29_32) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_29_or_cond6 == 1'd1)))
begin
decode_run_i__outer42_ly_1_ph_reg <= decode_run_i__outer42_ly_1_ph;
if (reset == 1'b0 && ^(decode_run_i__outer42_ly_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_ly_1_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %tmp210262 = add i32 %2, %indvar207*/
begin
decode_run_i__outer42_tmp210262 = (decode_run_i_0_2_reg + decode_run_i__outer42_indvar207_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp210262 = add i32 %2, %indvar207*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_33))
begin
decode_run_i__outer42_tmp210262_reg <= decode_run_i__outer42_tmp210262;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp210262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp210262_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer42_tmp221 = decode_run_i__outer42_tmp221_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp221 = mul i32 %tmp210262, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_34))
begin
decode_run_i__outer42_tmp221_reg <= decode_run_i__outer42_tmp221;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp221_reg"); $finish; end
end
/* decode_run_i: %.outer42*/
/*   %tmp221 = mul i32 %tmp210262, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_34))
begin
decode_run_i__outer42_tmp221_reg <= decode_run_i__outer42_tmp221;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp221_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %tmp226 = add i32 %tmp225, %indvar207*/
begin
decode_run_i__outer42_tmp226 = (decode_run_i__preheader40_tmp225_reg + decode_run_i__outer42_indvar207_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp226 = add i32 %tmp225, %indvar207*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_33))
begin
decode_run_i__outer42_tmp226_reg <= decode_run_i__outer42_tmp226;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp226_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %tmp205 = add i32 %x.1.ph, 1*/
begin
decode_run_i__outer42_tmp205 = (decode_run_i__outer42_x_1_ph_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp205 = add i32 %x.1.ph, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_33))
begin
decode_run_i__outer42_tmp205_reg <= decode_run_i__outer42_tmp205;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp205_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %tmp216 = add i32 %.1.ph, -1*/
begin
decode_run_i__outer42_tmp216 = (decode_run_i__outer42__1_ph_reg + -32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp216 = add i32 %.1.ph, -1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_33))
begin
decode_run_i__outer42_tmp216_reg <= decode_run_i__outer42_tmp216;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp216_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer42*/
/*   %tmp222 = add i32 %x.1.ph, %tmp221*/
begin
decode_run_i__outer42_tmp222 = (decode_run_i__outer42_x_1_ph_reg + decode_run_i__outer42_tmp221);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp222 = add i32 %x.1.ph, %tmp221*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer42_34))
begin
decode_run_i__outer42_tmp222_reg <= decode_run_i__outer42_tmp222;
if (reset == 1'b0 && ^(decode_run_i__outer42_tmp222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer42_tmp222_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %33*/
/*   %34 = icmp slt i32 %2, 1*/
begin
decode_run_i_33_34 = ($signed(decode_run_i_0_2_reg) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* decode_run_i: %33*/
/*   %34 = icmp slt i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_33_35))
begin
decode_run_i_33_34_reg <= decode_run_i_33_34;
if (reset == 1'b0 && ^(decode_run_i_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_33_34_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader30*/
/*   %35 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
begin
decode_run_i__preheader30_35 = (arg_avctx + 4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %35 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_36))
begin
decode_run_i__preheader30_35_reg <= decode_run_i__preheader30_35;
if (reset == 1'b0 && ^(decode_run_i__preheader30_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_35_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__preheader30_tmp169 = decode_run_i__preheader30_tmp169_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %tmp169 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37))
begin
decode_run_i__preheader30_tmp169_reg <= decode_run_i__preheader30_tmp169;
if (reset == 1'b0 && ^(decode_run_i__preheader30_tmp169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_tmp169_reg"); $finish; end
end
/* decode_run_i: %.preheader30*/
/*   %tmp169 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37))
begin
decode_run_i__preheader30_tmp169_reg <= decode_run_i__preheader30_tmp169;
if (reset == 1'b0 && ^(decode_run_i__preheader30_tmp169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_tmp169_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader30*/
/*   %tmp170 = add i32 %tmp169, %off*/
begin
decode_run_i__preheader30_tmp170 = (decode_run_i__preheader30_tmp169 + arg_off);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %tmp170 = add i32 %tmp169, %off*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37))
begin
decode_run_i__preheader30_tmp170_reg <= decode_run_i__preheader30_tmp170;
if (reset == 1'b0 && ^(decode_run_i__preheader30_tmp170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_tmp170_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader30*/
/*   %tmp171 = add i32 %tmp170, 1*/
begin
decode_run_i__preheader30_tmp171 = (decode_run_i__preheader30_tmp170 + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %tmp171 = add i32 %tmp170, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37))
begin
decode_run_i__preheader30_tmp171_reg <= decode_run_i__preheader30_tmp171;
if (reset == 1'b0 && ^(decode_run_i__preheader30_tmp171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_tmp171_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader30*/
/*   %tmp193 = add i32 %2, 1*/
begin
decode_run_i__preheader30_tmp193 = (decode_run_i_0_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %tmp193 = add i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader30_36))
begin
decode_run_i__preheader30_tmp193_reg <= decode_run_i__preheader30_tmp193;
if (reset == 1'b0 && ^(decode_run_i__preheader30_tmp193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader30_tmp193_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %indvar161 = phi i32 [ 0, %.outer32 ], [ %indvar.next162, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_indvar161 = decode_run_i_38_indvar_next162_reg;
end
/* decode_run_i: %36*/
/*   %indvar161 = phi i32 [ 0, %.outer32 ], [ %indvar.next162, %38 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_36_indvar161 = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %indvar161 = phi i32 [ 0, %.outer32 ], [ %indvar.next162, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_indvar161_reg <= decode_run_i_36_indvar161;
if (reset == 1'b0 && ^(decode_run_i_36_indvar161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_indvar161_reg"); $finish; end
end
/* decode_run_i: %36*/
/*   %indvar161 = phi i32 [ 0, %.outer32 ], [ %indvar.next162, %38 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_36_indvar161_reg <= decode_run_i_36_indvar161;
if (reset == 1'b0 && ^(decode_run_i_36_indvar161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_indvar161_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %.02 = phi i32 [ %.02.ph, %.outer32 ], [ %39, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36__02 = decode_run_i_38_39_reg;
end
/* decode_run_i: %36*/
/*   %.02 = phi i32 [ %.02.ph, %.outer32 ], [ %39, %38 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_36__02 = decode_run_i__outer32__02_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %.02 = phi i32 [ %.02.ph, %.outer32 ], [ %39, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36__02_reg <= decode_run_i_36__02;
if (reset == 1'b0 && ^(decode_run_i_36__02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36__02_reg"); $finish; end
end
/* decode_run_i: %36*/
/*   %.02 = phi i32 [ %.02.ph, %.outer32 ], [ %39, %38 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_36__02_reg <= decode_run_i_36__02;
if (reset == 1'b0 && ^(decode_run_i_36__02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36__02_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %lx.2 = phi i32 [ %lx.2.ph, %.outer32 ], [ %x.2, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_lx_2 = decode_run_i_36_x_2_reg;
end
/* decode_run_i: %36*/
/*   %lx.2 = phi i32 [ %lx.2.ph, %.outer32 ], [ %x.2, %38 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_36_lx_2 = decode_run_i__outer32_lx_2_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %lx.2 = phi i32 [ %lx.2.ph, %.outer32 ], [ %x.2, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_lx_2_reg <= decode_run_i_36_lx_2;
if (reset == 1'b0 && ^(decode_run_i_36_lx_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_lx_2_reg"); $finish; end
end
/* decode_run_i: %36*/
/*   %lx.2 = phi i32 [ %lx.2.ph, %.outer32 ], [ %x.2, %38 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_36_lx_2_reg <= decode_run_i_36_lx_2;
if (reset == 1'b0 && ^(decode_run_i_36_lx_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_lx_2_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %ly.2 = phi i32 [ %ly.2.ph, %.outer32 ], [ %tmp169261, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_ly_2 = decode_run_i__outer32_tmp169261_reg;
end
/* decode_run_i: %36*/
/*   %ly.2 = phi i32 [ %ly.2.ph, %.outer32 ], [ %tmp169261, %38 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_36_ly_2 = decode_run_i__outer32_ly_2_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %ly.2 = phi i32 [ %ly.2.ph, %.outer32 ], [ %tmp169261, %38 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_38_45) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_38_41 == 1'd1)))
begin
decode_run_i_36_ly_2_reg <= decode_run_i_36_ly_2;
if (reset == 1'b0 && ^(decode_run_i_36_ly_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_ly_2_reg"); $finish; end
end
/* decode_run_i: %36*/
/*   %ly.2 = phi i32 [ %ly.2.ph, %.outer32 ], [ %tmp169261, %38 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer32_50) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_36_ly_2_reg <= decode_run_i_36_ly_2;
if (reset == 1'b0 && ^(decode_run_i_36_ly_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_ly_2_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %x.2 = add i32 %x.2.ph, %indvar161*/
begin
decode_run_i_36_x_2 = (decode_run_i__outer32_x_2_ph_reg + decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %x.2 = add i32 %x.2.ph, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_36_38))
begin
decode_run_i_36_x_2_reg <= decode_run_i_36_x_2;
if (reset == 1'b0 && ^(decode_run_i_36_x_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_x_2_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %.2 = sub i32 %.2.ph, %indvar161*/
begin
decode_run_i_36__2 = (decode_run_i__outer32__2_ph_reg - decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %.2 = sub i32 %.2.ph, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_36_38))
begin
decode_run_i_36__2_reg <= decode_run_i_36__2;
if (reset == 1'b0 && ^(decode_run_i_36__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36__2_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %36*/
/*   %37 = icmp sgt i32 %.2, 0*/
begin
decode_run_i_36_37 = ($signed(decode_run_i_36__2) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* decode_run_i: %36*/
/*   %37 = icmp sgt i32 %.2, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_36_38))
begin
decode_run_i_36_37_reg <= decode_run_i_36_37;
if (reset == 1'b0 && ^(decode_run_i_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_36_37_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %tmp174 = add i32 %tmp190, %indvar161*/
begin
decode_run_i_38_tmp174 = (decode_run_i__outer32_tmp190_reg + decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %tmp174 = add i32 %tmp190, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_39))
begin
decode_run_i_38_tmp174_reg <= decode_run_i_38_tmp174;
if (reset == 1'b0 && ^(decode_run_i_38_tmp174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_tmp174_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %tmp178 = add i32 %tmp187, %indvar161*/
begin
decode_run_i_38_tmp178 = (decode_run_i__outer32_tmp187_reg + decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %tmp178 = add i32 %tmp187, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_39))
begin
decode_run_i_38_tmp178_reg <= decode_run_i_38_tmp178;
if (reset == 1'b0 && ^(decode_run_i_38_tmp178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_tmp178_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %scevgep179 = getelementptr i32* %dst, i32 %tmp178*/
begin
decode_run_i_38_scevgep179 = (arg_dst + (4 * decode_run_i_38_tmp178_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %scevgep179 = getelementptr i32* %dst, i32 %tmp178*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
decode_run_i_38_scevgep179_reg <= decode_run_i_38_scevgep179;
if (reset == 1'b0 && ^(decode_run_i_38_scevgep179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_scevgep179_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %scevgep175 = getelementptr i32* %dst, i32 %tmp174*/
begin
decode_run_i_38_scevgep175 = (arg_dst + (4 * decode_run_i_38_tmp174_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %scevgep175 = getelementptr i32* %dst, i32 %tmp174*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
decode_run_i_38_scevgep175_reg <= decode_run_i_38_scevgep175;
if (reset == 1'b0 && ^(decode_run_i_38_scevgep175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_scevgep175_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %tmp165 = add i32 %tmp164, %indvar161*/
begin
decode_run_i_38_tmp165 = (decode_run_i__outer32_tmp164_reg + decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %tmp165 = add i32 %tmp164, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_39))
begin
decode_run_i_38_tmp165_reg <= decode_run_i_38_tmp165;
if (reset == 1'b0 && ^(decode_run_i_38_tmp165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_tmp165_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
begin
decode_run_i_38_39 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
decode_run_i_38_39_reg <= decode_run_i_38_39;
if (reset == 1'b0 && ^(decode_run_i_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_39_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
begin
decode_run_i_38_40 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_45))
begin
decode_run_i_38_40_reg <= decode_run_i_38_40;
if (reset == 1'b0 && ^(decode_run_i_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_40_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %41 = icmp slt i32 %tmp165, %40*/
begin
decode_run_i_38_41 = ($signed(decode_run_i_38_tmp165_reg) < $signed(decode_run_i_38_40));
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %41 = icmp slt i32 %tmp165, %40*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_45))
begin
decode_run_i_38_41_reg <= decode_run_i_38_41;
if (reset == 1'b0 && ^(decode_run_i_38_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_41_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %38*/
/*   %indvar.next162 = add i32 %indvar161, 1*/
begin
decode_run_i_38_indvar_next162 = (decode_run_i_36_indvar161_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %38*/
/*   %indvar.next162 = add i32 %indvar161, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_39))
begin
decode_run_i_38_indvar_next162_reg <= decode_run_i_38_indvar_next162;
if (reset == 1'b0 && ^(decode_run_i_38_indvar_next162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_38_indvar_next162_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %tmp182 = sub i32 %tmp181, %indvar161*/
begin
decode_run_i_42_tmp182 = (decode_run_i__outer32_tmp181_reg - decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %tmp182 = sub i32 %tmp181, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
decode_run_i_42_tmp182_reg <= decode_run_i_42_tmp182;
if (reset == 1'b0 && ^(decode_run_i_42_tmp182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_tmp182_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_42_43 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_48))
begin
decode_run_i_42_43_reg <= decode_run_i_42_43;
if (reset == 1'b0 && ^(decode_run_i_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_43_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %44 = icmp slt i32 %tmp194, %43*/
begin
decode_run_i_42_44 = ($signed(decode_run_i__outer32_tmp194_reg) < $signed(decode_run_i_42_43));
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %44 = icmp slt i32 %tmp194, %43*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_48))
begin
decode_run_i_42_44_reg <= decode_run_i_42_44;
if (reset == 1'b0 && ^(decode_run_i_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_44_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %45 = icmp eq i32 %tmp181, %indvar161*/
begin
decode_run_i_42_45 = (decode_run_i__outer32_tmp181_reg == decode_run_i_36_indvar161_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %45 = icmp eq i32 %tmp181, %indvar161*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
decode_run_i_42_45_reg <= decode_run_i_42_45;
if (reset == 1'b0 && ^(decode_run_i_42_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_45_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %or.cond7 = or i1 %44, %45*/
begin
decode_run_i_42_or_cond7 = (decode_run_i_42_44 | decode_run_i_42_45_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %or.cond7 = or i1 %44, %45*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_48))
begin
decode_run_i_42_or_cond7_reg <= decode_run_i_42_or_cond7;
if (reset == 1'b0 && ^(decode_run_i_42_or_cond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_or_cond7_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %42*/
/*   %indvar.next167 = add i32 %indvar166, 1*/
begin
decode_run_i_42_indvar_next167 = (decode_run_i__outer32_indvar166_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %42*/
/*   %indvar.next167 = add i32 %indvar166, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
decode_run_i_42_indvar_next167_reg <= decode_run_i_42_indvar_next167;
if (reset == 1'b0 && ^(decode_run_i_42_indvar_next167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_42_indvar_next167_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %indvar166 = phi i32 [ 0, %.preheader30 ], [ %indvar.next167, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_indvar166 = 32'd0;
end
/* decode_run_i: %.outer32*/
/*   %indvar166 = phi i32 [ 0, %.preheader30 ], [ %indvar.next167, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32_indvar166 = decode_run_i_42_indvar_next167_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %indvar166 = phi i32 [ 0, %.preheader30 ], [ %indvar.next167, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_indvar166_reg <= decode_run_i__outer32_indvar166;
if (reset == 1'b0 && ^(decode_run_i__outer32_indvar166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_indvar166_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %indvar166 = phi i32 [ 0, %.preheader30 ], [ %indvar.next167, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32_indvar166_reg <= decode_run_i__outer32_indvar166;
if (reset == 1'b0 && ^(decode_run_i__outer32_indvar166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_indvar166_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %.02.ph = phi i32 [ %clr, %.preheader30 ], [ %39, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32__02_ph = arg_clr;
end
/* decode_run_i: %.outer32*/
/*   %.02.ph = phi i32 [ %clr, %.preheader30 ], [ %39, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32__02_ph = decode_run_i_38_39_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %.02.ph = phi i32 [ %clr, %.preheader30 ], [ %39, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32__02_ph_reg <= decode_run_i__outer32__02_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32__02_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32__02_ph_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %.02.ph = phi i32 [ %clr, %.preheader30 ], [ %39, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32__02_ph_reg <= decode_run_i__outer32__02_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32__02_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32__02_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %x.2.ph = phi i32 [ %1, %.preheader30 ], [ 0, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_x_2_ph = decode_run_i_0_1_reg;
end
/* decode_run_i: %.outer32*/
/*   %x.2.ph = phi i32 [ %1, %.preheader30 ], [ 0, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32_x_2_ph = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %x.2.ph = phi i32 [ %1, %.preheader30 ], [ 0, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_x_2_ph_reg <= decode_run_i__outer32_x_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_x_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_x_2_ph_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %x.2.ph = phi i32 [ %1, %.preheader30 ], [ 0, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32_x_2_ph_reg <= decode_run_i__outer32_x_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_x_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_x_2_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %.2.ph = phi i32 [ %run, %.preheader30 ], [ %tmp182, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32__2_ph = arg_run;
end
/* decode_run_i: %.outer32*/
/*   %.2.ph = phi i32 [ %run, %.preheader30 ], [ %tmp182, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32__2_ph = decode_run_i_42_tmp182_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %.2.ph = phi i32 [ %run, %.preheader30 ], [ %tmp182, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32__2_ph_reg <= decode_run_i__outer32__2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32__2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32__2_ph_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %.2.ph = phi i32 [ %run, %.preheader30 ], [ %tmp182, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32__2_ph_reg <= decode_run_i__outer32__2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32__2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32__2_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %lx.2.ph = phi i32 [ %3, %.preheader30 ], [ %x.2, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_lx_2_ph = decode_run_i_0_3_reg;
end
/* decode_run_i: %.outer32*/
/*   %lx.2.ph = phi i32 [ %3, %.preheader30 ], [ %x.2, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32_lx_2_ph = decode_run_i_36_x_2_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %lx.2.ph = phi i32 [ %3, %.preheader30 ], [ %x.2, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_lx_2_ph_reg <= decode_run_i__outer32_lx_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_lx_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_lx_2_ph_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %lx.2.ph = phi i32 [ %3, %.preheader30 ], [ %x.2, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32_lx_2_ph_reg <= decode_run_i__outer32_lx_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_lx_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_lx_2_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %ly.2.ph = phi i32 [ %4, %.preheader30 ], [ %tmp169261, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_ly_2_ph = decode_run_i_0_4_reg;
end
/* decode_run_i: %.outer32*/
/*   %ly.2.ph = phi i32 [ %4, %.preheader30 ], [ %tmp169261, %42 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1))) */
begin
decode_run_i__outer32_ly_2_ph = decode_run_i__outer32_tmp169261_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %ly.2.ph = phi i32 [ %4, %.preheader30 ], [ %tmp169261, %42 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader30_37) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer32_ly_2_ph_reg <= decode_run_i__outer32_ly_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_ly_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_ly_2_ph_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %ly.2.ph = phi i32 [ %4, %.preheader30 ], [ %tmp169261, %42 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_42_48) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_42_or_cond7 == 1'd1)))
begin
decode_run_i__outer32_ly_2_ph_reg <= decode_run_i__outer32_ly_2_ph;
if (reset == 1'b0 && ^(decode_run_i__outer32_ly_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_ly_2_ph_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer32_tmp185 = decode_run_i__outer32_tmp185_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp185 = mul i32 %indvar166, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp185_reg <= decode_run_i__outer32_tmp185;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp185_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %tmp185 = mul i32 %indvar166, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp185_reg <= decode_run_i__outer32_tmp185;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp185_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp169261 = add i32 %2, %indvar166*/
begin
decode_run_i__outer32_tmp169261 = (decode_run_i_0_2_reg + decode_run_i__outer32_indvar166_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp169261 = add i32 %2, %indvar166*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_49))
begin
decode_run_i__outer32_tmp169261_reg <= decode_run_i__outer32_tmp169261;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp169261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp169261_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer32_tmp186 = decode_run_i__outer32_tmp186_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp186 = mul i32 %tmp169261, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp186_reg <= decode_run_i__outer32_tmp186;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp186_reg"); $finish; end
end
/* decode_run_i: %.outer32*/
/*   %tmp186 = mul i32 %tmp169261, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp186_reg <= decode_run_i__outer32_tmp186;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp186_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp189 = add i32 %tmp171, %tmp185*/
begin
decode_run_i__outer32_tmp189 = (decode_run_i__preheader30_tmp171_reg + decode_run_i__outer32_tmp185);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp189 = add i32 %tmp171, %tmp185*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp189_reg <= decode_run_i__outer32_tmp189;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp189_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp194 = add i32 %tmp193, %indvar166*/
begin
decode_run_i__outer32_tmp194 = (decode_run_i__preheader30_tmp193_reg + decode_run_i__outer32_indvar166_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp194 = add i32 %tmp193, %indvar166*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_49))
begin
decode_run_i__outer32_tmp194_reg <= decode_run_i__outer32_tmp194;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp194_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp164 = add i32 %x.2.ph, 1*/
begin
decode_run_i__outer32_tmp164 = (decode_run_i__outer32_x_2_ph_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp164 = add i32 %x.2.ph, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_49))
begin
decode_run_i__outer32_tmp164_reg <= decode_run_i__outer32_tmp164;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp164_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp181 = add i32 %.2.ph, -1*/
begin
decode_run_i__outer32_tmp181 = (decode_run_i__outer32__2_ph_reg + -32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp181 = add i32 %.2.ph, -1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_49))
begin
decode_run_i__outer32_tmp181_reg <= decode_run_i__outer32_tmp181;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp181_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp187 = add i32 %x.2.ph, %tmp186*/
begin
decode_run_i__outer32_tmp187 = (decode_run_i__outer32_x_2_ph_reg + decode_run_i__outer32_tmp186);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp187 = add i32 %x.2.ph, %tmp186*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp187_reg <= decode_run_i__outer32_tmp187;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp187_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer32*/
/*   %tmp190 = add i32 %x.2.ph, %tmp189*/
begin
decode_run_i__outer32_tmp190 = (decode_run_i__outer32_x_2_ph_reg + decode_run_i__outer32_tmp189);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp190 = add i32 %x.2.ph, %tmp189*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer32_50))
begin
decode_run_i__outer32_tmp190_reg <= decode_run_i__outer32_tmp190;
if (reset == 1'b0 && ^(decode_run_i__outer32_tmp190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer32_tmp190_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %46*/
/*   %47 = icmp slt i32 %2, 1*/
begin
decode_run_i_46_47 = ($signed(decode_run_i_0_2_reg) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* decode_run_i: %46*/
/*   %47 = icmp slt i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_46_51))
begin
decode_run_i_46_47_reg <= decode_run_i_46_47;
if (reset == 1'b0 && ^(decode_run_i_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_46_47_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %48*/
/*   %49 = icmp eq i32 %2, 1*/
begin
decode_run_i_48_49 = (decode_run_i_0_2_reg == 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %48*/
/*   %49 = icmp eq i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_48_52))
begin
decode_run_i_48_49_reg <= decode_run_i_48_49;
if (reset == 1'b0 && ^(decode_run_i_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_48_49_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %48*/
/*   %50 = icmp eq i32 %1, 0*/
begin
decode_run_i_48_50 = (decode_run_i_0_1_reg == 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %48*/
/*   %50 = icmp eq i32 %1, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_48_52))
begin
decode_run_i_48_50_reg <= decode_run_i_48_50;
if (reset == 1'b0 && ^(decode_run_i_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_48_50_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %48*/
/*   %or.cond8 = and i1 %49, %50*/
begin
decode_run_i_48_or_cond8 = (decode_run_i_48_49 & decode_run_i_48_50);
end
end
always @(posedge clk) begin
/* decode_run_i: %48*/
/*   %or.cond8 = and i1 %49, %50*/
if ((cur_state == LEGUP_F_decode_run_i_BB_48_52))
begin
decode_run_i_48_or_cond8_reg <= decode_run_i_48_or_cond8;
if (reset == 1'b0 && ^(decode_run_i_48_or_cond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_48_or_cond8_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader20*/
/*   %51 = shl nsw i32 %backstep, 2*/
begin
decode_run_i__preheader20_51 = (arg_backstep <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %51 = shl nsw i32 %backstep, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_53))
begin
decode_run_i__preheader20_51_reg <= decode_run_i__preheader20_51;
if (reset == 1'b0 && ^(decode_run_i__preheader20_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_51_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader20*/
/*   %52 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
begin
decode_run_i__preheader20_52 = (arg_avctx + 4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %52 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_53))
begin
decode_run_i__preheader20_52_reg <= decode_run_i__preheader20_52;
if (reset == 1'b0 && ^(decode_run_i__preheader20_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_52_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__preheader20_tmp114 = decode_run_i__preheader20_tmp114_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %tmp114 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54))
begin
decode_run_i__preheader20_tmp114_reg <= decode_run_i__preheader20_tmp114;
if (reset == 1'b0 && ^(decode_run_i__preheader20_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_tmp114_reg"); $finish; end
end
/* decode_run_i: %.preheader20*/
/*   %tmp114 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54))
begin
decode_run_i__preheader20_tmp114_reg <= decode_run_i__preheader20_tmp114;
if (reset == 1'b0 && ^(decode_run_i__preheader20_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader20*/
/*   %tmp115 = add i32 %tmp114, %off*/
begin
decode_run_i__preheader20_tmp115 = (decode_run_i__preheader20_tmp114 + arg_off);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %tmp115 = add i32 %tmp114, %off*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54))
begin
decode_run_i__preheader20_tmp115_reg <= decode_run_i__preheader20_tmp115;
if (reset == 1'b0 && ^(decode_run_i__preheader20_tmp115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_tmp115_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader20*/
/*   %tmp152 = add i32 %2, 1*/
begin
decode_run_i__preheader20_tmp152 = (decode_run_i_0_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %tmp152 = add i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader20_53))
begin
decode_run_i__preheader20_tmp152_reg <= decode_run_i__preheader20_tmp152;
if (reset == 1'b0 && ^(decode_run_i__preheader20_tmp152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader20_tmp152_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %indvar105 = phi i32 [ 0, %.outer22 ], [ %indvar.next106, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_indvar105 = decode_run_i_55_indvar_next106_reg;
end
/* decode_run_i: %53*/
/*   %indvar105 = phi i32 [ 0, %.outer22 ], [ %indvar.next106, %55 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_53_indvar105 = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %indvar105 = phi i32 [ 0, %.outer22 ], [ %indvar.next106, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_indvar105_reg <= decode_run_i_53_indvar105;
if (reset == 1'b0 && ^(decode_run_i_53_indvar105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_indvar105_reg"); $finish; end
end
/* decode_run_i: %53*/
/*   %indvar105 = phi i32 [ 0, %.outer22 ], [ %indvar.next106, %55 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_53_indvar105_reg <= decode_run_i_53_indvar105;
if (reset == 1'b0 && ^(decode_run_i_53_indvar105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_indvar105_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %.13 = phi i32 [ %.13.ph, %.outer22 ], [ %89, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53__13 = decode_run_i_55_89_reg;
end
/* decode_run_i: %53*/
/*   %.13 = phi i32 [ %.13.ph, %.outer22 ], [ %89, %55 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_53__13 = decode_run_i__outer22__13_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %.13 = phi i32 [ %.13.ph, %.outer22 ], [ %89, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53__13_reg <= decode_run_i_53__13;
if (reset == 1'b0 && ^(decode_run_i_53__13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53__13_reg"); $finish; end
end
/* decode_run_i: %53*/
/*   %.13 = phi i32 [ %.13.ph, %.outer22 ], [ %89, %55 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_53__13_reg <= decode_run_i_53__13;
if (reset == 1'b0 && ^(decode_run_i_53__13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53__13_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %lx.3 = phi i32 [ %lx.3.ph, %.outer22 ], [ %x.3, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_lx_3 = decode_run_i_53_x_3_reg;
end
/* decode_run_i: %53*/
/*   %lx.3 = phi i32 [ %lx.3.ph, %.outer22 ], [ %x.3, %55 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_53_lx_3 = decode_run_i__outer22_lx_3_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %lx.3 = phi i32 [ %lx.3.ph, %.outer22 ], [ %x.3, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_lx_3_reg <= decode_run_i_53_lx_3;
if (reset == 1'b0 && ^(decode_run_i_53_lx_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_lx_3_reg"); $finish; end
end
/* decode_run_i: %53*/
/*   %lx.3 = phi i32 [ %lx.3.ph, %.outer22 ], [ %x.3, %55 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_53_lx_3_reg <= decode_run_i_53_lx_3;
if (reset == 1'b0 && ^(decode_run_i_53_lx_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_lx_3_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %ly.3 = phi i32 [ %ly.3.ph, %.outer22 ], [ %tmp114258, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_ly_3 = decode_run_i__outer22_tmp114258_reg;
end
/* decode_run_i: %53*/
/*   %ly.3 = phi i32 [ %ly.3.ph, %.outer22 ], [ %tmp114258, %55 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_53_ly_3 = decode_run_i__outer22_ly_3_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %ly.3 = phi i32 [ %ly.3.ph, %.outer22 ], [ %tmp114258, %55 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_55_67) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_55_91 == 1'd1)))
begin
decode_run_i_53_ly_3_reg <= decode_run_i_53_ly_3;
if (reset == 1'b0 && ^(decode_run_i_53_ly_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_ly_3_reg"); $finish; end
end
/* decode_run_i: %53*/
/*   %ly.3 = phi i32 [ %ly.3.ph, %.outer22 ], [ %tmp114258, %55 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer22_72) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_53_ly_3_reg <= decode_run_i_53_ly_3;
if (reset == 1'b0 && ^(decode_run_i_53_ly_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_ly_3_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %x.3 = add i32 %x.3.ph, %indvar105*/
begin
decode_run_i_53_x_3 = (decode_run_i__outer22_x_3_ph_reg + decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %x.3 = add i32 %x.3.ph, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_53_55))
begin
decode_run_i_53_x_3_reg <= decode_run_i_53_x_3;
if (reset == 1'b0 && ^(decode_run_i_53_x_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_x_3_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %tmp110 = shl i32 %indvar105, 2*/
begin
decode_run_i_53_tmp110 = (decode_run_i_53_indvar105_reg <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %tmp110 = shl i32 %indvar105, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB_53_55))
begin
decode_run_i_53_tmp110_reg <= decode_run_i_53_tmp110;
if (reset == 1'b0 && ^(decode_run_i_53_tmp110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_tmp110_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %.3 = sub i32 %.3.ph, %indvar105*/
begin
decode_run_i_53__3 = (decode_run_i__outer22__3_ph_reg - decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %.3 = sub i32 %.3.ph, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_53_55))
begin
decode_run_i_53__3_reg <= decode_run_i_53__3;
if (reset == 1'b0 && ^(decode_run_i_53__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53__3_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %53*/
/*   %54 = icmp sgt i32 %.3, 0*/
begin
decode_run_i_53_54 = ($signed(decode_run_i_53__3) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* decode_run_i: %53*/
/*   %54 = icmp sgt i32 %.3, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_53_55))
begin
decode_run_i_53_54_reg <= decode_run_i_53_54;
if (reset == 1'b0 && ^(decode_run_i_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_53_54_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp126 = add i32 %tmp125, %tmp110*/
begin
decode_run_i_55_tmp126 = (decode_run_i__outer22_tmp125_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp126 = add i32 %tmp125, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp126_reg <= decode_run_i_55_tmp126;
if (reset == 1'b0 && ^(decode_run_i_55_tmp126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp126_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp123 = add i32 %tmp122, %tmp110*/
begin
decode_run_i_55_tmp123 = (decode_run_i__outer22_tmp122_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp123 = add i32 %tmp122, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp123_reg <= decode_run_i_55_tmp123;
if (reset == 1'b0 && ^(decode_run_i_55_tmp123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp123_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp120 = add i32 %tmp119, %tmp110*/
begin
decode_run_i_55_tmp120 = (decode_run_i__outer22_tmp119_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp120 = add i32 %tmp119, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp120_reg <= decode_run_i_55_tmp120;
if (reset == 1'b0 && ^(decode_run_i_55_tmp120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp120_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp138 = add i32 %tmp147, %indvar105*/
begin
decode_run_i_55_tmp138 = (decode_run_i__outer22_tmp147_reg + decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp138 = add i32 %tmp147, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp138_reg <= decode_run_i_55_tmp138;
if (reset == 1'b0 && ^(decode_run_i_55_tmp138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp138_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %scevgep139 = getelementptr i32* %dst, i32 %tmp138*/
begin
decode_run_i_55_scevgep139 = (arg_dst + (4 * decode_run_i_55_tmp138_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %scevgep139 = getelementptr i32* %dst, i32 %tmp138*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_scevgep139_reg <= decode_run_i_55_scevgep139;
if (reset == 1'b0 && ^(decode_run_i_55_scevgep139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_scevgep139_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp134 = add i32 %tmp118, %tmp110*/
begin
decode_run_i_55_tmp134 = (decode_run_i__outer22_tmp118_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp134 = add i32 %tmp118, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp134_reg <= decode_run_i_55_tmp134;
if (reset == 1'b0 && ^(decode_run_i_55_tmp134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp134_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp132 = add i32 %tmp131260, %tmp110*/
begin
decode_run_i_55_tmp132 = (decode_run_i__outer22_tmp131260_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp132 = add i32 %tmp131260, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp132_reg <= decode_run_i_55_tmp132;
if (reset == 1'b0 && ^(decode_run_i_55_tmp132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp132_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp129 = add i32 %tmp128259, %tmp110*/
begin
decode_run_i_55_tmp129 = (decode_run_i__outer22_tmp128259_reg + decode_run_i_53_tmp110_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp129 = add i32 %tmp128259, %tmp110*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp129_reg <= decode_run_i_55_tmp129;
if (reset == 1'b0 && ^(decode_run_i_55_tmp129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp129_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %scevgep127 = getelementptr i32* %dst, i32 %tmp126*/
begin
decode_run_i_55_scevgep127 = (arg_dst + (4 * decode_run_i_55_tmp126_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %scevgep127 = getelementptr i32* %dst, i32 %tmp126*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_scevgep127_reg <= decode_run_i_55_scevgep127;
if (reset == 1'b0 && ^(decode_run_i_55_scevgep127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_scevgep127_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %scevgep124 = getelementptr i32* %dst, i32 %tmp123*/
begin
decode_run_i_55_scevgep124 = (arg_dst + (4 * decode_run_i_55_tmp123_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %scevgep124 = getelementptr i32* %dst, i32 %tmp123*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_scevgep124_reg <= decode_run_i_55_scevgep124;
if (reset == 1'b0 && ^(decode_run_i_55_scevgep124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_scevgep124_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %scevgep121 = getelementptr i32* %dst, i32 %tmp120*/
begin
decode_run_i_55_scevgep121 = (arg_dst + (4 * decode_run_i_55_tmp120_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %scevgep121 = getelementptr i32* %dst, i32 %tmp120*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_scevgep121_reg <= decode_run_i_55_scevgep121;
if (reset == 1'b0 && ^(decode_run_i_55_scevgep121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_scevgep121_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp109 = add i32 %tmp108, %indvar105*/
begin
decode_run_i_55_tmp109 = (decode_run_i__outer22_tmp108_reg + decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp109 = add i32 %tmp108, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp109_reg <= decode_run_i_55_tmp109;
if (reset == 1'b0 && ^(decode_run_i_55_tmp109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp109_reg"); $finish; end
end
end
always @(*) begin
decode_run_i_55_56 = decode_run_i_55_56_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %56 = mul nsw i32 %ly.3, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_56_reg <= decode_run_i_55_56;
if (reset == 1'b0 && ^(decode_run_i_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_56_reg"); $finish; end
end
/* decode_run_i: %55*/
/*   %56 = mul nsw i32 %ly.3, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_56_reg <= decode_run_i_55_56;
if (reset == 1'b0 && ^(decode_run_i_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_56_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %57 = add nsw i32 %56, %lx.3*/
begin
decode_run_i_55_57 = (decode_run_i_55_56 + decode_run_i_53_lx_3_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %57 = add nsw i32 %56, %lx.3*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_57_reg <= decode_run_i_55_57;
if (reset == 1'b0 && ^(decode_run_i_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_57_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %58 = shl nsw i32 %57, 2*/
begin
decode_run_i_55_58 = (decode_run_i_55_57 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %58 = shl nsw i32 %57, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_58_reg <= decode_run_i_55_58;
if (reset == 1'b0 && ^(decode_run_i_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_58_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %59 = icmp eq i32 %x.3, 0*/
begin
decode_run_i_55_59 = (decode_run_i_53_x_3_reg == 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %59 = icmp eq i32 %x.3, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_59_reg <= decode_run_i_55_59;
if (reset == 1'b0 && ^(decode_run_i_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_59_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %z.0 = select i1 %59, i32 %51, i32 0*/
begin
decode_run_i_55_z_0 = (decode_run_i_55_59 ? decode_run_i__preheader20_51_reg : 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %z.0 = select i1 %59, i32 %51, i32 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_z_0_reg <= decode_run_i_55_z_0;
if (reset == 1'b0 && ^(decode_run_i_55_z_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_z_0_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %60 = getelementptr inbounds i32* %dst, i32 %58*/
begin
decode_run_i_55_60 = (arg_dst + (4 * decode_run_i_55_58_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %60 = getelementptr inbounds i32* %dst, i32 %58*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
decode_run_i_55_60_reg <= decode_run_i_55_60;
if (reset == 1'b0 && ^(decode_run_i_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_60_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
decode_run_i_55_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
decode_run_i_55_61_reg <= decode_run_i_55_61;
if (reset == 1'b0 && ^(decode_run_i_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_61_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
begin
decode_run_i_55_62 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
decode_run_i_55_62_reg <= decode_run_i_55_62;
if (reset == 1'b0 && ^(decode_run_i_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_62_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp135 = sub i32 %tmp134, %z.0*/
begin
decode_run_i_55_tmp135 = (decode_run_i_55_tmp134 - decode_run_i_55_z_0);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp135 = sub i32 %tmp134, %z.0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp135_reg <= decode_run_i_55_tmp135;
if (reset == 1'b0 && ^(decode_run_i_55_tmp135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp135_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %63 = getelementptr inbounds i32* %dst, i32 %tmp135*/
begin
decode_run_i_55_63 = (arg_dst + (4 * decode_run_i_55_tmp135_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %63 = getelementptr inbounds i32* %dst, i32 %tmp135*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_63_reg <= decode_run_i_55_63;
if (reset == 1'b0 && ^(decode_run_i_55_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_63_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
begin
decode_run_i_55_64 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
decode_run_i_55_64_reg <= decode_run_i_55_64;
if (reset == 1'b0 && ^(decode_run_i_55_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_64_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %65 = add i32 %62, %61*/
begin
decode_run_i_55_65 = (decode_run_i_55_62_reg + decode_run_i_55_61);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %65 = add i32 %62, %61*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
decode_run_i_55_65_reg <= decode_run_i_55_65;
if (reset == 1'b0 && ^(decode_run_i_55_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_65_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %66 = sub i32 %65, %64*/
begin
decode_run_i_55_66 = (decode_run_i_55_65_reg - decode_run_i_55_64);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %66 = sub i32 %65, %64*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
decode_run_i_55_66_reg <= decode_run_i_55_66;
if (reset == 1'b0 && ^(decode_run_i_55_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_66_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %67 = or i32 %58, 1*/
begin
decode_run_i_55_67 = (decode_run_i_55_58 | 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %67 = or i32 %58, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_67_reg <= decode_run_i_55_67;
if (reset == 1'b0 && ^(decode_run_i_55_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_67_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %68 = getelementptr inbounds i32* %dst, i32 %67*/
begin
decode_run_i_55_68 = (arg_dst + (4 * decode_run_i_55_67_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %68 = getelementptr inbounds i32* %dst, i32 %67*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
decode_run_i_55_68_reg <= decode_run_i_55_68;
if (reset == 1'b0 && ^(decode_run_i_55_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_68_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
begin
decode_run_i_55_69 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
decode_run_i_55_69_reg <= decode_run_i_55_69;
if (reset == 1'b0 && ^(decode_run_i_55_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_69_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
begin
decode_run_i_55_70 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_70_reg <= decode_run_i_55_70;
if (reset == 1'b0 && ^(decode_run_i_55_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_70_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp133 = sub i32 %tmp132, %z.0*/
begin
decode_run_i_55_tmp133 = (decode_run_i_55_tmp132 - decode_run_i_55_z_0);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp133 = sub i32 %tmp132, %z.0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp133_reg <= decode_run_i_55_tmp133;
if (reset == 1'b0 && ^(decode_run_i_55_tmp133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp133_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %71 = getelementptr inbounds i32* %dst, i32 %tmp133*/
begin
decode_run_i_55_71 = (arg_dst + (4 * decode_run_i_55_tmp133_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %71 = getelementptr inbounds i32* %dst, i32 %tmp133*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_71_reg <= decode_run_i_55_71;
if (reset == 1'b0 && ^(decode_run_i_55_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_71_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
begin
decode_run_i_55_72 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
decode_run_i_55_72_reg <= decode_run_i_55_72;
if (reset == 1'b0 && ^(decode_run_i_55_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_72_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %73 = add i32 %70, %69*/
begin
decode_run_i_55_73 = (decode_run_i_55_70 + decode_run_i_55_69_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %73 = add i32 %70, %69*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_73_reg <= decode_run_i_55_73;
if (reset == 1'b0 && ^(decode_run_i_55_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_73_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %74 = sub i32 %73, %72*/
begin
decode_run_i_55_74 = (decode_run_i_55_73 - decode_run_i_55_72_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %74 = sub i32 %73, %72*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_74_reg <= decode_run_i_55_74;
if (reset == 1'b0 && ^(decode_run_i_55_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_74_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %75 = or i32 %58, 2*/
begin
decode_run_i_55_75 = (decode_run_i_55_58 | 32'd2);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %75 = or i32 %58, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_75_reg <= decode_run_i_55_75;
if (reset == 1'b0 && ^(decode_run_i_55_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_75_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %76 = getelementptr inbounds i32* %dst, i32 %75*/
begin
decode_run_i_55_76 = (arg_dst + (4 * decode_run_i_55_75_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %76 = getelementptr inbounds i32* %dst, i32 %75*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
decode_run_i_55_76_reg <= decode_run_i_55_76;
if (reset == 1'b0 && ^(decode_run_i_55_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_76_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
begin
decode_run_i_55_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_63))
begin
decode_run_i_55_77_reg <= decode_run_i_55_77;
if (reset == 1'b0 && ^(decode_run_i_55_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_77_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
begin
decode_run_i_55_78 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_78_reg <= decode_run_i_55_78;
if (reset == 1'b0 && ^(decode_run_i_55_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_78_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %tmp130 = sub i32 %tmp129, %z.0*/
begin
decode_run_i_55_tmp130 = (decode_run_i_55_tmp129 - decode_run_i_55_z_0);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %tmp130 = sub i32 %tmp129, %z.0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_tmp130_reg <= decode_run_i_55_tmp130;
if (reset == 1'b0 && ^(decode_run_i_55_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %79 = getelementptr inbounds i32* %dst, i32 %tmp130*/
begin
decode_run_i_55_79 = (arg_dst + (4 * decode_run_i_55_tmp130_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %79 = getelementptr inbounds i32* %dst, i32 %tmp130*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
decode_run_i_55_79_reg <= decode_run_i_55_79;
if (reset == 1'b0 && ^(decode_run_i_55_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_79_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
begin
decode_run_i_55_80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
decode_run_i_55_80_reg <= decode_run_i_55_80;
if (reset == 1'b0 && ^(decode_run_i_55_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_80_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %81 = add i32 %78, %77*/
begin
decode_run_i_55_81 = (decode_run_i_55_78_reg + decode_run_i_55_77);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %81 = add i32 %78, %77*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_63))
begin
decode_run_i_55_81_reg <= decode_run_i_55_81;
if (reset == 1'b0 && ^(decode_run_i_55_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_81_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %82 = sub i32 %81, %80*/
begin
decode_run_i_55_82 = (decode_run_i_55_81_reg - decode_run_i_55_80);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %82 = sub i32 %81, %80*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
decode_run_i_55_82_reg <= decode_run_i_55_82;
if (reset == 1'b0 && ^(decode_run_i_55_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_82_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %83 = shl i32 %82, 16*/
begin
decode_run_i_55_83 = (decode_run_i_55_82 <<< (32'd16 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %83 = shl i32 %82, 16*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
decode_run_i_55_83_reg <= decode_run_i_55_83;
if (reset == 1'b0 && ^(decode_run_i_55_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_83_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %84 = and i32 %83, 16711680*/
begin
decode_run_i_55_84 = (decode_run_i_55_83 & 32'd16711680);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %84 = and i32 %83, 16711680*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
decode_run_i_55_84_reg <= decode_run_i_55_84;
if (reset == 1'b0 && ^(decode_run_i_55_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_84_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %85 = shl i32 %74, 8*/
begin
decode_run_i_55_85 = (decode_run_i_55_74 <<< (32'd8 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %85 = shl i32 %74, 8*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_85_reg <= decode_run_i_55_85;
if (reset == 1'b0 && ^(decode_run_i_55_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_85_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %86 = and i32 %85, 65280*/
begin
decode_run_i_55_86 = (decode_run_i_55_85 & 32'd65280);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %86 = and i32 %85, 65280*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_86_reg <= decode_run_i_55_86;
if (reset == 1'b0 && ^(decode_run_i_55_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_86_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %87 = and i32 %66, 255*/
begin
decode_run_i_55_87 = (decode_run_i_55_66 & 32'd255);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %87 = and i32 %66, 255*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
decode_run_i_55_87_reg <= decode_run_i_55_87;
if (reset == 1'b0 && ^(decode_run_i_55_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_87_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %88 = or i32 %86, %87*/
begin
decode_run_i_55_88 = (decode_run_i_55_86 | decode_run_i_55_87_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %88 = or i32 %86, %87*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
decode_run_i_55_88_reg <= decode_run_i_55_88;
if (reset == 1'b0 && ^(decode_run_i_55_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_88_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %89 = or i32 %88, %84*/
begin
decode_run_i_55_89 = (decode_run_i_55_88_reg | decode_run_i_55_84);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %89 = or i32 %88, %84*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
decode_run_i_55_89_reg <= decode_run_i_55_89;
if (reset == 1'b0 && ^(decode_run_i_55_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_89_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
begin
decode_run_i_55_90 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_67))
begin
decode_run_i_55_90_reg <= decode_run_i_55_90;
if (reset == 1'b0 && ^(decode_run_i_55_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_90_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %91 = icmp slt i32 %tmp109, %90*/
begin
decode_run_i_55_91 = ($signed(decode_run_i_55_tmp109_reg) < $signed(decode_run_i_55_90));
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %91 = icmp slt i32 %tmp109, %90*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_67))
begin
decode_run_i_55_91_reg <= decode_run_i_55_91;
if (reset == 1'b0 && ^(decode_run_i_55_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_91_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %55*/
/*   %indvar.next106 = add i32 %indvar105, 1*/
begin
decode_run_i_55_indvar_next106 = (decode_run_i_53_indvar105_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %indvar.next106 = add i32 %indvar105, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_56))
begin
decode_run_i_55_indvar_next106_reg <= decode_run_i_55_indvar_next106;
if (reset == 1'b0 && ^(decode_run_i_55_indvar_next106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_55_indvar_next106_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %tmp142 = sub i32 %tmp141, %indvar105*/
begin
decode_run_i_92_tmp142 = (decode_run_i__outer22_tmp141_reg - decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %tmp142 = sub i32 %tmp141, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
decode_run_i_92_tmp142_reg <= decode_run_i_92_tmp142;
if (reset == 1'b0 && ^(decode_run_i_92_tmp142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_tmp142_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_92_93 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_70))
begin
decode_run_i_92_93_reg <= decode_run_i_92_93;
if (reset == 1'b0 && ^(decode_run_i_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_93_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %94 = icmp slt i32 %tmp153, %93*/
begin
decode_run_i_92_94 = ($signed(decode_run_i__outer22_tmp153_reg) < $signed(decode_run_i_92_93));
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %94 = icmp slt i32 %tmp153, %93*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_70))
begin
decode_run_i_92_94_reg <= decode_run_i_92_94;
if (reset == 1'b0 && ^(decode_run_i_92_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_94_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %95 = icmp eq i32 %tmp141, %indvar105*/
begin
decode_run_i_92_95 = (decode_run_i__outer22_tmp141_reg == decode_run_i_53_indvar105_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %95 = icmp eq i32 %tmp141, %indvar105*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
decode_run_i_92_95_reg <= decode_run_i_92_95;
if (reset == 1'b0 && ^(decode_run_i_92_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_95_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %or.cond9 = or i1 %94, %95*/
begin
decode_run_i_92_or_cond9 = (decode_run_i_92_94 | decode_run_i_92_95_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %or.cond9 = or i1 %94, %95*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_70))
begin
decode_run_i_92_or_cond9_reg <= decode_run_i_92_or_cond9;
if (reset == 1'b0 && ^(decode_run_i_92_or_cond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_or_cond9_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %92*/
/*   %indvar.next112 = add i32 %indvar111, 1*/
begin
decode_run_i_92_indvar_next112 = (decode_run_i__outer22_indvar111_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %92*/
/*   %indvar.next112 = add i32 %indvar111, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
decode_run_i_92_indvar_next112_reg <= decode_run_i_92_indvar_next112;
if (reset == 1'b0 && ^(decode_run_i_92_indvar_next112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_92_indvar_next112_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %indvar111 = phi i32 [ 0, %.preheader20 ], [ %indvar.next112, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_indvar111 = 32'd0;
end
/* decode_run_i: %.outer22*/
/*   %indvar111 = phi i32 [ 0, %.preheader20 ], [ %indvar.next112, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22_indvar111 = decode_run_i_92_indvar_next112_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %indvar111 = phi i32 [ 0, %.preheader20 ], [ %indvar.next112, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_indvar111_reg <= decode_run_i__outer22_indvar111;
if (reset == 1'b0 && ^(decode_run_i__outer22_indvar111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_indvar111_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %indvar111 = phi i32 [ 0, %.preheader20 ], [ %indvar.next112, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22_indvar111_reg <= decode_run_i__outer22_indvar111;
if (reset == 1'b0 && ^(decode_run_i__outer22_indvar111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_indvar111_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %.13.ph = phi i32 [ %clr, %.preheader20 ], [ %89, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22__13_ph = arg_clr;
end
/* decode_run_i: %.outer22*/
/*   %.13.ph = phi i32 [ %clr, %.preheader20 ], [ %89, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22__13_ph = decode_run_i_55_89_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %.13.ph = phi i32 [ %clr, %.preheader20 ], [ %89, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22__13_ph_reg <= decode_run_i__outer22__13_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22__13_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22__13_ph_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %.13.ph = phi i32 [ %clr, %.preheader20 ], [ %89, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22__13_ph_reg <= decode_run_i__outer22__13_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22__13_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22__13_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %x.3.ph = phi i32 [ %1, %.preheader20 ], [ 0, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_x_3_ph = decode_run_i_0_1_reg;
end
/* decode_run_i: %.outer22*/
/*   %x.3.ph = phi i32 [ %1, %.preheader20 ], [ 0, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22_x_3_ph = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %x.3.ph = phi i32 [ %1, %.preheader20 ], [ 0, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_x_3_ph_reg <= decode_run_i__outer22_x_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_x_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_x_3_ph_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %x.3.ph = phi i32 [ %1, %.preheader20 ], [ 0, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22_x_3_ph_reg <= decode_run_i__outer22_x_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_x_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_x_3_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %.3.ph = phi i32 [ %run, %.preheader20 ], [ %tmp142, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22__3_ph = arg_run;
end
/* decode_run_i: %.outer22*/
/*   %.3.ph = phi i32 [ %run, %.preheader20 ], [ %tmp142, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22__3_ph = decode_run_i_92_tmp142_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %.3.ph = phi i32 [ %run, %.preheader20 ], [ %tmp142, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22__3_ph_reg <= decode_run_i__outer22__3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22__3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22__3_ph_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %.3.ph = phi i32 [ %run, %.preheader20 ], [ %tmp142, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22__3_ph_reg <= decode_run_i__outer22__3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22__3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22__3_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %lx.3.ph = phi i32 [ %3, %.preheader20 ], [ %x.3, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_lx_3_ph = decode_run_i_0_3_reg;
end
/* decode_run_i: %.outer22*/
/*   %lx.3.ph = phi i32 [ %3, %.preheader20 ], [ %x.3, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22_lx_3_ph = decode_run_i_53_x_3_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %lx.3.ph = phi i32 [ %3, %.preheader20 ], [ %x.3, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_lx_3_ph_reg <= decode_run_i__outer22_lx_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_lx_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_lx_3_ph_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %lx.3.ph = phi i32 [ %3, %.preheader20 ], [ %x.3, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22_lx_3_ph_reg <= decode_run_i__outer22_lx_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_lx_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_lx_3_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %ly.3.ph = phi i32 [ %4, %.preheader20 ], [ %tmp114258, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_ly_3_ph = decode_run_i_0_4_reg;
end
/* decode_run_i: %.outer22*/
/*   %ly.3.ph = phi i32 [ %4, %.preheader20 ], [ %tmp114258, %92 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1))) */
begin
decode_run_i__outer22_ly_3_ph = decode_run_i__outer22_tmp114258_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %ly.3.ph = phi i32 [ %4, %.preheader20 ], [ %tmp114258, %92 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader20_54) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer22_ly_3_ph_reg <= decode_run_i__outer22_ly_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_ly_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_ly_3_ph_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %ly.3.ph = phi i32 [ %4, %.preheader20 ], [ %tmp114258, %92 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_92_70) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_92_or_cond9 == 1'd1)))
begin
decode_run_i__outer22_ly_3_ph_reg <= decode_run_i__outer22_ly_3_ph;
if (reset == 1'b0 && ^(decode_run_i__outer22_ly_3_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_ly_3_ph_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer22_tmp145 = decode_run_i__outer22_tmp145_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp145 = mul i32 %indvar111, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp145_reg <= decode_run_i__outer22_tmp145;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp145_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %tmp145 = mul i32 %indvar111, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp145_reg <= decode_run_i__outer22_tmp145;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp145_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp114258 = add i32 %2, %indvar111*/
begin
decode_run_i__outer22_tmp114258 = (decode_run_i_0_2_reg + decode_run_i__outer22_indvar111_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp114258 = add i32 %2, %indvar111*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_71))
begin
decode_run_i__outer22_tmp114258_reg <= decode_run_i__outer22_tmp114258;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp114258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp114258_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer22_tmp146 = decode_run_i__outer22_tmp146_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp146 = mul i32 %tmp114258, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp146_reg <= decode_run_i__outer22_tmp146;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp146_reg"); $finish; end
end
/* decode_run_i: %.outer22*/
/*   %tmp146 = mul i32 %tmp114258, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp146_reg <= decode_run_i__outer22_tmp146;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp146_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp149 = add i32 %tmp115, %tmp145*/
begin
decode_run_i__outer22_tmp149 = (decode_run_i__preheader20_tmp115_reg + decode_run_i__outer22_tmp145);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp149 = add i32 %tmp115, %tmp145*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp149_reg <= decode_run_i__outer22_tmp149;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp149_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp153 = add i32 %tmp152, %indvar111*/
begin
decode_run_i__outer22_tmp153 = (decode_run_i__preheader20_tmp152_reg + decode_run_i__outer22_indvar111_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp153 = add i32 %tmp152, %indvar111*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_71))
begin
decode_run_i__outer22_tmp153_reg <= decode_run_i__outer22_tmp153;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp153_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp108 = add i32 %x.3.ph, 1*/
begin
decode_run_i__outer22_tmp108 = (decode_run_i__outer22_x_3_ph_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp108 = add i32 %x.3.ph, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_71))
begin
decode_run_i__outer22_tmp108_reg <= decode_run_i__outer22_tmp108;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp108_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp117 = add i32 %x.3.ph, %tmp149*/
begin
decode_run_i__outer22_tmp117 = (decode_run_i__outer22_x_3_ph_reg + decode_run_i__outer22_tmp149);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp117 = add i32 %x.3.ph, %tmp149*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp117_reg <= decode_run_i__outer22_tmp117;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp117_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp118 = shl i32 %tmp117, 2*/
begin
decode_run_i__outer22_tmp118 = (decode_run_i__outer22_tmp117 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp118 = shl i32 %tmp117, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp118_reg <= decode_run_i__outer22_tmp118;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp118_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp119 = add i32 %tmp118, 6*/
begin
decode_run_i__outer22_tmp119 = (decode_run_i__outer22_tmp118 + 32'd6);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp119 = add i32 %tmp118, 6*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp119_reg <= decode_run_i__outer22_tmp119;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp119_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp122 = add i32 %tmp118, 5*/
begin
decode_run_i__outer22_tmp122 = (decode_run_i__outer22_tmp118 + 32'd5);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp122 = add i32 %tmp118, 5*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp122_reg <= decode_run_i__outer22_tmp122;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp122_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp125 = add i32 %tmp118, 4*/
begin
decode_run_i__outer22_tmp125 = (decode_run_i__outer22_tmp118 + 32'd4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp125 = add i32 %tmp118, 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp125_reg <= decode_run_i__outer22_tmp125;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp125_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp128259 = or i32 %tmp118, 2*/
begin
decode_run_i__outer22_tmp128259 = (decode_run_i__outer22_tmp118 | 32'd2);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp128259 = or i32 %tmp118, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp128259_reg <= decode_run_i__outer22_tmp128259;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp128259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp128259_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp131260 = or i32 %tmp118, 1*/
begin
decode_run_i__outer22_tmp131260 = (decode_run_i__outer22_tmp118 | 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp131260 = or i32 %tmp118, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp131260_reg <= decode_run_i__outer22_tmp131260;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp131260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp131260_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp141 = add i32 %.3.ph, -1*/
begin
decode_run_i__outer22_tmp141 = (decode_run_i__outer22__3_ph_reg + -32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp141 = add i32 %.3.ph, -1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_71))
begin
decode_run_i__outer22_tmp141_reg <= decode_run_i__outer22_tmp141;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp141_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer22*/
/*   %tmp147 = add i32 %x.3.ph, %tmp146*/
begin
decode_run_i__outer22_tmp147 = (decode_run_i__outer22_x_3_ph_reg + decode_run_i__outer22_tmp146);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp147 = add i32 %x.3.ph, %tmp146*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer22_72))
begin
decode_run_i__outer22_tmp147_reg <= decode_run_i__outer22_tmp147;
if (reset == 1'b0 && ^(decode_run_i__outer22_tmp147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer22_tmp147_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %96*/
/*   %97 = icmp slt i32 %2, 1*/
begin
decode_run_i_96_97 = ($signed(decode_run_i_0_2_reg) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* decode_run_i: %96*/
/*   %97 = icmp slt i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_96_73))
begin
decode_run_i_96_97_reg <= decode_run_i_96_97;
if (reset == 1'b0 && ^(decode_run_i_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_96_97_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %98*/
/*   %99 = icmp eq i32 %2, 1*/
begin
decode_run_i_98_99 = (decode_run_i_0_2_reg == 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %98*/
/*   %99 = icmp eq i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_98_74))
begin
decode_run_i_98_99_reg <= decode_run_i_98_99;
if (reset == 1'b0 && ^(decode_run_i_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_98_99_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %98*/
/*   %100 = icmp eq i32 %1, 0*/
begin
decode_run_i_98_100 = (decode_run_i_0_1_reg == 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %98*/
/*   %100 = icmp eq i32 %1, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_98_74))
begin
decode_run_i_98_100_reg <= decode_run_i_98_100;
if (reset == 1'b0 && ^(decode_run_i_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_98_100_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %98*/
/*   %or.cond10 = and i1 %99, %100*/
begin
decode_run_i_98_or_cond10 = (decode_run_i_98_99 & decode_run_i_98_100);
end
end
always @(posedge clk) begin
/* decode_run_i: %98*/
/*   %or.cond10 = and i1 %99, %100*/
if ((cur_state == LEGUP_F_decode_run_i_BB_98_74))
begin
decode_run_i_98_or_cond10_reg <= decode_run_i_98_or_cond10;
if (reset == 1'b0 && ^(decode_run_i_98_or_cond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_98_or_cond10_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader*/
/*   %101 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
begin
decode_run_i__preheader_101 = (arg_avctx + 4);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %101 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_75))
begin
decode_run_i__preheader_101_reg <= decode_run_i__preheader_101;
if (reset == 1'b0 && ^(decode_run_i__preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_101_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__preheader_tmp73 = decode_run_i__preheader_tmp73_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %tmp73 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_76))
begin
decode_run_i__preheader_tmp73_reg <= decode_run_i__preheader_tmp73;
if (reset == 1'b0 && ^(decode_run_i__preheader_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_tmp73_reg"); $finish; end
end
/* decode_run_i: %.preheader*/
/*   %tmp73 = mul i32 %2, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_76))
begin
decode_run_i__preheader_tmp73_reg <= decode_run_i__preheader_tmp73;
if (reset == 1'b0 && ^(decode_run_i__preheader_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_tmp73_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader*/
/*   %tmp74 = add i32 %tmp73, %off*/
begin
decode_run_i__preheader_tmp74 = (decode_run_i__preheader_tmp73 + arg_off);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %tmp74 = add i32 %tmp73, %off*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_76))
begin
decode_run_i__preheader_tmp74_reg <= decode_run_i__preheader_tmp74;
if (reset == 1'b0 && ^(decode_run_i__preheader_tmp74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_tmp74_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader*/
/*   %tmp96 = add i32 %2, 1*/
begin
decode_run_i__preheader_tmp96 = (decode_run_i_0_2_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %tmp96 = add i32 %2, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_75))
begin
decode_run_i__preheader_tmp96_reg <= decode_run_i__preheader_tmp96;
if (reset == 1'b0 && ^(decode_run_i__preheader_tmp96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_tmp96_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.preheader*/
/*   %backstep.op = sub i32 0, %backstep*/
begin
decode_run_i__preheader_backstep_op = (32'd0 - arg_backstep);
end
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %backstep.op = sub i32 0, %backstep*/
if ((cur_state == LEGUP_F_decode_run_i_BB__preheader_75))
begin
decode_run_i__preheader_backstep_op_reg <= decode_run_i__preheader_backstep_op;
if (reset == 1'b0 && ^(decode_run_i__preheader_backstep_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__preheader_backstep_op_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %indvar = phi i32 [ 0, %.outer ], [ %indvar.next, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_indvar = decode_run_i_104_indvar_next_reg;
end
/* decode_run_i: %102*/
/*   %indvar = phi i32 [ 0, %.outer ], [ %indvar.next, %104 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_102_indvar = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %indvar = phi i32 [ 0, %.outer ], [ %indvar.next, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_indvar_reg <= decode_run_i_102_indvar;
if (reset == 1'b0 && ^(decode_run_i_102_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_indvar_reg"); $finish; end
end
/* decode_run_i: %102*/
/*   %indvar = phi i32 [ 0, %.outer ], [ %indvar.next, %104 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_102_indvar_reg <= decode_run_i_102_indvar;
if (reset == 1'b0 && ^(decode_run_i_102_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_indvar_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %.24 = phi i32 [ %.24.ph, %.outer ], [ %107, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102__24 = decode_run_i_104_107_reg;
end
/* decode_run_i: %102*/
/*   %.24 = phi i32 [ %.24.ph, %.outer ], [ %107, %104 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_102__24 = decode_run_i__outer__24_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %.24 = phi i32 [ %.24.ph, %.outer ], [ %107, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102__24_reg <= decode_run_i_102__24;
if (reset == 1'b0 && ^(decode_run_i_102__24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102__24_reg"); $finish; end
end
/* decode_run_i: %102*/
/*   %.24 = phi i32 [ %.24.ph, %.outer ], [ %107, %104 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_102__24_reg <= decode_run_i_102__24;
if (reset == 1'b0 && ^(decode_run_i_102__24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102__24_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %lx.4 = phi i32 [ %lx.4.ph, %.outer ], [ %x.4, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_lx_4 = decode_run_i_102_x_4_reg;
end
/* decode_run_i: %102*/
/*   %lx.4 = phi i32 [ %lx.4.ph, %.outer ], [ %x.4, %104 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_102_lx_4 = decode_run_i__outer_lx_4_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %lx.4 = phi i32 [ %lx.4.ph, %.outer ], [ %x.4, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_lx_4_reg <= decode_run_i_102_lx_4;
if (reset == 1'b0 && ^(decode_run_i_102_lx_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_lx_4_reg"); $finish; end
end
/* decode_run_i: %102*/
/*   %lx.4 = phi i32 [ %lx.4.ph, %.outer ], [ %x.4, %104 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_102_lx_4_reg <= decode_run_i_102_lx_4;
if (reset == 1'b0 && ^(decode_run_i_102_lx_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_lx_4_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %ly.4 = phi i32 [ %ly.4.ph, %.outer ], [ %tmp73257, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_ly_4 = decode_run_i__outer_tmp73257_reg;
end
/* decode_run_i: %102*/
/*   %ly.4 = phi i32 [ %ly.4.ph, %.outer ], [ %tmp73257, %104 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_102_ly_4 = decode_run_i__outer_ly_4_ph_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %ly.4 = phi i32 [ %ly.4.ph, %.outer ], [ %tmp73257, %104 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_104_84) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_104_109 == 1'd1)))
begin
decode_run_i_102_ly_4_reg <= decode_run_i_102_ly_4;
if (reset == 1'b0 && ^(decode_run_i_102_ly_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_ly_4_reg"); $finish; end
end
/* decode_run_i: %102*/
/*   %ly.4 = phi i32 [ %ly.4.ph, %.outer ], [ %tmp73257, %104 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__outer_89) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_102_ly_4_reg <= decode_run_i_102_ly_4;
if (reset == 1'b0 && ^(decode_run_i_102_ly_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_ly_4_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %x.4 = add i32 %x.4.ph, %indvar*/
begin
decode_run_i_102_x_4 = (decode_run_i__outer_x_4_ph_reg + decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %x.4 = add i32 %x.4.ph, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_102_77))
begin
decode_run_i_102_x_4_reg <= decode_run_i_102_x_4;
if (reset == 1'b0 && ^(decode_run_i_102_x_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_x_4_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %.4 = sub i32 %.4.ph, %indvar*/
begin
decode_run_i_102__4 = (decode_run_i__outer__4_ph_reg - decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %.4 = sub i32 %.4.ph, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_102_77))
begin
decode_run_i_102__4_reg <= decode_run_i_102__4;
if (reset == 1'b0 && ^(decode_run_i_102__4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102__4_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %102*/
/*   %103 = icmp sgt i32 %.4, 0*/
begin
decode_run_i_102_103 = ($signed(decode_run_i_102__4) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* decode_run_i: %102*/
/*   %103 = icmp sgt i32 %.4, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_102_77))
begin
decode_run_i_102_103_reg <= decode_run_i_102_103;
if (reset == 1'b0 && ^(decode_run_i_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_102_103_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %tmp81 = add i32 %tmp89, %indvar*/
begin
decode_run_i_104_tmp81 = (decode_run_i__outer_tmp89_reg + decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %tmp81 = add i32 %tmp89, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_tmp81_reg <= decode_run_i_104_tmp81;
if (reset == 1'b0 && ^(decode_run_i_104_tmp81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_tmp81_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %scevgep = getelementptr i32* %dst, i32 %tmp81*/
begin
decode_run_i_104_scevgep = (arg_dst + (4 * decode_run_i_104_tmp81_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %scevgep = getelementptr i32* %dst, i32 %tmp81*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
decode_run_i_104_scevgep_reg <= decode_run_i_104_scevgep;
if (reset == 1'b0 && ^(decode_run_i_104_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %tmp69 = add i32 %tmp, %indvar*/
begin
decode_run_i_104_tmp69 = (decode_run_i__outer_tmp_reg + decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %tmp69 = add i32 %tmp, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_tmp69_reg <= decode_run_i_104_tmp69;
if (reset == 1'b0 && ^(decode_run_i_104_tmp69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_tmp69_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %tmp93 = add i32 %tmp92, %indvar*/
begin
decode_run_i_104_tmp93 = (decode_run_i__outer_tmp92_reg + decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %tmp93 = add i32 %tmp92, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_tmp93_reg <= decode_run_i_104_tmp93;
if (reset == 1'b0 && ^(decode_run_i_104_tmp93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_tmp93_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %105 = icmp eq i32 %x.4, 0*/
begin
decode_run_i_104_105 = (decode_run_i_102_x_4_reg == 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %105 = icmp eq i32 %x.4, 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_105_reg <= decode_run_i_104_105;
if (reset == 1'b0 && ^(decode_run_i_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_105_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %backstep..neg = select i1 %105, i32 %backstep.op, i32 0*/
begin
decode_run_i_104_backstep__neg = (decode_run_i_104_105 ? decode_run_i__preheader_backstep_op_reg : 32'd0);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %backstep..neg = select i1 %105, i32 %backstep.op, i32 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_backstep__neg_reg <= decode_run_i_104_backstep__neg;
if (reset == 1'b0 && ^(decode_run_i_104_backstep__neg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_backstep__neg_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %tmp78 = add i32 %backstep..neg, %tmp93*/
begin
decode_run_i_104_tmp78 = (decode_run_i_104_backstep__neg + decode_run_i_104_tmp93);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %tmp78 = add i32 %backstep..neg, %tmp93*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_tmp78_reg <= decode_run_i_104_tmp78;
if (reset == 1'b0 && ^(decode_run_i_104_tmp78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_tmp78_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %106 = getelementptr inbounds i32* %dst, i32 %tmp78*/
begin
decode_run_i_104_106 = (arg_dst + (4 * decode_run_i_104_tmp78_reg));
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %106 = getelementptr inbounds i32* %dst, i32 %tmp78*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
decode_run_i_104_106_reg <= decode_run_i_104_106;
if (reset == 1'b0 && ^(decode_run_i_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_106_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
begin
decode_run_i_104_107 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
decode_run_i_104_107_reg <= decode_run_i_104_107;
if (reset == 1'b0 && ^(decode_run_i_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_107_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
begin
decode_run_i_104_108 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_84))
begin
decode_run_i_104_108_reg <= decode_run_i_104_108;
if (reset == 1'b0 && ^(decode_run_i_104_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_108_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %109 = icmp slt i32 %tmp69, %108*/
begin
decode_run_i_104_109 = ($signed(decode_run_i_104_tmp69_reg) < $signed(decode_run_i_104_108));
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %109 = icmp slt i32 %tmp69, %108*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_84))
begin
decode_run_i_104_109_reg <= decode_run_i_104_109;
if (reset == 1'b0 && ^(decode_run_i_104_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_109_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %104*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
decode_run_i_104_indvar_next = (decode_run_i_102_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %104*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_78))
begin
decode_run_i_104_indvar_next_reg <= decode_run_i_104_indvar_next;
if (reset == 1'b0 && ^(decode_run_i_104_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_104_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %tmp84 = sub i32 %tmp83, %indvar*/
begin
decode_run_i_110_tmp84 = (decode_run_i__outer_tmp83_reg - decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %tmp84 = sub i32 %tmp83, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
decode_run_i_110_tmp84_reg <= decode_run_i_110_tmp84;
if (reset == 1'b0 && ^(decode_run_i_110_tmp84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_tmp84_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
begin
decode_run_i_110_111 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_87))
begin
decode_run_i_110_111_reg <= decode_run_i_110_111;
if (reset == 1'b0 && ^(decode_run_i_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_111_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %112 = icmp slt i32 %tmp97, %111*/
begin
decode_run_i_110_112 = ($signed(decode_run_i__outer_tmp97_reg) < $signed(decode_run_i_110_111));
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %112 = icmp slt i32 %tmp97, %111*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_87))
begin
decode_run_i_110_112_reg <= decode_run_i_110_112;
if (reset == 1'b0 && ^(decode_run_i_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_112_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %113 = icmp eq i32 %tmp83, %indvar*/
begin
decode_run_i_110_113 = (decode_run_i__outer_tmp83_reg == decode_run_i_102_indvar_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %113 = icmp eq i32 %tmp83, %indvar*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
decode_run_i_110_113_reg <= decode_run_i_110_113;
if (reset == 1'b0 && ^(decode_run_i_110_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_113_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %or.cond11 = or i1 %112, %113*/
begin
decode_run_i_110_or_cond11 = (decode_run_i_110_112 | decode_run_i_110_113_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %or.cond11 = or i1 %112, %113*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_87))
begin
decode_run_i_110_or_cond11_reg <= decode_run_i_110_or_cond11;
if (reset == 1'b0 && ^(decode_run_i_110_or_cond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_or_cond11_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %110*/
/*   %indvar.next71 = add i32 %indvar70, 1*/
begin
decode_run_i_110_indvar_next71 = (decode_run_i__outer_indvar70_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %110*/
/*   %indvar.next71 = add i32 %indvar70, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
decode_run_i_110_indvar_next71_reg <= decode_run_i_110_indvar_next71;
if (reset == 1'b0 && ^(decode_run_i_110_indvar_next71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_110_indvar_next71_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %indvar70 = phi i32 [ 0, %.preheader ], [ %indvar.next71, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_indvar70 = 32'd0;
end
/* decode_run_i: %.outer*/
/*   %indvar70 = phi i32 [ 0, %.preheader ], [ %indvar.next71, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer_indvar70 = decode_run_i_110_indvar_next71_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %indvar70 = phi i32 [ 0, %.preheader ], [ %indvar.next71, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_indvar70_reg <= decode_run_i__outer_indvar70;
if (reset == 1'b0 && ^(decode_run_i__outer_indvar70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_indvar70_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %indvar70 = phi i32 [ 0, %.preheader ], [ %indvar.next71, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer_indvar70_reg <= decode_run_i__outer_indvar70;
if (reset == 1'b0 && ^(decode_run_i__outer_indvar70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_indvar70_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %.24.ph = phi i32 [ %clr, %.preheader ], [ %107, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer__24_ph = arg_clr;
end
/* decode_run_i: %.outer*/
/*   %.24.ph = phi i32 [ %clr, %.preheader ], [ %107, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer__24_ph = decode_run_i_104_107_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %.24.ph = phi i32 [ %clr, %.preheader ], [ %107, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer__24_ph_reg <= decode_run_i__outer__24_ph;
if (reset == 1'b0 && ^(decode_run_i__outer__24_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer__24_ph_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %.24.ph = phi i32 [ %clr, %.preheader ], [ %107, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer__24_ph_reg <= decode_run_i__outer__24_ph;
if (reset == 1'b0 && ^(decode_run_i__outer__24_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer__24_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %x.4.ph = phi i32 [ %1, %.preheader ], [ 0, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_x_4_ph = decode_run_i_0_1_reg;
end
/* decode_run_i: %.outer*/
/*   %x.4.ph = phi i32 [ %1, %.preheader ], [ 0, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer_x_4_ph = 32'd0;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %x.4.ph = phi i32 [ %1, %.preheader ], [ 0, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_x_4_ph_reg <= decode_run_i__outer_x_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_x_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_x_4_ph_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %x.4.ph = phi i32 [ %1, %.preheader ], [ 0, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer_x_4_ph_reg <= decode_run_i__outer_x_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_x_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_x_4_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %.4.ph = phi i32 [ %run, %.preheader ], [ %tmp84, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer__4_ph = arg_run;
end
/* decode_run_i: %.outer*/
/*   %.4.ph = phi i32 [ %run, %.preheader ], [ %tmp84, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer__4_ph = decode_run_i_110_tmp84_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %.4.ph = phi i32 [ %run, %.preheader ], [ %tmp84, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer__4_ph_reg <= decode_run_i__outer__4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer__4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer__4_ph_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %.4.ph = phi i32 [ %run, %.preheader ], [ %tmp84, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer__4_ph_reg <= decode_run_i__outer__4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer__4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer__4_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %lx.4.ph = phi i32 [ %3, %.preheader ], [ %x.4, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_lx_4_ph = decode_run_i_0_3_reg;
end
/* decode_run_i: %.outer*/
/*   %lx.4.ph = phi i32 [ %3, %.preheader ], [ %x.4, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer_lx_4_ph = decode_run_i_102_x_4_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %lx.4.ph = phi i32 [ %3, %.preheader ], [ %x.4, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_lx_4_ph_reg <= decode_run_i__outer_lx_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_lx_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_lx_4_ph_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %lx.4.ph = phi i32 [ %3, %.preheader ], [ %x.4, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer_lx_4_ph_reg <= decode_run_i__outer_lx_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_lx_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_lx_4_ph_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %ly.4.ph = phi i32 [ %4, %.preheader ], [ %tmp73257, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_ly_4_ph = decode_run_i_0_4_reg;
end
/* decode_run_i: %.outer*/
/*   %ly.4.ph = phi i32 [ %4, %.preheader ], [ %tmp73257, %110 ]*/
else /* if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1))) */
begin
decode_run_i__outer_ly_4_ph = decode_run_i__outer_tmp73257_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %ly.4.ph = phi i32 [ %4, %.preheader ], [ %tmp73257, %110 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__preheader_76) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__outer_ly_4_ph_reg <= decode_run_i__outer_ly_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_ly_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_ly_4_ph_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %ly.4.ph = phi i32 [ %4, %.preheader ], [ %tmp73257, %110 ]*/
if ((((cur_state == LEGUP_F_decode_run_i_BB_110_87) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_110_or_cond11 == 1'd1)))
begin
decode_run_i__outer_ly_4_ph_reg <= decode_run_i__outer_ly_4_ph;
if (reset == 1'b0 && ^(decode_run_i__outer_ly_4_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_ly_4_ph_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer_tmp87 = decode_run_i__outer_tmp87_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp87 = mul i32 %indvar70, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp87_reg <= decode_run_i__outer_tmp87;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp87_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %tmp87 = mul i32 %indvar70, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp87_reg <= decode_run_i__outer_tmp87;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp87_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp73257 = add i32 %2, %indvar70*/
begin
decode_run_i__outer_tmp73257 = (decode_run_i_0_2_reg + decode_run_i__outer_indvar70_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp73257 = add i32 %2, %indvar70*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_88))
begin
decode_run_i__outer_tmp73257_reg <= decode_run_i__outer_tmp73257;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp73257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp73257_reg"); $finish; end
end
end
always @(*) begin
decode_run_i__outer_tmp88 = decode_run_i__outer_tmp88_stage0_reg;
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp88 = mul i32 %tmp73257, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp88_reg <= decode_run_i__outer_tmp88;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp88_reg"); $finish; end
end
/* decode_run_i: %.outer*/
/*   %tmp88 = mul i32 %tmp73257, %linesize*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp88_reg <= decode_run_i__outer_tmp88;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp88_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp91 = add i32 %tmp74, %tmp87*/
begin
decode_run_i__outer_tmp91 = (decode_run_i__preheader_tmp74_reg + decode_run_i__outer_tmp87);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp91 = add i32 %tmp74, %tmp87*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp91_reg <= decode_run_i__outer_tmp91;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp91_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp97 = add i32 %tmp96, %indvar70*/
begin
decode_run_i__outer_tmp97 = (decode_run_i__preheader_tmp96_reg + decode_run_i__outer_indvar70_reg);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp97 = add i32 %tmp96, %indvar70*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_88))
begin
decode_run_i__outer_tmp97_reg <= decode_run_i__outer_tmp97;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp97_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp = add i32 %x.4.ph, 1*/
begin
decode_run_i__outer_tmp = (decode_run_i__outer_x_4_ph_reg + 32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp = add i32 %x.4.ph, 1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_88))
begin
decode_run_i__outer_tmp_reg <= decode_run_i__outer_tmp;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp83 = add i32 %.4.ph, -1*/
begin
decode_run_i__outer_tmp83 = (decode_run_i__outer__4_ph_reg + -32'd1);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp83 = add i32 %.4.ph, -1*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_88))
begin
decode_run_i__outer_tmp83_reg <= decode_run_i__outer_tmp83;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp83_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp89 = add i32 %x.4.ph, %tmp88*/
begin
decode_run_i__outer_tmp89 = (decode_run_i__outer_x_4_ph_reg + decode_run_i__outer_tmp88);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp89 = add i32 %x.4.ph, %tmp88*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp89_reg <= decode_run_i__outer_tmp89;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp89_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.outer*/
/*   %tmp92 = add i32 %x.4.ph, %tmp91*/
begin
decode_run_i__outer_tmp92 = (decode_run_i__outer_x_4_ph_reg + decode_run_i__outer_tmp91);
end
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp92 = add i32 %x.4.ph, %tmp91*/
if ((cur_state == LEGUP_F_decode_run_i_BB__outer_89))
begin
decode_run_i__outer_tmp92_reg <= decode_run_i__outer_tmp92;
if (reset == 1'b0 && ^(decode_run_i__outer_tmp92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__outer_tmp92_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit__35 = arg_clr;
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35 = decode_run_i_102__24_reg;
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35 = decode_run_i_53__13_reg;
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35 = decode_run_i_36__02_reg;
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35 = decode_run_i_20_25_reg;
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i__loopexit__35 = arg_clr;
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %.35 = phi i32 [ %clr, %8 ], [ %.24, %.loopexit.loopexit ], [ %.13, %.loopexit.loopexit1 ], [ %.02, %.loopexit.loopexit3 ], [ %25, %.loopexit.loopexit5 ], [ %clr, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit__35_reg <= decode_run_i__loopexit__35;
if (reset == 1'b0 && ^(decode_run_i__loopexit__35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit__35_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_x_5 = decode_run_i_0_1_reg;
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5 = decode_run_i_102_x_4_reg;
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5 = decode_run_i_53_x_3_reg;
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5 = decode_run_i_36_x_2_reg;
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5 = decode_run_i_20_x_1_reg;
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i__loopexit_x_5 = decode_run_i_11_x_0_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %x.5 = phi i32 [ %1, %8 ], [ %x.4, %.loopexit.loopexit ], [ %x.3, %.loopexit.loopexit1 ], [ %x.2, %.loopexit.loopexit3 ], [ %x.1, %.loopexit.loopexit5 ], [ %x.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_x_5_reg <= decode_run_i__loopexit_x_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_x_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_x_5_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_y_5 = decode_run_i_0_2_reg;
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5 = decode_run_i__outer_tmp73257_reg;
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5 = decode_run_i__outer22_tmp114258_reg;
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5 = decode_run_i__outer32_tmp169261_reg;
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5 = decode_run_i__outer42_tmp210262_reg;
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i__loopexit_y_5 = decode_run_i__outer52_tmp240263_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %y.5 = phi i32 [ %2, %8 ], [ %tmp73257, %.loopexit.loopexit ], [ %tmp114258, %.loopexit.loopexit1 ], [ %tmp169261, %.loopexit.loopexit3 ], [ %tmp210262, %.loopexit.loopexit5 ], [ %tmp240263, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_y_5_reg <= decode_run_i__loopexit_y_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_y_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_y_5_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_lx_5 = decode_run_i_0_3_reg;
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5 = decode_run_i_102_lx_4_reg;
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5 = decode_run_i_53_lx_3_reg;
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5 = decode_run_i_36_lx_2_reg;
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5 = decode_run_i_20_lx_1_reg;
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i__loopexit_lx_5 = decode_run_i_11_lx_0_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %lx.5 = phi i32 [ %3, %8 ], [ %lx.4, %.loopexit.loopexit ], [ %lx.3, %.loopexit.loopexit1 ], [ %lx.2, %.loopexit.loopexit3 ], [ %lx.1, %.loopexit.loopexit5 ], [ %lx.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_lx_5_reg <= decode_run_i__loopexit_lx_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_lx_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_lx_5_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_ly_5 = decode_run_i_0_4_reg;
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5 = decode_run_i_102_ly_4_reg;
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5 = decode_run_i_53_ly_3_reg;
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5 = decode_run_i_36_ly_2_reg;
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
else if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5 = decode_run_i_20_ly_1_reg;
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i__loopexit_ly_5 = decode_run_i_11_ly_0_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if ((((((((cur_state == LEGUP_F_decode_run_i_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (arg_ptype != 32'd0)) & (arg_ptype != 32'd1)) & (arg_ptype != 32'd2)) & (arg_ptype != 32'd4)) & (arg_ptype != 32'd5)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit_90) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit1_91) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit3_92) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit5_93) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
/* decode_run_i: %.loopexit*/
/*   %ly.5 = phi i32 [ %4, %8 ], [ %ly.4, %.loopexit.loopexit ], [ %ly.3, %.loopexit.loopexit1 ], [ %ly.2, %.loopexit.loopexit3 ], [ %ly.1, %.loopexit.loopexit5 ], [ %ly.0, %.loopexit.loopexit7 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB__loopexit_loopexit7_94) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i__loopexit_ly_5_reg <= decode_run_i__loopexit_ly_5;
if (reset == 1'b0 && ^(decode_run_i__loopexit_ly_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_ly_5_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %114 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 2*/
begin
decode_run_i__loopexit_114 = (arg_avctx + 8);
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %114 = getelementptr inbounds %struct.TYPE_3__* %avctx, i32 0, i32 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
decode_run_i__loopexit_114_reg <= decode_run_i__loopexit_114;
if (reset == 1'b0 && ^(decode_run_i__loopexit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_114_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
begin
decode_run_i__loopexit_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_101))
begin
decode_run_i__loopexit_115_reg <= decode_run_i__loopexit_115;
if (reset == 1'b0 && ^(decode_run_i__loopexit_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_115_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %.loopexit*/
/*   %116 = icmp eq i32 %115, 16*/
begin
decode_run_i__loopexit_116 = (decode_run_i__loopexit_115 == 32'd16);
end
end
always @(posedge clk) begin
/* decode_run_i: %.loopexit*/
/*   %116 = icmp eq i32 %115, 16*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_101))
begin
decode_run_i__loopexit_116_reg <= decode_run_i__loopexit_116;
if (reset == 1'b0 && ^(decode_run_i__loopexit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i__loopexit_116_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %117*/
/*   %118 = lshr i32 %.35, 2*/
begin
decode_run_i_117_118 = (decode_run_i__loopexit__35_reg >>> (32'd2 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %117*/
/*   %118 = lshr i32 %.35, 2*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
decode_run_i_117_118_reg <= decode_run_i_117_118;
if (reset == 1'b0 && ^(decode_run_i_117_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_117_118_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %117*/
/*   %119 = and i32 %118, 4032*/
begin
decode_run_i_117_119 = (decode_run_i_117_118 & 32'd4032);
end
end
always @(posedge clk) begin
/* decode_run_i: %117*/
/*   %119 = and i32 %118, 4032*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
decode_run_i_117_119_reg <= decode_run_i_117_119;
if (reset == 1'b0 && ^(decode_run_i_117_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_117_119_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %117*/
/*   %120 = lshr i32 %.35, 16*/
begin
decode_run_i_117_120 = (decode_run_i__loopexit__35_reg >>> (32'd16 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %117*/
/*   %120 = lshr i32 %.35, 16*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
decode_run_i_117_120_reg <= decode_run_i_117_120;
if (reset == 1'b0 && ^(decode_run_i_117_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_117_120_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %121*/
/*   %122 = lshr i32 %.35, 4*/
begin
decode_run_i_121_122 = (decode_run_i__loopexit__35_reg >>> (32'd4 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %121*/
/*   %122 = lshr i32 %.35, 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
decode_run_i_121_122_reg <= decode_run_i_121_122;
if (reset == 1'b0 && ^(decode_run_i_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_121_122_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %121*/
/*   %123 = and i32 %122, 4032*/
begin
decode_run_i_121_123 = (decode_run_i_121_122 & 32'd4032);
end
end
always @(posedge clk) begin
/* decode_run_i: %121*/
/*   %123 = and i32 %122, 4032*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
decode_run_i_121_123_reg <= decode_run_i_121_123;
if (reset == 1'b0 && ^(decode_run_i_121_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_121_123_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %121*/
/*   %124 = lshr i32 %.35, 18*/
begin
decode_run_i_121_124 = (decode_run_i__loopexit__35_reg >>> (32'd18 % 32));
end
end
always @(posedge clk) begin
/* decode_run_i: %121*/
/*   %124 = lshr i32 %.35, 18*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
decode_run_i_121_124_reg <= decode_run_i_121_124;
if (reset == 1'b0 && ^(decode_run_i_121_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_121_124_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %125*/
/*   %storemerge.in = phi i32 [ %120, %117 ], [ %124, %121 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB_117_103) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_125_storemerge_in = decode_run_i_117_120_reg;
end
/* decode_run_i: %125*/
/*   %storemerge.in = phi i32 [ %120, %117 ], [ %124, %121 ]*/
else /* if (((cur_state == LEGUP_F_decode_run_i_BB_121_105) & (memory_controller_waitrequest == 1'd0))) */
begin
decode_run_i_125_storemerge_in = decode_run_i_121_124_reg;
end
end
always @(posedge clk) begin
/* decode_run_i: %125*/
/*   %storemerge.in = phi i32 [ %120, %117 ], [ %124, %121 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB_117_103) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_125_storemerge_in_reg <= decode_run_i_125_storemerge_in;
if (reset == 1'b0 && ^(decode_run_i_125_storemerge_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_125_storemerge_in_reg"); $finish; end
end
/* decode_run_i: %125*/
/*   %storemerge.in = phi i32 [ %120, %117 ], [ %124, %121 ]*/
if (((cur_state == LEGUP_F_decode_run_i_BB_121_105) & (memory_controller_waitrequest == 1'd0)))
begin
decode_run_i_125_storemerge_in_reg <= decode_run_i_125_storemerge_in;
if (reset == 1'b0 && ^(decode_run_i_125_storemerge_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_125_storemerge_in_reg"); $finish; end
end
end
always @(*) begin
/* decode_run_i: %125*/
/*   %storemerge = and i32 %storemerge.in, 63*/
begin
decode_run_i_125_storemerge = (decode_run_i_125_storemerge_in_reg & 32'd63);
end
end
always @(posedge clk) begin
/* decode_run_i: %125*/
/*   %storemerge = and i32 %storemerge.in, 63*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
decode_run_i_125_storemerge_reg <= decode_run_i_125_storemerge;
if (reset == 1'b0 && ^(decode_run_i_125_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_125_storemerge_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_decode_run_i__outer52_tmp251_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer52*/
/*   %tmp251 = mul i32 %tmp240263, %linesize*/
if ((lpm_mult_decode_run_i__outer52_tmp251_en == 1'd1))
begin
decode_run_i__outer52_tmp251_stage0_reg <= (decode_run_i__outer52_tmp240263 * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i_20_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %20*/
/*   %22 = mul nsw i32 %ly.1, %linesize*/
if ((lpm_mult_decode_run_i_20_22_en == 1'd1))
begin
decode_run_i_20_22_stage0_reg <= (decode_run_i_20_ly_1_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer42_tmp221_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer42*/
/*   %tmp221 = mul i32 %tmp210262, %linesize*/
if ((lpm_mult_decode_run_i__outer42_tmp221_en == 1'd1))
begin
decode_run_i__outer42_tmp221_stage0_reg <= (decode_run_i__outer42_tmp210262 * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__preheader30_tmp169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.preheader30*/
/*   %tmp169 = mul i32 %2, %linesize*/
if ((lpm_mult_decode_run_i__preheader30_tmp169_en == 1'd1))
begin
decode_run_i__preheader30_tmp169_stage0_reg <= (decode_run_i_0_2_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer32_tmp185_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp185 = mul i32 %indvar166, %linesize*/
if ((lpm_mult_decode_run_i__outer32_tmp185_en == 1'd1))
begin
decode_run_i__outer32_tmp185_stage0_reg <= (decode_run_i__outer32_indvar166_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer32_tmp186_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer32*/
/*   %tmp186 = mul i32 %tmp169261, %linesize*/
if ((lpm_mult_decode_run_i__outer32_tmp186_en == 1'd1))
begin
decode_run_i__outer32_tmp186_stage0_reg <= (decode_run_i__outer32_tmp169261 * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__preheader20_tmp114_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.preheader20*/
/*   %tmp114 = mul i32 %2, %linesize*/
if ((lpm_mult_decode_run_i__preheader20_tmp114_en == 1'd1))
begin
decode_run_i__preheader20_tmp114_stage0_reg <= (decode_run_i_0_2_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i_55_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %55*/
/*   %56 = mul nsw i32 %ly.3, %linesize*/
if ((lpm_mult_decode_run_i_55_56_en == 1'd1))
begin
decode_run_i_55_56_stage0_reg <= (decode_run_i_53_ly_3_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer22_tmp145_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp145 = mul i32 %indvar111, %linesize*/
if ((lpm_mult_decode_run_i__outer22_tmp145_en == 1'd1))
begin
decode_run_i__outer22_tmp145_stage0_reg <= (decode_run_i__outer22_indvar111_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer22_tmp146_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer22*/
/*   %tmp146 = mul i32 %tmp114258, %linesize*/
if ((lpm_mult_decode_run_i__outer22_tmp146_en == 1'd1))
begin
decode_run_i__outer22_tmp146_stage0_reg <= (decode_run_i__outer22_tmp114258 * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__preheader_tmp73_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.preheader*/
/*   %tmp73 = mul i32 %2, %linesize*/
if ((lpm_mult_decode_run_i__preheader_tmp73_en == 1'd1))
begin
decode_run_i__preheader_tmp73_stage0_reg <= (decode_run_i_0_2_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer_tmp87_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp87 = mul i32 %indvar70, %linesize*/
if ((lpm_mult_decode_run_i__outer_tmp87_en == 1'd1))
begin
decode_run_i__outer_tmp87_stage0_reg <= (decode_run_i__outer_indvar70_reg * arg_linesize);
end
end
always @(*) begin
lpm_mult_decode_run_i__outer_tmp88_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* decode_run_i: %.outer*/
/*   %tmp88 = mul i32 %tmp73257, %linesize*/
if ((lpm_mult_decode_run_i__outer_tmp88_en == 1'd1))
begin
decode_run_i__outer_tmp88_stage0_reg <= (decode_run_i__outer_tmp73257 * arg_linesize);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* decode_run_i: %.loopexit1*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_113))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %13*/
/*   store i32 %clr, i32* %scevgep244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_12))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %26*/
/*   store i32 %25, i32* %scevgep214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_27))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %38*/
/*   store i32 %39, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_65))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %104*/
/*   store i32 %107, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %y.5, i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %ly.5, i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %117*/
/*   store i32 %119, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
memory_controller_enable_a = 1'd1;
end
/* decode_run_i: %125*/
/*   store i32 %storemerge, i32* %cx, align 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_address_a = arg_px;
end
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_address_a = arg_plx;
end
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %13*/
/*   store i32 %clr, i32* %scevgep244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
memory_controller_address_a = decode_run_i_13_scevgep244;
end
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_12))
begin
memory_controller_address_a = decode_run_i__preheader50_9_reg;
end
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %26*/
/*   store i32 %25, i32* %scevgep214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
memory_controller_address_a = decode_run_i_26_scevgep214;
end
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_27))
begin
memory_controller_address_a = decode_run_i__preheader40_10_reg;
end
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %38*/
/*   store i32 %39, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
memory_controller_address_a = decode_run_i_38_scevgep179_reg;
end
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_address_a = decode_run_i_55_60;
end
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_address_a = decode_run_i_55_63_reg;
end
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_address_a = decode_run_i_55_scevgep124_reg;
end
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_65))
begin
memory_controller_address_a = decode_run_i__preheader20_52_reg;
end
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %104*/
/*   store i32 %107, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
memory_controller_address_a = decode_run_i_104_scevgep_reg;
end
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
memory_controller_address_a = decode_run_i_0_5_reg;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %y.5, i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96))
begin
memory_controller_address_a = arg_py;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %ly.5, i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98))
begin
memory_controller_address_a = arg_ply;
end
/* decode_run_i: %117*/
/*   store i32 %119, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
memory_controller_address_a = arg_cx1;
end
/* decode_run_i: %125*/
/*   store i32 %storemerge, i32* %cx, align 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
memory_controller_address_a = arg_cx;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %13*/
/*   store i32 %clr, i32* %scevgep244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %26*/
/*   store i32 %25, i32* %scevgep214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %38*/
/*   store i32 %39, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_65))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %104*/
/*   store i32 %107, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
memory_controller_write_enable_a = 1'd0;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %y.5, i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %ly.5, i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %117*/
/*   store i32 %119, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
memory_controller_write_enable_a = 1'd1;
end
/* decode_run_i: %125*/
/*   store i32 %storemerge, i32* %cx, align 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* decode_run_i: %13*/
/*   store i32 %clr, i32* %scevgep244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
memory_controller_in_a = arg_clr;
end
/* decode_run_i: %26*/
/*   store i32 %25, i32* %scevgep214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
memory_controller_in_a = decode_run_i_20_25_reg;
end
/* decode_run_i: %38*/
/*   store i32 %39, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
memory_controller_in_a = decode_run_i_38_39;
end
/* decode_run_i: %104*/
/*   store i32 %107, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
memory_controller_in_a = decode_run_i_104_107;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %y.5, i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96))
begin
memory_controller_in_a = decode_run_i__loopexit_y_5_reg;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %ly.5, i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98))
begin
memory_controller_in_a = decode_run_i__loopexit_ly_5_reg;
end
/* decode_run_i: %117*/
/*   store i32 %119, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
memory_controller_in_a = decode_run_i_117_119;
end
/* decode_run_i: %125*/
/*   store i32 %storemerge, i32* %cx, align 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
memory_controller_in_a = decode_run_i_125_storemerge;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* decode_run_i: %0*/
/*   %1 = load i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %0*/
/*   %3 = load i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %13*/
/*   store i32 %clr, i32* %scevgep244, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_11))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %13*/
/*   %14 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_13_12))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %16*/
/*   %17 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_16_15))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %26*/
/*   store i32 %25, i32* %scevgep214, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_26))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %26*/
/*   %27 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_26_27))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %29*/
/*   %30 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_29_30))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %38*/
/*   store i32 %39, i32* %scevgep179, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_42))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %42*/
/*   %43 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_42_46))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %55*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %55*/
/*   %64 = load i32* %63, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %55*/
/*   %70 = load i32* %scevgep124, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %55*/
/*   %90 = load i32* %52, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_65))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %92*/
/*   %93 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_92_68))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %104*/
/*   store i32 %107, i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_81))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %110*/
/*   %111 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_110_85))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %y.5, i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_96))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %ly.5, i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_98))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %117*/
/*   store i32 %119, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_117_102))
begin
memory_controller_size_a = 2'd2;
end
/* decode_run_i: %125*/
/*   store i32 %storemerge, i32* %cx, align 4*/
if ((cur_state == LEGUP_F_decode_run_i_BB_125_106))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_22))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_43))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %55*/
/*   store i32 %89, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_82))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %x.5, i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %lx.5, i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99))
begin
memory_controller_enable_b = 1'd1;
end
/* decode_run_i: %121*/
/*   store i32 %123, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_address_b = arg_py;
end
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_address_b = arg_ply;
end
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_22))
begin
memory_controller_address_b = decode_run_i_20_24;
end
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
memory_controller_address_b = decode_run_i_38_scevgep175;
end
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_43))
begin
memory_controller_address_b = decode_run_i__preheader30_35_reg;
end
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
memory_controller_address_b = decode_run_i_55_scevgep127;
end
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_address_b = decode_run_i_55_68;
end
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_address_b = decode_run_i_55_71_reg;
end
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_address_b = decode_run_i_55_scevgep121_reg;
end
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
memory_controller_address_b = decode_run_i_55_76_reg;
end
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
memory_controller_address_b = decode_run_i_55_79_reg;
end
/* decode_run_i: %55*/
/*   store i32 %89, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
memory_controller_address_b = decode_run_i_55_scevgep139_reg;
end
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
memory_controller_address_b = decode_run_i_104_106;
end
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_82))
begin
memory_controller_address_b = decode_run_i__preheader_101_reg;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %x.5, i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
memory_controller_address_b = arg_px;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %lx.5, i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97))
begin
memory_controller_address_b = arg_plx;
end
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99))
begin
memory_controller_address_b = decode_run_i__loopexit_114_reg;
end
/* decode_run_i: %121*/
/*   store i32 %123, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
memory_controller_address_b = arg_cx1;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_22))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %55*/
/*   store i32 %89, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
memory_controller_write_enable_b = 1'd1;
end
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %x.5, i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
memory_controller_write_enable_b = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %lx.5, i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97))
begin
memory_controller_write_enable_b = 1'd1;
end
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* decode_run_i: %121*/
/*   store i32 %123, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* decode_run_i: %55*/
/*   store i32 %89, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
memory_controller_in_b = decode_run_i_55_89;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %x.5, i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
memory_controller_in_b = decode_run_i__loopexit_x_5_reg;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %lx.5, i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97))
begin
memory_controller_in_b = decode_run_i__loopexit_lx_5_reg;
end
/* decode_run_i: %121*/
/*   store i32 %123, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
memory_controller_in_b = decode_run_i_121_123;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* decode_run_i: %0*/
/*   %2 = load i32* %py, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %0*/
/*   %4 = load i32* %ply, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %20*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_20_22))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %38*/
/*   %39 = load i32* %scevgep175, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_40))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %38*/
/*   %40 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_38_43))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %62 = load i32* %scevgep127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_57))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_58))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %72 = load i32* %71, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_59))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %78 = load i32* %scevgep121, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_60))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %77 = load i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_61))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   %80 = load i32* %79, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_62))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %55*/
/*   store i32 %89, i32* %scevgep139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_55_64))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %104*/
/*   %107 = load i32* %106, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_79))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %104*/
/*   %108 = load i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_104_82))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %x.5, i32* %px, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_95))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %.loopexit*/
/*   store i32 %lx.5, i32* %plx, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_97))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %.loopexit*/
/*   %115 = load i32* %114, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit_99))
begin
memory_controller_size_b = 2'd2;
end
/* decode_run_i: %121*/
/*   store i32 %123, i32* %cx1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_decode_run_i_BB_121_104))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* decode_run_i: %.loopexit1*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_decode_run_i_BB__loopexit1_113))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  decode_run_i_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_avctx;
reg [31:0] decode_run_i_arg_ptype;
reg [31:0] decode_run_i_arg_run;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_px;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_py;
reg [31:0] decode_run_i_arg_clr;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_dst;
reg [31:0] decode_run_i_arg_linesize;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_plx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_ply;
reg [31:0] decode_run_i_arg_backstep;
reg [31:0] decode_run_i_arg_off;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_cx;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_arg_cx1;
wire  decode_run_i_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_memory_controller_address_a;
wire  decode_run_i_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_run_i_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_run_i_memory_controller_out_a;
wire [1:0] decode_run_i_memory_controller_size_a;
wire  decode_run_i_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_run_i_memory_controller_address_b;
wire  decode_run_i_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_run_i_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_run_i_memory_controller_out_b;
wire [1:0] decode_run_i_memory_controller_size_b;
reg  decode_run_i_memory_controller_waitrequest;
wire  decode_run_i_finish;
reg  decode_run_i_finish_final;
wire [31:0] decode_run_i_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


decode_run_i decode_run_i_inst (
	.memory_controller_enable_a (decode_run_i_memory_controller_enable_a),
	.memory_controller_address_a (decode_run_i_memory_controller_address_a),
	.memory_controller_write_enable_a (decode_run_i_memory_controller_write_enable_a),
	.memory_controller_in_a (decode_run_i_memory_controller_in_a),
	.memory_controller_size_a (decode_run_i_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (decode_run_i_memory_controller_enable_b),
	.memory_controller_address_b (decode_run_i_memory_controller_address_b),
	.memory_controller_write_enable_b (decode_run_i_memory_controller_write_enable_b),
	.memory_controller_in_b (decode_run_i_memory_controller_in_b),
	.memory_controller_size_b (decode_run_i_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (decode_run_i_start),
	.finish (decode_run_i_finish),
	.return_val (decode_run_i_return_val),
	.arg_avctx (decode_run_i_arg_avctx),
	.arg_ptype (decode_run_i_arg_ptype),
	.arg_run (decode_run_i_arg_run),
	.arg_px (decode_run_i_arg_px),
	.arg_py (decode_run_i_arg_py),
	.arg_clr (decode_run_i_arg_clr),
	.arg_dst (decode_run_i_arg_dst),
	.arg_linesize (decode_run_i_arg_linesize),
	.arg_plx (decode_run_i_arg_plx),
	.arg_ply (decode_run_i_arg_ply),
	.arg_backstep (decode_run_i_arg_backstep),
	.arg_off (decode_run_i_arg_off),
	.arg_cx (decode_run_i_arg_cx),
	.arg_cx1 (decode_run_i_arg_cx1)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (decode_run_i_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
begin
main_0_1 = decode_run_i_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
decode_run_i_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_avctx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_avctx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_ptype <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_ptype"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_run <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_run"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_px <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_px"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_py <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_py"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_clr <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_clr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_dst <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_dst"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_linesize <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_linesize"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_plx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_plx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_ply <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_ply"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_backstep <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_backstep"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_off <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_off"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_cx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_cx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
decode_run_i_arg_cx1 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_run_i_arg_cx1"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
begin
decode_run_i_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
begin
decode_run_i_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
decode_run_i_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
decode_run_i_finish_final = decode_run_i_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = decode_run_i_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = decode_run_i_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = decode_run_i_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = decode_run_i_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = decode_run_i_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = decode_run_i_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = decode_run_i_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = decode_run_i_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = decode_run_i_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = decode_run_i_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = decode_run_i_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = decode_run_i_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = decode_run_i_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = decode_run_i_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = decode_run_i_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = decode_run_i_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = decode_run_i_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = decode_run_i_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = decode_run_i_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @decode_run_i(%struct.TYPE_3__* undef, i32 undef, i32 undef, i32* undef, i32* undef, i32 undef, i32* undef, i32 undef, i32* undef, i32* undef, i32 undef, i32 undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = decode_run_i_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
