//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:14 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module iterate_frame
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_frr,
	arg_a,
	arg_b,
	arg_fcount,
	arg_bcount,
	arg_dir
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_40 = 8'd40;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_41 = 8'd41;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_42 = 8'd42;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_43 = 8'd43;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_44 = 8'd44;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_45 = 8'd45;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_46 = 8'd46;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_47 = 8'd47;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_48 = 8'd48;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_49 = 8'd49;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_50 = 8'd50;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_51 = 8'd51;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_52 = 8'd52;
parameter [7:0] LEGUP_F_iterate_frame_BB_0_53 = 8'd53;
parameter [7:0] LEGUP_F_iterate_frame_BB_12_54 = 8'd54;
parameter [7:0] LEGUP_F_iterate_frame_BB_13_55 = 8'd55;
parameter [7:0] LEGUP_F_iterate_frame_BB_13_56 = 8'd56;
parameter [7:0] LEGUP_F_iterate_frame_BB_13_57 = 8'd57;
parameter [7:0] LEGUP_F_iterate_frame_BB_13_58 = 8'd58;
parameter [7:0] LEGUP_F_iterate_frame_BB_13_59 = 8'd59;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_60 = 8'd60;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_61 = 8'd61;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_62 = 8'd62;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_63 = 8'd63;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_64 = 8'd64;
parameter [7:0] LEGUP_F_iterate_frame_BB_18_65 = 8'd65;
parameter [7:0] LEGUP_F_iterate_frame_BB_24_66 = 8'd66;
parameter [7:0] LEGUP_F_iterate_frame_BB_25_67 = 8'd67;
parameter [7:0] LEGUP_F_iterate_frame_BB_25_68 = 8'd68;
parameter [7:0] LEGUP_F_iterate_frame_BB_25_69 = 8'd69;
parameter [7:0] LEGUP_F_iterate_frame_BB_25_70 = 8'd70;
parameter [7:0] LEGUP_F_iterate_frame_BB_25_71 = 8'd71;
parameter [7:0] LEGUP_F_iterate_frame_BB_28_72 = 8'd72;
parameter [7:0] LEGUP_F_iterate_frame_BB_29_73 = 8'd73;
parameter [7:0] LEGUP_F_iterate_frame_BB_29_74 = 8'd74;
parameter [7:0] LEGUP_F_iterate_frame_BB_29_75 = 8'd75;
parameter [7:0] LEGUP_F_iterate_frame_BB_33_76 = 8'd76;
parameter [7:0] LEGUP_F_iterate_frame_BB_33_77 = 8'd77;
parameter [7:0] LEGUP_F_iterate_frame_BB_33_78 = 8'd78;
parameter [7:0] LEGUP_F_iterate_frame_BB_33_79 = 8'd79;
parameter [7:0] LEGUP_F_iterate_frame_BB_33_80 = 8'd80;
parameter [7:0] LEGUP_F_iterate_frame_BB_36_81 = 8'd81;
parameter [7:0] LEGUP_F_iterate_frame_BB_36_82 = 8'd82;
parameter [7:0] LEGUP_F_iterate_frame_BB_36_83 = 8'd83;
parameter [7:0] LEGUP_F_iterate_frame_BB_36_84 = 8'd84;
parameter [7:0] LEGUP_F_iterate_frame_BB_36_85 = 8'd85;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_86 = 8'd86;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_87 = 8'd87;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_88 = 8'd88;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_89 = 8'd89;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_90 = 8'd90;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_91 = 8'd91;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_92 = 8'd92;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_93 = 8'd93;
parameter [7:0] LEGUP_F_iterate_frame_BB_41_94 = 8'd94;
parameter [7:0] LEGUP_F_iterate_frame_BB_49_95 = 8'd95;
parameter [7:0] LEGUP_F_iterate_frame_BB_50_96 = 8'd96;
parameter [7:0] LEGUP_F_iterate_frame_BB_50_97 = 8'd97;
parameter [7:0] LEGUP_F_iterate_frame_BB_51_98 = 8'd98;
parameter [7:0] LEGUP_F_iterate_frame_BB_52_99 = 8'd99;
parameter [7:0] LEGUP_F_iterate_frame_BB_52_100 = 8'd100;
parameter [7:0] LEGUP_F_iterate_frame_BB_52_101 = 8'd101;
parameter [7:0] LEGUP_F_iterate_frame_BB_56_102 = 8'd102;
parameter [7:0] LEGUP_F_iterate_frame_BB_56_103 = 8'd103;
parameter [7:0] LEGUP_F_iterate_frame_BB_57_104 = 8'd104;
parameter [7:0] LEGUP_F_iterate_frame_BB_58_105 = 8'd105;
parameter [7:0] LEGUP_F_iterate_frame_BB_58_106 = 8'd106;
parameter [7:0] LEGUP_F_iterate_frame_BB_58_107 = 8'd107;
parameter [7:0] LEGUP_F_iterate_frame_BB_58_108 = 8'd108;
parameter [7:0] LEGUP_F_iterate_frame_BB_58_109 = 8'd109;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_110 = 8'd110;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_111 = 8'd111;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_112 = 8'd112;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_113 = 8'd113;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_114 = 8'd114;
parameter [7:0] LEGUP_F_iterate_frame_BB_63_115 = 8'd115;
parameter [7:0] LEGUP_F_iterate_frame_BB_69_116 = 8'd116;
parameter [7:0] LEGUP_F_iterate_frame_BB_70_117 = 8'd117;
parameter [7:0] LEGUP_F_iterate_frame_BB_70_118 = 8'd118;
parameter [7:0] LEGUP_F_iterate_frame_BB_70_119 = 8'd119;
parameter [7:0] LEGUP_F_iterate_frame_BB_70_120 = 8'd120;
parameter [7:0] LEGUP_F_iterate_frame_BB_70_121 = 8'd121;
parameter [7:0] LEGUP_F_iterate_frame_BB_73_122 = 8'd122;
parameter [7:0] LEGUP_F_iterate_frame_BB_74_123 = 8'd123;
parameter [7:0] LEGUP_F_iterate_frame_BB_74_124 = 8'd124;
parameter [7:0] LEGUP_F_iterate_frame_BB_74_125 = 8'd125;
parameter [7:0] LEGUP_F_iterate_frame_BB_78_126 = 8'd126;
parameter [7:0] LEGUP_F_iterate_frame_BB_78_127 = 8'd127;
parameter [7:0] LEGUP_F_iterate_frame_BB_78_128 = 8'd128;
parameter [7:0] LEGUP_F_iterate_frame_BB_78_129 = 8'd129;
parameter [7:0] LEGUP_F_iterate_frame_BB_78_130 = 8'd130;
parameter [7:0] LEGUP_F_iterate_frame_BB_81_131 = 8'd131;
parameter [7:0] LEGUP_F_iterate_frame_BB_81_132 = 8'd132;
parameter [7:0] LEGUP_F_iterate_frame_BB_81_133 = 8'd133;
parameter [7:0] LEGUP_F_iterate_frame_BB_81_134 = 8'd134;
parameter [7:0] LEGUP_F_iterate_frame_BB_81_135 = 8'd135;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_136 = 8'd136;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_137 = 8'd137;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_138 = 8'd138;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_139 = 8'd139;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_140 = 8'd140;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_141 = 8'd141;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_142 = 8'd142;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_143 = 8'd143;
parameter [7:0] LEGUP_F_iterate_frame_BB_86_144 = 8'd144;
parameter [7:0] LEGUP_F_iterate_frame_BB_94_145 = 8'd145;
parameter [7:0] LEGUP_F_iterate_frame_BB_95_146 = 8'd146;
parameter [7:0] LEGUP_F_iterate_frame_BB_95_147 = 8'd147;
parameter [7:0] LEGUP_F_iterate_frame_BB_96_148 = 8'd148;
parameter [7:0] LEGUP_F_iterate_frame_BB_97_149 = 8'd149;
parameter [7:0] LEGUP_F_iterate_frame_BB_97_150 = 8'd150;
parameter [7:0] LEGUP_F_iterate_frame_BB_97_151 = 8'd151;
parameter [7:0] LEGUP_F_iterate_frame_BB_101_152 = 8'd152;
parameter [7:0] LEGUP_F_iterate_frame_BB_101_153 = 8'd153;
parameter [7:0] LEGUP_F_iterate_frame_BB_102_154 = 8'd154;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [63:0] arg_frr;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_b;
input [31:0] arg_fcount;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_bcount;
input [31:0] arg_dir;
reg [7:0] cur_state;
reg [63:0] iterate_frame_0_1;
reg [63:0] iterate_frame_0_1_reg;
reg [63:0] iterate_frame_0_2;
reg [63:0] iterate_frame_0_2_reg;
reg [63:0] iterate_frame_0_3;
reg [63:0] iterate_frame_0_3_reg;
reg [31:0] iterate_frame_0_4;
reg [31:0] iterate_frame_0_4_reg;
reg [63:0] iterate_frame_0_5;
reg [63:0] iterate_frame_0_5_reg;
reg [63:0] iterate_frame_0_6;
reg [63:0] iterate_frame_0_6_reg;
reg [63:0] iterate_frame_0_7;
reg [63:0] iterate_frame_0_7_reg;
reg [63:0] iterate_frame_0_8;
reg [63:0] iterate_frame_0_8_reg;
reg [31:0] iterate_frame_0_9;
reg [31:0] iterate_frame_0_9_reg;
reg  iterate_frame_0_10;
reg  iterate_frame_0_10_reg;
reg  iterate_frame_0_11;
reg  iterate_frame_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_13_16_reg;
reg  iterate_frame_13_17;
reg  iterate_frame_13_17_reg;
reg  iterate_frame_18_19;
reg  iterate_frame_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_18_22_reg;
reg  iterate_frame_18_23;
reg  iterate_frame_18_23_reg;
reg [31:0] iterate_frame_25_26;
reg [31:0] iterate_frame_25_26_reg;
reg [31:0] iterate_frame_25_27;
reg [31:0] iterate_frame_25_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_29_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_29_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_29_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_29_31_reg;
reg  iterate_frame_29_32;
reg  iterate_frame_29_32_reg;
reg [31:0] iterate_frame_33_34;
reg [31:0] iterate_frame_33_34_reg;
reg [31:0] iterate_frame_33_35;
reg [31:0] iterate_frame_33_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_36_39_reg;
reg  iterate_frame_36_40;
reg  iterate_frame_36_40_reg;
reg [31:0] iterate_frame_41_42;
reg [31:0] iterate_frame_41_42_reg;
reg [31:0] iterate_frame_41_43;
reg [31:0] iterate_frame_41_43_reg;
reg  iterate_frame_41_44;
reg  iterate_frame_41_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_41_47_reg;
reg  iterate_frame_41_48;
reg  iterate_frame_41_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_52_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_52_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_52_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_52_54_reg;
reg  iterate_frame_52_55;
reg  iterate_frame_52_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_58_61_reg;
reg  iterate_frame_58_62;
reg  iterate_frame_58_62_reg;
reg  iterate_frame_63_64;
reg  iterate_frame_63_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_63_67_reg;
reg  iterate_frame_63_68;
reg  iterate_frame_63_68_reg;
reg [31:0] iterate_frame_70_71;
reg [31:0] iterate_frame_70_71_reg;
reg [31:0] iterate_frame_70_72;
reg [31:0] iterate_frame_70_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_74_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_74_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_74_76_reg;
reg  iterate_frame_74_77;
reg  iterate_frame_74_77_reg;
reg [31:0] iterate_frame_78_79;
reg [31:0] iterate_frame_78_79_reg;
reg [31:0] iterate_frame_78_80;
reg [31:0] iterate_frame_78_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_81_84_reg;
reg  iterate_frame_81_85;
reg  iterate_frame_81_85_reg;
reg [31:0] iterate_frame_86_87;
reg [31:0] iterate_frame_86_87_reg;
reg [31:0] iterate_frame_86_88;
reg [31:0] iterate_frame_86_88_reg;
reg  iterate_frame_86_89;
reg  iterate_frame_86_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_86_92_reg;
reg  iterate_frame_86_93;
reg  iterate_frame_86_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_97_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_97_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_97_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_97_99_reg;
reg  iterate_frame_97_100;
reg  iterate_frame_97_100_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg [31:0] iterate_frame_altfp_sitofp_32_0_op0;
wire [63:0] altfp_sitofp64_iterate_frame_0_1_out;
reg  altfp_iterate_frame_0_1_en;
reg [63:0] iterate_frame_altfp_sitofp_32_0;
reg [63:0] iterate_frame_altfp_multiply_64_0_op0;
reg [63:0] iterate_frame_altfp_multiply_64_0_op1;
wire [63:0] altfp_multiplier64_iterate_frame_0_2_out;
reg  altfp_iterate_frame_0_2_en;
reg [63:0] iterate_frame_altfp_multiply_64_0;
reg [63:0] iterate_frame_altfp_add_64_0_op0;
reg [63:0] iterate_frame_altfp_add_64_0_op1;
wire [63:0] altfp_adder64_iterate_frame_0_3_out;
reg  altfp_iterate_frame_0_3_en;
reg [63:0] iterate_frame_altfp_add_64_0;
reg [31:0] iterate_frame_altfp_sitofp_32_1_op0;
wire [63:0] altfp_sitofp64_iterate_frame_0_5_out;
reg  altfp_iterate_frame_0_5_en;
reg [63:0] iterate_frame_altfp_sitofp_32_1;
reg [63:0] iterate_frame_altfp_subtract_64_0_op0;
reg [63:0] iterate_frame_altfp_subtract_64_0_op1;
wire [63:0] altfp_subtractor64_iterate_frame_0_8_out;
reg  altfp_iterate_frame_0_8_en;
reg [63:0] iterate_frame_altfp_subtract_64_0;
reg [63:0] iterate_frame_altfp_fptosi_64_0_op0;
wire [31:0] altfp_fptosi64_iterate_frame_0_9_out;
reg  altfp_iterate_frame_0_9_en;
reg [31:0] iterate_frame_altfp_fptosi_64_0;
wire  altfp_compare64_1_iterate_frame_0_11_out;
reg  altfp_iterate_frame_0_11_en;
wire  iterate_frame_0_11_unused;
reg  altfp_iterate_frame_0_6_en;
reg  altfp_iterate_frame_0_7_en;

/*   %1 = sitofp i32 %fcount to double*/
altfp_sitofp64_6 altfp_sitofp64_6_iterate_frame_0_1 (
	.result (altfp_sitofp64_iterate_frame_0_1_out),
	.dataa (iterate_frame_altfp_sitofp_32_0_op0),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_1_en)
);


/*   %2 = fmul double %1, %frr*/
altfp_multiplier64_11 altfp_multiplier64_11_iterate_frame_0_2 (
	.result (altfp_multiplier64_iterate_frame_0_2_out),
	.dataa (iterate_frame_altfp_multiply_64_0_op0),
	.datab (iterate_frame_altfp_multiply_64_0_op1),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_2_en)
);


/*   %3 = fadd double %2, 0.000000e+00*/
altfp_adder64_14 altfp_adder64_14_iterate_frame_0_3 (
	.result (altfp_adder64_iterate_frame_0_3_out),
	.dataa (iterate_frame_altfp_add_64_0_op0),
	.datab (iterate_frame_altfp_add_64_0_op1),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_3_en)
);


/*   %5 = sitofp i32 %4 to double*/
altfp_sitofp64_6 altfp_sitofp64_6_iterate_frame_0_5 (
	.result (altfp_sitofp64_iterate_frame_0_5_out),
	.dataa (iterate_frame_altfp_sitofp_32_1_op0),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_5_en)
);


/*   %8 = fsub double %3, %7*/
altfp_subtractor64_14 altfp_subtractor64_14_iterate_frame_0_8 (
	.result (altfp_subtractor64_iterate_frame_0_8_out),
	.dataa (iterate_frame_altfp_subtract_64_0_op0),
	.datab (iterate_frame_altfp_subtract_64_0_op1),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_8_en)
);


/*   %9 = fptosi double %8 to i32*/
altfp_fptosi64_6 altfp_fptosi64_6_iterate_frame_0_9 (
	.result (altfp_fptosi64_iterate_frame_0_9_out),
	.dataa (iterate_frame_altfp_fptosi_64_0_op0),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_9_en)
);


/*   %11 = fcmp oge double %frr, 1.000000e+00*/
altfp_compare64_1 altfp_compare64_1_iterate_frame_0_11 (
	.dataa (arg_frr),
	.datab (64'h3FF0000000000000),
	.clock (clk),
	.clk_en (altfp_iterate_frame_0_11_en),
	.aeb (iterate_frame_0_11_unused),
	.aneb (iterate_frame_0_11_unused),
	.alb (iterate_frame_0_11_unused),
	.aleb (iterate_frame_0_11_unused),
	.agb (iterate_frame_0_11_unused),
	.ageb (altfp_compare64_1_iterate_frame_0_11_out),
	.unordered (iterate_frame_0_11_unused)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_0_53) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_10_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_12_54;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_12_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_0_53) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_10_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_57_104;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_57_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_12_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_12_54;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_12_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_12_54) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_11_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_55;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_12_54) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_11_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_81;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_55;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_56;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_56;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_57;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_57;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_58;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_58;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_59;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_13_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_13_59;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_13_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_13_59) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_13_17 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_13_59) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_13_17 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_60;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_60;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_61;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_61;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_62;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_62;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_63;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_63;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_64;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_64;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_65;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_18_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_18_65;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_18_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_18_65) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_19_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_24_66;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_24_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_18_65) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_19_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_28_72;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_28_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_24_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_24_66;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_24_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_24_66) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_23_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_67;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_24_66) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_23_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_67;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_68;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_68;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_69;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_69;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_70;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_70;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_71;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_25_71;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_25_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_25_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_28_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_28_72;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_28_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_28_72) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_23_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_73;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_28_72) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_18_23_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_29_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_73;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_29_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_74;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_29_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_74;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_29_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_75;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_29_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_29_75;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_29_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_29_75) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_29_32 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_29_75) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_29_32 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_76;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_76;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_77;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_77;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_78;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_78;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_79;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_79;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_80;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_33_80;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_33_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_33_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_81;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_82;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_82;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_83;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_83;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_84;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_84;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_85;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_36_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_36_85;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_36_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_36_85) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_36_40 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_36_85) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_36_40 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_86;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_86;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_87;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_87;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_88;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_88;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_89;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_89;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_90;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_90;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_91;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_91;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_92;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_92;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_93;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_93;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_94;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_41_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_41_94;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_41_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_41_94) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_44_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_49_95;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_49_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_41_94) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_44_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_51_98;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_51_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_49_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_49_95;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_49_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_49_95) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_48_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_50_96;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_50_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_49_95) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_48_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_50_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_50_96;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_50_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_50_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_50_97;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_50_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_50_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_50_97;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_50_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_50_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_51_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_51_98;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_51_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_51_98) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_48_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_99;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_51_98) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_41_48_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_52_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_99;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_52_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_100;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_52_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_100;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_52_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_101;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_52_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_52_101;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_52_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_52_101) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_52_55 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_52_101) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_52_55 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_56_102;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_56_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_56_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_56_102;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_56_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_56_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_56_103;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_56_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_56_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_56_103;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_56_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_56_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_57_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_57_104;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_57_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_57_104) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_11_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_105;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_57_104) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_0_11_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_131;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_105;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_106;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_106;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_107;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_107;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_108;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_108;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_109;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_58_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_58_109;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_58_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_58_109) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_58_62 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_58_109) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_58_62 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_110;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_110;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_111;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_111;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_112;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_112;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_113;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_113;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_114;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_114;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_115;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_63_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_63_115;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_63_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_63_115) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_64_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_69_116;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_69_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_63_115) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_64_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_73_122;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_73_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_69_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_69_116;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_69_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_69_116) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_68_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_117;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_69_116) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_68_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_117;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_118;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_118;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_119;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_119;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_120;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_120;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_121;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_70_121;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_70_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_70_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_73_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_73_122;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_73_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_73_122) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_68_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_123;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_73_122) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_63_68_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_74_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_123;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_74_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_124;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_74_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_124;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_74_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_125;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_74_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_74_125;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_74_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_74_125) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_74_77 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_74_125) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_74_77 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_126;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_126;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_127;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_127;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_128;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_128;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_129;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_129;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_130;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_78_130;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_78_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_78_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_131;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_132;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_132;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_133;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_133;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_134;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_134;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_135;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_81_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_81_135;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_81_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_81_135) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_81_85 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_81_135) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_81_85 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_136;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_136;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_137;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_137;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_138;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_138;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_139;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_139;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_140;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_140;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_141;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_141;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_142;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_142;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_143;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_143;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_144;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_86_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_86_144;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_86_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_86_144) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_89_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_94_145;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_94_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_86_144) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_89_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_96_148;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_96_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_94_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_94_145;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_94_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_94_145) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_93_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_95_146;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_95_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_94_145) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_93_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_95_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_95_146;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_95_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_95_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_95_147;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_95_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_95_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_95_147;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_95_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_95_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_96_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_96_148;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_96_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_96_148) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_93_reg == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_149;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_96_148) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_86_93_reg == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_97_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_149;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_97_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_150;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_97_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_150;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_97_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_151;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_97_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_97_151;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_97_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_97_151) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_97_100 == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_iterate_frame_BB_97_151) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_97_100 == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_101_152;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_101_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_101_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_101_152;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_101_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_101_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_101_153;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_101_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_101_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_101_153;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_101_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_101_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_102_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_iterate_frame_BB_102_154;
if (reset == 1'b0 && ^(LEGUP_F_iterate_frame_BB_102_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_iterate_frame_BB_102_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
iterate_frame_0_1 = iterate_frame_altfp_sitofp_32_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %1 = sitofp i32 %fcount to double*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_0_1_reg <= iterate_frame_0_1;
if (reset == 1'b0 && ^(iterate_frame_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_1_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %1 = sitofp i32 %fcount to double*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_0_1_reg <= iterate_frame_0_1;
if (reset == 1'b0 && ^(iterate_frame_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_1_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_2 = iterate_frame_altfp_multiply_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %2 = fmul double %1, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_18))
begin
iterate_frame_0_2_reg <= iterate_frame_0_2;
if (reset == 1'b0 && ^(iterate_frame_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_2_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %2 = fmul double %1, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_18))
begin
iterate_frame_0_2_reg <= iterate_frame_0_2;
if (reset == 1'b0 && ^(iterate_frame_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_2_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_3 = iterate_frame_altfp_add_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %3 = fadd double %2, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_32))
begin
iterate_frame_0_3_reg <= iterate_frame_0_3;
if (reset == 1'b0 && ^(iterate_frame_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_3_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %3 = fadd double %2, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_32))
begin
iterate_frame_0_3_reg <= iterate_frame_0_3;
if (reset == 1'b0 && ^(iterate_frame_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_3_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %4 = add nsw i32 %fcount, -1*/
begin
iterate_frame_0_4 = (arg_fcount + -32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %4 = add nsw i32 %fcount, -1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_1))
begin
iterate_frame_0_4_reg <= iterate_frame_0_4;
if (reset == 1'b0 && ^(iterate_frame_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_4_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_5 = iterate_frame_altfp_sitofp_32_1;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %5 = sitofp i32 %4 to double*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_0_5_reg <= iterate_frame_0_5;
if (reset == 1'b0 && ^(iterate_frame_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_5_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %5 = sitofp i32 %4 to double*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_0_5_reg <= iterate_frame_0_5;
if (reset == 1'b0 && ^(iterate_frame_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_5_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_6 = iterate_frame_altfp_multiply_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %6 = fmul double %5, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_19))
begin
iterate_frame_0_6_reg <= iterate_frame_0_6;
if (reset == 1'b0 && ^(iterate_frame_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_6_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %6 = fmul double %5, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_19))
begin
iterate_frame_0_6_reg <= iterate_frame_0_6;
if (reset == 1'b0 && ^(iterate_frame_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_6_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_7 = iterate_frame_altfp_add_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %7 = fadd double %6, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_33))
begin
iterate_frame_0_7_reg <= iterate_frame_0_7;
if (reset == 1'b0 && ^(iterate_frame_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_7_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %7 = fadd double %6, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_33))
begin
iterate_frame_0_7_reg <= iterate_frame_0_7;
if (reset == 1'b0 && ^(iterate_frame_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_7_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_8 = iterate_frame_altfp_subtract_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %8 = fsub double %3, %7*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_47))
begin
iterate_frame_0_8_reg <= iterate_frame_0_8;
if (reset == 1'b0 && ^(iterate_frame_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_8_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %8 = fsub double %3, %7*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_47))
begin
iterate_frame_0_8_reg <= iterate_frame_0_8;
if (reset == 1'b0 && ^(iterate_frame_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_8_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_9 = iterate_frame_altfp_fptosi_64_0;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %9 = fptosi double %8 to i32*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_53))
begin
iterate_frame_0_9_reg <= iterate_frame_0_9;
if (reset == 1'b0 && ^(iterate_frame_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_9_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %9 = fptosi double %8 to i32*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_53))
begin
iterate_frame_0_9_reg <= iterate_frame_0_9;
if (reset == 1'b0 && ^(iterate_frame_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_9_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %10 = icmp eq i32 %dir, 0*/
begin
iterate_frame_0_10 = (arg_dir == 32'd0);
end
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %10 = icmp eq i32 %dir, 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_1))
begin
iterate_frame_0_10_reg <= iterate_frame_0_10;
if (reset == 1'b0 && ^(iterate_frame_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_10_reg"); $finish; end
end
end
always @(*) begin
iterate_frame_0_11 = altfp_compare64_1_iterate_frame_0_11_out;
end
always @(posedge clk) begin
/* iterate_frame: %0*/
/*   %11 = fcmp oge double %frr, 1.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_2))
begin
iterate_frame_0_11_reg <= iterate_frame_0_11;
if (reset == 1'b0 && ^(iterate_frame_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_11_reg"); $finish; end
end
/* iterate_frame: %0*/
/*   %11 = fcmp oge double %frr, 1.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_2))
begin
iterate_frame_0_11_reg <= iterate_frame_0_11;
if (reset == 1'b0 && ^(iterate_frame_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_0_11_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
begin
iterate_frame_13_14 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
iterate_frame_13_14_reg <= iterate_frame_13_14;
if (reset == 1'b0 && ^(iterate_frame_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_13_14_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %13*/
/*   %15 = getelementptr inbounds %struct.TYPE_4__* %14, i32 0, i32 1*/
begin
iterate_frame_13_15 = (iterate_frame_13_14 + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %13*/
/*   %15 = getelementptr inbounds %struct.TYPE_4__* %14, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
iterate_frame_13_15_reg <= iterate_frame_13_15;
if (reset == 1'b0 && ^(iterate_frame_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_13_15_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
begin
iterate_frame_13_16 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_59))
begin
iterate_frame_13_16_reg <= iterate_frame_13_16;
if (reset == 1'b0 && ^(iterate_frame_13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_13_16_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %13*/
/*   %17 = icmp eq %struct.TYPE_4__* %16, null*/
begin
iterate_frame_13_17 = (iterate_frame_13_16 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %13*/
/*   %17 = icmp eq %struct.TYPE_4__* %16, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_59))
begin
iterate_frame_13_17_reg <= iterate_frame_13_17;
if (reset == 1'b0 && ^(iterate_frame_13_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_13_17_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %18*/
/*   %19 = icmp eq i32 %9, 1*/
begin
iterate_frame_18_19 = (iterate_frame_0_9_reg == 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %18*/
/*   %19 = icmp eq i32 %9, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
iterate_frame_18_19_reg <= iterate_frame_18_19;
if (reset == 1'b0 && ^(iterate_frame_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_18_19_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
begin
iterate_frame_18_20 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
iterate_frame_18_20_reg <= iterate_frame_18_20;
if (reset == 1'b0 && ^(iterate_frame_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_18_20_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %18*/
/*   %21 = getelementptr inbounds %struct.TYPE_4__* %20, i32 0, i32 1*/
begin
iterate_frame_18_21 = (iterate_frame_18_20 + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %18*/
/*   %21 = getelementptr inbounds %struct.TYPE_4__* %20, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
iterate_frame_18_21_reg <= iterate_frame_18_21;
if (reset == 1'b0 && ^(iterate_frame_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_18_21_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
begin
iterate_frame_18_22 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_65))
begin
iterate_frame_18_22_reg <= iterate_frame_18_22;
if (reset == 1'b0 && ^(iterate_frame_18_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_18_22_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %18*/
/*   %23 = icmp ne %struct.TYPE_4__* %22, null*/
begin
iterate_frame_18_23 = (iterate_frame_18_22 != 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %18*/
/*   %23 = icmp ne %struct.TYPE_4__* %22, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_65))
begin
iterate_frame_18_23_reg <= iterate_frame_18_23;
if (reset == 1'b0 && ^(iterate_frame_18_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_18_23_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_25_26 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
iterate_frame_25_26_reg <= iterate_frame_25_26;
if (reset == 1'b0 && ^(iterate_frame_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_25_26_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %25*/
/*   %27 = add nsw i32 %26, 1*/
begin
iterate_frame_25_27 = (iterate_frame_25_26 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %25*/
/*   %27 = add nsw i32 %26, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
iterate_frame_25_27_reg <= iterate_frame_25_27;
if (reset == 1'b0 && ^(iterate_frame_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_25_27_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %29*/
/*   %30 = getelementptr inbounds %struct.TYPE_4__* %22, i32 0, i32 1*/
begin
iterate_frame_29_30 = (iterate_frame_18_22_reg + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %29*/
/*   %30 = getelementptr inbounds %struct.TYPE_4__* %22, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_73))
begin
iterate_frame_29_30_reg <= iterate_frame_29_30;
if (reset == 1'b0 && ^(iterate_frame_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_29_30_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
begin
iterate_frame_29_31 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_75))
begin
iterate_frame_29_31_reg <= iterate_frame_29_31;
if (reset == 1'b0 && ^(iterate_frame_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_29_31_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %29*/
/*   %32 = icmp eq %struct.TYPE_4__* %31, null*/
begin
iterate_frame_29_32 = (iterate_frame_29_31 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %29*/
/*   %32 = icmp eq %struct.TYPE_4__* %31, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_75))
begin
iterate_frame_29_32_reg <= iterate_frame_29_32;
if (reset == 1'b0 && ^(iterate_frame_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_29_32_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_33_34 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
iterate_frame_33_34_reg <= iterate_frame_33_34;
if (reset == 1'b0 && ^(iterate_frame_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_33_34_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %33*/
/*   %35 = add nsw i32 %34, 1*/
begin
iterate_frame_33_35 = (iterate_frame_33_34 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %33*/
/*   %35 = add nsw i32 %34, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
iterate_frame_33_35_reg <= iterate_frame_33_35;
if (reset == 1'b0 && ^(iterate_frame_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_33_35_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
begin
iterate_frame_36_37 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
iterate_frame_36_37_reg <= iterate_frame_36_37;
if (reset == 1'b0 && ^(iterate_frame_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_36_37_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %36*/
/*   %38 = getelementptr inbounds %struct.TYPE_4__* %37, i32 0, i32 1*/
begin
iterate_frame_36_38 = (iterate_frame_36_37 + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %36*/
/*   %38 = getelementptr inbounds %struct.TYPE_4__* %37, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
iterate_frame_36_38_reg <= iterate_frame_36_38;
if (reset == 1'b0 && ^(iterate_frame_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_36_38_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
begin
iterate_frame_36_39 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_85))
begin
iterate_frame_36_39_reg <= iterate_frame_36_39;
if (reset == 1'b0 && ^(iterate_frame_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_36_39_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %36*/
/*   %40 = icmp eq %struct.TYPE_4__* %39, null*/
begin
iterate_frame_36_40 = (iterate_frame_36_39 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %36*/
/*   %40 = icmp eq %struct.TYPE_4__* %39, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_85))
begin
iterate_frame_36_40_reg <= iterate_frame_36_40;
if (reset == 1'b0 && ^(iterate_frame_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_36_40_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_41_42 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
iterate_frame_41_42_reg <= iterate_frame_41_42;
if (reset == 1'b0 && ^(iterate_frame_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_42_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %43 = add nsw i32 %42, 1*/
begin
iterate_frame_41_43 = (iterate_frame_41_42 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %43 = add nsw i32 %42, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
iterate_frame_41_43_reg <= iterate_frame_41_43;
if (reset == 1'b0 && ^(iterate_frame_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_43_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %44 = icmp eq i32 %9, 1*/
begin
iterate_frame_41_44 = (iterate_frame_0_9_reg == 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %44 = icmp eq i32 %9, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
iterate_frame_41_44_reg <= iterate_frame_41_44;
if (reset == 1'b0 && ^(iterate_frame_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_44_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
begin
iterate_frame_41_45 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
iterate_frame_41_45_reg <= iterate_frame_41_45;
if (reset == 1'b0 && ^(iterate_frame_41_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_45_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %46 = getelementptr inbounds %struct.TYPE_4__* %45, i32 0, i32 1*/
begin
iterate_frame_41_46 = (iterate_frame_41_45 + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %46 = getelementptr inbounds %struct.TYPE_4__* %45, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
iterate_frame_41_46_reg <= iterate_frame_41_46;
if (reset == 1'b0 && ^(iterate_frame_41_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_46_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
begin
iterate_frame_41_47 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_94))
begin
iterate_frame_41_47_reg <= iterate_frame_41_47;
if (reset == 1'b0 && ^(iterate_frame_41_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_47_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %41*/
/*   %48 = icmp ne %struct.TYPE_4__* %47, null*/
begin
iterate_frame_41_48 = (iterate_frame_41_47 != 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %41*/
/*   %48 = icmp ne %struct.TYPE_4__* %47, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_94))
begin
iterate_frame_41_48_reg <= iterate_frame_41_48;
if (reset == 1'b0 && ^(iterate_frame_41_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_41_48_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %52*/
/*   %53 = getelementptr inbounds %struct.TYPE_4__* %47, i32 0, i32 1*/
begin
iterate_frame_52_53 = (iterate_frame_41_47_reg + 4);
end
end
always @(posedge clk) begin
/* iterate_frame: %52*/
/*   %53 = getelementptr inbounds %struct.TYPE_4__* %47, i32 0, i32 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_99))
begin
iterate_frame_52_53_reg <= iterate_frame_52_53;
if (reset == 1'b0 && ^(iterate_frame_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_52_53_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
begin
iterate_frame_52_54 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_101))
begin
iterate_frame_52_54_reg <= iterate_frame_52_54;
if (reset == 1'b0 && ^(iterate_frame_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_52_54_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %52*/
/*   %55 = icmp eq %struct.TYPE_4__* %54, null*/
begin
iterate_frame_52_55 = (iterate_frame_52_54 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %52*/
/*   %55 = icmp eq %struct.TYPE_4__* %54, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_101))
begin
iterate_frame_52_55_reg <= iterate_frame_52_55;
if (reset == 1'b0 && ^(iterate_frame_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_52_55_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
begin
iterate_frame_58_59 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
iterate_frame_58_59_reg <= iterate_frame_58_59;
if (reset == 1'b0 && ^(iterate_frame_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_58_59_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %58*/
/*   %60 = getelementptr inbounds %struct.TYPE_4__* %59, i32 0, i32 0*/
begin
iterate_frame_58_60 = iterate_frame_58_59;
end
end
always @(posedge clk) begin
/* iterate_frame: %58*/
/*   %60 = getelementptr inbounds %struct.TYPE_4__* %59, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
iterate_frame_58_60_reg <= iterate_frame_58_60;
if (reset == 1'b0 && ^(iterate_frame_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_58_60_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
begin
iterate_frame_58_61 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_109))
begin
iterate_frame_58_61_reg <= iterate_frame_58_61;
if (reset == 1'b0 && ^(iterate_frame_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_58_61_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %58*/
/*   %62 = icmp eq %struct.TYPE_4__* %61, null*/
begin
iterate_frame_58_62 = (iterate_frame_58_61 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %58*/
/*   %62 = icmp eq %struct.TYPE_4__* %61, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_109))
begin
iterate_frame_58_62_reg <= iterate_frame_58_62;
if (reset == 1'b0 && ^(iterate_frame_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_58_62_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %63*/
/*   %64 = icmp eq i32 %9, 1*/
begin
iterate_frame_63_64 = (iterate_frame_0_9_reg == 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %63*/
/*   %64 = icmp eq i32 %9, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
iterate_frame_63_64_reg <= iterate_frame_63_64;
if (reset == 1'b0 && ^(iterate_frame_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_63_64_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
begin
iterate_frame_63_65 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
iterate_frame_63_65_reg <= iterate_frame_63_65;
if (reset == 1'b0 && ^(iterate_frame_63_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_63_65_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %63*/
/*   %66 = getelementptr inbounds %struct.TYPE_4__* %65, i32 0, i32 0*/
begin
iterate_frame_63_66 = iterate_frame_63_65;
end
end
always @(posedge clk) begin
/* iterate_frame: %63*/
/*   %66 = getelementptr inbounds %struct.TYPE_4__* %65, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
iterate_frame_63_66_reg <= iterate_frame_63_66;
if (reset == 1'b0 && ^(iterate_frame_63_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_63_66_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
begin
iterate_frame_63_67 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_115))
begin
iterate_frame_63_67_reg <= iterate_frame_63_67;
if (reset == 1'b0 && ^(iterate_frame_63_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_63_67_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %63*/
/*   %68 = icmp ne %struct.TYPE_4__* %67, null*/
begin
iterate_frame_63_68 = (iterate_frame_63_67 != 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %63*/
/*   %68 = icmp ne %struct.TYPE_4__* %67, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_115))
begin
iterate_frame_63_68_reg <= iterate_frame_63_68;
if (reset == 1'b0 && ^(iterate_frame_63_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_63_68_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_70_71 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
iterate_frame_70_71_reg <= iterate_frame_70_71;
if (reset == 1'b0 && ^(iterate_frame_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_70_71_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %70*/
/*   %72 = add nsw i32 %71, 1*/
begin
iterate_frame_70_72 = (iterate_frame_70_71 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %70*/
/*   %72 = add nsw i32 %71, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
iterate_frame_70_72_reg <= iterate_frame_70_72;
if (reset == 1'b0 && ^(iterate_frame_70_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_70_72_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %74*/
/*   %75 = getelementptr inbounds %struct.TYPE_4__* %67, i32 0, i32 0*/
begin
iterate_frame_74_75 = iterate_frame_63_67_reg;
end
end
always @(posedge clk) begin
/* iterate_frame: %74*/
/*   %75 = getelementptr inbounds %struct.TYPE_4__* %67, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_123))
begin
iterate_frame_74_75_reg <= iterate_frame_74_75;
if (reset == 1'b0 && ^(iterate_frame_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_74_75_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
begin
iterate_frame_74_76 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_125))
begin
iterate_frame_74_76_reg <= iterate_frame_74_76;
if (reset == 1'b0 && ^(iterate_frame_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_74_76_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %74*/
/*   %77 = icmp eq %struct.TYPE_4__* %76, null*/
begin
iterate_frame_74_77 = (iterate_frame_74_76 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %74*/
/*   %77 = icmp eq %struct.TYPE_4__* %76, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_125))
begin
iterate_frame_74_77_reg <= iterate_frame_74_77;
if (reset == 1'b0 && ^(iterate_frame_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_74_77_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_78_79 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
iterate_frame_78_79_reg <= iterate_frame_78_79;
if (reset == 1'b0 && ^(iterate_frame_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_78_79_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %78*/
/*   %80 = add nsw i32 %79, 1*/
begin
iterate_frame_78_80 = (iterate_frame_78_79 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %78*/
/*   %80 = add nsw i32 %79, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
iterate_frame_78_80_reg <= iterate_frame_78_80;
if (reset == 1'b0 && ^(iterate_frame_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_78_80_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
begin
iterate_frame_81_82 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
iterate_frame_81_82_reg <= iterate_frame_81_82;
if (reset == 1'b0 && ^(iterate_frame_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_81_82_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %81*/
/*   %83 = getelementptr inbounds %struct.TYPE_4__* %82, i32 0, i32 0*/
begin
iterate_frame_81_83 = iterate_frame_81_82;
end
end
always @(posedge clk) begin
/* iterate_frame: %81*/
/*   %83 = getelementptr inbounds %struct.TYPE_4__* %82, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
iterate_frame_81_83_reg <= iterate_frame_81_83;
if (reset == 1'b0 && ^(iterate_frame_81_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_81_83_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
begin
iterate_frame_81_84 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_135))
begin
iterate_frame_81_84_reg <= iterate_frame_81_84;
if (reset == 1'b0 && ^(iterate_frame_81_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_81_84_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %81*/
/*   %85 = icmp eq %struct.TYPE_4__* %84, null*/
begin
iterate_frame_81_85 = (iterate_frame_81_84 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %81*/
/*   %85 = icmp eq %struct.TYPE_4__* %84, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_135))
begin
iterate_frame_81_85_reg <= iterate_frame_81_85;
if (reset == 1'b0 && ^(iterate_frame_81_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_81_85_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
begin
iterate_frame_86_87 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
iterate_frame_86_87_reg <= iterate_frame_86_87;
if (reset == 1'b0 && ^(iterate_frame_86_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_87_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %88 = add nsw i32 %87, 1*/
begin
iterate_frame_86_88 = (iterate_frame_86_87 + 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %88 = add nsw i32 %87, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
iterate_frame_86_88_reg <= iterate_frame_86_88;
if (reset == 1'b0 && ^(iterate_frame_86_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_88_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %89 = icmp eq i32 %9, 1*/
begin
iterate_frame_86_89 = (iterate_frame_0_9_reg == 32'd1);
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %89 = icmp eq i32 %9, 1*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
iterate_frame_86_89_reg <= iterate_frame_86_89;
if (reset == 1'b0 && ^(iterate_frame_86_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_89_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
begin
iterate_frame_86_90 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
iterate_frame_86_90_reg <= iterate_frame_86_90;
if (reset == 1'b0 && ^(iterate_frame_86_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_90_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %91 = getelementptr inbounds %struct.TYPE_4__* %90, i32 0, i32 0*/
begin
iterate_frame_86_91 = iterate_frame_86_90;
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %91 = getelementptr inbounds %struct.TYPE_4__* %90, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
iterate_frame_86_91_reg <= iterate_frame_86_91;
if (reset == 1'b0 && ^(iterate_frame_86_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_91_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
begin
iterate_frame_86_92 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_144))
begin
iterate_frame_86_92_reg <= iterate_frame_86_92;
if (reset == 1'b0 && ^(iterate_frame_86_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_92_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %86*/
/*   %93 = icmp ne %struct.TYPE_4__* %92, null*/
begin
iterate_frame_86_93 = (iterate_frame_86_92 != 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %86*/
/*   %93 = icmp ne %struct.TYPE_4__* %92, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_144))
begin
iterate_frame_86_93_reg <= iterate_frame_86_93;
if (reset == 1'b0 && ^(iterate_frame_86_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_86_93_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %97*/
/*   %98 = getelementptr inbounds %struct.TYPE_4__* %92, i32 0, i32 0*/
begin
iterate_frame_97_98 = iterate_frame_86_92_reg;
end
end
always @(posedge clk) begin
/* iterate_frame: %97*/
/*   %98 = getelementptr inbounds %struct.TYPE_4__* %92, i32 0, i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_149))
begin
iterate_frame_97_98_reg <= iterate_frame_97_98;
if (reset == 1'b0 && ^(iterate_frame_97_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_97_98_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
begin
iterate_frame_97_99 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_151))
begin
iterate_frame_97_99_reg <= iterate_frame_97_99;
if (reset == 1'b0 && ^(iterate_frame_97_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_97_99_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %97*/
/*   %100 = icmp eq %struct.TYPE_4__* %99, null*/
begin
iterate_frame_97_100 = (iterate_frame_97_99 == 0);
end
end
always @(posedge clk) begin
/* iterate_frame: %97*/
/*   %100 = icmp eq %struct.TYPE_4__* %99, null*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_151))
begin
iterate_frame_97_100_reg <= iterate_frame_97_100;
if (reset == 1'b0 && ^(iterate_frame_97_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_97_100_reg"); $finish; end
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %1 = sitofp i32 %fcount to double*/
begin
iterate_frame_altfp_sitofp_32_0_op0 = arg_fcount;
end
end
always @(*) begin
altfp_iterate_frame_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_sitofp_32_0 = altfp_sitofp64_iterate_frame_0_1_out;
end
always @(*) begin
/* iterate_frame: %0*/
/*   %2 = fmul double %1, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_altfp_multiply_64_0_op0 = iterate_frame_0_1;
end
/* iterate_frame: %0*/
/*   %6 = fmul double %5, %frr*/
else /* if ((cur_state == LEGUP_F_iterate_frame_BB_0_8)) */
begin
iterate_frame_altfp_multiply_64_0_op0 = iterate_frame_0_5_reg;
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %2 = fmul double %1, %frr*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_7))
begin
iterate_frame_altfp_multiply_64_0_op1 = arg_frr;
end
/* iterate_frame: %0*/
/*   %6 = fmul double %5, %frr*/
else /* if ((cur_state == LEGUP_F_iterate_frame_BB_0_8)) */
begin
iterate_frame_altfp_multiply_64_0_op1 = arg_frr;
end
end
always @(*) begin
altfp_iterate_frame_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_multiply_64_0 = altfp_multiplier64_iterate_frame_0_2_out;
end
always @(*) begin
/* iterate_frame: %0*/
/*   %3 = fadd double %2, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_18))
begin
iterate_frame_altfp_add_64_0_op0 = iterate_frame_0_2;
end
/* iterate_frame: %0*/
/*   %7 = fadd double %6, 0.000000e+00*/
else /* if ((cur_state == LEGUP_F_iterate_frame_BB_0_19)) */
begin
iterate_frame_altfp_add_64_0_op0 = iterate_frame_0_6;
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %3 = fadd double %2, 0.000000e+00*/
if ((cur_state == LEGUP_F_iterate_frame_BB_0_18))
begin
iterate_frame_altfp_add_64_0_op1 = 64'h0;
end
/* iterate_frame: %0*/
/*   %7 = fadd double %6, 0.000000e+00*/
else /* if ((cur_state == LEGUP_F_iterate_frame_BB_0_19)) */
begin
iterate_frame_altfp_add_64_0_op1 = 64'h0;
end
end
always @(*) begin
altfp_iterate_frame_0_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_add_64_0 = altfp_adder64_iterate_frame_0_3_out;
end
always @(*) begin
/* iterate_frame: %0*/
/*   %5 = sitofp i32 %4 to double*/
begin
iterate_frame_altfp_sitofp_32_1_op0 = iterate_frame_0_4;
end
end
always @(*) begin
altfp_iterate_frame_0_5_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_sitofp_32_1 = altfp_sitofp64_iterate_frame_0_5_out;
end
always @(*) begin
/* iterate_frame: %0*/
/*   %8 = fsub double %3, %7*/
begin
iterate_frame_altfp_subtract_64_0_op0 = iterate_frame_0_3_reg;
end
end
always @(*) begin
/* iterate_frame: %0*/
/*   %8 = fsub double %3, %7*/
begin
iterate_frame_altfp_subtract_64_0_op1 = iterate_frame_0_7;
end
end
always @(*) begin
altfp_iterate_frame_0_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_subtract_64_0 = altfp_subtractor64_iterate_frame_0_8_out;
end
always @(*) begin
/* iterate_frame: %0*/
/*   %9 = fptosi double %8 to i32*/
begin
iterate_frame_altfp_fptosi_64_0_op0 = iterate_frame_0_8;
end
end
always @(*) begin
altfp_iterate_frame_0_9_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
iterate_frame_altfp_fptosi_64_0 = altfp_fptosi64_iterate_frame_0_9_out;
end
always @(*) begin
altfp_iterate_frame_0_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
altfp_iterate_frame_0_6_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
altfp_iterate_frame_0_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* iterate_frame: %102*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_102_154))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_55))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %18*/
/*   store %struct.TYPE_4__* %16, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_61))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %25*/
/*   store %struct.TYPE_4__* %22, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_67))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_68))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %25*/
/*   store i32 %27, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_73))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %33*/
/*   store %struct.TYPE_4__* %31, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_76))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_77))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %33*/
/*   store i32 %35, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_81))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   store %struct.TYPE_4__* %39, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_87))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   store i32 %43, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_90))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %50*/
/*   store %struct.TYPE_4__* %47, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_50_96))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_99))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %56*/
/*   store %struct.TYPE_4__* %54, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_56_102))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_105))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %63*/
/*   store %struct.TYPE_4__* %61, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_111))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %70*/
/*   store %struct.TYPE_4__* %67, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_117))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_118))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %70*/
/*   store i32 %72, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_123))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %78*/
/*   store %struct.TYPE_4__* %76, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_126))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_127))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %78*/
/*   store i32 %80, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_131))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   store %struct.TYPE_4__* %84, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_137))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   store i32 %88, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_140))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %95*/
/*   store %struct.TYPE_4__* %92, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_95_146))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_149))
begin
memory_controller_enable_a = 1'd1;
end
/* iterate_frame: %101*/
/*   store %struct.TYPE_4__* %99, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_101_152))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_55))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
memory_controller_address_a = iterate_frame_13_15;
end
/* iterate_frame: %18*/
/*   store %struct.TYPE_4__* %16, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_61))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
memory_controller_address_a = iterate_frame_18_21;
end
/* iterate_frame: %25*/
/*   store %struct.TYPE_4__* %22, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_67))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_68))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %25*/
/*   store i32 %27, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_73))
begin
memory_controller_address_a = iterate_frame_29_30;
end
/* iterate_frame: %33*/
/*   store %struct.TYPE_4__* %31, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_76))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_77))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %33*/
/*   store i32 %35, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_81))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
memory_controller_address_a = iterate_frame_36_38;
end
/* iterate_frame: %41*/
/*   store %struct.TYPE_4__* %39, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_87))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %41*/
/*   store i32 %43, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_90))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
memory_controller_address_a = iterate_frame_41_46;
end
/* iterate_frame: %50*/
/*   store %struct.TYPE_4__* %47, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_50_96))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_99))
begin
memory_controller_address_a = iterate_frame_52_53;
end
/* iterate_frame: %56*/
/*   store %struct.TYPE_4__* %54, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_56_102))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_105))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
memory_controller_address_a = iterate_frame_58_60;
end
/* iterate_frame: %63*/
/*   store %struct.TYPE_4__* %61, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_111))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
memory_controller_address_a = iterate_frame_63_66;
end
/* iterate_frame: %70*/
/*   store %struct.TYPE_4__* %67, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_117))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_118))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %70*/
/*   store i32 %72, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_123))
begin
memory_controller_address_a = iterate_frame_74_75;
end
/* iterate_frame: %78*/
/*   store %struct.TYPE_4__* %76, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_126))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_127))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %78*/
/*   store i32 %80, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_131))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
memory_controller_address_a = iterate_frame_81_83;
end
/* iterate_frame: %86*/
/*   store %struct.TYPE_4__* %84, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
memory_controller_address_a = arg_b;
end
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_137))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %86*/
/*   store i32 %88, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
memory_controller_address_a = arg_bcount;
end
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_140))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
memory_controller_address_a = iterate_frame_86_91;
end
/* iterate_frame: %95*/
/*   store %struct.TYPE_4__* %92, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_95_146))
begin
memory_controller_address_a = arg_a;
end
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_149))
begin
memory_controller_address_a = iterate_frame_97_98;
end
/* iterate_frame: %101*/
/*   store %struct.TYPE_4__* %99, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_101_152))
begin
memory_controller_address_a = arg_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %18*/
/*   store %struct.TYPE_4__* %16, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %25*/
/*   store %struct.TYPE_4__* %22, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_67))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_68))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %25*/
/*   store i32 %27, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_73))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %33*/
/*   store %struct.TYPE_4__* %31, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %33*/
/*   store i32 %35, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_81))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %41*/
/*   store %struct.TYPE_4__* %39, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %41*/
/*   store i32 %43, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_90))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %50*/
/*   store %struct.TYPE_4__* %47, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_50_96))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_99))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %56*/
/*   store %struct.TYPE_4__* %54, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_56_102))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_105))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %63*/
/*   store %struct.TYPE_4__* %61, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %70*/
/*   store %struct.TYPE_4__* %67, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_118))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %70*/
/*   store i32 %72, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %78*/
/*   store %struct.TYPE_4__* %76, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_126))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_127))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %78*/
/*   store i32 %80, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_131))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %86*/
/*   store %struct.TYPE_4__* %84, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_137))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %86*/
/*   store i32 %88, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_140))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %95*/
/*   store %struct.TYPE_4__* %92, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_95_146))
begin
memory_controller_write_enable_a = 1'd1;
end
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_149))
begin
memory_controller_write_enable_a = 1'd0;
end
/* iterate_frame: %101*/
/*   store %struct.TYPE_4__* %99, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_101_152))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* iterate_frame: %18*/
/*   store %struct.TYPE_4__* %16, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
memory_controller_in_a = iterate_frame_13_16_reg;
end
/* iterate_frame: %25*/
/*   store %struct.TYPE_4__* %22, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_67))
begin
memory_controller_in_a = iterate_frame_18_22_reg;
end
/* iterate_frame: %25*/
/*   store i32 %27, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
memory_controller_in_a = iterate_frame_25_27;
end
/* iterate_frame: %33*/
/*   store %struct.TYPE_4__* %31, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_76))
begin
memory_controller_in_a = iterate_frame_29_31_reg;
end
/* iterate_frame: %33*/
/*   store i32 %35, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
memory_controller_in_a = iterate_frame_33_35;
end
/* iterate_frame: %41*/
/*   store %struct.TYPE_4__* %39, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
memory_controller_in_a = iterate_frame_36_39_reg;
end
/* iterate_frame: %41*/
/*   store i32 %43, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
memory_controller_in_a = iterate_frame_41_43;
end
/* iterate_frame: %50*/
/*   store %struct.TYPE_4__* %47, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_50_96))
begin
memory_controller_in_a = iterate_frame_41_47_reg;
end
/* iterate_frame: %56*/
/*   store %struct.TYPE_4__* %54, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_56_102))
begin
memory_controller_in_a = iterate_frame_52_54_reg;
end
/* iterate_frame: %63*/
/*   store %struct.TYPE_4__* %61, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
memory_controller_in_a = iterate_frame_58_61_reg;
end
/* iterate_frame: %70*/
/*   store %struct.TYPE_4__* %67, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_117))
begin
memory_controller_in_a = iterate_frame_63_67_reg;
end
/* iterate_frame: %70*/
/*   store i32 %72, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
memory_controller_in_a = iterate_frame_70_72;
end
/* iterate_frame: %78*/
/*   store %struct.TYPE_4__* %76, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_126))
begin
memory_controller_in_a = iterate_frame_74_76_reg;
end
/* iterate_frame: %78*/
/*   store i32 %80, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
memory_controller_in_a = iterate_frame_78_80;
end
/* iterate_frame: %86*/
/*   store %struct.TYPE_4__* %84, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
memory_controller_in_a = iterate_frame_81_84_reg;
end
/* iterate_frame: %86*/
/*   store i32 %88, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
memory_controller_in_a = iterate_frame_86_88;
end
/* iterate_frame: %95*/
/*   store %struct.TYPE_4__* %92, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_95_146))
begin
memory_controller_in_a = iterate_frame_86_92_reg;
end
/* iterate_frame: %101*/
/*   store %struct.TYPE_4__* %99, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_101_152))
begin
memory_controller_in_a = iterate_frame_97_99_reg;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* iterate_frame: %13*/
/*   %14 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_55))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %13*/
/*   %16 = load %struct.TYPE_4__** %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_13_57))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %18*/
/*   store %struct.TYPE_4__* %16, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_60))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %18*/
/*   %20 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_61))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %18*/
/*   %22 = load %struct.TYPE_4__** %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_18_63))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %25*/
/*   store %struct.TYPE_4__* %22, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_67))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %25*/
/*   %26 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_68))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %25*/
/*   store i32 %27, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_25_70))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %29*/
/*   %31 = load %struct.TYPE_4__** %30, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_29_73))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %33*/
/*   store %struct.TYPE_4__* %31, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_76))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %33*/
/*   %34 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_77))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %33*/
/*   store i32 %35, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_33_79))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %36*/
/*   %37 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_81))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %36*/
/*   %39 = load %struct.TYPE_4__** %38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_36_83))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %41*/
/*   store %struct.TYPE_4__* %39, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_86))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %41*/
/*   %42 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_87))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %41*/
/*   store i32 %43, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_89))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %41*/
/*   %45 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_90))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %41*/
/*   %47 = load %struct.TYPE_4__** %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_41_92))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %50*/
/*   store %struct.TYPE_4__* %47, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_50_96))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %52*/
/*   %54 = load %struct.TYPE_4__** %53, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_52_99))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %56*/
/*   store %struct.TYPE_4__* %54, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_56_102))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %58*/
/*   %59 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_105))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %58*/
/*   %61 = load %struct.TYPE_4__** %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_58_107))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %63*/
/*   store %struct.TYPE_4__* %61, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_110))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %63*/
/*   %65 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_111))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %63*/
/*   %67 = load %struct.TYPE_4__** %66, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_63_113))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %70*/
/*   store %struct.TYPE_4__* %67, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_117))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %70*/
/*   %71 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_118))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %70*/
/*   store i32 %72, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_70_120))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %74*/
/*   %76 = load %struct.TYPE_4__** %75, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_74_123))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %78*/
/*   store %struct.TYPE_4__* %76, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_126))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %78*/
/*   %79 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_127))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %78*/
/*   store i32 %80, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_78_129))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %81*/
/*   %82 = load %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_131))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %81*/
/*   %84 = load %struct.TYPE_4__** %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_81_133))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %86*/
/*   store %struct.TYPE_4__* %84, %struct.TYPE_4__** %b, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_136))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %86*/
/*   %87 = load i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_137))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %86*/
/*   store i32 %88, i32* %bcount, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_139))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %86*/
/*   %90 = load %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_140))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %86*/
/*   %92 = load %struct.TYPE_4__** %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_86_142))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %95*/
/*   store %struct.TYPE_4__* %92, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_95_146))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %97*/
/*   %99 = load %struct.TYPE_4__** %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_97_149))
begin
memory_controller_size_a = 2'd2;
end
/* iterate_frame: %101*/
/*   store %struct.TYPE_4__* %99, %struct.TYPE_4__** %a, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_101_152))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* iterate_frame: %102*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_iterate_frame_BB_102_154))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
reg  iterate_frame_start;
reg [63:0] iterate_frame_arg_frr;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_arg_a;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_arg_b;
reg [31:0] iterate_frame_arg_fcount;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_arg_bcount;
reg [31:0] iterate_frame_arg_dir;
wire  iterate_frame_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_memory_controller_address_a;
wire  iterate_frame_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] iterate_frame_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] iterate_frame_memory_controller_out_a;
wire [1:0] iterate_frame_memory_controller_size_a;
wire  iterate_frame_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] iterate_frame_memory_controller_address_b;
wire  iterate_frame_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] iterate_frame_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] iterate_frame_memory_controller_out_b;
wire [1:0] iterate_frame_memory_controller_size_b;
reg  iterate_frame_memory_controller_waitrequest;
wire  iterate_frame_finish;
reg  iterate_frame_finish_final;
wire [31:0] iterate_frame_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


iterate_frame iterate_frame_inst (
	.memory_controller_enable_a (iterate_frame_memory_controller_enable_a),
	.memory_controller_address_a (iterate_frame_memory_controller_address_a),
	.memory_controller_write_enable_a (iterate_frame_memory_controller_write_enable_a),
	.memory_controller_in_a (iterate_frame_memory_controller_in_a),
	.memory_controller_size_a (iterate_frame_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (iterate_frame_memory_controller_enable_b),
	.memory_controller_address_b (iterate_frame_memory_controller_address_b),
	.memory_controller_write_enable_b (iterate_frame_memory_controller_write_enable_b),
	.memory_controller_in_b (iterate_frame_memory_controller_in_b),
	.memory_controller_size_b (iterate_frame_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (iterate_frame_start),
	.finish (iterate_frame_finish),
	.return_val (iterate_frame_return_val),
	.arg_frr (iterate_frame_arg_frr),
	.arg_a (iterate_frame_arg_a),
	.arg_b (iterate_frame_arg_b),
	.arg_fcount (iterate_frame_arg_fcount),
	.arg_bcount (iterate_frame_arg_bcount),
	.arg_dir (iterate_frame_arg_dir)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (iterate_frame_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
begin
main_0_1 = iterate_frame_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
iterate_frame_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_frr <= 64'd0;
if (reset == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_frr"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_a <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_a"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_b <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_b"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_fcount <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_fcount"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_bcount <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_bcount"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
iterate_frame_arg_dir <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to iterate_frame_arg_dir"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
begin
iterate_frame_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
begin
iterate_frame_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
iterate_frame_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
iterate_frame_finish_final = iterate_frame_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = iterate_frame_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = iterate_frame_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = iterate_frame_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = iterate_frame_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = iterate_frame_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = iterate_frame_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = iterate_frame_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = iterate_frame_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = iterate_frame_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = iterate_frame_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = iterate_frame_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = iterate_frame_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = iterate_frame_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = iterate_frame_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = iterate_frame_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = iterate_frame_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = iterate_frame_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = iterate_frame_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = iterate_frame_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @iterate_frame(double undef, %struct.TYPE_4__** undef, %struct.TYPE_4__** undef, i32 undef, i32* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = iterate_frame_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
