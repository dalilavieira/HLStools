//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:36 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module WPRINTF_ParseFormatA
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_format,
	arg_res
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_6_6 = 7'd6;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_6_7 = 7'd7;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_6_8 = 7'd8;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_6_9 = 7'd9;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_8_10 = 7'd10;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_11_11 = 7'd11;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_11_12 = 7'd12;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_11_13 = 7'd13;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_11_14 = 7'd14;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_13_15 = 7'd15;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_16_16 = 7'd16;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_16_17 = 7'd17;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_16_18 = 7'd18;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_16_19 = 7'd19;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20 = 7'd20;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21 = 7'd21;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22 = 7'd22;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23 = 7'd23;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24 = 7'd24;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25 = 7'd25;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26 = 7'd26;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27 = 7'd27;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28 = 7'd28;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29 = 7'd29;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30 = 7'd30;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31 = 7'd31;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32 = 7'd32;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33 = 7'd33;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34 = 7'd34;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35 = 7'd35;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36 = 7'd36;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37 = 7'd37;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38 = 7'd38;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39 = 7'd39;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_40_40 = 7'd40;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_40_41 = 7'd41;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_42_42 = 7'd42;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_42_43 = 7'd43;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_44_44 = 7'd44;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_44_45 = 7'd45;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_46_46 = 7'd46;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_46_47 = 7'd47;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_46_48 = 7'd48;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_49_49 = 7'd49;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_49_50 = 7'd50;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_49_51 = 7'd51;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_53_52 = 7'd52;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_53_53 = 7'd53;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_55_54 = 7'd54;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_55_55 = 7'd55;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_55_56 = 7'd56;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_59_57 = 7'd57;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58 = 7'd58;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59 = 7'd59;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_61_60 = 7'd60;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_61_61 = 7'd61;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_61_62 = 7'd62;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_64_63 = 7'd63;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_64_64 = 7'd64;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_66_65 = 7'd65;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_66_66 = 7'd66;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_68_67 = 7'd67;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_68_68 = 7'd68;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_70_69 = 7'd69;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_70_70 = 7'd70;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_72_71 = 7'd71;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_72_72 = 7'd72;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_74_73 = 7'd73;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_74_74 = 7'd74;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_76_75 = 7'd75;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_76_76 = 7'd76;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_77_77 = 7'd77;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_77_78 = 7'd78;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_78_79 = 7'd79;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_78_80 = 7'd80;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_80_81 = 7'd81;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_80_82 = 7'd82;
parameter [6:0] LEGUP_F_WPRINTF_ParseFormatA_BB_83_83 = 7'd83;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_format;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_res;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_0_3_reg;
reg [7:0] WPRINTF_ParseFormatA_0_4;
reg [7:0] WPRINTF_ParseFormatA_0_4_reg;
reg  WPRINTF_ParseFormatA_0_5;
reg  WPRINTF_ParseFormatA_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_6_7_reg;
reg [7:0] WPRINTF_ParseFormatA_6__pre;
reg [7:0] WPRINTF_ParseFormatA_6__pre_reg;
reg [7:0] WPRINTF_ParseFormatA_8_9;
reg [7:0] WPRINTF_ParseFormatA_8_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_8_p_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_8_p_0_reg;
reg  WPRINTF_ParseFormatA_8_10;
reg  WPRINTF_ParseFormatA_8_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_11_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_11_12_reg;
reg [7:0] WPRINTF_ParseFormatA_11__pre19;
reg [7:0] WPRINTF_ParseFormatA_11__pre19_reg;
reg [7:0] WPRINTF_ParseFormatA_13_14;
reg [7:0] WPRINTF_ParseFormatA_13_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_13_p_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_13_p_1_reg;
reg  WPRINTF_ParseFormatA_13_15;
reg  WPRINTF_ParseFormatA_13_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_16_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_16_17_reg;
reg [7:0] WPRINTF_ParseFormatA_16__pre20;
reg [7:0] WPRINTF_ParseFormatA_16__pre20_reg;
reg [7:0] WPRINTF_ParseFormatA__preheader7_18;
reg [7:0] WPRINTF_ParseFormatA__preheader7_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__preheader7_p_2_ph;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__preheader7_p_2_ph_reg;
reg [7:0] WPRINTF_ParseFormatA__preheader7__off8;
reg [7:0] WPRINTF_ParseFormatA__preheader7__off8_reg;
reg  WPRINTF_ParseFormatA__preheader7_19;
reg  WPRINTF_ParseFormatA__preheader7_19_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_20;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_20_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_indvar16;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_indvar16_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10_21;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10_21_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_tmp18;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_tmp18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__lr_ph10_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__lr_ph10_scevgep_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_22;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_22_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_23;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_23_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_24;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_24_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_25;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_25_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10_26;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10_26_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10__off;
reg [7:0] WPRINTF_ParseFormatA__lr_ph10__off_reg;
reg  WPRINTF_ParseFormatA__lr_ph10_27;
reg  WPRINTF_ParseFormatA__lr_ph10_27_reg;
reg [7:0] WPRINTF_ParseFormatA__critedge__lcssa;
reg [7:0] WPRINTF_ParseFormatA__critedge__lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__critedge_p_2_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg;
reg  WPRINTF_ParseFormatA__critedge_28;
reg  WPRINTF_ParseFormatA__critedge_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__preheader_p_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__preheader_p_34_reg;
reg [7:0] WPRINTF_ParseFormatA__preheader_29;
reg [7:0] WPRINTF_ParseFormatA__preheader_29_reg;
reg [7:0] WPRINTF_ParseFormatA__preheader__off35;
reg [7:0] WPRINTF_ParseFormatA__preheader__off35_reg;
reg  WPRINTF_ParseFormatA__preheader_30;
reg  WPRINTF_ParseFormatA__preheader_30_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_31;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_31_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_indvar;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_indvar_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph_32;
reg [7:0] WPRINTF_ParseFormatA__lr_ph_32_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_tmp;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__lr_ph_p_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__lr_ph_p_3_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_33;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_33_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_34;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_34_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_35;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_35_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_36;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_36_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph_37;
reg [7:0] WPRINTF_ParseFormatA__lr_ph_37_reg;
reg [7:0] WPRINTF_ParseFormatA__lr_ph__off3;
reg [7:0] WPRINTF_ParseFormatA__lr_ph__off3_reg;
reg  WPRINTF_ParseFormatA__lr_ph_38;
reg  WPRINTF_ParseFormatA__lr_ph_38_reg;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_indvar_next;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_indvar_next_reg;
reg [7:0] WPRINTF_ParseFormatA__critedge1_39;
reg [7:0] WPRINTF_ParseFormatA__critedge1_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__critedge1_p_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA__critedge1_p_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_40_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_40_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_42_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_44_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_46_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_46_47_reg;
reg [7:0] WPRINTF_ParseFormatA_46_48;
reg [7:0] WPRINTF_ParseFormatA_46_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_49_50_reg;
reg [7:0] WPRINTF_ParseFormatA_49_51;
reg [7:0] WPRINTF_ParseFormatA_49_51_reg;
reg  WPRINTF_ParseFormatA_49_52;
reg  WPRINTF_ParseFormatA_49_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_53_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_53_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_55_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_55_56_reg;
reg [7:0] WPRINTF_ParseFormatA_55_57;
reg [7:0] WPRINTF_ParseFormatA_55_57_reg;
reg  WPRINTF_ParseFormatA_55_58;
reg  WPRINTF_ParseFormatA_55_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_59_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_59_60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_61_p_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_61_p_5_reg;
reg [7:0] WPRINTF_ParseFormatA_61_62;
reg [7:0] WPRINTF_ParseFormatA_61_62_reg;
reg [31:0] WPRINTF_ParseFormatA_61_63;
reg [31:0] WPRINTF_ParseFormatA_61_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_64_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_64_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_66_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_66_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_68_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_68_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_70_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_70_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_72_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_74_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_78_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_78_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_80_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_80_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_80_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_80_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_83_p_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_83_p_6_reg;
reg [31:0] WPRINTF_ParseFormatA_83_84;
reg [31:0] WPRINTF_ParseFormatA_83_84_reg;
reg [31:0] WPRINTF_ParseFormatA_83_85;
reg [31:0] WPRINTF_ParseFormatA_83_85_reg;
reg [31:0] WPRINTF_ParseFormatA_83_86;
reg [31:0] WPRINTF_ParseFormatA_83_86_reg;
reg [31:0] WPRINTF_ParseFormatA_83_87;
reg [31:0] WPRINTF_ParseFormatA_83_87_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_WPRINTF_ParseFormatA__lr_ph10_23_en;
reg [31:0] WPRINTF_ParseFormatA__lr_ph10_23_stage0_reg;
reg  lpm_mult_WPRINTF_ParseFormatA__lr_ph_34_en;
reg [31:0] WPRINTF_ParseFormatA__lr_ph_34_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_6;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_7;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_8;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_6_9;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_8_10;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_13_15;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_11;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_12;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_12;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_13;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_13;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_14;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_11_14;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_13_15;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_13_15;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_16;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_17;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_18;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_18;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_19;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_16_19;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg == 8'd108)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_40_40;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_40_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg == 8'd104)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_42_42;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_42_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg == 8'd119)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_44_44;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_44_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg == 8'd73)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_46;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd108)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd104)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd119)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd73)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_40_40;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_40_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_40_41;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_40_41;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_42_42;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_42_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_42_43;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_42_43;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_44_44;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_44_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_44_45;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_44_45;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_46;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_47;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_47;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_48;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_46_48;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_46_48 == 8'd54)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_49;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_46_48 == 8'd51)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_54;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_48) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_46_48 != 8'd54)) & (WPRINTF_ParseFormatA_46_48 != 8'd51)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_49;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_50;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_50;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_51;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_49_51;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_51) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_49_52 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_53_52;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_53_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_51) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_49_52 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_53_52;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_53_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_53_53;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_53_53;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_54;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_55;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_56;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_55_56;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_56) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_55_58 == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_59_57;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_56) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_55_58 == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_59_57;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_60;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_61;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_61;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_62;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_61_62;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd99)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_64_63;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_64_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd67)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_66_65;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_66_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd100)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_68_67;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_68_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd105)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_68_67;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_68_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd115)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_70_69;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_70_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd83)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_72_71;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_72_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd117)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_74_73;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_74_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd112)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_76_75;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_76_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd88)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_77_77;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_77_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 == 32'd120)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_78_79;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_61_63 != 32'd99)) & (WPRINTF_ParseFormatA_61_63 != 32'd67)) & (WPRINTF_ParseFormatA_61_63 != 32'd100)) & (WPRINTF_ParseFormatA_61_63 != 32'd105)) & (WPRINTF_ParseFormatA_61_63 != 32'd115)) & (WPRINTF_ParseFormatA_61_63 != 32'd83)) & (WPRINTF_ParseFormatA_61_63 != 32'd117)) & (WPRINTF_ParseFormatA_61_63 != 32'd112)) & (WPRINTF_ParseFormatA_61_63 != 32'd88)) & (WPRINTF_ParseFormatA_61_63 != 32'd120)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_80_81;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_64_63;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_64_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_64_64;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_64_64;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_66_65;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_66_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_66_66;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_66_66;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_68_67;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_68_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_68_68;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_68_68;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_70_69;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_70_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_70_70;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_70_70;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_72_71;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_72_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_72_72;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_72_72;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_74_73;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_74_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_74_74;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_74_74;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_76_75;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_76_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_76_76;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_76_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_76_76;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_76_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_77_77;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_77_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_77_77;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_77_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_77_78;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_77_78;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_78_79;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_78_79;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_78_80;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_78_80;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_80_81;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_80_82;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_80_82;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_WPRINTF_ParseFormatA_BB_83_83;
if (reset == 1'b0 && ^(LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 0*/
begin
WPRINTF_ParseFormatA_0_1 = arg_res;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
WPRINTF_ParseFormatA_0_1_reg <= WPRINTF_ParseFormatA_0_1;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_0_1_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 1*/
begin
WPRINTF_ParseFormatA_0_2 = (arg_res + 4);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %2 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
WPRINTF_ParseFormatA_0_2_reg <= WPRINTF_ParseFormatA_0_2;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_0_2_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 2*/
begin
WPRINTF_ParseFormatA_0_3 = (arg_res + 8);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 2*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
WPRINTF_ParseFormatA_0_3_reg <= WPRINTF_ParseFormatA_0_3;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_0_3_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_0_4 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5))
begin
WPRINTF_ParseFormatA_0_4_reg <= WPRINTF_ParseFormatA_0_4;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_0_4_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %5 = icmp eq i8 %4, 45*/
begin
WPRINTF_ParseFormatA_0_5 = (WPRINTF_ParseFormatA_0_4 == 8'd45);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %0*/
/*   %5 = icmp eq i8 %4, 45*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5))
begin
WPRINTF_ParseFormatA_0_5_reg <= WPRINTF_ParseFormatA_0_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_0_5_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %6*/
/*   %7 = getelementptr inbounds i8* %format, i32 1*/
begin
WPRINTF_ParseFormatA_6_7 = (arg_format + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %6*/
/*   %7 = getelementptr inbounds i8* %format, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
WPRINTF_ParseFormatA_6_7_reg <= WPRINTF_ParseFormatA_6_7;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_6_7_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_6__pre = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9))
begin
WPRINTF_ParseFormatA_6__pre_reg <= WPRINTF_ParseFormatA_6__pre;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_6__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_6__pre_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %9 = phi i8 [ %.pre, %6 ], [ %4, %0 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd0)))
begin
WPRINTF_ParseFormatA_8_9 = WPRINTF_ParseFormatA_0_4;
end
/* WPRINTF_ParseFormatA: %8*/
/*   %9 = phi i8 [ %.pre, %6 ], [ %4, %0 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_8_9 = WPRINTF_ParseFormatA_6__pre;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %9 = phi i8 [ %.pre, %6 ], [ %4, %0 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd0)))
begin
WPRINTF_ParseFormatA_8_9_reg <= WPRINTF_ParseFormatA_8_9;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_8_9_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %8*/
/*   %9 = phi i8 [ %.pre, %6 ], [ %4, %0 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_8_9_reg <= WPRINTF_ParseFormatA_8_9;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_8_9_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %p.0 = phi i8* [ %7, %6 ], [ %format, %0 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd0)))
begin
WPRINTF_ParseFormatA_8_p_0 = arg_format;
end
/* WPRINTF_ParseFormatA: %8*/
/*   %p.0 = phi i8* [ %7, %6 ], [ %format, %0 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_8_p_0 = WPRINTF_ParseFormatA_6_7_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %p.0 = phi i8* [ %7, %6 ], [ %format, %0 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_5) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_0_5 == 1'd0)))
begin
WPRINTF_ParseFormatA_8_p_0_reg <= WPRINTF_ParseFormatA_8_p_0;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_8_p_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_8_p_0_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %8*/
/*   %p.0 = phi i8* [ %7, %6 ], [ %format, %0 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_9) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_8_p_0_reg <= WPRINTF_ParseFormatA_8_p_0;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_8_p_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_8_p_0_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %10 = icmp eq i8 %9, 35*/
begin
WPRINTF_ParseFormatA_8_10 = (WPRINTF_ParseFormatA_8_9_reg == 8'd35);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %8*/
/*   %10 = icmp eq i8 %9, 35*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10))
begin
WPRINTF_ParseFormatA_8_10_reg <= WPRINTF_ParseFormatA_8_10;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_8_10_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %11*/
/*   %12 = getelementptr inbounds i8* %p.0, i32 1*/
begin
WPRINTF_ParseFormatA_11_12 = (WPRINTF_ParseFormatA_8_p_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %11*/
/*   %12 = getelementptr inbounds i8* %p.0, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
WPRINTF_ParseFormatA_11_12_reg <= WPRINTF_ParseFormatA_11_12;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_11_12_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_11__pre19 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14))
begin
WPRINTF_ParseFormatA_11__pre19_reg <= WPRINTF_ParseFormatA_11__pre19;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_11__pre19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_11__pre19_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %14 = phi i8 [ %.pre19, %11 ], [ %9, %8 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd0)))
begin
WPRINTF_ParseFormatA_13_14 = WPRINTF_ParseFormatA_8_9_reg;
end
/* WPRINTF_ParseFormatA: %13*/
/*   %14 = phi i8 [ %.pre19, %11 ], [ %9, %8 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_13_14 = WPRINTF_ParseFormatA_11__pre19;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %14 = phi i8 [ %.pre19, %11 ], [ %9, %8 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd0)))
begin
WPRINTF_ParseFormatA_13_14_reg <= WPRINTF_ParseFormatA_13_14;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_13_14_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %13*/
/*   %14 = phi i8 [ %.pre19, %11 ], [ %9, %8 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_13_14_reg <= WPRINTF_ParseFormatA_13_14;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_13_14_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %p.1 = phi i8* [ %12, %11 ], [ %p.0, %8 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd0)))
begin
WPRINTF_ParseFormatA_13_p_1 = WPRINTF_ParseFormatA_8_p_0_reg;
end
/* WPRINTF_ParseFormatA: %13*/
/*   %p.1 = phi i8* [ %12, %11 ], [ %p.0, %8 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_13_p_1 = WPRINTF_ParseFormatA_11_12_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %p.1 = phi i8* [ %12, %11 ], [ %p.0, %8 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_8_10) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_8_10 == 1'd0)))
begin
WPRINTF_ParseFormatA_13_p_1_reg <= WPRINTF_ParseFormatA_13_p_1;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_13_p_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_13_p_1_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %13*/
/*   %p.1 = phi i8* [ %12, %11 ], [ %p.0, %8 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_14) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_13_p_1_reg <= WPRINTF_ParseFormatA_13_p_1;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_13_p_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_13_p_1_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %15 = icmp eq i8 %14, 48*/
begin
WPRINTF_ParseFormatA_13_15 = (WPRINTF_ParseFormatA_13_14_reg == 8'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %13*/
/*   %15 = icmp eq i8 %14, 48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15))
begin
WPRINTF_ParseFormatA_13_15_reg <= WPRINTF_ParseFormatA_13_15;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_13_15_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %16*/
/*   %17 = getelementptr inbounds i8* %p.1, i32 1*/
begin
WPRINTF_ParseFormatA_16_17 = (WPRINTF_ParseFormatA_13_p_1_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %16*/
/*   %17 = getelementptr inbounds i8* %p.1, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
WPRINTF_ParseFormatA_16_17_reg <= WPRINTF_ParseFormatA_16_17;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_16_17_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_16__pre20 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19))
begin
WPRINTF_ParseFormatA_16__pre20_reg <= WPRINTF_ParseFormatA_16__pre20;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_16__pre20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_16__pre20_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %18 = phi i8 [ %14, %13 ], [ %.pre20, %16 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_18 = WPRINTF_ParseFormatA_13_14_reg;
end
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %18 = phi i8 [ %14, %13 ], [ %.pre20, %16 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__preheader7_18 = WPRINTF_ParseFormatA_16__pre20;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %18 = phi i8 [ %14, %13 ], [ %.pre20, %16 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_18_reg <= WPRINTF_ParseFormatA__preheader7_18;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7_18_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %18 = phi i8 [ %14, %13 ], [ %.pre20, %16 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_18_reg <= WPRINTF_ParseFormatA__preheader7_18;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7_18_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %p.2.ph = phi i8* [ %p.1, %13 ], [ %17, %16 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_p_2_ph = WPRINTF_ParseFormatA_13_p_1_reg;
end
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %p.2.ph = phi i8* [ %p.1, %13 ], [ %17, %16 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__preheader7_p_2_ph = WPRINTF_ParseFormatA_16_17_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %p.2.ph = phi i8* [ %p.1, %13 ], [ %17, %16 ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_13_15) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_13_15 == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_p_2_ph_reg <= WPRINTF_ParseFormatA__preheader7_p_2_ph;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7_p_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7_p_2_ph_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %p.2.ph = phi i8* [ %p.1, %13 ], [ %17, %16 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_19) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__preheader7_p_2_ph_reg <= WPRINTF_ParseFormatA__preheader7_p_2_ph;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7_p_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7_p_2_ph_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %.off8 = add i8 %18, -48*/
begin
WPRINTF_ParseFormatA__preheader7__off8 = (WPRINTF_ParseFormatA__preheader7_18_reg + -8'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %.off8 = add i8 %18, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20))
begin
WPRINTF_ParseFormatA__preheader7__off8_reg <= WPRINTF_ParseFormatA__preheader7__off8;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7__off8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7__off8_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %19 = icmp ult i8 %.off8, 10*/
begin
WPRINTF_ParseFormatA__preheader7_19 = (WPRINTF_ParseFormatA__preheader7__off8 < 8'd10);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader7*/
/*   %19 = icmp ult i8 %.off8, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20))
begin
WPRINTF_ParseFormatA__preheader7_19_reg <= WPRINTF_ParseFormatA__preheader7_19;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader7_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader7_19_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %20 = phi i32 [ %25, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_20 = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %20 = phi i32 [ %25, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph10_20 = WPRINTF_ParseFormatA__lr_ph10_25_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %20 = phi i32 [ %25, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_20_reg <= WPRINTF_ParseFormatA__lr_ph10_20;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_20_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %20 = phi i32 [ %25, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph10_20_reg <= WPRINTF_ParseFormatA__lr_ph10_20;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_20_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %indvar16 = phi i32 [ %tmp18, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_indvar16 = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %indvar16 = phi i32 [ %tmp18, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph10_indvar16 = WPRINTF_ParseFormatA__lr_ph10_tmp18_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %indvar16 = phi i32 [ %tmp18, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_indvar16_reg <= WPRINTF_ParseFormatA__lr_ph10_indvar16;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_indvar16_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %indvar16 = phi i32 [ %tmp18, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph10_indvar16_reg <= WPRINTF_ParseFormatA__lr_ph10_indvar16;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_indvar16_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %21 = phi i8 [ %26, %.lr.ph10 ], [ %18, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_21 = WPRINTF_ParseFormatA__preheader7_18_reg;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %21 = phi i8 [ %26, %.lr.ph10 ], [ %18, %.lr.ph10.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph10_21 = WPRINTF_ParseFormatA__lr_ph10_26;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %21 = phi i8 [ %26, %.lr.ph10 ], [ %18, %.lr.ph10.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_preheader_21) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph10_21_reg <= WPRINTF_ParseFormatA__lr_ph10_21;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_21_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %21 = phi i8 [ %26, %.lr.ph10 ], [ %18, %.lr.ph10.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph10_27 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph10_21_reg <= WPRINTF_ParseFormatA__lr_ph10_21;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_21_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %tmp18 = add i32 %indvar16, 1*/
begin
WPRINTF_ParseFormatA__lr_ph10_tmp18 = (WPRINTF_ParseFormatA__lr_ph10_indvar16_reg + 32'd1);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %tmp18 = add i32 %indvar16, 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22))
begin
WPRINTF_ParseFormatA__lr_ph10_tmp18_reg <= WPRINTF_ParseFormatA__lr_ph10_tmp18;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_tmp18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_tmp18_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %scevgep = getelementptr i8* %p.2.ph, i32 %tmp18*/
begin
WPRINTF_ParseFormatA__lr_ph10_scevgep = (WPRINTF_ParseFormatA__preheader7_p_2_ph_reg + (1 * WPRINTF_ParseFormatA__lr_ph10_tmp18_reg));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %scevgep = getelementptr i8* %p.2.ph, i32 %tmp18*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
WPRINTF_ParseFormatA__lr_ph10_scevgep_reg <= WPRINTF_ParseFormatA__lr_ph10_scevgep;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %22 = sext i8 %21 to i32*/
begin
WPRINTF_ParseFormatA__lr_ph10_22 = $signed(WPRINTF_ParseFormatA__lr_ph10_21_reg);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %22 = sext i8 %21 to i32*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22))
begin
WPRINTF_ParseFormatA__lr_ph10_22_reg <= WPRINTF_ParseFormatA__lr_ph10_22;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_22_reg"); $finish; end
end
end
always @(*) begin
WPRINTF_ParseFormatA__lr_ph10_23 = WPRINTF_ParseFormatA__lr_ph10_23_stage0_reg;
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %23 = mul nsw i32 %20, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
WPRINTF_ParseFormatA__lr_ph10_23_reg <= WPRINTF_ParseFormatA__lr_ph10_23;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_23_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %23 = mul nsw i32 %20, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
WPRINTF_ParseFormatA__lr_ph10_23_reg <= WPRINTF_ParseFormatA__lr_ph10_23;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_23_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %24 = add i32 %22, -48*/
begin
WPRINTF_ParseFormatA__lr_ph10_24 = (WPRINTF_ParseFormatA__lr_ph10_22 + -32'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %24 = add i32 %22, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_22))
begin
WPRINTF_ParseFormatA__lr_ph10_24_reg <= WPRINTF_ParseFormatA__lr_ph10_24;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_24_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %25 = add i32 %24, %23*/
begin
WPRINTF_ParseFormatA__lr_ph10_25 = (WPRINTF_ParseFormatA__lr_ph10_24_reg + WPRINTF_ParseFormatA__lr_ph10_23);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %25 = add i32 %24, %23*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
WPRINTF_ParseFormatA__lr_ph10_25_reg <= WPRINTF_ParseFormatA__lr_ph10_25;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_25_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA__lr_ph10_26 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26))
begin
WPRINTF_ParseFormatA__lr_ph10_26_reg <= WPRINTF_ParseFormatA__lr_ph10_26;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_26_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %.off = add i8 %26, -48*/
begin
WPRINTF_ParseFormatA__lr_ph10__off = (WPRINTF_ParseFormatA__lr_ph10_26 + -8'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %.off = add i8 %26, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26))
begin
WPRINTF_ParseFormatA__lr_ph10__off_reg <= WPRINTF_ParseFormatA__lr_ph10__off;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10__off) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10__off_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %27 = icmp ult i8 %.off, 10*/
begin
WPRINTF_ParseFormatA__lr_ph10_27 = (WPRINTF_ParseFormatA__lr_ph10__off < 8'd10);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %27 = icmp ult i8 %.off, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_26))
begin
WPRINTF_ParseFormatA__lr_ph10_27_reg <= WPRINTF_ParseFormatA__lr_ph10_27;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph10_27_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %.lcssa = phi i8 [ %18, %.preheader7 ], [ %26, %.critedge.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge__lcssa = WPRINTF_ParseFormatA__preheader7_18_reg;
end
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %.lcssa = phi i8 [ %18, %.preheader7 ], [ %26, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__critedge__lcssa = WPRINTF_ParseFormatA__lr_ph10_26_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %.lcssa = phi i8 [ %18, %.preheader7 ], [ %26, %.critedge.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge__lcssa_reg <= WPRINTF_ParseFormatA__critedge__lcssa;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge__lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge__lcssa_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %.lcssa = phi i8 [ %18, %.preheader7 ], [ %26, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge__lcssa_reg <= WPRINTF_ParseFormatA__critedge__lcssa;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge__lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge__lcssa_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %p.2.lcssa = phi i8* [ %p.2.ph, %.preheader7 ], [ %scevgep, %.critedge.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge_p_2_lcssa = WPRINTF_ParseFormatA__preheader7_p_2_ph_reg;
end
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %p.2.lcssa = phi i8* [ %p.2.ph, %.preheader7 ], [ %scevgep, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__critedge_p_2_lcssa = WPRINTF_ParseFormatA__lr_ph10_scevgep_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %p.2.lcssa = phi i8* [ %p.2.ph, %.preheader7 ], [ %scevgep, %.critedge.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader7_20) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader7_19 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg <= WPRINTF_ParseFormatA__critedge_p_2_lcssa;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge_p_2_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %p.2.lcssa = phi i8* [ %p.2.ph, %.preheader7 ], [ %scevgep, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_loopexit_27) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg <= WPRINTF_ParseFormatA__critedge_p_2_lcssa;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge_p_2_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %28 = icmp eq i8 %.lcssa, 46*/
begin
WPRINTF_ParseFormatA__critedge_28 = (WPRINTF_ParseFormatA__critedge__lcssa_reg == 8'd46);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.critedge*/
/*   %28 = icmp eq i8 %.lcssa, 46*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28))
begin
WPRINTF_ParseFormatA__critedge_28_reg <= WPRINTF_ParseFormatA__critedge_28;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge_28_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %p.34 = getelementptr inbounds i8* %p.2.lcssa, i32 1*/
begin
WPRINTF_ParseFormatA__preheader_p_34 = (WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %p.34 = getelementptr inbounds i8* %p.2.lcssa, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29))
begin
WPRINTF_ParseFormatA__preheader_p_34_reg <= WPRINTF_ParseFormatA__preheader_p_34;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader_p_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader_p_34_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA__preheader_29 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31))
begin
WPRINTF_ParseFormatA__preheader_29_reg <= WPRINTF_ParseFormatA__preheader_29;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader_29_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %.off35 = add i8 %29, -48*/
begin
WPRINTF_ParseFormatA__preheader__off35 = (WPRINTF_ParseFormatA__preheader_29 + -8'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %.off35 = add i8 %29, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31))
begin
WPRINTF_ParseFormatA__preheader__off35_reg <= WPRINTF_ParseFormatA__preheader__off35;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader__off35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader__off35_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %30 = icmp ult i8 %.off35, 10*/
begin
WPRINTF_ParseFormatA__preheader_30 = (WPRINTF_ParseFormatA__preheader__off35 < 8'd10);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %30 = icmp ult i8 %.off35, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31))
begin
WPRINTF_ParseFormatA__preheader_30_reg <= WPRINTF_ParseFormatA__preheader_30;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__preheader_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__preheader_30_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %31 = phi i32 [ %36, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_31 = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %31 = phi i32 [ %36, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph_31 = WPRINTF_ParseFormatA__lr_ph_36_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %31 = phi i32 [ %36, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_31_reg <= WPRINTF_ParseFormatA__lr_ph_31;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_31_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %31 = phi i32 [ %36, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph_31_reg <= WPRINTF_ParseFormatA__lr_ph_31;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_31_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_indvar = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph_indvar = WPRINTF_ParseFormatA__lr_ph_indvar_next_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_indvar_reg <= WPRINTF_ParseFormatA__lr_ph_indvar;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_indvar_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph_indvar_reg <= WPRINTF_ParseFormatA__lr_ph_indvar;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_indvar_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %32 = phi i8 [ %37, %.lr.ph ], [ %29, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_32 = WPRINTF_ParseFormatA__preheader_29_reg;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %32 = phi i8 [ %37, %.lr.ph ], [ %29, %.lr.ph.preheader ]*/
else /* if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1))) */
begin
WPRINTF_ParseFormatA__lr_ph_32 = WPRINTF_ParseFormatA__lr_ph_37;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %32 = phi i8 [ %37, %.lr.ph ], [ %29, %.lr.ph.preheader ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_preheader_32) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__lr_ph_32_reg <= WPRINTF_ParseFormatA__lr_ph_32;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_32_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %32 = phi i8 [ %37, %.lr.ph ], [ %29, %.lr.ph.preheader ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__lr_ph_38 == 1'd1)))
begin
WPRINTF_ParseFormatA__lr_ph_32_reg <= WPRINTF_ParseFormatA__lr_ph_32;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_32_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %tmp = add i32 %indvar, 2*/
begin
WPRINTF_ParseFormatA__lr_ph_tmp = (WPRINTF_ParseFormatA__lr_ph_indvar_reg + 32'd2);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %tmp = add i32 %indvar, 2*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33))
begin
WPRINTF_ParseFormatA__lr_ph_tmp_reg <= WPRINTF_ParseFormatA__lr_ph_tmp;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %p.3 = getelementptr i8* %p.2.lcssa, i32 %tmp*/
begin
WPRINTF_ParseFormatA__lr_ph_p_3 = (WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg + (1 * WPRINTF_ParseFormatA__lr_ph_tmp_reg));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %p.3 = getelementptr i8* %p.2.lcssa, i32 %tmp*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
WPRINTF_ParseFormatA__lr_ph_p_3_reg <= WPRINTF_ParseFormatA__lr_ph_p_3;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_p_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_p_3_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %33 = sext i8 %32 to i32*/
begin
WPRINTF_ParseFormatA__lr_ph_33 = $signed(WPRINTF_ParseFormatA__lr_ph_32_reg);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %33 = sext i8 %32 to i32*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33))
begin
WPRINTF_ParseFormatA__lr_ph_33_reg <= WPRINTF_ParseFormatA__lr_ph_33;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_33_reg"); $finish; end
end
end
always @(*) begin
WPRINTF_ParseFormatA__lr_ph_34 = WPRINTF_ParseFormatA__lr_ph_34_stage0_reg;
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %34 = mul nsw i32 %31, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
WPRINTF_ParseFormatA__lr_ph_34_reg <= WPRINTF_ParseFormatA__lr_ph_34;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_34_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %34 = mul nsw i32 %31, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
WPRINTF_ParseFormatA__lr_ph_34_reg <= WPRINTF_ParseFormatA__lr_ph_34;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_34_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %35 = add i32 %33, -48*/
begin
WPRINTF_ParseFormatA__lr_ph_35 = (WPRINTF_ParseFormatA__lr_ph_33 + -32'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %35 = add i32 %33, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33))
begin
WPRINTF_ParseFormatA__lr_ph_35_reg <= WPRINTF_ParseFormatA__lr_ph_35;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_35_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %36 = add i32 %35, %34*/
begin
WPRINTF_ParseFormatA__lr_ph_36 = (WPRINTF_ParseFormatA__lr_ph_35_reg + WPRINTF_ParseFormatA__lr_ph_34);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %36 = add i32 %35, %34*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
WPRINTF_ParseFormatA__lr_ph_36_reg <= WPRINTF_ParseFormatA__lr_ph_36;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_36_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA__lr_ph_37 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37))
begin
WPRINTF_ParseFormatA__lr_ph_37_reg <= WPRINTF_ParseFormatA__lr_ph_37;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_37_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %.off3 = add i8 %37, -48*/
begin
WPRINTF_ParseFormatA__lr_ph__off3 = (WPRINTF_ParseFormatA__lr_ph_37 + -8'd48);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %.off3 = add i8 %37, -48*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37))
begin
WPRINTF_ParseFormatA__lr_ph__off3_reg <= WPRINTF_ParseFormatA__lr_ph__off3;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph__off3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph__off3_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %38 = icmp ult i8 %.off3, 10*/
begin
WPRINTF_ParseFormatA__lr_ph_38 = (WPRINTF_ParseFormatA__lr_ph__off3 < 8'd10);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %38 = icmp ult i8 %.off3, 10*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_37))
begin
WPRINTF_ParseFormatA__lr_ph_38_reg <= WPRINTF_ParseFormatA__lr_ph_38;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_38_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
WPRINTF_ParseFormatA__lr_ph_indvar_next = (WPRINTF_ParseFormatA__lr_ph_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %indvar.next = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_33))
begin
WPRINTF_ParseFormatA__lr_ph_indvar_next_reg <= WPRINTF_ParseFormatA__lr_ph_indvar_next;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__lr_ph_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__lr_ph_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_39 = WPRINTF_ParseFormatA__critedge__lcssa_reg;
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
else if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_39 = WPRINTF_ParseFormatA__preheader_29;
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__critedge1_39 = WPRINTF_ParseFormatA__lr_ph_37_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_39_reg <= WPRINTF_ParseFormatA__critedge1_39;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_39_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_39_reg <= WPRINTF_ParseFormatA__critedge1_39;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_39_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %39 = phi i8 [ %.lcssa, %.critedge ], [ %29, %.preheader ], [ %37, %.critedge1.loopexit ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_39_reg <= WPRINTF_ParseFormatA__critedge1_39;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_39_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_p_4 = WPRINTF_ParseFormatA__critedge_p_2_lcssa_reg;
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
else if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_p_4 = WPRINTF_ParseFormatA__preheader_p_34_reg;
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA__critedge1_p_4 = WPRINTF_ParseFormatA__lr_ph_p_3_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge_28) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge_28 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_p_4_reg <= WPRINTF_ParseFormatA__critedge1_p_4;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_p_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_p_4_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
if ((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_31) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__preheader_30 == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_p_4_reg <= WPRINTF_ParseFormatA__critedge1_p_4;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_p_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_p_4_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %.critedge1*/
/*   %p.4 = phi i8* [ %p.2.lcssa, %.critedge ], [ %p.34, %.preheader ], [ %p.3, %.critedge1.loopexit ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_loopexit_38) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA__critedge1_p_4_reg <= WPRINTF_ParseFormatA__critedge1_p_4;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA__critedge1_p_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA__critedge1_p_4_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %40*/
/*   %41 = getelementptr inbounds i8* %p.4, i32 1*/
begin
WPRINTF_ParseFormatA_40_41 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %40*/
/*   %41 = getelementptr inbounds i8* %p.4, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
WPRINTF_ParseFormatA_40_41_reg <= WPRINTF_ParseFormatA_40_41;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_40_41_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %42*/
/*   %43 = getelementptr inbounds i8* %p.4, i32 1*/
begin
WPRINTF_ParseFormatA_42_43 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %42*/
/*   %43 = getelementptr inbounds i8* %p.4, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
WPRINTF_ParseFormatA_42_43_reg <= WPRINTF_ParseFormatA_42_43;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_42_43_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %44*/
/*   %45 = getelementptr inbounds i8* %p.4, i32 1*/
begin
WPRINTF_ParseFormatA_44_45 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %44*/
/*   %45 = getelementptr inbounds i8* %p.4, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
WPRINTF_ParseFormatA_44_45_reg <= WPRINTF_ParseFormatA_44_45;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_44_45_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %46*/
/*   %47 = getelementptr inbounds i8* %p.4, i32 1*/
begin
WPRINTF_ParseFormatA_46_47 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %46*/
/*   %47 = getelementptr inbounds i8* %p.4, i32 1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46))
begin
WPRINTF_ParseFormatA_46_47_reg <= WPRINTF_ParseFormatA_46_47;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_46_47_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_46_48 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_48))
begin
WPRINTF_ParseFormatA_46_48_reg <= WPRINTF_ParseFormatA_46_48;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_46_48_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %50 = getelementptr inbounds i8* %p.4, i32 2*/
begin
WPRINTF_ParseFormatA_49_50 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %50 = getelementptr inbounds i8* %p.4, i32 2*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49))
begin
WPRINTF_ParseFormatA_49_50_reg <= WPRINTF_ParseFormatA_49_50;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_49_50_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_49_51 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_51))
begin
WPRINTF_ParseFormatA_49_51_reg <= WPRINTF_ParseFormatA_49_51;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_49_51_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %52 = icmp eq i8 %51, 52*/
begin
WPRINTF_ParseFormatA_49_52 = (WPRINTF_ParseFormatA_49_51 == 8'd52);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %49*/
/*   %52 = icmp eq i8 %51, 52*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_51))
begin
WPRINTF_ParseFormatA_49_52_reg <= WPRINTF_ParseFormatA_49_52;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_49_52_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %53*/
/*   %54 = getelementptr inbounds i8* %p.4, i32 3*/
begin
WPRINTF_ParseFormatA_53_54 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %53*/
/*   %54 = getelementptr inbounds i8* %p.4, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
WPRINTF_ParseFormatA_53_54_reg <= WPRINTF_ParseFormatA_53_54;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_53_54_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %56 = getelementptr inbounds i8* %p.4, i32 2*/
begin
WPRINTF_ParseFormatA_55_56 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %56 = getelementptr inbounds i8* %p.4, i32 2*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54))
begin
WPRINTF_ParseFormatA_55_56_reg <= WPRINTF_ParseFormatA_55_56;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_55_56_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_55_57 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_56))
begin
WPRINTF_ParseFormatA_55_57_reg <= WPRINTF_ParseFormatA_55_57;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_55_57_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %58 = icmp eq i8 %57, 50*/
begin
WPRINTF_ParseFormatA_55_58 = (WPRINTF_ParseFormatA_55_57 == 8'd50);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %55*/
/*   %58 = icmp eq i8 %57, 50*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_56))
begin
WPRINTF_ParseFormatA_55_58_reg <= WPRINTF_ParseFormatA_55_58;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_55_58_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %59*/
/*   %60 = getelementptr inbounds i8* %p.4, i32 3*/
begin
WPRINTF_ParseFormatA_59_60 = (WPRINTF_ParseFormatA__critedge1_p_4_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %59*/
/*   %60 = getelementptr inbounds i8* %p.4, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_59_57))
begin
WPRINTF_ParseFormatA_59_60_reg <= WPRINTF_ParseFormatA_59_60;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_59_60_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd108)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd104)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd119)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd73)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA__critedge1_p_4_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_40_41_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_42_43_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_44_45_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_53_54_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_59_60;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_61_p_5 = WPRINTF_ParseFormatA_46_47_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((((((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__critedge1_39) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd108)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd104)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd119)) & (WPRINTF_ParseFormatA__critedge1_39_reg != 8'd73)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_41) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_43) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_45) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_53) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_59_57) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %61*/
/*   %p.5 = phi i8* [ %41, %40 ], [ %43, %42 ], [ %45, %44 ], [ %54, %53 ], [ %60, %59 ], [ %47, %thread-pre-split.thread ], [ %p.4, %.critedge1 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_59) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_61_p_5_reg <= WPRINTF_ParseFormatA_61_p_5;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_p_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_p_5_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
begin
WPRINTF_ParseFormatA_61_62 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62))
begin
WPRINTF_ParseFormatA_61_62_reg <= WPRINTF_ParseFormatA_61_62;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_62_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %63 = sext i8 %62 to i32*/
begin
WPRINTF_ParseFormatA_61_63 = $signed(WPRINTF_ParseFormatA_61_62);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %61*/
/*   %63 = sext i8 %62 to i32*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_62))
begin
WPRINTF_ParseFormatA_61_63_reg <= WPRINTF_ParseFormatA_61_63;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_61_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_61_63_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %64*/
/*   %65 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_64_65 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %64*/
/*   %65 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
WPRINTF_ParseFormatA_64_65_reg <= WPRINTF_ParseFormatA_64_65;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_64_65_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %66*/
/*   %67 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_66_67 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %66*/
/*   %67 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
WPRINTF_ParseFormatA_66_67_reg <= WPRINTF_ParseFormatA_66_67;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_66_67_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %68*/
/*   %69 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_68_69 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %68*/
/*   %69 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
WPRINTF_ParseFormatA_68_69_reg <= WPRINTF_ParseFormatA_68_69;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_68_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_68_69_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %70*/
/*   %71 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_70_71 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %70*/
/*   %71 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
WPRINTF_ParseFormatA_70_71_reg <= WPRINTF_ParseFormatA_70_71;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_70_71_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %72*/
/*   %73 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_72_73 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %72*/
/*   %73 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
WPRINTF_ParseFormatA_72_73_reg <= WPRINTF_ParseFormatA_72_73;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_72_73_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %74*/
/*   %75 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_74_75 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %74*/
/*   %75 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
WPRINTF_ParseFormatA_74_75_reg <= WPRINTF_ParseFormatA_74_75;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_74_75_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %78*/
/*   %79 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_78_79 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %78*/
/*   %79 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
WPRINTF_ParseFormatA_78_79_reg <= WPRINTF_ParseFormatA_78_79;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_78_79_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %80*/
/*   %81 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
begin
WPRINTF_ParseFormatA_80_81 = (arg_res + 12);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %80*/
/*   %81 = getelementptr inbounds %struct.TYPE_3__* %res, i32 0, i32 3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
WPRINTF_ParseFormatA_80_81_reg <= WPRINTF_ParseFormatA_80_81;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_80_81_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %80*/
/*   %82 = getelementptr inbounds i8* %p.5, i32 -1*/
begin
WPRINTF_ParseFormatA_80_82 = (WPRINTF_ParseFormatA_61_p_5_reg + (1 * -32'd1));
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %80*/
/*   %82 = getelementptr inbounds i8* %p.5, i32 -1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
WPRINTF_ParseFormatA_80_82_reg <= WPRINTF_ParseFormatA_80_82;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_80_82_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
else /* if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) & (memory_controller_waitrequest == 1'd0))) */
begin
WPRINTF_ParseFormatA_83_p_6 = WPRINTF_ParseFormatA_80_82_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_64) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_66) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_68) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_70) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_72) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_74) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_80) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   %p.6 = phi i8* [ %82, %80 ], [ %p.5, %78 ], [ %p.5, %74 ], [ %p.5, %72 ], [ %p.5, %70 ], [ %p.5, %68 ], [ %p.5, %66 ], [ %p.5, %64 ]*/
if (((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_82) & (memory_controller_waitrequest == 1'd0)))
begin
WPRINTF_ParseFormatA_83_p_6_reg <= WPRINTF_ParseFormatA_83_p_6;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_p_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_p_6_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %84 = ptrtoint i8* %p.6 to i32*/
begin
WPRINTF_ParseFormatA_83_84 = WPRINTF_ParseFormatA_83_p_6_reg;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %84 = ptrtoint i8* %p.6 to i32*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
WPRINTF_ParseFormatA_83_84_reg <= WPRINTF_ParseFormatA_83_84;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_84_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %85 = ptrtoint i8* %format to i32*/
begin
WPRINTF_ParseFormatA_83_85 = arg_format;
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %85 = ptrtoint i8* %format to i32*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
WPRINTF_ParseFormatA_83_85_reg <= WPRINTF_ParseFormatA_83_85;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_85_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %86 = sub i32 1, %85*/
begin
WPRINTF_ParseFormatA_83_86 = (32'd1 - WPRINTF_ParseFormatA_83_85);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %86 = sub i32 1, %85*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
WPRINTF_ParseFormatA_83_86_reg <= WPRINTF_ParseFormatA_83_86;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_86_reg"); $finish; end
end
end
always @(*) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %87 = add i32 %86, %84*/
begin
WPRINTF_ParseFormatA_83_87 = (WPRINTF_ParseFormatA_83_86 + WPRINTF_ParseFormatA_83_84);
end
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %83*/
/*   %87 = add i32 %86, %84*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
WPRINTF_ParseFormatA_83_87_reg <= WPRINTF_ParseFormatA_83_87;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_83_87_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_WPRINTF_ParseFormatA__lr_ph10_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %23 = mul nsw i32 %20, 10*/
if ((lpm_mult_WPRINTF_ParseFormatA__lr_ph10_23_en == 1'd1))
begin
WPRINTF_ParseFormatA__lr_ph10_23_stage0_reg <= (WPRINTF_ParseFormatA__lr_ph10_20_reg * 32'd10);
end
end
always @(*) begin
lpm_mult_WPRINTF_ParseFormatA__lr_ph_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %34 = mul nsw i32 %31, 10*/
if ((lpm_mult_WPRINTF_ParseFormatA__lr_ph_34_en == 1'd1))
begin
WPRINTF_ParseFormatA__lr_ph_34_stage0_reg <= (WPRINTF_ParseFormatA__lr_ph_31_reg * 32'd10);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   ret i32 %87*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %6*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %11*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %16*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   store i32 %36, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %53*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %thread-pre-split.thread*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %66*/
/*   store i8* null, i8** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %70*/
/*   store i8* null, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %74*/
/*   store i8* null, i8** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %77*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77))
begin
memory_controller_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %80*/
/*   store i8* null, i8** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_3_reg;
end
/* WPRINTF_ParseFormatA: %6*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %11*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_11_12_reg;
end
/* WPRINTF_ParseFormatA: %16*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24))
begin
memory_controller_address_a = WPRINTF_ParseFormatA__lr_ph10_scevgep_reg;
end
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29))
begin
memory_controller_address_a = WPRINTF_ParseFormatA__preheader_p_34;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   store i32 %36, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_3_reg;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35))
begin
memory_controller_address_a = WPRINTF_ParseFormatA__lr_ph_p_3_reg;
end
/* WPRINTF_ParseFormatA: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %53*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %thread-pre-split.thread*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_61_p_5_reg;
end
/* WPRINTF_ParseFormatA: %66*/
/*   store i8* null, i8** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_66_67;
end
/* WPRINTF_ParseFormatA: %70*/
/*   store i8* null, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_70_71;
end
/* WPRINTF_ParseFormatA: %74*/
/*   store i8* null, i8** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_74_75;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %77*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_0_1_reg;
end
/* WPRINTF_ParseFormatA: %80*/
/*   store i8* null, i8** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
memory_controller_address_a = WPRINTF_ParseFormatA_80_81;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %6*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %11*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %16*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   store i32 %36, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %53*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %thread-pre-split.thread*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60))
begin
memory_controller_write_enable_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %66*/
/*   store i8* null, i8** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %70*/
/*   store i8* null, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %74*/
/*   store i8* null, i8** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %77*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77))
begin
memory_controller_write_enable_a = 1'd1;
end
/* WPRINTF_ParseFormatA: %80*/
/*   store i8* null, i8** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %6*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %11*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %16*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   store i32 %36, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
memory_controller_in_a = WPRINTF_ParseFormatA__lr_ph_36;
end
/* WPRINTF_ParseFormatA: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %53*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %thread-pre-split.thread*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %66*/
/*   store i8* null, i8** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
memory_controller_in_a = 0;
end
/* WPRINTF_ParseFormatA: %70*/
/*   store i8* null, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
memory_controller_in_a = 0;
end
/* WPRINTF_ParseFormatA: %74*/
/*   store i8* null, i8** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
memory_controller_in_a = 0;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %77*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77))
begin
memory_controller_in_a = 32'd0;
end
/* WPRINTF_ParseFormatA: %80*/
/*   store i8* null, i8** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
memory_controller_in_a = 0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %6*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_6))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %11*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_11))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %11*/
/*   %.pre19 = load i8* %12, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_11_12))
begin
memory_controller_size_a = 2'd0;
end
/* WPRINTF_ParseFormatA: %16*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_16))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   %26 = load i8* %scevgep, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_24))
begin
memory_controller_size_a = 2'd0;
end
/* WPRINTF_ParseFormatA: %.preheader*/
/*   %29 = load i8* %p.34, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__preheader_29))
begin
memory_controller_size_a = 2'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   store i32 %36, i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_34))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %.lr.ph*/
/*   %37 = load i8* %p.3, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph_35))
begin
memory_controller_size_a = 2'd0;
end
/* WPRINTF_ParseFormatA: %40*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_40_40))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %42*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_42_42))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %44*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_44_44))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %53*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_53_52))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %thread-pre-split.thread*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_thread_pre_split_thread_58))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %61*/
/*   %62 = load i8* %p.5, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_61_60))
begin
memory_controller_size_a = 2'd0;
end
/* WPRINTF_ParseFormatA: %66*/
/*   store i8* null, i8** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_66_65))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %70*/
/*   store i8* null, i8** %71, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_70_69))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %74*/
/*   store i8* null, i8** %75, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_74_73))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %77*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_77_77))
begin
memory_controller_size_a = 2'd2;
end
/* WPRINTF_ParseFormatA: %80*/
/*   store i8* null, i8** %81, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_80_81))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   store i32 %25, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %64*/
/*   store i8* null, i8** %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %68*/
/*   store i8* null, i8** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %72*/
/*   store i8* null, i8** %73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 8, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %78*/
/*   store i8* null, i8** %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_0_2;
end
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3))
begin
memory_controller_address_b = arg_format;
end
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_6_7_reg;
end
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_16_17_reg;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   store i32 %25, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_0_2_reg;
end
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_46_47;
end
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_49_50;
end
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_55_56;
end
/* WPRINTF_ParseFormatA: %64*/
/*   store i8* null, i8** %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_64_65;
end
/* WPRINTF_ParseFormatA: %68*/
/*   store i8* null, i8** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_68_69;
end
/* WPRINTF_ParseFormatA: %72*/
/*   store i8* null, i8** %73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_72_73;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 8, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_0_2_reg;
end
/* WPRINTF_ParseFormatA: %78*/
/*   store i8* null, i8** %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
memory_controller_address_b = WPRINTF_ParseFormatA_78_79;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   store i32 %25, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %64*/
/*   store i8* null, i8** %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %68*/
/*   store i8* null, i8** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %72*/
/*   store i8* null, i8** %73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 8, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_write_enable_b = 1'd1;
end
/* WPRINTF_ParseFormatA: %78*/
/*   store i8* null, i8** %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_in_b = 32'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   store i32 %25, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
memory_controller_in_b = WPRINTF_ParseFormatA__lr_ph10_25;
end
/* WPRINTF_ParseFormatA: %64*/
/*   store i8* null, i8** %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
memory_controller_in_b = 0;
end
/* WPRINTF_ParseFormatA: %68*/
/*   store i8* null, i8** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
memory_controller_in_b = 0;
end
/* WPRINTF_ParseFormatA: %72*/
/*   store i8* null, i8** %73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
memory_controller_in_b = 0;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 8, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_in_b = 32'd8;
end
/* WPRINTF_ParseFormatA: %78*/
/*   store i8* null, i8** %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
memory_controller_in_b = 0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* WPRINTF_ParseFormatA: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %0*/
/*   %4 = load i8* %format, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_0_3))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %6*/
/*   %.pre = load i8* %7, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_6_7))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %16*/
/*   %.pre20 = load i8* %17, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_16_17))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %.lr.ph10*/
/*   store i32 %25, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB__lr_ph10_23))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %46*/
/*   %48 = load i8* %47, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_46_46))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %49*/
/*   %51 = load i8* %50, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_49_49))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %55*/
/*   %57 = load i8* %56, align 1, !tbaa !1*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_55_54))
begin
memory_controller_size_b = 2'd0;
end
/* WPRINTF_ParseFormatA: %64*/
/*   store i8* null, i8** %65, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_64_63))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %68*/
/*   store i8* null, i8** %69, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_68_67))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %72*/
/*   store i8* null, i8** %73, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_72_71))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %76*/
/*   store i32 8, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_76_75))
begin
memory_controller_size_b = 2'd2;
end
/* WPRINTF_ParseFormatA: %78*/
/*   store i8* null, i8** %79, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_78_79))
begin
memory_controller_size_b = 2'd2;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* WPRINTF_ParseFormatA: %83*/
/*   ret i32 %87*/
if ((cur_state == LEGUP_F_WPRINTF_ParseFormatA_BB_83_83))
begin
return_val <= WPRINTF_ParseFormatA_83_87;
if (reset == 1'b0 && ^(WPRINTF_ParseFormatA_83_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  WPRINTF_ParseFormatA_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_arg_format;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_arg_res;
wire  WPRINTF_ParseFormatA_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_address_a;
wire  WPRINTF_ParseFormatA_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_out_a;
wire [1:0] WPRINTF_ParseFormatA_memory_controller_size_a;
wire  WPRINTF_ParseFormatA_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_address_b;
wire  WPRINTF_ParseFormatA_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] WPRINTF_ParseFormatA_memory_controller_out_b;
wire [1:0] WPRINTF_ParseFormatA_memory_controller_size_b;
reg  WPRINTF_ParseFormatA_memory_controller_waitrequest;
wire  WPRINTF_ParseFormatA_finish;
reg  WPRINTF_ParseFormatA_finish_final;
wire [31:0] WPRINTF_ParseFormatA_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


WPRINTF_ParseFormatA WPRINTF_ParseFormatA_inst (
	.memory_controller_enable_a (WPRINTF_ParseFormatA_memory_controller_enable_a),
	.memory_controller_address_a (WPRINTF_ParseFormatA_memory_controller_address_a),
	.memory_controller_write_enable_a (WPRINTF_ParseFormatA_memory_controller_write_enable_a),
	.memory_controller_in_a (WPRINTF_ParseFormatA_memory_controller_in_a),
	.memory_controller_size_a (WPRINTF_ParseFormatA_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (WPRINTF_ParseFormatA_memory_controller_enable_b),
	.memory_controller_address_b (WPRINTF_ParseFormatA_memory_controller_address_b),
	.memory_controller_write_enable_b (WPRINTF_ParseFormatA_memory_controller_write_enable_b),
	.memory_controller_in_b (WPRINTF_ParseFormatA_memory_controller_in_b),
	.memory_controller_size_b (WPRINTF_ParseFormatA_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (WPRINTF_ParseFormatA_start),
	.finish (WPRINTF_ParseFormatA_finish),
	.return_val (WPRINTF_ParseFormatA_return_val),
	.arg_format (WPRINTF_ParseFormatA_arg_format),
	.arg_res (WPRINTF_ParseFormatA_arg_res)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (WPRINTF_ParseFormatA_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
begin
main_0_1 = WPRINTF_ParseFormatA_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
WPRINTF_ParseFormatA_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
WPRINTF_ParseFormatA_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
WPRINTF_ParseFormatA_arg_format <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_arg_format"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
WPRINTF_ParseFormatA_arg_res <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to WPRINTF_ParseFormatA_arg_res"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
begin
WPRINTF_ParseFormatA_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
begin
WPRINTF_ParseFormatA_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
WPRINTF_ParseFormatA_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
WPRINTF_ParseFormatA_finish_final = WPRINTF_ParseFormatA_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = WPRINTF_ParseFormatA_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = WPRINTF_ParseFormatA_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = WPRINTF_ParseFormatA_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = WPRINTF_ParseFormatA_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = WPRINTF_ParseFormatA_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = WPRINTF_ParseFormatA_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = WPRINTF_ParseFormatA_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = WPRINTF_ParseFormatA_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = WPRINTF_ParseFormatA_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = WPRINTF_ParseFormatA_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = WPRINTF_ParseFormatA_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = WPRINTF_ParseFormatA_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @WPRINTF_ParseFormatA(i8* undef, %struct.TYPE_3__* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = WPRINTF_ParseFormatA_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
