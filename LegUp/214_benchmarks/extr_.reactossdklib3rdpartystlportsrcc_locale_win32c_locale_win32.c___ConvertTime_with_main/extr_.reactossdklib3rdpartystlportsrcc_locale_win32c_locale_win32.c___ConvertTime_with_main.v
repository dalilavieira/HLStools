//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:53 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module __ConvertTime
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_NTTime,
	arg_buffer,
	arg_buf_size
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F___ConvertTime_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F___ConvertTime_BB_2_2 = 7'd2;
parameter [6:0] LEGUP_F___ConvertTime_BB_2_3 = 7'd3;
parameter [6:0] LEGUP_F___ConvertTime_BB_2_4 = 7'd4;
parameter [6:0] LEGUP_F___ConvertTime_BB_5_5 = 7'd5;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_preheader_6 = 7'd6;
parameter [6:0] LEGUP_F___ConvertTime_BB_7_7 = 7'd7;
parameter [6:0] LEGUP_F___ConvertTime_BB_7_8 = 7'd8;
parameter [6:0] LEGUP_F___ConvertTime_BB_7_9 = 7'd9;
parameter [6:0] LEGUP_F___ConvertTime_BB_12_10 = 7'd10;
parameter [6:0] LEGUP_F___ConvertTime_BB_15_11 = 7'd11;
parameter [6:0] LEGUP_F___ConvertTime_BB_15_12 = 7'd12;
parameter [6:0] LEGUP_F___ConvertTime_BB_17_13 = 7'd13;
parameter [6:0] LEGUP_F___ConvertTime_BB_18_14 = 7'd14;
parameter [6:0] LEGUP_F___ConvertTime_BB_18_15 = 7'd15;
parameter [6:0] LEGUP_F___ConvertTime_BB_20_16 = 7'd16;
parameter [6:0] LEGUP_F___ConvertTime_BB_22_17 = 7'd17;
parameter [6:0] LEGUP_F___ConvertTime_BB_25_18 = 7'd18;
parameter [6:0] LEGUP_F___ConvertTime_BB_25_19 = 7'd19;
parameter [6:0] LEGUP_F___ConvertTime_BB_27_20 = 7'd20;
parameter [6:0] LEGUP_F___ConvertTime_BB_28_21 = 7'd21;
parameter [6:0] LEGUP_F___ConvertTime_BB_28_22 = 7'd22;
parameter [6:0] LEGUP_F___ConvertTime_BB_28_23 = 7'd23;
parameter [6:0] LEGUP_F___ConvertTime_BB_31_24 = 7'd24;
parameter [6:0] LEGUP_F___ConvertTime_BB_33_25 = 7'd25;
parameter [6:0] LEGUP_F___ConvertTime_BB_33_26 = 7'd26;
parameter [6:0] LEGUP_F___ConvertTime_BB_33_27 = 7'd27;
parameter [6:0] LEGUP_F___ConvertTime_BB_38_28 = 7'd28;
parameter [6:0] LEGUP_F___ConvertTime_BB_41_29 = 7'd29;
parameter [6:0] LEGUP_F___ConvertTime_BB_41_30 = 7'd30;
parameter [6:0] LEGUP_F___ConvertTime_BB_43_31 = 7'd31;
parameter [6:0] LEGUP_F___ConvertTime_BB_44_32 = 7'd32;
parameter [6:0] LEGUP_F___ConvertTime_BB_44_33 = 7'd33;
parameter [6:0] LEGUP_F___ConvertTime_BB_46_34 = 7'd34;
parameter [6:0] LEGUP_F___ConvertTime_BB_48_35 = 7'd35;
parameter [6:0] LEGUP_F___ConvertTime_BB_51_36 = 7'd36;
parameter [6:0] LEGUP_F___ConvertTime_BB_51_37 = 7'd37;
parameter [6:0] LEGUP_F___ConvertTime_BB_53_38 = 7'd38;
parameter [6:0] LEGUP_F___ConvertTime_BB_54_39 = 7'd39;
parameter [6:0] LEGUP_F___ConvertTime_BB_54_40 = 7'd40;
parameter [6:0] LEGUP_F___ConvertTime_BB_54_41 = 7'd41;
parameter [6:0] LEGUP_F___ConvertTime_BB_57_42 = 7'd42;
parameter [6:0] LEGUP_F___ConvertTime_BB_59_43 = 7'd43;
parameter [6:0] LEGUP_F___ConvertTime_BB_59_44 = 7'd44;
parameter [6:0] LEGUP_F___ConvertTime_BB_59_45 = 7'd45;
parameter [6:0] LEGUP_F___ConvertTime_BB_64_46 = 7'd46;
parameter [6:0] LEGUP_F___ConvertTime_BB_67_47 = 7'd47;
parameter [6:0] LEGUP_F___ConvertTime_BB_67_48 = 7'd48;
parameter [6:0] LEGUP_F___ConvertTime_BB_69_49 = 7'd49;
parameter [6:0] LEGUP_F___ConvertTime_BB_70_50 = 7'd50;
parameter [6:0] LEGUP_F___ConvertTime_BB_70_51 = 7'd51;
parameter [6:0] LEGUP_F___ConvertTime_BB_72_52 = 7'd52;
parameter [6:0] LEGUP_F___ConvertTime_BB_74_53 = 7'd53;
parameter [6:0] LEGUP_F___ConvertTime_BB_77_54 = 7'd54;
parameter [6:0] LEGUP_F___ConvertTime_BB_77_55 = 7'd55;
parameter [6:0] LEGUP_F___ConvertTime_BB_79_56 = 7'd56;
parameter [6:0] LEGUP_F___ConvertTime_BB_80_57 = 7'd57;
parameter [6:0] LEGUP_F___ConvertTime_BB_80_58 = 7'd58;
parameter [6:0] LEGUP_F___ConvertTime_BB_80_59 = 7'd59;
parameter [6:0] LEGUP_F___ConvertTime_BB_83_60 = 7'd60;
parameter [6:0] LEGUP_F___ConvertTime_BB_85_61 = 7'd61;
parameter [6:0] LEGUP_F___ConvertTime_BB_85_62 = 7'd62;
parameter [6:0] LEGUP_F___ConvertTime_BB_85_63 = 7'd63;
parameter [6:0] LEGUP_F___ConvertTime_BB_90_64 = 7'd64;
parameter [6:0] LEGUP_F___ConvertTime_BB_93_65 = 7'd65;
parameter [6:0] LEGUP_F___ConvertTime_BB_93_66 = 7'd66;
parameter [6:0] LEGUP_F___ConvertTime_BB_95_67 = 7'd67;
parameter [6:0] LEGUP_F___ConvertTime_BB_96_68 = 7'd68;
parameter [6:0] LEGUP_F___ConvertTime_BB_96_69 = 7'd69;
parameter [6:0] LEGUP_F___ConvertTime_BB_98_70 = 7'd70;
parameter [6:0] LEGUP_F___ConvertTime_BB_100_71 = 7'd71;
parameter [6:0] LEGUP_F___ConvertTime_BB_103_72 = 7'd72;
parameter [6:0] LEGUP_F___ConvertTime_BB_103_73 = 7'd73;
parameter [6:0] LEGUP_F___ConvertTime_BB_105_74 = 7'd74;
parameter [6:0] LEGUP_F___ConvertTime_BB_106_75 = 7'd75;
parameter [6:0] LEGUP_F___ConvertTime_BB_106_76 = 7'd76;
parameter [6:0] LEGUP_F___ConvertTime_BB_106_77 = 7'd77;
parameter [6:0] LEGUP_F___ConvertTime_BB_109_78 = 7'd78;
parameter [6:0] LEGUP_F___ConvertTime_BB_111_79 = 7'd79;
parameter [6:0] LEGUP_F___ConvertTime_BB_111_80 = 7'd80;
parameter [6:0] LEGUP_F___ConvertTime_BB_111_81 = 7'd81;
parameter [6:0] LEGUP_F___ConvertTime_BB_111_82 = 7'd82;
parameter [6:0] LEGUP_F___ConvertTime_BB_118_83 = 7'd83;
parameter [6:0] LEGUP_F___ConvertTime_BB_118_84 = 7'd84;
parameter [6:0] LEGUP_F___ConvertTime_BB_120_85 = 7'd85;
parameter [6:0] LEGUP_F___ConvertTime_BB_121_86 = 7'd86;
parameter [6:0] LEGUP_F___ConvertTime_BB_121_87 = 7'd87;
parameter [6:0] LEGUP_F___ConvertTime_BB_123_88 = 7'd88;
parameter [6:0] LEGUP_F___ConvertTime_BB_125_89 = 7'd89;
parameter [6:0] LEGUP_F___ConvertTime_BB_129_90 = 7'd90;
parameter [6:0] LEGUP_F___ConvertTime_BB_129_91 = 7'd91;
parameter [6:0] LEGUP_F___ConvertTime_BB_131_92 = 7'd92;
parameter [6:0] LEGUP_F___ConvertTime_BB_132_93 = 7'd93;
parameter [6:0] LEGUP_F___ConvertTime_BB_132_94 = 7'd94;
parameter [6:0] LEGUP_F___ConvertTime_BB_134_95 = 7'd95;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_96 = 7'd96;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_97 = 7'd97;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_98 = 7'd98;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_99 = 7'd99;
parameter [6:0] LEGUP_F___ConvertTime_BB_137_100 = 7'd100;
parameter [6:0] LEGUP_F___ConvertTime_BB__critedge2_101 = 7'd101;
parameter [6:0] LEGUP_F___ConvertTime_BB__preheader_backedge_102 = 7'd102;
parameter [6:0] LEGUP_F___ConvertTime_BB_140_103 = 7'd103;
parameter [6:0] LEGUP_F___ConvertTime_BB_140_104 = 7'd104;
parameter [6:0] LEGUP_F___ConvertTime_BB_142_105 = 7'd105;
parameter [6:0] LEGUP_F___ConvertTime_BB_144_106 = 7'd106;
parameter [6:0] LEGUP_F___ConvertTime_BB_144_107 = 7'd107;
parameter [6:0] LEGUP_F___ConvertTime_BB_146_108 = 7'd108;
parameter [6:0] LEGUP_F___ConvertTime_BB__critedge_loopexit_109 = 7'd109;
parameter [6:0] LEGUP_F___ConvertTime_BB__critedge_110 = 7'd110;
parameter [6:0] LEGUP_F___ConvertTime_BB__critedge_111 = 7'd111;
parameter [6:0] LEGUP_F___ConvertTime_BB__critedge_112 = 7'd112;
parameter [6:0] LEGUP_F___ConvertTime_BB_150_113 = 7'd113;
parameter [6:0] LEGUP_F___ConvertTime_BB_152_114 = 7'd114;
parameter [6:0] LEGUP_F___ConvertTime_BB_155_115 = 7'd115;
parameter [6:0] LEGUP_F___ConvertTime_BB_156_116 = 7'd116;
parameter [6:0] LEGUP_F___ConvertTime_BB_156_117 = 7'd117;
parameter [6:0] LEGUP_F___ConvertTime_BB_157_118 = 7'd118;
parameter [6:0] LEGUP_F___ConvertTime_BB_159_119 = 7'd119;
parameter [6:0] LEGUP_F___ConvertTime_BB_159_120 = 7'd120;
parameter [6:0] LEGUP_F___ConvertTime_BB_161_121 = 7'd121;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_NTTime;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_buffer;
input [31:0] arg_buf_size;
reg [6:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_0_1_reg;
reg [31:0] __ConvertTime_2__03;
reg [31:0] __ConvertTime_2__03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_2_cur_char_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_2_cur_char_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_2_cur_output_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_2_cur_output_0_reg;
reg [7:0] __ConvertTime_2_3;
reg [7:0] __ConvertTime_2_3_reg;
reg  __ConvertTime_2_4;
reg  __ConvertTime_2_4_reg;
reg [31:0] __ConvertTime_5_6;
reg [31:0] __ConvertTime_5_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_7_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_7_8_reg;
reg [7:0] __ConvertTime_7_9;
reg [7:0] __ConvertTime_7_9_reg;
reg  __ConvertTime_7_10;
reg  __ConvertTime_7_10_reg;
reg  __ConvertTime_7_11;
reg  __ConvertTime_7_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_12_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_12_13_reg;
reg  __ConvertTime_12_14;
reg  __ConvertTime_12_14_reg;
reg  __ConvertTime_12_or_cond;
reg  __ConvertTime_12_or_cond_reg;
reg [31:0] __ConvertTime_15_16;
reg [31:0] __ConvertTime_15_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_20_cur_output_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_20_cur_output_1_reg;
reg [31:0] __ConvertTime_20_21;
reg [31:0] __ConvertTime_20_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_22_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_22_23_reg;
reg  __ConvertTime_22_24;
reg  __ConvertTime_22_24_reg;
reg  __ConvertTime_22_or_cond6;
reg  __ConvertTime_22_or_cond6_reg;
reg [31:0] __ConvertTime_25_26;
reg [31:0] __ConvertTime_25_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_28_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_28_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_28_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_28_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_31_cur_output_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_31_cur_output_2_reg;
reg [31:0] __ConvertTime_31_32;
reg [31:0] __ConvertTime_31_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_33_34_reg;
reg [7:0] __ConvertTime_33_35;
reg [7:0] __ConvertTime_33_35_reg;
reg  __ConvertTime_33_36;
reg  __ConvertTime_33_36_reg;
reg  __ConvertTime_33_37;
reg  __ConvertTime_33_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_38_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_38_39_reg;
reg  __ConvertTime_38_40;
reg  __ConvertTime_38_40_reg;
reg  __ConvertTime_38_or_cond8;
reg  __ConvertTime_38_or_cond8_reg;
reg [31:0] __ConvertTime_41_42;
reg [31:0] __ConvertTime_41_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_44_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_46_cur_output_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_46_cur_output_3_reg;
reg [31:0] __ConvertTime_46_47;
reg [31:0] __ConvertTime_46_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_48_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_48_49_reg;
reg  __ConvertTime_48_50;
reg  __ConvertTime_48_50_reg;
reg  __ConvertTime_48_or_cond10;
reg  __ConvertTime_48_or_cond10_reg;
reg [31:0] __ConvertTime_51_52;
reg [31:0] __ConvertTime_51_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_54_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_54_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_54_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_54_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_57_cur_output_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_57_cur_output_4_reg;
reg [31:0] __ConvertTime_57_58;
reg [31:0] __ConvertTime_57_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_59_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_59_60_reg;
reg [7:0] __ConvertTime_59_61;
reg [7:0] __ConvertTime_59_61_reg;
reg  __ConvertTime_59_62;
reg  __ConvertTime_59_62_reg;
reg  __ConvertTime_59_63;
reg  __ConvertTime_59_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_64_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_64_65_reg;
reg  __ConvertTime_64_66;
reg  __ConvertTime_64_66_reg;
reg  __ConvertTime_64_or_cond12;
reg  __ConvertTime_64_or_cond12_reg;
reg [31:0] __ConvertTime_67_68;
reg [31:0] __ConvertTime_67_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_70_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_70_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_72_cur_output_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_72_cur_output_5_reg;
reg [31:0] __ConvertTime_72_73;
reg [31:0] __ConvertTime_72_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_74_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_74_75_reg;
reg  __ConvertTime_74_76;
reg  __ConvertTime_74_76_reg;
reg  __ConvertTime_74_or_cond14;
reg  __ConvertTime_74_or_cond14_reg;
reg [31:0] __ConvertTime_77_78;
reg [31:0] __ConvertTime_77_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_80_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_80_81_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_80_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_80_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_83_cur_output_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_83_cur_output_6_reg;
reg [31:0] __ConvertTime_83_84;
reg [31:0] __ConvertTime_83_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_85_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_85_86_reg;
reg [7:0] __ConvertTime_85_87;
reg [7:0] __ConvertTime_85_87_reg;
reg  __ConvertTime_85_88;
reg  __ConvertTime_85_88_reg;
reg  __ConvertTime_85_89;
reg  __ConvertTime_85_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_90_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_90_91_reg;
reg  __ConvertTime_90_92;
reg  __ConvertTime_90_92_reg;
reg  __ConvertTime_90_or_cond16;
reg  __ConvertTime_90_or_cond16_reg;
reg [31:0] __ConvertTime_93_94;
reg [31:0] __ConvertTime_93_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_96_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_96_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_98_cur_output_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_98_cur_output_7_reg;
reg [31:0] __ConvertTime_98_99;
reg [31:0] __ConvertTime_98_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_100_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_100_101_reg;
reg  __ConvertTime_100_102;
reg  __ConvertTime_100_102_reg;
reg  __ConvertTime_100_or_cond18;
reg  __ConvertTime_100_or_cond18_reg;
reg [31:0] __ConvertTime_103_104;
reg [31:0] __ConvertTime_103_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_106_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_106_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_106_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_106_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_109_cur_output_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_109_cur_output_8_reg;
reg [31:0] __ConvertTime_109_110;
reg [31:0] __ConvertTime_109_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_112_reg;
reg [7:0] __ConvertTime_111_113;
reg [7:0] __ConvertTime_111_113_reg;
reg  __ConvertTime_111_114;
reg  __ConvertTime_111_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_cur_char_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_cur_char_1_reg;
reg  __ConvertTime_111_115;
reg  __ConvertTime_111_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_111_116_reg;
reg  __ConvertTime_111_117;
reg  __ConvertTime_111_117_reg;
reg  __ConvertTime_111_or_cond20;
reg  __ConvertTime_111_or_cond20_reg;
reg [31:0] __ConvertTime_118_119;
reg [31:0] __ConvertTime_118_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_121_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_121_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_123_cur_output_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_123_cur_output_9_reg;
reg [31:0] __ConvertTime_123_124;
reg [31:0] __ConvertTime_123_124_reg;
reg  __ConvertTime_125_126;
reg  __ConvertTime_125_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_125_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_125_127_reg;
reg  __ConvertTime_125_128;
reg  __ConvertTime_125_128_reg;
reg  __ConvertTime_125_or_cond22;
reg  __ConvertTime_125_or_cond22_reg;
reg [31:0] __ConvertTime_129_130;
reg [31:0] __ConvertTime_129_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_132_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_132_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_134_cur_output_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_134_cur_output_10_reg;
reg [31:0] __ConvertTime_134_135;
reg [31:0] __ConvertTime_134_135_reg;
reg [31:0] __ConvertTime__preheader_indvar;
reg [31:0] __ConvertTime__preheader_indvar_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_cur_output_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_cur_output_11_reg;
reg [31:0] __ConvertTime__preheader_tmp;
reg [31:0] __ConvertTime__preheader_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_cur_char_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_cur_char_2_reg;
reg [7:0] __ConvertTime__preheader_136;
reg [7:0] __ConvertTime__preheader_136_reg;
reg  __ConvertTime_137_138;
reg  __ConvertTime_137_138_reg;
reg  __ConvertTime_137_139;
reg  __ConvertTime_137_139_reg;
reg  __ConvertTime_137_or_cond23;
reg  __ConvertTime_137_or_cond23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_backedge_cur_output_11_be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__preheader_backedge_cur_output_11_be_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_140_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_140_141_reg;
reg  __ConvertTime_142_143;
reg  __ConvertTime_142_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_144_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_144_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_146_cur_output_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_146_cur_output_13_reg;
reg [31:0] __ConvertTime_146_147;
reg [31:0] __ConvertTime_146_147_reg;
reg [31:0] __ConvertTime__critedge_loopexit__1;
reg [31:0] __ConvertTime__critedge_loopexit__1_reg;
reg [31:0] __ConvertTime__critedge__2;
reg [31:0] __ConvertTime__critedge__2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__critedge_cur_char_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__critedge_cur_char_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__critedge_cur_output_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime__critedge_cur_output_14_reg;
reg [7:0] __ConvertTime__critedge_148;
reg [7:0] __ConvertTime__critedge_148_reg;
reg  __ConvertTime__critedge_149;
reg  __ConvertTime__critedge_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_150_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_150_151_reg;
reg [31:0] __ConvertTime_152__3;
reg [31:0] __ConvertTime_152__3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_152_cur_output_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_152_cur_output_15_reg;
reg  __ConvertTime_152_153;
reg  __ConvertTime_152_153_reg;
reg  __ConvertTime_152_154;
reg  __ConvertTime_152_154_reg;
reg  __ConvertTime_152_or_cond24;
reg  __ConvertTime_152_or_cond24_reg;
reg [31:0] __ConvertTime_157_158;
reg [31:0] __ConvertTime_157_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_159_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_159_160_reg;
reg [31:0] __ConvertTime_161__0;
reg [31:0] __ConvertTime_161__0_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_152_114;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_152_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd104)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_7;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd72)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_25;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd109)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_43;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd115)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_61;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd116)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_79;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd37)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_125_89;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_125_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 == 32'd39)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_preheader_6;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((((cur_state == LEGUP_F___ConvertTime_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_5_6 != 32'd104)) & (__ConvertTime_5_6 != 32'd72)) & (__ConvertTime_5_6 != 32'd109)) & (__ConvertTime_5_6 != 32'd115)) & (__ConvertTime_5_6 != 32'd116)) & (__ConvertTime_5_6 != 32'd37)) & (__ConvertTime_5_6 != 32'd39)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_142_105;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_142_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_preheader_6;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_preheader_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_96;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_7_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_7;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_7_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_8;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_7_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_8;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_7_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_9;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_7_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_7_9;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_7_9) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_10 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_7_9) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_10 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_12_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_12_10;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_12_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_12_10) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_12_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_15_11;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_15_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_12_10) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_12_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_15_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_15_11;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_15_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_15_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_15_12;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_15_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_15_12;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_15_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_15_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_17_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_17_13) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_18_14;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_17_13) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_20_16;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_20_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_18_14;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_18_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_18_15;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_18_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_18_15;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_18_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_20_16;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_20_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_20_16;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_20_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_22_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_22_17) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_22_or_cond6 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_25_18;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_25_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_22_17) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_22_or_cond6 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_27_20;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_27_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_25_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_25_18;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_25_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_25_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_25_19;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_25_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_25_19;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_25_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_25_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_27_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_27_20;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_27_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_21;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_31_24;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_21;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_22;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_22;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_23;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_28_23;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_28_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_31_24;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_31_24;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_31_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_33_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_25;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_33_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_26;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_33_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_26;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_33_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_27;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_33_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_33_27;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_33_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_33_27) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_36 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_38_28;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_38_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_33_27) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_36 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_48_35;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_48_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_38_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_38_28;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_38_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_38_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_38_or_cond8 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_41_29;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_41_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_38_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_38_or_cond8 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_43_31;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_43_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_41_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_41_29;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_41_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_41_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_41_30;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_41_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_41_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_41_30;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_41_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_41_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_43_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_43_31;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_43_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_44_32;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_44_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_46_34;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_46_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_44_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_44_32;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_44_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_44_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_44_33;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_44_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_44_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_44_33;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_44_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_44_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_46_34;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_46_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_46_34;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_46_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_48_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_48_35;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_48_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_48_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_48_or_cond10 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_51_36;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_51_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_48_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_48_or_cond10 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_53_38;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_53_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_51_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_51_36;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_51_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_51_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_51_37;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_51_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_51_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_51_37;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_51_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_51_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_53_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_53_38;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_53_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_53_38) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_39;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_53_38) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_57_42;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_57_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_39;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_40;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_40;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_41;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_54_41;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_54_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_54_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_57_42;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_57_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_57_42;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_57_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_59_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_43;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_59_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_44;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_59_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_44;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_59_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_45;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_59_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_59_45;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_59_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_59_45) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_62 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_64_46;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_64_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_59_45) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_62 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_74_53;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_74_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_64_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_64_46;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_64_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_64_46) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_64_or_cond12 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_67_47;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_67_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_64_46) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_64_or_cond12 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_67_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_67_47;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_67_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_67_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_67_48;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_67_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_67_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_67_48;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_67_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_67_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_69_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_69_49;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_69_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_70_50;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_70_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_72_52;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_72_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_70_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_70_50;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_70_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_70_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_70_51;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_70_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_70_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_70_51;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_70_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_70_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_72_52;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_72_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_72_52;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_72_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_74_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_74_53;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_74_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_74_53) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_74_or_cond14 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_77_54;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_77_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_74_53) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_74_or_cond14 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_79_56;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_79_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_77_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_77_54;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_77_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_77_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_77_55;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_77_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_77_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_77_55;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_77_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_77_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_79_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_79_56;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_79_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_79_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_57;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_79_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_83_60;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_83_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_57;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_58;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_58;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_59;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_80_59;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_80_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_80_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_83_60;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_83_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_83_60;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_83_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_85_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_61;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_85_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_62;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_85_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_62;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_85_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_63;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_85_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_85_63;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_85_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_85_63) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_88 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_90_64;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_90_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_85_63) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_88 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_100_71;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_100_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_90_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_90_64;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_90_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_90_64) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_90_or_cond16 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_93_65;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_93_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_90_64) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_90_or_cond16 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_95_67;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_95_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_93_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_93_65;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_93_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_93_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_93_66;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_93_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_93_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_93_66;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_93_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_93_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_95_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_95_67;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_95_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_95_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_96_68;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_96_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_95_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_98_70;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_98_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_96_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_96_68;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_96_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_96_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_96_69;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_96_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_96_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_96_69;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_96_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_96_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_98_70;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_98_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_98_70;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_98_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_100_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_100_71;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_100_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_100_71) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_100_or_cond18 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_103_72;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_103_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_100_71) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_100_or_cond18 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_105_74;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_105_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_103_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_103_72;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_103_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_103_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_103_73;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_103_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_103_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_103_73;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_103_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_103_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_105_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_105_74;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_105_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_105_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_75;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_105_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_109_78;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_109_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_75;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_76;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_76;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_77;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_106_77;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_106_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_106_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_109_78;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_109_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_109_78;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_109_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_79;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_80;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_80;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_81;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_81;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_82;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_111_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_111_82;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_111_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_111_82) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_or_cond20_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_118_83;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_118_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_111_82) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_or_cond20_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_120_85;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_120_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_118_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_118_83;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_118_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_118_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_118_84;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_118_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_118_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_118_84;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_118_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_118_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_120_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_120_85;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_120_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_120_85) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_115_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_121_86;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_121_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_120_85) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_115_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_123_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_123_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_121_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_121_86;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_121_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_121_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_121_87;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_121_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_121_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_121_87;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_121_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_121_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_123_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_123_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_123_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_123_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_125_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_125_89;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_125_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_125_89) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_or_cond22 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_129_90;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_129_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_125_89) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_or_cond22 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_131_92;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_131_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_129_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_129_90;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_129_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_129_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_129_91;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_129_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_129_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_129_91;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_129_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_129_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_131_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_131_92;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_131_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_131_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_126_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_132_93;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_132_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_131_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_126_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_134_95;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_134_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_132_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_132_93;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_132_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_132_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_132_94;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_132_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_132_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_132_94;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_132_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_132_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_134_95;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_134_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_134_95;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_134_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_96;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_97;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_97;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_98;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_98;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_99;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_99;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__preheader_99) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__preheader_136 == 8'd39)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_loopexit_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__preheader_99) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__preheader_136 == 8'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_loopexit_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F___ConvertTime_BB__preheader_99) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__preheader_136 != 8'd39)) & (__ConvertTime__preheader_136 != 8'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_137_100;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_137_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_137_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_137_100;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_137_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_137_100) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_or_cond23 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_loopexit_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_137_100) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_or_cond23 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge2_101;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge2_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge2_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge2_101;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge2_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge2_101) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_138_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_140_103;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_140_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge2_101) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_138_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_backedge_102;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_backedge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_backedge_102;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_backedge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_96;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_140_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_140_103;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_140_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_140_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_140_104;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_140_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_140_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_140_104;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_140_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_140_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__preheader_backedge_102;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__preheader_backedge_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_142_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_142_105;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_142_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_142_105) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_142_143 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_146_108;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_146_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_142_105) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_142_143 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_144_106;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_144_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_144_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_144_106;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_144_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_144_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_144_107;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_144_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_144_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_144_107;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_144_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_144_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_146_108;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_146_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_146_108;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_146_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_loopexit_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_111;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_111;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_112;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB__critedge_112;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB__critedge_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_152_114;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_152_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_150_113;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_150_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_150_113;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_150_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_152_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_152_114;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_152_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_152_114) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_152_or_cond24 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_159_119;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_159_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_152_114) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_152_or_cond24 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_155_115;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_155_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_155_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_155_115;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_155_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_155_115) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_152_153_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_156_116;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_156_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertTime_BB_155_115) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_152_153_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_157_118;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_157_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_156_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_156_116;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_156_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_156_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_156_117;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_156_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_156_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_156_117;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_156_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_156_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_157_118;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_157_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_157_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_157_118;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_157_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_157_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_159_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_159_119;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_159_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_159_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_159_120;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_159_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_159_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_159_120;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_159_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_159_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_161_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertTime_BB_161_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertTime_BB_161_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertTime_BB_161_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %0*/
/*   %1 = getelementptr inbounds i8* %buffer, i32 %buf_size*/
begin
__ConvertTime_0_1 = (arg_buffer + (1 * arg_buf_size));
end
end
always @(posedge clk) begin
/* __ConvertTime: %0*/
/*   %1 = getelementptr inbounds i8* %buffer, i32 %buf_size*/
if ((cur_state == LEGUP_F___ConvertTime_BB_0_1))
begin
__ConvertTime_0_1_reg <= __ConvertTime_0_1;
if (reset == 1'b0 && ^(__ConvertTime_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_0_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2__03 = 32'd0;
end
/* __ConvertTime: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %150 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_2__03 = __ConvertTime__critedge__2_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2__03_reg <= __ConvertTime_2__03;
if (reset == 1'b0 && ^(__ConvertTime_2__03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2__03_reg"); $finish; end
end
/* __ConvertTime: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2__03_reg <= __ConvertTime_2__03;
if (reset == 1'b0 && ^(__ConvertTime_2__03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2__03_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %2*/
/*   %cur_char.0 = phi i8* [ %NTTime, %0 ], [ %151, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_char_0 = arg_NTTime;
end
/* __ConvertTime: %2*/
/*   %cur_char.0 = phi i8* [ %NTTime, %0 ], [ %151, %150 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_2_cur_char_0 = __ConvertTime_150_151;
end
end
always @(posedge clk) begin
/* __ConvertTime: %2*/
/*   %cur_char.0 = phi i8* [ %NTTime, %0 ], [ %151, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_char_0_reg <= __ConvertTime_2_cur_char_0;
if (reset == 1'b0 && ^(__ConvertTime_2_cur_char_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_cur_char_0_reg"); $finish; end
end
/* __ConvertTime: %2*/
/*   %cur_char.0 = phi i8* [ %NTTime, %0 ], [ %151, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_char_0_reg <= __ConvertTime_2_cur_char_0;
if (reset == 1'b0 && ^(__ConvertTime_2_cur_char_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_cur_char_0_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.14, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_output_0 = arg_buffer;
end
/* __ConvertTime: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.14, %150 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_2_cur_output_0 = __ConvertTime__critedge_cur_output_14_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.14, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_output_0_reg <= __ConvertTime_2_cur_output_0;
if (reset == 1'b0 && ^(__ConvertTime_2_cur_output_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_cur_output_0_reg"); $finish; end
end
/* __ConvertTime: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.14, %150 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_150_113) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_2_cur_output_0_reg <= __ConvertTime_2_cur_output_0;
if (reset == 1'b0 && ^(__ConvertTime_2_cur_output_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_cur_output_0_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
begin
__ConvertTime_2_3 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_4))
begin
__ConvertTime_2_3_reg <= __ConvertTime_2_3;
if (reset == 1'b0 && ^(__ConvertTime_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %2*/
/*   %4 = icmp eq i8 %3, 0*/
begin
__ConvertTime_2_4 = (__ConvertTime_2_3 == 8'd0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %2*/
/*   %4 = icmp eq i8 %3, 0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_4))
begin
__ConvertTime_2_4_reg <= __ConvertTime_2_4;
if (reset == 1'b0 && ^(__ConvertTime_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_2_4_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %5*/
/*   %6 = sext i8 %3 to i32*/
begin
__ConvertTime_5_6 = $signed(__ConvertTime_2_3_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %5*/
/*   %6 = sext i8 %3 to i32*/
if ((cur_state == LEGUP_F___ConvertTime_BB_5_5))
begin
__ConvertTime_5_6_reg <= __ConvertTime_5_6;
if (reset == 1'b0 && ^(__ConvertTime_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_5_6_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %7*/
/*   %8 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertTime_7_8 = (__ConvertTime_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %7*/
/*   %8 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
__ConvertTime_7_8_reg <= __ConvertTime_7_8;
if (reset == 1'b0 && ^(__ConvertTime_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_7_8_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
begin
__ConvertTime_7_9 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_9))
begin
__ConvertTime_7_9_reg <= __ConvertTime_7_9;
if (reset == 1'b0 && ^(__ConvertTime_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_7_9_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %7*/
/*   %10 = icmp eq i8 %9, 104*/
begin
__ConvertTime_7_10 = (__ConvertTime_7_9 == 8'd104);
end
end
always @(posedge clk) begin
/* __ConvertTime: %7*/
/*   %10 = icmp eq i8 %9, 104*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_9))
begin
__ConvertTime_7_10_reg <= __ConvertTime_7_10;
if (reset == 1'b0 && ^(__ConvertTime_7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_7_10_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %7*/
/*   %11 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_7_11 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %7*/
/*   %11 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
__ConvertTime_7_11_reg <= __ConvertTime_7_11;
if (reset == 1'b0 && ^(__ConvertTime_7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_7_11_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %12*/
/*   %13 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_12_13 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %12*/
/*   %13 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_12_10))
begin
__ConvertTime_12_13_reg <= __ConvertTime_12_13;
if (reset == 1'b0 && ^(__ConvertTime_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_12_13_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %12*/
/*   %14 = icmp ugt i8* %13, %1*/
begin
__ConvertTime_12_14 = (__ConvertTime_12_13 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %12*/
/*   %14 = icmp ugt i8* %13, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_12_10))
begin
__ConvertTime_12_14_reg <= __ConvertTime_12_14;
if (reset == 1'b0 && ^(__ConvertTime_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_12_14_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %12*/
/*   %or.cond = and i1 %11, %14*/
begin
__ConvertTime_12_or_cond = (__ConvertTime_7_11_reg & __ConvertTime_12_14);
end
end
always @(posedge clk) begin
/* __ConvertTime: %12*/
/*   %or.cond = and i1 %11, %14*/
if ((cur_state == LEGUP_F___ConvertTime_BB_12_10))
begin
__ConvertTime_12_or_cond_reg <= __ConvertTime_12_or_cond;
if (reset == 1'b0 && ^(__ConvertTime_12_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_12_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %15*/
/*   %16 = add nsw i32 %.03, 1*/
begin
__ConvertTime_15_16 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %15*/
/*   %16 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
__ConvertTime_15_16_reg <= __ConvertTime_15_16;
if (reset == 1'b0 && ^(__ConvertTime_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_15_16_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %18*/
/*   %19 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_18_19 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %18*/
/*   %19 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
__ConvertTime_18_19_reg <= __ConvertTime_18_19;
if (reset == 1'b0 && ^(__ConvertTime_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_18_19_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %20*/
/*   %cur_output.1 = phi i8* [ %13, %18 ], [ null, %17 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_17_13) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
__ConvertTime_20_cur_output_1 = 0;
end
/* __ConvertTime: %20*/
/*   %cur_output.1 = phi i8* [ %13, %18 ], [ null, %17 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_18_15) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_20_cur_output_1 = __ConvertTime_12_13_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %20*/
/*   %cur_output.1 = phi i8* [ %13, %18 ], [ null, %17 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_17_13) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
__ConvertTime_20_cur_output_1_reg <= __ConvertTime_20_cur_output_1;
if (reset == 1'b0 && ^(__ConvertTime_20_cur_output_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_20_cur_output_1_reg"); $finish; end
end
/* __ConvertTime: %20*/
/*   %cur_output.1 = phi i8* [ %13, %18 ], [ null, %17 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_18_15) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_20_cur_output_1_reg <= __ConvertTime_20_cur_output_1;
if (reset == 1'b0 && ^(__ConvertTime_20_cur_output_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_20_cur_output_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %20*/
/*   %21 = add nsw i32 %.03, 2*/
begin
__ConvertTime_20_21 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %20*/
/*   %21 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_20_16))
begin
__ConvertTime_20_21_reg <= __ConvertTime_20_21;
if (reset == 1'b0 && ^(__ConvertTime_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_20_21_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %22*/
/*   %23 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertTime_22_23 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertTime: %22*/
/*   %23 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_22_17))
begin
__ConvertTime_22_23_reg <= __ConvertTime_22_23;
if (reset == 1'b0 && ^(__ConvertTime_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_22_23_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %22*/
/*   %24 = icmp ugt i8* %23, %1*/
begin
__ConvertTime_22_24 = (__ConvertTime_22_23 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %22*/
/*   %24 = icmp ugt i8* %23, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_22_17))
begin
__ConvertTime_22_24_reg <= __ConvertTime_22_24;
if (reset == 1'b0 && ^(__ConvertTime_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_22_24_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %22*/
/*   %or.cond6 = and i1 %11, %24*/
begin
__ConvertTime_22_or_cond6 = (__ConvertTime_7_11_reg & __ConvertTime_22_24);
end
end
always @(posedge clk) begin
/* __ConvertTime: %22*/
/*   %or.cond6 = and i1 %11, %24*/
if ((cur_state == LEGUP_F___ConvertTime_BB_22_17))
begin
__ConvertTime_22_or_cond6_reg <= __ConvertTime_22_or_cond6;
if (reset == 1'b0 && ^(__ConvertTime_22_or_cond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_22_or_cond6_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %25*/
/*   %26 = add nsw i32 %.03, 1*/
begin
__ConvertTime_25_26 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %25*/
/*   %26 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
__ConvertTime_25_26_reg <= __ConvertTime_25_26;
if (reset == 1'b0 && ^(__ConvertTime_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_25_26_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %28*/
/*   %29 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_28_29 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %28*/
/*   %29 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
__ConvertTime_28_29_reg <= __ConvertTime_28_29;
if (reset == 1'b0 && ^(__ConvertTime_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_28_29_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %28*/
/*   %30 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_28_30 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %28*/
/*   %30 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
__ConvertTime_28_30_reg <= __ConvertTime_28_30;
if (reset == 1'b0 && ^(__ConvertTime_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_28_30_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %31*/
/*   %cur_output.2 = phi i8* [ %23, %28 ], [ null, %27 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
__ConvertTime_31_cur_output_2 = 0;
end
/* __ConvertTime: %31*/
/*   %cur_output.2 = phi i8* [ %23, %28 ], [ null, %27 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_28_23) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_31_cur_output_2 = __ConvertTime_22_23_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %31*/
/*   %cur_output.2 = phi i8* [ %23, %28 ], [ null, %27 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_7_11_reg == 1'd0)))
begin
__ConvertTime_31_cur_output_2_reg <= __ConvertTime_31_cur_output_2;
if (reset == 1'b0 && ^(__ConvertTime_31_cur_output_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_31_cur_output_2_reg"); $finish; end
end
/* __ConvertTime: %31*/
/*   %cur_output.2 = phi i8* [ %23, %28 ], [ null, %27 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_28_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_31_cur_output_2_reg <= __ConvertTime_31_cur_output_2;
if (reset == 1'b0 && ^(__ConvertTime_31_cur_output_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_31_cur_output_2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %31*/
/*   %32 = add nsw i32 %.03, 3*/
begin
__ConvertTime_31_32 = (__ConvertTime_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertTime: %31*/
/*   %32 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_31_24))
begin
__ConvertTime_31_32_reg <= __ConvertTime_31_32;
if (reset == 1'b0 && ^(__ConvertTime_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_31_32_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %33*/
/*   %34 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertTime_33_34 = (__ConvertTime_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %33*/
/*   %34 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
__ConvertTime_33_34_reg <= __ConvertTime_33_34;
if (reset == 1'b0 && ^(__ConvertTime_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_33_34_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
begin
__ConvertTime_33_35 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_27))
begin
__ConvertTime_33_35_reg <= __ConvertTime_33_35;
if (reset == 1'b0 && ^(__ConvertTime_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_33_35_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %33*/
/*   %36 = icmp eq i8 %35, 72*/
begin
__ConvertTime_33_36 = (__ConvertTime_33_35 == 8'd72);
end
end
always @(posedge clk) begin
/* __ConvertTime: %33*/
/*   %36 = icmp eq i8 %35, 72*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_27))
begin
__ConvertTime_33_36_reg <= __ConvertTime_33_36;
if (reset == 1'b0 && ^(__ConvertTime_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_33_36_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %33*/
/*   %37 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_33_37 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %33*/
/*   %37 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
__ConvertTime_33_37_reg <= __ConvertTime_33_37;
if (reset == 1'b0 && ^(__ConvertTime_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_33_37_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %38*/
/*   %39 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_38_39 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %38*/
/*   %39 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_38_28))
begin
__ConvertTime_38_39_reg <= __ConvertTime_38_39;
if (reset == 1'b0 && ^(__ConvertTime_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_38_39_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %38*/
/*   %40 = icmp ugt i8* %39, %1*/
begin
__ConvertTime_38_40 = (__ConvertTime_38_39 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %38*/
/*   %40 = icmp ugt i8* %39, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_38_28))
begin
__ConvertTime_38_40_reg <= __ConvertTime_38_40;
if (reset == 1'b0 && ^(__ConvertTime_38_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_38_40_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %38*/
/*   %or.cond8 = and i1 %37, %40*/
begin
__ConvertTime_38_or_cond8 = (__ConvertTime_33_37_reg & __ConvertTime_38_40);
end
end
always @(posedge clk) begin
/* __ConvertTime: %38*/
/*   %or.cond8 = and i1 %37, %40*/
if ((cur_state == LEGUP_F___ConvertTime_BB_38_28))
begin
__ConvertTime_38_or_cond8_reg <= __ConvertTime_38_or_cond8;
if (reset == 1'b0 && ^(__ConvertTime_38_or_cond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_38_or_cond8_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %41*/
/*   %42 = add nsw i32 %.03, 1*/
begin
__ConvertTime_41_42 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %41*/
/*   %42 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
__ConvertTime_41_42_reg <= __ConvertTime_41_42;
if (reset == 1'b0 && ^(__ConvertTime_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_41_42_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %44*/
/*   %45 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_44_45 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %44*/
/*   %45 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
__ConvertTime_44_45_reg <= __ConvertTime_44_45;
if (reset == 1'b0 && ^(__ConvertTime_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_44_45_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %46*/
/*   %cur_output.3 = phi i8* [ %39, %44 ], [ null, %43 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
__ConvertTime_46_cur_output_3 = 0;
end
/* __ConvertTime: %46*/
/*   %cur_output.3 = phi i8* [ %39, %44 ], [ null, %43 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_44_33) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_46_cur_output_3 = __ConvertTime_38_39_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %46*/
/*   %cur_output.3 = phi i8* [ %39, %44 ], [ null, %43 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_43_31) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
__ConvertTime_46_cur_output_3_reg <= __ConvertTime_46_cur_output_3;
if (reset == 1'b0 && ^(__ConvertTime_46_cur_output_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_46_cur_output_3_reg"); $finish; end
end
/* __ConvertTime: %46*/
/*   %cur_output.3 = phi i8* [ %39, %44 ], [ null, %43 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_44_33) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_46_cur_output_3_reg <= __ConvertTime_46_cur_output_3;
if (reset == 1'b0 && ^(__ConvertTime_46_cur_output_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_46_cur_output_3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %46*/
/*   %47 = add nsw i32 %.03, 2*/
begin
__ConvertTime_46_47 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %46*/
/*   %47 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_46_34))
begin
__ConvertTime_46_47_reg <= __ConvertTime_46_47;
if (reset == 1'b0 && ^(__ConvertTime_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_46_47_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %48*/
/*   %49 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertTime_48_49 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertTime: %48*/
/*   %49 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_48_35))
begin
__ConvertTime_48_49_reg <= __ConvertTime_48_49;
if (reset == 1'b0 && ^(__ConvertTime_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_48_49_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %48*/
/*   %50 = icmp ugt i8* %49, %1*/
begin
__ConvertTime_48_50 = (__ConvertTime_48_49 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %48*/
/*   %50 = icmp ugt i8* %49, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_48_35))
begin
__ConvertTime_48_50_reg <= __ConvertTime_48_50;
if (reset == 1'b0 && ^(__ConvertTime_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_48_50_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %48*/
/*   %or.cond10 = and i1 %37, %50*/
begin
__ConvertTime_48_or_cond10 = (__ConvertTime_33_37_reg & __ConvertTime_48_50);
end
end
always @(posedge clk) begin
/* __ConvertTime: %48*/
/*   %or.cond10 = and i1 %37, %50*/
if ((cur_state == LEGUP_F___ConvertTime_BB_48_35))
begin
__ConvertTime_48_or_cond10_reg <= __ConvertTime_48_or_cond10;
if (reset == 1'b0 && ^(__ConvertTime_48_or_cond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_48_or_cond10_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %51*/
/*   %52 = add nsw i32 %.03, 1*/
begin
__ConvertTime_51_52 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %51*/
/*   %52 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
__ConvertTime_51_52_reg <= __ConvertTime_51_52;
if (reset == 1'b0 && ^(__ConvertTime_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_51_52_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %54*/
/*   %55 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_54_55 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %54*/
/*   %55 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
__ConvertTime_54_55_reg <= __ConvertTime_54_55;
if (reset == 1'b0 && ^(__ConvertTime_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_54_55_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %54*/
/*   %56 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_54_56 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %54*/
/*   %56 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
__ConvertTime_54_56_reg <= __ConvertTime_54_56;
if (reset == 1'b0 && ^(__ConvertTime_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_54_56_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %57*/
/*   %cur_output.4 = phi i8* [ %49, %54 ], [ null, %53 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_53_38) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
__ConvertTime_57_cur_output_4 = 0;
end
/* __ConvertTime: %57*/
/*   %cur_output.4 = phi i8* [ %49, %54 ], [ null, %53 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_54_41) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_57_cur_output_4 = __ConvertTime_48_49_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %57*/
/*   %cur_output.4 = phi i8* [ %49, %54 ], [ null, %53 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_53_38) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_33_37_reg == 1'd0)))
begin
__ConvertTime_57_cur_output_4_reg <= __ConvertTime_57_cur_output_4;
if (reset == 1'b0 && ^(__ConvertTime_57_cur_output_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_57_cur_output_4_reg"); $finish; end
end
/* __ConvertTime: %57*/
/*   %cur_output.4 = phi i8* [ %49, %54 ], [ null, %53 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_54_41) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_57_cur_output_4_reg <= __ConvertTime_57_cur_output_4;
if (reset == 1'b0 && ^(__ConvertTime_57_cur_output_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_57_cur_output_4_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %57*/
/*   %58 = add nsw i32 %.03, 3*/
begin
__ConvertTime_57_58 = (__ConvertTime_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertTime: %57*/
/*   %58 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_57_42))
begin
__ConvertTime_57_58_reg <= __ConvertTime_57_58;
if (reset == 1'b0 && ^(__ConvertTime_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_57_58_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %59*/
/*   %60 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertTime_59_60 = (__ConvertTime_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %59*/
/*   %60 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
__ConvertTime_59_60_reg <= __ConvertTime_59_60;
if (reset == 1'b0 && ^(__ConvertTime_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_59_60_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
begin
__ConvertTime_59_61 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_45))
begin
__ConvertTime_59_61_reg <= __ConvertTime_59_61;
if (reset == 1'b0 && ^(__ConvertTime_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_59_61_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %59*/
/*   %62 = icmp eq i8 %61, 109*/
begin
__ConvertTime_59_62 = (__ConvertTime_59_61 == 8'd109);
end
end
always @(posedge clk) begin
/* __ConvertTime: %59*/
/*   %62 = icmp eq i8 %61, 109*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_45))
begin
__ConvertTime_59_62_reg <= __ConvertTime_59_62;
if (reset == 1'b0 && ^(__ConvertTime_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_59_62_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %59*/
/*   %63 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_59_63 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %59*/
/*   %63 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
__ConvertTime_59_63_reg <= __ConvertTime_59_63;
if (reset == 1'b0 && ^(__ConvertTime_59_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_59_63_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %64*/
/*   %65 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_64_65 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %64*/
/*   %65 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_64_46))
begin
__ConvertTime_64_65_reg <= __ConvertTime_64_65;
if (reset == 1'b0 && ^(__ConvertTime_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_64_65_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %64*/
/*   %66 = icmp ugt i8* %65, %1*/
begin
__ConvertTime_64_66 = (__ConvertTime_64_65 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %64*/
/*   %66 = icmp ugt i8* %65, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_64_46))
begin
__ConvertTime_64_66_reg <= __ConvertTime_64_66;
if (reset == 1'b0 && ^(__ConvertTime_64_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_64_66_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %64*/
/*   %or.cond12 = and i1 %63, %66*/
begin
__ConvertTime_64_or_cond12 = (__ConvertTime_59_63_reg & __ConvertTime_64_66);
end
end
always @(posedge clk) begin
/* __ConvertTime: %64*/
/*   %or.cond12 = and i1 %63, %66*/
if ((cur_state == LEGUP_F___ConvertTime_BB_64_46))
begin
__ConvertTime_64_or_cond12_reg <= __ConvertTime_64_or_cond12;
if (reset == 1'b0 && ^(__ConvertTime_64_or_cond12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_64_or_cond12_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %67*/
/*   %68 = add nsw i32 %.03, 1*/
begin
__ConvertTime_67_68 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %67*/
/*   %68 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
__ConvertTime_67_68_reg <= __ConvertTime_67_68;
if (reset == 1'b0 && ^(__ConvertTime_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_67_68_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %70*/
/*   %71 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_70_71 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %70*/
/*   %71 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
__ConvertTime_70_71_reg <= __ConvertTime_70_71;
if (reset == 1'b0 && ^(__ConvertTime_70_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_70_71_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %72*/
/*   %cur_output.5 = phi i8* [ %65, %70 ], [ null, %69 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
__ConvertTime_72_cur_output_5 = 0;
end
/* __ConvertTime: %72*/
/*   %cur_output.5 = phi i8* [ %65, %70 ], [ null, %69 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_70_51) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_72_cur_output_5 = __ConvertTime_64_65_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %72*/
/*   %cur_output.5 = phi i8* [ %65, %70 ], [ null, %69 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_69_49) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
__ConvertTime_72_cur_output_5_reg <= __ConvertTime_72_cur_output_5;
if (reset == 1'b0 && ^(__ConvertTime_72_cur_output_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_72_cur_output_5_reg"); $finish; end
end
/* __ConvertTime: %72*/
/*   %cur_output.5 = phi i8* [ %65, %70 ], [ null, %69 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_70_51) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_72_cur_output_5_reg <= __ConvertTime_72_cur_output_5;
if (reset == 1'b0 && ^(__ConvertTime_72_cur_output_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_72_cur_output_5_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %72*/
/*   %73 = add nsw i32 %.03, 2*/
begin
__ConvertTime_72_73 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %72*/
/*   %73 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_72_52))
begin
__ConvertTime_72_73_reg <= __ConvertTime_72_73;
if (reset == 1'b0 && ^(__ConvertTime_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_72_73_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %74*/
/*   %75 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertTime_74_75 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertTime: %74*/
/*   %75 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_74_53))
begin
__ConvertTime_74_75_reg <= __ConvertTime_74_75;
if (reset == 1'b0 && ^(__ConvertTime_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_74_75_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %74*/
/*   %76 = icmp ugt i8* %75, %1*/
begin
__ConvertTime_74_76 = (__ConvertTime_74_75 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %74*/
/*   %76 = icmp ugt i8* %75, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_74_53))
begin
__ConvertTime_74_76_reg <= __ConvertTime_74_76;
if (reset == 1'b0 && ^(__ConvertTime_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_74_76_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %74*/
/*   %or.cond14 = and i1 %63, %76*/
begin
__ConvertTime_74_or_cond14 = (__ConvertTime_59_63_reg & __ConvertTime_74_76);
end
end
always @(posedge clk) begin
/* __ConvertTime: %74*/
/*   %or.cond14 = and i1 %63, %76*/
if ((cur_state == LEGUP_F___ConvertTime_BB_74_53))
begin
__ConvertTime_74_or_cond14_reg <= __ConvertTime_74_or_cond14;
if (reset == 1'b0 && ^(__ConvertTime_74_or_cond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_74_or_cond14_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %77*/
/*   %78 = add nsw i32 %.03, 1*/
begin
__ConvertTime_77_78 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %77*/
/*   %78 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
__ConvertTime_77_78_reg <= __ConvertTime_77_78;
if (reset == 1'b0 && ^(__ConvertTime_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_77_78_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %80*/
/*   %81 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_80_81 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %80*/
/*   %81 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
__ConvertTime_80_81_reg <= __ConvertTime_80_81;
if (reset == 1'b0 && ^(__ConvertTime_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_80_81_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %80*/
/*   %82 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_80_82 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %80*/
/*   %82 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
__ConvertTime_80_82_reg <= __ConvertTime_80_82;
if (reset == 1'b0 && ^(__ConvertTime_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_80_82_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %83*/
/*   %cur_output.6 = phi i8* [ %75, %80 ], [ null, %79 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_79_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
__ConvertTime_83_cur_output_6 = 0;
end
/* __ConvertTime: %83*/
/*   %cur_output.6 = phi i8* [ %75, %80 ], [ null, %79 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_80_59) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_83_cur_output_6 = __ConvertTime_74_75_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %83*/
/*   %cur_output.6 = phi i8* [ %75, %80 ], [ null, %79 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_79_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_59_63_reg == 1'd0)))
begin
__ConvertTime_83_cur_output_6_reg <= __ConvertTime_83_cur_output_6;
if (reset == 1'b0 && ^(__ConvertTime_83_cur_output_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_83_cur_output_6_reg"); $finish; end
end
/* __ConvertTime: %83*/
/*   %cur_output.6 = phi i8* [ %75, %80 ], [ null, %79 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_80_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_83_cur_output_6_reg <= __ConvertTime_83_cur_output_6;
if (reset == 1'b0 && ^(__ConvertTime_83_cur_output_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_83_cur_output_6_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %83*/
/*   %84 = add nsw i32 %.03, 3*/
begin
__ConvertTime_83_84 = (__ConvertTime_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertTime: %83*/
/*   %84 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_83_60))
begin
__ConvertTime_83_84_reg <= __ConvertTime_83_84;
if (reset == 1'b0 && ^(__ConvertTime_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_83_84_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %85*/
/*   %86 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertTime_85_86 = (__ConvertTime_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %85*/
/*   %86 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
__ConvertTime_85_86_reg <= __ConvertTime_85_86;
if (reset == 1'b0 && ^(__ConvertTime_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_85_86_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
begin
__ConvertTime_85_87 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_63))
begin
__ConvertTime_85_87_reg <= __ConvertTime_85_87;
if (reset == 1'b0 && ^(__ConvertTime_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_85_87_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %85*/
/*   %88 = icmp eq i8 %87, 115*/
begin
__ConvertTime_85_88 = (__ConvertTime_85_87 == 8'd115);
end
end
always @(posedge clk) begin
/* __ConvertTime: %85*/
/*   %88 = icmp eq i8 %87, 115*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_63))
begin
__ConvertTime_85_88_reg <= __ConvertTime_85_88;
if (reset == 1'b0 && ^(__ConvertTime_85_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_85_88_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %85*/
/*   %89 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_85_89 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %85*/
/*   %89 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
__ConvertTime_85_89_reg <= __ConvertTime_85_89;
if (reset == 1'b0 && ^(__ConvertTime_85_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_85_89_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %90*/
/*   %91 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_90_91 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %90*/
/*   %91 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_90_64))
begin
__ConvertTime_90_91_reg <= __ConvertTime_90_91;
if (reset == 1'b0 && ^(__ConvertTime_90_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_90_91_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %90*/
/*   %92 = icmp ugt i8* %91, %1*/
begin
__ConvertTime_90_92 = (__ConvertTime_90_91 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %90*/
/*   %92 = icmp ugt i8* %91, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_90_64))
begin
__ConvertTime_90_92_reg <= __ConvertTime_90_92;
if (reset == 1'b0 && ^(__ConvertTime_90_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_90_92_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %90*/
/*   %or.cond16 = and i1 %89, %92*/
begin
__ConvertTime_90_or_cond16 = (__ConvertTime_85_89_reg & __ConvertTime_90_92);
end
end
always @(posedge clk) begin
/* __ConvertTime: %90*/
/*   %or.cond16 = and i1 %89, %92*/
if ((cur_state == LEGUP_F___ConvertTime_BB_90_64))
begin
__ConvertTime_90_or_cond16_reg <= __ConvertTime_90_or_cond16;
if (reset == 1'b0 && ^(__ConvertTime_90_or_cond16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_90_or_cond16_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %93*/
/*   %94 = add nsw i32 %.03, 1*/
begin
__ConvertTime_93_94 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %93*/
/*   %94 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
__ConvertTime_93_94_reg <= __ConvertTime_93_94;
if (reset == 1'b0 && ^(__ConvertTime_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_93_94_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %96*/
/*   %97 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_96_97 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %96*/
/*   %97 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
__ConvertTime_96_97_reg <= __ConvertTime_96_97;
if (reset == 1'b0 && ^(__ConvertTime_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_96_97_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %98*/
/*   %cur_output.7 = phi i8* [ %91, %96 ], [ null, %95 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_95_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
__ConvertTime_98_cur_output_7 = 0;
end
/* __ConvertTime: %98*/
/*   %cur_output.7 = phi i8* [ %91, %96 ], [ null, %95 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_96_69) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_98_cur_output_7 = __ConvertTime_90_91_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %98*/
/*   %cur_output.7 = phi i8* [ %91, %96 ], [ null, %95 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_95_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
__ConvertTime_98_cur_output_7_reg <= __ConvertTime_98_cur_output_7;
if (reset == 1'b0 && ^(__ConvertTime_98_cur_output_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_98_cur_output_7_reg"); $finish; end
end
/* __ConvertTime: %98*/
/*   %cur_output.7 = phi i8* [ %91, %96 ], [ null, %95 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_96_69) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_98_cur_output_7_reg <= __ConvertTime_98_cur_output_7;
if (reset == 1'b0 && ^(__ConvertTime_98_cur_output_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_98_cur_output_7_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %98*/
/*   %99 = add nsw i32 %.03, 2*/
begin
__ConvertTime_98_99 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %98*/
/*   %99 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_98_70))
begin
__ConvertTime_98_99_reg <= __ConvertTime_98_99;
if (reset == 1'b0 && ^(__ConvertTime_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_98_99_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %100*/
/*   %101 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertTime_100_101 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertTime: %100*/
/*   %101 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_100_71))
begin
__ConvertTime_100_101_reg <= __ConvertTime_100_101;
if (reset == 1'b0 && ^(__ConvertTime_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_100_101_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %100*/
/*   %102 = icmp ugt i8* %101, %1*/
begin
__ConvertTime_100_102 = (__ConvertTime_100_101 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %100*/
/*   %102 = icmp ugt i8* %101, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_100_71))
begin
__ConvertTime_100_102_reg <= __ConvertTime_100_102;
if (reset == 1'b0 && ^(__ConvertTime_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_100_102_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %100*/
/*   %or.cond18 = and i1 %89, %102*/
begin
__ConvertTime_100_or_cond18 = (__ConvertTime_85_89_reg & __ConvertTime_100_102);
end
end
always @(posedge clk) begin
/* __ConvertTime: %100*/
/*   %or.cond18 = and i1 %89, %102*/
if ((cur_state == LEGUP_F___ConvertTime_BB_100_71))
begin
__ConvertTime_100_or_cond18_reg <= __ConvertTime_100_or_cond18;
if (reset == 1'b0 && ^(__ConvertTime_100_or_cond18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_100_or_cond18_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %103*/
/*   %104 = add nsw i32 %.03, 1*/
begin
__ConvertTime_103_104 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %103*/
/*   %104 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
__ConvertTime_103_104_reg <= __ConvertTime_103_104;
if (reset == 1'b0 && ^(__ConvertTime_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_103_104_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %106*/
/*   %107 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_106_107 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %106*/
/*   %107 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
__ConvertTime_106_107_reg <= __ConvertTime_106_107;
if (reset == 1'b0 && ^(__ConvertTime_106_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_106_107_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %106*/
/*   %108 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_106_108 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %106*/
/*   %108 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
__ConvertTime_106_108_reg <= __ConvertTime_106_108;
if (reset == 1'b0 && ^(__ConvertTime_106_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_106_108_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %109*/
/*   %cur_output.8 = phi i8* [ %101, %106 ], [ null, %105 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_105_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
__ConvertTime_109_cur_output_8 = 0;
end
/* __ConvertTime: %109*/
/*   %cur_output.8 = phi i8* [ %101, %106 ], [ null, %105 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_106_77) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_109_cur_output_8 = __ConvertTime_100_101_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %109*/
/*   %cur_output.8 = phi i8* [ %101, %106 ], [ null, %105 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_105_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_85_89_reg == 1'd0)))
begin
__ConvertTime_109_cur_output_8_reg <= __ConvertTime_109_cur_output_8;
if (reset == 1'b0 && ^(__ConvertTime_109_cur_output_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_109_cur_output_8_reg"); $finish; end
end
/* __ConvertTime: %109*/
/*   %cur_output.8 = phi i8* [ %101, %106 ], [ null, %105 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_106_77) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_109_cur_output_8_reg <= __ConvertTime_109_cur_output_8;
if (reset == 1'b0 && ^(__ConvertTime_109_cur_output_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_109_cur_output_8_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %109*/
/*   %110 = add nsw i32 %.03, 3*/
begin
__ConvertTime_109_110 = (__ConvertTime_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertTime: %109*/
/*   %110 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertTime_BB_109_78))
begin
__ConvertTime_109_110_reg <= __ConvertTime_109_110;
if (reset == 1'b0 && ^(__ConvertTime_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_109_110_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %112 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertTime_111_112 = (__ConvertTime_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %112 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
__ConvertTime_111_112_reg <= __ConvertTime_111_112;
if (reset == 1'b0 && ^(__ConvertTime_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_112_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
begin
__ConvertTime_111_113 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_81))
begin
__ConvertTime_111_113_reg <= __ConvertTime_111_113;
if (reset == 1'b0 && ^(__ConvertTime_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_113_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %114 = icmp eq i8 %113, 116*/
begin
__ConvertTime_111_114 = (__ConvertTime_111_113 == 8'd116);
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %114 = icmp eq i8 %113, 116*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_81))
begin
__ConvertTime_111_114_reg <= __ConvertTime_111_114;
if (reset == 1'b0 && ^(__ConvertTime_111_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_114_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %cur_char.1 = select i1 %114, i8* %112, i8* %cur_char.0*/
begin
__ConvertTime_111_cur_char_1 = (__ConvertTime_111_114_reg ? __ConvertTime_111_112_reg : __ConvertTime_2_cur_char_0_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %cur_char.1 = select i1 %114, i8* %112, i8* %cur_char.0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_82))
begin
__ConvertTime_111_cur_char_1_reg <= __ConvertTime_111_cur_char_1;
if (reset == 1'b0 && ^(__ConvertTime_111_cur_char_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_cur_char_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %115 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_111_115 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %115 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
__ConvertTime_111_115_reg <= __ConvertTime_111_115;
if (reset == 1'b0 && ^(__ConvertTime_111_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_115_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %116 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_111_116 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %116 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
__ConvertTime_111_116_reg <= __ConvertTime_111_116;
if (reset == 1'b0 && ^(__ConvertTime_111_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_116_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %117 = icmp ugt i8* %116, %1*/
begin
__ConvertTime_111_117 = (__ConvertTime_111_116 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %117 = icmp ugt i8* %116, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
__ConvertTime_111_117_reg <= __ConvertTime_111_117;
if (reset == 1'b0 && ^(__ConvertTime_111_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_117_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %111*/
/*   %or.cond20 = and i1 %115, %117*/
begin
__ConvertTime_111_or_cond20 = (__ConvertTime_111_115 & __ConvertTime_111_117);
end
end
always @(posedge clk) begin
/* __ConvertTime: %111*/
/*   %or.cond20 = and i1 %115, %117*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
__ConvertTime_111_or_cond20_reg <= __ConvertTime_111_or_cond20;
if (reset == 1'b0 && ^(__ConvertTime_111_or_cond20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_111_or_cond20_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %118*/
/*   %119 = add nsw i32 %.03, 1*/
begin
__ConvertTime_118_119 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %118*/
/*   %119 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
__ConvertTime_118_119_reg <= __ConvertTime_118_119;
if (reset == 1'b0 && ^(__ConvertTime_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_118_119_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %121*/
/*   %122 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_121_122 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %121*/
/*   %122 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
__ConvertTime_121_122_reg <= __ConvertTime_121_122;
if (reset == 1'b0 && ^(__ConvertTime_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_121_122_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %123*/
/*   %cur_output.9 = phi i8* [ %116, %121 ], [ null, %120 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_120_85) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_115_reg == 1'd0)))
begin
__ConvertTime_123_cur_output_9 = 0;
end
/* __ConvertTime: %123*/
/*   %cur_output.9 = phi i8* [ %116, %121 ], [ null, %120 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_121_87) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_123_cur_output_9 = __ConvertTime_111_116_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %123*/
/*   %cur_output.9 = phi i8* [ %116, %121 ], [ null, %120 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_120_85) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_111_115_reg == 1'd0)))
begin
__ConvertTime_123_cur_output_9_reg <= __ConvertTime_123_cur_output_9;
if (reset == 1'b0 && ^(__ConvertTime_123_cur_output_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_123_cur_output_9_reg"); $finish; end
end
/* __ConvertTime: %123*/
/*   %cur_output.9 = phi i8* [ %116, %121 ], [ null, %120 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_121_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_123_cur_output_9_reg <= __ConvertTime_123_cur_output_9;
if (reset == 1'b0 && ^(__ConvertTime_123_cur_output_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_123_cur_output_9_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %123*/
/*   %124 = add nsw i32 %.03, 2*/
begin
__ConvertTime_123_124 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %123*/
/*   %124 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_123_88))
begin
__ConvertTime_123_124_reg <= __ConvertTime_123_124;
if (reset == 1'b0 && ^(__ConvertTime_123_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_123_124_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %125*/
/*   %126 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertTime_125_126 = (__ConvertTime_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %125*/
/*   %126 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_125_89))
begin
__ConvertTime_125_126_reg <= __ConvertTime_125_126;
if (reset == 1'b0 && ^(__ConvertTime_125_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_125_126_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %125*/
/*   %127 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertTime_125_127 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertTime: %125*/
/*   %127 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_125_89))
begin
__ConvertTime_125_127_reg <= __ConvertTime_125_127;
if (reset == 1'b0 && ^(__ConvertTime_125_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_125_127_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %125*/
/*   %128 = icmp ugt i8* %127, %1*/
begin
__ConvertTime_125_128 = (__ConvertTime_125_127 > __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %125*/
/*   %128 = icmp ugt i8* %127, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_125_89))
begin
__ConvertTime_125_128_reg <= __ConvertTime_125_128;
if (reset == 1'b0 && ^(__ConvertTime_125_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_125_128_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %125*/
/*   %or.cond22 = and i1 %126, %128*/
begin
__ConvertTime_125_or_cond22 = (__ConvertTime_125_126 & __ConvertTime_125_128);
end
end
always @(posedge clk) begin
/* __ConvertTime: %125*/
/*   %or.cond22 = and i1 %126, %128*/
if ((cur_state == LEGUP_F___ConvertTime_BB_125_89))
begin
__ConvertTime_125_or_cond22_reg <= __ConvertTime_125_or_cond22;
if (reset == 1'b0 && ^(__ConvertTime_125_or_cond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_125_or_cond22_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %129*/
/*   %130 = add nsw i32 %.03, 1*/
begin
__ConvertTime_129_130 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %129*/
/*   %130 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
__ConvertTime_129_130_reg <= __ConvertTime_129_130;
if (reset == 1'b0 && ^(__ConvertTime_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_129_130_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %132*/
/*   %133 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_132_133 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %132*/
/*   %133 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
__ConvertTime_132_133_reg <= __ConvertTime_132_133;
if (reset == 1'b0 && ^(__ConvertTime_132_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_132_133_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %134*/
/*   %cur_output.10 = phi i8* [ %127, %132 ], [ null, %131 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_131_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_126_reg == 1'd0)))
begin
__ConvertTime_134_cur_output_10 = 0;
end
/* __ConvertTime: %134*/
/*   %cur_output.10 = phi i8* [ %127, %132 ], [ null, %131 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_132_94) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_134_cur_output_10 = __ConvertTime_125_127_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %134*/
/*   %cur_output.10 = phi i8* [ %127, %132 ], [ null, %131 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_131_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_125_126_reg == 1'd0)))
begin
__ConvertTime_134_cur_output_10_reg <= __ConvertTime_134_cur_output_10;
if (reset == 1'b0 && ^(__ConvertTime_134_cur_output_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_134_cur_output_10_reg"); $finish; end
end
/* __ConvertTime: %134*/
/*   %cur_output.10 = phi i8* [ %127, %132 ], [ null, %131 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_132_94) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_134_cur_output_10_reg <= __ConvertTime_134_cur_output_10;
if (reset == 1'b0 && ^(__ConvertTime_134_cur_output_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_134_cur_output_10_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %134*/
/*   %135 = add nsw i32 %.03, 2*/
begin
__ConvertTime_134_135 = (__ConvertTime_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertTime: %134*/
/*   %135 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertTime_BB_134_95))
begin
__ConvertTime_134_135_reg <= __ConvertTime_134_135;
if (reset == 1'b0 && ^(__ConvertTime_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_134_135_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_indvar = 32'd0;
end
/* __ConvertTime: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__preheader_indvar = __ConvertTime__preheader_tmp_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_indvar_reg <= __ConvertTime__preheader_indvar;
if (reset == 1'b0 && ^(__ConvertTime__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_indvar_reg"); $finish; end
end
/* __ConvertTime: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_indvar_reg <= __ConvertTime__preheader_indvar;
if (reset == 1'b0 && ^(__ConvertTime__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_indvar_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader*/
/*   %cur_output.11 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.11.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_cur_output_11 = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %.preheader*/
/*   %cur_output.11 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.11.be, %.preheader.backedge ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__preheader_cur_output_11 = __ConvertTime__preheader_backedge_cur_output_11_be_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader*/
/*   %cur_output.11 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.11.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_preheader_6) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_cur_output_11_reg <= __ConvertTime__preheader_cur_output_11;
if (reset == 1'b0 && ^(__ConvertTime__preheader_cur_output_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_cur_output_11_reg"); $finish; end
end
/* __ConvertTime: %.preheader*/
/*   %cur_output.11 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.11.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__preheader_backedge_102) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_cur_output_11_reg <= __ConvertTime__preheader_cur_output_11;
if (reset == 1'b0 && ^(__ConvertTime__preheader_cur_output_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_cur_output_11_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader*/
/*   %tmp = add i32 %indvar, 1*/
begin
__ConvertTime__preheader_tmp = (__ConvertTime__preheader_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader*/
/*   %tmp = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_96))
begin
__ConvertTime__preheader_tmp_reg <= __ConvertTime__preheader_tmp;
if (reset == 1'b0 && ^(__ConvertTime__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader*/
/*   %cur_char.2 = getelementptr i8* %cur_char.0, i32 %tmp*/
begin
__ConvertTime__preheader_cur_char_2 = (__ConvertTime_2_cur_char_0_reg + (1 * __ConvertTime__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader*/
/*   %cur_char.2 = getelementptr i8* %cur_char.0, i32 %tmp*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_97))
begin
__ConvertTime__preheader_cur_char_2_reg <= __ConvertTime__preheader_cur_char_2;
if (reset == 1'b0 && ^(__ConvertTime__preheader_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_cur_char_2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
begin
__ConvertTime__preheader_136 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_99))
begin
__ConvertTime__preheader_136_reg <= __ConvertTime__preheader_136;
if (reset == 1'b0 && ^(__ConvertTime__preheader_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_136_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %137*/
/*   %138 = icmp ne i8* %cur_output.11, null*/
begin
__ConvertTime_137_138 = (__ConvertTime__preheader_cur_output_11_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %137*/
/*   %138 = icmp ne i8* %cur_output.11, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_137_100))
begin
__ConvertTime_137_138_reg <= __ConvertTime_137_138;
if (reset == 1'b0 && ^(__ConvertTime_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_137_138_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %137*/
/*   %139 = icmp eq i8* %cur_output.11, %1*/
begin
__ConvertTime_137_139 = (__ConvertTime__preheader_cur_output_11_reg == __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %137*/
/*   %139 = icmp eq i8* %cur_output.11, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_137_100))
begin
__ConvertTime_137_139_reg <= __ConvertTime_137_139;
if (reset == 1'b0 && ^(__ConvertTime_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_137_139_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %137*/
/*   %or.cond23 = and i1 %138, %139*/
begin
__ConvertTime_137_or_cond23 = (__ConvertTime_137_138 & __ConvertTime_137_139);
end
end
always @(posedge clk) begin
/* __ConvertTime: %137*/
/*   %or.cond23 = and i1 %138, %139*/
if ((cur_state == LEGUP_F___ConvertTime_BB_137_100))
begin
__ConvertTime_137_or_cond23_reg <= __ConvertTime_137_or_cond23;
if (reset == 1'b0 && ^(__ConvertTime_137_or_cond23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_137_or_cond23_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.preheader.backedge*/
/*   %cur_output.11.be = phi i8* [ null, %.critedge2 ], [ %141, %140 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge2_101) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_138_reg == 1'd0)))
begin
__ConvertTime__preheader_backedge_cur_output_11_be = 0;
end
/* __ConvertTime: %.preheader.backedge*/
/*   %cur_output.11.be = phi i8* [ null, %.critedge2 ], [ %141, %140 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_140_104) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__preheader_backedge_cur_output_11_be = __ConvertTime_140_141_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.preheader.backedge*/
/*   %cur_output.11.be = phi i8* [ null, %.critedge2 ], [ %141, %140 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge2_101) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_137_138_reg == 1'd0)))
begin
__ConvertTime__preheader_backedge_cur_output_11_be_reg <= __ConvertTime__preheader_backedge_cur_output_11_be;
if (reset == 1'b0 && ^(__ConvertTime__preheader_backedge_cur_output_11_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_backedge_cur_output_11_be_reg"); $finish; end
end
/* __ConvertTime: %.preheader.backedge*/
/*   %cur_output.11.be = phi i8* [ null, %.critedge2 ], [ %141, %140 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_140_104) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__preheader_backedge_cur_output_11_be_reg <= __ConvertTime__preheader_backedge_cur_output_11_be;
if (reset == 1'b0 && ^(__ConvertTime__preheader_backedge_cur_output_11_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__preheader_backedge_cur_output_11_be_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %140*/
/*   %141 = getelementptr inbounds i8* %cur_output.11, i32 1*/
begin
__ConvertTime_140_141 = (__ConvertTime__preheader_cur_output_11_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %140*/
/*   %141 = getelementptr inbounds i8* %cur_output.11, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
__ConvertTime_140_141_reg <= __ConvertTime_140_141;
if (reset == 1'b0 && ^(__ConvertTime_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_140_141_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %142*/
/*   %143 = icmp eq i8* %cur_output.0, null*/
begin
__ConvertTime_142_143 = (__ConvertTime_2_cur_output_0_reg == 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %142*/
/*   %143 = icmp eq i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_142_105))
begin
__ConvertTime_142_143_reg <= __ConvertTime_142_143;
if (reset == 1'b0 && ^(__ConvertTime_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_142_143_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %144*/
/*   %145 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertTime_144_145 = (__ConvertTime_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %144*/
/*   %145 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
__ConvertTime_144_145_reg <= __ConvertTime_144_145;
if (reset == 1'b0 && ^(__ConvertTime_144_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_144_145_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %146*/
/*   %cur_output.13 = phi i8* [ %145, %144 ], [ null, %142 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_142_105) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_142_143 == 1'd1)))
begin
__ConvertTime_146_cur_output_13 = 0;
end
/* __ConvertTime: %146*/
/*   %cur_output.13 = phi i8* [ %145, %144 ], [ null, %142 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_144_107) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_146_cur_output_13 = __ConvertTime_144_145_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %146*/
/*   %cur_output.13 = phi i8* [ %145, %144 ], [ null, %142 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_142_105) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_142_143 == 1'd1)))
begin
__ConvertTime_146_cur_output_13_reg <= __ConvertTime_146_cur_output_13;
if (reset == 1'b0 && ^(__ConvertTime_146_cur_output_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_146_cur_output_13_reg"); $finish; end
end
/* __ConvertTime: %146*/
/*   %cur_output.13 = phi i8* [ %145, %144 ], [ null, %142 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_144_107) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_146_cur_output_13_reg <= __ConvertTime_146_cur_output_13;
if (reset == 1'b0 && ^(__ConvertTime_146_cur_output_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_146_cur_output_13_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %146*/
/*   %147 = add nsw i32 %.03, 1*/
begin
__ConvertTime_146_147 = (__ConvertTime_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %146*/
/*   %147 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_146_108))
begin
__ConvertTime_146_147_reg <= __ConvertTime_146_147;
if (reset == 1'b0 && ^(__ConvertTime_146_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_146_147_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge.loopexit*/
/*   %.1 = add i32 %.03, %indvar*/
begin
__ConvertTime__critedge_loopexit__1 = (__ConvertTime_2__03_reg + __ConvertTime__preheader_indvar_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge.loopexit*/
/*   %.1 = add i32 %.03, %indvar*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109))
begin
__ConvertTime__critedge_loopexit__1_reg <= __ConvertTime__critedge_loopexit__1;
if (reset == 1'b0 && ^(__ConvertTime__critedge_loopexit__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_loopexit__1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_20_21;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_31_32;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_46_47;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_57_58;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_72_73;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_83_84;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_98_99;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_109_110;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_123_124;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_134_135;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2 = __ConvertTime_146_147;
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__critedge__2 = __ConvertTime__critedge_loopexit__1;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %.2 = phi i32 [ %147, %146 ], [ %135, %134 ], [ %124, %123 ], [ %99, %98 ], [ %110, %109 ], [ %73, %72 ], [ %84, %83 ], [ %47, %46 ], [ %58, %57 ], [ %21, %20 ], [ %32, %31 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge__2_reg <= __ConvertTime__critedge__2;
if (reset == 1'b0 && ^(__ConvertTime__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge__2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_7_8_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_33_34_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_59_60_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_85_86_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_111_cur_char_1_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__critedge_cur_char_3 = __ConvertTime__preheader_cur_char_2_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_char.3 = phi i8* [ %cur_char.0, %146 ], [ %cur_char.0, %134 ], [ %cur_char.1, %123 ], [ %86, %98 ], [ %cur_char.0, %109 ], [ %60, %72 ], [ %cur_char.0, %83 ], [ %34, %46 ], [ %cur_char.0, %57 ], [ %8, %20 ], [ %cur_char.0, %31 ], [ %cur_char.2, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_char_3_reg <= __ConvertTime__critedge_cur_char_3;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_char_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_char_3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_20_cur_output_1_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_31_cur_output_2_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_46_cur_output_3_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_57_cur_output_4_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_72_cur_output_5_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_83_cur_output_6_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_98_cur_output_7_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_109_cur_output_8_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_123_cur_output_9_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_134_cur_output_10_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime_146_cur_output_13_reg;
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime__critedge_cur_output_14 = __ConvertTime__preheader_cur_output_11_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_31_24) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_46_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_57_42) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_72_52) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_83_60) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_98_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_109_78) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_123_88) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_134_95) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_146_108) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
/* __ConvertTime: %.critedge*/
/*   %cur_output.14 = phi i8* [ %cur_output.13, %146 ], [ %cur_output.10, %134 ], [ %cur_output.9, %123 ], [ %cur_output.7, %98 ], [ %cur_output.8, %109 ], [ %cur_output.5, %72 ], [ %cur_output.6, %83 ], [ %cur_output.3, %46 ], [ %cur_output.4, %57 ], [ %cur_output.1, %20 ], [ %cur_output.2, %31 ], [ %cur_output.11, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB__critedge_loopexit_109) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime__critedge_cur_output_14_reg <= __ConvertTime__critedge_cur_output_14;
if (reset == 1'b0 && ^(__ConvertTime__critedge_cur_output_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_cur_output_14_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
begin
__ConvertTime__critedge_148 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_112))
begin
__ConvertTime__critedge_148_reg <= __ConvertTime__critedge_148;
if (reset == 1'b0 && ^(__ConvertTime__critedge_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_148_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %.critedge*/
/*   %149 = icmp eq i8 %148, 0*/
begin
__ConvertTime__critedge_149 = (__ConvertTime__critedge_148 == 8'd0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %.critedge*/
/*   %149 = icmp eq i8 %148, 0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_112))
begin
__ConvertTime__critedge_149_reg <= __ConvertTime__critedge_149;
if (reset == 1'b0 && ^(__ConvertTime__critedge_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime__critedge_149_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %150*/
/*   %151 = getelementptr inbounds i8* %cur_char.3, i32 1*/
begin
__ConvertTime_150_151 = (__ConvertTime__critedge_cur_char_3_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %150*/
/*   %151 = getelementptr inbounds i8* %cur_char.3, i32 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_150_113))
begin
__ConvertTime_150_151_reg <= __ConvertTime_150_151;
if (reset == 1'b0 && ^(__ConvertTime_150_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_150_151_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %152*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd1)))
begin
__ConvertTime_152__3 = __ConvertTime_2__03_reg;
end
/* __ConvertTime: %152*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ]*/
else /* if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd1))) */
begin
__ConvertTime_152__3 = __ConvertTime__critedge__2_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %152*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd1)))
begin
__ConvertTime_152__3_reg <= __ConvertTime_152__3;
if (reset == 1'b0 && ^(__ConvertTime_152__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152__3_reg"); $finish; end
end
/* __ConvertTime: %152*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd1)))
begin
__ConvertTime_152__3_reg <= __ConvertTime_152__3;
if (reset == 1'b0 && ^(__ConvertTime_152__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152__3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %152*/
/*   %cur_output.15 = phi i8* [ %cur_output.14, %.critedge ], [ %cur_output.0, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd1)))
begin
__ConvertTime_152_cur_output_15 = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %152*/
/*   %cur_output.15 = phi i8* [ %cur_output.14, %.critedge ], [ %cur_output.0, %2 ]*/
else /* if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd1))) */
begin
__ConvertTime_152_cur_output_15 = __ConvertTime__critedge_cur_output_14_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %152*/
/*   %cur_output.15 = phi i8* [ %cur_output.14, %.critedge ], [ %cur_output.0, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_2_4 == 1'd1)))
begin
__ConvertTime_152_cur_output_15_reg <= __ConvertTime_152_cur_output_15;
if (reset == 1'b0 && ^(__ConvertTime_152_cur_output_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152_cur_output_15_reg"); $finish; end
end
/* __ConvertTime: %152*/
/*   %cur_output.15 = phi i8* [ %cur_output.14, %.critedge ], [ %cur_output.0, %2 ]*/
if ((((cur_state == LEGUP_F___ConvertTime_BB__critedge_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime__critedge_149 == 1'd1)))
begin
__ConvertTime_152_cur_output_15_reg <= __ConvertTime_152_cur_output_15;
if (reset == 1'b0 && ^(__ConvertTime_152_cur_output_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152_cur_output_15_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %152*/
/*   %153 = icmp ne i8* %cur_output.15, null*/
begin
__ConvertTime_152_153 = (__ConvertTime_152_cur_output_15_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertTime: %152*/
/*   %153 = icmp ne i8* %cur_output.15, null*/
if ((cur_state == LEGUP_F___ConvertTime_BB_152_114))
begin
__ConvertTime_152_153_reg <= __ConvertTime_152_153;
if (reset == 1'b0 && ^(__ConvertTime_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152_153_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %152*/
/*   %154 = icmp eq i8* %cur_output.15, %1*/
begin
__ConvertTime_152_154 = (__ConvertTime_152_cur_output_15_reg == __ConvertTime_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertTime: %152*/
/*   %154 = icmp eq i8* %cur_output.15, %1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_152_114))
begin
__ConvertTime_152_154_reg <= __ConvertTime_152_154;
if (reset == 1'b0 && ^(__ConvertTime_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152_154_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %152*/
/*   %or.cond24 = and i1 %153, %154*/
begin
__ConvertTime_152_or_cond24 = (__ConvertTime_152_153 & __ConvertTime_152_154);
end
end
always @(posedge clk) begin
/* __ConvertTime: %152*/
/*   %or.cond24 = and i1 %153, %154*/
if ((cur_state == LEGUP_F___ConvertTime_BB_152_114))
begin
__ConvertTime_152_or_cond24_reg <= __ConvertTime_152_or_cond24;
if (reset == 1'b0 && ^(__ConvertTime_152_or_cond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_152_or_cond24_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %157*/
/*   %158 = add nsw i32 %.3, 1*/
begin
__ConvertTime_157_158 = (__ConvertTime_152__3_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertTime: %157*/
/*   %158 = add nsw i32 %.3, 1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_157_118))
begin
__ConvertTime_157_158_reg <= __ConvertTime_157_158;
if (reset == 1'b0 && ^(__ConvertTime_157_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_157_158_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %159*/
/*   %160 = getelementptr inbounds i8* %cur_output.15, i32 -1*/
begin
__ConvertTime_159_160 = (__ConvertTime_152_cur_output_15_reg + (1 * -32'd1));
end
end
always @(posedge clk) begin
/* __ConvertTime: %159*/
/*   %160 = getelementptr inbounds i8* %cur_output.15, i32 -1*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
__ConvertTime_159_160_reg <= __ConvertTime_159_160;
if (reset == 1'b0 && ^(__ConvertTime_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_159_160_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_15_12) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_15_16_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_25_19) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_25_26_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_41_30) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_41_42_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_51_37) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_51_52_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_67_48) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_67_68_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_77_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_77_78_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_93_66) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_93_94_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_103_73) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_103_104_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_118_84) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_118_119_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_129_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_129_130_reg;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else if (((cur_state == LEGUP_F___ConvertTime_BB_157_118) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0 = __ConvertTime_157_158;
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
else /* if (((cur_state == LEGUP_F___ConvertTime_BB_159_120) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertTime_161__0 = __ConvertTime_152__3_reg;
end
end
always @(posedge clk) begin
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_15_12) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_25_19) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_41_30) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_51_37) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_67_48) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_77_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_93_66) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_103_73) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_118_84) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_129_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_157_118) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
/* __ConvertTime: %161*/
/*   %.0 = phi i32 [ %130, %129 ], [ %119, %118 ], [ %94, %93 ], [ %104, %103 ], [ %68, %67 ], [ %78, %77 ], [ %42, %41 ], [ %52, %51 ], [ %16, %15 ], [ %26, %25 ], [ %158, %157 ], [ %.3, %159 ]*/
if (((cur_state == LEGUP_F___ConvertTime_BB_159_120) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertTime_161__0_reg <= __ConvertTime_161__0;
if (reset == 1'b0 && ^(__ConvertTime_161__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_161__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* __ConvertTime: %161*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_161_121))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_2))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %18*/
/*   store i8 73, i8* %19, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 35, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %44*/
/*   store i8 72, i8* %45, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 35, i8* %55, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %70*/
/*   store i8 77, i8* %71, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 35, i8* %81, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %96*/
/*   store i8 83, i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 35, i8* %107, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %121*/
/*   store i8 112, i8* %122, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %133, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_97))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertTime: %156*/
/*   store i8 0, i8* %cur_output.15, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_156_116))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_2))
begin
memory_controller_address_a = __ConvertTime_2_cur_char_0_reg;
end
/* __ConvertTime: %18*/
/*   store i8 73, i8* %19, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_address_a = __ConvertTime_18_19;
end
/* __ConvertTime: %28*/
/*   store i8 35, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_address_a = __ConvertTime_28_29;
end
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
memory_controller_address_a = __ConvertTime_33_34;
end
/* __ConvertTime: %44*/
/*   store i8 72, i8* %45, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_address_a = __ConvertTime_44_45;
end
/* __ConvertTime: %54*/
/*   store i8 35, i8* %55, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_address_a = __ConvertTime_54_55;
end
/* __ConvertTime: %70*/
/*   store i8 77, i8* %71, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_address_a = __ConvertTime_70_71;
end
/* __ConvertTime: %80*/
/*   store i8 35, i8* %81, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_address_a = __ConvertTime_80_81;
end
/* __ConvertTime: %96*/
/*   store i8 83, i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_address_a = __ConvertTime_96_97;
end
/* __ConvertTime: %106*/
/*   store i8 35, i8* %107, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_address_a = __ConvertTime_106_107;
end
/* __ConvertTime: %121*/
/*   store i8 112, i8* %122, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_address_a = __ConvertTime_121_122;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %133, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_address_a = __ConvertTime_132_133;
end
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_97))
begin
memory_controller_address_a = __ConvertTime__preheader_cur_char_2;
end
/* __ConvertTime: %156*/
/*   store i8 0, i8* %cur_output.15, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_156_116))
begin
memory_controller_address_a = __ConvertTime_152_cur_output_15_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertTime: %18*/
/*   store i8 73, i8* %19, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 35, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertTime: %44*/
/*   store i8 72, i8* %45, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 35, i8* %55, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %70*/
/*   store i8 77, i8* %71, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 35, i8* %81, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %96*/
/*   store i8 83, i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 35, i8* %107, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %121*/
/*   store i8 112, i8* %122, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %133, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_97))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertTime: %156*/
/*   store i8 0, i8* %cur_output.15, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_156_116))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* __ConvertTime: %18*/
/*   store i8 73, i8* %19, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_in_a = 8'd73;
end
/* __ConvertTime: %28*/
/*   store i8 35, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertTime: %44*/
/*   store i8 72, i8* %45, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_in_a = 8'd72;
end
/* __ConvertTime: %54*/
/*   store i8 35, i8* %55, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertTime: %70*/
/*   store i8 77, i8* %71, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_in_a = 8'd77;
end
/* __ConvertTime: %80*/
/*   store i8 35, i8* %81, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertTime: %96*/
/*   store i8 83, i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_in_a = 8'd83;
end
/* __ConvertTime: %106*/
/*   store i8 35, i8* %107, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertTime: %121*/
/*   store i8 112, i8* %122, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_in_a = 8'd112;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %133, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_in_a = 8'd37;
end
/* __ConvertTime: %156*/
/*   store i8 0, i8* %cur_output.15, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_156_116))
begin
memory_controller_in_a = 8'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* __ConvertTime: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_2_2))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %18*/
/*   store i8 73, i8* %19, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %28*/
/*   store i8 35, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %33*/
/*   %35 = load i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_33_25))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %44*/
/*   store i8 72, i8* %45, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %54*/
/*   store i8 35, i8* %55, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %70*/
/*   store i8 77, i8* %71, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %80*/
/*   store i8 35, i8* %81, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %96*/
/*   store i8 83, i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %106*/
/*   store i8 35, i8* %107, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %121*/
/*   store i8 112, i8* %122, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %133, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %.preheader*/
/*   %136 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__preheader_97))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertTime: %156*/
/*   store i8 0, i8* %cur_output.15, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_156_116))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %15*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %18*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %25*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 73, i8* %30, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_22))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %41*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %44*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %51*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 72, i8* %56, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_40))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %67*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %70*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %77*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 77, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_58))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %93*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %96*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 83, i8* %108, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_76))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %118*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %121*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %129*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %140*/
/*   store i8 %136, i8* %cur_output.11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %144*/
/*   store i8 %3, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_110))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertTime: %159*/
/*   store i8 0, i8* %160, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
memory_controller_address_b = __ConvertTime_7_8;
end
/* __ConvertTime: %15*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %18*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %25*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %28*/
/*   store i8 73, i8* %30, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_22))
begin
memory_controller_address_b = __ConvertTime_28_30_reg;
end
/* __ConvertTime: %41*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %44*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %51*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %54*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %54*/
/*   store i8 72, i8* %56, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_40))
begin
memory_controller_address_b = __ConvertTime_54_56_reg;
end
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
memory_controller_address_b = __ConvertTime_59_60;
end
/* __ConvertTime: %67*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %70*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %77*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %80*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %80*/
/*   store i8 77, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_58))
begin
memory_controller_address_b = __ConvertTime_80_82_reg;
end
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
memory_controller_address_b = __ConvertTime_85_86;
end
/* __ConvertTime: %93*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %96*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %106*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %106*/
/*   store i8 83, i8* %108, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_76))
begin
memory_controller_address_b = __ConvertTime_106_108_reg;
end
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
memory_controller_address_b = __ConvertTime_111_112;
end
/* __ConvertTime: %118*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %121*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %129*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %140*/
/*   store i8 %136, i8* %cur_output.11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
memory_controller_address_b = __ConvertTime__preheader_cur_output_11_reg;
end
/* __ConvertTime: %144*/
/*   store i8 %3, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
memory_controller_address_b = __ConvertTime_2_cur_output_0_reg;
end
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_110))
begin
memory_controller_address_b = __ConvertTime__critedge_cur_char_3_reg;
end
/* __ConvertTime: %159*/
/*   store i8 0, i8* %160, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
memory_controller_address_b = __ConvertTime_159_160;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %15*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %18*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %25*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %28*/
/*   store i8 73, i8* %30, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_22))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %41*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %44*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %51*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %54*/
/*   store i8 72, i8* %56, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_40))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %67*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %70*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %77*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %80*/
/*   store i8 77, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_58))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %93*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %96*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %106*/
/*   store i8 83, i8* %108, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_76))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %118*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %121*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %129*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %140*/
/*   store i8 %136, i8* %cur_output.11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %144*/
/*   store i8 %3, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_110))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertTime: %159*/
/*   store i8 0, i8* %160, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* __ConvertTime: %15*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %18*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %25*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %28*/
/*   store i8 73, i8* %30, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_22))
begin
memory_controller_in_b = 8'd73;
end
/* __ConvertTime: %41*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %44*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %51*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %54*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %54*/
/*   store i8 72, i8* %56, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_40))
begin
memory_controller_in_b = 8'd72;
end
/* __ConvertTime: %67*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %70*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %77*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %80*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %80*/
/*   store i8 77, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_58))
begin
memory_controller_in_b = 8'd77;
end
/* __ConvertTime: %93*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %96*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %106*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %106*/
/*   store i8 83, i8* %108, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_76))
begin
memory_controller_in_b = 8'd83;
end
/* __ConvertTime: %118*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %121*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %129*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertTime: %140*/
/*   store i8 %136, i8* %cur_output.11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
memory_controller_in_b = __ConvertTime__preheader_136_reg;
end
/* __ConvertTime: %144*/
/*   store i8 %3, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
memory_controller_in_b = __ConvertTime_2_3_reg;
end
/* __ConvertTime: %159*/
/*   store i8 0, i8* %160, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
memory_controller_in_b = 8'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* __ConvertTime: %7*/
/*   %9 = load i8* %8, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_7_7))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %15*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_15_11))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %18*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_18_14))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %25*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_25_18))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_21))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %28*/
/*   store i8 73, i8* %30, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_28_22))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %41*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_41_29))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %44*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_44_32))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %51*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_51_36))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %54*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_39))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %54*/
/*   store i8 72, i8* %56, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_54_40))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %59*/
/*   %61 = load i8* %60, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_59_43))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %67*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_67_47))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %70*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_70_50))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %77*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_77_54))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %80*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_57))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %80*/
/*   store i8 77, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_80_58))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %85*/
/*   %87 = load i8* %86, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_85_61))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %93*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_93_65))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %96*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_96_68))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_103_72))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %106*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_75))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %106*/
/*   store i8 83, i8* %108, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_106_76))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %111*/
/*   %113 = load i8* %112, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_111_79))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %118*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_118_83))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %121*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_121_86))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %129*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_129_90))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %132*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_132_93))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %140*/
/*   store i8 %136, i8* %cur_output.11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_140_103))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %144*/
/*   store i8 %3, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_144_106))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %.critedge*/
/*   %148 = load i8* %cur_char.3, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB__critedge_110))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertTime: %159*/
/*   store i8 0, i8* %160, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_159_119))
begin
memory_controller_size_b = 2'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* __ConvertTime: %161*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F___ConvertTime_BB_161_121))
begin
return_val <= __ConvertTime_161__0_reg;
if (reset == 1'b0 && ^(__ConvertTime_161__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  __ConvertTime_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_arg_NTTime;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_arg_buffer;
reg [31:0] __ConvertTime_arg_buf_size;
wire  __ConvertTime_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_memory_controller_address_a;
wire  __ConvertTime_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertTime_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertTime_memory_controller_out_a;
wire [1:0] __ConvertTime_memory_controller_size_a;
wire  __ConvertTime_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertTime_memory_controller_address_b;
wire  __ConvertTime_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertTime_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertTime_memory_controller_out_b;
wire [1:0] __ConvertTime_memory_controller_size_b;
reg  __ConvertTime_memory_controller_waitrequest;
wire  __ConvertTime_finish;
reg  __ConvertTime_finish_final;
wire [31:0] __ConvertTime_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


__ConvertTime __ConvertTime_inst (
	.memory_controller_enable_a (__ConvertTime_memory_controller_enable_a),
	.memory_controller_address_a (__ConvertTime_memory_controller_address_a),
	.memory_controller_write_enable_a (__ConvertTime_memory_controller_write_enable_a),
	.memory_controller_in_a (__ConvertTime_memory_controller_in_a),
	.memory_controller_size_a (__ConvertTime_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (__ConvertTime_memory_controller_enable_b),
	.memory_controller_address_b (__ConvertTime_memory_controller_address_b),
	.memory_controller_write_enable_b (__ConvertTime_memory_controller_write_enable_b),
	.memory_controller_in_b (__ConvertTime_memory_controller_in_b),
	.memory_controller_size_b (__ConvertTime_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__ConvertTime_start),
	.finish (__ConvertTime_finish),
	.return_val (__ConvertTime_return_val),
	.arg_NTTime (__ConvertTime_arg_NTTime),
	.arg_buffer (__ConvertTime_arg_buffer),
	.arg_buf_size (__ConvertTime_arg_buf_size)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (__ConvertTime_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
begin
main_0_1 = __ConvertTime_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertTime_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
__ConvertTime_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertTime_arg_NTTime <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_arg_NTTime"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertTime_arg_buffer <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_arg_buffer"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertTime_arg_buf_size <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertTime_arg_buf_size"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
begin
__ConvertTime_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
begin
__ConvertTime_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
__ConvertTime_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
__ConvertTime_finish_final = __ConvertTime_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = __ConvertTime_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = __ConvertTime_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertTime_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertTime_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = __ConvertTime_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = __ConvertTime_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertTime_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertTime_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = __ConvertTime_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = __ConvertTime_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = __ConvertTime_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = __ConvertTime_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertTime_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertTime_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = __ConvertTime_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = __ConvertTime_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertTime_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertTime_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = __ConvertTime_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertTime(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = __ConvertTime_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
