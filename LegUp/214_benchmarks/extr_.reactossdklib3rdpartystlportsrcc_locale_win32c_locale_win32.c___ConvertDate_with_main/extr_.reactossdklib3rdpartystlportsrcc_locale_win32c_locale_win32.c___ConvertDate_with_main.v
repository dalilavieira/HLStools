//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:58:50 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module __ConvertDate
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val,
	arg_NTDate,
	arg_buffer,
	arg_buf_size
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F___ConvertDate_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F___ConvertDate_BB_2_2 = 8'd2;
parameter [7:0] LEGUP_F___ConvertDate_BB_2_3 = 8'd3;
parameter [7:0] LEGUP_F___ConvertDate_BB_2_4 = 8'd4;
parameter [7:0] LEGUP_F___ConvertDate_BB_5_5 = 8'd5;
parameter [7:0] LEGUP_F___ConvertDate_BB_8_6 = 8'd6;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_preheader_7 = 8'd7;
parameter [7:0] LEGUP_F___ConvertDate_BB_10_8 = 8'd8;
parameter [7:0] LEGUP_F___ConvertDate_BB_10_9 = 8'd9;
parameter [7:0] LEGUP_F___ConvertDate_BB_10_10 = 8'd10;
parameter [7:0] LEGUP_F___ConvertDate_BB_14_11 = 8'd11;
parameter [7:0] LEGUP_F___ConvertDate_BB_17_12 = 8'd12;
parameter [7:0] LEGUP_F___ConvertDate_BB_17_13 = 8'd13;
parameter [7:0] LEGUP_F___ConvertDate_BB_19_14 = 8'd14;
parameter [7:0] LEGUP_F___ConvertDate_BB_19_15 = 8'd15;
parameter [7:0] LEGUP_F___ConvertDate_BB_19_16 = 8'd16;
parameter [7:0] LEGUP_F___ConvertDate_BB_23_17 = 8'd17;
parameter [7:0] LEGUP_F___ConvertDate_BB_23_18 = 8'd18;
parameter [7:0] LEGUP_F___ConvertDate_BB_23_19 = 8'd19;
parameter [7:0] LEGUP_F___ConvertDate_BB_27_20 = 8'd20;
parameter [7:0] LEGUP_F___ConvertDate_BB_28_21 = 8'd21;
parameter [7:0] LEGUP_F___ConvertDate_BB_28_22 = 8'd22;
parameter [7:0] LEGUP_F___ConvertDate_BB_30_23 = 8'd23;
parameter [7:0] LEGUP_F___ConvertDate_BB_32_24 = 8'd24;
parameter [7:0] LEGUP_F___ConvertDate_BB_33_25 = 8'd25;
parameter [7:0] LEGUP_F___ConvertDate_BB_33_26 = 8'd26;
parameter [7:0] LEGUP_F___ConvertDate_BB_35_27 = 8'd27;
parameter [7:0] LEGUP_F___ConvertDate_BB_37_28 = 8'd28;
parameter [7:0] LEGUP_F___ConvertDate_BB_38_29 = 8'd29;
parameter [7:0] LEGUP_F___ConvertDate_BB_38_30 = 8'd30;
parameter [7:0] LEGUP_F___ConvertDate_BB_40_31 = 8'd31;
parameter [7:0] LEGUP_F___ConvertDate_BB_42_32 = 8'd32;
parameter [7:0] LEGUP_F___ConvertDate_BB_45_33 = 8'd33;
parameter [7:0] LEGUP_F___ConvertDate_BB_45_34 = 8'd34;
parameter [7:0] LEGUP_F___ConvertDate_BB_47_35 = 8'd35;
parameter [7:0] LEGUP_F___ConvertDate_BB_48_36 = 8'd36;
parameter [7:0] LEGUP_F___ConvertDate_BB_48_37 = 8'd37;
parameter [7:0] LEGUP_F___ConvertDate_BB_48_38 = 8'd38;
parameter [7:0] LEGUP_F___ConvertDate_BB_51_39 = 8'd39;
parameter [7:0] LEGUP_F___ConvertDate_BB_53_40 = 8'd40;
parameter [7:0] LEGUP_F___ConvertDate_BB_53_41 = 8'd41;
parameter [7:0] LEGUP_F___ConvertDate_BB_53_42 = 8'd42;
parameter [7:0] LEGUP_F___ConvertDate_BB_57_43 = 8'd43;
parameter [7:0] LEGUP_F___ConvertDate_BB_60_44 = 8'd44;
parameter [7:0] LEGUP_F___ConvertDate_BB_60_45 = 8'd45;
parameter [7:0] LEGUP_F___ConvertDate_BB_62_46 = 8'd46;
parameter [7:0] LEGUP_F___ConvertDate_BB_62_47 = 8'd47;
parameter [7:0] LEGUP_F___ConvertDate_BB_62_48 = 8'd48;
parameter [7:0] LEGUP_F___ConvertDate_BB_66_49 = 8'd49;
parameter [7:0] LEGUP_F___ConvertDate_BB_66_50 = 8'd50;
parameter [7:0] LEGUP_F___ConvertDate_BB_66_51 = 8'd51;
parameter [7:0] LEGUP_F___ConvertDate_BB_70_52 = 8'd52;
parameter [7:0] LEGUP_F___ConvertDate_BB_71_53 = 8'd53;
parameter [7:0] LEGUP_F___ConvertDate_BB_71_54 = 8'd54;
parameter [7:0] LEGUP_F___ConvertDate_BB_73_55 = 8'd55;
parameter [7:0] LEGUP_F___ConvertDate_BB_75_56 = 8'd56;
parameter [7:0] LEGUP_F___ConvertDate_BB_76_57 = 8'd57;
parameter [7:0] LEGUP_F___ConvertDate_BB_76_58 = 8'd58;
parameter [7:0] LEGUP_F___ConvertDate_BB_78_59 = 8'd59;
parameter [7:0] LEGUP_F___ConvertDate_BB_80_60 = 8'd60;
parameter [7:0] LEGUP_F___ConvertDate_BB_81_61 = 8'd61;
parameter [7:0] LEGUP_F___ConvertDate_BB_81_62 = 8'd62;
parameter [7:0] LEGUP_F___ConvertDate_BB_83_63 = 8'd63;
parameter [7:0] LEGUP_F___ConvertDate_BB_85_64 = 8'd64;
parameter [7:0] LEGUP_F___ConvertDate_BB_88_65 = 8'd65;
parameter [7:0] LEGUP_F___ConvertDate_BB_88_66 = 8'd66;
parameter [7:0] LEGUP_F___ConvertDate_BB_90_67 = 8'd67;
parameter [7:0] LEGUP_F___ConvertDate_BB_91_68 = 8'd68;
parameter [7:0] LEGUP_F___ConvertDate_BB_91_69 = 8'd69;
parameter [7:0] LEGUP_F___ConvertDate_BB_91_70 = 8'd70;
parameter [7:0] LEGUP_F___ConvertDate_BB_94_71 = 8'd71;
parameter [7:0] LEGUP_F___ConvertDate_BB_96_72 = 8'd72;
parameter [7:0] LEGUP_F___ConvertDate_BB_96_73 = 8'd73;
parameter [7:0] LEGUP_F___ConvertDate_BB_96_74 = 8'd74;
parameter [7:0] LEGUP_F___ConvertDate_BB_100_75 = 8'd75;
parameter [7:0] LEGUP_F___ConvertDate_BB_103_76 = 8'd76;
parameter [7:0] LEGUP_F___ConvertDate_BB_103_77 = 8'd77;
parameter [7:0] LEGUP_F___ConvertDate_BB_105_78 = 8'd78;
parameter [7:0] LEGUP_F___ConvertDate_BB_105_79 = 8'd79;
parameter [7:0] LEGUP_F___ConvertDate_BB_105_80 = 8'd80;
parameter [7:0] LEGUP_F___ConvertDate_BB_109_81 = 8'd81;
parameter [7:0] LEGUP_F___ConvertDate_BB_109_82 = 8'd82;
parameter [7:0] LEGUP_F___ConvertDate_BB_109_83 = 8'd83;
parameter [7:0] LEGUP_F___ConvertDate_BB_113_84 = 8'd84;
parameter [7:0] LEGUP_F___ConvertDate_BB_114_85 = 8'd85;
parameter [7:0] LEGUP_F___ConvertDate_BB_114_86 = 8'd86;
parameter [7:0] LEGUP_F___ConvertDate_BB_116_87 = 8'd87;
parameter [7:0] LEGUP_F___ConvertDate_BB_118_88 = 8'd88;
parameter [7:0] LEGUP_F___ConvertDate_BB_119_89 = 8'd89;
parameter [7:0] LEGUP_F___ConvertDate_BB_119_90 = 8'd90;
parameter [7:0] LEGUP_F___ConvertDate_BB_121_91 = 8'd91;
parameter [7:0] LEGUP_F___ConvertDate_BB_123_92 = 8'd92;
parameter [7:0] LEGUP_F___ConvertDate_BB_126_93 = 8'd93;
parameter [7:0] LEGUP_F___ConvertDate_BB_126_94 = 8'd94;
parameter [7:0] LEGUP_F___ConvertDate_BB_128_95 = 8'd95;
parameter [7:0] LEGUP_F___ConvertDate_BB_129_96 = 8'd96;
parameter [7:0] LEGUP_F___ConvertDate_BB_129_97 = 8'd97;
parameter [7:0] LEGUP_F___ConvertDate_BB_129_98 = 8'd98;
parameter [7:0] LEGUP_F___ConvertDate_BB_132_99 = 8'd99;
parameter [7:0] LEGUP_F___ConvertDate_BB_134_100 = 8'd100;
parameter [7:0] LEGUP_F___ConvertDate_BB_137_101 = 8'd101;
parameter [7:0] LEGUP_F___ConvertDate_BB_137_102 = 8'd102;
parameter [7:0] LEGUP_F___ConvertDate_BB_139_103 = 8'd103;
parameter [7:0] LEGUP_F___ConvertDate_BB_140_104 = 8'd104;
parameter [7:0] LEGUP_F___ConvertDate_BB_140_105 = 8'd105;
parameter [7:0] LEGUP_F___ConvertDate_BB_142_106 = 8'd106;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_107 = 8'd107;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_108 = 8'd108;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_109 = 8'd109;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_110 = 8'd110;
parameter [7:0] LEGUP_F___ConvertDate_BB_145_111 = 8'd111;
parameter [7:0] LEGUP_F___ConvertDate_BB__critedge2_112 = 8'd112;
parameter [7:0] LEGUP_F___ConvertDate_BB__preheader_backedge_113 = 8'd113;
parameter [7:0] LEGUP_F___ConvertDate_BB_149_114 = 8'd114;
parameter [7:0] LEGUP_F___ConvertDate_BB_149_115 = 8'd115;
parameter [7:0] LEGUP_F___ConvertDate_BB_151_116 = 8'd116;
parameter [7:0] LEGUP_F___ConvertDate_BB_152_117 = 8'd117;
parameter [7:0] LEGUP_F___ConvertDate_BB_152_118 = 8'd118;
parameter [7:0] LEGUP_F___ConvertDate_BB_152_119 = 8'd119;
parameter [7:0] LEGUP_F___ConvertDate_BB_152_120 = 8'd120;
parameter [7:0] LEGUP_F___ConvertDate_BB_155_121 = 8'd121;
parameter [7:0] LEGUP_F___ConvertDate_BB__critedge_loopexit_122 = 8'd122;
parameter [7:0] LEGUP_F___ConvertDate_BB__critedge_123 = 8'd123;
parameter [7:0] LEGUP_F___ConvertDate_BB__critedge_124 = 8'd124;
parameter [7:0] LEGUP_F___ConvertDate_BB__critedge_125 = 8'd125;
parameter [7:0] LEGUP_F___ConvertDate_BB_159_126 = 8'd126;
parameter [7:0] LEGUP_F___ConvertDate_BB_161_127 = 8'd127;
parameter [7:0] LEGUP_F___ConvertDate_BB_164_128 = 8'd128;
parameter [7:0] LEGUP_F___ConvertDate_BB_165_129 = 8'd129;
parameter [7:0] LEGUP_F___ConvertDate_BB_165_130 = 8'd130;
parameter [7:0] LEGUP_F___ConvertDate_BB_166_131 = 8'd131;
parameter [7:0] LEGUP_F___ConvertDate_BB_168_132 = 8'd132;
parameter [7:0] LEGUP_F___ConvertDate_BB_168_133 = 8'd133;
parameter [7:0] LEGUP_F___ConvertDate_BB_170_134 = 8'd134;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_NTDate;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_buffer;
input [31:0] arg_buf_size;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_0_1_reg;
reg [31:0] __ConvertDate_2__03;
reg [31:0] __ConvertDate_2__03_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_2_cur_char_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_2_cur_char_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_2_cur_output_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_2_cur_output_0_reg;
reg [7:0] __ConvertDate_2_3;
reg [7:0] __ConvertDate_2_3_reg;
reg  __ConvertDate_2_4;
reg  __ConvertDate_2_4_reg;
reg  __ConvertDate_5_6;
reg  __ConvertDate_5_6_reg;
reg  __ConvertDate_5_7;
reg  __ConvertDate_5_7_reg;
reg  __ConvertDate_5_or_cond;
reg  __ConvertDate_5_or_cond_reg;
reg [31:0] __ConvertDate_8_9;
reg [31:0] __ConvertDate_8_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_10_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_10_11_reg;
reg [7:0] __ConvertDate_10_12;
reg [7:0] __ConvertDate_10_12_reg;
reg  __ConvertDate_10_13;
reg  __ConvertDate_10_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_14_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_14_15_reg;
reg  __ConvertDate_14_16;
reg  __ConvertDate_14_16_reg;
reg  __ConvertDate_14_or_cond5;
reg  __ConvertDate_14_or_cond5_reg;
reg [31:0] __ConvertDate_17_18;
reg [31:0] __ConvertDate_17_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_19_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_19_20_reg;
reg [7:0] __ConvertDate_19_21;
reg [7:0] __ConvertDate_19_21_reg;
reg  __ConvertDate_19_22;
reg  __ConvertDate_19_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_23_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_23_24_reg;
reg [7:0] __ConvertDate_23_25;
reg [7:0] __ConvertDate_23_25_reg;
reg  __ConvertDate_23_26;
reg  __ConvertDate_23_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_28_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_28_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_30_cur_output_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_30_cur_output_1_reg;
reg [31:0] __ConvertDate_30_31;
reg [31:0] __ConvertDate_30_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_33_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_35_cur_output_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_35_cur_output_2_reg;
reg [31:0] __ConvertDate_35_36;
reg [31:0] __ConvertDate_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_38_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_38_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_40_cur_output_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_40_cur_output_3_reg;
reg [31:0] __ConvertDate_40_41;
reg [31:0] __ConvertDate_40_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_42_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_42_43_reg;
reg  __ConvertDate_42_44;
reg  __ConvertDate_42_44_reg;
reg  __ConvertDate_42_or_cond7;
reg  __ConvertDate_42_or_cond7_reg;
reg [31:0] __ConvertDate_45_46;
reg [31:0] __ConvertDate_45_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_48_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_48_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_48_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_48_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_51_cur_output_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_51_cur_output_4_reg;
reg [31:0] __ConvertDate_51_52;
reg [31:0] __ConvertDate_51_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_53_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_53_54_reg;
reg [7:0] __ConvertDate_53_55;
reg [7:0] __ConvertDate_53_55_reg;
reg  __ConvertDate_53_56;
reg  __ConvertDate_53_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_57_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_57_58_reg;
reg  __ConvertDate_57_59;
reg  __ConvertDate_57_59_reg;
reg  __ConvertDate_57_or_cond9;
reg  __ConvertDate_57_or_cond9_reg;
reg [31:0] __ConvertDate_60_61;
reg [31:0] __ConvertDate_60_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_62_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_62_63_reg;
reg [7:0] __ConvertDate_62_64;
reg [7:0] __ConvertDate_62_64_reg;
reg  __ConvertDate_62_65;
reg  __ConvertDate_62_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_66_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_66_67_reg;
reg [7:0] __ConvertDate_66_68;
reg [7:0] __ConvertDate_66_68_reg;
reg  __ConvertDate_66_69;
reg  __ConvertDate_66_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_71_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_71_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_73_cur_output_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_73_cur_output_5_reg;
reg [31:0] __ConvertDate_73_74;
reg [31:0] __ConvertDate_73_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_76_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_76_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_78_cur_output_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_78_cur_output_6_reg;
reg [31:0] __ConvertDate_78_79;
reg [31:0] __ConvertDate_78_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_81_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_81_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_83_cur_output_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_83_cur_output_7_reg;
reg [31:0] __ConvertDate_83_84;
reg [31:0] __ConvertDate_83_84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_85_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_85_86_reg;
reg  __ConvertDate_85_87;
reg  __ConvertDate_85_87_reg;
reg  __ConvertDate_85_or_cond11;
reg  __ConvertDate_85_or_cond11_reg;
reg [31:0] __ConvertDate_88_89;
reg [31:0] __ConvertDate_88_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_91_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_91_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_91_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_91_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_94_cur_output_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_94_cur_output_8_reg;
reg [31:0] __ConvertDate_94_95;
reg [31:0] __ConvertDate_94_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_96_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_96_97_reg;
reg [7:0] __ConvertDate_96_98;
reg [7:0] __ConvertDate_96_98_reg;
reg  __ConvertDate_96_99;
reg  __ConvertDate_96_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_100_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_100_101_reg;
reg  __ConvertDate_100_102;
reg  __ConvertDate_100_102_reg;
reg  __ConvertDate_100_or_cond13;
reg  __ConvertDate_100_or_cond13_reg;
reg [31:0] __ConvertDate_103_104;
reg [31:0] __ConvertDate_103_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_105_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_105_106_reg;
reg [7:0] __ConvertDate_105_107;
reg [7:0] __ConvertDate_105_107_reg;
reg  __ConvertDate_105_108;
reg  __ConvertDate_105_108_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_109_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_109_110_reg;
reg [7:0] __ConvertDate_109_111;
reg [7:0] __ConvertDate_109_111_reg;
reg  __ConvertDate_109_112;
reg  __ConvertDate_109_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_114_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_114_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_116_cur_output_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_116_cur_output_9_reg;
reg [31:0] __ConvertDate_116_117;
reg [31:0] __ConvertDate_116_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_119_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_119_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_121_cur_output_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_121_cur_output_10_reg;
reg [31:0] __ConvertDate_121_122;
reg [31:0] __ConvertDate_121_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_123_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_123_124_reg;
reg  __ConvertDate_123_125;
reg  __ConvertDate_123_125_reg;
reg  __ConvertDate_123_or_cond15;
reg  __ConvertDate_123_or_cond15_reg;
reg [31:0] __ConvertDate_126_127;
reg [31:0] __ConvertDate_126_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_129_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_129_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_129_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_129_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_132_cur_output_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_132_cur_output_11_reg;
reg [31:0] __ConvertDate_132_133;
reg [31:0] __ConvertDate_132_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_134_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_134_135_reg;
reg  __ConvertDate_134_136;
reg  __ConvertDate_134_136_reg;
reg  __ConvertDate_134_or_cond17;
reg  __ConvertDate_134_or_cond17_reg;
reg [31:0] __ConvertDate_137_138;
reg [31:0] __ConvertDate_137_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_140_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_140_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_142_cur_output_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_142_cur_output_12_reg;
reg [31:0] __ConvertDate_142_143;
reg [31:0] __ConvertDate_142_143_reg;
reg [31:0] __ConvertDate__preheader_indvar;
reg [31:0] __ConvertDate__preheader_indvar_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_cur_output_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_cur_output_13_reg;
reg [31:0] __ConvertDate__preheader_tmp;
reg [31:0] __ConvertDate__preheader_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_cur_char_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_cur_char_1_reg;
reg [7:0] __ConvertDate__preheader_144;
reg [7:0] __ConvertDate__preheader_144_reg;
reg  __ConvertDate_145_146;
reg  __ConvertDate_145_146_reg;
reg  __ConvertDate_145_147;
reg  __ConvertDate_145_147_reg;
reg  __ConvertDate_145_or_cond18;
reg  __ConvertDate_145_or_cond18_reg;
reg  __ConvertDate__critedge2_148;
reg  __ConvertDate__critedge2_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_backedge_cur_output_13_be;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__preheader_backedge_cur_output_13_be_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_149_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_149_150_reg;
reg [7:0] __ConvertDate_152_153;
reg [7:0] __ConvertDate_152_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_152_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_152_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_155_cur_output_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_155_cur_output_15_reg;
reg [31:0] __ConvertDate_155_156;
reg [31:0] __ConvertDate_155_156_reg;
reg [31:0] __ConvertDate__critedge_loopexit__1;
reg [31:0] __ConvertDate__critedge_loopexit__1_reg;
reg [31:0] __ConvertDate__critedge__2;
reg [31:0] __ConvertDate__critedge__2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__critedge_cur_char_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__critedge_cur_char_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__critedge_cur_output_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate__critedge_cur_output_16_reg;
reg [7:0] __ConvertDate__critedge_157;
reg [7:0] __ConvertDate__critedge_157_reg;
reg  __ConvertDate__critedge_158;
reg  __ConvertDate__critedge_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_159_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_159_160_reg;
reg [31:0] __ConvertDate_161__3;
reg [31:0] __ConvertDate_161__3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_161_cur_output_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_161_cur_output_17_reg;
reg  __ConvertDate_161_162;
reg  __ConvertDate_161_162_reg;
reg  __ConvertDate_161_163;
reg  __ConvertDate_161_163_reg;
reg  __ConvertDate_161_or_cond19;
reg  __ConvertDate_161_or_cond19_reg;
reg [31:0] __ConvertDate_166_167;
reg [31:0] __ConvertDate_166_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_168_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_168_169_reg;
reg [31:0] __ConvertDate_170__0;
reg [31:0] __ConvertDate_170__0_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_2_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_2_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_2_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_3;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_2_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_4;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_161_127;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_161_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_161_127;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_161_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_8_6;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_8_6;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_8_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 == 32'd100)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_8;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 == 32'd77)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_40;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 == 32'd121)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_72;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 == 32'd37)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_134_100;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_134_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 == 32'd39)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_preheader_7;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((((cur_state == LEGUP_F___ConvertDate_BB_8_6) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_8_9 != 32'd100)) & (__ConvertDate_8_9 != 32'd77)) & (__ConvertDate_8_9 != 32'd121)) & (__ConvertDate_8_9 != 32'd37)) & (__ConvertDate_8_9 != 32'd39)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_151_116;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_151_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_preheader_7;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_preheader_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_107;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_10_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_8;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_10_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_9;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_10_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_9;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_10_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_10;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_10_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_10_10;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_10_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_10_10) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_10_13 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_14_11;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_14_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_10_10) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_10_13 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_42_32;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_42_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_14_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_14_11;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_14_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_14_11) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_14_or_cond5 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_17_12;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_17_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_14_11) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_14_or_cond5 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_14;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_17_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_17_12;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_17_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_17_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_17_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_17_13;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_17_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_17_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_19_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_14;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_19_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_15;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_19_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_15;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_19_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_16;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_19_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_19_16;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_19_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_19_16) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_19_22 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_17;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_19_16) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_19_22 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_37_28;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_37_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_23_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_17;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_23_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_18;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_23_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_18;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_23_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_19;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_23_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_23_19;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_23_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_23_19) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_23_26 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_27_20;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_27_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_23_19) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_23_26 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_27_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_27_20;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_27_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_28_21;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_30_23;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_30_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_28_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_28_21;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_28_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_28_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_28_22;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_28_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_28_22;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_28_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_28_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_30_23;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_30_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_30_23;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_30_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_32_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_32_24;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_32_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_32_24) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_33_25;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_33_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_32_24) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_35_27;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_35_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_33_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_33_25;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_33_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_33_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_33_26;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_33_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_33_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_33_26;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_33_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_33_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_35_27;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_35_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_35_27;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_35_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_37_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_37_28;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_37_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_37_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_38_29;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_38_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_37_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_40_31;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_40_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_38_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_38_29;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_38_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_38_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_38_30;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_38_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_38_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_38_30;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_38_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_38_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_40_31;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_40_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_40_31;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_40_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_42_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_42_32;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_42_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_42_32) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_42_or_cond7 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_45_33;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_45_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_42_32) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_42_or_cond7 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_47_35;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_47_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_45_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_45_33;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_45_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_45_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_45_34;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_45_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_45_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_45_34;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_45_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_45_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_47_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_47_35;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_47_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_47_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_36;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_47_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_51_39;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_51_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_36;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_37;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_37;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_38;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_48_38;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_48_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_48_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_51_39;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_51_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_51_39;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_51_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_53_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_40;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_53_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_41;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_53_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_41;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_53_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_42;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_53_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_53_42;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_53_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_53_42) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_53_56 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_57_43;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_57_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_53_42) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_53_56 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_85_64;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_85_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_57_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_57_43;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_57_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_57_43) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_57_or_cond9 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_60_44;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_60_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_57_43) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_57_or_cond9 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_46;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_60_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_60_44;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_60_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_60_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_60_45;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_60_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_60_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_60_45;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_60_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_60_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_62_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_46;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_62_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_47;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_62_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_47;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_62_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_48;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_62_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_62_48;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_62_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_62_48) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_62_65 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_49;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_62_48) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_62_65 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_80_60;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_80_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_66_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_49;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_66_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_50;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_66_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_50;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_66_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_51;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_66_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_66_51;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_66_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_66_51) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_66_69 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_70_52;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_70_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_66_51) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_66_69 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_75_56;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_75_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_70_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_70_52;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_70_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_70_52) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_71_53;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_71_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_70_52) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_73_55;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_73_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_71_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_71_53;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_71_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_71_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_71_54;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_71_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_71_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_71_54;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_71_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_71_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_73_55;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_73_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_73_55;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_73_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_75_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_75_56;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_75_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_75_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_76_57;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_76_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_75_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_78_59;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_78_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_76_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_76_57;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_76_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_76_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_76_58;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_76_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_76_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_76_58;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_76_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_76_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_78_59;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_78_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_78_59;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_78_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_80_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_80_60;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_80_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_80_60) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_81_61;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_81_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_80_60) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_83_63;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_83_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_81_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_81_61;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_81_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_81_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_81_62;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_81_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_81_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_81_62;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_81_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_81_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_83_63;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_83_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_83_63;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_83_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_85_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_85_64;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_85_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_85_64) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_85_or_cond11 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_88_65;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_88_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_85_64) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_85_or_cond11 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_90_67;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_90_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_88_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_88_65;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_88_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_88_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_88_66;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_88_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_88_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_88_66;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_88_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_88_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_90_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_90_67;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_90_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_90_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_68;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_90_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_94_71;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_94_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_68;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_69;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_69;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_70;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_91_70;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_91_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_91_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_94_71;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_94_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_94_71;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_94_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_96_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_72;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_96_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_73;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_96_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_73;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_96_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_74;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_96_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_96_74;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_96_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_96_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_96_99 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_100_75;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_100_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_96_74) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_96_99 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_123_92;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_123_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_100_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_100_75;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_100_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_100_75) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_100_or_cond13 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_103_76;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_103_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_100_75) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_100_or_cond13 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_78;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_103_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_103_76;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_103_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_103_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_103_77;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_103_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_103_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_103_77;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_103_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_103_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_105_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_78;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_105_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_79;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_105_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_79;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_105_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_80;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_105_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_105_80;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_105_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_105_80) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_105_108 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_81;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_105_80) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_105_108 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_118_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_118_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_109_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_81;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_109_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_82;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_109_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_82;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_109_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_83;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_109_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_109_83;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_109_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_109_83) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_109_112 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_113_84;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_113_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_109_83) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_109_112 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_118_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_118_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_113_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_113_84;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_113_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_113_84) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_114_85;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_114_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_113_84) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_116_87;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_116_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_114_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_114_85;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_114_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_114_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_114_86;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_114_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_114_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_114_86;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_114_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_114_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_116_87;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_116_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_116_87;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_116_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_118_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_118_88;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_118_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_118_88) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_119_89;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_119_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_118_88) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_121_91;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_121_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_119_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_119_89;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_119_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_119_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_119_90;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_119_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_119_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_119_90;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_119_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_119_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_121_91;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_121_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_121_91;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_121_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_123_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_123_92;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_123_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_123_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_123_or_cond15 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_126_93;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_126_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_123_92) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_123_or_cond15 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_128_95;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_128_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_126_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_126_93;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_126_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_126_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_126_94;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_126_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_126_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_126_94;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_126_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_126_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_128_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_128_95;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_128_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_128_95) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_96;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_128_95) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_132_99;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_132_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_96;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_97;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_97;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_98;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_129_98;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_129_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_129_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_132_99;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_132_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_132_99;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_132_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_134_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_134_100;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_134_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_134_100) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_134_or_cond17 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_137_101;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_137_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_134_100) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_134_or_cond17 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_139_103;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_139_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_137_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_137_101;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_137_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_137_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_137_102;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_137_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_137_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_137_102;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_137_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_137_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_139_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_139_103;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_139_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_139_103) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_140_104;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_140_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_139_103) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_140_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_140_104;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_140_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_140_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_140_105;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_140_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_140_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_140_105;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_140_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_140_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_142_106;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_142_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_107;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_108;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_108;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_109;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_110;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__preheader_110) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__preheader_144 == 8'd39)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_loopexit_122;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_loopexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__preheader_110) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__preheader_144 == 8'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_loopexit_122;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_loopexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((cur_state == LEGUP_F___ConvertDate_BB__preheader_110) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__preheader_144 != 8'd39)) & (__ConvertDate__preheader_144 != 8'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_145_111;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_145_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_145_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_145_111;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_145_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_145_111) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_145_or_cond18 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_loopexit_122;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_loopexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_145_111) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_145_or_cond18 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge2_112;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge2_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge2_112;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge2_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge2_148 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_backedge_113;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_backedge_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge2_148 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_149_114;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_149_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_backedge_113;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_backedge_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_107;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_149_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_149_114;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_149_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_149_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_149_115;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_149_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_149_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_149_115;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_149_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_149_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__preheader_backedge_113;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__preheader_backedge_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_151_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_151_116;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_151_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_151_116) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_151_116) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_155_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_155_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_117;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_118;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_118;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_119;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_119;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_120;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_152_120;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_152_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_152_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_155_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_155_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_155_121;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_155_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_loopexit_122;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_loopexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_123;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_124;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_124;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_125;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB__critedge_125;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB__critedge_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_161_127;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_161_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_159_126;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_159_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_159_126;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_159_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_2_2;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_2_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_161_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_161_127;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_161_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_161_127) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_161_or_cond19 == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_168_132;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_168_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_161_127) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_161_or_cond19 == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_164_128;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_164_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_164_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_164_128;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_164_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_164_128) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_161_162_reg == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_165_129;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_165_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F___ConvertDate_BB_164_128) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_161_162_reg == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_166_131;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_166_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_165_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_165_129;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_165_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_165_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_165_130;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_165_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_165_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_165_130;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_165_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_165_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_166_131;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_166_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_166_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_166_131;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_166_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_166_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_168_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_168_132;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_168_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_168_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_168_133;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_168_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_168_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_168_133;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_168_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_168_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_170_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F___ConvertDate_BB_170_134;
if (reset == 1'b0 && ^(LEGUP_F___ConvertDate_BB_170_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F___ConvertDate_BB_170_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %0*/
/*   %1 = getelementptr inbounds i8* %buffer, i32 %buf_size*/
begin
__ConvertDate_0_1 = (arg_buffer + (1 * arg_buf_size));
end
end
always @(posedge clk) begin
/* __ConvertDate: %0*/
/*   %1 = getelementptr inbounds i8* %buffer, i32 %buf_size*/
if ((cur_state == LEGUP_F___ConvertDate_BB_0_1))
begin
__ConvertDate_0_1_reg <= __ConvertDate_0_1;
if (reset == 1'b0 && ^(__ConvertDate_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_0_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2__03 = 32'd0;
end
/* __ConvertDate: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %159 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_2__03 = __ConvertDate__critedge__2_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2__03_reg <= __ConvertDate_2__03;
if (reset == 1'b0 && ^(__ConvertDate_2__03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2__03_reg"); $finish; end
end
/* __ConvertDate: %2*/
/*   %.03 = phi i32 [ 0, %0 ], [ %.2, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2__03_reg <= __ConvertDate_2__03;
if (reset == 1'b0 && ^(__ConvertDate_2__03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2__03_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %2*/
/*   %cur_char.0 = phi i8* [ %NTDate, %0 ], [ %160, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_char_0 = arg_NTDate;
end
/* __ConvertDate: %2*/
/*   %cur_char.0 = phi i8* [ %NTDate, %0 ], [ %160, %159 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_2_cur_char_0 = __ConvertDate_159_160;
end
end
always @(posedge clk) begin
/* __ConvertDate: %2*/
/*   %cur_char.0 = phi i8* [ %NTDate, %0 ], [ %160, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_char_0_reg <= __ConvertDate_2_cur_char_0;
if (reset == 1'b0 && ^(__ConvertDate_2_cur_char_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_cur_char_0_reg"); $finish; end
end
/* __ConvertDate: %2*/
/*   %cur_char.0 = phi i8* [ %NTDate, %0 ], [ %160, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_char_0_reg <= __ConvertDate_2_cur_char_0;
if (reset == 1'b0 && ^(__ConvertDate_2_cur_char_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_cur_char_0_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.16, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_output_0 = arg_buffer;
end
/* __ConvertDate: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.16, %159 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_2_cur_output_0 = __ConvertDate__critedge_cur_output_16_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.16, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_output_0_reg <= __ConvertDate_2_cur_output_0;
if (reset == 1'b0 && ^(__ConvertDate_2_cur_output_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_cur_output_0_reg"); $finish; end
end
/* __ConvertDate: %2*/
/*   %cur_output.0 = phi i8* [ %buffer, %0 ], [ %cur_output.16, %159 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_159_126) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_2_cur_output_0_reg <= __ConvertDate_2_cur_output_0;
if (reset == 1'b0 && ^(__ConvertDate_2_cur_output_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_cur_output_0_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
begin
__ConvertDate_2_3 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_4))
begin
__ConvertDate_2_3_reg <= __ConvertDate_2_3;
if (reset == 1'b0 && ^(__ConvertDate_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %2*/
/*   %4 = icmp eq i8 %3, 0*/
begin
__ConvertDate_2_4 = (__ConvertDate_2_3 == 8'd0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %2*/
/*   %4 = icmp eq i8 %3, 0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_4))
begin
__ConvertDate_2_4_reg <= __ConvertDate_2_4;
if (reset == 1'b0 && ^(__ConvertDate_2_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_2_4_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %5*/
/*   %6 = icmp ne i8* %cur_output.0, null*/
begin
__ConvertDate_5_6 = (__ConvertDate_2_cur_output_0_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %5*/
/*   %6 = icmp ne i8* %cur_output.0, null*/
if ((cur_state == LEGUP_F___ConvertDate_BB_5_5))
begin
__ConvertDate_5_6_reg <= __ConvertDate_5_6;
if (reset == 1'b0 && ^(__ConvertDate_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_5_6_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %5*/
/*   %7 = icmp eq i8* %cur_output.0, %1*/
begin
__ConvertDate_5_7 = (__ConvertDate_2_cur_output_0_reg == __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %5*/
/*   %7 = icmp eq i8* %cur_output.0, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_5_5))
begin
__ConvertDate_5_7_reg <= __ConvertDate_5_7;
if (reset == 1'b0 && ^(__ConvertDate_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_5_7_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %5*/
/*   %or.cond = and i1 %6, %7*/
begin
__ConvertDate_5_or_cond = (__ConvertDate_5_6 & __ConvertDate_5_7);
end
end
always @(posedge clk) begin
/* __ConvertDate: %5*/
/*   %or.cond = and i1 %6, %7*/
if ((cur_state == LEGUP_F___ConvertDate_BB_5_5))
begin
__ConvertDate_5_or_cond_reg <= __ConvertDate_5_or_cond;
if (reset == 1'b0 && ^(__ConvertDate_5_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_5_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %8*/
/*   %9 = sext i8 %3 to i32*/
begin
__ConvertDate_8_9 = $signed(__ConvertDate_2_3_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %8*/
/*   %9 = sext i8 %3 to i32*/
if ((cur_state == LEGUP_F___ConvertDate_BB_8_6))
begin
__ConvertDate_8_9_reg <= __ConvertDate_8_9;
if (reset == 1'b0 && ^(__ConvertDate_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_8_9_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %10*/
/*   %11 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertDate_10_11 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %10*/
/*   %11 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_8))
begin
__ConvertDate_10_11_reg <= __ConvertDate_10_11;
if (reset == 1'b0 && ^(__ConvertDate_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_10_11_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
begin
__ConvertDate_10_12 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_10))
begin
__ConvertDate_10_12_reg <= __ConvertDate_10_12;
if (reset == 1'b0 && ^(__ConvertDate_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_10_12_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %10*/
/*   %13 = icmp eq i8 %12, 100*/
begin
__ConvertDate_10_13 = (__ConvertDate_10_12 == 8'd100);
end
end
always @(posedge clk) begin
/* __ConvertDate: %10*/
/*   %13 = icmp eq i8 %12, 100*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_10))
begin
__ConvertDate_10_13_reg <= __ConvertDate_10_13;
if (reset == 1'b0 && ^(__ConvertDate_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_10_13_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %14*/
/*   %15 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_14_15 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %14*/
/*   %15 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_14_11))
begin
__ConvertDate_14_15_reg <= __ConvertDate_14_15;
if (reset == 1'b0 && ^(__ConvertDate_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_14_15_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %14*/
/*   %16 = icmp ugt i8* %15, %1*/
begin
__ConvertDate_14_16 = (__ConvertDate_14_15 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %14*/
/*   %16 = icmp ugt i8* %15, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_14_11))
begin
__ConvertDate_14_16_reg <= __ConvertDate_14_16;
if (reset == 1'b0 && ^(__ConvertDate_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_14_16_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %14*/
/*   %or.cond5 = and i1 %6, %16*/
begin
__ConvertDate_14_or_cond5 = (__ConvertDate_5_6_reg & __ConvertDate_14_16);
end
end
always @(posedge clk) begin
/* __ConvertDate: %14*/
/*   %or.cond5 = and i1 %6, %16*/
if ((cur_state == LEGUP_F___ConvertDate_BB_14_11))
begin
__ConvertDate_14_or_cond5_reg <= __ConvertDate_14_or_cond5;
if (reset == 1'b0 && ^(__ConvertDate_14_or_cond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_14_or_cond5_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %17*/
/*   %18 = add nsw i32 %.03, 1*/
begin
__ConvertDate_17_18 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %17*/
/*   %18 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
__ConvertDate_17_18_reg <= __ConvertDate_17_18;
if (reset == 1'b0 && ^(__ConvertDate_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_17_18_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %19*/
/*   %20 = getelementptr inbounds i8* %cur_char.0, i32 2*/
begin
__ConvertDate_19_20 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %19*/
/*   %20 = getelementptr inbounds i8* %cur_char.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_14))
begin
__ConvertDate_19_20_reg <= __ConvertDate_19_20;
if (reset == 1'b0 && ^(__ConvertDate_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_19_20_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
begin
__ConvertDate_19_21 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_16))
begin
__ConvertDate_19_21_reg <= __ConvertDate_19_21;
if (reset == 1'b0 && ^(__ConvertDate_19_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_19_21_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %19*/
/*   %22 = icmp eq i8 %21, 100*/
begin
__ConvertDate_19_22 = (__ConvertDate_19_21 == 8'd100);
end
end
always @(posedge clk) begin
/* __ConvertDate: %19*/
/*   %22 = icmp eq i8 %21, 100*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_16))
begin
__ConvertDate_19_22_reg <= __ConvertDate_19_22;
if (reset == 1'b0 && ^(__ConvertDate_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_19_22_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %23*/
/*   %24 = getelementptr inbounds i8* %cur_char.0, i32 3*/
begin
__ConvertDate_23_24 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %23*/
/*   %24 = getelementptr inbounds i8* %cur_char.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_17))
begin
__ConvertDate_23_24_reg <= __ConvertDate_23_24;
if (reset == 1'b0 && ^(__ConvertDate_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_23_24_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
begin
__ConvertDate_23_25 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_19))
begin
__ConvertDate_23_25_reg <= __ConvertDate_23_25;
if (reset == 1'b0 && ^(__ConvertDate_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_23_25_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %23*/
/*   %26 = icmp eq i8 %25, 100*/
begin
__ConvertDate_23_26 = (__ConvertDate_23_25 == 8'd100);
end
end
always @(posedge clk) begin
/* __ConvertDate: %23*/
/*   %26 = icmp eq i8 %25, 100*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_19))
begin
__ConvertDate_23_26_reg <= __ConvertDate_23_26;
if (reset == 1'b0 && ^(__ConvertDate_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_23_26_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %28*/
/*   %29 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_28_29 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %28*/
/*   %29 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
__ConvertDate_28_29_reg <= __ConvertDate_28_29;
if (reset == 1'b0 && ^(__ConvertDate_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_28_29_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %30*/
/*   %cur_output.1 = phi i8* [ %15, %28 ], [ null, %27 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_30_cur_output_1 = 0;
end
/* __ConvertDate: %30*/
/*   %cur_output.1 = phi i8* [ %15, %28 ], [ null, %27 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_28_22) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_30_cur_output_1 = __ConvertDate_14_15_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %30*/
/*   %cur_output.1 = phi i8* [ %15, %28 ], [ null, %27 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_27_20) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_30_cur_output_1_reg <= __ConvertDate_30_cur_output_1;
if (reset == 1'b0 && ^(__ConvertDate_30_cur_output_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_30_cur_output_1_reg"); $finish; end
end
/* __ConvertDate: %30*/
/*   %cur_output.1 = phi i8* [ %15, %28 ], [ null, %27 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_28_22) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_30_cur_output_1_reg <= __ConvertDate_30_cur_output_1;
if (reset == 1'b0 && ^(__ConvertDate_30_cur_output_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_30_cur_output_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %30*/
/*   %31 = add nsw i32 %.03, 2*/
begin
__ConvertDate_30_31 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %30*/
/*   %31 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_30_23))
begin
__ConvertDate_30_31_reg <= __ConvertDate_30_31;
if (reset == 1'b0 && ^(__ConvertDate_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_30_31_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %33*/
/*   %34 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_33_34 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %33*/
/*   %34 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
__ConvertDate_33_34_reg <= __ConvertDate_33_34;
if (reset == 1'b0 && ^(__ConvertDate_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_33_34_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %35*/
/*   %cur_output.2 = phi i8* [ %15, %33 ], [ null, %32 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_32_24) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_35_cur_output_2 = 0;
end
/* __ConvertDate: %35*/
/*   %cur_output.2 = phi i8* [ %15, %33 ], [ null, %32 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_33_26) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_35_cur_output_2 = __ConvertDate_14_15_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %35*/
/*   %cur_output.2 = phi i8* [ %15, %33 ], [ null, %32 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_32_24) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_35_cur_output_2_reg <= __ConvertDate_35_cur_output_2;
if (reset == 1'b0 && ^(__ConvertDate_35_cur_output_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_35_cur_output_2_reg"); $finish; end
end
/* __ConvertDate: %35*/
/*   %cur_output.2 = phi i8* [ %15, %33 ], [ null, %32 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_33_26) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_35_cur_output_2_reg <= __ConvertDate_35_cur_output_2;
if (reset == 1'b0 && ^(__ConvertDate_35_cur_output_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_35_cur_output_2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %35*/
/*   %36 = add nsw i32 %.03, 2*/
begin
__ConvertDate_35_36 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %35*/
/*   %36 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_35_27))
begin
__ConvertDate_35_36_reg <= __ConvertDate_35_36;
if (reset == 1'b0 && ^(__ConvertDate_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_35_36_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %38*/
/*   %39 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_38_39 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %38*/
/*   %39 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
__ConvertDate_38_39_reg <= __ConvertDate_38_39;
if (reset == 1'b0 && ^(__ConvertDate_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_38_39_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %40*/
/*   %cur_output.3 = phi i8* [ %15, %38 ], [ null, %37 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_37_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_40_cur_output_3 = 0;
end
/* __ConvertDate: %40*/
/*   %cur_output.3 = phi i8* [ %15, %38 ], [ null, %37 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_38_30) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_40_cur_output_3 = __ConvertDate_14_15_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %40*/
/*   %cur_output.3 = phi i8* [ %15, %38 ], [ null, %37 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_37_28) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_40_cur_output_3_reg <= __ConvertDate_40_cur_output_3;
if (reset == 1'b0 && ^(__ConvertDate_40_cur_output_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_40_cur_output_3_reg"); $finish; end
end
/* __ConvertDate: %40*/
/*   %cur_output.3 = phi i8* [ %15, %38 ], [ null, %37 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_38_30) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_40_cur_output_3_reg <= __ConvertDate_40_cur_output_3;
if (reset == 1'b0 && ^(__ConvertDate_40_cur_output_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_40_cur_output_3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %40*/
/*   %41 = add nsw i32 %.03, 2*/
begin
__ConvertDate_40_41 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %40*/
/*   %41 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_40_31))
begin
__ConvertDate_40_41_reg <= __ConvertDate_40_41;
if (reset == 1'b0 && ^(__ConvertDate_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_40_41_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %42*/
/*   %43 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertDate_42_43 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %42*/
/*   %43 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_42_32))
begin
__ConvertDate_42_43_reg <= __ConvertDate_42_43;
if (reset == 1'b0 && ^(__ConvertDate_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_42_43_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %42*/
/*   %44 = icmp ugt i8* %43, %1*/
begin
__ConvertDate_42_44 = (__ConvertDate_42_43 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %42*/
/*   %44 = icmp ugt i8* %43, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_42_32))
begin
__ConvertDate_42_44_reg <= __ConvertDate_42_44;
if (reset == 1'b0 && ^(__ConvertDate_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_42_44_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %42*/
/*   %or.cond7 = and i1 %6, %44*/
begin
__ConvertDate_42_or_cond7 = (__ConvertDate_5_6_reg & __ConvertDate_42_44);
end
end
always @(posedge clk) begin
/* __ConvertDate: %42*/
/*   %or.cond7 = and i1 %6, %44*/
if ((cur_state == LEGUP_F___ConvertDate_BB_42_32))
begin
__ConvertDate_42_or_cond7_reg <= __ConvertDate_42_or_cond7;
if (reset == 1'b0 && ^(__ConvertDate_42_or_cond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_42_or_cond7_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %45*/
/*   %46 = add nsw i32 %.03, 1*/
begin
__ConvertDate_45_46 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %45*/
/*   %46 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
__ConvertDate_45_46_reg <= __ConvertDate_45_46;
if (reset == 1'b0 && ^(__ConvertDate_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_45_46_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %48*/
/*   %49 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_48_49 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %48*/
/*   %49 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
__ConvertDate_48_49_reg <= __ConvertDate_48_49;
if (reset == 1'b0 && ^(__ConvertDate_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_48_49_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %48*/
/*   %50 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_48_50 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %48*/
/*   %50 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
__ConvertDate_48_50_reg <= __ConvertDate_48_50;
if (reset == 1'b0 && ^(__ConvertDate_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_48_50_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %51*/
/*   %cur_output.4 = phi i8* [ %43, %48 ], [ null, %47 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_47_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_51_cur_output_4 = 0;
end
/* __ConvertDate: %51*/
/*   %cur_output.4 = phi i8* [ %43, %48 ], [ null, %47 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_48_38) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_51_cur_output_4 = __ConvertDate_42_43_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %51*/
/*   %cur_output.4 = phi i8* [ %43, %48 ], [ null, %47 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_47_35) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_51_cur_output_4_reg <= __ConvertDate_51_cur_output_4;
if (reset == 1'b0 && ^(__ConvertDate_51_cur_output_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_51_cur_output_4_reg"); $finish; end
end
/* __ConvertDate: %51*/
/*   %cur_output.4 = phi i8* [ %43, %48 ], [ null, %47 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_48_38) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_51_cur_output_4_reg <= __ConvertDate_51_cur_output_4;
if (reset == 1'b0 && ^(__ConvertDate_51_cur_output_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_51_cur_output_4_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %51*/
/*   %52 = add nsw i32 %.03, 3*/
begin
__ConvertDate_51_52 = (__ConvertDate_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertDate: %51*/
/*   %52 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_51_39))
begin
__ConvertDate_51_52_reg <= __ConvertDate_51_52;
if (reset == 1'b0 && ^(__ConvertDate_51_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_51_52_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %53*/
/*   %54 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertDate_53_54 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %53*/
/*   %54 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_40))
begin
__ConvertDate_53_54_reg <= __ConvertDate_53_54;
if (reset == 1'b0 && ^(__ConvertDate_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_53_54_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
begin
__ConvertDate_53_55 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_42))
begin
__ConvertDate_53_55_reg <= __ConvertDate_53_55;
if (reset == 1'b0 && ^(__ConvertDate_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_53_55_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %53*/
/*   %56 = icmp eq i8 %55, 77*/
begin
__ConvertDate_53_56 = (__ConvertDate_53_55 == 8'd77);
end
end
always @(posedge clk) begin
/* __ConvertDate: %53*/
/*   %56 = icmp eq i8 %55, 77*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_42))
begin
__ConvertDate_53_56_reg <= __ConvertDate_53_56;
if (reset == 1'b0 && ^(__ConvertDate_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_53_56_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %57*/
/*   %58 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_57_58 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %57*/
/*   %58 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_57_43))
begin
__ConvertDate_57_58_reg <= __ConvertDate_57_58;
if (reset == 1'b0 && ^(__ConvertDate_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_57_58_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %57*/
/*   %59 = icmp ugt i8* %58, %1*/
begin
__ConvertDate_57_59 = (__ConvertDate_57_58 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %57*/
/*   %59 = icmp ugt i8* %58, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_57_43))
begin
__ConvertDate_57_59_reg <= __ConvertDate_57_59;
if (reset == 1'b0 && ^(__ConvertDate_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_57_59_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %57*/
/*   %or.cond9 = and i1 %6, %59*/
begin
__ConvertDate_57_or_cond9 = (__ConvertDate_5_6_reg & __ConvertDate_57_59);
end
end
always @(posedge clk) begin
/* __ConvertDate: %57*/
/*   %or.cond9 = and i1 %6, %59*/
if ((cur_state == LEGUP_F___ConvertDate_BB_57_43))
begin
__ConvertDate_57_or_cond9_reg <= __ConvertDate_57_or_cond9;
if (reset == 1'b0 && ^(__ConvertDate_57_or_cond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_57_or_cond9_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %60*/
/*   %61 = add nsw i32 %.03, 1*/
begin
__ConvertDate_60_61 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %60*/
/*   %61 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
__ConvertDate_60_61_reg <= __ConvertDate_60_61;
if (reset == 1'b0 && ^(__ConvertDate_60_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_60_61_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %62*/
/*   %63 = getelementptr inbounds i8* %cur_char.0, i32 2*/
begin
__ConvertDate_62_63 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %62*/
/*   %63 = getelementptr inbounds i8* %cur_char.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_46))
begin
__ConvertDate_62_63_reg <= __ConvertDate_62_63;
if (reset == 1'b0 && ^(__ConvertDate_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_62_63_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
begin
__ConvertDate_62_64 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_48))
begin
__ConvertDate_62_64_reg <= __ConvertDate_62_64;
if (reset == 1'b0 && ^(__ConvertDate_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_62_64_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %62*/
/*   %65 = icmp eq i8 %64, 77*/
begin
__ConvertDate_62_65 = (__ConvertDate_62_64 == 8'd77);
end
end
always @(posedge clk) begin
/* __ConvertDate: %62*/
/*   %65 = icmp eq i8 %64, 77*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_48))
begin
__ConvertDate_62_65_reg <= __ConvertDate_62_65;
if (reset == 1'b0 && ^(__ConvertDate_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_62_65_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %66*/
/*   %67 = getelementptr inbounds i8* %cur_char.0, i32 3*/
begin
__ConvertDate_66_67 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %66*/
/*   %67 = getelementptr inbounds i8* %cur_char.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_49))
begin
__ConvertDate_66_67_reg <= __ConvertDate_66_67;
if (reset == 1'b0 && ^(__ConvertDate_66_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_66_67_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
begin
__ConvertDate_66_68 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_51))
begin
__ConvertDate_66_68_reg <= __ConvertDate_66_68;
if (reset == 1'b0 && ^(__ConvertDate_66_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_66_68_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %66*/
/*   %69 = icmp eq i8 %68, 77*/
begin
__ConvertDate_66_69 = (__ConvertDate_66_68 == 8'd77);
end
end
always @(posedge clk) begin
/* __ConvertDate: %66*/
/*   %69 = icmp eq i8 %68, 77*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_51))
begin
__ConvertDate_66_69_reg <= __ConvertDate_66_69;
if (reset == 1'b0 && ^(__ConvertDate_66_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_66_69_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %71*/
/*   %72 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_71_72 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %71*/
/*   %72 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
__ConvertDate_71_72_reg <= __ConvertDate_71_72;
if (reset == 1'b0 && ^(__ConvertDate_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_71_72_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %73*/
/*   %cur_output.5 = phi i8* [ %58, %71 ], [ null, %70 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_70_52) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_73_cur_output_5 = 0;
end
/* __ConvertDate: %73*/
/*   %cur_output.5 = phi i8* [ %58, %71 ], [ null, %70 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_71_54) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_73_cur_output_5 = __ConvertDate_57_58_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %73*/
/*   %cur_output.5 = phi i8* [ %58, %71 ], [ null, %70 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_70_52) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_73_cur_output_5_reg <= __ConvertDate_73_cur_output_5;
if (reset == 1'b0 && ^(__ConvertDate_73_cur_output_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_73_cur_output_5_reg"); $finish; end
end
/* __ConvertDate: %73*/
/*   %cur_output.5 = phi i8* [ %58, %71 ], [ null, %70 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_71_54) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_73_cur_output_5_reg <= __ConvertDate_73_cur_output_5;
if (reset == 1'b0 && ^(__ConvertDate_73_cur_output_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_73_cur_output_5_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %73*/
/*   %74 = add nsw i32 %.03, 2*/
begin
__ConvertDate_73_74 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %73*/
/*   %74 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_73_55))
begin
__ConvertDate_73_74_reg <= __ConvertDate_73_74;
if (reset == 1'b0 && ^(__ConvertDate_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_73_74_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %76*/
/*   %77 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_76_77 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %76*/
/*   %77 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
__ConvertDate_76_77_reg <= __ConvertDate_76_77;
if (reset == 1'b0 && ^(__ConvertDate_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_76_77_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %78*/
/*   %cur_output.6 = phi i8* [ %58, %76 ], [ null, %75 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_75_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_78_cur_output_6 = 0;
end
/* __ConvertDate: %78*/
/*   %cur_output.6 = phi i8* [ %58, %76 ], [ null, %75 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_76_58) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_78_cur_output_6 = __ConvertDate_57_58_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %78*/
/*   %cur_output.6 = phi i8* [ %58, %76 ], [ null, %75 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_75_56) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_78_cur_output_6_reg <= __ConvertDate_78_cur_output_6;
if (reset == 1'b0 && ^(__ConvertDate_78_cur_output_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_78_cur_output_6_reg"); $finish; end
end
/* __ConvertDate: %78*/
/*   %cur_output.6 = phi i8* [ %58, %76 ], [ null, %75 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_76_58) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_78_cur_output_6_reg <= __ConvertDate_78_cur_output_6;
if (reset == 1'b0 && ^(__ConvertDate_78_cur_output_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_78_cur_output_6_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %78*/
/*   %79 = add nsw i32 %.03, 2*/
begin
__ConvertDate_78_79 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %78*/
/*   %79 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_78_59))
begin
__ConvertDate_78_79_reg <= __ConvertDate_78_79;
if (reset == 1'b0 && ^(__ConvertDate_78_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_78_79_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %81*/
/*   %82 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_81_82 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %81*/
/*   %82 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
__ConvertDate_81_82_reg <= __ConvertDate_81_82;
if (reset == 1'b0 && ^(__ConvertDate_81_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_81_82_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %83*/
/*   %cur_output.7 = phi i8* [ %58, %81 ], [ null, %80 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_80_60) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_83_cur_output_7 = 0;
end
/* __ConvertDate: %83*/
/*   %cur_output.7 = phi i8* [ %58, %81 ], [ null, %80 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_81_62) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_83_cur_output_7 = __ConvertDate_57_58_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %83*/
/*   %cur_output.7 = phi i8* [ %58, %81 ], [ null, %80 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_80_60) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_83_cur_output_7_reg <= __ConvertDate_83_cur_output_7;
if (reset == 1'b0 && ^(__ConvertDate_83_cur_output_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_83_cur_output_7_reg"); $finish; end
end
/* __ConvertDate: %83*/
/*   %cur_output.7 = phi i8* [ %58, %81 ], [ null, %80 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_81_62) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_83_cur_output_7_reg <= __ConvertDate_83_cur_output_7;
if (reset == 1'b0 && ^(__ConvertDate_83_cur_output_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_83_cur_output_7_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %83*/
/*   %84 = add nsw i32 %.03, 2*/
begin
__ConvertDate_83_84 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %83*/
/*   %84 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_83_63))
begin
__ConvertDate_83_84_reg <= __ConvertDate_83_84;
if (reset == 1'b0 && ^(__ConvertDate_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_83_84_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %85*/
/*   %86 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertDate_85_86 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %85*/
/*   %86 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_85_64))
begin
__ConvertDate_85_86_reg <= __ConvertDate_85_86;
if (reset == 1'b0 && ^(__ConvertDate_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_85_86_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %85*/
/*   %87 = icmp ugt i8* %86, %1*/
begin
__ConvertDate_85_87 = (__ConvertDate_85_86 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %85*/
/*   %87 = icmp ugt i8* %86, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_85_64))
begin
__ConvertDate_85_87_reg <= __ConvertDate_85_87;
if (reset == 1'b0 && ^(__ConvertDate_85_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_85_87_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %85*/
/*   %or.cond11 = and i1 %6, %87*/
begin
__ConvertDate_85_or_cond11 = (__ConvertDate_5_6_reg & __ConvertDate_85_87);
end
end
always @(posedge clk) begin
/* __ConvertDate: %85*/
/*   %or.cond11 = and i1 %6, %87*/
if ((cur_state == LEGUP_F___ConvertDate_BB_85_64))
begin
__ConvertDate_85_or_cond11_reg <= __ConvertDate_85_or_cond11;
if (reset == 1'b0 && ^(__ConvertDate_85_or_cond11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_85_or_cond11_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %88*/
/*   %89 = add nsw i32 %.03, 1*/
begin
__ConvertDate_88_89 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %88*/
/*   %89 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
__ConvertDate_88_89_reg <= __ConvertDate_88_89;
if (reset == 1'b0 && ^(__ConvertDate_88_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_88_89_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %91*/
/*   %92 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_91_92 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %91*/
/*   %92 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
__ConvertDate_91_92_reg <= __ConvertDate_91_92;
if (reset == 1'b0 && ^(__ConvertDate_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_91_92_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %91*/
/*   %93 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_91_93 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %91*/
/*   %93 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
__ConvertDate_91_93_reg <= __ConvertDate_91_93;
if (reset == 1'b0 && ^(__ConvertDate_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_91_93_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %94*/
/*   %cur_output.8 = phi i8* [ %86, %91 ], [ null, %90 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_90_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_94_cur_output_8 = 0;
end
/* __ConvertDate: %94*/
/*   %cur_output.8 = phi i8* [ %86, %91 ], [ null, %90 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_91_70) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_94_cur_output_8 = __ConvertDate_85_86_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %94*/
/*   %cur_output.8 = phi i8* [ %86, %91 ], [ null, %90 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_90_67) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_94_cur_output_8_reg <= __ConvertDate_94_cur_output_8;
if (reset == 1'b0 && ^(__ConvertDate_94_cur_output_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_94_cur_output_8_reg"); $finish; end
end
/* __ConvertDate: %94*/
/*   %cur_output.8 = phi i8* [ %86, %91 ], [ null, %90 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_91_70) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_94_cur_output_8_reg <= __ConvertDate_94_cur_output_8;
if (reset == 1'b0 && ^(__ConvertDate_94_cur_output_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_94_cur_output_8_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %94*/
/*   %95 = add nsw i32 %.03, 3*/
begin
__ConvertDate_94_95 = (__ConvertDate_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertDate: %94*/
/*   %95 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_94_71))
begin
__ConvertDate_94_95_reg <= __ConvertDate_94_95;
if (reset == 1'b0 && ^(__ConvertDate_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_94_95_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %96*/
/*   %97 = getelementptr inbounds i8* %cur_char.0, i32 1*/
begin
__ConvertDate_96_97 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %96*/
/*   %97 = getelementptr inbounds i8* %cur_char.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_72))
begin
__ConvertDate_96_97_reg <= __ConvertDate_96_97;
if (reset == 1'b0 && ^(__ConvertDate_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_96_97_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
begin
__ConvertDate_96_98 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_74))
begin
__ConvertDate_96_98_reg <= __ConvertDate_96_98;
if (reset == 1'b0 && ^(__ConvertDate_96_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_96_98_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %96*/
/*   %99 = icmp eq i8 %98, 121*/
begin
__ConvertDate_96_99 = (__ConvertDate_96_98 == 8'd121);
end
end
always @(posedge clk) begin
/* __ConvertDate: %96*/
/*   %99 = icmp eq i8 %98, 121*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_74))
begin
__ConvertDate_96_99_reg <= __ConvertDate_96_99;
if (reset == 1'b0 && ^(__ConvertDate_96_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_96_99_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %100*/
/*   %101 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_100_101 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %100*/
/*   %101 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_100_75))
begin
__ConvertDate_100_101_reg <= __ConvertDate_100_101;
if (reset == 1'b0 && ^(__ConvertDate_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_100_101_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %100*/
/*   %102 = icmp ugt i8* %101, %1*/
begin
__ConvertDate_100_102 = (__ConvertDate_100_101 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %100*/
/*   %102 = icmp ugt i8* %101, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_100_75))
begin
__ConvertDate_100_102_reg <= __ConvertDate_100_102;
if (reset == 1'b0 && ^(__ConvertDate_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_100_102_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %100*/
/*   %or.cond13 = and i1 %6, %102*/
begin
__ConvertDate_100_or_cond13 = (__ConvertDate_5_6_reg & __ConvertDate_100_102);
end
end
always @(posedge clk) begin
/* __ConvertDate: %100*/
/*   %or.cond13 = and i1 %6, %102*/
if ((cur_state == LEGUP_F___ConvertDate_BB_100_75))
begin
__ConvertDate_100_or_cond13_reg <= __ConvertDate_100_or_cond13;
if (reset == 1'b0 && ^(__ConvertDate_100_or_cond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_100_or_cond13_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %103*/
/*   %104 = add nsw i32 %.03, 1*/
begin
__ConvertDate_103_104 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %103*/
/*   %104 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
__ConvertDate_103_104_reg <= __ConvertDate_103_104;
if (reset == 1'b0 && ^(__ConvertDate_103_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_103_104_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %105*/
/*   %106 = getelementptr inbounds i8* %cur_char.0, i32 2*/
begin
__ConvertDate_105_106 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %105*/
/*   %106 = getelementptr inbounds i8* %cur_char.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_78))
begin
__ConvertDate_105_106_reg <= __ConvertDate_105_106;
if (reset == 1'b0 && ^(__ConvertDate_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_105_106_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
begin
__ConvertDate_105_107 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_80))
begin
__ConvertDate_105_107_reg <= __ConvertDate_105_107;
if (reset == 1'b0 && ^(__ConvertDate_105_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_105_107_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %105*/
/*   %108 = icmp eq i8 %107, 121*/
begin
__ConvertDate_105_108 = (__ConvertDate_105_107 == 8'd121);
end
end
always @(posedge clk) begin
/* __ConvertDate: %105*/
/*   %108 = icmp eq i8 %107, 121*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_80))
begin
__ConvertDate_105_108_reg <= __ConvertDate_105_108;
if (reset == 1'b0 && ^(__ConvertDate_105_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_105_108_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %109*/
/*   %110 = getelementptr inbounds i8* %cur_char.0, i32 3*/
begin
__ConvertDate_109_110 = (__ConvertDate_2_cur_char_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %109*/
/*   %110 = getelementptr inbounds i8* %cur_char.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_81))
begin
__ConvertDate_109_110_reg <= __ConvertDate_109_110;
if (reset == 1'b0 && ^(__ConvertDate_109_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_109_110_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
begin
__ConvertDate_109_111 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_83))
begin
__ConvertDate_109_111_reg <= __ConvertDate_109_111;
if (reset == 1'b0 && ^(__ConvertDate_109_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_109_111_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %109*/
/*   %112 = icmp eq i8 %111, 121*/
begin
__ConvertDate_109_112 = (__ConvertDate_109_111 == 8'd121);
end
end
always @(posedge clk) begin
/* __ConvertDate: %109*/
/*   %112 = icmp eq i8 %111, 121*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_83))
begin
__ConvertDate_109_112_reg <= __ConvertDate_109_112;
if (reset == 1'b0 && ^(__ConvertDate_109_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_109_112_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %114*/
/*   %115 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_114_115 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %114*/
/*   %115 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
__ConvertDate_114_115_reg <= __ConvertDate_114_115;
if (reset == 1'b0 && ^(__ConvertDate_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_114_115_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %116*/
/*   %cur_output.9 = phi i8* [ %101, %114 ], [ null, %113 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_113_84) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_116_cur_output_9 = 0;
end
/* __ConvertDate: %116*/
/*   %cur_output.9 = phi i8* [ %101, %114 ], [ null, %113 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_114_86) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_116_cur_output_9 = __ConvertDate_100_101_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %116*/
/*   %cur_output.9 = phi i8* [ %101, %114 ], [ null, %113 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_113_84) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_116_cur_output_9_reg <= __ConvertDate_116_cur_output_9;
if (reset == 1'b0 && ^(__ConvertDate_116_cur_output_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_116_cur_output_9_reg"); $finish; end
end
/* __ConvertDate: %116*/
/*   %cur_output.9 = phi i8* [ %101, %114 ], [ null, %113 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_114_86) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_116_cur_output_9_reg <= __ConvertDate_116_cur_output_9;
if (reset == 1'b0 && ^(__ConvertDate_116_cur_output_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_116_cur_output_9_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %116*/
/*   %117 = add nsw i32 %.03, 2*/
begin
__ConvertDate_116_117 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %116*/
/*   %117 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_116_87))
begin
__ConvertDate_116_117_reg <= __ConvertDate_116_117;
if (reset == 1'b0 && ^(__ConvertDate_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_116_117_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %119*/
/*   %120 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_119_120 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %119*/
/*   %120 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
__ConvertDate_119_120_reg <= __ConvertDate_119_120;
if (reset == 1'b0 && ^(__ConvertDate_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_119_120_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %121*/
/*   %cur_output.10 = phi i8* [ %101, %119 ], [ null, %118 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_118_88) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_121_cur_output_10 = 0;
end
/* __ConvertDate: %121*/
/*   %cur_output.10 = phi i8* [ %101, %119 ], [ null, %118 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_119_90) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_121_cur_output_10 = __ConvertDate_100_101_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %121*/
/*   %cur_output.10 = phi i8* [ %101, %119 ], [ null, %118 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_118_88) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_121_cur_output_10_reg <= __ConvertDate_121_cur_output_10;
if (reset == 1'b0 && ^(__ConvertDate_121_cur_output_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_121_cur_output_10_reg"); $finish; end
end
/* __ConvertDate: %121*/
/*   %cur_output.10 = phi i8* [ %101, %119 ], [ null, %118 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_119_90) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_121_cur_output_10_reg <= __ConvertDate_121_cur_output_10;
if (reset == 1'b0 && ^(__ConvertDate_121_cur_output_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_121_cur_output_10_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %121*/
/*   %122 = add nsw i32 %.03, 2*/
begin
__ConvertDate_121_122 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %121*/
/*   %122 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_121_91))
begin
__ConvertDate_121_122_reg <= __ConvertDate_121_122;
if (reset == 1'b0 && ^(__ConvertDate_121_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_121_122_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %123*/
/*   %124 = getelementptr inbounds i8* %cur_output.0, i32 3*/
begin
__ConvertDate_123_124 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd3));
end
end
always @(posedge clk) begin
/* __ConvertDate: %123*/
/*   %124 = getelementptr inbounds i8* %cur_output.0, i32 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_123_92))
begin
__ConvertDate_123_124_reg <= __ConvertDate_123_124;
if (reset == 1'b0 && ^(__ConvertDate_123_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_123_124_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %123*/
/*   %125 = icmp ugt i8* %124, %1*/
begin
__ConvertDate_123_125 = (__ConvertDate_123_124 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %123*/
/*   %125 = icmp ugt i8* %124, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_123_92))
begin
__ConvertDate_123_125_reg <= __ConvertDate_123_125;
if (reset == 1'b0 && ^(__ConvertDate_123_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_123_125_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %123*/
/*   %or.cond15 = and i1 %6, %125*/
begin
__ConvertDate_123_or_cond15 = (__ConvertDate_5_6_reg & __ConvertDate_123_125);
end
end
always @(posedge clk) begin
/* __ConvertDate: %123*/
/*   %or.cond15 = and i1 %6, %125*/
if ((cur_state == LEGUP_F___ConvertDate_BB_123_92))
begin
__ConvertDate_123_or_cond15_reg <= __ConvertDate_123_or_cond15;
if (reset == 1'b0 && ^(__ConvertDate_123_or_cond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_123_or_cond15_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %126*/
/*   %127 = add nsw i32 %.03, 1*/
begin
__ConvertDate_126_127 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %126*/
/*   %127 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
__ConvertDate_126_127_reg <= __ConvertDate_126_127;
if (reset == 1'b0 && ^(__ConvertDate_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_126_127_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %129*/
/*   %130 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_129_130 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %129*/
/*   %130 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
__ConvertDate_129_130_reg <= __ConvertDate_129_130;
if (reset == 1'b0 && ^(__ConvertDate_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_129_130_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %129*/
/*   %131 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_129_131 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %129*/
/*   %131 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
__ConvertDate_129_131_reg <= __ConvertDate_129_131;
if (reset == 1'b0 && ^(__ConvertDate_129_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_129_131_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %132*/
/*   %cur_output.11 = phi i8* [ %124, %129 ], [ null, %128 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_128_95) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_132_cur_output_11 = 0;
end
/* __ConvertDate: %132*/
/*   %cur_output.11 = phi i8* [ %124, %129 ], [ null, %128 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_129_98) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_132_cur_output_11 = __ConvertDate_123_124_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %132*/
/*   %cur_output.11 = phi i8* [ %124, %129 ], [ null, %128 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_128_95) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_132_cur_output_11_reg <= __ConvertDate_132_cur_output_11;
if (reset == 1'b0 && ^(__ConvertDate_132_cur_output_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_132_cur_output_11_reg"); $finish; end
end
/* __ConvertDate: %132*/
/*   %cur_output.11 = phi i8* [ %124, %129 ], [ null, %128 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_129_98) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_132_cur_output_11_reg <= __ConvertDate_132_cur_output_11;
if (reset == 1'b0 && ^(__ConvertDate_132_cur_output_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_132_cur_output_11_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %132*/
/*   %133 = add nsw i32 %.03, 3*/
begin
__ConvertDate_132_133 = (__ConvertDate_2__03_reg + 32'd3);
end
end
always @(posedge clk) begin
/* __ConvertDate: %132*/
/*   %133 = add nsw i32 %.03, 3*/
if ((cur_state == LEGUP_F___ConvertDate_BB_132_99))
begin
__ConvertDate_132_133_reg <= __ConvertDate_132_133;
if (reset == 1'b0 && ^(__ConvertDate_132_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_132_133_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %134*/
/*   %135 = getelementptr inbounds i8* %cur_output.0, i32 2*/
begin
__ConvertDate_134_135 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd2));
end
end
always @(posedge clk) begin
/* __ConvertDate: %134*/
/*   %135 = getelementptr inbounds i8* %cur_output.0, i32 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_134_100))
begin
__ConvertDate_134_135_reg <= __ConvertDate_134_135;
if (reset == 1'b0 && ^(__ConvertDate_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_134_135_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %134*/
/*   %136 = icmp ugt i8* %135, %1*/
begin
__ConvertDate_134_136 = (__ConvertDate_134_135 > __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %134*/
/*   %136 = icmp ugt i8* %135, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_134_100))
begin
__ConvertDate_134_136_reg <= __ConvertDate_134_136;
if (reset == 1'b0 && ^(__ConvertDate_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_134_136_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %134*/
/*   %or.cond17 = and i1 %6, %136*/
begin
__ConvertDate_134_or_cond17 = (__ConvertDate_5_6_reg & __ConvertDate_134_136);
end
end
always @(posedge clk) begin
/* __ConvertDate: %134*/
/*   %or.cond17 = and i1 %6, %136*/
if ((cur_state == LEGUP_F___ConvertDate_BB_134_100))
begin
__ConvertDate_134_or_cond17_reg <= __ConvertDate_134_or_cond17;
if (reset == 1'b0 && ^(__ConvertDate_134_or_cond17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_134_or_cond17_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %137*/
/*   %138 = add nsw i32 %.03, 1*/
begin
__ConvertDate_137_138 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %137*/
/*   %138 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
__ConvertDate_137_138_reg <= __ConvertDate_137_138;
if (reset == 1'b0 && ^(__ConvertDate_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_137_138_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %140*/
/*   %141 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_140_141 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %140*/
/*   %141 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
__ConvertDate_140_141_reg <= __ConvertDate_140_141;
if (reset == 1'b0 && ^(__ConvertDate_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_140_141_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %142*/
/*   %cur_output.12 = phi i8* [ %135, %140 ], [ null, %139 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_139_103) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_142_cur_output_12 = 0;
end
/* __ConvertDate: %142*/
/*   %cur_output.12 = phi i8* [ %135, %140 ], [ null, %139 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_140_105) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_142_cur_output_12 = __ConvertDate_134_135_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %142*/
/*   %cur_output.12 = phi i8* [ %135, %140 ], [ null, %139 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_139_103) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_142_cur_output_12_reg <= __ConvertDate_142_cur_output_12;
if (reset == 1'b0 && ^(__ConvertDate_142_cur_output_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_142_cur_output_12_reg"); $finish; end
end
/* __ConvertDate: %142*/
/*   %cur_output.12 = phi i8* [ %135, %140 ], [ null, %139 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_140_105) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_142_cur_output_12_reg <= __ConvertDate_142_cur_output_12;
if (reset == 1'b0 && ^(__ConvertDate_142_cur_output_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_142_cur_output_12_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %142*/
/*   %143 = add nsw i32 %.03, 2*/
begin
__ConvertDate_142_143 = (__ConvertDate_2__03_reg + 32'd2);
end
end
always @(posedge clk) begin
/* __ConvertDate: %142*/
/*   %143 = add nsw i32 %.03, 2*/
if ((cur_state == LEGUP_F___ConvertDate_BB_142_106))
begin
__ConvertDate_142_143_reg <= __ConvertDate_142_143;
if (reset == 1'b0 && ^(__ConvertDate_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_142_143_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_indvar = 32'd0;
end
/* __ConvertDate: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__preheader_indvar = __ConvertDate__preheader_tmp_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_indvar_reg <= __ConvertDate__preheader_indvar;
if (reset == 1'b0 && ^(__ConvertDate__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_indvar_reg"); $finish; end
end
/* __ConvertDate: %.preheader*/
/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %tmp, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_indvar_reg <= __ConvertDate__preheader_indvar;
if (reset == 1'b0 && ^(__ConvertDate__preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_indvar_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader*/
/*   %cur_output.13 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.13.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_cur_output_13 = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %.preheader*/
/*   %cur_output.13 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.13.be, %.preheader.backedge ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__preheader_cur_output_13 = __ConvertDate__preheader_backedge_cur_output_13_be_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader*/
/*   %cur_output.13 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.13.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_preheader_7) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_cur_output_13_reg <= __ConvertDate__preheader_cur_output_13;
if (reset == 1'b0 && ^(__ConvertDate__preheader_cur_output_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_cur_output_13_reg"); $finish; end
end
/* __ConvertDate: %.preheader*/
/*   %cur_output.13 = phi i8* [ %cur_output.0, %.preheader.preheader ], [ %cur_output.13.be, %.preheader.backedge ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__preheader_backedge_113) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_cur_output_13_reg <= __ConvertDate__preheader_cur_output_13;
if (reset == 1'b0 && ^(__ConvertDate__preheader_cur_output_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_cur_output_13_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader*/
/*   %tmp = add i32 %indvar, 1*/
begin
__ConvertDate__preheader_tmp = (__ConvertDate__preheader_indvar_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader*/
/*   %tmp = add i32 %indvar, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_107))
begin
__ConvertDate__preheader_tmp_reg <= __ConvertDate__preheader_tmp;
if (reset == 1'b0 && ^(__ConvertDate__preheader_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_tmp_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader*/
/*   %cur_char.1 = getelementptr i8* %cur_char.0, i32 %tmp*/
begin
__ConvertDate__preheader_cur_char_1 = (__ConvertDate_2_cur_char_0_reg + (1 * __ConvertDate__preheader_tmp_reg));
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader*/
/*   %cur_char.1 = getelementptr i8* %cur_char.0, i32 %tmp*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_108))
begin
__ConvertDate__preheader_cur_char_1_reg <= __ConvertDate__preheader_cur_char_1;
if (reset == 1'b0 && ^(__ConvertDate__preheader_cur_char_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_cur_char_1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
begin
__ConvertDate__preheader_144 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_110))
begin
__ConvertDate__preheader_144_reg <= __ConvertDate__preheader_144;
if (reset == 1'b0 && ^(__ConvertDate__preheader_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_144_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %145*/
/*   %146 = icmp ne i8* %cur_output.13, null*/
begin
__ConvertDate_145_146 = (__ConvertDate__preheader_cur_output_13_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %145*/
/*   %146 = icmp ne i8* %cur_output.13, null*/
if ((cur_state == LEGUP_F___ConvertDate_BB_145_111))
begin
__ConvertDate_145_146_reg <= __ConvertDate_145_146;
if (reset == 1'b0 && ^(__ConvertDate_145_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_145_146_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %145*/
/*   %147 = icmp eq i8* %cur_output.13, %1*/
begin
__ConvertDate_145_147 = (__ConvertDate__preheader_cur_output_13_reg == __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %145*/
/*   %147 = icmp eq i8* %cur_output.13, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_145_111))
begin
__ConvertDate_145_147_reg <= __ConvertDate_145_147;
if (reset == 1'b0 && ^(__ConvertDate_145_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_145_147_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %145*/
/*   %or.cond18 = and i1 %146, %147*/
begin
__ConvertDate_145_or_cond18 = (__ConvertDate_145_146 & __ConvertDate_145_147);
end
end
always @(posedge clk) begin
/* __ConvertDate: %145*/
/*   %or.cond18 = and i1 %146, %147*/
if ((cur_state == LEGUP_F___ConvertDate_BB_145_111))
begin
__ConvertDate_145_or_cond18_reg <= __ConvertDate_145_or_cond18;
if (reset == 1'b0 && ^(__ConvertDate_145_or_cond18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_145_or_cond18_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge2*/
/*   %148 = icmp eq i8* %cur_output.13, null*/
begin
__ConvertDate__critedge2_148 = (__ConvertDate__preheader_cur_output_13_reg == 0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge2*/
/*   %148 = icmp eq i8* %cur_output.13, null*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112))
begin
__ConvertDate__critedge2_148_reg <= __ConvertDate__critedge2_148;
if (reset == 1'b0 && ^(__ConvertDate__critedge2_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge2_148_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.preheader.backedge*/
/*   %cur_output.13.be = phi i8* [ null, %.critedge2 ], [ %150, %149 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge2_148 == 1'd1)))
begin
__ConvertDate__preheader_backedge_cur_output_13_be = 0;
end
/* __ConvertDate: %.preheader.backedge*/
/*   %cur_output.13.be = phi i8* [ null, %.critedge2 ], [ %150, %149 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_149_115) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__preheader_backedge_cur_output_13_be = __ConvertDate_149_150_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.preheader.backedge*/
/*   %cur_output.13.be = phi i8* [ null, %.critedge2 ], [ %150, %149 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge2_112) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge2_148 == 1'd1)))
begin
__ConvertDate__preheader_backedge_cur_output_13_be_reg <= __ConvertDate__preheader_backedge_cur_output_13_be;
if (reset == 1'b0 && ^(__ConvertDate__preheader_backedge_cur_output_13_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_backedge_cur_output_13_be_reg"); $finish; end
end
/* __ConvertDate: %.preheader.backedge*/
/*   %cur_output.13.be = phi i8* [ null, %.critedge2 ], [ %150, %149 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_149_115) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__preheader_backedge_cur_output_13_be_reg <= __ConvertDate__preheader_backedge_cur_output_13_be;
if (reset == 1'b0 && ^(__ConvertDate__preheader_backedge_cur_output_13_be) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__preheader_backedge_cur_output_13_be_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %149*/
/*   %150 = getelementptr inbounds i8* %cur_output.13, i32 1*/
begin
__ConvertDate_149_150 = (__ConvertDate__preheader_cur_output_13_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %149*/
/*   %150 = getelementptr inbounds i8* %cur_output.13, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
__ConvertDate_149_150_reg <= __ConvertDate_149_150;
if (reset == 1'b0 && ^(__ConvertDate_149_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_149_150_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
begin
__ConvertDate_152_153 = memory_controller_out_a[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
__ConvertDate_152_153_reg <= __ConvertDate_152_153;
if (reset == 1'b0 && ^(__ConvertDate_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_152_153_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %152*/
/*   %154 = getelementptr inbounds i8* %cur_output.0, i32 1*/
begin
__ConvertDate_152_154 = (__ConvertDate_2_cur_output_0_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %152*/
/*   %154 = getelementptr inbounds i8* %cur_output.0, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_117))
begin
__ConvertDate_152_154_reg <= __ConvertDate_152_154;
if (reset == 1'b0 && ^(__ConvertDate_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_152_154_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %155*/
/*   %cur_output.15 = phi i8* [ %154, %152 ], [ null, %151 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_151_116) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_155_cur_output_15 = 0;
end
/* __ConvertDate: %155*/
/*   %cur_output.15 = phi i8* [ %154, %152 ], [ null, %151 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_152_120) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_155_cur_output_15 = __ConvertDate_152_154_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %155*/
/*   %cur_output.15 = phi i8* [ %154, %152 ], [ null, %151 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_151_116) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_6_reg == 1'd0)))
begin
__ConvertDate_155_cur_output_15_reg <= __ConvertDate_155_cur_output_15;
if (reset == 1'b0 && ^(__ConvertDate_155_cur_output_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_155_cur_output_15_reg"); $finish; end
end
/* __ConvertDate: %155*/
/*   %cur_output.15 = phi i8* [ %154, %152 ], [ null, %151 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_152_120) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_155_cur_output_15_reg <= __ConvertDate_155_cur_output_15;
if (reset == 1'b0 && ^(__ConvertDate_155_cur_output_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_155_cur_output_15_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %155*/
/*   %156 = add nsw i32 %.03, 1*/
begin
__ConvertDate_155_156 = (__ConvertDate_2__03_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %155*/
/*   %156 = add nsw i32 %.03, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_155_121))
begin
__ConvertDate_155_156_reg <= __ConvertDate_155_156;
if (reset == 1'b0 && ^(__ConvertDate_155_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_155_156_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge.loopexit*/
/*   %.1 = add i32 %.03, %indvar*/
begin
__ConvertDate__critedge_loopexit__1 = (__ConvertDate_2__03_reg + __ConvertDate__preheader_indvar_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge.loopexit*/
/*   %.1 = add i32 %.03, %indvar*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122))
begin
__ConvertDate__critedge_loopexit__1_reg <= __ConvertDate__critedge_loopexit__1;
if (reset == 1'b0 && ^(__ConvertDate__critedge_loopexit__1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_loopexit__1_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_30_31;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_35_36;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_40_41;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_51_52;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_73_74;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_78_79;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_83_84;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_94_95;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_116_117;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_121_122;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_132_133;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_142_143;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2 = __ConvertDate_155_156;
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__critedge__2 = __ConvertDate__critedge_loopexit__1;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %.2 = phi i32 [ %156, %155 ], [ %143, %142 ], [ %117, %116 ], [ %122, %121 ], [ %133, %132 ], [ %74, %73 ], [ %79, %78 ], [ %84, %83 ], [ %95, %94 ], [ %31, %30 ], [ %36, %35 ], [ %41, %40 ], [ %52, %51 ], [ %.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge__2_reg <= __ConvertDate__critedge__2;
if (reset == 1'b0 && ^(__ConvertDate__critedge__2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge__2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_23_24_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_19_20_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_10_11_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_66_67_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_62_63_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_53_54_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_109_110_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_96_97_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__critedge_cur_char_2 = __ConvertDate__preheader_cur_char_1_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_char.2 = phi i8* [ %cur_char.0, %155 ], [ %cur_char.0, %142 ], [ %110, %116 ], [ %97, %121 ], [ %cur_char.0, %132 ], [ %67, %73 ], [ %63, %78 ], [ %54, %83 ], [ %cur_char.0, %94 ], [ %24, %30 ], [ %20, %35 ], [ %11, %40 ], [ %cur_char.0, %51 ], [ %cur_char.1, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_char_2_reg <= __ConvertDate__critedge_cur_char_2;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_char_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_char_2_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_30_cur_output_1_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_35_cur_output_2_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_40_cur_output_3_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_51_cur_output_4_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_73_cur_output_5_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_78_cur_output_6_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_83_cur_output_7_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_94_cur_output_8_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_116_cur_output_9_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_121_cur_output_10_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_132_cur_output_11_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_142_cur_output_12_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate_155_cur_output_15_reg;
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate__critedge_cur_output_16 = __ConvertDate__preheader_cur_output_13_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_30_23) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_35_27) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_40_31) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_51_39) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_73_55) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_78_59) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_83_63) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_94_71) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_116_87) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_121_91) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_132_99) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_142_106) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_155_121) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
/* __ConvertDate: %.critedge*/
/*   %cur_output.16 = phi i8* [ %cur_output.15, %155 ], [ %cur_output.12, %142 ], [ %cur_output.9, %116 ], [ %cur_output.10, %121 ], [ %cur_output.11, %132 ], [ %cur_output.5, %73 ], [ %cur_output.6, %78 ], [ %cur_output.7, %83 ], [ %cur_output.8, %94 ], [ %cur_output.1, %30 ], [ %cur_output.2, %35 ], [ %cur_output.3, %40 ], [ %cur_output.4, %51 ], [ %cur_output.13, %.critedge.loopexit ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB__critedge_loopexit_122) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate__critedge_cur_output_16_reg <= __ConvertDate__critedge_cur_output_16;
if (reset == 1'b0 && ^(__ConvertDate__critedge_cur_output_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_cur_output_16_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
begin
__ConvertDate__critedge_157 = memory_controller_out_b[7:0];
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_125))
begin
__ConvertDate__critedge_157_reg <= __ConvertDate__critedge_157;
if (reset == 1'b0 && ^(__ConvertDate__critedge_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_157_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %.critedge*/
/*   %158 = icmp eq i8 %157, 0*/
begin
__ConvertDate__critedge_158 = (__ConvertDate__critedge_157 == 8'd0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %.critedge*/
/*   %158 = icmp eq i8 %157, 0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_125))
begin
__ConvertDate__critedge_158_reg <= __ConvertDate__critedge_158;
if (reset == 1'b0 && ^(__ConvertDate__critedge_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate__critedge_158_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %159*/
/*   %160 = getelementptr inbounds i8* %cur_char.2, i32 1*/
begin
__ConvertDate_159_160 = (__ConvertDate__critedge_cur_char_2_reg + (1 * 32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %159*/
/*   %160 = getelementptr inbounds i8* %cur_char.2, i32 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_159_126))
begin
__ConvertDate_159_160_reg <= __ConvertDate_159_160;
if (reset == 1'b0 && ^(__ConvertDate_159_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_159_160_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd1)))
begin
__ConvertDate_161__3 = __ConvertDate_2__03_reg;
end
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
else if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd1)))
begin
__ConvertDate_161__3 = __ConvertDate_2__03_reg;
end
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
else /* if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd1))) */
begin
__ConvertDate_161__3 = __ConvertDate__critedge__2_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd1)))
begin
__ConvertDate_161__3_reg <= __ConvertDate_161__3;
if (reset == 1'b0 && ^(__ConvertDate_161__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161__3_reg"); $finish; end
end
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd1)))
begin
__ConvertDate_161__3_reg <= __ConvertDate_161__3;
if (reset == 1'b0 && ^(__ConvertDate_161__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161__3_reg"); $finish; end
end
/* __ConvertDate: %161*/
/*   %.3 = phi i32 [ %.2, %.critedge ], [ %.03, %2 ], [ %.03, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd1)))
begin
__ConvertDate_161__3_reg <= __ConvertDate_161__3;
if (reset == 1'b0 && ^(__ConvertDate_161__3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161__3_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd1)))
begin
__ConvertDate_161_cur_output_17 = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
else if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd1)))
begin
__ConvertDate_161_cur_output_17 = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
else /* if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd1))) */
begin
__ConvertDate_161_cur_output_17 = __ConvertDate__critedge_cur_output_16_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_2_4) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_2_4 == 1'd1)))
begin
__ConvertDate_161_cur_output_17_reg <= __ConvertDate_161_cur_output_17;
if (reset == 1'b0 && ^(__ConvertDate_161_cur_output_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_cur_output_17_reg"); $finish; end
end
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB_5_5) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_5_or_cond == 1'd1)))
begin
__ConvertDate_161_cur_output_17_reg <= __ConvertDate_161_cur_output_17;
if (reset == 1'b0 && ^(__ConvertDate_161_cur_output_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_cur_output_17_reg"); $finish; end
end
/* __ConvertDate: %161*/
/*   %cur_output.17 = phi i8* [ %cur_output.16, %.critedge ], [ %cur_output.0, %2 ], [ %cur_output.0, %5 ]*/
if ((((cur_state == LEGUP_F___ConvertDate_BB__critedge_125) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate__critedge_158 == 1'd1)))
begin
__ConvertDate_161_cur_output_17_reg <= __ConvertDate_161_cur_output_17;
if (reset == 1'b0 && ^(__ConvertDate_161_cur_output_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_cur_output_17_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %161*/
/*   %162 = icmp ne i8* %cur_output.17, null*/
begin
__ConvertDate_161_162 = (__ConvertDate_161_cur_output_17_reg != 0);
end
end
always @(posedge clk) begin
/* __ConvertDate: %161*/
/*   %162 = icmp ne i8* %cur_output.17, null*/
if ((cur_state == LEGUP_F___ConvertDate_BB_161_127))
begin
__ConvertDate_161_162_reg <= __ConvertDate_161_162;
if (reset == 1'b0 && ^(__ConvertDate_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_162_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %161*/
/*   %163 = icmp eq i8* %cur_output.17, %1*/
begin
__ConvertDate_161_163 = (__ConvertDate_161_cur_output_17_reg == __ConvertDate_0_1_reg);
end
end
always @(posedge clk) begin
/* __ConvertDate: %161*/
/*   %163 = icmp eq i8* %cur_output.17, %1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_161_127))
begin
__ConvertDate_161_163_reg <= __ConvertDate_161_163;
if (reset == 1'b0 && ^(__ConvertDate_161_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_163_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %161*/
/*   %or.cond19 = and i1 %162, %163*/
begin
__ConvertDate_161_or_cond19 = (__ConvertDate_161_162 & __ConvertDate_161_163);
end
end
always @(posedge clk) begin
/* __ConvertDate: %161*/
/*   %or.cond19 = and i1 %162, %163*/
if ((cur_state == LEGUP_F___ConvertDate_BB_161_127))
begin
__ConvertDate_161_or_cond19_reg <= __ConvertDate_161_or_cond19;
if (reset == 1'b0 && ^(__ConvertDate_161_or_cond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_161_or_cond19_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %166*/
/*   %167 = add nsw i32 %.3, 1*/
begin
__ConvertDate_166_167 = (__ConvertDate_161__3_reg + 32'd1);
end
end
always @(posedge clk) begin
/* __ConvertDate: %166*/
/*   %167 = add nsw i32 %.3, 1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_166_131))
begin
__ConvertDate_166_167_reg <= __ConvertDate_166_167;
if (reset == 1'b0 && ^(__ConvertDate_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_166_167_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %168*/
/*   %169 = getelementptr inbounds i8* %cur_output.17, i32 -1*/
begin
__ConvertDate_168_169 = (__ConvertDate_161_cur_output_17_reg + (1 * -32'd1));
end
end
always @(posedge clk) begin
/* __ConvertDate: %168*/
/*   %169 = getelementptr inbounds i8* %cur_output.17, i32 -1*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
__ConvertDate_168_169_reg <= __ConvertDate_168_169;
if (reset == 1'b0 && ^(__ConvertDate_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_168_169_reg"); $finish; end
end
end
always @(*) begin
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_17_13) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_17_18_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_45_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_45_46_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_60_45) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_60_61_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_88_66) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_88_89_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_103_77) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_103_104_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_126_94) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_126_127_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_137_102) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_137_138_reg;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else if (((cur_state == LEGUP_F___ConvertDate_BB_166_131) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0 = __ConvertDate_166_167;
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
else /* if (((cur_state == LEGUP_F___ConvertDate_BB_168_133) & (memory_controller_waitrequest == 1'd0))) */
begin
__ConvertDate_170__0 = __ConvertDate_161__3_reg;
end
end
always @(posedge clk) begin
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_17_13) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_45_34) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_60_45) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_88_66) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_103_77) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_126_94) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_137_102) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_166_131) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
/* __ConvertDate: %170*/
/*   %.0 = phi i32 [ %138, %137 ], [ %104, %103 ], [ %127, %126 ], [ %61, %60 ], [ %89, %88 ], [ %18, %17 ], [ %46, %45 ], [ %167, %166 ], [ %.3, %168 ]*/
if (((cur_state == LEGUP_F___ConvertDate_BB_168_133) & (memory_controller_waitrequest == 1'd0)))
begin
__ConvertDate_170__0_reg <= __ConvertDate_170__0;
if (reset == 1'b0 && ^(__ConvertDate_170__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_170__0_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* __ConvertDate: %170*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_170_134))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_2))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %28*/
/*   store i8 65, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %33*/
/*   store i8 97, i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %38*/
/*   store i8 100, i8* %39, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 35, i8* %49, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_40))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_49))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %71*/
/*   store i8 66, i8* %72, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %76*/
/*   store i8 98, i8* %77, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %81*/
/*   store i8 109, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 35, i8* %92, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %114*/
/*   store i8 89, i8* %115, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %119*/
/*   store i8 121, i8* %120, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 35, i8* %130, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %141, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_108))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_117))
begin
memory_controller_enable_a = 1'd1;
end
/* __ConvertDate: %168*/
/*   store i8 0, i8* %169, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_2))
begin
memory_controller_address_a = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %28*/
/*   store i8 65, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_address_a = __ConvertDate_28_29;
end
/* __ConvertDate: %33*/
/*   store i8 97, i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_address_a = __ConvertDate_33_34;
end
/* __ConvertDate: %38*/
/*   store i8 100, i8* %39, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_address_a = __ConvertDate_38_39;
end
/* __ConvertDate: %48*/
/*   store i8 35, i8* %49, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_address_a = __ConvertDate_48_49;
end
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_40))
begin
memory_controller_address_a = __ConvertDate_53_54;
end
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_49))
begin
memory_controller_address_a = __ConvertDate_66_67;
end
/* __ConvertDate: %71*/
/*   store i8 66, i8* %72, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_address_a = __ConvertDate_71_72;
end
/* __ConvertDate: %76*/
/*   store i8 98, i8* %77, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_address_a = __ConvertDate_76_77;
end
/* __ConvertDate: %81*/
/*   store i8 109, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_address_a = __ConvertDate_81_82;
end
/* __ConvertDate: %91*/
/*   store i8 35, i8* %92, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_address_a = __ConvertDate_91_92;
end
/* __ConvertDate: %114*/
/*   store i8 89, i8* %115, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_address_a = __ConvertDate_114_115;
end
/* __ConvertDate: %119*/
/*   store i8 121, i8* %120, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_address_a = __ConvertDate_119_120;
end
/* __ConvertDate: %129*/
/*   store i8 35, i8* %130, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_address_a = __ConvertDate_129_130;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %141, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_address_a = __ConvertDate_140_141;
end
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_108))
begin
memory_controller_address_a = __ConvertDate__preheader_cur_char_1;
end
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_117))
begin
memory_controller_address_a = __ConvertDate_2_cur_char_0_reg;
end
/* __ConvertDate: %168*/
/*   store i8 0, i8* %169, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
memory_controller_address_a = __ConvertDate_168_169;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %28*/
/*   store i8 65, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %33*/
/*   store i8 97, i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %38*/
/*   store i8 100, i8* %39, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 35, i8* %49, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_49))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %71*/
/*   store i8 66, i8* %72, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %76*/
/*   store i8 98, i8* %77, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %81*/
/*   store i8 109, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 35, i8* %92, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %114*/
/*   store i8 89, i8* %115, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %119*/
/*   store i8 121, i8* %120, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 35, i8* %130, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %141, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_write_enable_a = 1'd1;
end
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_108))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_117))
begin
memory_controller_write_enable_a = 1'd0;
end
/* __ConvertDate: %168*/
/*   store i8 0, i8* %169, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* __ConvertDate: %28*/
/*   store i8 65, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_in_a = 8'd65;
end
/* __ConvertDate: %33*/
/*   store i8 97, i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_in_a = 8'd97;
end
/* __ConvertDate: %38*/
/*   store i8 100, i8* %39, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_in_a = 8'd100;
end
/* __ConvertDate: %48*/
/*   store i8 35, i8* %49, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertDate: %71*/
/*   store i8 66, i8* %72, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_in_a = 8'd66;
end
/* __ConvertDate: %76*/
/*   store i8 98, i8* %77, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_in_a = 8'd98;
end
/* __ConvertDate: %81*/
/*   store i8 109, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_in_a = 8'd109;
end
/* __ConvertDate: %91*/
/*   store i8 35, i8* %92, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertDate: %114*/
/*   store i8 89, i8* %115, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_in_a = 8'd89;
end
/* __ConvertDate: %119*/
/*   store i8 121, i8* %120, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_in_a = 8'd121;
end
/* __ConvertDate: %129*/
/*   store i8 35, i8* %130, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_in_a = 8'd35;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %141, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_in_a = 8'd37;
end
/* __ConvertDate: %168*/
/*   store i8 0, i8* %169, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
memory_controller_in_a = 8'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* __ConvertDate: %2*/
/*   %3 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_2_2))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %28*/
/*   store i8 65, i8* %29, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %33*/
/*   store i8 97, i8* %34, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %38*/
/*   store i8 100, i8* %39, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %48*/
/*   store i8 35, i8* %49, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %53*/
/*   %55 = load i8* %54, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_53_40))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %66*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_66_49))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %71*/
/*   store i8 66, i8* %72, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %76*/
/*   store i8 98, i8* %77, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %81*/
/*   store i8 109, i8* %82, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %91*/
/*   store i8 35, i8* %92, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %114*/
/*   store i8 89, i8* %115, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %119*/
/*   store i8 121, i8* %120, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %129*/
/*   store i8 35, i8* %130, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %141, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %.preheader*/
/*   %144 = load i8* %cur_char.1, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__preheader_108))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %152*/
/*   %153 = load i8* %cur_char.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_117))
begin
memory_controller_size_a = 2'd0;
end
/* __ConvertDate: %168*/
/*   store i8 0, i8* %169, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_168_132))
begin
memory_controller_size_a = 2'd0;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_8))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %17*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_14))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_17))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %33*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %38*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %45*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 100, i8* %50, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_37))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %60*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_46))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %71*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %76*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %81*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %88*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 109, i8* %93, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_69))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_72))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_78))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_81))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %114*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %119*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %126*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 121, i8* %131, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_97))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %137*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %149*/
/*   store i8 %144, i8* %cur_output.13, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %152*/
/*   store i8 %153, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_123))
begin
memory_controller_enable_b = 1'd1;
end
/* __ConvertDate: %165*/
/*   store i8 0, i8* %cur_output.17, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_165_129))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_8))
begin
memory_controller_address_b = __ConvertDate_10_11;
end
/* __ConvertDate: %17*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_14))
begin
memory_controller_address_b = __ConvertDate_19_20;
end
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_17))
begin
memory_controller_address_b = __ConvertDate_23_24;
end
/* __ConvertDate: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %33*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %38*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %45*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %48*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %48*/
/*   store i8 100, i8* %50, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_37))
begin
memory_controller_address_b = __ConvertDate_48_50_reg;
end
/* __ConvertDate: %60*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_46))
begin
memory_controller_address_b = __ConvertDate_62_63;
end
/* __ConvertDate: %71*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %76*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %81*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %88*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %91*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %91*/
/*   store i8 109, i8* %93, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_69))
begin
memory_controller_address_b = __ConvertDate_91_93_reg;
end
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_72))
begin
memory_controller_address_b = __ConvertDate_96_97;
end
/* __ConvertDate: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_78))
begin
memory_controller_address_b = __ConvertDate_105_106;
end
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_81))
begin
memory_controller_address_b = __ConvertDate_109_110;
end
/* __ConvertDate: %114*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %119*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %126*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %129*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %129*/
/*   store i8 121, i8* %131, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_97))
begin
memory_controller_address_b = __ConvertDate_129_131_reg;
end
/* __ConvertDate: %137*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %149*/
/*   store i8 %144, i8* %cur_output.13, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
memory_controller_address_b = __ConvertDate__preheader_cur_output_13_reg;
end
/* __ConvertDate: %152*/
/*   store i8 %153, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
memory_controller_address_b = __ConvertDate_2_cur_output_0_reg;
end
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_123))
begin
memory_controller_address_b = __ConvertDate__critedge_cur_char_2_reg;
end
/* __ConvertDate: %165*/
/*   store i8 0, i8* %cur_output.17, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_165_129))
begin
memory_controller_address_b = __ConvertDate_161_cur_output_17_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_8))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %17*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %33*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %38*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %45*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %48*/
/*   store i8 100, i8* %50, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %60*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %71*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %76*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %81*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %88*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %91*/
/*   store i8 109, i8* %93, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_69))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %114*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %119*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %126*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %129*/
/*   store i8 121, i8* %131, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_97))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %137*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %149*/
/*   store i8 %144, i8* %cur_output.13, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %152*/
/*   store i8 %153, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
memory_controller_write_enable_b = 1'd1;
end
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_123))
begin
memory_controller_write_enable_b = 1'd0;
end
/* __ConvertDate: %165*/
/*   store i8 0, i8* %cur_output.17, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_165_129))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* __ConvertDate: %17*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %33*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %38*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %45*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %48*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %48*/
/*   store i8 100, i8* %50, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_37))
begin
memory_controller_in_b = 8'd100;
end
/* __ConvertDate: %60*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %71*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %76*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %81*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %88*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %91*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %91*/
/*   store i8 109, i8* %93, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_69))
begin
memory_controller_in_b = 8'd109;
end
/* __ConvertDate: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %114*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %119*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %126*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %129*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %129*/
/*   store i8 121, i8* %131, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_97))
begin
memory_controller_in_b = 8'd121;
end
/* __ConvertDate: %137*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
memory_controller_in_b = 8'd0;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_in_b = 8'd37;
end
/* __ConvertDate: %149*/
/*   store i8 %144, i8* %cur_output.13, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
memory_controller_in_b = __ConvertDate__preheader_144_reg;
end
/* __ConvertDate: %152*/
/*   store i8 %153, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
memory_controller_in_b = __ConvertDate_152_153;
end
/* __ConvertDate: %165*/
/*   store i8 0, i8* %cur_output.17, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_165_129))
begin
memory_controller_in_b = 8'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* __ConvertDate: %10*/
/*   %12 = load i8* %11, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_10_8))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %17*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_17_12))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %19*/
/*   %21 = load i8* %20, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_19_14))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %23*/
/*   %25 = load i8* %24, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_23_17))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %28*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_28_21))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %33*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_33_25))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %38*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_38_29))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %45*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_45_33))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %48*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_36))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %48*/
/*   store i8 100, i8* %50, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_48_37))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %60*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_60_44))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %62*/
/*   %64 = load i8* %63, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_62_46))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %71*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_71_53))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %76*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_76_57))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %81*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_81_61))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %88*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_88_65))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %91*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_68))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %91*/
/*   store i8 109, i8* %93, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_91_69))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %96*/
/*   %98 = load i8* %97, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_96_72))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %103*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_103_76))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %105*/
/*   %107 = load i8* %106, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_105_78))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %109*/
/*   %111 = load i8* %110, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_109_81))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %114*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_114_85))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %119*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_119_89))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %126*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_126_93))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %129*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_96))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %129*/
/*   store i8 121, i8* %131, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_129_97))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %137*/
/*   store i8 0, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_137_101))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %140*/
/*   store i8 37, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_140_104))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %149*/
/*   store i8 %144, i8* %cur_output.13, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_149_114))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %152*/
/*   store i8 %153, i8* %cur_output.0, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_152_119))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %.critedge*/
/*   %157 = load i8* %cur_char.2, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB__critedge_123))
begin
memory_controller_size_b = 2'd0;
end
/* __ConvertDate: %165*/
/*   store i8 0, i8* %cur_output.17, align 1, !tbaa !0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_165_129))
begin
memory_controller_size_b = 2'd0;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* __ConvertDate: %170*/
/*   ret i32 %.0*/
if ((cur_state == LEGUP_F___ConvertDate_BB_170_134))
begin
return_val <= __ConvertDate_170__0_reg;
if (reset == 1'b0 && ^(__ConvertDate_170__0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg [31:0] main_0_1;
reg [31:0] main_0_1_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  __ConvertDate_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_arg_NTDate;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_arg_buffer;
reg [31:0] __ConvertDate_arg_buf_size;
wire  __ConvertDate_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_memory_controller_address_a;
wire  __ConvertDate_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertDate_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertDate_memory_controller_out_a;
wire [1:0] __ConvertDate_memory_controller_size_a;
wire  __ConvertDate_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] __ConvertDate_memory_controller_address_b;
wire  __ConvertDate_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertDate_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] __ConvertDate_memory_controller_out_b;
wire [1:0] __ConvertDate_memory_controller_size_b;
reg  __ConvertDate_memory_controller_waitrequest;
wire  __ConvertDate_finish;
reg  __ConvertDate_finish_final;
wire [31:0] __ConvertDate_return_val;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


__ConvertDate __ConvertDate_inst (
	.memory_controller_enable_a (__ConvertDate_memory_controller_enable_a),
	.memory_controller_address_a (__ConvertDate_memory_controller_address_a),
	.memory_controller_write_enable_a (__ConvertDate_memory_controller_write_enable_a),
	.memory_controller_in_a (__ConvertDate_memory_controller_in_a),
	.memory_controller_size_a (__ConvertDate_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (__ConvertDate_memory_controller_enable_b),
	.memory_controller_address_b (__ConvertDate_memory_controller_address_b),
	.memory_controller_write_enable_b (__ConvertDate_memory_controller_write_enable_b),
	.memory_controller_in_b (__ConvertDate_memory_controller_in_b),
	.memory_controller_size_b (__ConvertDate_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (__ConvertDate_start),
	.finish (__ConvertDate_finish),
	.return_val (__ConvertDate_return_val),
	.arg_NTDate (__ConvertDate_arg_NTDate),
	.arg_buffer (__ConvertDate_arg_buffer),
	.arg_buf_size (__ConvertDate_arg_buf_size)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (__ConvertDate_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
begin
main_0_1 = __ConvertDate_return_val;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
main_0_1_reg <= main_0_1;
if (reset == 1'b0 && ^(main_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_1_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertDate_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_start"); $finish; end
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
__ConvertDate_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertDate_arg_NTDate <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_arg_NTDate"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertDate_arg_buffer <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_arg_buffer"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
__ConvertDate_arg_buf_size <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to __ConvertDate_arg_buf_size"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
begin
__ConvertDate_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
begin
__ConvertDate_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
__ConvertDate_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
__ConvertDate_finish_final = __ConvertDate_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = __ConvertDate_memory_controller_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = __ConvertDate_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertDate_memory_controller_address_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertDate_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = __ConvertDate_memory_controller_write_enable_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = __ConvertDate_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertDate_memory_controller_in_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertDate_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = __ConvertDate_memory_controller_size_a;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = __ConvertDate_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = __ConvertDate_memory_controller_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = __ConvertDate_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertDate_memory_controller_address_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = __ConvertDate_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = __ConvertDate_memory_controller_write_enable_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = __ConvertDate_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertDate_memory_controller_in_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = __ConvertDate_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = __ConvertDate_memory_controller_size_b;
end
/* main: %0*/
/*   %1 = tail call i32 @__ConvertDate(i8* undef, i8* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = __ConvertDate_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
