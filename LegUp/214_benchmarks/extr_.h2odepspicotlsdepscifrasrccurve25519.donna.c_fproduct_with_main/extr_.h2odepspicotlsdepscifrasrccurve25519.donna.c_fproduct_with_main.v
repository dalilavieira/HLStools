//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:50 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fproduct
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_output,
	arg_in2,
	arg_in
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_fproduct_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_fproduct_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_fproduct_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_fproduct_BB_0_4 = 8'd4;
parameter [7:0] LEGUP_F_fproduct_BB_0_5 = 8'd5;
parameter [7:0] LEGUP_F_fproduct_BB_0_6 = 8'd6;
parameter [7:0] LEGUP_F_fproduct_BB_0_7 = 8'd7;
parameter [7:0] LEGUP_F_fproduct_BB_0_8 = 8'd8;
parameter [7:0] LEGUP_F_fproduct_BB_0_9 = 8'd9;
parameter [7:0] LEGUP_F_fproduct_BB_0_10 = 8'd10;
parameter [7:0] LEGUP_F_fproduct_BB_0_11 = 8'd11;
parameter [7:0] LEGUP_F_fproduct_BB_0_12 = 8'd12;
parameter [7:0] LEGUP_F_fproduct_BB_0_13 = 8'd13;
parameter [7:0] LEGUP_F_fproduct_BB_0_14 = 8'd14;
parameter [7:0] LEGUP_F_fproduct_BB_0_15 = 8'd15;
parameter [7:0] LEGUP_F_fproduct_BB_0_16 = 8'd16;
parameter [7:0] LEGUP_F_fproduct_BB_0_17 = 8'd17;
parameter [7:0] LEGUP_F_fproduct_BB_0_18 = 8'd18;
parameter [7:0] LEGUP_F_fproduct_BB_0_19 = 8'd19;
parameter [7:0] LEGUP_F_fproduct_BB_0_20 = 8'd20;
parameter [7:0] LEGUP_F_fproduct_BB_0_21 = 8'd21;
parameter [7:0] LEGUP_F_fproduct_BB_0_22 = 8'd22;
parameter [7:0] LEGUP_F_fproduct_BB_0_23 = 8'd23;
parameter [7:0] LEGUP_F_fproduct_BB_0_24 = 8'd24;
parameter [7:0] LEGUP_F_fproduct_BB_0_25 = 8'd25;
parameter [7:0] LEGUP_F_fproduct_BB_0_26 = 8'd26;
parameter [7:0] LEGUP_F_fproduct_BB_0_27 = 8'd27;
parameter [7:0] LEGUP_F_fproduct_BB_0_28 = 8'd28;
parameter [7:0] LEGUP_F_fproduct_BB_0_29 = 8'd29;
parameter [7:0] LEGUP_F_fproduct_BB_0_30 = 8'd30;
parameter [7:0] LEGUP_F_fproduct_BB_0_31 = 8'd31;
parameter [7:0] LEGUP_F_fproduct_BB_0_32 = 8'd32;
parameter [7:0] LEGUP_F_fproduct_BB_0_33 = 8'd33;
parameter [7:0] LEGUP_F_fproduct_BB_0_34 = 8'd34;
parameter [7:0] LEGUP_F_fproduct_BB_0_35 = 8'd35;
parameter [7:0] LEGUP_F_fproduct_BB_0_36 = 8'd36;
parameter [7:0] LEGUP_F_fproduct_BB_0_37 = 8'd37;
parameter [7:0] LEGUP_F_fproduct_BB_0_38 = 8'd38;
parameter [7:0] LEGUP_F_fproduct_BB_0_39 = 8'd39;
parameter [7:0] LEGUP_F_fproduct_BB_0_40 = 8'd40;
parameter [7:0] LEGUP_F_fproduct_BB_0_41 = 8'd41;
parameter [7:0] LEGUP_F_fproduct_BB_0_42 = 8'd42;
parameter [7:0] LEGUP_F_fproduct_BB_0_43 = 8'd43;
parameter [7:0] LEGUP_F_fproduct_BB_0_44 = 8'd44;
parameter [7:0] LEGUP_F_fproduct_BB_0_45 = 8'd45;
parameter [7:0] LEGUP_F_fproduct_BB_0_46 = 8'd46;
parameter [7:0] LEGUP_F_fproduct_BB_0_47 = 8'd47;
parameter [7:0] LEGUP_F_fproduct_BB_0_48 = 8'd48;
parameter [7:0] LEGUP_F_fproduct_BB_0_49 = 8'd49;
parameter [7:0] LEGUP_F_fproduct_BB_0_50 = 8'd50;
parameter [7:0] LEGUP_F_fproduct_BB_0_51 = 8'd51;
parameter [7:0] LEGUP_F_fproduct_BB_0_52 = 8'd52;
parameter [7:0] LEGUP_F_fproduct_BB_0_53 = 8'd53;
parameter [7:0] LEGUP_F_fproduct_BB_0_54 = 8'd54;
parameter [7:0] LEGUP_F_fproduct_BB_0_55 = 8'd55;
parameter [7:0] LEGUP_F_fproduct_BB_0_56 = 8'd56;
parameter [7:0] LEGUP_F_fproduct_BB_0_57 = 8'd57;
parameter [7:0] LEGUP_F_fproduct_BB_0_58 = 8'd58;
parameter [7:0] LEGUP_F_fproduct_BB_0_59 = 8'd59;
parameter [7:0] LEGUP_F_fproduct_BB_0_60 = 8'd60;
parameter [7:0] LEGUP_F_fproduct_BB_0_61 = 8'd61;
parameter [7:0] LEGUP_F_fproduct_BB_0_62 = 8'd62;
parameter [7:0] LEGUP_F_fproduct_BB_0_63 = 8'd63;
parameter [7:0] LEGUP_F_fproduct_BB_0_64 = 8'd64;
parameter [7:0] LEGUP_F_fproduct_BB_0_65 = 8'd65;
parameter [7:0] LEGUP_F_fproduct_BB_0_66 = 8'd66;
parameter [7:0] LEGUP_F_fproduct_BB_0_67 = 8'd67;
parameter [7:0] LEGUP_F_fproduct_BB_0_68 = 8'd68;
parameter [7:0] LEGUP_F_fproduct_BB_0_69 = 8'd69;
parameter [7:0] LEGUP_F_fproduct_BB_0_70 = 8'd70;
parameter [7:0] LEGUP_F_fproduct_BB_0_71 = 8'd71;
parameter [7:0] LEGUP_F_fproduct_BB_0_72 = 8'd72;
parameter [7:0] LEGUP_F_fproduct_BB_0_73 = 8'd73;
parameter [7:0] LEGUP_F_fproduct_BB_0_74 = 8'd74;
parameter [7:0] LEGUP_F_fproduct_BB_0_75 = 8'd75;
parameter [7:0] LEGUP_F_fproduct_BB_0_76 = 8'd76;
parameter [7:0] LEGUP_F_fproduct_BB_0_77 = 8'd77;
parameter [7:0] LEGUP_F_fproduct_BB_0_78 = 8'd78;
parameter [7:0] LEGUP_F_fproduct_BB_0_79 = 8'd79;
parameter [7:0] LEGUP_F_fproduct_BB_0_80 = 8'd80;
parameter [7:0] LEGUP_F_fproduct_BB_0_81 = 8'd81;
parameter [7:0] LEGUP_F_fproduct_BB_0_82 = 8'd82;
parameter [7:0] LEGUP_F_fproduct_BB_0_83 = 8'd83;
parameter [7:0] LEGUP_F_fproduct_BB_0_84 = 8'd84;
parameter [7:0] LEGUP_F_fproduct_BB_0_85 = 8'd85;
parameter [7:0] LEGUP_F_fproduct_BB_0_86 = 8'd86;
parameter [7:0] LEGUP_F_fproduct_BB_0_87 = 8'd87;
parameter [7:0] LEGUP_F_fproduct_BB_0_88 = 8'd88;
parameter [7:0] LEGUP_F_fproduct_BB_0_89 = 8'd89;
parameter [7:0] LEGUP_F_fproduct_BB_0_90 = 8'd90;
parameter [7:0] LEGUP_F_fproduct_BB_0_91 = 8'd91;
parameter [7:0] LEGUP_F_fproduct_BB_0_92 = 8'd92;
parameter [7:0] LEGUP_F_fproduct_BB_0_93 = 8'd93;
parameter [7:0] LEGUP_F_fproduct_BB_0_94 = 8'd94;
parameter [7:0] LEGUP_F_fproduct_BB_0_95 = 8'd95;
parameter [7:0] LEGUP_F_fproduct_BB_0_96 = 8'd96;
parameter [7:0] LEGUP_F_fproduct_BB_0_97 = 8'd97;
parameter [7:0] LEGUP_F_fproduct_BB_0_98 = 8'd98;
parameter [7:0] LEGUP_F_fproduct_BB_0_99 = 8'd99;
parameter [7:0] LEGUP_F_fproduct_BB_0_100 = 8'd100;
parameter [7:0] LEGUP_F_fproduct_BB_0_101 = 8'd101;
parameter [7:0] LEGUP_F_fproduct_BB_0_102 = 8'd102;
parameter [7:0] LEGUP_F_fproduct_BB_0_103 = 8'd103;
parameter [7:0] LEGUP_F_fproduct_BB_0_104 = 8'd104;
parameter [7:0] LEGUP_F_fproduct_BB_0_105 = 8'd105;
parameter [7:0] LEGUP_F_fproduct_BB_0_106 = 8'd106;
parameter [7:0] LEGUP_F_fproduct_BB_0_107 = 8'd107;
parameter [7:0] LEGUP_F_fproduct_BB_0_108 = 8'd108;
parameter [7:0] LEGUP_F_fproduct_BB_0_109 = 8'd109;
parameter [7:0] LEGUP_F_fproduct_BB_0_110 = 8'd110;
parameter [7:0] LEGUP_F_fproduct_BB_0_111 = 8'd111;
parameter [7:0] LEGUP_F_fproduct_BB_0_112 = 8'd112;
parameter [7:0] LEGUP_F_fproduct_BB_0_113 = 8'd113;
parameter [7:0] LEGUP_F_fproduct_BB_0_114 = 8'd114;
parameter [7:0] LEGUP_F_fproduct_BB_0_115 = 8'd115;
parameter [7:0] LEGUP_F_fproduct_BB_0_116 = 8'd116;
parameter [7:0] LEGUP_F_fproduct_BB_0_117 = 8'd117;
parameter [7:0] LEGUP_F_fproduct_BB_0_118 = 8'd118;
parameter [7:0] LEGUP_F_fproduct_BB_0_119 = 8'd119;
parameter [7:0] LEGUP_F_fproduct_BB_0_120 = 8'd120;
parameter [7:0] LEGUP_F_fproduct_BB_0_121 = 8'd121;
parameter [7:0] LEGUP_F_fproduct_BB_0_122 = 8'd122;
parameter [7:0] LEGUP_F_fproduct_BB_0_123 = 8'd123;
parameter [7:0] LEGUP_F_fproduct_BB_0_124 = 8'd124;
parameter [7:0] LEGUP_F_fproduct_BB_0_125 = 8'd125;
parameter [7:0] LEGUP_F_fproduct_BB_0_126 = 8'd126;
parameter [7:0] LEGUP_F_fproduct_BB_0_127 = 8'd127;
parameter [7:0] LEGUP_F_fproduct_BB_0_128 = 8'd128;
parameter [7:0] LEGUP_F_fproduct_BB_0_129 = 8'd129;
parameter [7:0] LEGUP_F_fproduct_BB_0_130 = 8'd130;
parameter [7:0] LEGUP_F_fproduct_BB_0_131 = 8'd131;
parameter [7:0] LEGUP_F_fproduct_BB_0_132 = 8'd132;
parameter [7:0] LEGUP_F_fproduct_BB_0_133 = 8'd133;
parameter [7:0] LEGUP_F_fproduct_BB_0_134 = 8'd134;
parameter [7:0] LEGUP_F_fproduct_BB_0_135 = 8'd135;
parameter [7:0] LEGUP_F_fproduct_BB_0_136 = 8'd136;
parameter [7:0] LEGUP_F_fproduct_BB_0_137 = 8'd137;
parameter [7:0] LEGUP_F_fproduct_BB_0_138 = 8'd138;
parameter [7:0] LEGUP_F_fproduct_BB_0_139 = 8'd139;
parameter [7:0] LEGUP_F_fproduct_BB_0_140 = 8'd140;
parameter [7:0] LEGUP_F_fproduct_BB_0_141 = 8'd141;
parameter [7:0] LEGUP_F_fproduct_BB_0_142 = 8'd142;
parameter [7:0] LEGUP_F_fproduct_BB_0_143 = 8'd143;
parameter [7:0] LEGUP_F_fproduct_BB_0_144 = 8'd144;
parameter [7:0] LEGUP_F_fproduct_BB_0_145 = 8'd145;
parameter [7:0] LEGUP_F_fproduct_BB_0_146 = 8'd146;
parameter [7:0] LEGUP_F_fproduct_BB_0_147 = 8'd147;
parameter [7:0] LEGUP_F_fproduct_BB_0_148 = 8'd148;
parameter [7:0] LEGUP_F_fproduct_BB_0_149 = 8'd149;
parameter [7:0] LEGUP_F_fproduct_BB_0_150 = 8'd150;
parameter [7:0] LEGUP_F_fproduct_BB_0_151 = 8'd151;
parameter [7:0] LEGUP_F_fproduct_BB_0_152 = 8'd152;
parameter [7:0] LEGUP_F_fproduct_BB_0_153 = 8'd153;
parameter [7:0] LEGUP_F_fproduct_BB_0_154 = 8'd154;
parameter [7:0] LEGUP_F_fproduct_BB_0_155 = 8'd155;
parameter [7:0] LEGUP_F_fproduct_BB_0_156 = 8'd156;
parameter [7:0] LEGUP_F_fproduct_BB_0_157 = 8'd157;
parameter [7:0] LEGUP_F_fproduct_BB_0_158 = 8'd158;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_output;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in2;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
reg [7:0] cur_state;
reg [31:0] fproduct_0_1;
reg [31:0] fproduct_0_1_reg;
reg [31:0] fproduct_0_2;
reg [31:0] fproduct_0_2_reg;
reg [31:0] fproduct_0_3;
reg [31:0] fproduct_0_3_reg;
reg [31:0] fproduct_0_4;
reg [31:0] fproduct_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_5_reg;
reg [31:0] fproduct_0_6;
reg [31:0] fproduct_0_6_reg;
reg [31:0] fproduct_0_7;
reg [31:0] fproduct_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_8_reg;
reg [31:0] fproduct_0_9;
reg [31:0] fproduct_0_9_reg;
reg [31:0] fproduct_0_10;
reg [31:0] fproduct_0_10_reg;
reg [31:0] fproduct_0_11;
reg [31:0] fproduct_0_11_reg;
reg [31:0] fproduct_0_12;
reg [31:0] fproduct_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_13_reg;
reg [31:0] fproduct_0_14;
reg [31:0] fproduct_0_14_reg;
reg [31:0] fproduct_0_15;
reg [31:0] fproduct_0_15_reg;
reg [31:0] fproduct_0_16;
reg [31:0] fproduct_0_16_reg;
reg [31:0] fproduct_0_17;
reg [31:0] fproduct_0_17_reg;
reg [31:0] fproduct_0_18;
reg [31:0] fproduct_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_19_reg;
reg [31:0] fproduct_0_20;
reg [31:0] fproduct_0_20_reg;
reg [31:0] fproduct_0_21;
reg [31:0] fproduct_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_22_reg;
reg [31:0] fproduct_0_23;
reg [31:0] fproduct_0_23_reg;
reg [31:0] fproduct_0_24;
reg [31:0] fproduct_0_24_reg;
reg [31:0] fproduct_0_25;
reg [31:0] fproduct_0_25_reg;
reg [31:0] fproduct_0_26;
reg [31:0] fproduct_0_26_reg;
reg [31:0] fproduct_0_27;
reg [31:0] fproduct_0_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_28_reg;
reg [31:0] fproduct_0_29;
reg [31:0] fproduct_0_29_reg;
reg [31:0] fproduct_0_30;
reg [31:0] fproduct_0_30_reg;
reg [31:0] fproduct_0_31;
reg [31:0] fproduct_0_31_reg;
reg [31:0] fproduct_0_32;
reg [31:0] fproduct_0_32_reg;
reg [31:0] fproduct_0_33;
reg [31:0] fproduct_0_33_reg;
reg [31:0] fproduct_0_34;
reg [31:0] fproduct_0_34_reg;
reg [31:0] fproduct_0_35;
reg [31:0] fproduct_0_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_36_reg;
reg [31:0] fproduct_0_37;
reg [31:0] fproduct_0_37_reg;
reg [31:0] fproduct_0_38;
reg [31:0] fproduct_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_39_reg;
reg [31:0] fproduct_0_40;
reg [31:0] fproduct_0_40_reg;
reg [31:0] fproduct_0_41;
reg [31:0] fproduct_0_41_reg;
reg [31:0] fproduct_0_42;
reg [31:0] fproduct_0_42_reg;
reg [31:0] fproduct_0_43;
reg [31:0] fproduct_0_43_reg;
reg [31:0] fproduct_0_44;
reg [31:0] fproduct_0_44_reg;
reg [31:0] fproduct_0_45;
reg [31:0] fproduct_0_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_46_reg;
reg [31:0] fproduct_0_47;
reg [31:0] fproduct_0_47_reg;
reg [31:0] fproduct_0_48;
reg [31:0] fproduct_0_48_reg;
reg [31:0] fproduct_0_49;
reg [31:0] fproduct_0_49_reg;
reg [31:0] fproduct_0_50;
reg [31:0] fproduct_0_50_reg;
reg [31:0] fproduct_0_51;
reg [31:0] fproduct_0_51_reg;
reg [31:0] fproduct_0_52;
reg [31:0] fproduct_0_52_reg;
reg [31:0] fproduct_0_53;
reg [31:0] fproduct_0_53_reg;
reg [31:0] fproduct_0_54;
reg [31:0] fproduct_0_54_reg;
reg [31:0] fproduct_0_55;
reg [31:0] fproduct_0_55_reg;
reg [31:0] fproduct_0_56;
reg [31:0] fproduct_0_56_reg;
reg [31:0] fproduct_0_57;
reg [31:0] fproduct_0_57_reg;
reg [31:0] fproduct_0_58;
reg [31:0] fproduct_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_59_reg;
reg [31:0] fproduct_0_60;
reg [31:0] fproduct_0_60_reg;
reg [31:0] fproduct_0_61;
reg [31:0] fproduct_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_62_reg;
reg [31:0] fproduct_0_63;
reg [31:0] fproduct_0_63_reg;
reg [31:0] fproduct_0_64;
reg [31:0] fproduct_0_64_reg;
reg [31:0] fproduct_0_65;
reg [31:0] fproduct_0_65_reg;
reg [31:0] fproduct_0_66;
reg [31:0] fproduct_0_66_reg;
reg [31:0] fproduct_0_67;
reg [31:0] fproduct_0_67_reg;
reg [31:0] fproduct_0_68;
reg [31:0] fproduct_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_69_reg;
reg [31:0] fproduct_0_70;
reg [31:0] fproduct_0_70_reg;
reg [31:0] fproduct_0_71;
reg [31:0] fproduct_0_71_reg;
reg [31:0] fproduct_0_72;
reg [31:0] fproduct_0_72_reg;
reg [31:0] fproduct_0_73;
reg [31:0] fproduct_0_73_reg;
reg [31:0] fproduct_0_74;
reg [31:0] fproduct_0_74_reg;
reg [31:0] fproduct_0_75;
reg [31:0] fproduct_0_75_reg;
reg [31:0] fproduct_0_76;
reg [31:0] fproduct_0_76_reg;
reg [31:0] fproduct_0_77;
reg [31:0] fproduct_0_77_reg;
reg [31:0] fproduct_0_78;
reg [31:0] fproduct_0_78_reg;
reg [31:0] fproduct_0_79;
reg [31:0] fproduct_0_79_reg;
reg [31:0] fproduct_0_80;
reg [31:0] fproduct_0_80_reg;
reg [31:0] fproduct_0_81;
reg [31:0] fproduct_0_81_reg;
reg [31:0] fproduct_0_82;
reg [31:0] fproduct_0_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_83_reg;
reg [31:0] fproduct_0_84;
reg [31:0] fproduct_0_84_reg;
reg [31:0] fproduct_0_85;
reg [31:0] fproduct_0_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_86_reg;
reg [31:0] fproduct_0_87;
reg [31:0] fproduct_0_87_reg;
reg [31:0] fproduct_0_88;
reg [31:0] fproduct_0_88_reg;
reg [31:0] fproduct_0_89;
reg [31:0] fproduct_0_89_reg;
reg [31:0] fproduct_0_90;
reg [31:0] fproduct_0_90_reg;
reg [31:0] fproduct_0_91;
reg [31:0] fproduct_0_91_reg;
reg [31:0] fproduct_0_92;
reg [31:0] fproduct_0_92_reg;
reg [31:0] fproduct_0_93;
reg [31:0] fproduct_0_93_reg;
reg [31:0] fproduct_0_94;
reg [31:0] fproduct_0_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_95_reg;
reg [31:0] fproduct_0_96;
reg [31:0] fproduct_0_96_reg;
reg [31:0] fproduct_0_97;
reg [31:0] fproduct_0_97_reg;
reg [31:0] fproduct_0_98;
reg [31:0] fproduct_0_98_reg;
reg [31:0] fproduct_0_99;
reg [31:0] fproduct_0_99_reg;
reg [31:0] fproduct_0_100;
reg [31:0] fproduct_0_100_reg;
reg [31:0] fproduct_0_101;
reg [31:0] fproduct_0_101_reg;
reg [31:0] fproduct_0_102;
reg [31:0] fproduct_0_102_reg;
reg [31:0] fproduct_0_103;
reg [31:0] fproduct_0_103_reg;
reg [31:0] fproduct_0_104;
reg [31:0] fproduct_0_104_reg;
reg [31:0] fproduct_0_105;
reg [31:0] fproduct_0_105_reg;
reg [31:0] fproduct_0_106;
reg [31:0] fproduct_0_106_reg;
reg [31:0] fproduct_0_107;
reg [31:0] fproduct_0_107_reg;
reg [31:0] fproduct_0_108;
reg [31:0] fproduct_0_108_reg;
reg [31:0] fproduct_0_109;
reg [31:0] fproduct_0_109_reg;
reg [31:0] fproduct_0_110;
reg [31:0] fproduct_0_110_reg;
reg [31:0] fproduct_0_111;
reg [31:0] fproduct_0_111_reg;
reg [31:0] fproduct_0_112;
reg [31:0] fproduct_0_112_reg;
reg [31:0] fproduct_0_113;
reg [31:0] fproduct_0_113_reg;
reg [31:0] fproduct_0_114;
reg [31:0] fproduct_0_114_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_115_reg;
reg [31:0] fproduct_0_116;
reg [31:0] fproduct_0_116_reg;
reg [31:0] fproduct_0_117;
reg [31:0] fproduct_0_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_118_reg;
reg [31:0] fproduct_0_119;
reg [31:0] fproduct_0_119_reg;
reg [31:0] fproduct_0_120;
reg [31:0] fproduct_0_120_reg;
reg [31:0] fproduct_0_121;
reg [31:0] fproduct_0_121_reg;
reg [31:0] fproduct_0_122;
reg [31:0] fproduct_0_122_reg;
reg [31:0] fproduct_0_123;
reg [31:0] fproduct_0_123_reg;
reg [31:0] fproduct_0_124;
reg [31:0] fproduct_0_124_reg;
reg [31:0] fproduct_0_125;
reg [31:0] fproduct_0_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_126_reg;
reg [31:0] fproduct_0_127;
reg [31:0] fproduct_0_127_reg;
reg [31:0] fproduct_0_128;
reg [31:0] fproduct_0_128_reg;
reg [31:0] fproduct_0_129;
reg [31:0] fproduct_0_129_reg;
reg [31:0] fproduct_0_130;
reg [31:0] fproduct_0_130_reg;
reg [31:0] fproduct_0_131;
reg [31:0] fproduct_0_131_reg;
reg [31:0] fproduct_0_132;
reg [31:0] fproduct_0_132_reg;
reg [31:0] fproduct_0_133;
reg [31:0] fproduct_0_133_reg;
reg [31:0] fproduct_0_134;
reg [31:0] fproduct_0_134_reg;
reg [31:0] fproduct_0_135;
reg [31:0] fproduct_0_135_reg;
reg [31:0] fproduct_0_136;
reg [31:0] fproduct_0_136_reg;
reg [31:0] fproduct_0_137;
reg [31:0] fproduct_0_137_reg;
reg [31:0] fproduct_0_138;
reg [31:0] fproduct_0_138_reg;
reg [31:0] fproduct_0_139;
reg [31:0] fproduct_0_139_reg;
reg [31:0] fproduct_0_140;
reg [31:0] fproduct_0_140_reg;
reg [31:0] fproduct_0_141;
reg [31:0] fproduct_0_141_reg;
reg [31:0] fproduct_0_142;
reg [31:0] fproduct_0_142_reg;
reg [31:0] fproduct_0_143;
reg [31:0] fproduct_0_143_reg;
reg [31:0] fproduct_0_144;
reg [31:0] fproduct_0_144_reg;
reg [31:0] fproduct_0_145;
reg [31:0] fproduct_0_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_146_reg;
reg [31:0] fproduct_0_147;
reg [31:0] fproduct_0_147_reg;
reg [31:0] fproduct_0_148;
reg [31:0] fproduct_0_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_149_reg;
reg [31:0] fproduct_0_150;
reg [31:0] fproduct_0_150_reg;
reg [31:0] fproduct_0_151;
reg [31:0] fproduct_0_151_reg;
reg [31:0] fproduct_0_152;
reg [31:0] fproduct_0_152_reg;
reg [31:0] fproduct_0_153;
reg [31:0] fproduct_0_153_reg;
reg [31:0] fproduct_0_154;
reg [31:0] fproduct_0_154_reg;
reg [31:0] fproduct_0_155;
reg [31:0] fproduct_0_155_reg;
reg [31:0] fproduct_0_156;
reg [31:0] fproduct_0_156_reg;
reg [31:0] fproduct_0_157;
reg [31:0] fproduct_0_157_reg;
reg [31:0] fproduct_0_158;
reg [31:0] fproduct_0_158_reg;
reg [31:0] fproduct_0_159;
reg [31:0] fproduct_0_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_160_reg;
reg [31:0] fproduct_0_161;
reg [31:0] fproduct_0_161_reg;
reg [31:0] fproduct_0_162;
reg [31:0] fproduct_0_162_reg;
reg [31:0] fproduct_0_163;
reg [31:0] fproduct_0_163_reg;
reg [31:0] fproduct_0_164;
reg [31:0] fproduct_0_164_reg;
reg [31:0] fproduct_0_165;
reg [31:0] fproduct_0_165_reg;
reg [31:0] fproduct_0_166;
reg [31:0] fproduct_0_166_reg;
reg [31:0] fproduct_0_167;
reg [31:0] fproduct_0_167_reg;
reg [31:0] fproduct_0_168;
reg [31:0] fproduct_0_168_reg;
reg [31:0] fproduct_0_169;
reg [31:0] fproduct_0_169_reg;
reg [31:0] fproduct_0_170;
reg [31:0] fproduct_0_170_reg;
reg [31:0] fproduct_0_171;
reg [31:0] fproduct_0_171_reg;
reg [31:0] fproduct_0_172;
reg [31:0] fproduct_0_172_reg;
reg [31:0] fproduct_0_173;
reg [31:0] fproduct_0_173_reg;
reg [31:0] fproduct_0_174;
reg [31:0] fproduct_0_174_reg;
reg [31:0] fproduct_0_175;
reg [31:0] fproduct_0_175_reg;
reg [31:0] fproduct_0_176;
reg [31:0] fproduct_0_176_reg;
reg [31:0] fproduct_0_177;
reg [31:0] fproduct_0_177_reg;
reg [31:0] fproduct_0_178;
reg [31:0] fproduct_0_178_reg;
reg [31:0] fproduct_0_179;
reg [31:0] fproduct_0_179_reg;
reg [31:0] fproduct_0_180;
reg [31:0] fproduct_0_180_reg;
reg [31:0] fproduct_0_181;
reg [31:0] fproduct_0_181_reg;
reg [31:0] fproduct_0_182;
reg [31:0] fproduct_0_182_reg;
reg [31:0] fproduct_0_183;
reg [31:0] fproduct_0_183_reg;
reg [31:0] fproduct_0_184;
reg [31:0] fproduct_0_184_reg;
reg [31:0] fproduct_0_185;
reg [31:0] fproduct_0_185_reg;
reg [31:0] fproduct_0_186;
reg [31:0] fproduct_0_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_187_reg;
reg [31:0] fproduct_0_188;
reg [31:0] fproduct_0_188_reg;
reg [31:0] fproduct_0_189;
reg [31:0] fproduct_0_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_190_reg;
reg [31:0] fproduct_0_191;
reg [31:0] fproduct_0_191_reg;
reg [31:0] fproduct_0_192;
reg [31:0] fproduct_0_192_reg;
reg [31:0] fproduct_0_193;
reg [31:0] fproduct_0_193_reg;
reg [31:0] fproduct_0_194;
reg [31:0] fproduct_0_194_reg;
reg [31:0] fproduct_0_195;
reg [31:0] fproduct_0_195_reg;
reg [31:0] fproduct_0_196;
reg [31:0] fproduct_0_196_reg;
reg [31:0] fproduct_0_197;
reg [31:0] fproduct_0_197_reg;
reg [31:0] fproduct_0_198;
reg [31:0] fproduct_0_198_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_199_reg;
reg [31:0] fproduct_0_200;
reg [31:0] fproduct_0_200_reg;
reg [31:0] fproduct_0_201;
reg [31:0] fproduct_0_201_reg;
reg [31:0] fproduct_0_202;
reg [31:0] fproduct_0_202_reg;
reg [31:0] fproduct_0_203;
reg [31:0] fproduct_0_203_reg;
reg [31:0] fproduct_0_204;
reg [31:0] fproduct_0_204_reg;
reg [31:0] fproduct_0_205;
reg [31:0] fproduct_0_205_reg;
reg [31:0] fproduct_0_206;
reg [31:0] fproduct_0_206_reg;
reg [31:0] fproduct_0_207;
reg [31:0] fproduct_0_207_reg;
reg [31:0] fproduct_0_208;
reg [31:0] fproduct_0_208_reg;
reg [31:0] fproduct_0_209;
reg [31:0] fproduct_0_209_reg;
reg [31:0] fproduct_0_210;
reg [31:0] fproduct_0_210_reg;
reg [31:0] fproduct_0_211;
reg [31:0] fproduct_0_211_reg;
reg [31:0] fproduct_0_212;
reg [31:0] fproduct_0_212_reg;
reg [31:0] fproduct_0_213;
reg [31:0] fproduct_0_213_reg;
reg [31:0] fproduct_0_214;
reg [31:0] fproduct_0_214_reg;
reg [31:0] fproduct_0_215;
reg [31:0] fproduct_0_215_reg;
reg [31:0] fproduct_0_216;
reg [31:0] fproduct_0_216_reg;
reg [31:0] fproduct_0_217;
reg [31:0] fproduct_0_217_reg;
reg [31:0] fproduct_0_218;
reg [31:0] fproduct_0_218_reg;
reg [31:0] fproduct_0_219;
reg [31:0] fproduct_0_219_reg;
reg [31:0] fproduct_0_220;
reg [31:0] fproduct_0_220_reg;
reg [31:0] fproduct_0_221;
reg [31:0] fproduct_0_221_reg;
reg [31:0] fproduct_0_222;
reg [31:0] fproduct_0_222_reg;
reg [31:0] fproduct_0_223;
reg [31:0] fproduct_0_223_reg;
reg [31:0] fproduct_0_224;
reg [31:0] fproduct_0_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_225_reg;
reg [31:0] fproduct_0_226;
reg [31:0] fproduct_0_226_reg;
reg [31:0] fproduct_0_227;
reg [31:0] fproduct_0_227_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_228_reg;
reg [31:0] fproduct_0_229;
reg [31:0] fproduct_0_229_reg;
reg [31:0] fproduct_0_230;
reg [31:0] fproduct_0_230_reg;
reg [31:0] fproduct_0_231;
reg [31:0] fproduct_0_231_reg;
reg [31:0] fproduct_0_232;
reg [31:0] fproduct_0_232_reg;
reg [31:0] fproduct_0_233;
reg [31:0] fproduct_0_233_reg;
reg [31:0] fproduct_0_234;
reg [31:0] fproduct_0_234_reg;
reg [31:0] fproduct_0_235;
reg [31:0] fproduct_0_235_reg;
reg [31:0] fproduct_0_236;
reg [31:0] fproduct_0_236_reg;
reg [31:0] fproduct_0_237;
reg [31:0] fproduct_0_237_reg;
reg [31:0] fproduct_0_238;
reg [31:0] fproduct_0_238_reg;
reg [31:0] fproduct_0_239;
reg [31:0] fproduct_0_239_reg;
reg [31:0] fproduct_0_240;
reg [31:0] fproduct_0_240_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_241_reg;
reg [31:0] fproduct_0_242;
reg [31:0] fproduct_0_242_reg;
reg [31:0] fproduct_0_243;
reg [31:0] fproduct_0_243_reg;
reg [31:0] fproduct_0_244;
reg [31:0] fproduct_0_244_reg;
reg [31:0] fproduct_0_245;
reg [31:0] fproduct_0_245_reg;
reg [31:0] fproduct_0_246;
reg [31:0] fproduct_0_246_reg;
reg [31:0] fproduct_0_247;
reg [31:0] fproduct_0_247_reg;
reg [31:0] fproduct_0_248;
reg [31:0] fproduct_0_248_reg;
reg [31:0] fproduct_0_249;
reg [31:0] fproduct_0_249_reg;
reg [31:0] fproduct_0_250;
reg [31:0] fproduct_0_250_reg;
reg [31:0] fproduct_0_251;
reg [31:0] fproduct_0_251_reg;
reg [31:0] fproduct_0_252;
reg [31:0] fproduct_0_252_reg;
reg [31:0] fproduct_0_253;
reg [31:0] fproduct_0_253_reg;
reg [31:0] fproduct_0_254;
reg [31:0] fproduct_0_254_reg;
reg [31:0] fproduct_0_255;
reg [31:0] fproduct_0_255_reg;
reg [31:0] fproduct_0_256;
reg [31:0] fproduct_0_256_reg;
reg [31:0] fproduct_0_257;
reg [31:0] fproduct_0_257_reg;
reg [31:0] fproduct_0_258;
reg [31:0] fproduct_0_258_reg;
reg [31:0] fproduct_0_259;
reg [31:0] fproduct_0_259_reg;
reg [31:0] fproduct_0_260;
reg [31:0] fproduct_0_260_reg;
reg [31:0] fproduct_0_261;
reg [31:0] fproduct_0_261_reg;
reg [31:0] fproduct_0_262;
reg [31:0] fproduct_0_262_reg;
reg [31:0] fproduct_0_263;
reg [31:0] fproduct_0_263_reg;
reg [31:0] fproduct_0_264;
reg [31:0] fproduct_0_264_reg;
reg [31:0] fproduct_0_265;
reg [31:0] fproduct_0_265_reg;
reg [31:0] fproduct_0_266;
reg [31:0] fproduct_0_266_reg;
reg [31:0] fproduct_0_267;
reg [31:0] fproduct_0_267_reg;
reg [31:0] fproduct_0_268;
reg [31:0] fproduct_0_268_reg;
reg [31:0] fproduct_0_269;
reg [31:0] fproduct_0_269_reg;
reg [31:0] fproduct_0_270;
reg [31:0] fproduct_0_270_reg;
reg [31:0] fproduct_0_271;
reg [31:0] fproduct_0_271_reg;
reg [31:0] fproduct_0_272;
reg [31:0] fproduct_0_272_reg;
reg [31:0] fproduct_0_273;
reg [31:0] fproduct_0_273_reg;
reg [31:0] fproduct_0_274;
reg [31:0] fproduct_0_274_reg;
reg [31:0] fproduct_0_275;
reg [31:0] fproduct_0_275_reg;
reg [31:0] fproduct_0_276;
reg [31:0] fproduct_0_276_reg;
reg [31:0] fproduct_0_277;
reg [31:0] fproduct_0_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_278_reg;
reg [31:0] fproduct_0_279;
reg [31:0] fproduct_0_279_reg;
reg [31:0] fproduct_0_280;
reg [31:0] fproduct_0_280_reg;
reg [31:0] fproduct_0_281;
reg [31:0] fproduct_0_281_reg;
reg [31:0] fproduct_0_282;
reg [31:0] fproduct_0_282_reg;
reg [31:0] fproduct_0_283;
reg [31:0] fproduct_0_283_reg;
reg [31:0] fproduct_0_284;
reg [31:0] fproduct_0_284_reg;
reg [31:0] fproduct_0_285;
reg [31:0] fproduct_0_285_reg;
reg [31:0] fproduct_0_286;
reg [31:0] fproduct_0_286_reg;
reg [31:0] fproduct_0_287;
reg [31:0] fproduct_0_287_reg;
reg [31:0] fproduct_0_288;
reg [31:0] fproduct_0_288_reg;
reg [31:0] fproduct_0_289;
reg [31:0] fproduct_0_289_reg;
reg [31:0] fproduct_0_290;
reg [31:0] fproduct_0_290_reg;
reg [31:0] fproduct_0_291;
reg [31:0] fproduct_0_291_reg;
reg [31:0] fproduct_0_292;
reg [31:0] fproduct_0_292_reg;
reg [31:0] fproduct_0_293;
reg [31:0] fproduct_0_293_reg;
reg [31:0] fproduct_0_294;
reg [31:0] fproduct_0_294_reg;
reg [31:0] fproduct_0_295;
reg [31:0] fproduct_0_295_reg;
reg [31:0] fproduct_0_296;
reg [31:0] fproduct_0_296_reg;
reg [31:0] fproduct_0_297;
reg [31:0] fproduct_0_297_reg;
reg [31:0] fproduct_0_298;
reg [31:0] fproduct_0_298_reg;
reg [31:0] fproduct_0_299;
reg [31:0] fproduct_0_299_reg;
reg [31:0] fproduct_0_300;
reg [31:0] fproduct_0_300_reg;
reg [31:0] fproduct_0_301;
reg [31:0] fproduct_0_301_reg;
reg [31:0] fproduct_0_302;
reg [31:0] fproduct_0_302_reg;
reg [31:0] fproduct_0_303;
reg [31:0] fproduct_0_303_reg;
reg [31:0] fproduct_0_304;
reg [31:0] fproduct_0_304_reg;
reg [31:0] fproduct_0_305;
reg [31:0] fproduct_0_305_reg;
reg [31:0] fproduct_0_306;
reg [31:0] fproduct_0_306_reg;
reg [31:0] fproduct_0_307;
reg [31:0] fproduct_0_307_reg;
reg [31:0] fproduct_0_308;
reg [31:0] fproduct_0_308_reg;
reg [31:0] fproduct_0_309;
reg [31:0] fproduct_0_309_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_310;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_310_reg;
reg [31:0] fproduct_0_311;
reg [31:0] fproduct_0_311_reg;
reg [31:0] fproduct_0_312;
reg [31:0] fproduct_0_312_reg;
reg [31:0] fproduct_0_313;
reg [31:0] fproduct_0_313_reg;
reg [31:0] fproduct_0_314;
reg [31:0] fproduct_0_314_reg;
reg [31:0] fproduct_0_315;
reg [31:0] fproduct_0_315_reg;
reg [31:0] fproduct_0_316;
reg [31:0] fproduct_0_316_reg;
reg [31:0] fproduct_0_317;
reg [31:0] fproduct_0_317_reg;
reg [31:0] fproduct_0_318;
reg [31:0] fproduct_0_318_reg;
reg [31:0] fproduct_0_319;
reg [31:0] fproduct_0_319_reg;
reg [31:0] fproduct_0_320;
reg [31:0] fproduct_0_320_reg;
reg [31:0] fproduct_0_321;
reg [31:0] fproduct_0_321_reg;
reg [31:0] fproduct_0_322;
reg [31:0] fproduct_0_322_reg;
reg [31:0] fproduct_0_323;
reg [31:0] fproduct_0_323_reg;
reg [31:0] fproduct_0_324;
reg [31:0] fproduct_0_324_reg;
reg [31:0] fproduct_0_325;
reg [31:0] fproduct_0_325_reg;
reg [31:0] fproduct_0_326;
reg [31:0] fproduct_0_326_reg;
reg [31:0] fproduct_0_327;
reg [31:0] fproduct_0_327_reg;
reg [31:0] fproduct_0_328;
reg [31:0] fproduct_0_328_reg;
reg [31:0] fproduct_0_329;
reg [31:0] fproduct_0_329_reg;
reg [31:0] fproduct_0_330;
reg [31:0] fproduct_0_330_reg;
reg [31:0] fproduct_0_331;
reg [31:0] fproduct_0_331_reg;
reg [31:0] fproduct_0_332;
reg [31:0] fproduct_0_332_reg;
reg [31:0] fproduct_0_333;
reg [31:0] fproduct_0_333_reg;
reg [31:0] fproduct_0_334;
reg [31:0] fproduct_0_334_reg;
reg [31:0] fproduct_0_335;
reg [31:0] fproduct_0_335_reg;
reg [31:0] fproduct_0_336;
reg [31:0] fproduct_0_336_reg;
reg [31:0] fproduct_0_337;
reg [31:0] fproduct_0_337_reg;
reg [31:0] fproduct_0_338;
reg [31:0] fproduct_0_338_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_339_reg;
reg [31:0] fproduct_0_340;
reg [31:0] fproduct_0_340_reg;
reg [31:0] fproduct_0_341;
reg [31:0] fproduct_0_341_reg;
reg [31:0] fproduct_0_342;
reg [31:0] fproduct_0_342_reg;
reg [31:0] fproduct_0_343;
reg [31:0] fproduct_0_343_reg;
reg [31:0] fproduct_0_344;
reg [31:0] fproduct_0_344_reg;
reg [31:0] fproduct_0_345;
reg [31:0] fproduct_0_345_reg;
reg [31:0] fproduct_0_346;
reg [31:0] fproduct_0_346_reg;
reg [31:0] fproduct_0_347;
reg [31:0] fproduct_0_347_reg;
reg [31:0] fproduct_0_348;
reg [31:0] fproduct_0_348_reg;
reg [31:0] fproduct_0_349;
reg [31:0] fproduct_0_349_reg;
reg [31:0] fproduct_0_350;
reg [31:0] fproduct_0_350_reg;
reg [31:0] fproduct_0_351;
reg [31:0] fproduct_0_351_reg;
reg [31:0] fproduct_0_352;
reg [31:0] fproduct_0_352_reg;
reg [31:0] fproduct_0_353;
reg [31:0] fproduct_0_353_reg;
reg [31:0] fproduct_0_354;
reg [31:0] fproduct_0_354_reg;
reg [31:0] fproduct_0_355;
reg [31:0] fproduct_0_355_reg;
reg [31:0] fproduct_0_356;
reg [31:0] fproduct_0_356_reg;
reg [31:0] fproduct_0_357;
reg [31:0] fproduct_0_357_reg;
reg [31:0] fproduct_0_358;
reg [31:0] fproduct_0_358_reg;
reg [31:0] fproduct_0_359;
reg [31:0] fproduct_0_359_reg;
reg [31:0] fproduct_0_360;
reg [31:0] fproduct_0_360_reg;
reg [31:0] fproduct_0_361;
reg [31:0] fproduct_0_361_reg;
reg [31:0] fproduct_0_362;
reg [31:0] fproduct_0_362_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_363;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_363_reg;
reg [31:0] fproduct_0_364;
reg [31:0] fproduct_0_364_reg;
reg [31:0] fproduct_0_365;
reg [31:0] fproduct_0_365_reg;
reg [31:0] fproduct_0_366;
reg [31:0] fproduct_0_366_reg;
reg [31:0] fproduct_0_367;
reg [31:0] fproduct_0_367_reg;
reg [31:0] fproduct_0_368;
reg [31:0] fproduct_0_368_reg;
reg [31:0] fproduct_0_369;
reg [31:0] fproduct_0_369_reg;
reg [31:0] fproduct_0_370;
reg [31:0] fproduct_0_370_reg;
reg [31:0] fproduct_0_371;
reg [31:0] fproduct_0_371_reg;
reg [31:0] fproduct_0_372;
reg [31:0] fproduct_0_372_reg;
reg [31:0] fproduct_0_373;
reg [31:0] fproduct_0_373_reg;
reg [31:0] fproduct_0_374;
reg [31:0] fproduct_0_374_reg;
reg [31:0] fproduct_0_375;
reg [31:0] fproduct_0_375_reg;
reg [31:0] fproduct_0_376;
reg [31:0] fproduct_0_376_reg;
reg [31:0] fproduct_0_377;
reg [31:0] fproduct_0_377_reg;
reg [31:0] fproduct_0_378;
reg [31:0] fproduct_0_378_reg;
reg [31:0] fproduct_0_379;
reg [31:0] fproduct_0_379_reg;
reg [31:0] fproduct_0_380;
reg [31:0] fproduct_0_380_reg;
reg [31:0] fproduct_0_381;
reg [31:0] fproduct_0_381_reg;
reg [31:0] fproduct_0_382;
reg [31:0] fproduct_0_382_reg;
reg [31:0] fproduct_0_383;
reg [31:0] fproduct_0_383_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_384;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_384_reg;
reg [31:0] fproduct_0_385;
reg [31:0] fproduct_0_385_reg;
reg [31:0] fproduct_0_386;
reg [31:0] fproduct_0_386_reg;
reg [31:0] fproduct_0_387;
reg [31:0] fproduct_0_387_reg;
reg [31:0] fproduct_0_388;
reg [31:0] fproduct_0_388_reg;
reg [31:0] fproduct_0_389;
reg [31:0] fproduct_0_389_reg;
reg [31:0] fproduct_0_390;
reg [31:0] fproduct_0_390_reg;
reg [31:0] fproduct_0_391;
reg [31:0] fproduct_0_391_reg;
reg [31:0] fproduct_0_392;
reg [31:0] fproduct_0_392_reg;
reg [31:0] fproduct_0_393;
reg [31:0] fproduct_0_393_reg;
reg [31:0] fproduct_0_394;
reg [31:0] fproduct_0_394_reg;
reg [31:0] fproduct_0_395;
reg [31:0] fproduct_0_395_reg;
reg [31:0] fproduct_0_396;
reg [31:0] fproduct_0_396_reg;
reg [31:0] fproduct_0_397;
reg [31:0] fproduct_0_397_reg;
reg [31:0] fproduct_0_398;
reg [31:0] fproduct_0_398_reg;
reg [31:0] fproduct_0_399;
reg [31:0] fproduct_0_399_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_400;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_400_reg;
reg [31:0] fproduct_0_401;
reg [31:0] fproduct_0_401_reg;
reg [31:0] fproduct_0_402;
reg [31:0] fproduct_0_402_reg;
reg [31:0] fproduct_0_403;
reg [31:0] fproduct_0_403_reg;
reg [31:0] fproduct_0_404;
reg [31:0] fproduct_0_404_reg;
reg [31:0] fproduct_0_405;
reg [31:0] fproduct_0_405_reg;
reg [31:0] fproduct_0_406;
reg [31:0] fproduct_0_406_reg;
reg [31:0] fproduct_0_407;
reg [31:0] fproduct_0_407_reg;
reg [31:0] fproduct_0_408;
reg [31:0] fproduct_0_408_reg;
reg [31:0] fproduct_0_409;
reg [31:0] fproduct_0_409_reg;
reg [31:0] fproduct_0_410;
reg [31:0] fproduct_0_410_reg;
reg [31:0] fproduct_0_411;
reg [31:0] fproduct_0_411_reg;
reg [31:0] fproduct_0_412;
reg [31:0] fproduct_0_412_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_413;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_413_reg;
reg [31:0] fproduct_0_414;
reg [31:0] fproduct_0_414_reg;
reg [31:0] fproduct_0_415;
reg [31:0] fproduct_0_415_reg;
reg [31:0] fproduct_0_416;
reg [31:0] fproduct_0_416_reg;
reg [31:0] fproduct_0_417;
reg [31:0] fproduct_0_417_reg;
reg [31:0] fproduct_0_418;
reg [31:0] fproduct_0_418_reg;
reg [31:0] fproduct_0_419;
reg [31:0] fproduct_0_419_reg;
reg [31:0] fproduct_0_420;
reg [31:0] fproduct_0_420_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_421;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_421_reg;
reg [31:0] fproduct_0_422;
reg [31:0] fproduct_0_422_reg;
reg [31:0] fproduct_0_423;
reg [31:0] fproduct_0_423_reg;
reg [31:0] fproduct_0_424;
reg [31:0] fproduct_0_424_reg;
reg [31:0] fproduct_0_425;
reg [31:0] fproduct_0_425_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_426;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_0_426_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fproduct_0_3_en;
reg [31:0] fproduct_0_3_stage0_reg;
reg  lpm_mult_fproduct_0_7_en;
reg [31:0] fproduct_0_7_stage0_reg;
reg  lpm_mult_fproduct_0_11_en;
reg [31:0] fproduct_0_11_stage0_reg;
reg  lpm_mult_fproduct_0_17_en;
reg [31:0] fproduct_0_17_stage0_reg;
reg  lpm_mult_fproduct_0_21_en;
reg [31:0] fproduct_0_21_stage0_reg;
reg  lpm_mult_fproduct_0_25_en;
reg [31:0] fproduct_0_25_stage0_reg;
reg  lpm_mult_fproduct_0_31_en;
reg [31:0] fproduct_0_31_stage0_reg;
reg  lpm_mult_fproduct_0_34_en;
reg [31:0] fproduct_0_34_stage0_reg;
reg  lpm_mult_fproduct_0_38_en;
reg [31:0] fproduct_0_38_stage0_reg;
reg  lpm_mult_fproduct_0_42_en;
reg [31:0] fproduct_0_42_stage0_reg;
reg  lpm_mult_fproduct_0_49_en;
reg [31:0] fproduct_0_49_stage0_reg;
reg  lpm_mult_fproduct_0_52_en;
reg [31:0] fproduct_0_52_stage0_reg;
reg  lpm_mult_fproduct_0_55_en;
reg [31:0] fproduct_0_55_stage0_reg;
reg  lpm_mult_fproduct_0_61_en;
reg [31:0] fproduct_0_61_stage0_reg;
reg  lpm_mult_fproduct_0_65_en;
reg [31:0] fproduct_0_65_stage0_reg;
reg  lpm_mult_fproduct_0_72_en;
reg [31:0] fproduct_0_72_stage0_reg;
reg  lpm_mult_fproduct_0_75_en;
reg [31:0] fproduct_0_75_stage0_reg;
reg  lpm_mult_fproduct_0_78_en;
reg [31:0] fproduct_0_78_stage0_reg;
reg  lpm_mult_fproduct_0_81_en;
reg [31:0] fproduct_0_81_stage0_reg;
reg  lpm_mult_fproduct_0_85_en;
reg [31:0] fproduct_0_85_stage0_reg;
reg  lpm_mult_fproduct_0_89_en;
reg [31:0] fproduct_0_89_stage0_reg;
reg  lpm_mult_fproduct_0_98_en;
reg [31:0] fproduct_0_98_stage0_reg;
reg  lpm_mult_fproduct_0_101_en;
reg [31:0] fproduct_0_101_stage0_reg;
reg  lpm_mult_fproduct_0_104_en;
reg [31:0] fproduct_0_104_stage0_reg;
reg  lpm_mult_fproduct_0_110_en;
reg [31:0] fproduct_0_110_stage0_reg;
reg  lpm_mult_fproduct_0_113_en;
reg [31:0] fproduct_0_113_stage0_reg;
reg  lpm_mult_fproduct_0_117_en;
reg [31:0] fproduct_0_117_stage0_reg;
reg  lpm_mult_fproduct_0_121_en;
reg [31:0] fproduct_0_121_stage0_reg;
reg  lpm_mult_fproduct_0_129_en;
reg [31:0] fproduct_0_129_stage0_reg;
reg  lpm_mult_fproduct_0_132_en;
reg [31:0] fproduct_0_132_stage0_reg;
reg  lpm_mult_fproduct_0_135_en;
reg [31:0] fproduct_0_135_stage0_reg;
reg  lpm_mult_fproduct_0_138_en;
reg [31:0] fproduct_0_138_stage0_reg;
reg  lpm_mult_fproduct_0_141_en;
reg [31:0] fproduct_0_141_stage0_reg;
reg  lpm_mult_fproduct_0_144_en;
reg [31:0] fproduct_0_144_stage0_reg;
reg  lpm_mult_fproduct_0_148_en;
reg [31:0] fproduct_0_148_stage0_reg;
reg  lpm_mult_fproduct_0_152_en;
reg [31:0] fproduct_0_152_stage0_reg;
reg  lpm_mult_fproduct_0_166_en;
reg [31:0] fproduct_0_166_stage0_reg;
reg  lpm_mult_fproduct_0_169_en;
reg [31:0] fproduct_0_169_stage0_reg;
reg  lpm_mult_fproduct_0_163_en;
reg [31:0] fproduct_0_163_stage0_reg;
reg  lpm_mult_fproduct_0_172_en;
reg [31:0] fproduct_0_172_stage0_reg;
reg  lpm_mult_fproduct_0_175_en;
reg [31:0] fproduct_0_175_stage0_reg;
reg  lpm_mult_fproduct_0_182_en;
reg [31:0] fproduct_0_182_stage0_reg;
reg  lpm_mult_fproduct_0_185_en;
reg [31:0] fproduct_0_185_stage0_reg;
reg  lpm_mult_fproduct_0_189_en;
reg [31:0] fproduct_0_189_stage0_reg;
reg  lpm_mult_fproduct_0_193_en;
reg [31:0] fproduct_0_193_stage0_reg;
reg  lpm_mult_fproduct_0_202_en;
reg [31:0] fproduct_0_202_stage0_reg;
reg  lpm_mult_fproduct_0_205_en;
reg [31:0] fproduct_0_205_stage0_reg;
reg  lpm_mult_fproduct_0_208_en;
reg [31:0] fproduct_0_208_stage0_reg;
reg  lpm_mult_fproduct_0_211_en;
reg [31:0] fproduct_0_211_stage0_reg;
reg  lpm_mult_fproduct_0_214_en;
reg [31:0] fproduct_0_214_stage0_reg;
reg  lpm_mult_fproduct_0_217_en;
reg [31:0] fproduct_0_217_stage0_reg;
reg  lpm_mult_fproduct_0_220_en;
reg [31:0] fproduct_0_220_stage0_reg;
reg  lpm_mult_fproduct_0_223_en;
reg [31:0] fproduct_0_223_stage0_reg;
reg  lpm_mult_fproduct_0_227_en;
reg [31:0] fproduct_0_227_stage0_reg;
reg  lpm_mult_fproduct_0_231_en;
reg [31:0] fproduct_0_231_stage0_reg;
reg  lpm_mult_fproduct_0_244_en;
reg [31:0] fproduct_0_244_stage0_reg;
reg  lpm_mult_fproduct_0_247_en;
reg [31:0] fproduct_0_247_stage0_reg;
reg  lpm_mult_fproduct_0_250_en;
reg [31:0] fproduct_0_250_stage0_reg;
reg  lpm_mult_fproduct_0_253_en;
reg [31:0] fproduct_0_253_stage0_reg;
reg  lpm_mult_fproduct_0_256_en;
reg [31:0] fproduct_0_256_stage0_reg;
reg  lpm_mult_fproduct_0_264_en;
reg [31:0] fproduct_0_264_stage0_reg;
reg  lpm_mult_fproduct_0_267_en;
reg [31:0] fproduct_0_267_stage0_reg;
reg  lpm_mult_fproduct_0_270_en;
reg [31:0] fproduct_0_270_stage0_reg;
reg  lpm_mult_fproduct_0_273_en;
reg [31:0] fproduct_0_273_stage0_reg;
reg  lpm_mult_fproduct_0_281_en;
reg [31:0] fproduct_0_281_stage0_reg;
reg  lpm_mult_fproduct_0_284_en;
reg [31:0] fproduct_0_284_stage0_reg;
reg  lpm_mult_fproduct_0_287_en;
reg [31:0] fproduct_0_287_stage0_reg;
reg  lpm_mult_fproduct_0_290_en;
reg [31:0] fproduct_0_290_stage0_reg;
reg  lpm_mult_fproduct_0_293_en;
reg [31:0] fproduct_0_293_stage0_reg;
reg  lpm_mult_fproduct_0_296_en;
reg [31:0] fproduct_0_296_stage0_reg;
reg  lpm_mult_fproduct_0_299_en;
reg [31:0] fproduct_0_299_stage0_reg;
reg  lpm_mult_fproduct_0_302_en;
reg [31:0] fproduct_0_302_stage0_reg;
reg  lpm_mult_fproduct_0_316_en;
reg [31:0] fproduct_0_316_stage0_reg;
reg  lpm_mult_fproduct_0_319_en;
reg [31:0] fproduct_0_319_stage0_reg;
reg  lpm_mult_fproduct_0_322_en;
reg [31:0] fproduct_0_322_stage0_reg;
reg  lpm_mult_fproduct_0_313_en;
reg [31:0] fproduct_0_313_stage0_reg;
reg  lpm_mult_fproduct_0_325_en;
reg [31:0] fproduct_0_325_stage0_reg;
reg  lpm_mult_fproduct_0_332_en;
reg [31:0] fproduct_0_332_stage0_reg;
reg  lpm_mult_fproduct_0_335_en;
reg [31:0] fproduct_0_335_stage0_reg;
reg  lpm_mult_fproduct_0_342_en;
reg [31:0] fproduct_0_342_stage0_reg;
reg  lpm_mult_fproduct_0_345_en;
reg [31:0] fproduct_0_345_stage0_reg;
reg  lpm_mult_fproduct_0_348_en;
reg [31:0] fproduct_0_348_stage0_reg;
reg  lpm_mult_fproduct_0_351_en;
reg [31:0] fproduct_0_351_stage0_reg;
reg  lpm_mult_fproduct_0_354_en;
reg [31:0] fproduct_0_354_stage0_reg;
reg  lpm_mult_fproduct_0_357_en;
reg [31:0] fproduct_0_357_stage0_reg;
reg  lpm_mult_fproduct_0_366_en;
reg [31:0] fproduct_0_366_stage0_reg;
reg  lpm_mult_fproduct_0_369_en;
reg [31:0] fproduct_0_369_stage0_reg;
reg  lpm_mult_fproduct_0_372_en;
reg [31:0] fproduct_0_372_stage0_reg;
reg  lpm_mult_fproduct_0_378_en;
reg [31:0] fproduct_0_378_stage0_reg;
reg  lpm_mult_fproduct_0_381_en;
reg [31:0] fproduct_0_381_stage0_reg;
reg  lpm_mult_fproduct_0_387_en;
reg [31:0] fproduct_0_387_stage0_reg;
reg  lpm_mult_fproduct_0_390_en;
reg [31:0] fproduct_0_390_stage0_reg;
reg  lpm_mult_fproduct_0_393_en;
reg [31:0] fproduct_0_393_stage0_reg;
reg  lpm_mult_fproduct_0_396_en;
reg [31:0] fproduct_0_396_stage0_reg;
reg  lpm_mult_fproduct_0_403_en;
reg [31:0] fproduct_0_403_stage0_reg;
reg  lpm_mult_fproduct_0_406_en;
reg [31:0] fproduct_0_406_stage0_reg;
reg  lpm_mult_fproduct_0_409_en;
reg [31:0] fproduct_0_409_stage0_reg;
reg  lpm_mult_fproduct_0_416_en;
reg [31:0] fproduct_0_416_stage0_reg;
reg  lpm_mult_fproduct_0_419_en;
reg [31:0] fproduct_0_419_stage0_reg;
reg  lpm_mult_fproduct_0_425_en;
reg [31:0] fproduct_0_425_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_114;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_114) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_115;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_116;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_117;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_118;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_119;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_120;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_121;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_122;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_123;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_123) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_124;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_125;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_126;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_126) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_127;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_128;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_129;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_130;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_131;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_132;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_133;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_134;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_134;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_135;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_135;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_136;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_136;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_137;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_137;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_138;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_138;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_139;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_139;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_139) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_140;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_140;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_141;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_141;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_142;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_142;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_143;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_143;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_144;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_144;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_144) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_145;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_145;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_146;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_146;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_147;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_147;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_148;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_148;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_149;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_149;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_150;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_150;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_151;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_151;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_152;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_152;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_153;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_153;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_154;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_154;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_155;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_155;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_156;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_156;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_157;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_157;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_158;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fproduct_BB_0_158;
if (reset == 1'b0 && ^(LEGUP_F_fproduct_BB_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fproduct_BB_0_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_3))
begin
fproduct_0_1_reg <= fproduct_0_1;
if (reset == 1'b0 && ^(fproduct_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_1_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_2 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_3))
begin
fproduct_0_2_reg <= fproduct_0_2;
if (reset == 1'b0 && ^(fproduct_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_2_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_3 = fproduct_0_3_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %3 = mul nsw i32 %2, %1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
fproduct_0_3_reg <= fproduct_0_3;
if (reset == 1'b0 && ^(fproduct_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_3_reg"); $finish; end
end
/* fproduct: %0*/
/*   %3 = mul nsw i32 %2, %1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
fproduct_0_3_reg <= fproduct_0_3;
if (reset == 1'b0 && ^(fproduct_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_4 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_7))
begin
fproduct_0_4_reg <= fproduct_0_4;
if (reset == 1'b0 && ^(fproduct_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %5 = getelementptr inbounds i32* %in, i32 1*/
begin
fproduct_0_5 = (arg_in + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %5 = getelementptr inbounds i32* %in, i32 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_5_reg <= fproduct_0_5;
if (reset == 1'b0 && ^(fproduct_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_5_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_6 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_7))
begin
fproduct_0_6_reg <= fproduct_0_6;
if (reset == 1'b0 && ^(fproduct_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_6_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_7 = fproduct_0_7_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %7 = mul nsw i32 %6, %4*/
if ((cur_state == LEGUP_F_fproduct_BB_0_8))
begin
fproduct_0_7_reg <= fproduct_0_7;
if (reset == 1'b0 && ^(fproduct_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_7_reg"); $finish; end
end
/* fproduct: %0*/
/*   %7 = mul nsw i32 %6, %4*/
if ((cur_state == LEGUP_F_fproduct_BB_0_8))
begin
fproduct_0_7_reg <= fproduct_0_7;
if (reset == 1'b0 && ^(fproduct_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_7_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %8 = getelementptr inbounds i32* %in2, i32 1*/
begin
fproduct_0_8 = (arg_in2 + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %8 = getelementptr inbounds i32* %in2, i32 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_8_reg <= fproduct_0_8;
if (reset == 1'b0 && ^(fproduct_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_8_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_9 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_8))
begin
fproduct_0_9_reg <= fproduct_0_9;
if (reset == 1'b0 && ^(fproduct_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_9_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_8))
begin
fproduct_0_10_reg <= fproduct_0_10;
if (reset == 1'b0 && ^(fproduct_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_10_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_11 = fproduct_0_11_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %11 = mul nsw i32 %10, %9*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
fproduct_0_11_reg <= fproduct_0_11;
if (reset == 1'b0 && ^(fproduct_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_11_reg"); $finish; end
end
/* fproduct: %0*/
/*   %11 = mul nsw i32 %10, %9*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
fproduct_0_11_reg <= fproduct_0_11;
if (reset == 1'b0 && ^(fproduct_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_11_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %12 = add nsw i32 %11, %7*/
begin
fproduct_0_12 = (fproduct_0_11 + fproduct_0_7_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %12 = add nsw i32 %11, %7*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
fproduct_0_12_reg <= fproduct_0_12;
if (reset == 1'b0 && ^(fproduct_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_12_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %13 = getelementptr inbounds i32* %output, i32 1*/
begin
fproduct_0_13 = (arg_output + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %13 = getelementptr inbounds i32* %output, i32 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_13_reg <= fproduct_0_13;
if (reset == 1'b0 && ^(fproduct_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_13_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_14 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
fproduct_0_14_reg <= fproduct_0_14;
if (reset == 1'b0 && ^(fproduct_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_14_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
fproduct_0_15_reg <= fproduct_0_15;
if (reset == 1'b0 && ^(fproduct_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_15_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %16 = shl i32 %14, 1*/
begin
fproduct_0_16 = (fproduct_0_14 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %16 = shl i32 %14, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
fproduct_0_16_reg <= fproduct_0_16;
if (reset == 1'b0 && ^(fproduct_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_16_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_17 = fproduct_0_17_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %17 = mul i32 %16, %15*/
if ((cur_state == LEGUP_F_fproduct_BB_0_13))
begin
fproduct_0_17_reg <= fproduct_0_17;
if (reset == 1'b0 && ^(fproduct_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_17_reg"); $finish; end
end
/* fproduct: %0*/
/*   %17 = mul i32 %16, %15*/
if ((cur_state == LEGUP_F_fproduct_BB_0_13))
begin
fproduct_0_17_reg <= fproduct_0_17;
if (reset == 1'b0 && ^(fproduct_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_17_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_13))
begin
fproduct_0_18_reg <= fproduct_0_18;
if (reset == 1'b0 && ^(fproduct_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_18_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %19 = getelementptr inbounds i32* %in, i32 2*/
begin
fproduct_0_19 = (arg_in + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %19 = getelementptr inbounds i32* %in, i32 2*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_19_reg <= fproduct_0_19;
if (reset == 1'b0 && ^(fproduct_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_19_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_20 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_13))
begin
fproduct_0_20_reg <= fproduct_0_20;
if (reset == 1'b0 && ^(fproduct_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_20_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_21 = fproduct_0_21_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %21 = mul nsw i32 %20, %18*/
if ((cur_state == LEGUP_F_fproduct_BB_0_14))
begin
fproduct_0_21_reg <= fproduct_0_21;
if (reset == 1'b0 && ^(fproduct_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_21_reg"); $finish; end
end
/* fproduct: %0*/
/*   %21 = mul nsw i32 %20, %18*/
if ((cur_state == LEGUP_F_fproduct_BB_0_14))
begin
fproduct_0_21_reg <= fproduct_0_21;
if (reset == 1'b0 && ^(fproduct_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_21_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %22 = getelementptr inbounds i32* %in2, i32 2*/
begin
fproduct_0_22 = (arg_in2 + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %22 = getelementptr inbounds i32* %in2, i32 2*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_22_reg <= fproduct_0_22;
if (reset == 1'b0 && ^(fproduct_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_22_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_23 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_14))
begin
fproduct_0_23_reg <= fproduct_0_23;
if (reset == 1'b0 && ^(fproduct_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_23_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_24 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_14))
begin
fproduct_0_24_reg <= fproduct_0_24;
if (reset == 1'b0 && ^(fproduct_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_24_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_25 = fproduct_0_25_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %25 = mul nsw i32 %24, %23*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
fproduct_0_25_reg <= fproduct_0_25;
if (reset == 1'b0 && ^(fproduct_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_25_reg"); $finish; end
end
/* fproduct: %0*/
/*   %25 = mul nsw i32 %24, %23*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
fproduct_0_25_reg <= fproduct_0_25;
if (reset == 1'b0 && ^(fproduct_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_25_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %26 = add i32 %21, %17*/
begin
fproduct_0_26 = (fproduct_0_21 + fproduct_0_17_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %26 = add i32 %21, %17*/
if ((cur_state == LEGUP_F_fproduct_BB_0_14))
begin
fproduct_0_26_reg <= fproduct_0_26;
if (reset == 1'b0 && ^(fproduct_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_26_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %27 = add i32 %26, %25*/
begin
fproduct_0_27 = (fproduct_0_26_reg + fproduct_0_25);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %27 = add i32 %26, %25*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
fproduct_0_27_reg <= fproduct_0_27;
if (reset == 1'b0 && ^(fproduct_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_27_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %28 = getelementptr inbounds i32* %output, i32 2*/
begin
fproduct_0_28 = (arg_output + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %28 = getelementptr inbounds i32* %output, i32 2*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_28_reg <= fproduct_0_28;
if (reset == 1'b0 && ^(fproduct_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_28_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_29 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
fproduct_0_29_reg <= fproduct_0_29;
if (reset == 1'b0 && ^(fproduct_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_29_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_30 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
fproduct_0_30_reg <= fproduct_0_30;
if (reset == 1'b0 && ^(fproduct_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_30_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_31 = fproduct_0_31_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %31 = mul nsw i32 %30, %29*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
fproduct_0_31_reg <= fproduct_0_31;
if (reset == 1'b0 && ^(fproduct_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_31_reg"); $finish; end
end
/* fproduct: %0*/
/*   %31 = mul nsw i32 %30, %29*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
fproduct_0_31_reg <= fproduct_0_31;
if (reset == 1'b0 && ^(fproduct_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_31_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
fproduct_0_32_reg <= fproduct_0_32;
if (reset == 1'b0 && ^(fproduct_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_32_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_33 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
fproduct_0_33_reg <= fproduct_0_33;
if (reset == 1'b0 && ^(fproduct_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_33_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_34 = fproduct_0_34_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %34 = mul nsw i32 %33, %32*/
if ((cur_state == LEGUP_F_fproduct_BB_0_20))
begin
fproduct_0_34_reg <= fproduct_0_34;
if (reset == 1'b0 && ^(fproduct_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_34_reg"); $finish; end
end
/* fproduct: %0*/
/*   %34 = mul nsw i32 %33, %32*/
if ((cur_state == LEGUP_F_fproduct_BB_0_20))
begin
fproduct_0_34_reg <= fproduct_0_34;
if (reset == 1'b0 && ^(fproduct_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_34_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_35 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_20))
begin
fproduct_0_35_reg <= fproduct_0_35;
if (reset == 1'b0 && ^(fproduct_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_35_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %36 = getelementptr inbounds i32* %in, i32 3*/
begin
fproduct_0_36 = (arg_in + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %36 = getelementptr inbounds i32* %in, i32 3*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_36_reg <= fproduct_0_36;
if (reset == 1'b0 && ^(fproduct_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_36_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_37 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_20))
begin
fproduct_0_37_reg <= fproduct_0_37;
if (reset == 1'b0 && ^(fproduct_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_37_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_38 = fproduct_0_38_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %38 = mul nsw i32 %37, %35*/
if ((cur_state == LEGUP_F_fproduct_BB_0_21))
begin
fproduct_0_38_reg <= fproduct_0_38;
if (reset == 1'b0 && ^(fproduct_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_38_reg"); $finish; end
end
/* fproduct: %0*/
/*   %38 = mul nsw i32 %37, %35*/
if ((cur_state == LEGUP_F_fproduct_BB_0_21))
begin
fproduct_0_38_reg <= fproduct_0_38;
if (reset == 1'b0 && ^(fproduct_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_38_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %39 = getelementptr inbounds i32* %in2, i32 3*/
begin
fproduct_0_39 = (arg_in2 + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %39 = getelementptr inbounds i32* %in2, i32 3*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_39_reg <= fproduct_0_39;
if (reset == 1'b0 && ^(fproduct_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_39_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_40 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_21))
begin
fproduct_0_40_reg <= fproduct_0_40;
if (reset == 1'b0 && ^(fproduct_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_40_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_21))
begin
fproduct_0_41_reg <= fproduct_0_41;
if (reset == 1'b0 && ^(fproduct_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_41_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_42 = fproduct_0_42_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %42 = mul nsw i32 %41, %40*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
fproduct_0_42_reg <= fproduct_0_42;
if (reset == 1'b0 && ^(fproduct_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_42_reg"); $finish; end
end
/* fproduct: %0*/
/*   %42 = mul nsw i32 %41, %40*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
fproduct_0_42_reg <= fproduct_0_42;
if (reset == 1'b0 && ^(fproduct_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_42_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %43 = add i32 %34, %31*/
begin
fproduct_0_43 = (fproduct_0_34 + fproduct_0_31_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %43 = add i32 %34, %31*/
if ((cur_state == LEGUP_F_fproduct_BB_0_20))
begin
fproduct_0_43_reg <= fproduct_0_43;
if (reset == 1'b0 && ^(fproduct_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_43_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %44 = add i32 %43, %38*/
begin
fproduct_0_44 = (fproduct_0_43_reg + fproduct_0_38);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %44 = add i32 %43, %38*/
if ((cur_state == LEGUP_F_fproduct_BB_0_21))
begin
fproduct_0_44_reg <= fproduct_0_44;
if (reset == 1'b0 && ^(fproduct_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_44_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %45 = add i32 %44, %42*/
begin
fproduct_0_45 = (fproduct_0_44_reg + fproduct_0_42);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %45 = add i32 %44, %42*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
fproduct_0_45_reg <= fproduct_0_45;
if (reset == 1'b0 && ^(fproduct_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_45_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %46 = getelementptr inbounds i32* %output, i32 3*/
begin
fproduct_0_46 = (arg_output + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %46 = getelementptr inbounds i32* %output, i32 3*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_46_reg <= fproduct_0_46;
if (reset == 1'b0 && ^(fproduct_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_46_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_47 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
fproduct_0_47_reg <= fproduct_0_47;
if (reset == 1'b0 && ^(fproduct_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_47_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_48 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
fproduct_0_48_reg <= fproduct_0_48;
if (reset == 1'b0 && ^(fproduct_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_48_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_49 = fproduct_0_49_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %49 = mul nsw i32 %48, %47*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
fproduct_0_49_reg <= fproduct_0_49;
if (reset == 1'b0 && ^(fproduct_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_49_reg"); $finish; end
end
/* fproduct: %0*/
/*   %49 = mul nsw i32 %48, %47*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
fproduct_0_49_reg <= fproduct_0_49;
if (reset == 1'b0 && ^(fproduct_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_49_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_50 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
fproduct_0_50_reg <= fproduct_0_50;
if (reset == 1'b0 && ^(fproduct_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_50_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_51 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
fproduct_0_51_reg <= fproduct_0_51;
if (reset == 1'b0 && ^(fproduct_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_51_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_52 = fproduct_0_52_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %52 = mul nsw i32 %51, %50*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
fproduct_0_52_reg <= fproduct_0_52;
if (reset == 1'b0 && ^(fproduct_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_52_reg"); $finish; end
end
/* fproduct: %0*/
/*   %52 = mul nsw i32 %51, %50*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
fproduct_0_52_reg <= fproduct_0_52;
if (reset == 1'b0 && ^(fproduct_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_52_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_53 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
fproduct_0_53_reg <= fproduct_0_53;
if (reset == 1'b0 && ^(fproduct_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_53_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_54 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
fproduct_0_54_reg <= fproduct_0_54;
if (reset == 1'b0 && ^(fproduct_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_54_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_55 = fproduct_0_55_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %55 = mul nsw i32 %54, %53*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_55_reg <= fproduct_0_55;
if (reset == 1'b0 && ^(fproduct_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_55_reg"); $finish; end
end
/* fproduct: %0*/
/*   %55 = mul nsw i32 %54, %53*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_55_reg <= fproduct_0_55;
if (reset == 1'b0 && ^(fproduct_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_55_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %56 = add nsw i32 %55, %52*/
begin
fproduct_0_56 = (fproduct_0_55 + fproduct_0_52_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %56 = add nsw i32 %55, %52*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_56_reg <= fproduct_0_56;
if (reset == 1'b0 && ^(fproduct_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_56_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %57 = shl i32 %56, 1*/
begin
fproduct_0_57 = (fproduct_0_56 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %57 = shl i32 %56, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_57_reg <= fproduct_0_57;
if (reset == 1'b0 && ^(fproduct_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_57_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_58 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_58_reg <= fproduct_0_58;
if (reset == 1'b0 && ^(fproduct_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_58_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %59 = getelementptr inbounds i32* %in, i32 4*/
begin
fproduct_0_59 = (arg_in + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %59 = getelementptr inbounds i32* %in, i32 4*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_59_reg <= fproduct_0_59;
if (reset == 1'b0 && ^(fproduct_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_59_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_60 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_28))
begin
fproduct_0_60_reg <= fproduct_0_60;
if (reset == 1'b0 && ^(fproduct_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_60_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_61 = fproduct_0_61_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %61 = mul nsw i32 %60, %58*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_61_reg <= fproduct_0_61;
if (reset == 1'b0 && ^(fproduct_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_61_reg"); $finish; end
end
/* fproduct: %0*/
/*   %61 = mul nsw i32 %60, %58*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_61_reg <= fproduct_0_61;
if (reset == 1'b0 && ^(fproduct_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_61_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %62 = getelementptr inbounds i32* %in2, i32 4*/
begin
fproduct_0_62 = (arg_in2 + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %62 = getelementptr inbounds i32* %in2, i32 4*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_62_reg <= fproduct_0_62;
if (reset == 1'b0 && ^(fproduct_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_62_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_63_reg <= fproduct_0_63;
if (reset == 1'b0 && ^(fproduct_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_63_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_64 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_64_reg <= fproduct_0_64;
if (reset == 1'b0 && ^(fproduct_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_64_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_65 = fproduct_0_65_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %65 = mul nsw i32 %64, %63*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
fproduct_0_65_reg <= fproduct_0_65;
if (reset == 1'b0 && ^(fproduct_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_65_reg"); $finish; end
end
/* fproduct: %0*/
/*   %65 = mul nsw i32 %64, %63*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
fproduct_0_65_reg <= fproduct_0_65;
if (reset == 1'b0 && ^(fproduct_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_65_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %66 = add i32 %61, %49*/
begin
fproduct_0_66 = (fproduct_0_61 + fproduct_0_49_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %66 = add i32 %61, %49*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_66_reg <= fproduct_0_66;
if (reset == 1'b0 && ^(fproduct_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_66_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %67 = add i32 %66, %57*/
begin
fproduct_0_67 = (fproduct_0_66 + fproduct_0_57_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %67 = add i32 %66, %57*/
if ((cur_state == LEGUP_F_fproduct_BB_0_29))
begin
fproduct_0_67_reg <= fproduct_0_67;
if (reset == 1'b0 && ^(fproduct_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_67_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %68 = add i32 %67, %65*/
begin
fproduct_0_68 = (fproduct_0_67_reg + fproduct_0_65);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %68 = add i32 %67, %65*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
fproduct_0_68_reg <= fproduct_0_68;
if (reset == 1'b0 && ^(fproduct_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_68_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %69 = getelementptr inbounds i32* %output, i32 4*/
begin
fproduct_0_69 = (arg_output + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %69 = getelementptr inbounds i32* %output, i32 4*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_69_reg <= fproduct_0_69;
if (reset == 1'b0 && ^(fproduct_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_69_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_70 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
fproduct_0_70_reg <= fproduct_0_70;
if (reset == 1'b0 && ^(fproduct_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_70_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_71 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
fproduct_0_71_reg <= fproduct_0_71;
if (reset == 1'b0 && ^(fproduct_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_71_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_72 = fproduct_0_72_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %72 = mul nsw i32 %71, %70*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
fproduct_0_72_reg <= fproduct_0_72;
if (reset == 1'b0 && ^(fproduct_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_72_reg"); $finish; end
end
/* fproduct: %0*/
/*   %72 = mul nsw i32 %71, %70*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
fproduct_0_72_reg <= fproduct_0_72;
if (reset == 1'b0 && ^(fproduct_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_72_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_73 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
fproduct_0_73_reg <= fproduct_0_73;
if (reset == 1'b0 && ^(fproduct_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_73_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_74 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
fproduct_0_74_reg <= fproduct_0_74;
if (reset == 1'b0 && ^(fproduct_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_74_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_75 = fproduct_0_75_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %75 = mul nsw i32 %74, %73*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
fproduct_0_75_reg <= fproduct_0_75;
if (reset == 1'b0 && ^(fproduct_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_75_reg"); $finish; end
end
/* fproduct: %0*/
/*   %75 = mul nsw i32 %74, %73*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
fproduct_0_75_reg <= fproduct_0_75;
if (reset == 1'b0 && ^(fproduct_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_75_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_76 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
fproduct_0_76_reg <= fproduct_0_76;
if (reset == 1'b0 && ^(fproduct_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_76_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
fproduct_0_77_reg <= fproduct_0_77;
if (reset == 1'b0 && ^(fproduct_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_77_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_78 = fproduct_0_78_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %78 = mul nsw i32 %77, %76*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
fproduct_0_78_reg <= fproduct_0_78;
if (reset == 1'b0 && ^(fproduct_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_78_reg"); $finish; end
end
/* fproduct: %0*/
/*   %78 = mul nsw i32 %77, %76*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
fproduct_0_78_reg <= fproduct_0_78;
if (reset == 1'b0 && ^(fproduct_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_78_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_79 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
fproduct_0_79_reg <= fproduct_0_79;
if (reset == 1'b0 && ^(fproduct_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_79_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
fproduct_0_80_reg <= fproduct_0_80;
if (reset == 1'b0 && ^(fproduct_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_80_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_81 = fproduct_0_81_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %81 = mul nsw i32 %80, %79*/
if ((cur_state == LEGUP_F_fproduct_BB_0_37))
begin
fproduct_0_81_reg <= fproduct_0_81;
if (reset == 1'b0 && ^(fproduct_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_81_reg"); $finish; end
end
/* fproduct: %0*/
/*   %81 = mul nsw i32 %80, %79*/
if ((cur_state == LEGUP_F_fproduct_BB_0_37))
begin
fproduct_0_81_reg <= fproduct_0_81;
if (reset == 1'b0 && ^(fproduct_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_81_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_82 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_37))
begin
fproduct_0_82_reg <= fproduct_0_82;
if (reset == 1'b0 && ^(fproduct_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_82_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %83 = getelementptr inbounds i32* %in, i32 5*/
begin
fproduct_0_83 = (arg_in + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %83 = getelementptr inbounds i32* %in, i32 5*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_83_reg <= fproduct_0_83;
if (reset == 1'b0 && ^(fproduct_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_83_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_84 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_37))
begin
fproduct_0_84_reg <= fproduct_0_84;
if (reset == 1'b0 && ^(fproduct_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_84_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_85 = fproduct_0_85_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %85 = mul nsw i32 %84, %82*/
if ((cur_state == LEGUP_F_fproduct_BB_0_38))
begin
fproduct_0_85_reg <= fproduct_0_85;
if (reset == 1'b0 && ^(fproduct_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_85_reg"); $finish; end
end
/* fproduct: %0*/
/*   %85 = mul nsw i32 %84, %82*/
if ((cur_state == LEGUP_F_fproduct_BB_0_38))
begin
fproduct_0_85_reg <= fproduct_0_85;
if (reset == 1'b0 && ^(fproduct_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_85_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %86 = getelementptr inbounds i32* %in2, i32 5*/
begin
fproduct_0_86 = (arg_in2 + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %86 = getelementptr inbounds i32* %in2, i32 5*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_86_reg <= fproduct_0_86;
if (reset == 1'b0 && ^(fproduct_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_86_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_87 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_38))
begin
fproduct_0_87_reg <= fproduct_0_87;
if (reset == 1'b0 && ^(fproduct_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_87_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_88 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_38))
begin
fproduct_0_88_reg <= fproduct_0_88;
if (reset == 1'b0 && ^(fproduct_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_88_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_89 = fproduct_0_89_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %89 = mul nsw i32 %88, %87*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
fproduct_0_89_reg <= fproduct_0_89;
if (reset == 1'b0 && ^(fproduct_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_89_reg"); $finish; end
end
/* fproduct: %0*/
/*   %89 = mul nsw i32 %88, %87*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
fproduct_0_89_reg <= fproduct_0_89;
if (reset == 1'b0 && ^(fproduct_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_89_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %90 = add i32 %75, %72*/
begin
fproduct_0_90 = (fproduct_0_75 + fproduct_0_72_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %90 = add i32 %75, %72*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
fproduct_0_90_reg <= fproduct_0_90;
if (reset == 1'b0 && ^(fproduct_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_90_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %91 = add i32 %90, %78*/
begin
fproduct_0_91 = (fproduct_0_90_reg + fproduct_0_78);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %91 = add i32 %90, %78*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
fproduct_0_91_reg <= fproduct_0_91;
if (reset == 1'b0 && ^(fproduct_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_91_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %92 = add i32 %91, %81*/
begin
fproduct_0_92 = (fproduct_0_91_reg + fproduct_0_81);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %92 = add i32 %91, %81*/
if ((cur_state == LEGUP_F_fproduct_BB_0_37))
begin
fproduct_0_92_reg <= fproduct_0_92;
if (reset == 1'b0 && ^(fproduct_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_92_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %93 = add i32 %92, %85*/
begin
fproduct_0_93 = (fproduct_0_92_reg + fproduct_0_85);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %93 = add i32 %92, %85*/
if ((cur_state == LEGUP_F_fproduct_BB_0_38))
begin
fproduct_0_93_reg <= fproduct_0_93;
if (reset == 1'b0 && ^(fproduct_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_93_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %94 = add i32 %93, %89*/
begin
fproduct_0_94 = (fproduct_0_93_reg + fproduct_0_89);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %94 = add i32 %93, %89*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
fproduct_0_94_reg <= fproduct_0_94;
if (reset == 1'b0 && ^(fproduct_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_94_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %95 = getelementptr inbounds i32* %output, i32 5*/
begin
fproduct_0_95 = (arg_output + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %95 = getelementptr inbounds i32* %output, i32 5*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_95_reg <= fproduct_0_95;
if (reset == 1'b0 && ^(fproduct_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_95_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_96 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
fproduct_0_96_reg <= fproduct_0_96;
if (reset == 1'b0 && ^(fproduct_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_96_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
fproduct_0_97_reg <= fproduct_0_97;
if (reset == 1'b0 && ^(fproduct_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_97_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_98 = fproduct_0_98_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %98 = mul nsw i32 %97, %96*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
fproduct_0_98_reg <= fproduct_0_98;
if (reset == 1'b0 && ^(fproduct_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_98_reg"); $finish; end
end
/* fproduct: %0*/
/*   %98 = mul nsw i32 %97, %96*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
fproduct_0_98_reg <= fproduct_0_98;
if (reset == 1'b0 && ^(fproduct_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_98_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_99 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
fproduct_0_99_reg <= fproduct_0_99;
if (reset == 1'b0 && ^(fproduct_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_99_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_100 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
fproduct_0_100_reg <= fproduct_0_100;
if (reset == 1'b0 && ^(fproduct_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_100_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_101 = fproduct_0_101_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %101 = mul nsw i32 %100, %99*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
fproduct_0_101_reg <= fproduct_0_101;
if (reset == 1'b0 && ^(fproduct_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_101_reg"); $finish; end
end
/* fproduct: %0*/
/*   %101 = mul nsw i32 %100, %99*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
fproduct_0_101_reg <= fproduct_0_101;
if (reset == 1'b0 && ^(fproduct_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_101_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_102 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
fproduct_0_102_reg <= fproduct_0_102;
if (reset == 1'b0 && ^(fproduct_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_102_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_103 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
fproduct_0_103_reg <= fproduct_0_103;
if (reset == 1'b0 && ^(fproduct_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_103_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_104 = fproduct_0_104_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %104 = mul nsw i32 %103, %102*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_104_reg <= fproduct_0_104;
if (reset == 1'b0 && ^(fproduct_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_104_reg"); $finish; end
end
/* fproduct: %0*/
/*   %104 = mul nsw i32 %103, %102*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_104_reg <= fproduct_0_104;
if (reset == 1'b0 && ^(fproduct_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_104_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %105 = add i32 %101, %98*/
begin
fproduct_0_105 = (fproduct_0_101 + fproduct_0_98_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %105 = add i32 %101, %98*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
fproduct_0_105_reg <= fproduct_0_105;
if (reset == 1'b0 && ^(fproduct_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_105_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %106 = add i32 %105, %104*/
begin
fproduct_0_106 = (fproduct_0_105_reg + fproduct_0_104);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %106 = add i32 %105, %104*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_106_reg <= fproduct_0_106;
if (reset == 1'b0 && ^(fproduct_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_106_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %107 = shl i32 %106, 1*/
begin
fproduct_0_107 = (fproduct_0_106 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %107 = shl i32 %106, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_107_reg <= fproduct_0_107;
if (reset == 1'b0 && ^(fproduct_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_107_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_108 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_108_reg <= fproduct_0_108;
if (reset == 1'b0 && ^(fproduct_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_108_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_109 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
fproduct_0_109_reg <= fproduct_0_109;
if (reset == 1'b0 && ^(fproduct_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_109_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_110 = fproduct_0_110_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %110 = mul nsw i32 %109, %108*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
fproduct_0_110_reg <= fproduct_0_110;
if (reset == 1'b0 && ^(fproduct_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_110_reg"); $finish; end
end
/* fproduct: %0*/
/*   %110 = mul nsw i32 %109, %108*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
fproduct_0_110_reg <= fproduct_0_110;
if (reset == 1'b0 && ^(fproduct_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_110_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_111 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
fproduct_0_111_reg <= fproduct_0_111;
if (reset == 1'b0 && ^(fproduct_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_111_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_112 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
fproduct_0_112_reg <= fproduct_0_112;
if (reset == 1'b0 && ^(fproduct_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_112_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_113 = fproduct_0_113_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %113 = mul nsw i32 %112, %111*/
if ((cur_state == LEGUP_F_fproduct_BB_0_47))
begin
fproduct_0_113_reg <= fproduct_0_113;
if (reset == 1'b0 && ^(fproduct_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_113_reg"); $finish; end
end
/* fproduct: %0*/
/*   %113 = mul nsw i32 %112, %111*/
if ((cur_state == LEGUP_F_fproduct_BB_0_47))
begin
fproduct_0_113_reg <= fproduct_0_113;
if (reset == 1'b0 && ^(fproduct_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_113_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_114 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_47))
begin
fproduct_0_114_reg <= fproduct_0_114;
if (reset == 1'b0 && ^(fproduct_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_114_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %115 = getelementptr inbounds i32* %in, i32 6*/
begin
fproduct_0_115 = (arg_in + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %115 = getelementptr inbounds i32* %in, i32 6*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_115_reg <= fproduct_0_115;
if (reset == 1'b0 && ^(fproduct_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_115_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_116 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_47))
begin
fproduct_0_116_reg <= fproduct_0_116;
if (reset == 1'b0 && ^(fproduct_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_116_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_117 = fproduct_0_117_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %117 = mul nsw i32 %116, %114*/
if ((cur_state == LEGUP_F_fproduct_BB_0_48))
begin
fproduct_0_117_reg <= fproduct_0_117;
if (reset == 1'b0 && ^(fproduct_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_117_reg"); $finish; end
end
/* fproduct: %0*/
/*   %117 = mul nsw i32 %116, %114*/
if ((cur_state == LEGUP_F_fproduct_BB_0_48))
begin
fproduct_0_117_reg <= fproduct_0_117;
if (reset == 1'b0 && ^(fproduct_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_117_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %118 = getelementptr inbounds i32* %in2, i32 6*/
begin
fproduct_0_118 = (arg_in2 + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %118 = getelementptr inbounds i32* %in2, i32 6*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_118_reg <= fproduct_0_118;
if (reset == 1'b0 && ^(fproduct_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_118_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_119 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_48))
begin
fproduct_0_119_reg <= fproduct_0_119;
if (reset == 1'b0 && ^(fproduct_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_119_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_120 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_48))
begin
fproduct_0_120_reg <= fproduct_0_120;
if (reset == 1'b0 && ^(fproduct_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_120_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_121 = fproduct_0_121_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %121 = mul nsw i32 %120, %119*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
fproduct_0_121_reg <= fproduct_0_121;
if (reset == 1'b0 && ^(fproduct_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_121_reg"); $finish; end
end
/* fproduct: %0*/
/*   %121 = mul nsw i32 %120, %119*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
fproduct_0_121_reg <= fproduct_0_121;
if (reset == 1'b0 && ^(fproduct_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_121_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %122 = add i32 %107, %110*/
begin
fproduct_0_122 = (fproduct_0_107_reg + fproduct_0_110);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %122 = add i32 %107, %110*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
fproduct_0_122_reg <= fproduct_0_122;
if (reset == 1'b0 && ^(fproduct_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_122_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %123 = add i32 %122, %113*/
begin
fproduct_0_123 = (fproduct_0_122_reg + fproduct_0_113);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %123 = add i32 %122, %113*/
if ((cur_state == LEGUP_F_fproduct_BB_0_47))
begin
fproduct_0_123_reg <= fproduct_0_123;
if (reset == 1'b0 && ^(fproduct_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_123_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %124 = add i32 %123, %117*/
begin
fproduct_0_124 = (fproduct_0_123_reg + fproduct_0_117);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %124 = add i32 %123, %117*/
if ((cur_state == LEGUP_F_fproduct_BB_0_48))
begin
fproduct_0_124_reg <= fproduct_0_124;
if (reset == 1'b0 && ^(fproduct_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_124_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %125 = add i32 %124, %121*/
begin
fproduct_0_125 = (fproduct_0_124_reg + fproduct_0_121);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %125 = add i32 %124, %121*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
fproduct_0_125_reg <= fproduct_0_125;
if (reset == 1'b0 && ^(fproduct_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_125_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %126 = getelementptr inbounds i32* %output, i32 6*/
begin
fproduct_0_126 = (arg_output + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %126 = getelementptr inbounds i32* %output, i32 6*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_126_reg <= fproduct_0_126;
if (reset == 1'b0 && ^(fproduct_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_126_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_127 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
fproduct_0_127_reg <= fproduct_0_127;
if (reset == 1'b0 && ^(fproduct_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_127_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_128 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
fproduct_0_128_reg <= fproduct_0_128;
if (reset == 1'b0 && ^(fproduct_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_128_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_129 = fproduct_0_129_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %129 = mul nsw i32 %128, %127*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
fproduct_0_129_reg <= fproduct_0_129;
if (reset == 1'b0 && ^(fproduct_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_129_reg"); $finish; end
end
/* fproduct: %0*/
/*   %129 = mul nsw i32 %128, %127*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
fproduct_0_129_reg <= fproduct_0_129;
if (reset == 1'b0 && ^(fproduct_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_129_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_130 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
fproduct_0_130_reg <= fproduct_0_130;
if (reset == 1'b0 && ^(fproduct_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_130_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_131 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
fproduct_0_131_reg <= fproduct_0_131;
if (reset == 1'b0 && ^(fproduct_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_131_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_132 = fproduct_0_132_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %132 = mul nsw i32 %131, %130*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
fproduct_0_132_reg <= fproduct_0_132;
if (reset == 1'b0 && ^(fproduct_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_132_reg"); $finish; end
end
/* fproduct: %0*/
/*   %132 = mul nsw i32 %131, %130*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
fproduct_0_132_reg <= fproduct_0_132;
if (reset == 1'b0 && ^(fproduct_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_132_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_133 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
fproduct_0_133_reg <= fproduct_0_133;
if (reset == 1'b0 && ^(fproduct_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_133_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_134 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
fproduct_0_134_reg <= fproduct_0_134;
if (reset == 1'b0 && ^(fproduct_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_134_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_135 = fproduct_0_135_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %135 = mul nsw i32 %134, %133*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
fproduct_0_135_reg <= fproduct_0_135;
if (reset == 1'b0 && ^(fproduct_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_135_reg"); $finish; end
end
/* fproduct: %0*/
/*   %135 = mul nsw i32 %134, %133*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
fproduct_0_135_reg <= fproduct_0_135;
if (reset == 1'b0 && ^(fproduct_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_135_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_136 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
fproduct_0_136_reg <= fproduct_0_136;
if (reset == 1'b0 && ^(fproduct_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_136_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_137 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
fproduct_0_137_reg <= fproduct_0_137;
if (reset == 1'b0 && ^(fproduct_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_137_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_138 = fproduct_0_138_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %138 = mul nsw i32 %137, %136*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
fproduct_0_138_reg <= fproduct_0_138;
if (reset == 1'b0 && ^(fproduct_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_138_reg"); $finish; end
end
/* fproduct: %0*/
/*   %138 = mul nsw i32 %137, %136*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
fproduct_0_138_reg <= fproduct_0_138;
if (reset == 1'b0 && ^(fproduct_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_138_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_139 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
fproduct_0_139_reg <= fproduct_0_139;
if (reset == 1'b0 && ^(fproduct_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_139_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_140 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
fproduct_0_140_reg <= fproduct_0_140;
if (reset == 1'b0 && ^(fproduct_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_140_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_141 = fproduct_0_141_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %141 = mul nsw i32 %140, %139*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
fproduct_0_141_reg <= fproduct_0_141;
if (reset == 1'b0 && ^(fproduct_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_141_reg"); $finish; end
end
/* fproduct: %0*/
/*   %141 = mul nsw i32 %140, %139*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
fproduct_0_141_reg <= fproduct_0_141;
if (reset == 1'b0 && ^(fproduct_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_141_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_142 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
fproduct_0_142_reg <= fproduct_0_142;
if (reset == 1'b0 && ^(fproduct_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_142_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_143 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
fproduct_0_143_reg <= fproduct_0_143;
if (reset == 1'b0 && ^(fproduct_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_143_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_144 = fproduct_0_144_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %144 = mul nsw i32 %143, %142*/
if ((cur_state == LEGUP_F_fproduct_BB_0_58))
begin
fproduct_0_144_reg <= fproduct_0_144;
if (reset == 1'b0 && ^(fproduct_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_144_reg"); $finish; end
end
/* fproduct: %0*/
/*   %144 = mul nsw i32 %143, %142*/
if ((cur_state == LEGUP_F_fproduct_BB_0_58))
begin
fproduct_0_144_reg <= fproduct_0_144;
if (reset == 1'b0 && ^(fproduct_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_144_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_145 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_58))
begin
fproduct_0_145_reg <= fproduct_0_145;
if (reset == 1'b0 && ^(fproduct_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_145_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %146 = getelementptr inbounds i32* %in, i32 7*/
begin
fproduct_0_146 = (arg_in + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %146 = getelementptr inbounds i32* %in, i32 7*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_146_reg <= fproduct_0_146;
if (reset == 1'b0 && ^(fproduct_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_146_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_147 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_58))
begin
fproduct_0_147_reg <= fproduct_0_147;
if (reset == 1'b0 && ^(fproduct_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_147_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_148 = fproduct_0_148_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %148 = mul nsw i32 %147, %145*/
if ((cur_state == LEGUP_F_fproduct_BB_0_59))
begin
fproduct_0_148_reg <= fproduct_0_148;
if (reset == 1'b0 && ^(fproduct_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_148_reg"); $finish; end
end
/* fproduct: %0*/
/*   %148 = mul nsw i32 %147, %145*/
if ((cur_state == LEGUP_F_fproduct_BB_0_59))
begin
fproduct_0_148_reg <= fproduct_0_148;
if (reset == 1'b0 && ^(fproduct_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_148_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %149 = getelementptr inbounds i32* %in2, i32 7*/
begin
fproduct_0_149 = (arg_in2 + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %149 = getelementptr inbounds i32* %in2, i32 7*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_149_reg <= fproduct_0_149;
if (reset == 1'b0 && ^(fproduct_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_149_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_150 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_59))
begin
fproduct_0_150_reg <= fproduct_0_150;
if (reset == 1'b0 && ^(fproduct_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_150_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_151 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_59))
begin
fproduct_0_151_reg <= fproduct_0_151;
if (reset == 1'b0 && ^(fproduct_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_151_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_152 = fproduct_0_152_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %152 = mul nsw i32 %151, %150*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
fproduct_0_152_reg <= fproduct_0_152;
if (reset == 1'b0 && ^(fproduct_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_152_reg"); $finish; end
end
/* fproduct: %0*/
/*   %152 = mul nsw i32 %151, %150*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
fproduct_0_152_reg <= fproduct_0_152;
if (reset == 1'b0 && ^(fproduct_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_152_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %153 = add i32 %132, %129*/
begin
fproduct_0_153 = (fproduct_0_132 + fproduct_0_129_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %153 = add i32 %132, %129*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
fproduct_0_153_reg <= fproduct_0_153;
if (reset == 1'b0 && ^(fproduct_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_153_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %154 = add i32 %153, %135*/
begin
fproduct_0_154 = (fproduct_0_153_reg + fproduct_0_135);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %154 = add i32 %153, %135*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
fproduct_0_154_reg <= fproduct_0_154;
if (reset == 1'b0 && ^(fproduct_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_154_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %155 = add i32 %154, %138*/
begin
fproduct_0_155 = (fproduct_0_154_reg + fproduct_0_138);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %155 = add i32 %154, %138*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
fproduct_0_155_reg <= fproduct_0_155;
if (reset == 1'b0 && ^(fproduct_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_155_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %156 = add i32 %155, %141*/
begin
fproduct_0_156 = (fproduct_0_155_reg + fproduct_0_141);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %156 = add i32 %155, %141*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
fproduct_0_156_reg <= fproduct_0_156;
if (reset == 1'b0 && ^(fproduct_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_156_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %157 = add i32 %156, %144*/
begin
fproduct_0_157 = (fproduct_0_156_reg + fproduct_0_144);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %157 = add i32 %156, %144*/
if ((cur_state == LEGUP_F_fproduct_BB_0_58))
begin
fproduct_0_157_reg <= fproduct_0_157;
if (reset == 1'b0 && ^(fproduct_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_157_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %158 = add i32 %157, %148*/
begin
fproduct_0_158 = (fproduct_0_157_reg + fproduct_0_148);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %158 = add i32 %157, %148*/
if ((cur_state == LEGUP_F_fproduct_BB_0_59))
begin
fproduct_0_158_reg <= fproduct_0_158;
if (reset == 1'b0 && ^(fproduct_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_158_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %159 = add i32 %158, %152*/
begin
fproduct_0_159 = (fproduct_0_158_reg + fproduct_0_152);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %159 = add i32 %158, %152*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
fproduct_0_159_reg <= fproduct_0_159;
if (reset == 1'b0 && ^(fproduct_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_159_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %160 = getelementptr inbounds i32* %output, i32 7*/
begin
fproduct_0_160 = (arg_output + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %160 = getelementptr inbounds i32* %output, i32 7*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_160_reg <= fproduct_0_160;
if (reset == 1'b0 && ^(fproduct_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_160_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_161 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
fproduct_0_161_reg <= fproduct_0_161;
if (reset == 1'b0 && ^(fproduct_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_161_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_162 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
fproduct_0_162_reg <= fproduct_0_162;
if (reset == 1'b0 && ^(fproduct_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_162_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_163 = fproduct_0_163_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %163 = mul nsw i32 %162, %161*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
fproduct_0_163_reg <= fproduct_0_163;
if (reset == 1'b0 && ^(fproduct_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_163_reg"); $finish; end
end
/* fproduct: %0*/
/*   %163 = mul nsw i32 %162, %161*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
fproduct_0_163_reg <= fproduct_0_163;
if (reset == 1'b0 && ^(fproduct_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_163_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_164 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
fproduct_0_164_reg <= fproduct_0_164;
if (reset == 1'b0 && ^(fproduct_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_164_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_165 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
fproduct_0_165_reg <= fproduct_0_165;
if (reset == 1'b0 && ^(fproduct_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_165_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_166 = fproduct_0_166_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %166 = mul nsw i32 %165, %164*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
fproduct_0_166_reg <= fproduct_0_166;
if (reset == 1'b0 && ^(fproduct_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_166_reg"); $finish; end
end
/* fproduct: %0*/
/*   %166 = mul nsw i32 %165, %164*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
fproduct_0_166_reg <= fproduct_0_166;
if (reset == 1'b0 && ^(fproduct_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_166_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_167 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
fproduct_0_167_reg <= fproduct_0_167;
if (reset == 1'b0 && ^(fproduct_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_167_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_168 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
fproduct_0_168_reg <= fproduct_0_168;
if (reset == 1'b0 && ^(fproduct_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_168_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_169 = fproduct_0_169_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %169 = mul nsw i32 %168, %167*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
fproduct_0_169_reg <= fproduct_0_169;
if (reset == 1'b0 && ^(fproduct_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_169_reg"); $finish; end
end
/* fproduct: %0*/
/*   %169 = mul nsw i32 %168, %167*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
fproduct_0_169_reg <= fproduct_0_169;
if (reset == 1'b0 && ^(fproduct_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_169_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_170 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
fproduct_0_170_reg <= fproduct_0_170;
if (reset == 1'b0 && ^(fproduct_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_170_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_171 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
fproduct_0_171_reg <= fproduct_0_171;
if (reset == 1'b0 && ^(fproduct_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_171_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_172 = fproduct_0_172_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %172 = mul nsw i32 %171, %170*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
fproduct_0_172_reg <= fproduct_0_172;
if (reset == 1'b0 && ^(fproduct_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_172_reg"); $finish; end
end
/* fproduct: %0*/
/*   %172 = mul nsw i32 %171, %170*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
fproduct_0_172_reg <= fproduct_0_172;
if (reset == 1'b0 && ^(fproduct_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_172_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_173 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
fproduct_0_173_reg <= fproduct_0_173;
if (reset == 1'b0 && ^(fproduct_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_173_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_174 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
fproduct_0_174_reg <= fproduct_0_174;
if (reset == 1'b0 && ^(fproduct_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_174_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_175 = fproduct_0_175_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %175 = mul nsw i32 %174, %173*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_175_reg <= fproduct_0_175;
if (reset == 1'b0 && ^(fproduct_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_175_reg"); $finish; end
end
/* fproduct: %0*/
/*   %175 = mul nsw i32 %174, %173*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_175_reg <= fproduct_0_175;
if (reset == 1'b0 && ^(fproduct_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_175_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %176 = add i32 %169, %166*/
begin
fproduct_0_176 = (fproduct_0_169 + fproduct_0_166_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %176 = add i32 %169, %166*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
fproduct_0_176_reg <= fproduct_0_176;
if (reset == 1'b0 && ^(fproduct_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_176_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %177 = add i32 %176, %172*/
begin
fproduct_0_177 = (fproduct_0_176_reg + fproduct_0_172);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %177 = add i32 %176, %172*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
fproduct_0_177_reg <= fproduct_0_177;
if (reset == 1'b0 && ^(fproduct_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_177_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %178 = add i32 %177, %175*/
begin
fproduct_0_178 = (fproduct_0_177_reg + fproduct_0_175);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %178 = add i32 %177, %175*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_178_reg <= fproduct_0_178;
if (reset == 1'b0 && ^(fproduct_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_178_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %179 = shl i32 %178, 1*/
begin
fproduct_0_179 = (fproduct_0_178 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %179 = shl i32 %178, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_179_reg <= fproduct_0_179;
if (reset == 1'b0 && ^(fproduct_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_179_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_180 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_180_reg <= fproduct_0_180;
if (reset == 1'b0 && ^(fproduct_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_180_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_181 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
fproduct_0_181_reg <= fproduct_0_181;
if (reset == 1'b0 && ^(fproduct_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_181_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_182 = fproduct_0_182_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %182 = mul nsw i32 %181, %180*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_182_reg <= fproduct_0_182;
if (reset == 1'b0 && ^(fproduct_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_182_reg"); $finish; end
end
/* fproduct: %0*/
/*   %182 = mul nsw i32 %181, %180*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_182_reg <= fproduct_0_182;
if (reset == 1'b0 && ^(fproduct_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_182_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_183 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_183_reg <= fproduct_0_183;
if (reset == 1'b0 && ^(fproduct_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_183_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_184 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_184_reg <= fproduct_0_184;
if (reset == 1'b0 && ^(fproduct_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_184_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_185 = fproduct_0_185_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %185 = mul nsw i32 %184, %183*/
if ((cur_state == LEGUP_F_fproduct_BB_0_70))
begin
fproduct_0_185_reg <= fproduct_0_185;
if (reset == 1'b0 && ^(fproduct_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_185_reg"); $finish; end
end
/* fproduct: %0*/
/*   %185 = mul nsw i32 %184, %183*/
if ((cur_state == LEGUP_F_fproduct_BB_0_70))
begin
fproduct_0_185_reg <= fproduct_0_185;
if (reset == 1'b0 && ^(fproduct_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_185_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_186 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_70))
begin
fproduct_0_186_reg <= fproduct_0_186;
if (reset == 1'b0 && ^(fproduct_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_186_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %187 = getelementptr inbounds i32* %in, i32 8*/
begin
fproduct_0_187 = (arg_in + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %187 = getelementptr inbounds i32* %in, i32 8*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_187_reg <= fproduct_0_187;
if (reset == 1'b0 && ^(fproduct_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_187_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_188 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_70))
begin
fproduct_0_188_reg <= fproduct_0_188;
if (reset == 1'b0 && ^(fproduct_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_188_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_189 = fproduct_0_189_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %189 = mul nsw i32 %188, %186*/
if ((cur_state == LEGUP_F_fproduct_BB_0_71))
begin
fproduct_0_189_reg <= fproduct_0_189;
if (reset == 1'b0 && ^(fproduct_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_189_reg"); $finish; end
end
/* fproduct: %0*/
/*   %189 = mul nsw i32 %188, %186*/
if ((cur_state == LEGUP_F_fproduct_BB_0_71))
begin
fproduct_0_189_reg <= fproduct_0_189;
if (reset == 1'b0 && ^(fproduct_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_189_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %190 = getelementptr inbounds i32* %in2, i32 8*/
begin
fproduct_0_190 = (arg_in2 + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %190 = getelementptr inbounds i32* %in2, i32 8*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_190_reg <= fproduct_0_190;
if (reset == 1'b0 && ^(fproduct_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_190_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_191 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_71))
begin
fproduct_0_191_reg <= fproduct_0_191;
if (reset == 1'b0 && ^(fproduct_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_191_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_192 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_71))
begin
fproduct_0_192_reg <= fproduct_0_192;
if (reset == 1'b0 && ^(fproduct_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_192_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_193 = fproduct_0_193_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
fproduct_0_193_reg <= fproduct_0_193;
if (reset == 1'b0 && ^(fproduct_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_193_reg"); $finish; end
end
/* fproduct: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
fproduct_0_193_reg <= fproduct_0_193;
if (reset == 1'b0 && ^(fproduct_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_193_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %194 = add i32 %182, %163*/
begin
fproduct_0_194 = (fproduct_0_182 + fproduct_0_163_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %194 = add i32 %182, %163*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_194_reg <= fproduct_0_194;
if (reset == 1'b0 && ^(fproduct_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_194_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %195 = add i32 %194, %179*/
begin
fproduct_0_195 = (fproduct_0_194 + fproduct_0_179_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %195 = add i32 %194, %179*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
fproduct_0_195_reg <= fproduct_0_195;
if (reset == 1'b0 && ^(fproduct_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_195_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %196 = add i32 %195, %185*/
begin
fproduct_0_196 = (fproduct_0_195_reg + fproduct_0_185);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %196 = add i32 %195, %185*/
if ((cur_state == LEGUP_F_fproduct_BB_0_70))
begin
fproduct_0_196_reg <= fproduct_0_196;
if (reset == 1'b0 && ^(fproduct_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_196_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %197 = add i32 %196, %189*/
begin
fproduct_0_197 = (fproduct_0_196_reg + fproduct_0_189);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %197 = add i32 %196, %189*/
if ((cur_state == LEGUP_F_fproduct_BB_0_71))
begin
fproduct_0_197_reg <= fproduct_0_197;
if (reset == 1'b0 && ^(fproduct_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_197_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %198 = add i32 %197, %193*/
begin
fproduct_0_198 = (fproduct_0_197_reg + fproduct_0_193);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %198 = add i32 %197, %193*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
fproduct_0_198_reg <= fproduct_0_198;
if (reset == 1'b0 && ^(fproduct_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_198_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %199 = getelementptr inbounds i32* %output, i32 8*/
begin
fproduct_0_199 = (arg_output + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %199 = getelementptr inbounds i32* %output, i32 8*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_199_reg <= fproduct_0_199;
if (reset == 1'b0 && ^(fproduct_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_199_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_200 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
fproduct_0_200_reg <= fproduct_0_200;
if (reset == 1'b0 && ^(fproduct_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_200_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_201 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
fproduct_0_201_reg <= fproduct_0_201;
if (reset == 1'b0 && ^(fproduct_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_201_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_202 = fproduct_0_202_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %202 = mul nsw i32 %201, %200*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
fproduct_0_202_reg <= fproduct_0_202;
if (reset == 1'b0 && ^(fproduct_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_202_reg"); $finish; end
end
/* fproduct: %0*/
/*   %202 = mul nsw i32 %201, %200*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
fproduct_0_202_reg <= fproduct_0_202;
if (reset == 1'b0 && ^(fproduct_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_202_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_203 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
fproduct_0_203_reg <= fproduct_0_203;
if (reset == 1'b0 && ^(fproduct_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_203_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_204 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
fproduct_0_204_reg <= fproduct_0_204;
if (reset == 1'b0 && ^(fproduct_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_204_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_205 = fproduct_0_205_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %205 = mul nsw i32 %204, %203*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
fproduct_0_205_reg <= fproduct_0_205;
if (reset == 1'b0 && ^(fproduct_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_205_reg"); $finish; end
end
/* fproduct: %0*/
/*   %205 = mul nsw i32 %204, %203*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
fproduct_0_205_reg <= fproduct_0_205;
if (reset == 1'b0 && ^(fproduct_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_205_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_206 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
fproduct_0_206_reg <= fproduct_0_206;
if (reset == 1'b0 && ^(fproduct_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_206_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_207 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
fproduct_0_207_reg <= fproduct_0_207;
if (reset == 1'b0 && ^(fproduct_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_207_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_208 = fproduct_0_208_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
fproduct_0_208_reg <= fproduct_0_208;
if (reset == 1'b0 && ^(fproduct_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_208_reg"); $finish; end
end
/* fproduct: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
fproduct_0_208_reg <= fproduct_0_208;
if (reset == 1'b0 && ^(fproduct_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_208_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_209 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
fproduct_0_209_reg <= fproduct_0_209;
if (reset == 1'b0 && ^(fproduct_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_209_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_210 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
fproduct_0_210_reg <= fproduct_0_210;
if (reset == 1'b0 && ^(fproduct_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_210_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_211 = fproduct_0_211_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %211 = mul nsw i32 %210, %209*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
fproduct_0_211_reg <= fproduct_0_211;
if (reset == 1'b0 && ^(fproduct_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_211_reg"); $finish; end
end
/* fproduct: %0*/
/*   %211 = mul nsw i32 %210, %209*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
fproduct_0_211_reg <= fproduct_0_211;
if (reset == 1'b0 && ^(fproduct_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_211_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_212 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
fproduct_0_212_reg <= fproduct_0_212;
if (reset == 1'b0 && ^(fproduct_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_212_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_213 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
fproduct_0_213_reg <= fproduct_0_213;
if (reset == 1'b0 && ^(fproduct_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_213_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_214 = fproduct_0_214_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %214 = mul nsw i32 %213, %212*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
fproduct_0_214_reg <= fproduct_0_214;
if (reset == 1'b0 && ^(fproduct_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_214_reg"); $finish; end
end
/* fproduct: %0*/
/*   %214 = mul nsw i32 %213, %212*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
fproduct_0_214_reg <= fproduct_0_214;
if (reset == 1'b0 && ^(fproduct_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_214_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_215 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
fproduct_0_215_reg <= fproduct_0_215;
if (reset == 1'b0 && ^(fproduct_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_215_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_216 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
fproduct_0_216_reg <= fproduct_0_216;
if (reset == 1'b0 && ^(fproduct_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_216_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_217 = fproduct_0_217_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %217 = mul nsw i32 %216, %215*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
fproduct_0_217_reg <= fproduct_0_217;
if (reset == 1'b0 && ^(fproduct_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_217_reg"); $finish; end
end
/* fproduct: %0*/
/*   %217 = mul nsw i32 %216, %215*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
fproduct_0_217_reg <= fproduct_0_217;
if (reset == 1'b0 && ^(fproduct_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_217_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_218 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
fproduct_0_218_reg <= fproduct_0_218;
if (reset == 1'b0 && ^(fproduct_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_218_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_219 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
fproduct_0_219_reg <= fproduct_0_219;
if (reset == 1'b0 && ^(fproduct_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_219_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_220 = fproduct_0_220_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %220 = mul nsw i32 %219, %218*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
fproduct_0_220_reg <= fproduct_0_220;
if (reset == 1'b0 && ^(fproduct_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_220_reg"); $finish; end
end
/* fproduct: %0*/
/*   %220 = mul nsw i32 %219, %218*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
fproduct_0_220_reg <= fproduct_0_220;
if (reset == 1'b0 && ^(fproduct_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_220_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_221 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
fproduct_0_221_reg <= fproduct_0_221;
if (reset == 1'b0 && ^(fproduct_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_221_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_222 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
fproduct_0_222_reg <= fproduct_0_222;
if (reset == 1'b0 && ^(fproduct_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_222_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_223 = fproduct_0_223_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %223 = mul nsw i32 %222, %221*/
if ((cur_state == LEGUP_F_fproduct_BB_0_83))
begin
fproduct_0_223_reg <= fproduct_0_223;
if (reset == 1'b0 && ^(fproduct_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_223_reg"); $finish; end
end
/* fproduct: %0*/
/*   %223 = mul nsw i32 %222, %221*/
if ((cur_state == LEGUP_F_fproduct_BB_0_83))
begin
fproduct_0_223_reg <= fproduct_0_223;
if (reset == 1'b0 && ^(fproduct_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_223_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
begin
fproduct_0_224 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_83))
begin
fproduct_0_224_reg <= fproduct_0_224;
if (reset == 1'b0 && ^(fproduct_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_224_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %225 = getelementptr inbounds i32* %in, i32 9*/
begin
fproduct_0_225 = (arg_in + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %225 = getelementptr inbounds i32* %in, i32 9*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_225_reg <= fproduct_0_225;
if (reset == 1'b0 && ^(fproduct_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_225_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_226 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_83))
begin
fproduct_0_226_reg <= fproduct_0_226;
if (reset == 1'b0 && ^(fproduct_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_226_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_227 = fproduct_0_227_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %227 = mul nsw i32 %226, %224*/
if ((cur_state == LEGUP_F_fproduct_BB_0_84))
begin
fproduct_0_227_reg <= fproduct_0_227;
if (reset == 1'b0 && ^(fproduct_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_227_reg"); $finish; end
end
/* fproduct: %0*/
/*   %227 = mul nsw i32 %226, %224*/
if ((cur_state == LEGUP_F_fproduct_BB_0_84))
begin
fproduct_0_227_reg <= fproduct_0_227;
if (reset == 1'b0 && ^(fproduct_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_227_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %228 = getelementptr inbounds i32* %in2, i32 9*/
begin
fproduct_0_228 = (arg_in2 + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %228 = getelementptr inbounds i32* %in2, i32 9*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_228_reg <= fproduct_0_228;
if (reset == 1'b0 && ^(fproduct_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_228_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_229 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_84))
begin
fproduct_0_229_reg <= fproduct_0_229;
if (reset == 1'b0 && ^(fproduct_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_229_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
begin
fproduct_0_230 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_84))
begin
fproduct_0_230_reg <= fproduct_0_230;
if (reset == 1'b0 && ^(fproduct_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_230_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_231 = fproduct_0_231_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %231 = mul nsw i32 %230, %229*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
fproduct_0_231_reg <= fproduct_0_231;
if (reset == 1'b0 && ^(fproduct_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_231_reg"); $finish; end
end
/* fproduct: %0*/
/*   %231 = mul nsw i32 %230, %229*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
fproduct_0_231_reg <= fproduct_0_231;
if (reset == 1'b0 && ^(fproduct_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_231_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %232 = add i32 %205, %202*/
begin
fproduct_0_232 = (fproduct_0_205 + fproduct_0_202_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %232 = add i32 %205, %202*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
fproduct_0_232_reg <= fproduct_0_232;
if (reset == 1'b0 && ^(fproduct_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_232_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %233 = add i32 %232, %208*/
begin
fproduct_0_233 = (fproduct_0_232_reg + fproduct_0_208);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %233 = add i32 %232, %208*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
fproduct_0_233_reg <= fproduct_0_233;
if (reset == 1'b0 && ^(fproduct_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_233_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %234 = add i32 %233, %211*/
begin
fproduct_0_234 = (fproduct_0_233_reg + fproduct_0_211);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %234 = add i32 %233, %211*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
fproduct_0_234_reg <= fproduct_0_234;
if (reset == 1'b0 && ^(fproduct_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_234_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %235 = add i32 %234, %214*/
begin
fproduct_0_235 = (fproduct_0_234_reg + fproduct_0_214);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %235 = add i32 %234, %214*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
fproduct_0_235_reg <= fproduct_0_235;
if (reset == 1'b0 && ^(fproduct_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_235_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %236 = add i32 %235, %217*/
begin
fproduct_0_236 = (fproduct_0_235_reg + fproduct_0_217);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %236 = add i32 %235, %217*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
fproduct_0_236_reg <= fproduct_0_236;
if (reset == 1'b0 && ^(fproduct_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_236_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %237 = add i32 %236, %220*/
begin
fproduct_0_237 = (fproduct_0_236_reg + fproduct_0_220);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %237 = add i32 %236, %220*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
fproduct_0_237_reg <= fproduct_0_237;
if (reset == 1'b0 && ^(fproduct_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_237_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %238 = add i32 %237, %223*/
begin
fproduct_0_238 = (fproduct_0_237_reg + fproduct_0_223);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %238 = add i32 %237, %223*/
if ((cur_state == LEGUP_F_fproduct_BB_0_83))
begin
fproduct_0_238_reg <= fproduct_0_238;
if (reset == 1'b0 && ^(fproduct_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_238_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %239 = add i32 %238, %227*/
begin
fproduct_0_239 = (fproduct_0_238_reg + fproduct_0_227);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %239 = add i32 %238, %227*/
if ((cur_state == LEGUP_F_fproduct_BB_0_84))
begin
fproduct_0_239_reg <= fproduct_0_239;
if (reset == 1'b0 && ^(fproduct_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_239_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %240 = add i32 %239, %231*/
begin
fproduct_0_240 = (fproduct_0_239_reg + fproduct_0_231);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %240 = add i32 %239, %231*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
fproduct_0_240_reg <= fproduct_0_240;
if (reset == 1'b0 && ^(fproduct_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_240_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %241 = getelementptr inbounds i32* %output, i32 9*/
begin
fproduct_0_241 = (arg_output + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %241 = getelementptr inbounds i32* %output, i32 9*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_241_reg <= fproduct_0_241;
if (reset == 1'b0 && ^(fproduct_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_241_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_242 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
fproduct_0_242_reg <= fproduct_0_242;
if (reset == 1'b0 && ^(fproduct_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_242_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_243 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
fproduct_0_243_reg <= fproduct_0_243;
if (reset == 1'b0 && ^(fproduct_0_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_243_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_244 = fproduct_0_244_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %244 = mul nsw i32 %243, %242*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
fproduct_0_244_reg <= fproduct_0_244;
if (reset == 1'b0 && ^(fproduct_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_244_reg"); $finish; end
end
/* fproduct: %0*/
/*   %244 = mul nsw i32 %243, %242*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
fproduct_0_244_reg <= fproduct_0_244;
if (reset == 1'b0 && ^(fproduct_0_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_244_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_245 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
fproduct_0_245_reg <= fproduct_0_245;
if (reset == 1'b0 && ^(fproduct_0_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_245_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_246 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
fproduct_0_246_reg <= fproduct_0_246;
if (reset == 1'b0 && ^(fproduct_0_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_246_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_247 = fproduct_0_247_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %247 = mul nsw i32 %246, %245*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
fproduct_0_247_reg <= fproduct_0_247;
if (reset == 1'b0 && ^(fproduct_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_247_reg"); $finish; end
end
/* fproduct: %0*/
/*   %247 = mul nsw i32 %246, %245*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
fproduct_0_247_reg <= fproduct_0_247;
if (reset == 1'b0 && ^(fproduct_0_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_247_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_248 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
fproduct_0_248_reg <= fproduct_0_248;
if (reset == 1'b0 && ^(fproduct_0_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_248_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_249 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
fproduct_0_249_reg <= fproduct_0_249;
if (reset == 1'b0 && ^(fproduct_0_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_249_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_250 = fproduct_0_250_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %250 = mul nsw i32 %249, %248*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
fproduct_0_250_reg <= fproduct_0_250;
if (reset == 1'b0 && ^(fproduct_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_250_reg"); $finish; end
end
/* fproduct: %0*/
/*   %250 = mul nsw i32 %249, %248*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
fproduct_0_250_reg <= fproduct_0_250;
if (reset == 1'b0 && ^(fproduct_0_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_250_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
begin
fproduct_0_251 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
fproduct_0_251_reg <= fproduct_0_251;
if (reset == 1'b0 && ^(fproduct_0_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_251_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_252 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
fproduct_0_252_reg <= fproduct_0_252;
if (reset == 1'b0 && ^(fproduct_0_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_252_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_253 = fproduct_0_253_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %253 = mul nsw i32 %252, %251*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
fproduct_0_253_reg <= fproduct_0_253;
if (reset == 1'b0 && ^(fproduct_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_253_reg"); $finish; end
end
/* fproduct: %0*/
/*   %253 = mul nsw i32 %252, %251*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
fproduct_0_253_reg <= fproduct_0_253;
if (reset == 1'b0 && ^(fproduct_0_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_253_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_254 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
fproduct_0_254_reg <= fproduct_0_254;
if (reset == 1'b0 && ^(fproduct_0_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_254_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
begin
fproduct_0_255 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
fproduct_0_255_reg <= fproduct_0_255;
if (reset == 1'b0 && ^(fproduct_0_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_255_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_256 = fproduct_0_256_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %256 = mul nsw i32 %255, %254*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_256_reg <= fproduct_0_256;
if (reset == 1'b0 && ^(fproduct_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_256_reg"); $finish; end
end
/* fproduct: %0*/
/*   %256 = mul nsw i32 %255, %254*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_256_reg <= fproduct_0_256;
if (reset == 1'b0 && ^(fproduct_0_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_256_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %257 = add i32 %247, %244*/
begin
fproduct_0_257 = (fproduct_0_247 + fproduct_0_244_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %257 = add i32 %247, %244*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
fproduct_0_257_reg <= fproduct_0_257;
if (reset == 1'b0 && ^(fproduct_0_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_257_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %258 = add i32 %257, %250*/
begin
fproduct_0_258 = (fproduct_0_257_reg + fproduct_0_250);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %258 = add i32 %257, %250*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
fproduct_0_258_reg <= fproduct_0_258;
if (reset == 1'b0 && ^(fproduct_0_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_258_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %259 = add i32 %258, %253*/
begin
fproduct_0_259 = (fproduct_0_258_reg + fproduct_0_253);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %259 = add i32 %258, %253*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
fproduct_0_259_reg <= fproduct_0_259;
if (reset == 1'b0 && ^(fproduct_0_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_259_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %260 = add i32 %259, %256*/
begin
fproduct_0_260 = (fproduct_0_259_reg + fproduct_0_256);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %260 = add i32 %259, %256*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_260_reg <= fproduct_0_260;
if (reset == 1'b0 && ^(fproduct_0_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_260_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %261 = shl i32 %260, 1*/
begin
fproduct_0_261 = (fproduct_0_260 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %261 = shl i32 %260, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_261_reg <= fproduct_0_261;
if (reset == 1'b0 && ^(fproduct_0_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_261_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_262 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_262_reg <= fproduct_0_262;
if (reset == 1'b0 && ^(fproduct_0_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_262_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_263 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
fproduct_0_263_reg <= fproduct_0_263;
if (reset == 1'b0 && ^(fproduct_0_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_263_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_264 = fproduct_0_264_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %264 = mul nsw i32 %263, %262*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
fproduct_0_264_reg <= fproduct_0_264;
if (reset == 1'b0 && ^(fproduct_0_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_264_reg"); $finish; end
end
/* fproduct: %0*/
/*   %264 = mul nsw i32 %263, %262*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
fproduct_0_264_reg <= fproduct_0_264;
if (reset == 1'b0 && ^(fproduct_0_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_264_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_265 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
fproduct_0_265_reg <= fproduct_0_265;
if (reset == 1'b0 && ^(fproduct_0_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_265_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_266 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
fproduct_0_266_reg <= fproduct_0_266;
if (reset == 1'b0 && ^(fproduct_0_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_266_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_267 = fproduct_0_267_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %267 = mul nsw i32 %266, %265*/
if ((cur_state == LEGUP_F_fproduct_BB_0_95))
begin
fproduct_0_267_reg <= fproduct_0_267;
if (reset == 1'b0 && ^(fproduct_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_267_reg"); $finish; end
end
/* fproduct: %0*/
/*   %267 = mul nsw i32 %266, %265*/
if ((cur_state == LEGUP_F_fproduct_BB_0_95))
begin
fproduct_0_267_reg <= fproduct_0_267;
if (reset == 1'b0 && ^(fproduct_0_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_267_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_268 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_95))
begin
fproduct_0_268_reg <= fproduct_0_268;
if (reset == 1'b0 && ^(fproduct_0_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_268_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_269 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_95))
begin
fproduct_0_269_reg <= fproduct_0_269;
if (reset == 1'b0 && ^(fproduct_0_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_269_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_270 = fproduct_0_270_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %270 = mul nsw i32 %269, %268*/
if ((cur_state == LEGUP_F_fproduct_BB_0_96))
begin
fproduct_0_270_reg <= fproduct_0_270;
if (reset == 1'b0 && ^(fproduct_0_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_270_reg"); $finish; end
end
/* fproduct: %0*/
/*   %270 = mul nsw i32 %269, %268*/
if ((cur_state == LEGUP_F_fproduct_BB_0_96))
begin
fproduct_0_270_reg <= fproduct_0_270;
if (reset == 1'b0 && ^(fproduct_0_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_270_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_271 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_96))
begin
fproduct_0_271_reg <= fproduct_0_271;
if (reset == 1'b0 && ^(fproduct_0_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_271_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_272 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_96))
begin
fproduct_0_272_reg <= fproduct_0_272;
if (reset == 1'b0 && ^(fproduct_0_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_272_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_273 = fproduct_0_273_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %273 = mul nsw i32 %272, %271*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
fproduct_0_273_reg <= fproduct_0_273;
if (reset == 1'b0 && ^(fproduct_0_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_273_reg"); $finish; end
end
/* fproduct: %0*/
/*   %273 = mul nsw i32 %272, %271*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
fproduct_0_273_reg <= fproduct_0_273;
if (reset == 1'b0 && ^(fproduct_0_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_273_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %274 = add i32 %261, %264*/
begin
fproduct_0_274 = (fproduct_0_261_reg + fproduct_0_264);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %274 = add i32 %261, %264*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
fproduct_0_274_reg <= fproduct_0_274;
if (reset == 1'b0 && ^(fproduct_0_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_274_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %275 = add i32 %274, %267*/
begin
fproduct_0_275 = (fproduct_0_274_reg + fproduct_0_267);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %275 = add i32 %274, %267*/
if ((cur_state == LEGUP_F_fproduct_BB_0_95))
begin
fproduct_0_275_reg <= fproduct_0_275;
if (reset == 1'b0 && ^(fproduct_0_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_275_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %276 = add i32 %275, %270*/
begin
fproduct_0_276 = (fproduct_0_275_reg + fproduct_0_270);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %276 = add i32 %275, %270*/
if ((cur_state == LEGUP_F_fproduct_BB_0_96))
begin
fproduct_0_276_reg <= fproduct_0_276;
if (reset == 1'b0 && ^(fproduct_0_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_276_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %277 = add i32 %276, %273*/
begin
fproduct_0_277 = (fproduct_0_276_reg + fproduct_0_273);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %277 = add i32 %276, %273*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
fproduct_0_277_reg <= fproduct_0_277;
if (reset == 1'b0 && ^(fproduct_0_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_277_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %278 = getelementptr inbounds i32* %output, i32 10*/
begin
fproduct_0_278 = (arg_output + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %278 = getelementptr inbounds i32* %output, i32 10*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_278_reg <= fproduct_0_278;
if (reset == 1'b0 && ^(fproduct_0_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_278_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_279 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
fproduct_0_279_reg <= fproduct_0_279;
if (reset == 1'b0 && ^(fproduct_0_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_279_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_280 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
fproduct_0_280_reg <= fproduct_0_280;
if (reset == 1'b0 && ^(fproduct_0_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_280_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_281 = fproduct_0_281_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %281 = mul nsw i32 %280, %279*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
fproduct_0_281_reg <= fproduct_0_281;
if (reset == 1'b0 && ^(fproduct_0_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_281_reg"); $finish; end
end
/* fproduct: %0*/
/*   %281 = mul nsw i32 %280, %279*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
fproduct_0_281_reg <= fproduct_0_281;
if (reset == 1'b0 && ^(fproduct_0_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_281_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_282 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
fproduct_0_282_reg <= fproduct_0_282;
if (reset == 1'b0 && ^(fproduct_0_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_282_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_283 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
fproduct_0_283_reg <= fproduct_0_283;
if (reset == 1'b0 && ^(fproduct_0_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_283_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_284 = fproduct_0_284_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %284 = mul nsw i32 %283, %282*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
fproduct_0_284_reg <= fproduct_0_284;
if (reset == 1'b0 && ^(fproduct_0_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_284_reg"); $finish; end
end
/* fproduct: %0*/
/*   %284 = mul nsw i32 %283, %282*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
fproduct_0_284_reg <= fproduct_0_284;
if (reset == 1'b0 && ^(fproduct_0_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_284_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_285 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
fproduct_0_285_reg <= fproduct_0_285;
if (reset == 1'b0 && ^(fproduct_0_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_285_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_286 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
fproduct_0_286_reg <= fproduct_0_286;
if (reset == 1'b0 && ^(fproduct_0_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_286_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_287 = fproduct_0_287_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %287 = mul nsw i32 %286, %285*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
fproduct_0_287_reg <= fproduct_0_287;
if (reset == 1'b0 && ^(fproduct_0_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_287_reg"); $finish; end
end
/* fproduct: %0*/
/*   %287 = mul nsw i32 %286, %285*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
fproduct_0_287_reg <= fproduct_0_287;
if (reset == 1'b0 && ^(fproduct_0_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_287_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_288 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
fproduct_0_288_reg <= fproduct_0_288;
if (reset == 1'b0 && ^(fproduct_0_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_288_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_289 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
fproduct_0_289_reg <= fproduct_0_289;
if (reset == 1'b0 && ^(fproduct_0_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_289_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_290 = fproduct_0_290_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %290 = mul nsw i32 %289, %288*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
fproduct_0_290_reg <= fproduct_0_290;
if (reset == 1'b0 && ^(fproduct_0_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_290_reg"); $finish; end
end
/* fproduct: %0*/
/*   %290 = mul nsw i32 %289, %288*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
fproduct_0_290_reg <= fproduct_0_290;
if (reset == 1'b0 && ^(fproduct_0_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_290_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_291 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
fproduct_0_291_reg <= fproduct_0_291;
if (reset == 1'b0 && ^(fproduct_0_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_291_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_292 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
fproduct_0_292_reg <= fproduct_0_292;
if (reset == 1'b0 && ^(fproduct_0_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_292_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_293 = fproduct_0_293_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %293 = mul nsw i32 %292, %291*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
fproduct_0_293_reg <= fproduct_0_293;
if (reset == 1'b0 && ^(fproduct_0_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_293_reg"); $finish; end
end
/* fproduct: %0*/
/*   %293 = mul nsw i32 %292, %291*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
fproduct_0_293_reg <= fproduct_0_293;
if (reset == 1'b0 && ^(fproduct_0_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_293_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_294 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
fproduct_0_294_reg <= fproduct_0_294;
if (reset == 1'b0 && ^(fproduct_0_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_294_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_295 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
fproduct_0_295_reg <= fproduct_0_295;
if (reset == 1'b0 && ^(fproduct_0_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_295_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_296 = fproduct_0_296_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %296 = mul nsw i32 %295, %294*/
if ((cur_state == LEGUP_F_fproduct_BB_0_106))
begin
fproduct_0_296_reg <= fproduct_0_296;
if (reset == 1'b0 && ^(fproduct_0_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_296_reg"); $finish; end
end
/* fproduct: %0*/
/*   %296 = mul nsw i32 %295, %294*/
if ((cur_state == LEGUP_F_fproduct_BB_0_106))
begin
fproduct_0_296_reg <= fproduct_0_296;
if (reset == 1'b0 && ^(fproduct_0_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_296_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
begin
fproduct_0_297 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_106))
begin
fproduct_0_297_reg <= fproduct_0_297;
if (reset == 1'b0 && ^(fproduct_0_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_297_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_298 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_106))
begin
fproduct_0_298_reg <= fproduct_0_298;
if (reset == 1'b0 && ^(fproduct_0_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_298_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_299 = fproduct_0_299_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %299 = mul nsw i32 %298, %297*/
if ((cur_state == LEGUP_F_fproduct_BB_0_107))
begin
fproduct_0_299_reg <= fproduct_0_299;
if (reset == 1'b0 && ^(fproduct_0_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_299_reg"); $finish; end
end
/* fproduct: %0*/
/*   %299 = mul nsw i32 %298, %297*/
if ((cur_state == LEGUP_F_fproduct_BB_0_107))
begin
fproduct_0_299_reg <= fproduct_0_299;
if (reset == 1'b0 && ^(fproduct_0_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_299_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_300 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_107))
begin
fproduct_0_300_reg <= fproduct_0_300;
if (reset == 1'b0 && ^(fproduct_0_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_300_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
begin
fproduct_0_301 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_107))
begin
fproduct_0_301_reg <= fproduct_0_301;
if (reset == 1'b0 && ^(fproduct_0_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_301_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_302 = fproduct_0_302_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %302 = mul nsw i32 %301, %300*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
fproduct_0_302_reg <= fproduct_0_302;
if (reset == 1'b0 && ^(fproduct_0_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_302_reg"); $finish; end
end
/* fproduct: %0*/
/*   %302 = mul nsw i32 %301, %300*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
fproduct_0_302_reg <= fproduct_0_302;
if (reset == 1'b0 && ^(fproduct_0_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_302_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %303 = add i32 %284, %281*/
begin
fproduct_0_303 = (fproduct_0_284 + fproduct_0_281_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %303 = add i32 %284, %281*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
fproduct_0_303_reg <= fproduct_0_303;
if (reset == 1'b0 && ^(fproduct_0_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_303_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %304 = add i32 %303, %287*/
begin
fproduct_0_304 = (fproduct_0_303_reg + fproduct_0_287);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %304 = add i32 %303, %287*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
fproduct_0_304_reg <= fproduct_0_304;
if (reset == 1'b0 && ^(fproduct_0_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_304_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %305 = add i32 %304, %290*/
begin
fproduct_0_305 = (fproduct_0_304_reg + fproduct_0_290);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %305 = add i32 %304, %290*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
fproduct_0_305_reg <= fproduct_0_305;
if (reset == 1'b0 && ^(fproduct_0_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_305_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %306 = add i32 %305, %293*/
begin
fproduct_0_306 = (fproduct_0_305_reg + fproduct_0_293);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %306 = add i32 %305, %293*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
fproduct_0_306_reg <= fproduct_0_306;
if (reset == 1'b0 && ^(fproduct_0_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_306_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %307 = add i32 %306, %296*/
begin
fproduct_0_307 = (fproduct_0_306_reg + fproduct_0_296);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %307 = add i32 %306, %296*/
if ((cur_state == LEGUP_F_fproduct_BB_0_106))
begin
fproduct_0_307_reg <= fproduct_0_307;
if (reset == 1'b0 && ^(fproduct_0_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_307_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %308 = add i32 %307, %299*/
begin
fproduct_0_308 = (fproduct_0_307_reg + fproduct_0_299);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %308 = add i32 %307, %299*/
if ((cur_state == LEGUP_F_fproduct_BB_0_107))
begin
fproduct_0_308_reg <= fproduct_0_308;
if (reset == 1'b0 && ^(fproduct_0_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_308_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %309 = add i32 %308, %302*/
begin
fproduct_0_309 = (fproduct_0_308_reg + fproduct_0_302);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %309 = add i32 %308, %302*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
fproduct_0_309_reg <= fproduct_0_309;
if (reset == 1'b0 && ^(fproduct_0_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_309_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %310 = getelementptr inbounds i32* %output, i32 11*/
begin
fproduct_0_310 = (arg_output + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %310 = getelementptr inbounds i32* %output, i32 11*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_310_reg <= fproduct_0_310;
if (reset == 1'b0 && ^(fproduct_0_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_310_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_311 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
fproduct_0_311_reg <= fproduct_0_311;
if (reset == 1'b0 && ^(fproduct_0_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_311_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_312 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
fproduct_0_312_reg <= fproduct_0_312;
if (reset == 1'b0 && ^(fproduct_0_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_312_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_313 = fproduct_0_313_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %313 = mul nsw i32 %312, %311*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
fproduct_0_313_reg <= fproduct_0_313;
if (reset == 1'b0 && ^(fproduct_0_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_313_reg"); $finish; end
end
/* fproduct: %0*/
/*   %313 = mul nsw i32 %312, %311*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
fproduct_0_313_reg <= fproduct_0_313;
if (reset == 1'b0 && ^(fproduct_0_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_313_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_314 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
fproduct_0_314_reg <= fproduct_0_314;
if (reset == 1'b0 && ^(fproduct_0_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_314_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_315 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
fproduct_0_315_reg <= fproduct_0_315;
if (reset == 1'b0 && ^(fproduct_0_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_315_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_316 = fproduct_0_316_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %316 = mul nsw i32 %315, %314*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
fproduct_0_316_reg <= fproduct_0_316;
if (reset == 1'b0 && ^(fproduct_0_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_316_reg"); $finish; end
end
/* fproduct: %0*/
/*   %316 = mul nsw i32 %315, %314*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
fproduct_0_316_reg <= fproduct_0_316;
if (reset == 1'b0 && ^(fproduct_0_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_316_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_317 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
fproduct_0_317_reg <= fproduct_0_317;
if (reset == 1'b0 && ^(fproduct_0_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_317_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_318 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
fproduct_0_318_reg <= fproduct_0_318;
if (reset == 1'b0 && ^(fproduct_0_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_318_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_319 = fproduct_0_319_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %319 = mul nsw i32 %318, %317*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
fproduct_0_319_reg <= fproduct_0_319;
if (reset == 1'b0 && ^(fproduct_0_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_319_reg"); $finish; end
end
/* fproduct: %0*/
/*   %319 = mul nsw i32 %318, %317*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
fproduct_0_319_reg <= fproduct_0_319;
if (reset == 1'b0 && ^(fproduct_0_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_319_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
begin
fproduct_0_320 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
fproduct_0_320_reg <= fproduct_0_320;
if (reset == 1'b0 && ^(fproduct_0_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_320_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_321 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
fproduct_0_321_reg <= fproduct_0_321;
if (reset == 1'b0 && ^(fproduct_0_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_321_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_322 = fproduct_0_322_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %322 = mul nsw i32 %321, %320*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
fproduct_0_322_reg <= fproduct_0_322;
if (reset == 1'b0 && ^(fproduct_0_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_322_reg"); $finish; end
end
/* fproduct: %0*/
/*   %322 = mul nsw i32 %321, %320*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
fproduct_0_322_reg <= fproduct_0_322;
if (reset == 1'b0 && ^(fproduct_0_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_322_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_323 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
fproduct_0_323_reg <= fproduct_0_323;
if (reset == 1'b0 && ^(fproduct_0_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_323_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
begin
fproduct_0_324 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
fproduct_0_324_reg <= fproduct_0_324;
if (reset == 1'b0 && ^(fproduct_0_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_324_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_325 = fproduct_0_325_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %325 = mul nsw i32 %324, %323*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_325_reg <= fproduct_0_325;
if (reset == 1'b0 && ^(fproduct_0_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_325_reg"); $finish; end
end
/* fproduct: %0*/
/*   %325 = mul nsw i32 %324, %323*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_325_reg <= fproduct_0_325;
if (reset == 1'b0 && ^(fproduct_0_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_325_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %326 = add i32 %319, %316*/
begin
fproduct_0_326 = (fproduct_0_319 + fproduct_0_316_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %326 = add i32 %319, %316*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
fproduct_0_326_reg <= fproduct_0_326;
if (reset == 1'b0 && ^(fproduct_0_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_326_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %327 = add i32 %326, %322*/
begin
fproduct_0_327 = (fproduct_0_326_reg + fproduct_0_322);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %327 = add i32 %326, %322*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
fproduct_0_327_reg <= fproduct_0_327;
if (reset == 1'b0 && ^(fproduct_0_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_327_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %328 = add i32 %327, %325*/
begin
fproduct_0_328 = (fproduct_0_327_reg + fproduct_0_325);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %328 = add i32 %327, %325*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_328_reg <= fproduct_0_328;
if (reset == 1'b0 && ^(fproduct_0_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_328_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %329 = shl i32 %328, 1*/
begin
fproduct_0_329 = (fproduct_0_328 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %329 = shl i32 %328, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_329_reg <= fproduct_0_329;
if (reset == 1'b0 && ^(fproduct_0_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_329_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_330 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_330_reg <= fproduct_0_330;
if (reset == 1'b0 && ^(fproduct_0_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_330_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_331 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_116))
begin
fproduct_0_331_reg <= fproduct_0_331;
if (reset == 1'b0 && ^(fproduct_0_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_331_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_332 = fproduct_0_332_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %332 = mul nsw i32 %331, %330*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_332_reg <= fproduct_0_332;
if (reset == 1'b0 && ^(fproduct_0_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_332_reg"); $finish; end
end
/* fproduct: %0*/
/*   %332 = mul nsw i32 %331, %330*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_332_reg <= fproduct_0_332;
if (reset == 1'b0 && ^(fproduct_0_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_332_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_333 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_333_reg <= fproduct_0_333;
if (reset == 1'b0 && ^(fproduct_0_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_333_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_334 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_334_reg <= fproduct_0_334;
if (reset == 1'b0 && ^(fproduct_0_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_334_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_335 = fproduct_0_335_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %335 = mul nsw i32 %334, %333*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
fproduct_0_335_reg <= fproduct_0_335;
if (reset == 1'b0 && ^(fproduct_0_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_335_reg"); $finish; end
end
/* fproduct: %0*/
/*   %335 = mul nsw i32 %334, %333*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
fproduct_0_335_reg <= fproduct_0_335;
if (reset == 1'b0 && ^(fproduct_0_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_335_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %336 = add i32 %332, %313*/
begin
fproduct_0_336 = (fproduct_0_332 + fproduct_0_313_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %336 = add i32 %332, %313*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_336_reg <= fproduct_0_336;
if (reset == 1'b0 && ^(fproduct_0_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_336_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %337 = add i32 %336, %329*/
begin
fproduct_0_337 = (fproduct_0_336 + fproduct_0_329_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %337 = add i32 %336, %329*/
if ((cur_state == LEGUP_F_fproduct_BB_0_117))
begin
fproduct_0_337_reg <= fproduct_0_337;
if (reset == 1'b0 && ^(fproduct_0_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_337_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %338 = add i32 %337, %335*/
begin
fproduct_0_338 = (fproduct_0_337_reg + fproduct_0_335);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %338 = add i32 %337, %335*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
fproduct_0_338_reg <= fproduct_0_338;
if (reset == 1'b0 && ^(fproduct_0_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_338_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %339 = getelementptr inbounds i32* %output, i32 12*/
begin
fproduct_0_339 = (arg_output + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %339 = getelementptr inbounds i32* %output, i32 12*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_339_reg <= fproduct_0_339;
if (reset == 1'b0 && ^(fproduct_0_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_339_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_340 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
fproduct_0_340_reg <= fproduct_0_340;
if (reset == 1'b0 && ^(fproduct_0_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_340_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_341 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
fproduct_0_341_reg <= fproduct_0_341;
if (reset == 1'b0 && ^(fproduct_0_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_341_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_342 = fproduct_0_342_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %342 = mul nsw i32 %341, %340*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
fproduct_0_342_reg <= fproduct_0_342;
if (reset == 1'b0 && ^(fproduct_0_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_342_reg"); $finish; end
end
/* fproduct: %0*/
/*   %342 = mul nsw i32 %341, %340*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
fproduct_0_342_reg <= fproduct_0_342;
if (reset == 1'b0 && ^(fproduct_0_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_342_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_343 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
fproduct_0_343_reg <= fproduct_0_343;
if (reset == 1'b0 && ^(fproduct_0_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_343_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_344 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
fproduct_0_344_reg <= fproduct_0_344;
if (reset == 1'b0 && ^(fproduct_0_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_344_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_345 = fproduct_0_345_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %345 = mul nsw i32 %344, %343*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
fproduct_0_345_reg <= fproduct_0_345;
if (reset == 1'b0 && ^(fproduct_0_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_345_reg"); $finish; end
end
/* fproduct: %0*/
/*   %345 = mul nsw i32 %344, %343*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
fproduct_0_345_reg <= fproduct_0_345;
if (reset == 1'b0 && ^(fproduct_0_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_345_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_346 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
fproduct_0_346_reg <= fproduct_0_346;
if (reset == 1'b0 && ^(fproduct_0_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_346_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_347 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
fproduct_0_347_reg <= fproduct_0_347;
if (reset == 1'b0 && ^(fproduct_0_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_347_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_348 = fproduct_0_348_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %348 = mul nsw i32 %347, %346*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
fproduct_0_348_reg <= fproduct_0_348;
if (reset == 1'b0 && ^(fproduct_0_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_348_reg"); $finish; end
end
/* fproduct: %0*/
/*   %348 = mul nsw i32 %347, %346*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
fproduct_0_348_reg <= fproduct_0_348;
if (reset == 1'b0 && ^(fproduct_0_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_348_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_349 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
fproduct_0_349_reg <= fproduct_0_349;
if (reset == 1'b0 && ^(fproduct_0_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_349_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_350 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
fproduct_0_350_reg <= fproduct_0_350;
if (reset == 1'b0 && ^(fproduct_0_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_350_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_351 = fproduct_0_351_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %351 = mul nsw i32 %350, %349*/
if ((cur_state == LEGUP_F_fproduct_BB_0_125))
begin
fproduct_0_351_reg <= fproduct_0_351;
if (reset == 1'b0 && ^(fproduct_0_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_351_reg"); $finish; end
end
/* fproduct: %0*/
/*   %351 = mul nsw i32 %350, %349*/
if ((cur_state == LEGUP_F_fproduct_BB_0_125))
begin
fproduct_0_351_reg <= fproduct_0_351;
if (reset == 1'b0 && ^(fproduct_0_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_351_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
begin
fproduct_0_352 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_125))
begin
fproduct_0_352_reg <= fproduct_0_352;
if (reset == 1'b0 && ^(fproduct_0_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_352_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_353 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_125))
begin
fproduct_0_353_reg <= fproduct_0_353;
if (reset == 1'b0 && ^(fproduct_0_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_353_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_354 = fproduct_0_354_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %354 = mul nsw i32 %353, %352*/
if ((cur_state == LEGUP_F_fproduct_BB_0_126))
begin
fproduct_0_354_reg <= fproduct_0_354;
if (reset == 1'b0 && ^(fproduct_0_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_354_reg"); $finish; end
end
/* fproduct: %0*/
/*   %354 = mul nsw i32 %353, %352*/
if ((cur_state == LEGUP_F_fproduct_BB_0_126))
begin
fproduct_0_354_reg <= fproduct_0_354;
if (reset == 1'b0 && ^(fproduct_0_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_354_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_355 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_126))
begin
fproduct_0_355_reg <= fproduct_0_355;
if (reset == 1'b0 && ^(fproduct_0_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_355_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
begin
fproduct_0_356 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_126))
begin
fproduct_0_356_reg <= fproduct_0_356;
if (reset == 1'b0 && ^(fproduct_0_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_356_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_357 = fproduct_0_357_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %357 = mul nsw i32 %356, %355*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
fproduct_0_357_reg <= fproduct_0_357;
if (reset == 1'b0 && ^(fproduct_0_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_357_reg"); $finish; end
end
/* fproduct: %0*/
/*   %357 = mul nsw i32 %356, %355*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
fproduct_0_357_reg <= fproduct_0_357;
if (reset == 1'b0 && ^(fproduct_0_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_357_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %358 = add i32 %345, %342*/
begin
fproduct_0_358 = (fproduct_0_345 + fproduct_0_342_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %358 = add i32 %345, %342*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
fproduct_0_358_reg <= fproduct_0_358;
if (reset == 1'b0 && ^(fproduct_0_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_358_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %359 = add i32 %358, %348*/
begin
fproduct_0_359 = (fproduct_0_358_reg + fproduct_0_348);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %359 = add i32 %358, %348*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
fproduct_0_359_reg <= fproduct_0_359;
if (reset == 1'b0 && ^(fproduct_0_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_359_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %360 = add i32 %359, %351*/
begin
fproduct_0_360 = (fproduct_0_359_reg + fproduct_0_351);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %360 = add i32 %359, %351*/
if ((cur_state == LEGUP_F_fproduct_BB_0_125))
begin
fproduct_0_360_reg <= fproduct_0_360;
if (reset == 1'b0 && ^(fproduct_0_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_360_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %361 = add i32 %360, %354*/
begin
fproduct_0_361 = (fproduct_0_360_reg + fproduct_0_354);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %361 = add i32 %360, %354*/
if ((cur_state == LEGUP_F_fproduct_BB_0_126))
begin
fproduct_0_361_reg <= fproduct_0_361;
if (reset == 1'b0 && ^(fproduct_0_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_361_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %362 = add i32 %361, %357*/
begin
fproduct_0_362 = (fproduct_0_361_reg + fproduct_0_357);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %362 = add i32 %361, %357*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
fproduct_0_362_reg <= fproduct_0_362;
if (reset == 1'b0 && ^(fproduct_0_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_362_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %363 = getelementptr inbounds i32* %output, i32 13*/
begin
fproduct_0_363 = (arg_output + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %363 = getelementptr inbounds i32* %output, i32 13*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_363_reg <= fproduct_0_363;
if (reset == 1'b0 && ^(fproduct_0_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_363_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_364 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
fproduct_0_364_reg <= fproduct_0_364;
if (reset == 1'b0 && ^(fproduct_0_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_364_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_365 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
fproduct_0_365_reg <= fproduct_0_365;
if (reset == 1'b0 && ^(fproduct_0_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_365_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_366 = fproduct_0_366_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %366 = mul nsw i32 %365, %364*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
fproduct_0_366_reg <= fproduct_0_366;
if (reset == 1'b0 && ^(fproduct_0_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_366_reg"); $finish; end
end
/* fproduct: %0*/
/*   %366 = mul nsw i32 %365, %364*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
fproduct_0_366_reg <= fproduct_0_366;
if (reset == 1'b0 && ^(fproduct_0_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_366_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
begin
fproduct_0_367 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
fproduct_0_367_reg <= fproduct_0_367;
if (reset == 1'b0 && ^(fproduct_0_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_367_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_368 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
fproduct_0_368_reg <= fproduct_0_368;
if (reset == 1'b0 && ^(fproduct_0_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_368_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_369 = fproduct_0_369_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %369 = mul nsw i32 %368, %367*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
fproduct_0_369_reg <= fproduct_0_369;
if (reset == 1'b0 && ^(fproduct_0_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_369_reg"); $finish; end
end
/* fproduct: %0*/
/*   %369 = mul nsw i32 %368, %367*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
fproduct_0_369_reg <= fproduct_0_369;
if (reset == 1'b0 && ^(fproduct_0_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_369_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_370 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
fproduct_0_370_reg <= fproduct_0_370;
if (reset == 1'b0 && ^(fproduct_0_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_370_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
begin
fproduct_0_371 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
fproduct_0_371_reg <= fproduct_0_371;
if (reset == 1'b0 && ^(fproduct_0_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_371_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_372 = fproduct_0_372_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %372 = mul nsw i32 %371, %370*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_372_reg <= fproduct_0_372;
if (reset == 1'b0 && ^(fproduct_0_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_372_reg"); $finish; end
end
/* fproduct: %0*/
/*   %372 = mul nsw i32 %371, %370*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_372_reg <= fproduct_0_372;
if (reset == 1'b0 && ^(fproduct_0_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_372_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %373 = add i32 %369, %366*/
begin
fproduct_0_373 = (fproduct_0_369 + fproduct_0_366_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %373 = add i32 %369, %366*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
fproduct_0_373_reg <= fproduct_0_373;
if (reset == 1'b0 && ^(fproduct_0_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_373_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %374 = add i32 %373, %372*/
begin
fproduct_0_374 = (fproduct_0_373_reg + fproduct_0_372);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %374 = add i32 %373, %372*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_374_reg <= fproduct_0_374;
if (reset == 1'b0 && ^(fproduct_0_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_374_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %375 = shl i32 %374, 1*/
begin
fproduct_0_375 = (fproduct_0_374 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %375 = shl i32 %374, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_375_reg <= fproduct_0_375;
if (reset == 1'b0 && ^(fproduct_0_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_375_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_376 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_376_reg <= fproduct_0_376;
if (reset == 1'b0 && ^(fproduct_0_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_376_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_377 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_133))
begin
fproduct_0_377_reg <= fproduct_0_377;
if (reset == 1'b0 && ^(fproduct_0_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_377_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_378 = fproduct_0_378_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %378 = mul nsw i32 %377, %376*/
if ((cur_state == LEGUP_F_fproduct_BB_0_134))
begin
fproduct_0_378_reg <= fproduct_0_378;
if (reset == 1'b0 && ^(fproduct_0_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_378_reg"); $finish; end
end
/* fproduct: %0*/
/*   %378 = mul nsw i32 %377, %376*/
if ((cur_state == LEGUP_F_fproduct_BB_0_134))
begin
fproduct_0_378_reg <= fproduct_0_378;
if (reset == 1'b0 && ^(fproduct_0_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_378_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_379 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_134))
begin
fproduct_0_379_reg <= fproduct_0_379;
if (reset == 1'b0 && ^(fproduct_0_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_379_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_380 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_134))
begin
fproduct_0_380_reg <= fproduct_0_380;
if (reset == 1'b0 && ^(fproduct_0_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_380_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_381 = fproduct_0_381_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %381 = mul nsw i32 %380, %379*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
fproduct_0_381_reg <= fproduct_0_381;
if (reset == 1'b0 && ^(fproduct_0_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_381_reg"); $finish; end
end
/* fproduct: %0*/
/*   %381 = mul nsw i32 %380, %379*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
fproduct_0_381_reg <= fproduct_0_381;
if (reset == 1'b0 && ^(fproduct_0_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_381_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %382 = add i32 %375, %378*/
begin
fproduct_0_382 = (fproduct_0_375_reg + fproduct_0_378);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %382 = add i32 %375, %378*/
if ((cur_state == LEGUP_F_fproduct_BB_0_134))
begin
fproduct_0_382_reg <= fproduct_0_382;
if (reset == 1'b0 && ^(fproduct_0_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_382_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %383 = add i32 %382, %381*/
begin
fproduct_0_383 = (fproduct_0_382_reg + fproduct_0_381);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %383 = add i32 %382, %381*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
fproduct_0_383_reg <= fproduct_0_383;
if (reset == 1'b0 && ^(fproduct_0_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_383_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %384 = getelementptr inbounds i32* %output, i32 14*/
begin
fproduct_0_384 = (arg_output + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %384 = getelementptr inbounds i32* %output, i32 14*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_384_reg <= fproduct_0_384;
if (reset == 1'b0 && ^(fproduct_0_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_384_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_385 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
fproduct_0_385_reg <= fproduct_0_385;
if (reset == 1'b0 && ^(fproduct_0_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_385_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_386 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
fproduct_0_386_reg <= fproduct_0_386;
if (reset == 1'b0 && ^(fproduct_0_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_386_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_387 = fproduct_0_387_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %387 = mul nsw i32 %386, %385*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
fproduct_0_387_reg <= fproduct_0_387;
if (reset == 1'b0 && ^(fproduct_0_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_387_reg"); $finish; end
end
/* fproduct: %0*/
/*   %387 = mul nsw i32 %386, %385*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
fproduct_0_387_reg <= fproduct_0_387;
if (reset == 1'b0 && ^(fproduct_0_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_387_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_388 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
fproduct_0_388_reg <= fproduct_0_388;
if (reset == 1'b0 && ^(fproduct_0_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_388_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_389 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
fproduct_0_389_reg <= fproduct_0_389;
if (reset == 1'b0 && ^(fproduct_0_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_389_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_390 = fproduct_0_390_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %390 = mul nsw i32 %389, %388*/
if ((cur_state == LEGUP_F_fproduct_BB_0_140))
begin
fproduct_0_390_reg <= fproduct_0_390;
if (reset == 1'b0 && ^(fproduct_0_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_390_reg"); $finish; end
end
/* fproduct: %0*/
/*   %390 = mul nsw i32 %389, %388*/
if ((cur_state == LEGUP_F_fproduct_BB_0_140))
begin
fproduct_0_390_reg <= fproduct_0_390;
if (reset == 1'b0 && ^(fproduct_0_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_390_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
begin
fproduct_0_391 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_140))
begin
fproduct_0_391_reg <= fproduct_0_391;
if (reset == 1'b0 && ^(fproduct_0_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_391_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_392 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_140))
begin
fproduct_0_392_reg <= fproduct_0_392;
if (reset == 1'b0 && ^(fproduct_0_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_392_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_393 = fproduct_0_393_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %393 = mul nsw i32 %392, %391*/
if ((cur_state == LEGUP_F_fproduct_BB_0_141))
begin
fproduct_0_393_reg <= fproduct_0_393;
if (reset == 1'b0 && ^(fproduct_0_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_393_reg"); $finish; end
end
/* fproduct: %0*/
/*   %393 = mul nsw i32 %392, %391*/
if ((cur_state == LEGUP_F_fproduct_BB_0_141))
begin
fproduct_0_393_reg <= fproduct_0_393;
if (reset == 1'b0 && ^(fproduct_0_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_393_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_394 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_141))
begin
fproduct_0_394_reg <= fproduct_0_394;
if (reset == 1'b0 && ^(fproduct_0_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_394_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
begin
fproduct_0_395 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_141))
begin
fproduct_0_395_reg <= fproduct_0_395;
if (reset == 1'b0 && ^(fproduct_0_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_395_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_396 = fproduct_0_396_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %396 = mul nsw i32 %395, %394*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
fproduct_0_396_reg <= fproduct_0_396;
if (reset == 1'b0 && ^(fproduct_0_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_396_reg"); $finish; end
end
/* fproduct: %0*/
/*   %396 = mul nsw i32 %395, %394*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
fproduct_0_396_reg <= fproduct_0_396;
if (reset == 1'b0 && ^(fproduct_0_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_396_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %397 = add i32 %390, %387*/
begin
fproduct_0_397 = (fproduct_0_390 + fproduct_0_387_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %397 = add i32 %390, %387*/
if ((cur_state == LEGUP_F_fproduct_BB_0_140))
begin
fproduct_0_397_reg <= fproduct_0_397;
if (reset == 1'b0 && ^(fproduct_0_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_397_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %398 = add i32 %397, %393*/
begin
fproduct_0_398 = (fproduct_0_397_reg + fproduct_0_393);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %398 = add i32 %397, %393*/
if ((cur_state == LEGUP_F_fproduct_BB_0_141))
begin
fproduct_0_398_reg <= fproduct_0_398;
if (reset == 1'b0 && ^(fproduct_0_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_398_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %399 = add i32 %398, %396*/
begin
fproduct_0_399 = (fproduct_0_398_reg + fproduct_0_396);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %399 = add i32 %398, %396*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
fproduct_0_399_reg <= fproduct_0_399;
if (reset == 1'b0 && ^(fproduct_0_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_399_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %400 = getelementptr inbounds i32* %output, i32 15*/
begin
fproduct_0_400 = (arg_output + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %400 = getelementptr inbounds i32* %output, i32 15*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_400_reg <= fproduct_0_400;
if (reset == 1'b0 && ^(fproduct_0_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_400_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_401 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
fproduct_0_401_reg <= fproduct_0_401;
if (reset == 1'b0 && ^(fproduct_0_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_401_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_402 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
fproduct_0_402_reg <= fproduct_0_402;
if (reset == 1'b0 && ^(fproduct_0_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_402_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_403 = fproduct_0_403_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %403 = mul nsw i32 %402, %401*/
if ((cur_state == LEGUP_F_fproduct_BB_0_146))
begin
fproduct_0_403_reg <= fproduct_0_403;
if (reset == 1'b0 && ^(fproduct_0_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_403_reg"); $finish; end
end
/* fproduct: %0*/
/*   %403 = mul nsw i32 %402, %401*/
if ((cur_state == LEGUP_F_fproduct_BB_0_146))
begin
fproduct_0_403_reg <= fproduct_0_403;
if (reset == 1'b0 && ^(fproduct_0_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_403_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
begin
fproduct_0_404 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_146))
begin
fproduct_0_404_reg <= fproduct_0_404;
if (reset == 1'b0 && ^(fproduct_0_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_404_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_405 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_146))
begin
fproduct_0_405_reg <= fproduct_0_405;
if (reset == 1'b0 && ^(fproduct_0_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_405_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_406 = fproduct_0_406_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %406 = mul nsw i32 %405, %404*/
if ((cur_state == LEGUP_F_fproduct_BB_0_147))
begin
fproduct_0_406_reg <= fproduct_0_406;
if (reset == 1'b0 && ^(fproduct_0_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_406_reg"); $finish; end
end
/* fproduct: %0*/
/*   %406 = mul nsw i32 %405, %404*/
if ((cur_state == LEGUP_F_fproduct_BB_0_147))
begin
fproduct_0_406_reg <= fproduct_0_406;
if (reset == 1'b0 && ^(fproduct_0_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_406_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_407 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_147))
begin
fproduct_0_407_reg <= fproduct_0_407;
if (reset == 1'b0 && ^(fproduct_0_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_407_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
begin
fproduct_0_408 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_147))
begin
fproduct_0_408_reg <= fproduct_0_408;
if (reset == 1'b0 && ^(fproduct_0_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_408_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_409 = fproduct_0_409_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %409 = mul nsw i32 %408, %407*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
fproduct_0_409_reg <= fproduct_0_409;
if (reset == 1'b0 && ^(fproduct_0_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_409_reg"); $finish; end
end
/* fproduct: %0*/
/*   %409 = mul nsw i32 %408, %407*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
fproduct_0_409_reg <= fproduct_0_409;
if (reset == 1'b0 && ^(fproduct_0_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_409_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %410 = add nsw i32 %409, %406*/
begin
fproduct_0_410 = (fproduct_0_409 + fproduct_0_406_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %410 = add nsw i32 %409, %406*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
fproduct_0_410_reg <= fproduct_0_410;
if (reset == 1'b0 && ^(fproduct_0_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_410_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %411 = shl i32 %410, 1*/
begin
fproduct_0_411 = (fproduct_0_410 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %411 = shl i32 %410, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
fproduct_0_411_reg <= fproduct_0_411;
if (reset == 1'b0 && ^(fproduct_0_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_411_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %412 = add nsw i32 %411, %403*/
begin
fproduct_0_412 = (fproduct_0_411 + fproduct_0_403_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %412 = add nsw i32 %411, %403*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
fproduct_0_412_reg <= fproduct_0_412;
if (reset == 1'b0 && ^(fproduct_0_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_412_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %413 = getelementptr inbounds i32* %output, i32 16*/
begin
fproduct_0_413 = (arg_output + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %413 = getelementptr inbounds i32* %output, i32 16*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_413_reg <= fproduct_0_413;
if (reset == 1'b0 && ^(fproduct_0_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_413_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
begin
fproduct_0_414 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_151))
begin
fproduct_0_414_reg <= fproduct_0_414;
if (reset == 1'b0 && ^(fproduct_0_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_414_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_415 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_151))
begin
fproduct_0_415_reg <= fproduct_0_415;
if (reset == 1'b0 && ^(fproduct_0_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_415_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_416 = fproduct_0_416_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %416 = mul nsw i32 %415, %414*/
if ((cur_state == LEGUP_F_fproduct_BB_0_152))
begin
fproduct_0_416_reg <= fproduct_0_416;
if (reset == 1'b0 && ^(fproduct_0_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_416_reg"); $finish; end
end
/* fproduct: %0*/
/*   %416 = mul nsw i32 %415, %414*/
if ((cur_state == LEGUP_F_fproduct_BB_0_152))
begin
fproduct_0_416_reg <= fproduct_0_416;
if (reset == 1'b0 && ^(fproduct_0_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_416_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_417 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_152))
begin
fproduct_0_417_reg <= fproduct_0_417;
if (reset == 1'b0 && ^(fproduct_0_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_417_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
begin
fproduct_0_418 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_152))
begin
fproduct_0_418_reg <= fproduct_0_418;
if (reset == 1'b0 && ^(fproduct_0_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_418_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_419 = fproduct_0_419_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %419 = mul nsw i32 %418, %417*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
fproduct_0_419_reg <= fproduct_0_419;
if (reset == 1'b0 && ^(fproduct_0_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_419_reg"); $finish; end
end
/* fproduct: %0*/
/*   %419 = mul nsw i32 %418, %417*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
fproduct_0_419_reg <= fproduct_0_419;
if (reset == 1'b0 && ^(fproduct_0_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_419_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %420 = add nsw i32 %419, %416*/
begin
fproduct_0_420 = (fproduct_0_419 + fproduct_0_416_reg);
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %420 = add nsw i32 %419, %416*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
fproduct_0_420_reg <= fproduct_0_420;
if (reset == 1'b0 && ^(fproduct_0_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_420_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %421 = getelementptr inbounds i32* %output, i32 17*/
begin
fproduct_0_421 = (arg_output + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %421 = getelementptr inbounds i32* %output, i32 17*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_421_reg <= fproduct_0_421;
if (reset == 1'b0 && ^(fproduct_0_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_421_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
begin
fproduct_0_422 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_156))
begin
fproduct_0_422_reg <= fproduct_0_422;
if (reset == 1'b0 && ^(fproduct_0_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_422_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
begin
fproduct_0_423 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_156))
begin
fproduct_0_423_reg <= fproduct_0_423;
if (reset == 1'b0 && ^(fproduct_0_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_423_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %424 = shl i32 %422, 1*/
begin
fproduct_0_424 = (fproduct_0_422 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %424 = shl i32 %422, 1*/
if ((cur_state == LEGUP_F_fproduct_BB_0_156))
begin
fproduct_0_424_reg <= fproduct_0_424;
if (reset == 1'b0 && ^(fproduct_0_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_424_reg"); $finish; end
end
end
always @(*) begin
fproduct_0_425 = fproduct_0_425_stage0_reg;
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %425 = mul i32 %424, %423*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
fproduct_0_425_reg <= fproduct_0_425;
if (reset == 1'b0 && ^(fproduct_0_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_425_reg"); $finish; end
end
/* fproduct: %0*/
/*   %425 = mul i32 %424, %423*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
fproduct_0_425_reg <= fproduct_0_425;
if (reset == 1'b0 && ^(fproduct_0_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_425_reg"); $finish; end
end
end
always @(*) begin
/* fproduct: %0*/
/*   %426 = getelementptr inbounds i32* %output, i32 18*/
begin
fproduct_0_426 = (arg_output + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %426 = getelementptr inbounds i32* %output, i32 18*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
fproduct_0_426_reg <= fproduct_0_426;
if (reset == 1'b0 && ^(fproduct_0_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_0_426_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fproduct_0_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %3 = mul nsw i32 %2, %1*/
if ((lpm_mult_fproduct_0_3_en == 1'd1))
begin
fproduct_0_3_stage0_reg <= (fproduct_0_2 * fproduct_0_1);
end
end
always @(*) begin
lpm_mult_fproduct_0_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %7 = mul nsw i32 %6, %4*/
if ((lpm_mult_fproduct_0_7_en == 1'd1))
begin
fproduct_0_7_stage0_reg <= (fproduct_0_6 * fproduct_0_4);
end
end
always @(*) begin
lpm_mult_fproduct_0_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %11 = mul nsw i32 %10, %9*/
if ((lpm_mult_fproduct_0_11_en == 1'd1))
begin
fproduct_0_11_stage0_reg <= (fproduct_0_10 * fproduct_0_9);
end
end
always @(*) begin
lpm_mult_fproduct_0_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %17 = mul i32 %16, %15*/
if ((lpm_mult_fproduct_0_17_en == 1'd1))
begin
fproduct_0_17_stage0_reg <= (fproduct_0_16 * fproduct_0_15);
end
end
always @(*) begin
lpm_mult_fproduct_0_21_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %21 = mul nsw i32 %20, %18*/
if ((lpm_mult_fproduct_0_21_en == 1'd1))
begin
fproduct_0_21_stage0_reg <= (fproduct_0_20 * fproduct_0_18);
end
end
always @(*) begin
lpm_mult_fproduct_0_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %25 = mul nsw i32 %24, %23*/
if ((lpm_mult_fproduct_0_25_en == 1'd1))
begin
fproduct_0_25_stage0_reg <= (fproduct_0_24 * fproduct_0_23);
end
end
always @(*) begin
lpm_mult_fproduct_0_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %31 = mul nsw i32 %30, %29*/
if ((lpm_mult_fproduct_0_31_en == 1'd1))
begin
fproduct_0_31_stage0_reg <= (fproduct_0_30 * fproduct_0_29);
end
end
always @(*) begin
lpm_mult_fproduct_0_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %34 = mul nsw i32 %33, %32*/
if ((lpm_mult_fproduct_0_34_en == 1'd1))
begin
fproduct_0_34_stage0_reg <= (fproduct_0_33 * fproduct_0_32);
end
end
always @(*) begin
lpm_mult_fproduct_0_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %38 = mul nsw i32 %37, %35*/
if ((lpm_mult_fproduct_0_38_en == 1'd1))
begin
fproduct_0_38_stage0_reg <= (fproduct_0_37 * fproduct_0_35);
end
end
always @(*) begin
lpm_mult_fproduct_0_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %42 = mul nsw i32 %41, %40*/
if ((lpm_mult_fproduct_0_42_en == 1'd1))
begin
fproduct_0_42_stage0_reg <= (fproduct_0_41 * fproduct_0_40);
end
end
always @(*) begin
lpm_mult_fproduct_0_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %49 = mul nsw i32 %48, %47*/
if ((lpm_mult_fproduct_0_49_en == 1'd1))
begin
fproduct_0_49_stage0_reg <= (fproduct_0_48 * fproduct_0_47);
end
end
always @(*) begin
lpm_mult_fproduct_0_52_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %52 = mul nsw i32 %51, %50*/
if ((lpm_mult_fproduct_0_52_en == 1'd1))
begin
fproduct_0_52_stage0_reg <= (fproduct_0_51 * fproduct_0_50);
end
end
always @(*) begin
lpm_mult_fproduct_0_55_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %55 = mul nsw i32 %54, %53*/
if ((lpm_mult_fproduct_0_55_en == 1'd1))
begin
fproduct_0_55_stage0_reg <= (fproduct_0_54 * fproduct_0_53);
end
end
always @(*) begin
lpm_mult_fproduct_0_61_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %61 = mul nsw i32 %60, %58*/
if ((lpm_mult_fproduct_0_61_en == 1'd1))
begin
fproduct_0_61_stage0_reg <= (fproduct_0_60 * fproduct_0_58);
end
end
always @(*) begin
lpm_mult_fproduct_0_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %65 = mul nsw i32 %64, %63*/
if ((lpm_mult_fproduct_0_65_en == 1'd1))
begin
fproduct_0_65_stage0_reg <= (fproduct_0_64 * fproduct_0_63);
end
end
always @(*) begin
lpm_mult_fproduct_0_72_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %72 = mul nsw i32 %71, %70*/
if ((lpm_mult_fproduct_0_72_en == 1'd1))
begin
fproduct_0_72_stage0_reg <= (fproduct_0_71 * fproduct_0_70);
end
end
always @(*) begin
lpm_mult_fproduct_0_75_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %75 = mul nsw i32 %74, %73*/
if ((lpm_mult_fproduct_0_75_en == 1'd1))
begin
fproduct_0_75_stage0_reg <= (fproduct_0_74 * fproduct_0_73);
end
end
always @(*) begin
lpm_mult_fproduct_0_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %78 = mul nsw i32 %77, %76*/
if ((lpm_mult_fproduct_0_78_en == 1'd1))
begin
fproduct_0_78_stage0_reg <= (fproduct_0_77 * fproduct_0_76);
end
end
always @(*) begin
lpm_mult_fproduct_0_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %81 = mul nsw i32 %80, %79*/
if ((lpm_mult_fproduct_0_81_en == 1'd1))
begin
fproduct_0_81_stage0_reg <= (fproduct_0_80 * fproduct_0_79);
end
end
always @(*) begin
lpm_mult_fproduct_0_85_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %85 = mul nsw i32 %84, %82*/
if ((lpm_mult_fproduct_0_85_en == 1'd1))
begin
fproduct_0_85_stage0_reg <= (fproduct_0_84 * fproduct_0_82);
end
end
always @(*) begin
lpm_mult_fproduct_0_89_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %89 = mul nsw i32 %88, %87*/
if ((lpm_mult_fproduct_0_89_en == 1'd1))
begin
fproduct_0_89_stage0_reg <= (fproduct_0_88 * fproduct_0_87);
end
end
always @(*) begin
lpm_mult_fproduct_0_98_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %98 = mul nsw i32 %97, %96*/
if ((lpm_mult_fproduct_0_98_en == 1'd1))
begin
fproduct_0_98_stage0_reg <= (fproduct_0_97 * fproduct_0_96);
end
end
always @(*) begin
lpm_mult_fproduct_0_101_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %101 = mul nsw i32 %100, %99*/
if ((lpm_mult_fproduct_0_101_en == 1'd1))
begin
fproduct_0_101_stage0_reg <= (fproduct_0_100 * fproduct_0_99);
end
end
always @(*) begin
lpm_mult_fproduct_0_104_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %104 = mul nsw i32 %103, %102*/
if ((lpm_mult_fproduct_0_104_en == 1'd1))
begin
fproduct_0_104_stage0_reg <= (fproduct_0_103 * fproduct_0_102);
end
end
always @(*) begin
lpm_mult_fproduct_0_110_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %110 = mul nsw i32 %109, %108*/
if ((lpm_mult_fproduct_0_110_en == 1'd1))
begin
fproduct_0_110_stage0_reg <= (fproduct_0_109 * fproduct_0_108);
end
end
always @(*) begin
lpm_mult_fproduct_0_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %113 = mul nsw i32 %112, %111*/
if ((lpm_mult_fproduct_0_113_en == 1'd1))
begin
fproduct_0_113_stage0_reg <= (fproduct_0_112 * fproduct_0_111);
end
end
always @(*) begin
lpm_mult_fproduct_0_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %117 = mul nsw i32 %116, %114*/
if ((lpm_mult_fproduct_0_117_en == 1'd1))
begin
fproduct_0_117_stage0_reg <= (fproduct_0_116 * fproduct_0_114);
end
end
always @(*) begin
lpm_mult_fproduct_0_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %121 = mul nsw i32 %120, %119*/
if ((lpm_mult_fproduct_0_121_en == 1'd1))
begin
fproduct_0_121_stage0_reg <= (fproduct_0_120 * fproduct_0_119);
end
end
always @(*) begin
lpm_mult_fproduct_0_129_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %129 = mul nsw i32 %128, %127*/
if ((lpm_mult_fproduct_0_129_en == 1'd1))
begin
fproduct_0_129_stage0_reg <= (fproduct_0_128 * fproduct_0_127);
end
end
always @(*) begin
lpm_mult_fproduct_0_132_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %132 = mul nsw i32 %131, %130*/
if ((lpm_mult_fproduct_0_132_en == 1'd1))
begin
fproduct_0_132_stage0_reg <= (fproduct_0_131 * fproduct_0_130);
end
end
always @(*) begin
lpm_mult_fproduct_0_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %135 = mul nsw i32 %134, %133*/
if ((lpm_mult_fproduct_0_135_en == 1'd1))
begin
fproduct_0_135_stage0_reg <= (fproduct_0_134 * fproduct_0_133);
end
end
always @(*) begin
lpm_mult_fproduct_0_138_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %138 = mul nsw i32 %137, %136*/
if ((lpm_mult_fproduct_0_138_en == 1'd1))
begin
fproduct_0_138_stage0_reg <= (fproduct_0_137 * fproduct_0_136);
end
end
always @(*) begin
lpm_mult_fproduct_0_141_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %141 = mul nsw i32 %140, %139*/
if ((lpm_mult_fproduct_0_141_en == 1'd1))
begin
fproduct_0_141_stage0_reg <= (fproduct_0_140 * fproduct_0_139);
end
end
always @(*) begin
lpm_mult_fproduct_0_144_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %144 = mul nsw i32 %143, %142*/
if ((lpm_mult_fproduct_0_144_en == 1'd1))
begin
fproduct_0_144_stage0_reg <= (fproduct_0_143 * fproduct_0_142);
end
end
always @(*) begin
lpm_mult_fproduct_0_148_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %148 = mul nsw i32 %147, %145*/
if ((lpm_mult_fproduct_0_148_en == 1'd1))
begin
fproduct_0_148_stage0_reg <= (fproduct_0_147 * fproduct_0_145);
end
end
always @(*) begin
lpm_mult_fproduct_0_152_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %152 = mul nsw i32 %151, %150*/
if ((lpm_mult_fproduct_0_152_en == 1'd1))
begin
fproduct_0_152_stage0_reg <= (fproduct_0_151 * fproduct_0_150);
end
end
always @(*) begin
lpm_mult_fproduct_0_166_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %166 = mul nsw i32 %165, %164*/
if ((lpm_mult_fproduct_0_166_en == 1'd1))
begin
fproduct_0_166_stage0_reg <= (fproduct_0_165 * fproduct_0_164);
end
end
always @(*) begin
lpm_mult_fproduct_0_169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %169 = mul nsw i32 %168, %167*/
if ((lpm_mult_fproduct_0_169_en == 1'd1))
begin
fproduct_0_169_stage0_reg <= (fproduct_0_168 * fproduct_0_167);
end
end
always @(*) begin
lpm_mult_fproduct_0_163_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %163 = mul nsw i32 %162, %161*/
if ((lpm_mult_fproduct_0_163_en == 1'd1))
begin
fproduct_0_163_stage0_reg <= (fproduct_0_162 * fproduct_0_161);
end
end
always @(*) begin
lpm_mult_fproduct_0_172_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %172 = mul nsw i32 %171, %170*/
if ((lpm_mult_fproduct_0_172_en == 1'd1))
begin
fproduct_0_172_stage0_reg <= (fproduct_0_171 * fproduct_0_170);
end
end
always @(*) begin
lpm_mult_fproduct_0_175_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %175 = mul nsw i32 %174, %173*/
if ((lpm_mult_fproduct_0_175_en == 1'd1))
begin
fproduct_0_175_stage0_reg <= (fproduct_0_174 * fproduct_0_173);
end
end
always @(*) begin
lpm_mult_fproduct_0_182_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %182 = mul nsw i32 %181, %180*/
if ((lpm_mult_fproduct_0_182_en == 1'd1))
begin
fproduct_0_182_stage0_reg <= (fproduct_0_181 * fproduct_0_180);
end
end
always @(*) begin
lpm_mult_fproduct_0_185_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %185 = mul nsw i32 %184, %183*/
if ((lpm_mult_fproduct_0_185_en == 1'd1))
begin
fproduct_0_185_stage0_reg <= (fproduct_0_184 * fproduct_0_183);
end
end
always @(*) begin
lpm_mult_fproduct_0_189_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %189 = mul nsw i32 %188, %186*/
if ((lpm_mult_fproduct_0_189_en == 1'd1))
begin
fproduct_0_189_stage0_reg <= (fproduct_0_188 * fproduct_0_186);
end
end
always @(*) begin
lpm_mult_fproduct_0_193_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((lpm_mult_fproduct_0_193_en == 1'd1))
begin
fproduct_0_193_stage0_reg <= (fproduct_0_192 * fproduct_0_191);
end
end
always @(*) begin
lpm_mult_fproduct_0_202_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %202 = mul nsw i32 %201, %200*/
if ((lpm_mult_fproduct_0_202_en == 1'd1))
begin
fproduct_0_202_stage0_reg <= (fproduct_0_201 * fproduct_0_200);
end
end
always @(*) begin
lpm_mult_fproduct_0_205_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %205 = mul nsw i32 %204, %203*/
if ((lpm_mult_fproduct_0_205_en == 1'd1))
begin
fproduct_0_205_stage0_reg <= (fproduct_0_204 * fproduct_0_203);
end
end
always @(*) begin
lpm_mult_fproduct_0_208_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((lpm_mult_fproduct_0_208_en == 1'd1))
begin
fproduct_0_208_stage0_reg <= (fproduct_0_207 * fproduct_0_206);
end
end
always @(*) begin
lpm_mult_fproduct_0_211_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %211 = mul nsw i32 %210, %209*/
if ((lpm_mult_fproduct_0_211_en == 1'd1))
begin
fproduct_0_211_stage0_reg <= (fproduct_0_210 * fproduct_0_209);
end
end
always @(*) begin
lpm_mult_fproduct_0_214_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %214 = mul nsw i32 %213, %212*/
if ((lpm_mult_fproduct_0_214_en == 1'd1))
begin
fproduct_0_214_stage0_reg <= (fproduct_0_213 * fproduct_0_212);
end
end
always @(*) begin
lpm_mult_fproduct_0_217_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %217 = mul nsw i32 %216, %215*/
if ((lpm_mult_fproduct_0_217_en == 1'd1))
begin
fproduct_0_217_stage0_reg <= (fproduct_0_216 * fproduct_0_215);
end
end
always @(*) begin
lpm_mult_fproduct_0_220_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %220 = mul nsw i32 %219, %218*/
if ((lpm_mult_fproduct_0_220_en == 1'd1))
begin
fproduct_0_220_stage0_reg <= (fproduct_0_219 * fproduct_0_218);
end
end
always @(*) begin
lpm_mult_fproduct_0_223_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %223 = mul nsw i32 %222, %221*/
if ((lpm_mult_fproduct_0_223_en == 1'd1))
begin
fproduct_0_223_stage0_reg <= (fproduct_0_222 * fproduct_0_221);
end
end
always @(*) begin
lpm_mult_fproduct_0_227_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %227 = mul nsw i32 %226, %224*/
if ((lpm_mult_fproduct_0_227_en == 1'd1))
begin
fproduct_0_227_stage0_reg <= (fproduct_0_226 * fproduct_0_224);
end
end
always @(*) begin
lpm_mult_fproduct_0_231_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %231 = mul nsw i32 %230, %229*/
if ((lpm_mult_fproduct_0_231_en == 1'd1))
begin
fproduct_0_231_stage0_reg <= (fproduct_0_230 * fproduct_0_229);
end
end
always @(*) begin
lpm_mult_fproduct_0_244_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %244 = mul nsw i32 %243, %242*/
if ((lpm_mult_fproduct_0_244_en == 1'd1))
begin
fproduct_0_244_stage0_reg <= (fproduct_0_243 * fproduct_0_242);
end
end
always @(*) begin
lpm_mult_fproduct_0_247_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %247 = mul nsw i32 %246, %245*/
if ((lpm_mult_fproduct_0_247_en == 1'd1))
begin
fproduct_0_247_stage0_reg <= (fproduct_0_246 * fproduct_0_245);
end
end
always @(*) begin
lpm_mult_fproduct_0_250_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %250 = mul nsw i32 %249, %248*/
if ((lpm_mult_fproduct_0_250_en == 1'd1))
begin
fproduct_0_250_stage0_reg <= (fproduct_0_249 * fproduct_0_248);
end
end
always @(*) begin
lpm_mult_fproduct_0_253_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %253 = mul nsw i32 %252, %251*/
if ((lpm_mult_fproduct_0_253_en == 1'd1))
begin
fproduct_0_253_stage0_reg <= (fproduct_0_252 * fproduct_0_251);
end
end
always @(*) begin
lpm_mult_fproduct_0_256_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %256 = mul nsw i32 %255, %254*/
if ((lpm_mult_fproduct_0_256_en == 1'd1))
begin
fproduct_0_256_stage0_reg <= (fproduct_0_255 * fproduct_0_254);
end
end
always @(*) begin
lpm_mult_fproduct_0_264_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %264 = mul nsw i32 %263, %262*/
if ((lpm_mult_fproduct_0_264_en == 1'd1))
begin
fproduct_0_264_stage0_reg <= (fproduct_0_263 * fproduct_0_262);
end
end
always @(*) begin
lpm_mult_fproduct_0_267_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %267 = mul nsw i32 %266, %265*/
if ((lpm_mult_fproduct_0_267_en == 1'd1))
begin
fproduct_0_267_stage0_reg <= (fproduct_0_266 * fproduct_0_265);
end
end
always @(*) begin
lpm_mult_fproduct_0_270_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %270 = mul nsw i32 %269, %268*/
if ((lpm_mult_fproduct_0_270_en == 1'd1))
begin
fproduct_0_270_stage0_reg <= (fproduct_0_269 * fproduct_0_268);
end
end
always @(*) begin
lpm_mult_fproduct_0_273_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %273 = mul nsw i32 %272, %271*/
if ((lpm_mult_fproduct_0_273_en == 1'd1))
begin
fproduct_0_273_stage0_reg <= (fproduct_0_272 * fproduct_0_271);
end
end
always @(*) begin
lpm_mult_fproduct_0_281_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %281 = mul nsw i32 %280, %279*/
if ((lpm_mult_fproduct_0_281_en == 1'd1))
begin
fproduct_0_281_stage0_reg <= (fproduct_0_280 * fproduct_0_279);
end
end
always @(*) begin
lpm_mult_fproduct_0_284_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %284 = mul nsw i32 %283, %282*/
if ((lpm_mult_fproduct_0_284_en == 1'd1))
begin
fproduct_0_284_stage0_reg <= (fproduct_0_283 * fproduct_0_282);
end
end
always @(*) begin
lpm_mult_fproduct_0_287_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %287 = mul nsw i32 %286, %285*/
if ((lpm_mult_fproduct_0_287_en == 1'd1))
begin
fproduct_0_287_stage0_reg <= (fproduct_0_286 * fproduct_0_285);
end
end
always @(*) begin
lpm_mult_fproduct_0_290_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %290 = mul nsw i32 %289, %288*/
if ((lpm_mult_fproduct_0_290_en == 1'd1))
begin
fproduct_0_290_stage0_reg <= (fproduct_0_289 * fproduct_0_288);
end
end
always @(*) begin
lpm_mult_fproduct_0_293_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %293 = mul nsw i32 %292, %291*/
if ((lpm_mult_fproduct_0_293_en == 1'd1))
begin
fproduct_0_293_stage0_reg <= (fproduct_0_292 * fproduct_0_291);
end
end
always @(*) begin
lpm_mult_fproduct_0_296_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %296 = mul nsw i32 %295, %294*/
if ((lpm_mult_fproduct_0_296_en == 1'd1))
begin
fproduct_0_296_stage0_reg <= (fproduct_0_295 * fproduct_0_294);
end
end
always @(*) begin
lpm_mult_fproduct_0_299_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %299 = mul nsw i32 %298, %297*/
if ((lpm_mult_fproduct_0_299_en == 1'd1))
begin
fproduct_0_299_stage0_reg <= (fproduct_0_298 * fproduct_0_297);
end
end
always @(*) begin
lpm_mult_fproduct_0_302_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %302 = mul nsw i32 %301, %300*/
if ((lpm_mult_fproduct_0_302_en == 1'd1))
begin
fproduct_0_302_stage0_reg <= (fproduct_0_301 * fproduct_0_300);
end
end
always @(*) begin
lpm_mult_fproduct_0_316_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %316 = mul nsw i32 %315, %314*/
if ((lpm_mult_fproduct_0_316_en == 1'd1))
begin
fproduct_0_316_stage0_reg <= (fproduct_0_315 * fproduct_0_314);
end
end
always @(*) begin
lpm_mult_fproduct_0_319_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %319 = mul nsw i32 %318, %317*/
if ((lpm_mult_fproduct_0_319_en == 1'd1))
begin
fproduct_0_319_stage0_reg <= (fproduct_0_318 * fproduct_0_317);
end
end
always @(*) begin
lpm_mult_fproduct_0_322_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %322 = mul nsw i32 %321, %320*/
if ((lpm_mult_fproduct_0_322_en == 1'd1))
begin
fproduct_0_322_stage0_reg <= (fproduct_0_321 * fproduct_0_320);
end
end
always @(*) begin
lpm_mult_fproduct_0_313_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %313 = mul nsw i32 %312, %311*/
if ((lpm_mult_fproduct_0_313_en == 1'd1))
begin
fproduct_0_313_stage0_reg <= (fproduct_0_312 * fproduct_0_311);
end
end
always @(*) begin
lpm_mult_fproduct_0_325_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %325 = mul nsw i32 %324, %323*/
if ((lpm_mult_fproduct_0_325_en == 1'd1))
begin
fproduct_0_325_stage0_reg <= (fproduct_0_324 * fproduct_0_323);
end
end
always @(*) begin
lpm_mult_fproduct_0_332_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %332 = mul nsw i32 %331, %330*/
if ((lpm_mult_fproduct_0_332_en == 1'd1))
begin
fproduct_0_332_stage0_reg <= (fproduct_0_331 * fproduct_0_330);
end
end
always @(*) begin
lpm_mult_fproduct_0_335_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %335 = mul nsw i32 %334, %333*/
if ((lpm_mult_fproduct_0_335_en == 1'd1))
begin
fproduct_0_335_stage0_reg <= (fproduct_0_334 * fproduct_0_333);
end
end
always @(*) begin
lpm_mult_fproduct_0_342_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %342 = mul nsw i32 %341, %340*/
if ((lpm_mult_fproduct_0_342_en == 1'd1))
begin
fproduct_0_342_stage0_reg <= (fproduct_0_341 * fproduct_0_340);
end
end
always @(*) begin
lpm_mult_fproduct_0_345_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %345 = mul nsw i32 %344, %343*/
if ((lpm_mult_fproduct_0_345_en == 1'd1))
begin
fproduct_0_345_stage0_reg <= (fproduct_0_344 * fproduct_0_343);
end
end
always @(*) begin
lpm_mult_fproduct_0_348_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %348 = mul nsw i32 %347, %346*/
if ((lpm_mult_fproduct_0_348_en == 1'd1))
begin
fproduct_0_348_stage0_reg <= (fproduct_0_347 * fproduct_0_346);
end
end
always @(*) begin
lpm_mult_fproduct_0_351_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %351 = mul nsw i32 %350, %349*/
if ((lpm_mult_fproduct_0_351_en == 1'd1))
begin
fproduct_0_351_stage0_reg <= (fproduct_0_350 * fproduct_0_349);
end
end
always @(*) begin
lpm_mult_fproduct_0_354_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %354 = mul nsw i32 %353, %352*/
if ((lpm_mult_fproduct_0_354_en == 1'd1))
begin
fproduct_0_354_stage0_reg <= (fproduct_0_353 * fproduct_0_352);
end
end
always @(*) begin
lpm_mult_fproduct_0_357_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %357 = mul nsw i32 %356, %355*/
if ((lpm_mult_fproduct_0_357_en == 1'd1))
begin
fproduct_0_357_stage0_reg <= (fproduct_0_356 * fproduct_0_355);
end
end
always @(*) begin
lpm_mult_fproduct_0_366_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %366 = mul nsw i32 %365, %364*/
if ((lpm_mult_fproduct_0_366_en == 1'd1))
begin
fproduct_0_366_stage0_reg <= (fproduct_0_365 * fproduct_0_364);
end
end
always @(*) begin
lpm_mult_fproduct_0_369_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %369 = mul nsw i32 %368, %367*/
if ((lpm_mult_fproduct_0_369_en == 1'd1))
begin
fproduct_0_369_stage0_reg <= (fproduct_0_368 * fproduct_0_367);
end
end
always @(*) begin
lpm_mult_fproduct_0_372_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %372 = mul nsw i32 %371, %370*/
if ((lpm_mult_fproduct_0_372_en == 1'd1))
begin
fproduct_0_372_stage0_reg <= (fproduct_0_371 * fproduct_0_370);
end
end
always @(*) begin
lpm_mult_fproduct_0_378_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %378 = mul nsw i32 %377, %376*/
if ((lpm_mult_fproduct_0_378_en == 1'd1))
begin
fproduct_0_378_stage0_reg <= (fproduct_0_377 * fproduct_0_376);
end
end
always @(*) begin
lpm_mult_fproduct_0_381_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %381 = mul nsw i32 %380, %379*/
if ((lpm_mult_fproduct_0_381_en == 1'd1))
begin
fproduct_0_381_stage0_reg <= (fproduct_0_380 * fproduct_0_379);
end
end
always @(*) begin
lpm_mult_fproduct_0_387_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %387 = mul nsw i32 %386, %385*/
if ((lpm_mult_fproduct_0_387_en == 1'd1))
begin
fproduct_0_387_stage0_reg <= (fproduct_0_386 * fproduct_0_385);
end
end
always @(*) begin
lpm_mult_fproduct_0_390_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %390 = mul nsw i32 %389, %388*/
if ((lpm_mult_fproduct_0_390_en == 1'd1))
begin
fproduct_0_390_stage0_reg <= (fproduct_0_389 * fproduct_0_388);
end
end
always @(*) begin
lpm_mult_fproduct_0_393_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %393 = mul nsw i32 %392, %391*/
if ((lpm_mult_fproduct_0_393_en == 1'd1))
begin
fproduct_0_393_stage0_reg <= (fproduct_0_392 * fproduct_0_391);
end
end
always @(*) begin
lpm_mult_fproduct_0_396_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %396 = mul nsw i32 %395, %394*/
if ((lpm_mult_fproduct_0_396_en == 1'd1))
begin
fproduct_0_396_stage0_reg <= (fproduct_0_395 * fproduct_0_394);
end
end
always @(*) begin
lpm_mult_fproduct_0_403_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %403 = mul nsw i32 %402, %401*/
if ((lpm_mult_fproduct_0_403_en == 1'd1))
begin
fproduct_0_403_stage0_reg <= (fproduct_0_402 * fproduct_0_401);
end
end
always @(*) begin
lpm_mult_fproduct_0_406_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %406 = mul nsw i32 %405, %404*/
if ((lpm_mult_fproduct_0_406_en == 1'd1))
begin
fproduct_0_406_stage0_reg <= (fproduct_0_405 * fproduct_0_404);
end
end
always @(*) begin
lpm_mult_fproduct_0_409_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %409 = mul nsw i32 %408, %407*/
if ((lpm_mult_fproduct_0_409_en == 1'd1))
begin
fproduct_0_409_stage0_reg <= (fproduct_0_408 * fproduct_0_407);
end
end
always @(*) begin
lpm_mult_fproduct_0_416_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %416 = mul nsw i32 %415, %414*/
if ((lpm_mult_fproduct_0_416_en == 1'd1))
begin
fproduct_0_416_stage0_reg <= (fproduct_0_415 * fproduct_0_414);
end
end
always @(*) begin
lpm_mult_fproduct_0_419_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %419 = mul nsw i32 %418, %417*/
if ((lpm_mult_fproduct_0_419_en == 1'd1))
begin
fproduct_0_419_stage0_reg <= (fproduct_0_418 * fproduct_0_417);
end
end
always @(*) begin
lpm_mult_fproduct_0_425_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fproduct: %0*/
/*   %425 = mul i32 %424, %423*/
if ((lpm_mult_fproduct_0_425_en == 1'd1))
begin
fproduct_0_425_stage0_reg <= (fproduct_0_424 * fproduct_0_423);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fproduct: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_fproduct_BB_0_158))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %3, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %27, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %277, i32* %278, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %338, i32* %339, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %383, i32* %384, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %412, i32* %413, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %425, i32* %426, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   store i32 %3, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
memory_controller_address_a = arg_output;
end
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
memory_controller_address_a = fproduct_0_13_reg;
end
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   store i32 %27, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
memory_controller_address_a = fproduct_0_28_reg;
end
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
memory_controller_address_a = fproduct_0_46_reg;
end
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
memory_controller_address_a = fproduct_0_199_reg;
end
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_address_a = arg_in2;
end
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_address_a = fproduct_0_8_reg;
end
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   store i32 %277, i32* %278, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
memory_controller_address_a = fproduct_0_278_reg;
end
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_address_a = fproduct_0_22_reg;
end
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_address_a = fproduct_0_39_reg;
end
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   store i32 %338, i32* %339, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
memory_controller_address_a = fproduct_0_339_reg;
end
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_address_a = fproduct_0_62_reg;
end
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_address_a = fproduct_0_86_reg;
end
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   store i32 %383, i32* %384, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
memory_controller_address_a = fproduct_0_384_reg;
end
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_address_a = fproduct_0_118_reg;
end
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_address_a = fproduct_0_149_reg;
end
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   store i32 %412, i32* %413, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
memory_controller_address_a = fproduct_0_413_reg;
end
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_address_a = fproduct_0_190_reg;
end
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_address_a = fproduct_0_228_reg;
end
/* fproduct: %0*/
/*   store i32 %425, i32* %426, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
memory_controller_address_a = fproduct_0_426_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %3, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %27, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %277, i32* %278, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %338, i32* %339, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %383, i32* %384, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %412, i32* %413, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %425, i32* %426, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %3, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
memory_controller_in_a = fproduct_0_3;
end
/* fproduct: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
memory_controller_in_a = fproduct_0_12;
end
/* fproduct: %0*/
/*   store i32 %27, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
memory_controller_in_a = fproduct_0_27;
end
/* fproduct: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
memory_controller_in_a = fproduct_0_45;
end
/* fproduct: %0*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
memory_controller_in_a = fproduct_0_198;
end
/* fproduct: %0*/
/*   store i32 %277, i32* %278, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
memory_controller_in_a = fproduct_0_277;
end
/* fproduct: %0*/
/*   store i32 %338, i32* %339, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
memory_controller_in_a = fproduct_0_338;
end
/* fproduct: %0*/
/*   store i32 %383, i32* %384, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
memory_controller_in_a = fproduct_0_383;
end
/* fproduct: %0*/
/*   store i32 %412, i32* %413, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
memory_controller_in_a = fproduct_0_412;
end
/* fproduct: %0*/
/*   store i32 %425, i32* %426, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
memory_controller_in_a = fproduct_0_425;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fproduct: %0*/
/*   %1 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %3, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %4 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %9 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %12, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_9))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %14 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %18 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %27, i32* %28, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %29 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %32 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %35 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %40 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %45, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_22))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %47 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %50 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %53 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %58 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %70 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %73 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %76 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %79 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %82 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %87 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %96 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %99 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %102 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %108 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %111 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %114 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %119 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %127 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %130 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %133 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %136 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %139 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %142 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %145 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %164 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %167 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %161 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %170 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %173 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %180 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %183 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %186 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %191 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %198, i32* %199, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_72))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %200 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %203 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %206 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %209 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %212 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %215 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %218 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %221 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %224 = load i32* %in2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %229 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %242 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %245 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %248 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %251 = load i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %254 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %262 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %265 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %268 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %271 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %277, i32* %278, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_97))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %279 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %282 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %285 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %288 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %291 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %294 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %297 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %300 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %314 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %317 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %320 = load i32* %39, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %311 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %323 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %330 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %333 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %338, i32* %339, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_118))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %340 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %343 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %346 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %349 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %352 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %355 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %364 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %367 = load i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %370 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %376 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %379 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %383, i32* %384, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_135))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %385 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %388 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %391 = load i32* %118, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %394 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %401 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %404 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %407 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %412, i32* %413, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_148))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %414 = load i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %417 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   %422 = load i32* %228, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_size_a = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %425, i32* %426, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_157))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %125, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %309, i32* %310, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %399, i32* %400, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   store i32 %420, i32* %421, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
memory_controller_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
memory_controller_address_b = fproduct_0_69_reg;
end
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
memory_controller_address_b = fproduct_0_95_reg;
end
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   store i32 %125, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
memory_controller_address_b = fproduct_0_126_reg;
end
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
memory_controller_address_b = fproduct_0_160_reg;
end
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_address_b = arg_in;
end
/* fproduct: %0*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
memory_controller_address_b = fproduct_0_241_reg;
end
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_address_b = fproduct_0_5_reg;
end
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_address_b = fproduct_0_19_reg;
end
/* fproduct: %0*/
/*   store i32 %309, i32* %310, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
memory_controller_address_b = fproduct_0_310_reg;
end
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_address_b = fproduct_0_36_reg;
end
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_address_b = fproduct_0_59_reg;
end
/* fproduct: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
memory_controller_address_b = fproduct_0_363_reg;
end
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_address_b = fproduct_0_83_reg;
end
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_address_b = fproduct_0_115_reg;
end
/* fproduct: %0*/
/*   store i32 %399, i32* %400, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
memory_controller_address_b = fproduct_0_400_reg;
end
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_address_b = fproduct_0_146_reg;
end
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_address_b = fproduct_0_187_reg;
end
/* fproduct: %0*/
/*   store i32 %420, i32* %421, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
memory_controller_address_b = fproduct_0_421_reg;
end
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_address_b = fproduct_0_225_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %125, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %309, i32* %310, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %399, i32* %400, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %420, i32* %421, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fproduct: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
memory_controller_in_b = fproduct_0_68;
end
/* fproduct: %0*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
memory_controller_in_b = fproduct_0_94;
end
/* fproduct: %0*/
/*   store i32 %125, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
memory_controller_in_b = fproduct_0_125;
end
/* fproduct: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
memory_controller_in_b = fproduct_0_159;
end
/* fproduct: %0*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
memory_controller_in_b = fproduct_0_240;
end
/* fproduct: %0*/
/*   store i32 %309, i32* %310, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
memory_controller_in_b = fproduct_0_309;
end
/* fproduct: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
memory_controller_in_b = fproduct_0_362;
end
/* fproduct: %0*/
/*   store i32 %399, i32* %400, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
memory_controller_in_b = fproduct_0_399;
end
/* fproduct: %0*/
/*   store i32 %420, i32* %421, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
memory_controller_in_b = fproduct_0_420;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fproduct: %0*/
/*   %2 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %10 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_6))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %15 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_10))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %20 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_11))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %24 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_12))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %30 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_16))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %33 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_17))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %37 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_18))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %41 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_19))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %48 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_23))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %51 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_24))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %54 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_25))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %60 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_26))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %64 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_27))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %68, i32* %69, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_30))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %71 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_31))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %74 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_32))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %77 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_33))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %80 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_34))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %84 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_35))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %88 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_36))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %94, i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_39))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %97 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_40))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %100 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_41))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %103 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_42))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %109 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_43))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %112 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_44))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %116 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_45))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %120 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_46))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %125, i32* %126, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_49))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %128 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_50))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %131 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_51))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %134 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_52))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %137 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_53))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %140 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_54))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %143 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_55))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %147 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_56))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %151 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_57))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %159, i32* %160, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_60))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %165 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_61))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %168 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_62))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %162 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_63))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %171 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_64))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %174 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_65))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %181 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_66))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %184 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_67))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %188 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_68))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %192 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_69))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %201 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_73))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %204 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_74))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %207 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_75))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %210 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_76))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %213 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_77))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %216 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_78))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %219 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_79))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %222 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_80))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %226 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_81))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %230 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_82))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %240, i32* %241, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_85))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %243 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_86))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %246 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_87))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %249 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_88))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %252 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_89))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %255 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_90))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %263 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_91))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %266 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_92))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %269 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_93))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %272 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_94))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %280 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_98))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %283 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_99))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %286 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_100))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %289 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_101))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %292 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_102))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %295 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_103))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %298 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_104))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %301 = load i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_105))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %309, i32* %310, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_108))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %315 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_109))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %318 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_110))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %321 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_111))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %312 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_112))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %324 = load i32* %36, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_113))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %331 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_114))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %334 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_115))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %341 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_119))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %344 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_120))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %347 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_121))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %350 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_122))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %353 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_123))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %356 = load i32* %59, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_124))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %362, i32* %363, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_127))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %365 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_128))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %368 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_129))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %371 = load i32* %83, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_130))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %377 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_131))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %380 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_132))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %386 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_136))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %389 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_137))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %392 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_138))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %395 = load i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_139))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %399, i32* %400, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_142))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %402 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_143))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %405 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_144))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %408 = load i32* %146, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_145))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %415 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_149))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %418 = load i32* %187, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_150))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   store i32 %420, i32* %421, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_153))
begin
memory_controller_size_b = 2'd2;
end
/* fproduct: %0*/
/*   %423 = load i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fproduct_BB_0_154))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fproduct_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_arg_output;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_arg_in2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_arg_in;
wire  fproduct_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_memory_controller_address_a;
wire  fproduct_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fproduct_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fproduct_memory_controller_out_a;
wire [1:0] fproduct_memory_controller_size_a;
wire  fproduct_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fproduct_memory_controller_address_b;
wire  fproduct_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fproduct_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fproduct_memory_controller_out_b;
wire [1:0] fproduct_memory_controller_size_b;
reg  fproduct_memory_controller_waitrequest;
wire  fproduct_finish;
reg  fproduct_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fproduct fproduct_inst (
	.memory_controller_enable_a (fproduct_memory_controller_enable_a),
	.memory_controller_address_a (fproduct_memory_controller_address_a),
	.memory_controller_write_enable_a (fproduct_memory_controller_write_enable_a),
	.memory_controller_in_a (fproduct_memory_controller_in_a),
	.memory_controller_size_a (fproduct_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fproduct_memory_controller_enable_b),
	.memory_controller_address_b (fproduct_memory_controller_address_b),
	.memory_controller_write_enable_b (fproduct_memory_controller_write_enable_b),
	.memory_controller_in_b (fproduct_memory_controller_in_b),
	.memory_controller_size_b (fproduct_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fproduct_start),
	.finish (fproduct_finish),
	.arg_output (fproduct_arg_output),
	.arg_in2 (fproduct_arg_in2),
	.arg_in (fproduct_arg_in)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fproduct_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fproduct_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fproduct_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fproduct_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fproduct_arg_output <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_arg_output"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fproduct_arg_in2 <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_arg_in2"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fproduct_arg_in <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fproduct_arg_in"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
begin
fproduct_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
begin
fproduct_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fproduct_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fproduct_finish_final = fproduct_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fproduct_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fproduct_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fproduct_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fproduct_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fproduct_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fproduct_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fproduct_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fproduct_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fproduct_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fproduct_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fproduct_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fproduct_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fproduct_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fproduct_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fproduct_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fproduct_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fproduct_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fproduct_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fproduct_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fproduct(i32* undef, i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fproduct_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
