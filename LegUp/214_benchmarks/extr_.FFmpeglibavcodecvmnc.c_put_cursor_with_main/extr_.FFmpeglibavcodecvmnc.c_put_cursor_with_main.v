//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:52:54 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module put_cursor
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_dst,
	arg_stride,
	arg_c,
	arg_dx,
	arg_dy
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_put_cursor_BB_0_1 = 6'd1;
parameter [5:0] LEGUP_F_put_cursor_BB_0_2 = 6'd2;
parameter [5:0] LEGUP_F_put_cursor_BB_0_3 = 6'd3;
parameter [5:0] LEGUP_F_put_cursor_BB_0_4 = 6'd4;
parameter [5:0] LEGUP_F_put_cursor_BB_0_5 = 6'd5;
parameter [5:0] LEGUP_F_put_cursor_BB_0_6 = 6'd6;
parameter [5:0] LEGUP_F_put_cursor_BB_25_7 = 6'd7;
parameter [5:0] LEGUP_F_put_cursor_BB_25_8 = 6'd8;
parameter [5:0] LEGUP_F_put_cursor_BB_25_9 = 6'd9;
parameter [5:0] LEGUP_F_put_cursor_BB_28_10 = 6'd10;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11 = 6'd11;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12 = 6'd12;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13 = 6'd13;
parameter [5:0] LEGUP_F_put_cursor_BB_35_14 = 6'd14;
parameter [5:0] LEGUP_F_put_cursor_BB_35_15 = 6'd15;
parameter [5:0] LEGUP_F_put_cursor_BB_35_16 = 6'd16;
parameter [5:0] LEGUP_F_put_cursor_BB_39_17 = 6'd17;
parameter [5:0] LEGUP_F_put_cursor_BB_39_18 = 6'd18;
parameter [5:0] LEGUP_F_put_cursor_BB_39_19 = 6'd19;
parameter [5:0] LEGUP_F_put_cursor_BB_39_20 = 6'd20;
parameter [5:0] LEGUP_F_put_cursor_BB_39_21 = 6'd21;
parameter [5:0] LEGUP_F_put_cursor_BB_39_22 = 6'd22;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph22_us_23 = 6'd23;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph22_us_24 = 6'd24;
parameter [5:0] LEGUP_F_put_cursor_BB_46_25 = 6'd25;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26 = 6'd26;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27 = 6'd27;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28 = 6'd28;
parameter [5:0] LEGUP_F_put_cursor_BB_53_29 = 6'd29;
parameter [5:0] LEGUP_F_put_cursor_BB_53_30 = 6'd30;
parameter [5:0] LEGUP_F_put_cursor_BB_53_31 = 6'd31;
parameter [5:0] LEGUP_F_put_cursor_BB_57_32 = 6'd32;
parameter [5:0] LEGUP_F_put_cursor_BB_57_33 = 6'd33;
parameter [5:0] LEGUP_F_put_cursor_BB_57_34 = 6'd34;
parameter [5:0] LEGUP_F_put_cursor_BB_57_35 = 6'd35;
parameter [5:0] LEGUP_F_put_cursor_BB_57_36 = 6'd36;
parameter [5:0] LEGUP_F_put_cursor_BB_57_37 = 6'd37;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph13_us_38 = 6'd38;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph13_us_39 = 6'd39;
parameter [5:0] LEGUP_F_put_cursor_BB_64_40 = 6'd40;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41 = 6'd41;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42 = 6'd42;
parameter [5:0] LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43 = 6'd43;
parameter [5:0] LEGUP_F_put_cursor_BB_71_44 = 6'd44;
parameter [5:0] LEGUP_F_put_cursor_BB_71_45 = 6'd45;
parameter [5:0] LEGUP_F_put_cursor_BB_71_46 = 6'd46;
parameter [5:0] LEGUP_F_put_cursor_BB_75_47 = 6'd47;
parameter [5:0] LEGUP_F_put_cursor_BB_75_48 = 6'd48;
parameter [5:0] LEGUP_F_put_cursor_BB_75_49 = 6'd49;
parameter [5:0] LEGUP_F_put_cursor_BB_75_50 = 6'd50;
parameter [5:0] LEGUP_F_put_cursor_BB_75_51 = 6'd51;
parameter [5:0] LEGUP_F_put_cursor_BB_75_52 = 6'd52;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph_us_53 = 6'd53;
parameter [5:0] LEGUP_F_put_cursor_BB__lr_ph_us_54 = 6'd54;
parameter [5:0] LEGUP_F_put_cursor_BB__loopexit_loopexit_55 = 6'd55;
parameter [5:0] LEGUP_F_put_cursor_BB__loopexit_loopexit1_56 = 6'd56;
parameter [5:0] LEGUP_F_put_cursor_BB__loopexit_loopexit2_57 = 6'd57;
parameter [5:0] LEGUP_F_put_cursor_BB__loopexit_58 = 6'd58;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_dst;
input [31:0] arg_stride;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_c;
input [31:0] arg_dx;
input [31:0] arg_dy;
reg [5:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_1_reg;
reg [31:0] put_cursor_0_2;
reg [31:0] put_cursor_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_3_reg;
reg [31:0] put_cursor_0_4;
reg [31:0] put_cursor_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_5_reg;
reg [31:0] put_cursor_0_6;
reg [31:0] put_cursor_0_6_reg;
reg [31:0] put_cursor_0_7;
reg [31:0] put_cursor_0_7_reg;
reg [31:0] put_cursor_0_8;
reg [31:0] put_cursor_0_8_reg;
reg  put_cursor_0_9;
reg  put_cursor_0_9_reg;
reg [31:0] put_cursor_0__;
reg [31:0] put_cursor_0___reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_10_reg;
reg [31:0] put_cursor_0_11;
reg [31:0] put_cursor_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_12_reg;
reg [31:0] put_cursor_0_13;
reg [31:0] put_cursor_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_0_14_reg;
reg [31:0] put_cursor_0_15;
reg [31:0] put_cursor_0_15_reg;
reg [31:0] put_cursor_0_16;
reg [31:0] put_cursor_0_16_reg;
reg  put_cursor_0_17;
reg  put_cursor_0_17_reg;
reg [31:0] put_cursor_0_18;
reg [31:0] put_cursor_0_18_reg;
reg [31:0] put_cursor_0_h_0;
reg [31:0] put_cursor_0_h_0_reg;
reg  put_cursor_0_19;
reg  put_cursor_0_19_reg;
reg [31:0] put_cursor_0_20;
reg [31:0] put_cursor_0_20_reg;
reg [31:0] put_cursor_0___;
reg [31:0] put_cursor_0____reg;
reg  put_cursor_0_21;
reg  put_cursor_0_21_reg;
reg [31:0] put_cursor_0_22;
reg [31:0] put_cursor_0_22_reg;
reg [31:0] put_cursor_0__h_0;
reg [31:0] put_cursor_0__h_0_reg;
reg  put_cursor_0_23;
reg  put_cursor_0_23_reg;
reg  put_cursor_0_24;
reg  put_cursor_0_24_reg;
reg  put_cursor_0_or_cond;
reg  put_cursor_0_or_cond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_25_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_25_26_reg;
reg [31:0] put_cursor_25_27;
reg [31:0] put_cursor_25_27_reg;
reg  put_cursor_28_29;
reg  put_cursor_28_29_reg;
reg  put_cursor_28_30;
reg  put_cursor_28_30_reg;
reg  put_cursor_28_or_cond207;
reg  put_cursor_28_or_cond207_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader20_lr_ph_split_us_34_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp29;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp29_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp31;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp31_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp32;
reg  put_cursor__preheader20_lr_ph_split_us_tmp32_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp33;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp33_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp34;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp34_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp35;
reg  put_cursor__preheader20_lr_ph_split_us_tmp35_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax36;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax36_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp37;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp37_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp50;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp50_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp51;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp51_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp53;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp53_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp54;
reg  put_cursor__preheader20_lr_ph_split_us_tmp54_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax55;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax55_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp56;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp56_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp57;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp57_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp58;
reg  put_cursor__preheader20_lr_ph_split_us_tmp58_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax59;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax59_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp60;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp60_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp63;
reg  put_cursor__preheader20_lr_ph_split_us_tmp63_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax64;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax64_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp65;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp65_reg;
reg  put_cursor__preheader20_lr_ph_split_us_tmp66;
reg  put_cursor__preheader20_lr_ph_split_us_tmp66_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax67;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_smax67_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp68;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp68_reg;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp69;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp69_reg;
reg [31:0] put_cursor_35__pre;
reg [31:0] put_cursor_35__pre_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_35_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_35_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_35_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_35_37_reg;
reg [31:0] put_cursor_35_38;
reg [31:0] put_cursor_35_38_reg;
reg  put_cursor_35_exitcond61;
reg  put_cursor_35_exitcond61_reg;
reg [31:0] put_cursor_39_i_021_us;
reg [31:0] put_cursor_39_i_021_us_reg;
reg [31:0] put_cursor_39_tmp71;
reg [31:0] put_cursor_39_tmp71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_39_scevgep38_reg;
reg [31:0] put_cursor_39_40;
reg [31:0] put_cursor_39_40_reg;
reg [31:0] put_cursor_39_41;
reg [31:0] put_cursor_39_41_reg;
reg [31:0] put_cursor_39_42;
reg [31:0] put_cursor_39_42_reg;
reg [31:0] put_cursor_39_43;
reg [31:0] put_cursor_39_43_reg;
reg [31:0] put_cursor_39_44;
reg [31:0] put_cursor_39_44_reg;
reg [31:0] put_cursor_39_45;
reg [31:0] put_cursor_39_45_reg;
reg  put_cursor_39_exitcond;
reg  put_cursor_39_exitcond_reg;
reg [31:0] put_cursor__lr_ph22_us_j_027_us;
reg [31:0] put_cursor__lr_ph22_us_j_027_us_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph22_us_cd_026_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph22_us_cd_026_us_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph22_us_msk_025_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph22_us_msk_025_us_reg;
reg [31:0] put_cursor__lr_ph22_us_tmp62;
reg [31:0] put_cursor__lr_ph22_us_tmp62_reg;
reg [31:0] put_cursor__lr_ph22_us_tmp70;
reg [31:0] put_cursor__lr_ph22_us_tmp70_reg;
reg  put_cursor_46_47;
reg  put_cursor_46_47_reg;
reg  put_cursor_46_48;
reg  put_cursor_46_48_reg;
reg  put_cursor_46_or_cond208;
reg  put_cursor_46_or_cond208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader11_lr_ph_split_us_52_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp73;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp73_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp74;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp74_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp76;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp76_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp77;
reg  put_cursor__preheader11_lr_ph_split_us_tmp77_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax78;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax78_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp79;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp79_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp80;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp80_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp81;
reg  put_cursor__preheader11_lr_ph_split_us_tmp81_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax82;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax82_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp83;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp83_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp98;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp98_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp99;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp99_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp101;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp101_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp102;
reg  put_cursor__preheader11_lr_ph_split_us_tmp102_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax103;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax103_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp104;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp104_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp105;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp105_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp106;
reg  put_cursor__preheader11_lr_ph_split_us_tmp106_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax107;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax107_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp108;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp108_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp111;
reg  put_cursor__preheader11_lr_ph_split_us_tmp111_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax112;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax112_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp113;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp113_reg;
reg  put_cursor__preheader11_lr_ph_split_us_tmp114;
reg  put_cursor__preheader11_lr_ph_split_us_tmp114_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax115;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_smax115_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp116;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp116_reg;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp117;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp117_reg;
reg [31:0] put_cursor_53__pre205;
reg [31:0] put_cursor_53__pre205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_53_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_53_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_53_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_53_55_reg;
reg [31:0] put_cursor_53_56;
reg [31:0] put_cursor_53_56_reg;
reg  put_cursor_53_exitcond109;
reg  put_cursor_53_exitcond109_reg;
reg [31:0] put_cursor_57_i_112_us;
reg [31:0] put_cursor_57_i_112_us_reg;
reg [31:0] put_cursor_57_tmp119;
reg [31:0] put_cursor_57_tmp119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_57_scevgep86_reg;
reg [31:0] put_cursor_57_58;
reg [31:0] put_cursor_57_58_reg;
reg [31:0] put_cursor_57_59;
reg [31:0] put_cursor_57_59_reg;
reg [31:0] put_cursor_57_60;
reg [31:0] put_cursor_57_60_reg;
reg [31:0] put_cursor_57_61;
reg [31:0] put_cursor_57_61_reg;
reg [31:0] put_cursor_57_62;
reg [31:0] put_cursor_57_62_reg;
reg [31:0] put_cursor_57_63;
reg [31:0] put_cursor_57_63_reg;
reg  put_cursor_57_exitcond84;
reg  put_cursor_57_exitcond84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph13_us_msk2_018_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph13_us_msk2_018_us_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph13_us_cd1_017_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph13_us_cd1_017_us_reg;
reg [31:0] put_cursor__lr_ph13_us_j_116_us;
reg [31:0] put_cursor__lr_ph13_us_j_116_us_reg;
reg [31:0] put_cursor__lr_ph13_us_tmp110;
reg [31:0] put_cursor__lr_ph13_us_tmp110_reg;
reg [31:0] put_cursor__lr_ph13_us_tmp118;
reg [31:0] put_cursor__lr_ph13_us_tmp118_reg;
reg  put_cursor_64_65;
reg  put_cursor_64_65_reg;
reg  put_cursor_64_66;
reg  put_cursor_64_66_reg;
reg  put_cursor_64_or_cond209;
reg  put_cursor_64_or_cond209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__preheader_lr_ph_split_us_70_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp121;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp121_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp122;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp122_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp124;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp124_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp125;
reg  put_cursor__preheader_lr_ph_split_us_tmp125_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax126;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax126_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp127;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp127_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp128;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp128_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp129;
reg  put_cursor__preheader_lr_ph_split_us_tmp129_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax130;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax130_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp131;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp131_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp146;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp146_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp147;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp147_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp149;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp149_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp150;
reg  put_cursor__preheader_lr_ph_split_us_tmp150_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax151;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax151_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp152;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp152_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp153;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp153_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp154;
reg  put_cursor__preheader_lr_ph_split_us_tmp154_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax155;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax155_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp156;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp156_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp159;
reg  put_cursor__preheader_lr_ph_split_us_tmp159_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax160;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax160_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp161;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp161_reg;
reg  put_cursor__preheader_lr_ph_split_us_tmp162;
reg  put_cursor__preheader_lr_ph_split_us_tmp162_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax163;
reg [31:0] put_cursor__preheader_lr_ph_split_us_smax163_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp164;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp164_reg;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp165;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp165_reg;
reg [31:0] put_cursor_71__pre206;
reg [31:0] put_cursor_71__pre206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_71_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_71_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_71_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_71_73_reg;
reg [31:0] put_cursor_71_74;
reg [31:0] put_cursor_71_74_reg;
reg  put_cursor_71_exitcond157;
reg  put_cursor_71_exitcond157_reg;
reg [31:0] put_cursor_75_i_26_us;
reg [31:0] put_cursor_75_i_26_us_reg;
reg [31:0] put_cursor_75_tmp167;
reg [31:0] put_cursor_75_tmp167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_75_scevgep134_reg;
reg [31:0] put_cursor_75_76;
reg [31:0] put_cursor_75_76_reg;
reg [31:0] put_cursor_75_77;
reg [31:0] put_cursor_75_77_reg;
reg [31:0] put_cursor_75_78;
reg [31:0] put_cursor_75_78_reg;
reg [31:0] put_cursor_75_79;
reg [31:0] put_cursor_75_79_reg;
reg [31:0] put_cursor_75_80;
reg [31:0] put_cursor_75_80_reg;
reg [31:0] put_cursor_75_81;
reg [31:0] put_cursor_75_81_reg;
reg  put_cursor_75_exitcond132;
reg  put_cursor_75_exitcond132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph_us_msk4_09_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph_us_msk4_09_us_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph_us_cd3_08_us;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor__lr_ph_us_cd3_08_us_reg;
reg [31:0] put_cursor__lr_ph_us_j_27_us;
reg [31:0] put_cursor__lr_ph_us_j_27_us_reg;
reg [31:0] put_cursor__lr_ph_us_tmp158;
reg [31:0] put_cursor__lr_ph_us_tmp158_reg;
reg [31:0] put_cursor__lr_ph_us_tmp166;
reg [31:0] put_cursor__lr_ph_us_tmp166_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp65_en;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp65_stage0_reg;
reg  lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp68_en;
reg [31:0] put_cursor__preheader20_lr_ph_split_us_tmp68_stage0_reg;
reg  lpm_mult_put_cursor__lr_ph22_us_tmp62_en;
reg [31:0] put_cursor__lr_ph22_us_tmp62_stage0_reg;
reg  lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp113_en;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp113_stage0_reg;
reg  lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp116_en;
reg [31:0] put_cursor__preheader11_lr_ph_split_us_tmp116_stage0_reg;
reg  lpm_mult_put_cursor__lr_ph13_us_tmp110_en;
reg [31:0] put_cursor__lr_ph13_us_tmp110_stage0_reg;
reg  lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp161_en;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp161_stage0_reg;
reg  lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp164_en;
reg [31:0] put_cursor__preheader_lr_ph_split_us_tmp164_stage0_reg;
reg  lpm_mult_put_cursor__lr_ph_us_tmp158_en;
reg [31:0] put_cursor__lr_ph_us_tmp158_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_0_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_0_6) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_0_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_7;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_25_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_7;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_25_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_8;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_25_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_8;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_25_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_9;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_25_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_25_9;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_25_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_25_9) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_25_27 == 32'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_28_10;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_28_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_25_9) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_25_27 == 32'd2)))
begin
cur_state <= LEGUP_F_put_cursor_BB_46_25;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_46_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_25_9) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_25_27 == 32'd4)))
begin
cur_state <= LEGUP_F_put_cursor_BB_64_40;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_64_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((((cur_state == LEGUP_F_put_cursor_BB_25_9) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_25_27 != 32'd1)) & (put_cursor_25_27 != 32'd2)) & (put_cursor_25_27 != 32'd4)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_28_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_28_10;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_28_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_28_10) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_28_or_cond207 == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_28_10) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_28_or_cond207 == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph22_us_23;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph22_us_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_35_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_14;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_35_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_15;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_35_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_15;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_35_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_16;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_16;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit2_57;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit2_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph22_us_23;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph22_us_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_17;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_18;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_18;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_19;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_19;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_20;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_20;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_21;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_21;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_22;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_39_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_22;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_39_22) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_39_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_35_14;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_35_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_39_22) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_39_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_17;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph22_us_23;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph22_us_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph22_us_24;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph22_us_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph22_us_24;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph22_us_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_39_17;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_39_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_46_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_46_25;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_46_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_46_25) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_46_or_cond208 == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_46_25) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_46_or_cond208 == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph13_us_38;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph13_us_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_53_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_29;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_53_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_30;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_53_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_30;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_53_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_31;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_31;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit1_56;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph13_us_38;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph13_us_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_32;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_33;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_33;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_34;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_34;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_35;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_35;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_36;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_36;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_37;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_57_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_37;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_57_37) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_57_exitcond84_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_53_29;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_53_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_57_37) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_57_exitcond84_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_32;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph13_us_38;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph13_us_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph13_us_39;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph13_us_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph13_us_39;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph13_us_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_57_32;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_57_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_64_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_64_40;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_64_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_64_40) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_64_or_cond209 == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_64_40) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_64_or_cond209 == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph_us_53;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph_us_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_71_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_44;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_71_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_45;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_71_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_45;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_71_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_46;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_46;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit_55;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph_us_53;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph_us_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_47;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_48;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_48;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_49;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_49;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_50;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_50;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_51;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_51;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_52;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB_75_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_52;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_75_52) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_75_exitcond132_reg == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB_71_44;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_71_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_put_cursor_BB_75_52) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_75_exitcond132_reg == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_47;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph_us_53;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph_us_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph_us_54;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph_us_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__lr_ph_us_54;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__lr_ph_us_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB_75_47;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB_75_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit_55;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit1_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit1_56;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit1_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit2_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_loopexit2_57;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_loopexit2_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_loopexit2_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_put_cursor_BB__loopexit_58;
if (reset == 1'b0 && ^(LEGUP_F_put_cursor_BB__loopexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_put_cursor_BB__loopexit_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 6'd0;
if (reset == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 0*/
begin
put_cursor_0_1 = arg_c;
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %1 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_1_reg <= put_cursor_0_1;
if (reset == 1'b0 && ^(put_cursor_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_1_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
begin
put_cursor_0_2 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
put_cursor_0_2_reg <= put_cursor_0_2;
if (reset == 1'b0 && ^(put_cursor_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_2_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 1*/
begin
put_cursor_0_3 = (arg_c + 4);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %3 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_3_reg <= put_cursor_0_3;
if (reset == 1'b0 && ^(put_cursor_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_3_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
begin
put_cursor_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
put_cursor_0_4_reg <= put_cursor_0_4;
if (reset == 1'b0 && ^(put_cursor_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_4_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 2*/
begin
put_cursor_0_5 = (arg_c + 8);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %5 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 2*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_5_reg <= put_cursor_0_5;
if (reset == 1'b0 && ^(put_cursor_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_5_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
begin
put_cursor_0_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_6_reg <= put_cursor_0_6;
if (reset == 1'b0 && ^(put_cursor_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_6_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %7 = add nsw i32 %6, %2*/
begin
put_cursor_0_7 = (put_cursor_0_6 + put_cursor_0_2_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %7 = add nsw i32 %6, %2*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_7_reg <= put_cursor_0_7;
if (reset == 1'b0 && ^(put_cursor_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_7_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %8 = sub nsw i32 %4, %6*/
begin
put_cursor_0_8 = (put_cursor_0_4_reg - put_cursor_0_6);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %8 = sub nsw i32 %4, %6*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_8_reg <= put_cursor_0_8;
if (reset == 1'b0 && ^(put_cursor_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_8_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %9 = icmp slt i32 %4, %7*/
begin
put_cursor_0_9 = ($signed(put_cursor_0_4_reg) < $signed(put_cursor_0_7));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %9 = icmp slt i32 %4, %7*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_9_reg <= put_cursor_0_9;
if (reset == 1'b0 && ^(put_cursor_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_9_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %. = select i1 %9, i32 %8, i32 %2*/
begin
put_cursor_0__ = (put_cursor_0_9 ? put_cursor_0_8 : put_cursor_0_2_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %. = select i1 %9, i32 %8, i32 %2*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0___reg <= put_cursor_0__;
if (reset == 1'b0 && ^(put_cursor_0__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0___reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 3*/
begin
put_cursor_0_10 = (arg_c + 12);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %10 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 3*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_10_reg <= put_cursor_0_10;
if (reset == 1'b0 && ^(put_cursor_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_10_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
begin
put_cursor_0_11 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_11_reg <= put_cursor_0_11;
if (reset == 1'b0 && ^(put_cursor_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_11_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 4*/
begin
put_cursor_0_12 = (arg_c + 16);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %12 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 4*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_12_reg <= put_cursor_0_12;
if (reset == 1'b0 && ^(put_cursor_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_12_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
put_cursor_0_13 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_13_reg <= put_cursor_0_13;
if (reset == 1'b0 && ^(put_cursor_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_13_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 5*/
begin
put_cursor_0_14 = (arg_c + 20);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %14 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 5*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
put_cursor_0_14_reg <= put_cursor_0_14;
if (reset == 1'b0 && ^(put_cursor_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_14_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
begin
put_cursor_0_15 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_15_reg <= put_cursor_0_15;
if (reset == 1'b0 && ^(put_cursor_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_15_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %16 = add nsw i32 %15, %11*/
begin
put_cursor_0_16 = (put_cursor_0_15 + put_cursor_0_11_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %16 = add nsw i32 %15, %11*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_16_reg <= put_cursor_0_16;
if (reset == 1'b0 && ^(put_cursor_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_16_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %17 = icmp slt i32 %13, %16*/
begin
put_cursor_0_17 = ($signed(put_cursor_0_13) < $signed(put_cursor_0_16));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %17 = icmp slt i32 %13, %16*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_17_reg <= put_cursor_0_17;
if (reset == 1'b0 && ^(put_cursor_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_17_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %18 = sub nsw i32 %13, %15*/
begin
put_cursor_0_18 = (put_cursor_0_13 - put_cursor_0_15);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %18 = sub nsw i32 %13, %15*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_18_reg <= put_cursor_0_18;
if (reset == 1'b0 && ^(put_cursor_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_18_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %h.0 = select i1 %17, i32 %18, i32 %11*/
begin
put_cursor_0_h_0 = (put_cursor_0_17 ? put_cursor_0_18 : put_cursor_0_11_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %h.0 = select i1 %17, i32 %18, i32 %11*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_h_0_reg <= put_cursor_0_h_0;
if (reset == 1'b0 && ^(put_cursor_0_h_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_h_0_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %19 = icmp slt i32 %6, 0*/
begin
put_cursor_0_19 = ($signed(put_cursor_0_6) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %19 = icmp slt i32 %6, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_19_reg <= put_cursor_0_19;
if (reset == 1'b0 && ^(put_cursor_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_19_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %20 = select i1 %19, i32 %6, i32 0*/
begin
put_cursor_0_20 = (put_cursor_0_19 ? put_cursor_0_6 : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %20 = select i1 %19, i32 %6, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_4))
begin
put_cursor_0_20_reg <= put_cursor_0_20;
if (reset == 1'b0 && ^(put_cursor_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_20_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %.. = add i32 %., %20*/
begin
put_cursor_0___ = (put_cursor_0___reg + put_cursor_0_20_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %.. = add i32 %., %20*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0____reg <= put_cursor_0___;
if (reset == 1'b0 && ^(put_cursor_0___) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0____reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %21 = icmp slt i32 %15, 0*/
begin
put_cursor_0_21 = ($signed(put_cursor_0_15) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %21 = icmp slt i32 %15, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_21_reg <= put_cursor_0_21;
if (reset == 1'b0 && ^(put_cursor_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_21_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %22 = select i1 %21, i32 %15, i32 0*/
begin
put_cursor_0_22 = (put_cursor_0_21 ? put_cursor_0_15 : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %22 = select i1 %21, i32 %15, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_22_reg <= put_cursor_0_22;
if (reset == 1'b0 && ^(put_cursor_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_22_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %.h.0 = add i32 %h.0, %22*/
begin
put_cursor_0__h_0 = (put_cursor_0_h_0_reg + put_cursor_0_22_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %.h.0 = add i32 %h.0, %22*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_6))
begin
put_cursor_0__h_0_reg <= put_cursor_0__h_0;
if (reset == 1'b0 && ^(put_cursor_0__h_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0__h_0_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %23 = icmp slt i32 %.., 1*/
begin
put_cursor_0_23 = ($signed(put_cursor_0___) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %23 = icmp slt i32 %.., 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_5))
begin
put_cursor_0_23_reg <= put_cursor_0_23;
if (reset == 1'b0 && ^(put_cursor_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_23_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %24 = icmp slt i32 %.h.0, 1*/
begin
put_cursor_0_24 = ($signed(put_cursor_0__h_0) < $signed(32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %24 = icmp slt i32 %.h.0, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_6))
begin
put_cursor_0_24_reg <= put_cursor_0_24;
if (reset == 1'b0 && ^(put_cursor_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_24_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %0*/
/*   %or.cond = or i1 %23, %24*/
begin
put_cursor_0_or_cond = (put_cursor_0_23_reg | put_cursor_0_24);
end
end
always @(posedge clk) begin
/* put_cursor: %0*/
/*   %or.cond = or i1 %23, %24*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_6))
begin
put_cursor_0_or_cond_reg <= put_cursor_0_or_cond;
if (reset == 1'b0 && ^(put_cursor_0_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_0_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %25*/
/*   %26 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 6*/
begin
put_cursor_25_26 = (arg_c + 24);
end
end
always @(posedge clk) begin
/* put_cursor: %25*/
/*   %26 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 6*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_7))
begin
put_cursor_25_26_reg <= put_cursor_25_26;
if (reset == 1'b0 && ^(put_cursor_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_25_26_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
begin
put_cursor_25_27 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_9))
begin
put_cursor_25_27_reg <= put_cursor_25_27;
if (reset == 1'b0 && ^(put_cursor_25_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_25_27_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %28*/
/*   %29 = icmp sgt i32 %.h.0, 0*/
begin
put_cursor_28_29 = ($signed(put_cursor_0__h_0_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %28*/
/*   %29 = icmp sgt i32 %.h.0, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_28_10))
begin
put_cursor_28_29_reg <= put_cursor_28_29;
if (reset == 1'b0 && ^(put_cursor_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_28_29_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %28*/
/*   %30 = icmp sgt i32 %.., 0*/
begin
put_cursor_28_30 = ($signed(put_cursor_0____reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %28*/
/*   %30 = icmp sgt i32 %.., 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_28_10))
begin
put_cursor_28_30_reg <= put_cursor_28_30;
if (reset == 1'b0 && ^(put_cursor_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_28_30_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %28*/
/*   %or.cond207 = and i1 %29, %30*/
begin
put_cursor_28_or_cond207 = (put_cursor_28_29 & put_cursor_28_30);
end
end
always @(posedge clk) begin
/* put_cursor: %28*/
/*   %or.cond207 = and i1 %29, %30*/
if ((cur_state == LEGUP_F_put_cursor_BB_28_10))
begin
put_cursor_28_or_cond207_reg <= put_cursor_28_or_cond207;
if (reset == 1'b0 && ^(put_cursor_28_or_cond207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_28_or_cond207_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %31 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
begin
put_cursor__preheader20_lr_ph_split_us_31 = (arg_c + 32);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %31 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_31_reg <= put_cursor__preheader20_lr_ph_split_us_31;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_31_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %32 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
begin
put_cursor__preheader20_lr_ph_split_us_32 = (arg_c + 28);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %32 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_32_reg <= put_cursor__preheader20_lr_ph_split_us_32;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_32_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
begin
put_cursor__preheader20_lr_ph_split_us_33 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13))
begin
put_cursor__preheader20_lr_ph_split_us_33_reg <= put_cursor__preheader20_lr_ph_split_us_33;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_33_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
begin
put_cursor__preheader20_lr_ph_split_us_34 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13))
begin
put_cursor__preheader20_lr_ph_split_us_34_reg <= put_cursor__preheader20_lr_ph_split_us_34;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_34_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp = sub i32 -2, %6*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp = (-32'd2 - put_cursor_0_6_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp = sub i32 -2, %6*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp_reg <= put_cursor__preheader20_lr_ph_split_us_tmp;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp29 = xor i32 %4, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp29 = (put_cursor_0_4_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp29 = xor i32 %4, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp29_reg <= put_cursor__preheader20_lr_ph_split_us_tmp29;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp29_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp31 = xor i32 %7, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp31 = (put_cursor_0_7_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp31 = xor i32 %7, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp31_reg <= put_cursor__preheader20_lr_ph_split_us_tmp31;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp31_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp32 = icmp sgt i32 %tmp29, %tmp31*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp32 = ($signed(put_cursor__preheader20_lr_ph_split_us_tmp29) > $signed(put_cursor__preheader20_lr_ph_split_us_tmp31));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp32 = icmp sgt i32 %tmp29, %tmp31*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp32_reg <= put_cursor__preheader20_lr_ph_split_us_tmp32;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp32_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax = select i1 %tmp32, i32 %tmp29, i32 %tmp31*/
begin
put_cursor__preheader20_lr_ph_split_us_smax = (put_cursor__preheader20_lr_ph_split_us_tmp32 ? put_cursor__preheader20_lr_ph_split_us_tmp29 : put_cursor__preheader20_lr_ph_split_us_tmp31);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax = select i1 %tmp32, i32 %tmp29, i32 %tmp31*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax_reg <= put_cursor__preheader20_lr_ph_split_us_smax;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp33 = sub i32 %tmp, %smax*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp33 = (put_cursor__preheader20_lr_ph_split_us_tmp - put_cursor__preheader20_lr_ph_split_us_smax);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp33 = sub i32 %tmp, %smax*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp33_reg <= put_cursor__preheader20_lr_ph_split_us_tmp33;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp33_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp34 = xor i32 %6, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp34 = (put_cursor_0_6_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp34 = xor i32 %6, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp34_reg <= put_cursor__preheader20_lr_ph_split_us_tmp34;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp34_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp35 = icmp sgt i32 %tmp34, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp35 = ($signed(put_cursor__preheader20_lr_ph_split_us_tmp34) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp35 = icmp sgt i32 %tmp34, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp35_reg <= put_cursor__preheader20_lr_ph_split_us_tmp35;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp35_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax36 = select i1 %tmp35, i32 %tmp34, i32 -1*/
begin
put_cursor__preheader20_lr_ph_split_us_smax36 = (put_cursor__preheader20_lr_ph_split_us_tmp35 ? put_cursor__preheader20_lr_ph_split_us_tmp34 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax36 = select i1 %tmp35, i32 %tmp34, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax36_reg <= put_cursor__preheader20_lr_ph_split_us_smax36;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax36_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp37 = sub i32 %tmp33, %smax36*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp37 = (put_cursor__preheader20_lr_ph_split_us_tmp33_reg - put_cursor__preheader20_lr_ph_split_us_smax36_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp37 = sub i32 %tmp33, %smax36*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp37_reg <= put_cursor__preheader20_lr_ph_split_us_tmp37;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp37_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp50 = sub i32 -2, %15*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp50 = (-32'd2 - put_cursor_0_15_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp50 = sub i32 -2, %15*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp50_reg <= put_cursor__preheader20_lr_ph_split_us_tmp50;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp50_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp51 = xor i32 %13, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp51 = (put_cursor_0_13_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp51 = xor i32 %13, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp51_reg <= put_cursor__preheader20_lr_ph_split_us_tmp51;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp51_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp53 = xor i32 %16, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp53 = (put_cursor_0_16_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp53 = xor i32 %16, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp53_reg <= put_cursor__preheader20_lr_ph_split_us_tmp53;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp53_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp54 = icmp sgt i32 %tmp51, %tmp53*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp54 = ($signed(put_cursor__preheader20_lr_ph_split_us_tmp51) > $signed(put_cursor__preheader20_lr_ph_split_us_tmp53));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp54 = icmp sgt i32 %tmp51, %tmp53*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp54_reg <= put_cursor__preheader20_lr_ph_split_us_tmp54;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp54_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax55 = select i1 %tmp54, i32 %tmp51, i32 %tmp53*/
begin
put_cursor__preheader20_lr_ph_split_us_smax55 = (put_cursor__preheader20_lr_ph_split_us_tmp54 ? put_cursor__preheader20_lr_ph_split_us_tmp51 : put_cursor__preheader20_lr_ph_split_us_tmp53);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax55 = select i1 %tmp54, i32 %tmp51, i32 %tmp53*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax55_reg <= put_cursor__preheader20_lr_ph_split_us_smax55;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax55_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp56 = sub i32 %tmp50, %smax55*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp56 = (put_cursor__preheader20_lr_ph_split_us_tmp50 - put_cursor__preheader20_lr_ph_split_us_smax55);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp56 = sub i32 %tmp50, %smax55*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp56_reg <= put_cursor__preheader20_lr_ph_split_us_tmp56;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp56_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp57 = xor i32 %15, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp57 = (put_cursor_0_15_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp57 = xor i32 %15, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp57_reg <= put_cursor__preheader20_lr_ph_split_us_tmp57;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp57_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp58 = icmp sgt i32 %tmp57, -1*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp58 = ($signed(put_cursor__preheader20_lr_ph_split_us_tmp57) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp58 = icmp sgt i32 %tmp57, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp58_reg <= put_cursor__preheader20_lr_ph_split_us_tmp58;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp58_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax59 = select i1 %tmp58, i32 %tmp57, i32 -1*/
begin
put_cursor__preheader20_lr_ph_split_us_smax59 = (put_cursor__preheader20_lr_ph_split_us_tmp58 ? put_cursor__preheader20_lr_ph_split_us_tmp57 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax59 = select i1 %tmp58, i32 %tmp57, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax59_reg <= put_cursor__preheader20_lr_ph_split_us_smax59;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax59_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp60 = sub i32 %tmp56, %smax59*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp60 = (put_cursor__preheader20_lr_ph_split_us_tmp56_reg - put_cursor__preheader20_lr_ph_split_us_smax59_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp60 = sub i32 %tmp56, %smax59*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp60_reg <= put_cursor__preheader20_lr_ph_split_us_tmp60;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp60_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp63 = icmp sgt i32 %6, 0*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp63 = ($signed(put_cursor_0_6_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp63 = icmp sgt i32 %6, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp63_reg <= put_cursor__preheader20_lr_ph_split_us_tmp63;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp63_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax64 = select i1 %tmp63, i32 %6, i32 0*/
begin
put_cursor__preheader20_lr_ph_split_us_smax64 = (put_cursor__preheader20_lr_ph_split_us_tmp63 ? put_cursor_0_6_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax64 = select i1 %tmp63, i32 %6, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax64_reg <= put_cursor__preheader20_lr_ph_split_us_smax64;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax64_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader20_lr_ph_split_us_tmp65 = put_cursor__preheader20_lr_ph_split_us_tmp65_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp65 = mul i32 %27, %smax64*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp65_reg <= put_cursor__preheader20_lr_ph_split_us_tmp65;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp65_reg"); $finish; end
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp65 = mul i32 %27, %smax64*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp65_reg <= put_cursor__preheader20_lr_ph_split_us_tmp65;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp65_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp66 = icmp sgt i32 %15, 0*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp66 = ($signed(put_cursor_0_15_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp66 = icmp sgt i32 %15, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_tmp66_reg <= put_cursor__preheader20_lr_ph_split_us_tmp66;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp66_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax67 = select i1 %tmp66, i32 %15, i32 0*/
begin
put_cursor__preheader20_lr_ph_split_us_smax67 = (put_cursor__preheader20_lr_ph_split_us_tmp66 ? put_cursor_0_15_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %smax67 = select i1 %tmp66, i32 %15, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
put_cursor__preheader20_lr_ph_split_us_smax67_reg <= put_cursor__preheader20_lr_ph_split_us_smax67;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_smax67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_smax67_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader20_lr_ph_split_us_tmp68 = put_cursor__preheader20_lr_ph_split_us_tmp68_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp68 = mul i32 %smax67, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp68_reg <= put_cursor__preheader20_lr_ph_split_us_tmp68;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp68_reg"); $finish; end
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp68 = mul i32 %smax67, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp68_reg <= put_cursor__preheader20_lr_ph_split_us_tmp68;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp68_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp69 = add i32 %tmp65, %tmp68*/
begin
put_cursor__preheader20_lr_ph_split_us_tmp69 = (put_cursor__preheader20_lr_ph_split_us_tmp65 + put_cursor__preheader20_lr_ph_split_us_tmp68);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp69 = add i32 %tmp65, %tmp68*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_12))
begin
put_cursor__preheader20_lr_ph_split_us_tmp69_reg <= put_cursor__preheader20_lr_ph_split_us_tmp69;
if (reset == 1'b0 && ^(put_cursor__preheader20_lr_ph_split_us_tmp69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader20_lr_ph_split_us_tmp69_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
begin
put_cursor_35__pre = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_16))
begin
put_cursor_35__pre_reg <= put_cursor_35__pre;
if (reset == 1'b0 && ^(put_cursor_35__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_35__pre_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %35*/
/*   %36 = getelementptr inbounds i32* %msk.025.us, i32 %.pre*/
begin
put_cursor_35_36 = (put_cursor__lr_ph22_us_msk_025_us_reg + (4 * put_cursor_35__pre));
end
end
always @(posedge clk) begin
/* put_cursor: %35*/
/*   %36 = getelementptr inbounds i32* %msk.025.us, i32 %.pre*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_16))
begin
put_cursor_35_36_reg <= put_cursor_35_36;
if (reset == 1'b0 && ^(put_cursor_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_35_36_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %35*/
/*   %37 = getelementptr inbounds i32* %cd.026.us, i32 %.pre*/
begin
put_cursor_35_37 = (put_cursor__lr_ph22_us_cd_026_us_reg + (4 * put_cursor_35__pre));
end
end
always @(posedge clk) begin
/* put_cursor: %35*/
/*   %37 = getelementptr inbounds i32* %cd.026.us, i32 %.pre*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_16))
begin
put_cursor_35_37_reg <= put_cursor_35_37;
if (reset == 1'b0 && ^(put_cursor_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_35_37_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %35*/
/*   %38 = add nsw i32 %j.027.us, 1*/
begin
put_cursor_35_38 = (put_cursor__lr_ph22_us_j_027_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %35*/
/*   %38 = add nsw i32 %j.027.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
put_cursor_35_38_reg <= put_cursor_35_38;
if (reset == 1'b0 && ^(put_cursor_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_35_38_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %35*/
/*   %exitcond61 = icmp eq i32 %38, %tmp60*/
begin
put_cursor_35_exitcond61 = (put_cursor_35_38 == put_cursor__preheader20_lr_ph_split_us_tmp60_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %35*/
/*   %exitcond61 = icmp eq i32 %38, %tmp60*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
put_cursor_35_exitcond61_reg <= put_cursor_35_exitcond61;
if (reset == 1'b0 && ^(put_cursor_35_exitcond61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_35_exitcond61_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %i.021.us = phi i32 [ 0, %.lr.ph22.us ], [ %45, %39 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_39_22) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_39_exitcond_reg == 1'd0)))
begin
put_cursor_39_i_021_us = put_cursor_39_45_reg;
end
/* put_cursor: %39*/
/*   %i.021.us = phi i32 [ 0, %.lr.ph22.us ], [ %45, %39 ]*/
else /* if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24) & (memory_controller_waitrequest == 1'd0))) */
begin
put_cursor_39_i_021_us = 32'd0;
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %i.021.us = phi i32 [ 0, %.lr.ph22.us ], [ %45, %39 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_39_22) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_39_exitcond_reg == 1'd0)))
begin
put_cursor_39_i_021_us_reg <= put_cursor_39_i_021_us;
if (reset == 1'b0 && ^(put_cursor_39_i_021_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_i_021_us_reg"); $finish; end
end
/* put_cursor: %39*/
/*   %i.021.us = phi i32 [ 0, %.lr.ph22.us ], [ %45, %39 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor_39_i_021_us_reg <= put_cursor_39_i_021_us;
if (reset == 1'b0 && ^(put_cursor_39_i_021_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_i_021_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %tmp71 = add i32 %tmp70, %i.021.us*/
begin
put_cursor_39_tmp71 = (put_cursor__lr_ph22_us_tmp70_reg + put_cursor_39_i_021_us_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %tmp71 = add i32 %tmp70, %i.021.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
put_cursor_39_tmp71_reg <= put_cursor_39_tmp71;
if (reset == 1'b0 && ^(put_cursor_39_tmp71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_tmp71_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %scevgep49 = getelementptr i32* %dst, i32 %tmp71*/
begin
put_cursor_39_scevgep49 = (arg_dst + (4 * put_cursor_39_tmp71_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %scevgep49 = getelementptr i32* %dst, i32 %tmp71*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_18))
begin
put_cursor_39_scevgep49_reg <= put_cursor_39_scevgep49;
if (reset == 1'b0 && ^(put_cursor_39_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_scevgep49_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %scevgep = getelementptr i32* %msk.025.us, i32 %i.021.us*/
begin
put_cursor_39_scevgep = (put_cursor__lr_ph22_us_msk_025_us_reg + (4 * put_cursor_39_i_021_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %scevgep = getelementptr i32* %msk.025.us, i32 %i.021.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
put_cursor_39_scevgep_reg <= put_cursor_39_scevgep;
if (reset == 1'b0 && ^(put_cursor_39_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %scevgep38 = getelementptr i32* %cd.026.us, i32 %i.021.us*/
begin
put_cursor_39_scevgep38 = (put_cursor__lr_ph22_us_cd_026_us_reg + (4 * put_cursor_39_i_021_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %scevgep38 = getelementptr i32* %cd.026.us, i32 %i.021.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
put_cursor_39_scevgep38_reg <= put_cursor_39_scevgep38;
if (reset == 1'b0 && ^(put_cursor_39_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_scevgep38_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
begin
put_cursor_39_40 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_20))
begin
put_cursor_39_40_reg <= put_cursor_39_40;
if (reset == 1'b0 && ^(put_cursor_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_40_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
begin
put_cursor_39_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_19))
begin
put_cursor_39_41_reg <= put_cursor_39_41;
if (reset == 1'b0 && ^(put_cursor_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_41_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %42 = and i32 %41, %40*/
begin
put_cursor_39_42 = (put_cursor_39_41_reg & put_cursor_39_40);
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %42 = and i32 %41, %40*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_20))
begin
put_cursor_39_42_reg <= put_cursor_39_42;
if (reset == 1'b0 && ^(put_cursor_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_42_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
begin
put_cursor_39_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
put_cursor_39_43_reg <= put_cursor_39_43;
if (reset == 1'b0 && ^(put_cursor_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_43_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %44 = xor i32 %42, %43*/
begin
put_cursor_39_44 = (put_cursor_39_42_reg ^ put_cursor_39_43);
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %44 = xor i32 %42, %43*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
put_cursor_39_44_reg <= put_cursor_39_44;
if (reset == 1'b0 && ^(put_cursor_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_44_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %45 = add nsw i32 %i.021.us, 1*/
begin
put_cursor_39_45 = (put_cursor_39_i_021_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %45 = add nsw i32 %i.021.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
put_cursor_39_45_reg <= put_cursor_39_45;
if (reset == 1'b0 && ^(put_cursor_39_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_45_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %39*/
/*   %exitcond = icmp eq i32 %45, %tmp37*/
begin
put_cursor_39_exitcond = (put_cursor_39_45 == put_cursor__preheader20_lr_ph_split_us_tmp37_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %39*/
/*   %exitcond = icmp eq i32 %45, %tmp37*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
put_cursor_39_exitcond_reg <= put_cursor_39_exitcond;
if (reset == 1'b0 && ^(put_cursor_39_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_39_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph22.us*/
/*   %j.027.us = phi i32 [ 0, %.preheader20.lr.ph.split.us ], [ %38, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_j_027_us = 32'd0;
end
/* put_cursor: %.lr.ph22.us*/
/*   %j.027.us = phi i32 [ 0, %.preheader20.lr.ph.split.us ], [ %38, %35 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0))) */
begin
put_cursor__lr_ph22_us_j_027_us = put_cursor_35_38_reg;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %j.027.us = phi i32 [ 0, %.preheader20.lr.ph.split.us ], [ %38, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_j_027_us_reg <= put_cursor__lr_ph22_us_j_027_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_j_027_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_j_027_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph22.us*/
/*   %j.027.us = phi i32 [ 0, %.preheader20.lr.ph.split.us ], [ %38, %35 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0)))
begin
put_cursor__lr_ph22_us_j_027_us_reg <= put_cursor__lr_ph22_us_j_027_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_j_027_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_j_027_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph22.us*/
/*   %cd.026.us = phi i32* [ %34, %.preheader20.lr.ph.split.us ], [ %37, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_cd_026_us = put_cursor__preheader20_lr_ph_split_us_34;
end
/* put_cursor: %.lr.ph22.us*/
/*   %cd.026.us = phi i32* [ %34, %.preheader20.lr.ph.split.us ], [ %37, %35 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0))) */
begin
put_cursor__lr_ph22_us_cd_026_us = put_cursor_35_37;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %cd.026.us = phi i32* [ %34, %.preheader20.lr.ph.split.us ], [ %37, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_cd_026_us_reg <= put_cursor__lr_ph22_us_cd_026_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_cd_026_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_cd_026_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph22.us*/
/*   %cd.026.us = phi i32* [ %34, %.preheader20.lr.ph.split.us ], [ %37, %35 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0)))
begin
put_cursor__lr_ph22_us_cd_026_us_reg <= put_cursor__lr_ph22_us_cd_026_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_cd_026_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_cd_026_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph22.us*/
/*   %msk.025.us = phi i32* [ %33, %.preheader20.lr.ph.split.us ], [ %36, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_msk_025_us = put_cursor__preheader20_lr_ph_split_us_33;
end
/* put_cursor: %.lr.ph22.us*/
/*   %msk.025.us = phi i32* [ %33, %.preheader20.lr.ph.split.us ], [ %36, %35 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0))) */
begin
put_cursor__lr_ph22_us_msk_025_us = put_cursor_35_36;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %msk.025.us = phi i32* [ %33, %.preheader20.lr.ph.split.us ], [ %36, %35 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_13) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph22_us_msk_025_us_reg <= put_cursor__lr_ph22_us_msk_025_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_msk_025_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_msk_025_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph22.us*/
/*   %msk.025.us = phi i32* [ %33, %.preheader20.lr.ph.split.us ], [ %36, %35 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_35_16) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_35_exitcond61_reg == 1'd0)))
begin
put_cursor__lr_ph22_us_msk_025_us_reg <= put_cursor__lr_ph22_us_msk_025_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_msk_025_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_msk_025_us_reg"); $finish; end
end
end
always @(*) begin
put_cursor__lr_ph22_us_tmp62 = put_cursor__lr_ph22_us_tmp62_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %tmp62 = mul i32 %j.027.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24))
begin
put_cursor__lr_ph22_us_tmp62_reg <= put_cursor__lr_ph22_us_tmp62;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_tmp62_reg"); $finish; end
end
/* put_cursor: %.lr.ph22.us*/
/*   %tmp62 = mul i32 %j.027.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24))
begin
put_cursor__lr_ph22_us_tmp62_reg <= put_cursor__lr_ph22_us_tmp62;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_tmp62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_tmp62_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph22.us*/
/*   %tmp70 = add i32 %tmp69, %tmp62*/
begin
put_cursor__lr_ph22_us_tmp70 = (put_cursor__preheader20_lr_ph_split_us_tmp69_reg + put_cursor__lr_ph22_us_tmp62);
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %tmp70 = add i32 %tmp69, %tmp62*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph22_us_24))
begin
put_cursor__lr_ph22_us_tmp70_reg <= put_cursor__lr_ph22_us_tmp70;
if (reset == 1'b0 && ^(put_cursor__lr_ph22_us_tmp70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph22_us_tmp70_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %46*/
/*   %47 = icmp sgt i32 %.h.0, 0*/
begin
put_cursor_46_47 = ($signed(put_cursor_0__h_0_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %46*/
/*   %47 = icmp sgt i32 %.h.0, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_46_25))
begin
put_cursor_46_47_reg <= put_cursor_46_47;
if (reset == 1'b0 && ^(put_cursor_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_46_47_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %46*/
/*   %48 = icmp sgt i32 %.., 0*/
begin
put_cursor_46_48 = ($signed(put_cursor_0____reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %46*/
/*   %48 = icmp sgt i32 %.., 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_46_25))
begin
put_cursor_46_48_reg <= put_cursor_46_48;
if (reset == 1'b0 && ^(put_cursor_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_46_48_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %46*/
/*   %or.cond208 = and i1 %47, %48*/
begin
put_cursor_46_or_cond208 = (put_cursor_46_47 & put_cursor_46_48);
end
end
always @(posedge clk) begin
/* put_cursor: %46*/
/*   %or.cond208 = and i1 %47, %48*/
if ((cur_state == LEGUP_F_put_cursor_BB_46_25))
begin
put_cursor_46_or_cond208_reg <= put_cursor_46_or_cond208;
if (reset == 1'b0 && ^(put_cursor_46_or_cond208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_46_or_cond208_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %49 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
begin
put_cursor__preheader11_lr_ph_split_us_49 = (arg_c + 32);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %49 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_49_reg <= put_cursor__preheader11_lr_ph_split_us_49;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_49_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %50 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
begin
put_cursor__preheader11_lr_ph_split_us_50 = (arg_c + 28);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %50 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_50_reg <= put_cursor__preheader11_lr_ph_split_us_50;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_50_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
begin
put_cursor__preheader11_lr_ph_split_us_51 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28))
begin
put_cursor__preheader11_lr_ph_split_us_51_reg <= put_cursor__preheader11_lr_ph_split_us_51;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_51_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
begin
put_cursor__preheader11_lr_ph_split_us_52 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28))
begin
put_cursor__preheader11_lr_ph_split_us_52_reg <= put_cursor__preheader11_lr_ph_split_us_52;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_52_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp73 = sub i32 -2, %6*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp73 = (-32'd2 - put_cursor_0_6_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp73 = sub i32 -2, %6*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp73_reg <= put_cursor__preheader11_lr_ph_split_us_tmp73;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp73_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp74 = xor i32 %4, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp74 = (put_cursor_0_4_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp74 = xor i32 %4, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp74_reg <= put_cursor__preheader11_lr_ph_split_us_tmp74;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp74_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp76 = xor i32 %7, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp76 = (put_cursor_0_7_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp76 = xor i32 %7, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp76_reg <= put_cursor__preheader11_lr_ph_split_us_tmp76;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp76_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp77 = icmp sgt i32 %tmp74, %tmp76*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp77 = ($signed(put_cursor__preheader11_lr_ph_split_us_tmp74) > $signed(put_cursor__preheader11_lr_ph_split_us_tmp76));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp77 = icmp sgt i32 %tmp74, %tmp76*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp77_reg <= put_cursor__preheader11_lr_ph_split_us_tmp77;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp77_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax78 = select i1 %tmp77, i32 %tmp74, i32 %tmp76*/
begin
put_cursor__preheader11_lr_ph_split_us_smax78 = (put_cursor__preheader11_lr_ph_split_us_tmp77 ? put_cursor__preheader11_lr_ph_split_us_tmp74 : put_cursor__preheader11_lr_ph_split_us_tmp76);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax78 = select i1 %tmp77, i32 %tmp74, i32 %tmp76*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax78_reg <= put_cursor__preheader11_lr_ph_split_us_smax78;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax78_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp79 = sub i32 %tmp73, %smax78*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp79 = (put_cursor__preheader11_lr_ph_split_us_tmp73 - put_cursor__preheader11_lr_ph_split_us_smax78);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp79 = sub i32 %tmp73, %smax78*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp79_reg <= put_cursor__preheader11_lr_ph_split_us_tmp79;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp79_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp80 = xor i32 %6, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp80 = (put_cursor_0_6_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp80 = xor i32 %6, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp80_reg <= put_cursor__preheader11_lr_ph_split_us_tmp80;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp80_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp81 = icmp sgt i32 %tmp80, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp81 = ($signed(put_cursor__preheader11_lr_ph_split_us_tmp80) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp81 = icmp sgt i32 %tmp80, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp81_reg <= put_cursor__preheader11_lr_ph_split_us_tmp81;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp81_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax82 = select i1 %tmp81, i32 %tmp80, i32 -1*/
begin
put_cursor__preheader11_lr_ph_split_us_smax82 = (put_cursor__preheader11_lr_ph_split_us_tmp81 ? put_cursor__preheader11_lr_ph_split_us_tmp80 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax82 = select i1 %tmp81, i32 %tmp80, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax82_reg <= put_cursor__preheader11_lr_ph_split_us_smax82;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax82_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp83 = sub i32 %tmp79, %smax82*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp83 = (put_cursor__preheader11_lr_ph_split_us_tmp79_reg - put_cursor__preheader11_lr_ph_split_us_smax82_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp83 = sub i32 %tmp79, %smax82*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp83_reg <= put_cursor__preheader11_lr_ph_split_us_tmp83;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp83_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp98 = sub i32 -2, %15*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp98 = (-32'd2 - put_cursor_0_15_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp98 = sub i32 -2, %15*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp98_reg <= put_cursor__preheader11_lr_ph_split_us_tmp98;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp98_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp99 = xor i32 %13, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp99 = (put_cursor_0_13_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp99 = xor i32 %13, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp99_reg <= put_cursor__preheader11_lr_ph_split_us_tmp99;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp99_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp101 = xor i32 %16, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp101 = (put_cursor_0_16_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp101 = xor i32 %16, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp101_reg <= put_cursor__preheader11_lr_ph_split_us_tmp101;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp101_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp102 = icmp sgt i32 %tmp99, %tmp101*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp102 = ($signed(put_cursor__preheader11_lr_ph_split_us_tmp99) > $signed(put_cursor__preheader11_lr_ph_split_us_tmp101));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp102 = icmp sgt i32 %tmp99, %tmp101*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp102_reg <= put_cursor__preheader11_lr_ph_split_us_tmp102;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp102_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax103 = select i1 %tmp102, i32 %tmp99, i32 %tmp101*/
begin
put_cursor__preheader11_lr_ph_split_us_smax103 = (put_cursor__preheader11_lr_ph_split_us_tmp102 ? put_cursor__preheader11_lr_ph_split_us_tmp99 : put_cursor__preheader11_lr_ph_split_us_tmp101);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax103 = select i1 %tmp102, i32 %tmp99, i32 %tmp101*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax103_reg <= put_cursor__preheader11_lr_ph_split_us_smax103;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax103_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp104 = sub i32 %tmp98, %smax103*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp104 = (put_cursor__preheader11_lr_ph_split_us_tmp98 - put_cursor__preheader11_lr_ph_split_us_smax103);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp104 = sub i32 %tmp98, %smax103*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp104_reg <= put_cursor__preheader11_lr_ph_split_us_tmp104;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp104_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp105 = xor i32 %15, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp105 = (put_cursor_0_15_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp105 = xor i32 %15, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp105_reg <= put_cursor__preheader11_lr_ph_split_us_tmp105;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp105_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp106 = icmp sgt i32 %tmp105, -1*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp106 = ($signed(put_cursor__preheader11_lr_ph_split_us_tmp105) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp106 = icmp sgt i32 %tmp105, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp106_reg <= put_cursor__preheader11_lr_ph_split_us_tmp106;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp106_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax107 = select i1 %tmp106, i32 %tmp105, i32 -1*/
begin
put_cursor__preheader11_lr_ph_split_us_smax107 = (put_cursor__preheader11_lr_ph_split_us_tmp106 ? put_cursor__preheader11_lr_ph_split_us_tmp105 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax107 = select i1 %tmp106, i32 %tmp105, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax107_reg <= put_cursor__preheader11_lr_ph_split_us_smax107;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax107_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp108 = sub i32 %tmp104, %smax107*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp108 = (put_cursor__preheader11_lr_ph_split_us_tmp104_reg - put_cursor__preheader11_lr_ph_split_us_smax107_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp108 = sub i32 %tmp104, %smax107*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp108_reg <= put_cursor__preheader11_lr_ph_split_us_tmp108;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp108_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp111 = icmp sgt i32 %6, 0*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp111 = ($signed(put_cursor_0_6_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp111 = icmp sgt i32 %6, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp111_reg <= put_cursor__preheader11_lr_ph_split_us_tmp111;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp111_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax112 = select i1 %tmp111, i32 %6, i32 0*/
begin
put_cursor__preheader11_lr_ph_split_us_smax112 = (put_cursor__preheader11_lr_ph_split_us_tmp111 ? put_cursor_0_6_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax112 = select i1 %tmp111, i32 %6, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax112_reg <= put_cursor__preheader11_lr_ph_split_us_smax112;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax112_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader11_lr_ph_split_us_tmp113 = put_cursor__preheader11_lr_ph_split_us_tmp113_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp113 = mul i32 %27, %smax112*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp113_reg <= put_cursor__preheader11_lr_ph_split_us_tmp113;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp113_reg"); $finish; end
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp113 = mul i32 %27, %smax112*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp113_reg <= put_cursor__preheader11_lr_ph_split_us_tmp113;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp113_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp114 = icmp sgt i32 %15, 0*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp114 = ($signed(put_cursor_0_15_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp114 = icmp sgt i32 %15, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_tmp114_reg <= put_cursor__preheader11_lr_ph_split_us_tmp114;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp114_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax115 = select i1 %tmp114, i32 %15, i32 0*/
begin
put_cursor__preheader11_lr_ph_split_us_smax115 = (put_cursor__preheader11_lr_ph_split_us_tmp114 ? put_cursor_0_15_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %smax115 = select i1 %tmp114, i32 %15, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
put_cursor__preheader11_lr_ph_split_us_smax115_reg <= put_cursor__preheader11_lr_ph_split_us_smax115;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_smax115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_smax115_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader11_lr_ph_split_us_tmp116 = put_cursor__preheader11_lr_ph_split_us_tmp116_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp116 = mul i32 %smax115, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp116_reg <= put_cursor__preheader11_lr_ph_split_us_tmp116;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp116_reg"); $finish; end
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp116 = mul i32 %smax115, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp116_reg <= put_cursor__preheader11_lr_ph_split_us_tmp116;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp116_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp117 = add i32 %tmp113, %tmp116*/
begin
put_cursor__preheader11_lr_ph_split_us_tmp117 = (put_cursor__preheader11_lr_ph_split_us_tmp113 + put_cursor__preheader11_lr_ph_split_us_tmp116);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp117 = add i32 %tmp113, %tmp116*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_27))
begin
put_cursor__preheader11_lr_ph_split_us_tmp117_reg <= put_cursor__preheader11_lr_ph_split_us_tmp117;
if (reset == 1'b0 && ^(put_cursor__preheader11_lr_ph_split_us_tmp117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader11_lr_ph_split_us_tmp117_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
begin
put_cursor_53__pre205 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_31))
begin
put_cursor_53__pre205_reg <= put_cursor_53__pre205;
if (reset == 1'b0 && ^(put_cursor_53__pre205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_53__pre205_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %53*/
/*   %54 = getelementptr inbounds i32* %msk2.018.us, i32 %.pre205*/
begin
put_cursor_53_54 = (put_cursor__lr_ph13_us_msk2_018_us_reg + (4 * put_cursor_53__pre205));
end
end
always @(posedge clk) begin
/* put_cursor: %53*/
/*   %54 = getelementptr inbounds i32* %msk2.018.us, i32 %.pre205*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_31))
begin
put_cursor_53_54_reg <= put_cursor_53_54;
if (reset == 1'b0 && ^(put_cursor_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_53_54_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %53*/
/*   %55 = getelementptr inbounds i32* %cd1.017.us, i32 %.pre205*/
begin
put_cursor_53_55 = (put_cursor__lr_ph13_us_cd1_017_us_reg + (4 * put_cursor_53__pre205));
end
end
always @(posedge clk) begin
/* put_cursor: %53*/
/*   %55 = getelementptr inbounds i32* %cd1.017.us, i32 %.pre205*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_31))
begin
put_cursor_53_55_reg <= put_cursor_53_55;
if (reset == 1'b0 && ^(put_cursor_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_53_55_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %53*/
/*   %56 = add nsw i32 %j.116.us, 1*/
begin
put_cursor_53_56 = (put_cursor__lr_ph13_us_j_116_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %53*/
/*   %56 = add nsw i32 %j.116.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
put_cursor_53_56_reg <= put_cursor_53_56;
if (reset == 1'b0 && ^(put_cursor_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_53_56_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %53*/
/*   %exitcond109 = icmp eq i32 %56, %tmp108*/
begin
put_cursor_53_exitcond109 = (put_cursor_53_56 == put_cursor__preheader11_lr_ph_split_us_tmp108_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %53*/
/*   %exitcond109 = icmp eq i32 %56, %tmp108*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
put_cursor_53_exitcond109_reg <= put_cursor_53_exitcond109;
if (reset == 1'b0 && ^(put_cursor_53_exitcond109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_53_exitcond109_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %i.112.us = phi i32 [ 0, %.lr.ph13.us ], [ %63, %57 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_57_37) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_57_exitcond84_reg == 1'd0)))
begin
put_cursor_57_i_112_us = put_cursor_57_63_reg;
end
/* put_cursor: %57*/
/*   %i.112.us = phi i32 [ 0, %.lr.ph13.us ], [ %63, %57 ]*/
else /* if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39) & (memory_controller_waitrequest == 1'd0))) */
begin
put_cursor_57_i_112_us = 32'd0;
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %i.112.us = phi i32 [ 0, %.lr.ph13.us ], [ %63, %57 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_57_37) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_57_exitcond84_reg == 1'd0)))
begin
put_cursor_57_i_112_us_reg <= put_cursor_57_i_112_us;
if (reset == 1'b0 && ^(put_cursor_57_i_112_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_i_112_us_reg"); $finish; end
end
/* put_cursor: %57*/
/*   %i.112.us = phi i32 [ 0, %.lr.ph13.us ], [ %63, %57 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor_57_i_112_us_reg <= put_cursor_57_i_112_us;
if (reset == 1'b0 && ^(put_cursor_57_i_112_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_i_112_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %tmp119 = add i32 %tmp118, %i.112.us*/
begin
put_cursor_57_tmp119 = (put_cursor__lr_ph13_us_tmp118_reg + put_cursor_57_i_112_us_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %tmp119 = add i32 %tmp118, %i.112.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
put_cursor_57_tmp119_reg <= put_cursor_57_tmp119;
if (reset == 1'b0 && ^(put_cursor_57_tmp119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_tmp119_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %scevgep97 = getelementptr i32* %dst, i32 %tmp119*/
begin
put_cursor_57_scevgep97 = (arg_dst + (4 * put_cursor_57_tmp119_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %scevgep97 = getelementptr i32* %dst, i32 %tmp119*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_33))
begin
put_cursor_57_scevgep97_reg <= put_cursor_57_scevgep97;
if (reset == 1'b0 && ^(put_cursor_57_scevgep97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_scevgep97_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %scevgep85 = getelementptr i32* %msk2.018.us, i32 %i.112.us*/
begin
put_cursor_57_scevgep85 = (put_cursor__lr_ph13_us_msk2_018_us_reg + (4 * put_cursor_57_i_112_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %scevgep85 = getelementptr i32* %msk2.018.us, i32 %i.112.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
put_cursor_57_scevgep85_reg <= put_cursor_57_scevgep85;
if (reset == 1'b0 && ^(put_cursor_57_scevgep85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_scevgep85_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %scevgep86 = getelementptr i32* %cd1.017.us, i32 %i.112.us*/
begin
put_cursor_57_scevgep86 = (put_cursor__lr_ph13_us_cd1_017_us_reg + (4 * put_cursor_57_i_112_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %scevgep86 = getelementptr i32* %cd1.017.us, i32 %i.112.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
put_cursor_57_scevgep86_reg <= put_cursor_57_scevgep86;
if (reset == 1'b0 && ^(put_cursor_57_scevgep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_scevgep86_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
begin
put_cursor_57_58 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_35))
begin
put_cursor_57_58_reg <= put_cursor_57_58;
if (reset == 1'b0 && ^(put_cursor_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_58_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
begin
put_cursor_57_59 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_34))
begin
put_cursor_57_59_reg <= put_cursor_57_59;
if (reset == 1'b0 && ^(put_cursor_57_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_59_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %60 = and i32 %59, %58*/
begin
put_cursor_57_60 = (put_cursor_57_59_reg & put_cursor_57_58);
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %60 = and i32 %59, %58*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_35))
begin
put_cursor_57_60_reg <= put_cursor_57_60;
if (reset == 1'b0 && ^(put_cursor_57_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_60_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
begin
put_cursor_57_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
put_cursor_57_61_reg <= put_cursor_57_61;
if (reset == 1'b0 && ^(put_cursor_57_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_61_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %62 = xor i32 %60, %61*/
begin
put_cursor_57_62 = (put_cursor_57_60_reg ^ put_cursor_57_61);
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %62 = xor i32 %60, %61*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
put_cursor_57_62_reg <= put_cursor_57_62;
if (reset == 1'b0 && ^(put_cursor_57_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_62_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %63 = add nsw i32 %i.112.us, 1*/
begin
put_cursor_57_63 = (put_cursor_57_i_112_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %63 = add nsw i32 %i.112.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
put_cursor_57_63_reg <= put_cursor_57_63;
if (reset == 1'b0 && ^(put_cursor_57_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_63_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %57*/
/*   %exitcond84 = icmp eq i32 %63, %tmp83*/
begin
put_cursor_57_exitcond84 = (put_cursor_57_63 == put_cursor__preheader11_lr_ph_split_us_tmp83_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %57*/
/*   %exitcond84 = icmp eq i32 %63, %tmp83*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
put_cursor_57_exitcond84_reg <= put_cursor_57_exitcond84;
if (reset == 1'b0 && ^(put_cursor_57_exitcond84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_57_exitcond84_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph13.us*/
/*   %msk2.018.us = phi i32* [ %51, %.preheader11.lr.ph.split.us ], [ %54, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_msk2_018_us = put_cursor__preheader11_lr_ph_split_us_51;
end
/* put_cursor: %.lr.ph13.us*/
/*   %msk2.018.us = phi i32* [ %51, %.preheader11.lr.ph.split.us ], [ %54, %53 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0))) */
begin
put_cursor__lr_ph13_us_msk2_018_us = put_cursor_53_54;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %msk2.018.us = phi i32* [ %51, %.preheader11.lr.ph.split.us ], [ %54, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_msk2_018_us_reg <= put_cursor__lr_ph13_us_msk2_018_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_msk2_018_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_msk2_018_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph13.us*/
/*   %msk2.018.us = phi i32* [ %51, %.preheader11.lr.ph.split.us ], [ %54, %53 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0)))
begin
put_cursor__lr_ph13_us_msk2_018_us_reg <= put_cursor__lr_ph13_us_msk2_018_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_msk2_018_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_msk2_018_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph13.us*/
/*   %cd1.017.us = phi i32* [ %52, %.preheader11.lr.ph.split.us ], [ %55, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_cd1_017_us = put_cursor__preheader11_lr_ph_split_us_52;
end
/* put_cursor: %.lr.ph13.us*/
/*   %cd1.017.us = phi i32* [ %52, %.preheader11.lr.ph.split.us ], [ %55, %53 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0))) */
begin
put_cursor__lr_ph13_us_cd1_017_us = put_cursor_53_55;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %cd1.017.us = phi i32* [ %52, %.preheader11.lr.ph.split.us ], [ %55, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_cd1_017_us_reg <= put_cursor__lr_ph13_us_cd1_017_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_cd1_017_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_cd1_017_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph13.us*/
/*   %cd1.017.us = phi i32* [ %52, %.preheader11.lr.ph.split.us ], [ %55, %53 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0)))
begin
put_cursor__lr_ph13_us_cd1_017_us_reg <= put_cursor__lr_ph13_us_cd1_017_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_cd1_017_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_cd1_017_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph13.us*/
/*   %j.116.us = phi i32 [ 0, %.preheader11.lr.ph.split.us ], [ %56, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_j_116_us = 32'd0;
end
/* put_cursor: %.lr.ph13.us*/
/*   %j.116.us = phi i32 [ 0, %.preheader11.lr.ph.split.us ], [ %56, %53 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0))) */
begin
put_cursor__lr_ph13_us_j_116_us = put_cursor_53_56_reg;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %j.116.us = phi i32 [ 0, %.preheader11.lr.ph.split.us ], [ %56, %53 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_28) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph13_us_j_116_us_reg <= put_cursor__lr_ph13_us_j_116_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_j_116_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_j_116_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph13.us*/
/*   %j.116.us = phi i32 [ 0, %.preheader11.lr.ph.split.us ], [ %56, %53 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_53_31) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_53_exitcond109_reg == 1'd0)))
begin
put_cursor__lr_ph13_us_j_116_us_reg <= put_cursor__lr_ph13_us_j_116_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_j_116_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_j_116_us_reg"); $finish; end
end
end
always @(*) begin
put_cursor__lr_ph13_us_tmp110 = put_cursor__lr_ph13_us_tmp110_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %tmp110 = mul i32 %j.116.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39))
begin
put_cursor__lr_ph13_us_tmp110_reg <= put_cursor__lr_ph13_us_tmp110;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_tmp110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_tmp110_reg"); $finish; end
end
/* put_cursor: %.lr.ph13.us*/
/*   %tmp110 = mul i32 %j.116.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39))
begin
put_cursor__lr_ph13_us_tmp110_reg <= put_cursor__lr_ph13_us_tmp110;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_tmp110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_tmp110_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph13.us*/
/*   %tmp118 = add i32 %tmp117, %tmp110*/
begin
put_cursor__lr_ph13_us_tmp118 = (put_cursor__preheader11_lr_ph_split_us_tmp117_reg + put_cursor__lr_ph13_us_tmp110);
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %tmp118 = add i32 %tmp117, %tmp110*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph13_us_39))
begin
put_cursor__lr_ph13_us_tmp118_reg <= put_cursor__lr_ph13_us_tmp118;
if (reset == 1'b0 && ^(put_cursor__lr_ph13_us_tmp118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph13_us_tmp118_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %64*/
/*   %65 = icmp sgt i32 %.h.0, 0*/
begin
put_cursor_64_65 = ($signed(put_cursor_0__h_0_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %64*/
/*   %65 = icmp sgt i32 %.h.0, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_64_40))
begin
put_cursor_64_65_reg <= put_cursor_64_65;
if (reset == 1'b0 && ^(put_cursor_64_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_64_65_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %64*/
/*   %66 = icmp sgt i32 %.., 0*/
begin
put_cursor_64_66 = ($signed(put_cursor_0____reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %64*/
/*   %66 = icmp sgt i32 %.., 0*/
if ((cur_state == LEGUP_F_put_cursor_BB_64_40))
begin
put_cursor_64_66_reg <= put_cursor_64_66;
if (reset == 1'b0 && ^(put_cursor_64_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_64_66_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %64*/
/*   %or.cond209 = and i1 %65, %66*/
begin
put_cursor_64_or_cond209 = (put_cursor_64_65 & put_cursor_64_66);
end
end
always @(posedge clk) begin
/* put_cursor: %64*/
/*   %or.cond209 = and i1 %65, %66*/
if ((cur_state == LEGUP_F_put_cursor_BB_64_40))
begin
put_cursor_64_or_cond209_reg <= put_cursor_64_or_cond209;
if (reset == 1'b0 && ^(put_cursor_64_or_cond209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_64_or_cond209_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %67 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
begin
put_cursor__preheader_lr_ph_split_us_67 = (arg_c + 32);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %67 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 8*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_67_reg <= put_cursor__preheader_lr_ph_split_us_67;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_67_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %68 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
begin
put_cursor__preheader_lr_ph_split_us_68 = (arg_c + 28);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %68 = getelementptr inbounds %struct.TYPE_3__* %c, i32 0, i32 7*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_68_reg <= put_cursor__preheader_lr_ph_split_us_68;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_68_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
begin
put_cursor__preheader_lr_ph_split_us_69 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43))
begin
put_cursor__preheader_lr_ph_split_us_69_reg <= put_cursor__preheader_lr_ph_split_us_69;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_69_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
begin
put_cursor__preheader_lr_ph_split_us_70 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43))
begin
put_cursor__preheader_lr_ph_split_us_70_reg <= put_cursor__preheader_lr_ph_split_us_70;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_70_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp121 = sub i32 -2, %6*/
begin
put_cursor__preheader_lr_ph_split_us_tmp121 = (-32'd2 - put_cursor_0_6_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp121 = sub i32 -2, %6*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp121_reg <= put_cursor__preheader_lr_ph_split_us_tmp121;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp121_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp122 = xor i32 %4, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp122 = (put_cursor_0_4_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp122 = xor i32 %4, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp122_reg <= put_cursor__preheader_lr_ph_split_us_tmp122;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp122_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp124 = xor i32 %7, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp124 = (put_cursor_0_7_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp124 = xor i32 %7, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp124_reg <= put_cursor__preheader_lr_ph_split_us_tmp124;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp124_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp125 = icmp sgt i32 %tmp122, %tmp124*/
begin
put_cursor__preheader_lr_ph_split_us_tmp125 = ($signed(put_cursor__preheader_lr_ph_split_us_tmp122) > $signed(put_cursor__preheader_lr_ph_split_us_tmp124));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp125 = icmp sgt i32 %tmp122, %tmp124*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp125_reg <= put_cursor__preheader_lr_ph_split_us_tmp125;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp125_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax126 = select i1 %tmp125, i32 %tmp122, i32 %tmp124*/
begin
put_cursor__preheader_lr_ph_split_us_smax126 = (put_cursor__preheader_lr_ph_split_us_tmp125 ? put_cursor__preheader_lr_ph_split_us_tmp122 : put_cursor__preheader_lr_ph_split_us_tmp124);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax126 = select i1 %tmp125, i32 %tmp122, i32 %tmp124*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax126_reg <= put_cursor__preheader_lr_ph_split_us_smax126;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax126_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp127 = sub i32 %tmp121, %smax126*/
begin
put_cursor__preheader_lr_ph_split_us_tmp127 = (put_cursor__preheader_lr_ph_split_us_tmp121 - put_cursor__preheader_lr_ph_split_us_smax126);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp127 = sub i32 %tmp121, %smax126*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp127_reg <= put_cursor__preheader_lr_ph_split_us_tmp127;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp127_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp128 = xor i32 %6, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp128 = (put_cursor_0_6_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp128 = xor i32 %6, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp128_reg <= put_cursor__preheader_lr_ph_split_us_tmp128;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp128_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp129 = icmp sgt i32 %tmp128, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp129 = ($signed(put_cursor__preheader_lr_ph_split_us_tmp128) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp129 = icmp sgt i32 %tmp128, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp129_reg <= put_cursor__preheader_lr_ph_split_us_tmp129;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp129_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax130 = select i1 %tmp129, i32 %tmp128, i32 -1*/
begin
put_cursor__preheader_lr_ph_split_us_smax130 = (put_cursor__preheader_lr_ph_split_us_tmp129 ? put_cursor__preheader_lr_ph_split_us_tmp128 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax130 = select i1 %tmp129, i32 %tmp128, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax130_reg <= put_cursor__preheader_lr_ph_split_us_smax130;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax130_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp131 = sub i32 %tmp127, %smax130*/
begin
put_cursor__preheader_lr_ph_split_us_tmp131 = (put_cursor__preheader_lr_ph_split_us_tmp127_reg - put_cursor__preheader_lr_ph_split_us_smax130_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp131 = sub i32 %tmp127, %smax130*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp131_reg <= put_cursor__preheader_lr_ph_split_us_tmp131;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp131_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp146 = sub i32 -2, %15*/
begin
put_cursor__preheader_lr_ph_split_us_tmp146 = (-32'd2 - put_cursor_0_15_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp146 = sub i32 -2, %15*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp146_reg <= put_cursor__preheader_lr_ph_split_us_tmp146;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp146_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp147 = xor i32 %13, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp147 = (put_cursor_0_13_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp147 = xor i32 %13, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp147_reg <= put_cursor__preheader_lr_ph_split_us_tmp147;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp147_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp149 = xor i32 %16, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp149 = (put_cursor_0_16_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp149 = xor i32 %16, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp149_reg <= put_cursor__preheader_lr_ph_split_us_tmp149;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp149_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp150 = icmp sgt i32 %tmp147, %tmp149*/
begin
put_cursor__preheader_lr_ph_split_us_tmp150 = ($signed(put_cursor__preheader_lr_ph_split_us_tmp147) > $signed(put_cursor__preheader_lr_ph_split_us_tmp149));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp150 = icmp sgt i32 %tmp147, %tmp149*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp150_reg <= put_cursor__preheader_lr_ph_split_us_tmp150;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp150_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax151 = select i1 %tmp150, i32 %tmp147, i32 %tmp149*/
begin
put_cursor__preheader_lr_ph_split_us_smax151 = (put_cursor__preheader_lr_ph_split_us_tmp150 ? put_cursor__preheader_lr_ph_split_us_tmp147 : put_cursor__preheader_lr_ph_split_us_tmp149);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax151 = select i1 %tmp150, i32 %tmp147, i32 %tmp149*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax151_reg <= put_cursor__preheader_lr_ph_split_us_smax151;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax151_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp152 = sub i32 %tmp146, %smax151*/
begin
put_cursor__preheader_lr_ph_split_us_tmp152 = (put_cursor__preheader_lr_ph_split_us_tmp146 - put_cursor__preheader_lr_ph_split_us_smax151);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp152 = sub i32 %tmp146, %smax151*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp152_reg <= put_cursor__preheader_lr_ph_split_us_tmp152;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp152_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp153 = xor i32 %15, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp153 = (put_cursor_0_15_reg ^ -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp153 = xor i32 %15, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp153_reg <= put_cursor__preheader_lr_ph_split_us_tmp153;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp153_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp154 = icmp sgt i32 %tmp153, -1*/
begin
put_cursor__preheader_lr_ph_split_us_tmp154 = ($signed(put_cursor__preheader_lr_ph_split_us_tmp153) > $signed(-32'd1));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp154 = icmp sgt i32 %tmp153, -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp154_reg <= put_cursor__preheader_lr_ph_split_us_tmp154;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp154_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax155 = select i1 %tmp154, i32 %tmp153, i32 -1*/
begin
put_cursor__preheader_lr_ph_split_us_smax155 = (put_cursor__preheader_lr_ph_split_us_tmp154 ? put_cursor__preheader_lr_ph_split_us_tmp153 : -32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax155 = select i1 %tmp154, i32 %tmp153, i32 -1*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax155_reg <= put_cursor__preheader_lr_ph_split_us_smax155;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax155_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp156 = sub i32 %tmp152, %smax155*/
begin
put_cursor__preheader_lr_ph_split_us_tmp156 = (put_cursor__preheader_lr_ph_split_us_tmp152_reg - put_cursor__preheader_lr_ph_split_us_smax155_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp156 = sub i32 %tmp152, %smax155*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp156_reg <= put_cursor__preheader_lr_ph_split_us_tmp156;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp156_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp159 = icmp sgt i32 %6, 0*/
begin
put_cursor__preheader_lr_ph_split_us_tmp159 = ($signed(put_cursor_0_6_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp159 = icmp sgt i32 %6, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp159_reg <= put_cursor__preheader_lr_ph_split_us_tmp159;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp159_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax160 = select i1 %tmp159, i32 %6, i32 0*/
begin
put_cursor__preheader_lr_ph_split_us_smax160 = (put_cursor__preheader_lr_ph_split_us_tmp159 ? put_cursor_0_6_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax160 = select i1 %tmp159, i32 %6, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax160_reg <= put_cursor__preheader_lr_ph_split_us_smax160;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax160_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader_lr_ph_split_us_tmp161 = put_cursor__preheader_lr_ph_split_us_tmp161_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp161 = mul i32 %27, %smax160*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp161_reg <= put_cursor__preheader_lr_ph_split_us_tmp161;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp161_reg"); $finish; end
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp161 = mul i32 %27, %smax160*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp161_reg <= put_cursor__preheader_lr_ph_split_us_tmp161;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp161_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp162 = icmp sgt i32 %15, 0*/
begin
put_cursor__preheader_lr_ph_split_us_tmp162 = ($signed(put_cursor_0_15_reg) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp162 = icmp sgt i32 %15, 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_tmp162_reg <= put_cursor__preheader_lr_ph_split_us_tmp162;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp162_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax163 = select i1 %tmp162, i32 %15, i32 0*/
begin
put_cursor__preheader_lr_ph_split_us_smax163 = (put_cursor__preheader_lr_ph_split_us_tmp162 ? put_cursor_0_15_reg : 32'd0);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %smax163 = select i1 %tmp162, i32 %15, i32 0*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
put_cursor__preheader_lr_ph_split_us_smax163_reg <= put_cursor__preheader_lr_ph_split_us_smax163;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_smax163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_smax163_reg"); $finish; end
end
end
always @(*) begin
put_cursor__preheader_lr_ph_split_us_tmp164 = put_cursor__preheader_lr_ph_split_us_tmp164_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp164 = mul i32 %smax163, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp164_reg <= put_cursor__preheader_lr_ph_split_us_tmp164;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp164_reg"); $finish; end
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp164 = mul i32 %smax163, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp164_reg <= put_cursor__preheader_lr_ph_split_us_tmp164;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp164_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp165 = add i32 %tmp161, %tmp164*/
begin
put_cursor__preheader_lr_ph_split_us_tmp165 = (put_cursor__preheader_lr_ph_split_us_tmp161 + put_cursor__preheader_lr_ph_split_us_tmp164);
end
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp165 = add i32 %tmp161, %tmp164*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_42))
begin
put_cursor__preheader_lr_ph_split_us_tmp165_reg <= put_cursor__preheader_lr_ph_split_us_tmp165;
if (reset == 1'b0 && ^(put_cursor__preheader_lr_ph_split_us_tmp165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__preheader_lr_ph_split_us_tmp165_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
begin
put_cursor_71__pre206 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_46))
begin
put_cursor_71__pre206_reg <= put_cursor_71__pre206;
if (reset == 1'b0 && ^(put_cursor_71__pre206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_71__pre206_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %71*/
/*   %72 = getelementptr inbounds i32* %msk4.09.us, i32 %.pre206*/
begin
put_cursor_71_72 = (put_cursor__lr_ph_us_msk4_09_us_reg + (4 * put_cursor_71__pre206));
end
end
always @(posedge clk) begin
/* put_cursor: %71*/
/*   %72 = getelementptr inbounds i32* %msk4.09.us, i32 %.pre206*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_46))
begin
put_cursor_71_72_reg <= put_cursor_71_72;
if (reset == 1'b0 && ^(put_cursor_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_71_72_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %71*/
/*   %73 = getelementptr inbounds i32* %cd3.08.us, i32 %.pre206*/
begin
put_cursor_71_73 = (put_cursor__lr_ph_us_cd3_08_us_reg + (4 * put_cursor_71__pre206));
end
end
always @(posedge clk) begin
/* put_cursor: %71*/
/*   %73 = getelementptr inbounds i32* %cd3.08.us, i32 %.pre206*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_46))
begin
put_cursor_71_73_reg <= put_cursor_71_73;
if (reset == 1'b0 && ^(put_cursor_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_71_73_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %71*/
/*   %74 = add nsw i32 %j.27.us, 1*/
begin
put_cursor_71_74 = (put_cursor__lr_ph_us_j_27_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %71*/
/*   %74 = add nsw i32 %j.27.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
put_cursor_71_74_reg <= put_cursor_71_74;
if (reset == 1'b0 && ^(put_cursor_71_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_71_74_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %71*/
/*   %exitcond157 = icmp eq i32 %74, %tmp156*/
begin
put_cursor_71_exitcond157 = (put_cursor_71_74 == put_cursor__preheader_lr_ph_split_us_tmp156_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %71*/
/*   %exitcond157 = icmp eq i32 %74, %tmp156*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
put_cursor_71_exitcond157_reg <= put_cursor_71_exitcond157;
if (reset == 1'b0 && ^(put_cursor_71_exitcond157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_71_exitcond157_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %i.26.us = phi i32 [ 0, %.lr.ph.us ], [ %81, %75 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_75_52) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_75_exitcond132_reg == 1'd0)))
begin
put_cursor_75_i_26_us = put_cursor_75_81_reg;
end
/* put_cursor: %75*/
/*   %i.26.us = phi i32 [ 0, %.lr.ph.us ], [ %81, %75 ]*/
else /* if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54) & (memory_controller_waitrequest == 1'd0))) */
begin
put_cursor_75_i_26_us = 32'd0;
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %i.26.us = phi i32 [ 0, %.lr.ph.us ], [ %81, %75 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_75_52) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_75_exitcond132_reg == 1'd0)))
begin
put_cursor_75_i_26_us_reg <= put_cursor_75_i_26_us;
if (reset == 1'b0 && ^(put_cursor_75_i_26_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_i_26_us_reg"); $finish; end
end
/* put_cursor: %75*/
/*   %i.26.us = phi i32 [ 0, %.lr.ph.us ], [ %81, %75 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor_75_i_26_us_reg <= put_cursor_75_i_26_us;
if (reset == 1'b0 && ^(put_cursor_75_i_26_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_i_26_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %tmp167 = add i32 %tmp166, %i.26.us*/
begin
put_cursor_75_tmp167 = (put_cursor__lr_ph_us_tmp166_reg + put_cursor_75_i_26_us_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %tmp167 = add i32 %tmp166, %i.26.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
put_cursor_75_tmp167_reg <= put_cursor_75_tmp167;
if (reset == 1'b0 && ^(put_cursor_75_tmp167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_tmp167_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %scevgep145 = getelementptr i32* %dst, i32 %tmp167*/
begin
put_cursor_75_scevgep145 = (arg_dst + (4 * put_cursor_75_tmp167_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %scevgep145 = getelementptr i32* %dst, i32 %tmp167*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_48))
begin
put_cursor_75_scevgep145_reg <= put_cursor_75_scevgep145;
if (reset == 1'b0 && ^(put_cursor_75_scevgep145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_scevgep145_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %scevgep133 = getelementptr i32* %msk4.09.us, i32 %i.26.us*/
begin
put_cursor_75_scevgep133 = (put_cursor__lr_ph_us_msk4_09_us_reg + (4 * put_cursor_75_i_26_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %scevgep133 = getelementptr i32* %msk4.09.us, i32 %i.26.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
put_cursor_75_scevgep133_reg <= put_cursor_75_scevgep133;
if (reset == 1'b0 && ^(put_cursor_75_scevgep133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_scevgep133_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %scevgep134 = getelementptr i32* %cd3.08.us, i32 %i.26.us*/
begin
put_cursor_75_scevgep134 = (put_cursor__lr_ph_us_cd3_08_us_reg + (4 * put_cursor_75_i_26_us_reg));
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %scevgep134 = getelementptr i32* %cd3.08.us, i32 %i.26.us*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
put_cursor_75_scevgep134_reg <= put_cursor_75_scevgep134;
if (reset == 1'b0 && ^(put_cursor_75_scevgep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_scevgep134_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
begin
put_cursor_75_76 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_50))
begin
put_cursor_75_76_reg <= put_cursor_75_76;
if (reset == 1'b0 && ^(put_cursor_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_76_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
begin
put_cursor_75_77 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_49))
begin
put_cursor_75_77_reg <= put_cursor_75_77;
if (reset == 1'b0 && ^(put_cursor_75_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_77_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %78 = and i32 %77, %76*/
begin
put_cursor_75_78 = (put_cursor_75_77_reg & put_cursor_75_76);
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %78 = and i32 %77, %76*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_50))
begin
put_cursor_75_78_reg <= put_cursor_75_78;
if (reset == 1'b0 && ^(put_cursor_75_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_78_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
begin
put_cursor_75_79 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
put_cursor_75_79_reg <= put_cursor_75_79;
if (reset == 1'b0 && ^(put_cursor_75_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_79_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %80 = xor i32 %78, %79*/
begin
put_cursor_75_80 = (put_cursor_75_78_reg ^ put_cursor_75_79);
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %80 = xor i32 %78, %79*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
put_cursor_75_80_reg <= put_cursor_75_80;
if (reset == 1'b0 && ^(put_cursor_75_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_80_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %81 = add nsw i32 %i.26.us, 1*/
begin
put_cursor_75_81 = (put_cursor_75_i_26_us_reg + 32'd1);
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %81 = add nsw i32 %i.26.us, 1*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
put_cursor_75_81_reg <= put_cursor_75_81;
if (reset == 1'b0 && ^(put_cursor_75_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_81_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %75*/
/*   %exitcond132 = icmp eq i32 %81, %tmp131*/
begin
put_cursor_75_exitcond132 = (put_cursor_75_81 == put_cursor__preheader_lr_ph_split_us_tmp131_reg);
end
end
always @(posedge clk) begin
/* put_cursor: %75*/
/*   %exitcond132 = icmp eq i32 %81, %tmp131*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
put_cursor_75_exitcond132_reg <= put_cursor_75_exitcond132;
if (reset == 1'b0 && ^(put_cursor_75_exitcond132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_75_exitcond132_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph.us*/
/*   %msk4.09.us = phi i32* [ %69, %.preheader.lr.ph.split.us ], [ %72, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_msk4_09_us = put_cursor__preheader_lr_ph_split_us_69;
end
/* put_cursor: %.lr.ph.us*/
/*   %msk4.09.us = phi i32* [ %69, %.preheader.lr.ph.split.us ], [ %72, %71 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0))) */
begin
put_cursor__lr_ph_us_msk4_09_us = put_cursor_71_72;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %msk4.09.us = phi i32* [ %69, %.preheader.lr.ph.split.us ], [ %72, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_msk4_09_us_reg <= put_cursor__lr_ph_us_msk4_09_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_msk4_09_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_msk4_09_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph.us*/
/*   %msk4.09.us = phi i32* [ %69, %.preheader.lr.ph.split.us ], [ %72, %71 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0)))
begin
put_cursor__lr_ph_us_msk4_09_us_reg <= put_cursor__lr_ph_us_msk4_09_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_msk4_09_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_msk4_09_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph.us*/
/*   %cd3.08.us = phi i32* [ %70, %.preheader.lr.ph.split.us ], [ %73, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_cd3_08_us = put_cursor__preheader_lr_ph_split_us_70;
end
/* put_cursor: %.lr.ph.us*/
/*   %cd3.08.us = phi i32* [ %70, %.preheader.lr.ph.split.us ], [ %73, %71 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0))) */
begin
put_cursor__lr_ph_us_cd3_08_us = put_cursor_71_73;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %cd3.08.us = phi i32* [ %70, %.preheader.lr.ph.split.us ], [ %73, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_cd3_08_us_reg <= put_cursor__lr_ph_us_cd3_08_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_cd3_08_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_cd3_08_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph.us*/
/*   %cd3.08.us = phi i32* [ %70, %.preheader.lr.ph.split.us ], [ %73, %71 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0)))
begin
put_cursor__lr_ph_us_cd3_08_us_reg <= put_cursor__lr_ph_us_cd3_08_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_cd3_08_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_cd3_08_us_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph.us*/
/*   %j.27.us = phi i32 [ 0, %.preheader.lr.ph.split.us ], [ %74, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_j_27_us = 32'd0;
end
/* put_cursor: %.lr.ph.us*/
/*   %j.27.us = phi i32 [ 0, %.preheader.lr.ph.split.us ], [ %74, %71 ]*/
else /* if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0))) */
begin
put_cursor__lr_ph_us_j_27_us = put_cursor_71_74_reg;
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %j.27.us = phi i32 [ 0, %.preheader.lr.ph.split.us ], [ %74, %71 ]*/
if (((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_43) & (memory_controller_waitrequest == 1'd0)))
begin
put_cursor__lr_ph_us_j_27_us_reg <= put_cursor__lr_ph_us_j_27_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_j_27_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_j_27_us_reg"); $finish; end
end
/* put_cursor: %.lr.ph.us*/
/*   %j.27.us = phi i32 [ 0, %.preheader.lr.ph.split.us ], [ %74, %71 ]*/
if ((((cur_state == LEGUP_F_put_cursor_BB_71_46) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_71_exitcond157_reg == 1'd0)))
begin
put_cursor__lr_ph_us_j_27_us_reg <= put_cursor__lr_ph_us_j_27_us;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_j_27_us) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_j_27_us_reg"); $finish; end
end
end
always @(*) begin
put_cursor__lr_ph_us_tmp158 = put_cursor__lr_ph_us_tmp158_stage0_reg;
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %tmp158 = mul i32 %j.27.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54))
begin
put_cursor__lr_ph_us_tmp158_reg <= put_cursor__lr_ph_us_tmp158;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_tmp158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_tmp158_reg"); $finish; end
end
/* put_cursor: %.lr.ph.us*/
/*   %tmp158 = mul i32 %j.27.us, %stride*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54))
begin
put_cursor__lr_ph_us_tmp158_reg <= put_cursor__lr_ph_us_tmp158;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_tmp158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_tmp158_reg"); $finish; end
end
end
always @(*) begin
/* put_cursor: %.lr.ph.us*/
/*   %tmp166 = add i32 %tmp165, %tmp158*/
begin
put_cursor__lr_ph_us_tmp166 = (put_cursor__preheader_lr_ph_split_us_tmp165_reg + put_cursor__lr_ph_us_tmp158);
end
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %tmp166 = add i32 %tmp165, %tmp158*/
if ((cur_state == LEGUP_F_put_cursor_BB__lr_ph_us_54))
begin
put_cursor__lr_ph_us_tmp166_reg <= put_cursor__lr_ph_us_tmp166;
if (reset == 1'b0 && ^(put_cursor__lr_ph_us_tmp166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor__lr_ph_us_tmp166_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp65 = mul i32 %27, %smax64*/
if ((lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp65_en == 1'd1))
begin
put_cursor__preheader20_lr_ph_split_us_tmp65_stage0_reg <= (put_cursor_25_27_reg * put_cursor__preheader20_lr_ph_split_us_smax64);
end
end
always @(*) begin
lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %tmp68 = mul i32 %smax67, %stride*/
if ((lpm_mult_put_cursor__preheader20_lr_ph_split_us_tmp68_en == 1'd1))
begin
put_cursor__preheader20_lr_ph_split_us_tmp68_stage0_reg <= (put_cursor__preheader20_lr_ph_split_us_smax67 * arg_stride);
end
end
always @(*) begin
lpm_mult_put_cursor__lr_ph22_us_tmp62_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph22.us*/
/*   %tmp62 = mul i32 %j.027.us, %stride*/
if ((lpm_mult_put_cursor__lr_ph22_us_tmp62_en == 1'd1))
begin
put_cursor__lr_ph22_us_tmp62_stage0_reg <= (put_cursor__lr_ph22_us_j_027_us_reg * arg_stride);
end
end
always @(*) begin
lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp113 = mul i32 %27, %smax112*/
if ((lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp113_en == 1'd1))
begin
put_cursor__preheader11_lr_ph_split_us_tmp113_stage0_reg <= (put_cursor_25_27_reg * put_cursor__preheader11_lr_ph_split_us_smax112);
end
end
always @(*) begin
lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp116_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %tmp116 = mul i32 %smax115, %stride*/
if ((lpm_mult_put_cursor__preheader11_lr_ph_split_us_tmp116_en == 1'd1))
begin
put_cursor__preheader11_lr_ph_split_us_tmp116_stage0_reg <= (put_cursor__preheader11_lr_ph_split_us_smax115 * arg_stride);
end
end
always @(*) begin
lpm_mult_put_cursor__lr_ph13_us_tmp110_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph13.us*/
/*   %tmp110 = mul i32 %j.116.us, %stride*/
if ((lpm_mult_put_cursor__lr_ph13_us_tmp110_en == 1'd1))
begin
put_cursor__lr_ph13_us_tmp110_stage0_reg <= (put_cursor__lr_ph13_us_j_116_us_reg * arg_stride);
end
end
always @(*) begin
lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp161_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp161 = mul i32 %27, %smax160*/
if ((lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp161_en == 1'd1))
begin
put_cursor__preheader_lr_ph_split_us_tmp161_stage0_reg <= (put_cursor_25_27_reg * put_cursor__preheader_lr_ph_split_us_smax160);
end
end
always @(*) begin
lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp164_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %tmp164 = mul i32 %smax163, %stride*/
if ((lpm_mult_put_cursor__preheader_lr_ph_split_us_tmp164_en == 1'd1))
begin
put_cursor__preheader_lr_ph_split_us_tmp164_stage0_reg <= (put_cursor__preheader_lr_ph_split_us_smax163 * arg_stride);
end
end
always @(*) begin
lpm_mult_put_cursor__lr_ph_us_tmp158_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* put_cursor: %.lr.ph.us*/
/*   %tmp158 = mul i32 %j.27.us, %stride*/
if ((lpm_mult_put_cursor__lr_ph_us_tmp158_en == 1'd1))
begin
put_cursor__lr_ph_us_tmp158_stage0_reg <= (put_cursor__lr_ph_us_j_27_us_reg * arg_stride);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* put_cursor: %.loopexit*/
/*   ret void*/
if ((cur_state == LEGUP_F_put_cursor_BB__loopexit_58))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_7))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_18))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %39*/
/*   store i32 %44, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_33))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %57*/
/*   store i32 %62, i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_48))
begin
memory_controller_enable_a = 1'd1;
end
/* put_cursor: %75*/
/*   store i32 %80, i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_address_a = put_cursor_0_1;
end
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_address_a = put_cursor_0_5_reg;
end
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_address_a = put_cursor_0_12_reg;
end
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_7))
begin
memory_controller_address_a = put_cursor_25_26;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_address_a = put_cursor__preheader20_lr_ph_split_us_31;
end
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
memory_controller_address_a = put_cursor_0_1_reg;
end
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_18))
begin
memory_controller_address_a = put_cursor_39_scevgep49;
end
/* put_cursor: %39*/
/*   store i32 %44, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
memory_controller_address_a = put_cursor_39_scevgep49_reg;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_address_a = put_cursor__preheader11_lr_ph_split_us_49;
end
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
memory_controller_address_a = put_cursor_0_1_reg;
end
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_33))
begin
memory_controller_address_a = put_cursor_57_scevgep97;
end
/* put_cursor: %57*/
/*   store i32 %62, i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
memory_controller_address_a = put_cursor_57_scevgep97_reg;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_address_a = put_cursor__preheader_lr_ph_split_us_67;
end
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
memory_controller_address_a = put_cursor_0_1_reg;
end
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_48))
begin
memory_controller_address_a = put_cursor_75_scevgep145;
end
/* put_cursor: %75*/
/*   store i32 %80, i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
memory_controller_address_a = put_cursor_75_scevgep145_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_7))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_18))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %39*/
/*   store i32 %44, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_33))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %57*/
/*   store i32 %62, i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
memory_controller_write_enable_a = 1'd1;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* put_cursor: %75*/
/*   store i32 %80, i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* put_cursor: %39*/
/*   store i32 %44, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
memory_controller_in_a = put_cursor_39_44;
end
/* put_cursor: %57*/
/*   store i32 %62, i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
memory_controller_in_a = put_cursor_57_62;
end
/* put_cursor: %75*/
/*   store i32 %80, i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
memory_controller_in_a = put_cursor_75_80;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* put_cursor: %0*/
/*   %2 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %25*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_25_7))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %33 = load i32** %31, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %35*/
/*   %.pre = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_35_14))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %39*/
/*   %40 = load i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_18))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %39*/
/*   store i32 %44, i32* %scevgep49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_21))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %51 = load i32** %49, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %53*/
/*   %.pre205 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_53_29))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %57*/
/*   %58 = load i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_33))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %57*/
/*   store i32 %62, i32* %scevgep97, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_36))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %69 = load i32** %67, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %71*/
/*   %.pre206 = load i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_71_44))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %75*/
/*   %76 = load i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_48))
begin
memory_controller_size_a = 2'd2;
end
/* put_cursor: %75*/
/*   store i32 %80, i32* %scevgep145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_51))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_19))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_34))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
memory_controller_enable_b = 1'd1;
end
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_49))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_address_b = put_cursor_0_3;
end
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_address_b = put_cursor_0_10_reg;
end
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_address_b = put_cursor_0_14_reg;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_address_b = put_cursor__preheader20_lr_ph_split_us_32;
end
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
memory_controller_address_b = put_cursor_39_scevgep38;
end
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_19))
begin
memory_controller_address_b = put_cursor_39_scevgep_reg;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_address_b = put_cursor__preheader11_lr_ph_split_us_50;
end
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
memory_controller_address_b = put_cursor_57_scevgep86;
end
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_34))
begin
memory_controller_address_b = put_cursor_57_scevgep85_reg;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_address_b = put_cursor__preheader_lr_ph_split_us_68;
end
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
memory_controller_address_b = put_cursor_75_scevgep134;
end
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_49))
begin
memory_controller_address_b = put_cursor_75_scevgep133_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_49))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* put_cursor: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %0*/
/*   %11 = load i32* %10, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_2))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %0*/
/*   %15 = load i32* %14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_0_3))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %.preheader20.lr.ph.split.us*/
/*   %34 = load i32** %32, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader20_lr_ph_split_us_11))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %39*/
/*   %41 = load i32* %scevgep38, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_17))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %39*/
/*   %43 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_39_19))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %.preheader11.lr.ph.split.us*/
/*   %52 = load i32** %50, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader11_lr_ph_split_us_26))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %57*/
/*   %59 = load i32* %scevgep86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_32))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %57*/
/*   %61 = load i32* %scevgep85, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_57_34))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %.preheader.lr.ph.split.us*/
/*   %70 = load i32** %68, align 4, !tbaa !3*/
if ((cur_state == LEGUP_F_put_cursor_BB__preheader_lr_ph_split_us_41))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %75*/
/*   %77 = load i32* %scevgep134, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_47))
begin
memory_controller_size_b = 2'd2;
end
/* put_cursor: %75*/
/*   %79 = load i32* %scevgep133, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_put_cursor_BB_75_49))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  put_cursor_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_arg_dst;
reg [31:0] put_cursor_arg_stride;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_arg_c;
reg [31:0] put_cursor_arg_dx;
reg [31:0] put_cursor_arg_dy;
wire  put_cursor_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_memory_controller_address_a;
wire  put_cursor_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_cursor_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_cursor_memory_controller_out_a;
wire [1:0] put_cursor_memory_controller_size_a;
wire  put_cursor_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] put_cursor_memory_controller_address_b;
wire  put_cursor_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_cursor_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] put_cursor_memory_controller_out_b;
wire [1:0] put_cursor_memory_controller_size_b;
reg  put_cursor_memory_controller_waitrequest;
wire  put_cursor_finish;
reg  put_cursor_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


put_cursor put_cursor_inst (
	.memory_controller_enable_a (put_cursor_memory_controller_enable_a),
	.memory_controller_address_a (put_cursor_memory_controller_address_a),
	.memory_controller_write_enable_a (put_cursor_memory_controller_write_enable_a),
	.memory_controller_in_a (put_cursor_memory_controller_in_a),
	.memory_controller_size_a (put_cursor_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (put_cursor_memory_controller_enable_b),
	.memory_controller_address_b (put_cursor_memory_controller_address_b),
	.memory_controller_write_enable_b (put_cursor_memory_controller_write_enable_b),
	.memory_controller_in_b (put_cursor_memory_controller_in_b),
	.memory_controller_size_b (put_cursor_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (put_cursor_start),
	.finish (put_cursor_finish),
	.arg_dst (put_cursor_arg_dst),
	.arg_stride (put_cursor_arg_stride),
	.arg_c (put_cursor_arg_c),
	.arg_dx (put_cursor_arg_dx),
	.arg_dy (put_cursor_arg_dy)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (put_cursor_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_start"); $finish; end
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
put_cursor_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_arg_dst <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_arg_dst"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_arg_stride <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_arg_stride"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_arg_c <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_arg_c"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_arg_dx <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_arg_dx"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
put_cursor_arg_dy <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to put_cursor_arg_dy"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
begin
put_cursor_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
begin
put_cursor_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
put_cursor_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
put_cursor_finish_final = put_cursor_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = put_cursor_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = put_cursor_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_cursor_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_cursor_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = put_cursor_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = put_cursor_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_cursor_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_cursor_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = put_cursor_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = put_cursor_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = put_cursor_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = put_cursor_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_cursor_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = put_cursor_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = put_cursor_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = put_cursor_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_cursor_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = put_cursor_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = put_cursor_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @put_cursor(i32* undef, i32 undef, %struct.TYPE_3__* undef, i32 undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = put_cursor_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
