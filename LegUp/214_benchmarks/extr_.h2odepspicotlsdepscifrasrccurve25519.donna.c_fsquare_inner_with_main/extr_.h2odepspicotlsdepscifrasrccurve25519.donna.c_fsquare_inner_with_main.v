//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:53:54 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 0
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module fsquare_inner
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_output,
	arg_in
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_1 = 7'd1;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_2 = 7'd2;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_3 = 7'd3;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_4 = 7'd4;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_5 = 7'd5;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_6 = 7'd6;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_7 = 7'd7;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_8 = 7'd8;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_9 = 7'd9;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_10 = 7'd10;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_11 = 7'd11;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_12 = 7'd12;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_13 = 7'd13;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_14 = 7'd14;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_15 = 7'd15;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_16 = 7'd16;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_17 = 7'd17;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_18 = 7'd18;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_19 = 7'd19;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_20 = 7'd20;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_21 = 7'd21;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_22 = 7'd22;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_23 = 7'd23;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_24 = 7'd24;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_25 = 7'd25;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_26 = 7'd26;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_27 = 7'd27;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_28 = 7'd28;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_29 = 7'd29;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_30 = 7'd30;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_31 = 7'd31;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_32 = 7'd32;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_33 = 7'd33;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_34 = 7'd34;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_35 = 7'd35;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_36 = 7'd36;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_37 = 7'd37;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_38 = 7'd38;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_39 = 7'd39;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_40 = 7'd40;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_41 = 7'd41;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_42 = 7'd42;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_43 = 7'd43;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_44 = 7'd44;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_45 = 7'd45;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_46 = 7'd46;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_47 = 7'd47;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_48 = 7'd48;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_49 = 7'd49;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_50 = 7'd50;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_51 = 7'd51;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_52 = 7'd52;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_53 = 7'd53;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_54 = 7'd54;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_55 = 7'd55;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_56 = 7'd56;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_57 = 7'd57;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_58 = 7'd58;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_59 = 7'd59;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_60 = 7'd60;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_61 = 7'd61;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_62 = 7'd62;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_63 = 7'd63;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_64 = 7'd64;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_65 = 7'd65;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_66 = 7'd66;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_67 = 7'd67;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_68 = 7'd68;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_69 = 7'd69;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_70 = 7'd70;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_71 = 7'd71;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_72 = 7'd72;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_73 = 7'd73;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_74 = 7'd74;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_75 = 7'd75;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_76 = 7'd76;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_77 = 7'd77;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_78 = 7'd78;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_79 = 7'd79;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_80 = 7'd80;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_81 = 7'd81;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_82 = 7'd82;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_83 = 7'd83;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_84 = 7'd84;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_85 = 7'd85;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_86 = 7'd86;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_87 = 7'd87;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_88 = 7'd88;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_89 = 7'd89;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_90 = 7'd90;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_91 = 7'd91;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_92 = 7'd92;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_93 = 7'd93;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_94 = 7'd94;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_95 = 7'd95;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_96 = 7'd96;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_97 = 7'd97;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_98 = 7'd98;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_99 = 7'd99;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_100 = 7'd100;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_101 = 7'd101;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_102 = 7'd102;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_103 = 7'd103;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_104 = 7'd104;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_105 = 7'd105;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_106 = 7'd106;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_107 = 7'd107;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_108 = 7'd108;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_109 = 7'd109;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_110 = 7'd110;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_111 = 7'd111;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_112 = 7'd112;
parameter [6:0] LEGUP_F_fsquare_inner_BB_0_113 = 7'd113;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_output;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_in;
reg [6:0] cur_state;
reg [31:0] fsquare_inner_0_1;
reg [31:0] fsquare_inner_0_1_reg;
reg [31:0] fsquare_inner_0_2;
reg [31:0] fsquare_inner_0_2_reg;
reg [31:0] fsquare_inner_0_3;
reg [31:0] fsquare_inner_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_4_reg;
reg [31:0] fsquare_inner_0_5;
reg [31:0] fsquare_inner_0_5_reg;
reg [31:0] fsquare_inner_0_6;
reg [31:0] fsquare_inner_0_6_reg;
reg [31:0] fsquare_inner_0_7;
reg [31:0] fsquare_inner_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_8_reg;
reg [31:0] fsquare_inner_0_9;
reg [31:0] fsquare_inner_0_9_reg;
reg [31:0] fsquare_inner_0_10;
reg [31:0] fsquare_inner_0_10_reg;
reg [31:0] fsquare_inner_0_11;
reg [31:0] fsquare_inner_0_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_12_reg;
reg [31:0] fsquare_inner_0_13;
reg [31:0] fsquare_inner_0_13_reg;
reg [31:0] fsquare_inner_0_14;
reg [31:0] fsquare_inner_0_14_reg;
reg [31:0] fsquare_inner_0_15;
reg [31:0] fsquare_inner_0_15_reg;
reg [31:0] fsquare_inner_0_16;
reg [31:0] fsquare_inner_0_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_17_reg;
reg [31:0] fsquare_inner_0_18;
reg [31:0] fsquare_inner_0_18_reg;
reg [31:0] fsquare_inner_0_19;
reg [31:0] fsquare_inner_0_19_reg;
reg [31:0] fsquare_inner_0_20;
reg [31:0] fsquare_inner_0_20_reg;
reg [31:0] fsquare_inner_0_21;
reg [31:0] fsquare_inner_0_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_22_reg;
reg [31:0] fsquare_inner_0_23;
reg [31:0] fsquare_inner_0_23_reg;
reg [31:0] fsquare_inner_0_24;
reg [31:0] fsquare_inner_0_24_reg;
reg [31:0] fsquare_inner_0_25;
reg [31:0] fsquare_inner_0_25_reg;
reg [31:0] fsquare_inner_0_26;
reg [31:0] fsquare_inner_0_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_27_reg;
reg [31:0] fsquare_inner_0_28;
reg [31:0] fsquare_inner_0_28_reg;
reg [31:0] fsquare_inner_0_29;
reg [31:0] fsquare_inner_0_29_reg;
reg [31:0] fsquare_inner_0_30;
reg [31:0] fsquare_inner_0_30_reg;
reg [31:0] fsquare_inner_0_31;
reg [31:0] fsquare_inner_0_31_reg;
reg [31:0] fsquare_inner_0_32;
reg [31:0] fsquare_inner_0_32_reg;
reg [31:0] fsquare_inner_0_33;
reg [31:0] fsquare_inner_0_33_reg;
reg [31:0] fsquare_inner_0_34;
reg [31:0] fsquare_inner_0_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_35_reg;
reg [31:0] fsquare_inner_0_36;
reg [31:0] fsquare_inner_0_36_reg;
reg [31:0] fsquare_inner_0_37;
reg [31:0] fsquare_inner_0_37_reg;
reg [31:0] fsquare_inner_0_38;
reg [31:0] fsquare_inner_0_38_reg;
reg [31:0] fsquare_inner_0_39;
reg [31:0] fsquare_inner_0_39_reg;
reg [31:0] fsquare_inner_0_40;
reg [31:0] fsquare_inner_0_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_41_reg;
reg [31:0] fsquare_inner_0_42;
reg [31:0] fsquare_inner_0_42_reg;
reg [31:0] fsquare_inner_0_43;
reg [31:0] fsquare_inner_0_43_reg;
reg [31:0] fsquare_inner_0_44;
reg [31:0] fsquare_inner_0_44_reg;
reg [31:0] fsquare_inner_0_45;
reg [31:0] fsquare_inner_0_45_reg;
reg [31:0] fsquare_inner_0_46;
reg [31:0] fsquare_inner_0_46_reg;
reg [31:0] fsquare_inner_0_47;
reg [31:0] fsquare_inner_0_47_reg;
reg [31:0] fsquare_inner_0_48;
reg [31:0] fsquare_inner_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_49_reg;
reg [31:0] fsquare_inner_0_50;
reg [31:0] fsquare_inner_0_50_reg;
reg [31:0] fsquare_inner_0_51;
reg [31:0] fsquare_inner_0_51_reg;
reg [31:0] fsquare_inner_0_52;
reg [31:0] fsquare_inner_0_52_reg;
reg [31:0] fsquare_inner_0_53;
reg [31:0] fsquare_inner_0_53_reg;
reg [31:0] fsquare_inner_0_54;
reg [31:0] fsquare_inner_0_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_55_reg;
reg [31:0] fsquare_inner_0_56;
reg [31:0] fsquare_inner_0_56_reg;
reg [31:0] fsquare_inner_0_57;
reg [31:0] fsquare_inner_0_57_reg;
reg [31:0] fsquare_inner_0_58;
reg [31:0] fsquare_inner_0_58_reg;
reg [31:0] fsquare_inner_0_59;
reg [31:0] fsquare_inner_0_59_reg;
reg [31:0] fsquare_inner_0_60;
reg [31:0] fsquare_inner_0_60_reg;
reg [31:0] fsquare_inner_0_61;
reg [31:0] fsquare_inner_0_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_62_reg;
reg [31:0] fsquare_inner_0_63;
reg [31:0] fsquare_inner_0_63_reg;
reg [31:0] fsquare_inner_0_64;
reg [31:0] fsquare_inner_0_64_reg;
reg [31:0] fsquare_inner_0_65;
reg [31:0] fsquare_inner_0_65_reg;
reg [31:0] fsquare_inner_0_66;
reg [31:0] fsquare_inner_0_66_reg;
reg [31:0] fsquare_inner_0_67;
reg [31:0] fsquare_inner_0_67_reg;
reg [31:0] fsquare_inner_0_68;
reg [31:0] fsquare_inner_0_68_reg;
reg [31:0] fsquare_inner_0_69;
reg [31:0] fsquare_inner_0_69_reg;
reg [31:0] fsquare_inner_0_70;
reg [31:0] fsquare_inner_0_70_reg;
reg [31:0] fsquare_inner_0_71;
reg [31:0] fsquare_inner_0_71_reg;
reg [31:0] fsquare_inner_0_72;
reg [31:0] fsquare_inner_0_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_73_reg;
reg [31:0] fsquare_inner_0_74;
reg [31:0] fsquare_inner_0_74_reg;
reg [31:0] fsquare_inner_0_75;
reg [31:0] fsquare_inner_0_75_reg;
reg [31:0] fsquare_inner_0_76;
reg [31:0] fsquare_inner_0_76_reg;
reg [31:0] fsquare_inner_0_77;
reg [31:0] fsquare_inner_0_77_reg;
reg [31:0] fsquare_inner_0_78;
reg [31:0] fsquare_inner_0_78_reg;
reg [31:0] fsquare_inner_0_79;
reg [31:0] fsquare_inner_0_79_reg;
reg [31:0] fsquare_inner_0_80;
reg [31:0] fsquare_inner_0_80_reg;
reg [31:0] fsquare_inner_0_81;
reg [31:0] fsquare_inner_0_81_reg;
reg [31:0] fsquare_inner_0_82;
reg [31:0] fsquare_inner_0_82_reg;
reg [31:0] fsquare_inner_0_83;
reg [31:0] fsquare_inner_0_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_84_reg;
reg [31:0] fsquare_inner_0_85;
reg [31:0] fsquare_inner_0_85_reg;
reg [31:0] fsquare_inner_0_86;
reg [31:0] fsquare_inner_0_86_reg;
reg [31:0] fsquare_inner_0_87;
reg [31:0] fsquare_inner_0_87_reg;
reg [31:0] fsquare_inner_0_88;
reg [31:0] fsquare_inner_0_88_reg;
reg [31:0] fsquare_inner_0_89;
reg [31:0] fsquare_inner_0_89_reg;
reg [31:0] fsquare_inner_0_90;
reg [31:0] fsquare_inner_0_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_91_reg;
reg [31:0] fsquare_inner_0_92;
reg [31:0] fsquare_inner_0_92_reg;
reg [31:0] fsquare_inner_0_93;
reg [31:0] fsquare_inner_0_93_reg;
reg [31:0] fsquare_inner_0_94;
reg [31:0] fsquare_inner_0_94_reg;
reg [31:0] fsquare_inner_0_95;
reg [31:0] fsquare_inner_0_95_reg;
reg [31:0] fsquare_inner_0_96;
reg [31:0] fsquare_inner_0_96_reg;
reg [31:0] fsquare_inner_0_97;
reg [31:0] fsquare_inner_0_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_98_reg;
reg [31:0] fsquare_inner_0_99;
reg [31:0] fsquare_inner_0_99_reg;
reg [31:0] fsquare_inner_0_100;
reg [31:0] fsquare_inner_0_100_reg;
reg [31:0] fsquare_inner_0_101;
reg [31:0] fsquare_inner_0_101_reg;
reg [31:0] fsquare_inner_0_102;
reg [31:0] fsquare_inner_0_102_reg;
reg [31:0] fsquare_inner_0_103;
reg [31:0] fsquare_inner_0_103_reg;
reg [31:0] fsquare_inner_0_104;
reg [31:0] fsquare_inner_0_104_reg;
reg [31:0] fsquare_inner_0_105;
reg [31:0] fsquare_inner_0_105_reg;
reg [31:0] fsquare_inner_0_106;
reg [31:0] fsquare_inner_0_106_reg;
reg [31:0] fsquare_inner_0_107;
reg [31:0] fsquare_inner_0_107_reg;
reg [31:0] fsquare_inner_0_108;
reg [31:0] fsquare_inner_0_108_reg;
reg [31:0] fsquare_inner_0_109;
reg [31:0] fsquare_inner_0_109_reg;
reg [31:0] fsquare_inner_0_110;
reg [31:0] fsquare_inner_0_110_reg;
reg [31:0] fsquare_inner_0_111;
reg [31:0] fsquare_inner_0_111_reg;
reg [31:0] fsquare_inner_0_112;
reg [31:0] fsquare_inner_0_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_113_reg;
reg [31:0] fsquare_inner_0_114;
reg [31:0] fsquare_inner_0_114_reg;
reg [31:0] fsquare_inner_0_115;
reg [31:0] fsquare_inner_0_115_reg;
reg [31:0] fsquare_inner_0_116;
reg [31:0] fsquare_inner_0_116_reg;
reg [31:0] fsquare_inner_0_117;
reg [31:0] fsquare_inner_0_117_reg;
reg [31:0] fsquare_inner_0_118;
reg [31:0] fsquare_inner_0_118_reg;
reg [31:0] fsquare_inner_0_119;
reg [31:0] fsquare_inner_0_119_reg;
reg [31:0] fsquare_inner_0_120;
reg [31:0] fsquare_inner_0_120_reg;
reg [31:0] fsquare_inner_0_121;
reg [31:0] fsquare_inner_0_121_reg;
reg [31:0] fsquare_inner_0_122;
reg [31:0] fsquare_inner_0_122_reg;
reg [31:0] fsquare_inner_0_123;
reg [31:0] fsquare_inner_0_123_reg;
reg [31:0] fsquare_inner_0_124;
reg [31:0] fsquare_inner_0_124_reg;
reg [31:0] fsquare_inner_0_125;
reg [31:0] fsquare_inner_0_125_reg;
reg [31:0] fsquare_inner_0_126;
reg [31:0] fsquare_inner_0_126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_127_reg;
reg [31:0] fsquare_inner_0_128;
reg [31:0] fsquare_inner_0_128_reg;
reg [31:0] fsquare_inner_0_129;
reg [31:0] fsquare_inner_0_129_reg;
reg [31:0] fsquare_inner_0_130;
reg [31:0] fsquare_inner_0_130_reg;
reg [31:0] fsquare_inner_0_131;
reg [31:0] fsquare_inner_0_131_reg;
reg [31:0] fsquare_inner_0_132;
reg [31:0] fsquare_inner_0_132_reg;
reg [31:0] fsquare_inner_0_133;
reg [31:0] fsquare_inner_0_133_reg;
reg [31:0] fsquare_inner_0_134;
reg [31:0] fsquare_inner_0_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_135_reg;
reg [31:0] fsquare_inner_0_136;
reg [31:0] fsquare_inner_0_136_reg;
reg [31:0] fsquare_inner_0_137;
reg [31:0] fsquare_inner_0_137_reg;
reg [31:0] fsquare_inner_0_138;
reg [31:0] fsquare_inner_0_138_reg;
reg [31:0] fsquare_inner_0_139;
reg [31:0] fsquare_inner_0_139_reg;
reg [31:0] fsquare_inner_0_140;
reg [31:0] fsquare_inner_0_140_reg;
reg [31:0] fsquare_inner_0_141;
reg [31:0] fsquare_inner_0_141_reg;
reg [31:0] fsquare_inner_0_142;
reg [31:0] fsquare_inner_0_142_reg;
reg [31:0] fsquare_inner_0_143;
reg [31:0] fsquare_inner_0_143_reg;
reg [31:0] fsquare_inner_0_144;
reg [31:0] fsquare_inner_0_144_reg;
reg [31:0] fsquare_inner_0_145;
reg [31:0] fsquare_inner_0_145_reg;
reg [31:0] fsquare_inner_0_146;
reg [31:0] fsquare_inner_0_146_reg;
reg [31:0] fsquare_inner_0_147;
reg [31:0] fsquare_inner_0_147_reg;
reg [31:0] fsquare_inner_0_148;
reg [31:0] fsquare_inner_0_148_reg;
reg [31:0] fsquare_inner_0_149;
reg [31:0] fsquare_inner_0_149_reg;
reg [31:0] fsquare_inner_0_150;
reg [31:0] fsquare_inner_0_150_reg;
reg [31:0] fsquare_inner_0_151;
reg [31:0] fsquare_inner_0_151_reg;
reg [31:0] fsquare_inner_0_152;
reg [31:0] fsquare_inner_0_152_reg;
reg [31:0] fsquare_inner_0_153;
reg [31:0] fsquare_inner_0_153_reg;
reg [31:0] fsquare_inner_0_154;
reg [31:0] fsquare_inner_0_154_reg;
reg [31:0] fsquare_inner_0_155;
reg [31:0] fsquare_inner_0_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_156_reg;
reg [31:0] fsquare_inner_0_157;
reg [31:0] fsquare_inner_0_157_reg;
reg [31:0] fsquare_inner_0_158;
reg [31:0] fsquare_inner_0_158_reg;
reg [31:0] fsquare_inner_0_159;
reg [31:0] fsquare_inner_0_159_reg;
reg [31:0] fsquare_inner_0_160;
reg [31:0] fsquare_inner_0_160_reg;
reg [31:0] fsquare_inner_0_161;
reg [31:0] fsquare_inner_0_161_reg;
reg [31:0] fsquare_inner_0_162;
reg [31:0] fsquare_inner_0_162_reg;
reg [31:0] fsquare_inner_0_163;
reg [31:0] fsquare_inner_0_163_reg;
reg [31:0] fsquare_inner_0_164;
reg [31:0] fsquare_inner_0_164_reg;
reg [31:0] fsquare_inner_0_165;
reg [31:0] fsquare_inner_0_165_reg;
reg [31:0] fsquare_inner_0_166;
reg [31:0] fsquare_inner_0_166_reg;
reg [31:0] fsquare_inner_0_167;
reg [31:0] fsquare_inner_0_167_reg;
reg [31:0] fsquare_inner_0_168;
reg [31:0] fsquare_inner_0_168_reg;
reg [31:0] fsquare_inner_0_169;
reg [31:0] fsquare_inner_0_169_reg;
reg [31:0] fsquare_inner_0_170;
reg [31:0] fsquare_inner_0_170_reg;
reg [31:0] fsquare_inner_0_171;
reg [31:0] fsquare_inner_0_171_reg;
reg [31:0] fsquare_inner_0_172;
reg [31:0] fsquare_inner_0_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_173_reg;
reg [31:0] fsquare_inner_0_174;
reg [31:0] fsquare_inner_0_174_reg;
reg [31:0] fsquare_inner_0_175;
reg [31:0] fsquare_inner_0_175_reg;
reg [31:0] fsquare_inner_0_176;
reg [31:0] fsquare_inner_0_176_reg;
reg [31:0] fsquare_inner_0_177;
reg [31:0] fsquare_inner_0_177_reg;
reg [31:0] fsquare_inner_0_178;
reg [31:0] fsquare_inner_0_178_reg;
reg [31:0] fsquare_inner_0_179;
reg [31:0] fsquare_inner_0_179_reg;
reg [31:0] fsquare_inner_0_180;
reg [31:0] fsquare_inner_0_180_reg;
reg [31:0] fsquare_inner_0_181;
reg [31:0] fsquare_inner_0_181_reg;
reg [31:0] fsquare_inner_0_182;
reg [31:0] fsquare_inner_0_182_reg;
reg [31:0] fsquare_inner_0_183;
reg [31:0] fsquare_inner_0_183_reg;
reg [31:0] fsquare_inner_0_184;
reg [31:0] fsquare_inner_0_184_reg;
reg [31:0] fsquare_inner_0_185;
reg [31:0] fsquare_inner_0_185_reg;
reg [31:0] fsquare_inner_0_186;
reg [31:0] fsquare_inner_0_186_reg;
reg [31:0] fsquare_inner_0_187;
reg [31:0] fsquare_inner_0_187_reg;
reg [31:0] fsquare_inner_0_188;
reg [31:0] fsquare_inner_0_188_reg;
reg [31:0] fsquare_inner_0_189;
reg [31:0] fsquare_inner_0_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_190_reg;
reg [31:0] fsquare_inner_0_191;
reg [31:0] fsquare_inner_0_191_reg;
reg [31:0] fsquare_inner_0_192;
reg [31:0] fsquare_inner_0_192_reg;
reg [31:0] fsquare_inner_0_193;
reg [31:0] fsquare_inner_0_193_reg;
reg [31:0] fsquare_inner_0_194;
reg [31:0] fsquare_inner_0_194_reg;
reg [31:0] fsquare_inner_0_195;
reg [31:0] fsquare_inner_0_195_reg;
reg [31:0] fsquare_inner_0_196;
reg [31:0] fsquare_inner_0_196_reg;
reg [31:0] fsquare_inner_0_197;
reg [31:0] fsquare_inner_0_197_reg;
reg [31:0] fsquare_inner_0_198;
reg [31:0] fsquare_inner_0_198_reg;
reg [31:0] fsquare_inner_0_199;
reg [31:0] fsquare_inner_0_199_reg;
reg [31:0] fsquare_inner_0_200;
reg [31:0] fsquare_inner_0_200_reg;
reg [31:0] fsquare_inner_0_201;
reg [31:0] fsquare_inner_0_201_reg;
reg [31:0] fsquare_inner_0_202;
reg [31:0] fsquare_inner_0_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_203_reg;
reg [31:0] fsquare_inner_0_204;
reg [31:0] fsquare_inner_0_204_reg;
reg [31:0] fsquare_inner_0_205;
reg [31:0] fsquare_inner_0_205_reg;
reg [31:0] fsquare_inner_0_206;
reg [31:0] fsquare_inner_0_206_reg;
reg [31:0] fsquare_inner_0_207;
reg [31:0] fsquare_inner_0_207_reg;
reg [31:0] fsquare_inner_0_208;
reg [31:0] fsquare_inner_0_208_reg;
reg [31:0] fsquare_inner_0_209;
reg [31:0] fsquare_inner_0_209_reg;
reg [31:0] fsquare_inner_0_210;
reg [31:0] fsquare_inner_0_210_reg;
reg [31:0] fsquare_inner_0_211;
reg [31:0] fsquare_inner_0_211_reg;
reg [31:0] fsquare_inner_0_212;
reg [31:0] fsquare_inner_0_212_reg;
reg [31:0] fsquare_inner_0_213;
reg [31:0] fsquare_inner_0_213_reg;
reg [31:0] fsquare_inner_0_214;
reg [31:0] fsquare_inner_0_214_reg;
reg [31:0] fsquare_inner_0_215;
reg [31:0] fsquare_inner_0_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_216_reg;
reg [31:0] fsquare_inner_0_217;
reg [31:0] fsquare_inner_0_217_reg;
reg [31:0] fsquare_inner_0_218;
reg [31:0] fsquare_inner_0_218_reg;
reg [31:0] fsquare_inner_0_219;
reg [31:0] fsquare_inner_0_219_reg;
reg [31:0] fsquare_inner_0_220;
reg [31:0] fsquare_inner_0_220_reg;
reg [31:0] fsquare_inner_0_221;
reg [31:0] fsquare_inner_0_221_reg;
reg [31:0] fsquare_inner_0_222;
reg [31:0] fsquare_inner_0_222_reg;
reg [31:0] fsquare_inner_0_223;
reg [31:0] fsquare_inner_0_223_reg;
reg [31:0] fsquare_inner_0_224;
reg [31:0] fsquare_inner_0_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_225_reg;
reg [31:0] fsquare_inner_0_226;
reg [31:0] fsquare_inner_0_226_reg;
reg [31:0] fsquare_inner_0_227;
reg [31:0] fsquare_inner_0_227_reg;
reg [31:0] fsquare_inner_0_228;
reg [31:0] fsquare_inner_0_228_reg;
reg [31:0] fsquare_inner_0_229;
reg [31:0] fsquare_inner_0_229_reg;
reg [31:0] fsquare_inner_0_230;
reg [31:0] fsquare_inner_0_230_reg;
reg [31:0] fsquare_inner_0_231;
reg [31:0] fsquare_inner_0_231_reg;
reg [31:0] fsquare_inner_0_232;
reg [31:0] fsquare_inner_0_232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_233_reg;
reg [31:0] fsquare_inner_0_234;
reg [31:0] fsquare_inner_0_234_reg;
reg [31:0] fsquare_inner_0_235;
reg [31:0] fsquare_inner_0_235_reg;
reg [31:0] fsquare_inner_0_236;
reg [31:0] fsquare_inner_0_236_reg;
reg [31:0] fsquare_inner_0_237;
reg [31:0] fsquare_inner_0_237_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_238_reg;
reg [31:0] fsquare_inner_0_239;
reg [31:0] fsquare_inner_0_239_reg;
reg [31:0] fsquare_inner_0_240;
reg [31:0] fsquare_inner_0_240_reg;
reg [31:0] fsquare_inner_0_241;
reg [31:0] fsquare_inner_0_241_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_242;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_0_242_reg;
wire [15:0] legup_pthreadpoll_threadID;
reg  lpm_mult_fsquare_inner_0_2_en;
reg [31:0] fsquare_inner_0_2_stage0_reg;
reg  lpm_mult_fsquare_inner_0_7_en;
reg [31:0] fsquare_inner_0_7_stage0_reg;
reg  lpm_mult_fsquare_inner_0_10_en;
reg [31:0] fsquare_inner_0_10_stage0_reg;
reg  lpm_mult_fsquare_inner_0_14_en;
reg [31:0] fsquare_inner_0_14_stage0_reg;
reg  lpm_mult_fsquare_inner_0_20_en;
reg [31:0] fsquare_inner_0_20_stage0_reg;
reg  lpm_mult_fsquare_inner_0_24_en;
reg [31:0] fsquare_inner_0_24_stage0_reg;
reg  lpm_mult_fsquare_inner_0_29_en;
reg [31:0] fsquare_inner_0_29_stage0_reg;
reg  lpm_mult_fsquare_inner_0_33_en;
reg [31:0] fsquare_inner_0_33_stage0_reg;
reg  lpm_mult_fsquare_inner_0_38_en;
reg [31:0] fsquare_inner_0_38_stage0_reg;
reg  lpm_mult_fsquare_inner_0_44_en;
reg [31:0] fsquare_inner_0_44_stage0_reg;
reg  lpm_mult_fsquare_inner_0_47_en;
reg [31:0] fsquare_inner_0_47_stage0_reg;
reg  lpm_mult_fsquare_inner_0_51_en;
reg [31:0] fsquare_inner_0_51_stage0_reg;
reg  lpm_mult_fsquare_inner_0_57_en;
reg [31:0] fsquare_inner_0_57_stage0_reg;
reg  lpm_mult_fsquare_inner_0_60_en;
reg [31:0] fsquare_inner_0_60_stage0_reg;
reg  lpm_mult_fsquare_inner_0_64_en;
reg [31:0] fsquare_inner_0_64_stage0_reg;
reg  lpm_mult_fsquare_inner_0_68_en;
reg [31:0] fsquare_inner_0_68_stage0_reg;
reg  lpm_mult_fsquare_inner_0_76_en;
reg [31:0] fsquare_inner_0_76_stage0_reg;
reg  lpm_mult_fsquare_inner_0_79_en;
reg [31:0] fsquare_inner_0_79_stage0_reg;
reg  lpm_mult_fsquare_inner_0_82_en;
reg [31:0] fsquare_inner_0_82_stage0_reg;
reg  lpm_mult_fsquare_inner_0_86_en;
reg [31:0] fsquare_inner_0_86_stage0_reg;
reg  lpm_mult_fsquare_inner_0_93_en;
reg [31:0] fsquare_inner_0_93_stage0_reg;
reg  lpm_mult_fsquare_inner_0_96_en;
reg [31:0] fsquare_inner_0_96_stage0_reg;
reg  lpm_mult_fsquare_inner_0_100_en;
reg [31:0] fsquare_inner_0_100_stage0_reg;
reg  lpm_mult_fsquare_inner_0_103_en;
reg [31:0] fsquare_inner_0_103_stage0_reg;
reg  lpm_mult_fsquare_inner_0_106_en;
reg [31:0] fsquare_inner_0_106_stage0_reg;
reg  lpm_mult_fsquare_inner_0_116_en;
reg [31:0] fsquare_inner_0_116_stage0_reg;
reg  lpm_mult_fsquare_inner_0_119_en;
reg [31:0] fsquare_inner_0_119_stage0_reg;
reg  lpm_mult_fsquare_inner_0_122_en;
reg [31:0] fsquare_inner_0_122_stage0_reg;
reg  lpm_mult_fsquare_inner_0_125_en;
reg [31:0] fsquare_inner_0_125_stage0_reg;
reg  lpm_mult_fsquare_inner_0_129_en;
reg [31:0] fsquare_inner_0_129_stage0_reg;
reg  lpm_mult_fsquare_inner_0_137_en;
reg [31:0] fsquare_inner_0_137_stage0_reg;
reg  lpm_mult_fsquare_inner_0_140_en;
reg [31:0] fsquare_inner_0_140_stage0_reg;
reg  lpm_mult_fsquare_inner_0_143_en;
reg [31:0] fsquare_inner_0_143_stage0_reg;
reg  lpm_mult_fsquare_inner_0_146_en;
reg [31:0] fsquare_inner_0_146_stage0_reg;
reg  lpm_mult_fsquare_inner_0_149_en;
reg [31:0] fsquare_inner_0_149_stage0_reg;
reg  lpm_mult_fsquare_inner_0_159_en;
reg [31:0] fsquare_inner_0_159_stage0_reg;
reg  lpm_mult_fsquare_inner_0_162_en;
reg [31:0] fsquare_inner_0_162_stage0_reg;
reg  lpm_mult_fsquare_inner_0_165_en;
reg [31:0] fsquare_inner_0_165_stage0_reg;
reg  lpm_mult_fsquare_inner_0_168_en;
reg [31:0] fsquare_inner_0_168_stage0_reg;
reg  lpm_mult_fsquare_inner_0_175_en;
reg [31:0] fsquare_inner_0_175_stage0_reg;
reg  lpm_mult_fsquare_inner_0_178_en;
reg [31:0] fsquare_inner_0_178_stage0_reg;
reg  lpm_mult_fsquare_inner_0_181_en;
reg [31:0] fsquare_inner_0_181_stage0_reg;
reg  lpm_mult_fsquare_inner_0_184_en;
reg [31:0] fsquare_inner_0_184_stage0_reg;
reg  lpm_mult_fsquare_inner_0_193_en;
reg [31:0] fsquare_inner_0_193_stage0_reg;
reg  lpm_mult_fsquare_inner_0_196_en;
reg [31:0] fsquare_inner_0_196_stage0_reg;
reg  lpm_mult_fsquare_inner_0_199_en;
reg [31:0] fsquare_inner_0_199_stage0_reg;
reg  lpm_mult_fsquare_inner_0_205_en;
reg [31:0] fsquare_inner_0_205_stage0_reg;
reg  lpm_mult_fsquare_inner_0_208_en;
reg [31:0] fsquare_inner_0_208_stage0_reg;
reg  lpm_mult_fsquare_inner_0_212_en;
reg [31:0] fsquare_inner_0_212_stage0_reg;
reg  lpm_mult_fsquare_inner_0_219_en;
reg [31:0] fsquare_inner_0_219_stage0_reg;
reg  lpm_mult_fsquare_inner_0_222_en;
reg [31:0] fsquare_inner_0_222_stage0_reg;
reg  lpm_mult_fsquare_inner_0_227_en;
reg [31:0] fsquare_inner_0_227_stage0_reg;
reg  lpm_mult_fsquare_inner_0_231_en;
reg [31:0] fsquare_inner_0_231_stage0_reg;
reg  lpm_mult_fsquare_inner_0_237_en;
reg [31:0] fsquare_inner_0_237_stage0_reg;
reg  lpm_mult_fsquare_inner_0_241_en;
reg [31:0] fsquare_inner_0_241_stage0_reg;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_4;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_5;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_6;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_7;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_8;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_9;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_10;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_11;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_12;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_13;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_14;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_15;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_16;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_17;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_18;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_19;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_20;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_21;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_22;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_23;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_24;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_25;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_26;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_27;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_28;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_29;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_30;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_31;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_32;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_33;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_33) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_34;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_35;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_36;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_37;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_38;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_39;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_40;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_41;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_42;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_42) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_43;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_44;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_45;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_46;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_47;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_48;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_49;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_50;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_51;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_51) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_52;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_53;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_54;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_55;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_56;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_57;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_58;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_58) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_59;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_60;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_61;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_62;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_63;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_64;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_65;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_66;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_67;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_67) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_68;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_69;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_70;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_71;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_72;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_73;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_74;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_75;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_76;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_77;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_78;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_79;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_80;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_80) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_81;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_82;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_83;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_84;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_85;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_86;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_87;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_88;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_89;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_89) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_90;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_91;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_92;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_92) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_93;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_94;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_95;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_96;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_97;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_98;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_99;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_100;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_101;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_101) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_102;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_103;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_104;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_104) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_105;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_106;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_107;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_108;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_109;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_110;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_111;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_111) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_112;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_fsquare_inner_BB_0_113;
if (reset == 1'b0 && ^(LEGUP_F_fsquare_inner_BB_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_fsquare_inner_BB_0_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 7'd0;
if (reset == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_1 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_3))
begin
fsquare_inner_0_1_reg <= fsquare_inner_0_1;
if (reset == 1'b0 && ^(fsquare_inner_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_1_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_2 = fsquare_inner_0_2_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %2 = mul nsw i32 %1, %1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
fsquare_inner_0_2_reg <= fsquare_inner_0_2;
if (reset == 1'b0 && ^(fsquare_inner_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_2_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %2 = mul nsw i32 %1, %1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
fsquare_inner_0_2_reg <= fsquare_inner_0_2;
if (reset == 1'b0 && ^(fsquare_inner_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_2_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_3 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_7))
begin
fsquare_inner_0_3_reg <= fsquare_inner_0_3;
if (reset == 1'b0 && ^(fsquare_inner_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_3_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %4 = getelementptr inbounds i32* %in, i32 1*/
begin
fsquare_inner_0_4 = (arg_in + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %4 = getelementptr inbounds i32* %in, i32 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_4_reg <= fsquare_inner_0_4;
if (reset == 1'b0 && ^(fsquare_inner_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_4_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_5 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_7))
begin
fsquare_inner_0_5_reg <= fsquare_inner_0_5;
if (reset == 1'b0 && ^(fsquare_inner_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_5_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %6 = shl i32 %3, 1*/
begin
fsquare_inner_0_6 = (fsquare_inner_0_3 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %6 = shl i32 %3, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_7))
begin
fsquare_inner_0_6_reg <= fsquare_inner_0_6;
if (reset == 1'b0 && ^(fsquare_inner_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_6_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_7 = fsquare_inner_0_7_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %7 = mul i32 %6, %5*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
fsquare_inner_0_7_reg <= fsquare_inner_0_7;
if (reset == 1'b0 && ^(fsquare_inner_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_7_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %7 = mul i32 %6, %5*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
fsquare_inner_0_7_reg <= fsquare_inner_0_7;
if (reset == 1'b0 && ^(fsquare_inner_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_7_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %8 = getelementptr inbounds i32* %output, i32 1*/
begin
fsquare_inner_0_8 = (arg_output + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %8 = getelementptr inbounds i32* %output, i32 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_8_reg <= fsquare_inner_0_8;
if (reset == 1'b0 && ^(fsquare_inner_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_8_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_11))
begin
fsquare_inner_0_9_reg <= fsquare_inner_0_9;
if (reset == 1'b0 && ^(fsquare_inner_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_9_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_10 = fsquare_inner_0_10_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %10 = mul nsw i32 %9, %9*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_12))
begin
fsquare_inner_0_10_reg <= fsquare_inner_0_10;
if (reset == 1'b0 && ^(fsquare_inner_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_10_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %10 = mul nsw i32 %9, %9*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_12))
begin
fsquare_inner_0_10_reg <= fsquare_inner_0_10;
if (reset == 1'b0 && ^(fsquare_inner_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_10_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_11 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_11))
begin
fsquare_inner_0_11_reg <= fsquare_inner_0_11;
if (reset == 1'b0 && ^(fsquare_inner_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_11_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %12 = getelementptr inbounds i32* %in, i32 2*/
begin
fsquare_inner_0_12 = (arg_in + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %12 = getelementptr inbounds i32* %in, i32 2*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_12_reg <= fsquare_inner_0_12;
if (reset == 1'b0 && ^(fsquare_inner_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_12_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_13 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_12))
begin
fsquare_inner_0_13_reg <= fsquare_inner_0_13;
if (reset == 1'b0 && ^(fsquare_inner_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_13_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_14 = fsquare_inner_0_14_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %14 = mul nsw i32 %13, %11*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
fsquare_inner_0_14_reg <= fsquare_inner_0_14;
if (reset == 1'b0 && ^(fsquare_inner_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_14_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %14 = mul nsw i32 %13, %11*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
fsquare_inner_0_14_reg <= fsquare_inner_0_14;
if (reset == 1'b0 && ^(fsquare_inner_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_14_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %15 = add nsw i32 %14, %10*/
begin
fsquare_inner_0_15 = (fsquare_inner_0_14 + fsquare_inner_0_10_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %15 = add nsw i32 %14, %10*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
fsquare_inner_0_15_reg <= fsquare_inner_0_15;
if (reset == 1'b0 && ^(fsquare_inner_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_15_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %16 = shl nsw i32 %15, 1*/
begin
fsquare_inner_0_16 = (fsquare_inner_0_15 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %16 = shl nsw i32 %15, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
fsquare_inner_0_16_reg <= fsquare_inner_0_16;
if (reset == 1'b0 && ^(fsquare_inner_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_16_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %17 = getelementptr inbounds i32* %output, i32 2*/
begin
fsquare_inner_0_17 = (arg_output + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %17 = getelementptr inbounds i32* %output, i32 2*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_17_reg <= fsquare_inner_0_17;
if (reset == 1'b0 && ^(fsquare_inner_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_17_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_18 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_16))
begin
fsquare_inner_0_18_reg <= fsquare_inner_0_18;
if (reset == 1'b0 && ^(fsquare_inner_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_18_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_19 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_16))
begin
fsquare_inner_0_19_reg <= fsquare_inner_0_19;
if (reset == 1'b0 && ^(fsquare_inner_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_19_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_20 = fsquare_inner_0_20_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %20 = mul nsw i32 %19, %18*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_17))
begin
fsquare_inner_0_20_reg <= fsquare_inner_0_20;
if (reset == 1'b0 && ^(fsquare_inner_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_20_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %20 = mul nsw i32 %19, %18*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_17))
begin
fsquare_inner_0_20_reg <= fsquare_inner_0_20;
if (reset == 1'b0 && ^(fsquare_inner_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_20_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_21 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_17))
begin
fsquare_inner_0_21_reg <= fsquare_inner_0_21;
if (reset == 1'b0 && ^(fsquare_inner_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_21_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %22 = getelementptr inbounds i32* %in, i32 3*/
begin
fsquare_inner_0_22 = (arg_in + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %22 = getelementptr inbounds i32* %in, i32 3*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_22_reg <= fsquare_inner_0_22;
if (reset == 1'b0 && ^(fsquare_inner_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_22_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_23 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_17))
begin
fsquare_inner_0_23_reg <= fsquare_inner_0_23;
if (reset == 1'b0 && ^(fsquare_inner_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_23_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_24 = fsquare_inner_0_24_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %24 = mul nsw i32 %23, %21*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
fsquare_inner_0_24_reg <= fsquare_inner_0_24;
if (reset == 1'b0 && ^(fsquare_inner_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_24_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %24 = mul nsw i32 %23, %21*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
fsquare_inner_0_24_reg <= fsquare_inner_0_24;
if (reset == 1'b0 && ^(fsquare_inner_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_24_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %25 = add nsw i32 %24, %20*/
begin
fsquare_inner_0_25 = (fsquare_inner_0_24 + fsquare_inner_0_20_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %25 = add nsw i32 %24, %20*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
fsquare_inner_0_25_reg <= fsquare_inner_0_25;
if (reset == 1'b0 && ^(fsquare_inner_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_25_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %26 = shl nsw i32 %25, 1*/
begin
fsquare_inner_0_26 = (fsquare_inner_0_25 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %26 = shl nsw i32 %25, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
fsquare_inner_0_26_reg <= fsquare_inner_0_26;
if (reset == 1'b0 && ^(fsquare_inner_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_26_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %27 = getelementptr inbounds i32* %output, i32 3*/
begin
fsquare_inner_0_27 = (arg_output + (4 * 32'd3));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %27 = getelementptr inbounds i32* %output, i32 3*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_27_reg <= fsquare_inner_0_27;
if (reset == 1'b0 && ^(fsquare_inner_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_27_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_28 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
fsquare_inner_0_28_reg <= fsquare_inner_0_28;
if (reset == 1'b0 && ^(fsquare_inner_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_28_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_29 = fsquare_inner_0_29_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %29 = mul nsw i32 %28, %28*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_22))
begin
fsquare_inner_0_29_reg <= fsquare_inner_0_29;
if (reset == 1'b0 && ^(fsquare_inner_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_29_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %29 = mul nsw i32 %28, %28*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_22))
begin
fsquare_inner_0_29_reg <= fsquare_inner_0_29;
if (reset == 1'b0 && ^(fsquare_inner_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_29_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_30 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
fsquare_inner_0_30_reg <= fsquare_inner_0_30;
if (reset == 1'b0 && ^(fsquare_inner_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_30_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_31 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_22))
begin
fsquare_inner_0_31_reg <= fsquare_inner_0_31;
if (reset == 1'b0 && ^(fsquare_inner_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_31_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %32 = shl i32 %30, 2*/
begin
fsquare_inner_0_32 = (fsquare_inner_0_30 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %32 = shl i32 %30, 2*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
fsquare_inner_0_32_reg <= fsquare_inner_0_32;
if (reset == 1'b0 && ^(fsquare_inner_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_32_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_33 = fsquare_inner_0_33_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %33 = mul i32 %32, %31*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_23))
begin
fsquare_inner_0_33_reg <= fsquare_inner_0_33;
if (reset == 1'b0 && ^(fsquare_inner_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_33_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %33 = mul i32 %32, %31*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_23))
begin
fsquare_inner_0_33_reg <= fsquare_inner_0_33;
if (reset == 1'b0 && ^(fsquare_inner_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_33_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_34 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_22))
begin
fsquare_inner_0_34_reg <= fsquare_inner_0_34;
if (reset == 1'b0 && ^(fsquare_inner_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_34_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %35 = getelementptr inbounds i32* %in, i32 4*/
begin
fsquare_inner_0_35 = (arg_in + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %35 = getelementptr inbounds i32* %in, i32 4*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_35_reg <= fsquare_inner_0_35;
if (reset == 1'b0 && ^(fsquare_inner_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_35_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_36 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_23))
begin
fsquare_inner_0_36_reg <= fsquare_inner_0_36;
if (reset == 1'b0 && ^(fsquare_inner_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_36_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %37 = shl i32 %34, 1*/
begin
fsquare_inner_0_37 = (fsquare_inner_0_34 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %37 = shl i32 %34, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_22))
begin
fsquare_inner_0_37_reg <= fsquare_inner_0_37;
if (reset == 1'b0 && ^(fsquare_inner_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_37_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_38 = fsquare_inner_0_38_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %38 = mul i32 %37, %36*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
fsquare_inner_0_38_reg <= fsquare_inner_0_38;
if (reset == 1'b0 && ^(fsquare_inner_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_38_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %38 = mul i32 %37, %36*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
fsquare_inner_0_38_reg <= fsquare_inner_0_38;
if (reset == 1'b0 && ^(fsquare_inner_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_38_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %39 = add i32 %33, %29*/
begin
fsquare_inner_0_39 = (fsquare_inner_0_33 + fsquare_inner_0_29_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %39 = add i32 %33, %29*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_23))
begin
fsquare_inner_0_39_reg <= fsquare_inner_0_39;
if (reset == 1'b0 && ^(fsquare_inner_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_39_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %40 = add i32 %39, %38*/
begin
fsquare_inner_0_40 = (fsquare_inner_0_39_reg + fsquare_inner_0_38);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %40 = add i32 %39, %38*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
fsquare_inner_0_40_reg <= fsquare_inner_0_40;
if (reset == 1'b0 && ^(fsquare_inner_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_40_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %41 = getelementptr inbounds i32* %output, i32 4*/
begin
fsquare_inner_0_41 = (arg_output + (4 * 32'd4));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %41 = getelementptr inbounds i32* %output, i32 4*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_41_reg <= fsquare_inner_0_41;
if (reset == 1'b0 && ^(fsquare_inner_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_41_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_42 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
fsquare_inner_0_42_reg <= fsquare_inner_0_42;
if (reset == 1'b0 && ^(fsquare_inner_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_42_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_43 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
fsquare_inner_0_43_reg <= fsquare_inner_0_43;
if (reset == 1'b0 && ^(fsquare_inner_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_43_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_44 = fsquare_inner_0_44_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %44 = mul nsw i32 %43, %42*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_28))
begin
fsquare_inner_0_44_reg <= fsquare_inner_0_44;
if (reset == 1'b0 && ^(fsquare_inner_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_44_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %44 = mul nsw i32 %43, %42*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_28))
begin
fsquare_inner_0_44_reg <= fsquare_inner_0_44;
if (reset == 1'b0 && ^(fsquare_inner_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_44_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_45 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_28))
begin
fsquare_inner_0_45_reg <= fsquare_inner_0_45;
if (reset == 1'b0 && ^(fsquare_inner_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_45_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_46 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_28))
begin
fsquare_inner_0_46_reg <= fsquare_inner_0_46;
if (reset == 1'b0 && ^(fsquare_inner_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_46_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_47 = fsquare_inner_0_47_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %47 = mul nsw i32 %46, %45*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_29))
begin
fsquare_inner_0_47_reg <= fsquare_inner_0_47;
if (reset == 1'b0 && ^(fsquare_inner_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_47_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %47 = mul nsw i32 %46, %45*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_29))
begin
fsquare_inner_0_47_reg <= fsquare_inner_0_47;
if (reset == 1'b0 && ^(fsquare_inner_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_47_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_48 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_29))
begin
fsquare_inner_0_48_reg <= fsquare_inner_0_48;
if (reset == 1'b0 && ^(fsquare_inner_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_48_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %49 = getelementptr inbounds i32* %in, i32 5*/
begin
fsquare_inner_0_49 = (arg_in + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %49 = getelementptr inbounds i32* %in, i32 5*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_49_reg <= fsquare_inner_0_49;
if (reset == 1'b0 && ^(fsquare_inner_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_49_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_50 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_29))
begin
fsquare_inner_0_50_reg <= fsquare_inner_0_50;
if (reset == 1'b0 && ^(fsquare_inner_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_50_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_51 = fsquare_inner_0_51_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %51 = mul nsw i32 %50, %48*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
fsquare_inner_0_51_reg <= fsquare_inner_0_51;
if (reset == 1'b0 && ^(fsquare_inner_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_51_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %51 = mul nsw i32 %50, %48*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
fsquare_inner_0_51_reg <= fsquare_inner_0_51;
if (reset == 1'b0 && ^(fsquare_inner_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_51_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %52 = add i32 %47, %44*/
begin
fsquare_inner_0_52 = (fsquare_inner_0_47 + fsquare_inner_0_44_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %52 = add i32 %47, %44*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_29))
begin
fsquare_inner_0_52_reg <= fsquare_inner_0_52;
if (reset == 1'b0 && ^(fsquare_inner_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_52_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %53 = add i32 %52, %51*/
begin
fsquare_inner_0_53 = (fsquare_inner_0_52_reg + fsquare_inner_0_51);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %53 = add i32 %52, %51*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
fsquare_inner_0_53_reg <= fsquare_inner_0_53;
if (reset == 1'b0 && ^(fsquare_inner_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_53_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %54 = shl nsw i32 %53, 1*/
begin
fsquare_inner_0_54 = (fsquare_inner_0_53 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %54 = shl nsw i32 %53, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
fsquare_inner_0_54_reg <= fsquare_inner_0_54;
if (reset == 1'b0 && ^(fsquare_inner_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_54_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %55 = getelementptr inbounds i32* %output, i32 5*/
begin
fsquare_inner_0_55 = (arg_output + (4 * 32'd5));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %55 = getelementptr inbounds i32* %output, i32 5*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_55_reg <= fsquare_inner_0_55;
if (reset == 1'b0 && ^(fsquare_inner_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_55_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_56 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
fsquare_inner_0_56_reg <= fsquare_inner_0_56;
if (reset == 1'b0 && ^(fsquare_inner_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_56_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_57 = fsquare_inner_0_57_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %57 = mul nsw i32 %56, %56*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
fsquare_inner_0_57_reg <= fsquare_inner_0_57;
if (reset == 1'b0 && ^(fsquare_inner_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_57_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %57 = mul nsw i32 %56, %56*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
fsquare_inner_0_57_reg <= fsquare_inner_0_57;
if (reset == 1'b0 && ^(fsquare_inner_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_57_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_58 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
fsquare_inner_0_58_reg <= fsquare_inner_0_58;
if (reset == 1'b0 && ^(fsquare_inner_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_58_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_59 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
fsquare_inner_0_59_reg <= fsquare_inner_0_59;
if (reset == 1'b0 && ^(fsquare_inner_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_59_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_60 = fsquare_inner_0_60_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %60 = mul nsw i32 %59, %58*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_60_reg <= fsquare_inner_0_60;
if (reset == 1'b0 && ^(fsquare_inner_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_60_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %60 = mul nsw i32 %59, %58*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_60_reg <= fsquare_inner_0_60;
if (reset == 1'b0 && ^(fsquare_inner_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_60_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_61 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
fsquare_inner_0_61_reg <= fsquare_inner_0_61;
if (reset == 1'b0 && ^(fsquare_inner_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_61_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %62 = getelementptr inbounds i32* %in, i32 6*/
begin
fsquare_inner_0_62 = (arg_in + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %62 = getelementptr inbounds i32* %in, i32 6*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_62_reg <= fsquare_inner_0_62;
if (reset == 1'b0 && ^(fsquare_inner_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_62_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_63 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_63_reg <= fsquare_inner_0_63;
if (reset == 1'b0 && ^(fsquare_inner_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_63_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_64 = fsquare_inner_0_64_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %64 = mul nsw i32 %63, %61*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_36))
begin
fsquare_inner_0_64_reg <= fsquare_inner_0_64;
if (reset == 1'b0 && ^(fsquare_inner_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_64_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %64 = mul nsw i32 %63, %61*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_36))
begin
fsquare_inner_0_64_reg <= fsquare_inner_0_64;
if (reset == 1'b0 && ^(fsquare_inner_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_64_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_65 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_65_reg <= fsquare_inner_0_65;
if (reset == 1'b0 && ^(fsquare_inner_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_65_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_66 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_36))
begin
fsquare_inner_0_66_reg <= fsquare_inner_0_66;
if (reset == 1'b0 && ^(fsquare_inner_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_66_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %67 = shl i32 %65, 1*/
begin
fsquare_inner_0_67 = (fsquare_inner_0_65 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %67 = shl i32 %65, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_67_reg <= fsquare_inner_0_67;
if (reset == 1'b0 && ^(fsquare_inner_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_67_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_68 = fsquare_inner_0_68_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %68 = mul i32 %67, %66*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
fsquare_inner_0_68_reg <= fsquare_inner_0_68;
if (reset == 1'b0 && ^(fsquare_inner_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_68_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %68 = mul i32 %67, %66*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
fsquare_inner_0_68_reg <= fsquare_inner_0_68;
if (reset == 1'b0 && ^(fsquare_inner_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_68_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %69 = add i32 %60, %57*/
begin
fsquare_inner_0_69 = (fsquare_inner_0_60 + fsquare_inner_0_57_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %69 = add i32 %60, %57*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_35))
begin
fsquare_inner_0_69_reg <= fsquare_inner_0_69;
if (reset == 1'b0 && ^(fsquare_inner_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_69_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %70 = add i32 %69, %64*/
begin
fsquare_inner_0_70 = (fsquare_inner_0_69_reg + fsquare_inner_0_64);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %70 = add i32 %69, %64*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_36))
begin
fsquare_inner_0_70_reg <= fsquare_inner_0_70;
if (reset == 1'b0 && ^(fsquare_inner_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_70_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %71 = add i32 %70, %68*/
begin
fsquare_inner_0_71 = (fsquare_inner_0_70_reg + fsquare_inner_0_68);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %71 = add i32 %70, %68*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
fsquare_inner_0_71_reg <= fsquare_inner_0_71;
if (reset == 1'b0 && ^(fsquare_inner_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_71_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %72 = shl nsw i32 %71, 1*/
begin
fsquare_inner_0_72 = (fsquare_inner_0_71 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %72 = shl nsw i32 %71, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
fsquare_inner_0_72_reg <= fsquare_inner_0_72;
if (reset == 1'b0 && ^(fsquare_inner_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_72_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %73 = getelementptr inbounds i32* %output, i32 6*/
begin
fsquare_inner_0_73 = (arg_output + (4 * 32'd6));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %73 = getelementptr inbounds i32* %output, i32 6*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_73_reg <= fsquare_inner_0_73;
if (reset == 1'b0 && ^(fsquare_inner_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_73_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_74 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
fsquare_inner_0_74_reg <= fsquare_inner_0_74;
if (reset == 1'b0 && ^(fsquare_inner_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_74_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_75 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
fsquare_inner_0_75_reg <= fsquare_inner_0_75;
if (reset == 1'b0 && ^(fsquare_inner_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_75_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_76 = fsquare_inner_0_76_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %76 = mul nsw i32 %75, %74*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
fsquare_inner_0_76_reg <= fsquare_inner_0_76;
if (reset == 1'b0 && ^(fsquare_inner_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_76_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %76 = mul nsw i32 %75, %74*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
fsquare_inner_0_76_reg <= fsquare_inner_0_76;
if (reset == 1'b0 && ^(fsquare_inner_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_76_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_77 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
fsquare_inner_0_77_reg <= fsquare_inner_0_77;
if (reset == 1'b0 && ^(fsquare_inner_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_77_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_78 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
fsquare_inner_0_78_reg <= fsquare_inner_0_78;
if (reset == 1'b0 && ^(fsquare_inner_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_78_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_79 = fsquare_inner_0_79_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %79 = mul nsw i32 %78, %77*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_42))
begin
fsquare_inner_0_79_reg <= fsquare_inner_0_79;
if (reset == 1'b0 && ^(fsquare_inner_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_79_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %79 = mul nsw i32 %78, %77*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_42))
begin
fsquare_inner_0_79_reg <= fsquare_inner_0_79;
if (reset == 1'b0 && ^(fsquare_inner_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_79_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_80 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_42))
begin
fsquare_inner_0_80_reg <= fsquare_inner_0_80;
if (reset == 1'b0 && ^(fsquare_inner_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_80_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_81 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_42))
begin
fsquare_inner_0_81_reg <= fsquare_inner_0_81;
if (reset == 1'b0 && ^(fsquare_inner_0_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_81_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_82 = fsquare_inner_0_82_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %82 = mul nsw i32 %81, %80*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_43))
begin
fsquare_inner_0_82_reg <= fsquare_inner_0_82;
if (reset == 1'b0 && ^(fsquare_inner_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_82_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %82 = mul nsw i32 %81, %80*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_43))
begin
fsquare_inner_0_82_reg <= fsquare_inner_0_82;
if (reset == 1'b0 && ^(fsquare_inner_0_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_82_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_83 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_43))
begin
fsquare_inner_0_83_reg <= fsquare_inner_0_83;
if (reset == 1'b0 && ^(fsquare_inner_0_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_83_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %84 = getelementptr inbounds i32* %in, i32 7*/
begin
fsquare_inner_0_84 = (arg_in + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %84 = getelementptr inbounds i32* %in, i32 7*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_84_reg <= fsquare_inner_0_84;
if (reset == 1'b0 && ^(fsquare_inner_0_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_84_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_85 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_43))
begin
fsquare_inner_0_85_reg <= fsquare_inner_0_85;
if (reset == 1'b0 && ^(fsquare_inner_0_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_85_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_86 = fsquare_inner_0_86_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %86 = mul nsw i32 %85, %83*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
fsquare_inner_0_86_reg <= fsquare_inner_0_86;
if (reset == 1'b0 && ^(fsquare_inner_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_86_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %86 = mul nsw i32 %85, %83*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
fsquare_inner_0_86_reg <= fsquare_inner_0_86;
if (reset == 1'b0 && ^(fsquare_inner_0_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_86_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %87 = add i32 %79, %76*/
begin
fsquare_inner_0_87 = (fsquare_inner_0_79 + fsquare_inner_0_76_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %87 = add i32 %79, %76*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_42))
begin
fsquare_inner_0_87_reg <= fsquare_inner_0_87;
if (reset == 1'b0 && ^(fsquare_inner_0_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_87_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %88 = add i32 %87, %82*/
begin
fsquare_inner_0_88 = (fsquare_inner_0_87_reg + fsquare_inner_0_82);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %88 = add i32 %87, %82*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_43))
begin
fsquare_inner_0_88_reg <= fsquare_inner_0_88;
if (reset == 1'b0 && ^(fsquare_inner_0_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_88_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %89 = add i32 %88, %86*/
begin
fsquare_inner_0_89 = (fsquare_inner_0_88_reg + fsquare_inner_0_86);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %89 = add i32 %88, %86*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
fsquare_inner_0_89_reg <= fsquare_inner_0_89;
if (reset == 1'b0 && ^(fsquare_inner_0_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_89_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %90 = shl nsw i32 %89, 1*/
begin
fsquare_inner_0_90 = (fsquare_inner_0_89 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %90 = shl nsw i32 %89, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
fsquare_inner_0_90_reg <= fsquare_inner_0_90;
if (reset == 1'b0 && ^(fsquare_inner_0_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_90_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %91 = getelementptr inbounds i32* %output, i32 7*/
begin
fsquare_inner_0_91 = (arg_output + (4 * 32'd7));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %91 = getelementptr inbounds i32* %output, i32 7*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_91_reg <= fsquare_inner_0_91;
if (reset == 1'b0 && ^(fsquare_inner_0_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_91_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_92 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
fsquare_inner_0_92_reg <= fsquare_inner_0_92;
if (reset == 1'b0 && ^(fsquare_inner_0_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_92_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_93 = fsquare_inner_0_93_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %93 = mul nsw i32 %92, %92*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
fsquare_inner_0_93_reg <= fsquare_inner_0_93;
if (reset == 1'b0 && ^(fsquare_inner_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_93_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %93 = mul nsw i32 %92, %92*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
fsquare_inner_0_93_reg <= fsquare_inner_0_93;
if (reset == 1'b0 && ^(fsquare_inner_0_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_93_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_94 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
fsquare_inner_0_94_reg <= fsquare_inner_0_94;
if (reset == 1'b0 && ^(fsquare_inner_0_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_94_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_95 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
fsquare_inner_0_95_reg <= fsquare_inner_0_95;
if (reset == 1'b0 && ^(fsquare_inner_0_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_95_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_96 = fsquare_inner_0_96_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %96 = mul nsw i32 %95, %94*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
fsquare_inner_0_96_reg <= fsquare_inner_0_96;
if (reset == 1'b0 && ^(fsquare_inner_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_96_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %96 = mul nsw i32 %95, %94*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
fsquare_inner_0_96_reg <= fsquare_inner_0_96;
if (reset == 1'b0 && ^(fsquare_inner_0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_96_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_97 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
fsquare_inner_0_97_reg <= fsquare_inner_0_97;
if (reset == 1'b0 && ^(fsquare_inner_0_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_97_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %98 = getelementptr inbounds i32* %in, i32 8*/
begin
fsquare_inner_0_98 = (arg_in + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %98 = getelementptr inbounds i32* %in, i32 8*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_98_reg <= fsquare_inner_0_98;
if (reset == 1'b0 && ^(fsquare_inner_0_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_98_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_99 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
fsquare_inner_0_99_reg <= fsquare_inner_0_99;
if (reset == 1'b0 && ^(fsquare_inner_0_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_99_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_100 = fsquare_inner_0_100_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %100 = mul nsw i32 %99, %97*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_50))
begin
fsquare_inner_0_100_reg <= fsquare_inner_0_100;
if (reset == 1'b0 && ^(fsquare_inner_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_100_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %100 = mul nsw i32 %99, %97*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_50))
begin
fsquare_inner_0_100_reg <= fsquare_inner_0_100;
if (reset == 1'b0 && ^(fsquare_inner_0_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_100_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_101 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
fsquare_inner_0_101_reg <= fsquare_inner_0_101;
if (reset == 1'b0 && ^(fsquare_inner_0_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_101_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_102 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_50))
begin
fsquare_inner_0_102_reg <= fsquare_inner_0_102;
if (reset == 1'b0 && ^(fsquare_inner_0_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_102_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_103 = fsquare_inner_0_103_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %103 = mul nsw i32 %102, %101*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_51))
begin
fsquare_inner_0_103_reg <= fsquare_inner_0_103;
if (reset == 1'b0 && ^(fsquare_inner_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_103_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %103 = mul nsw i32 %102, %101*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_51))
begin
fsquare_inner_0_103_reg <= fsquare_inner_0_103;
if (reset == 1'b0 && ^(fsquare_inner_0_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_103_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_104 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_50))
begin
fsquare_inner_0_104_reg <= fsquare_inner_0_104;
if (reset == 1'b0 && ^(fsquare_inner_0_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_104_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_105 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_51))
begin
fsquare_inner_0_105_reg <= fsquare_inner_0_105;
if (reset == 1'b0 && ^(fsquare_inner_0_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_105_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_106 = fsquare_inner_0_106_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %106 = mul nsw i32 %105, %104*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_106_reg <= fsquare_inner_0_106;
if (reset == 1'b0 && ^(fsquare_inner_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_106_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %106 = mul nsw i32 %105, %104*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_106_reg <= fsquare_inner_0_106;
if (reset == 1'b0 && ^(fsquare_inner_0_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_106_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %107 = add nsw i32 %106, %103*/
begin
fsquare_inner_0_107 = (fsquare_inner_0_106 + fsquare_inner_0_103_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %107 = add nsw i32 %106, %103*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_107_reg <= fsquare_inner_0_107;
if (reset == 1'b0 && ^(fsquare_inner_0_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_107_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %108 = shl i32 %107, 1*/
begin
fsquare_inner_0_108 = (fsquare_inner_0_107 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %108 = shl i32 %107, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_108_reg <= fsquare_inner_0_108;
if (reset == 1'b0 && ^(fsquare_inner_0_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_108_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %109 = add i32 %100, %96*/
begin
fsquare_inner_0_109 = (fsquare_inner_0_100 + fsquare_inner_0_96_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %109 = add i32 %100, %96*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_50))
begin
fsquare_inner_0_109_reg <= fsquare_inner_0_109;
if (reset == 1'b0 && ^(fsquare_inner_0_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_109_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %110 = add i32 %109, %108*/
begin
fsquare_inner_0_110 = (fsquare_inner_0_109_reg + fsquare_inner_0_108);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %110 = add i32 %109, %108*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_110_reg <= fsquare_inner_0_110;
if (reset == 1'b0 && ^(fsquare_inner_0_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_110_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %111 = shl i32 %110, 1*/
begin
fsquare_inner_0_111 = (fsquare_inner_0_110 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %111 = shl i32 %110, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_111_reg <= fsquare_inner_0_111;
if (reset == 1'b0 && ^(fsquare_inner_0_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_111_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %112 = add nsw i32 %111, %93*/
begin
fsquare_inner_0_112 = (fsquare_inner_0_111 + fsquare_inner_0_93_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %112 = add nsw i32 %111, %93*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
fsquare_inner_0_112_reg <= fsquare_inner_0_112;
if (reset == 1'b0 && ^(fsquare_inner_0_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_112_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %113 = getelementptr inbounds i32* %output, i32 8*/
begin
fsquare_inner_0_113 = (arg_output + (4 * 32'd8));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %113 = getelementptr inbounds i32* %output, i32 8*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_113_reg <= fsquare_inner_0_113;
if (reset == 1'b0 && ^(fsquare_inner_0_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_113_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_114 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
fsquare_inner_0_114_reg <= fsquare_inner_0_114;
if (reset == 1'b0 && ^(fsquare_inner_0_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_114_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_115 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
fsquare_inner_0_115_reg <= fsquare_inner_0_115;
if (reset == 1'b0 && ^(fsquare_inner_0_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_115_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_116 = fsquare_inner_0_116_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %116 = mul nsw i32 %115, %114*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
fsquare_inner_0_116_reg <= fsquare_inner_0_116;
if (reset == 1'b0 && ^(fsquare_inner_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_116_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %116 = mul nsw i32 %115, %114*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
fsquare_inner_0_116_reg <= fsquare_inner_0_116;
if (reset == 1'b0 && ^(fsquare_inner_0_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_116_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_117 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
fsquare_inner_0_117_reg <= fsquare_inner_0_117;
if (reset == 1'b0 && ^(fsquare_inner_0_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_117_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_118 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
fsquare_inner_0_118_reg <= fsquare_inner_0_118;
if (reset == 1'b0 && ^(fsquare_inner_0_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_118_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_119 = fsquare_inner_0_119_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %119 = mul nsw i32 %118, %117*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
fsquare_inner_0_119_reg <= fsquare_inner_0_119;
if (reset == 1'b0 && ^(fsquare_inner_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_119_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %119 = mul nsw i32 %118, %117*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
fsquare_inner_0_119_reg <= fsquare_inner_0_119;
if (reset == 1'b0 && ^(fsquare_inner_0_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_119_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_120 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
fsquare_inner_0_120_reg <= fsquare_inner_0_120;
if (reset == 1'b0 && ^(fsquare_inner_0_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_120_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_121 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
fsquare_inner_0_121_reg <= fsquare_inner_0_121;
if (reset == 1'b0 && ^(fsquare_inner_0_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_121_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_122 = fsquare_inner_0_122_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %122 = mul nsw i32 %121, %120*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_58))
begin
fsquare_inner_0_122_reg <= fsquare_inner_0_122;
if (reset == 1'b0 && ^(fsquare_inner_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_122_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %122 = mul nsw i32 %121, %120*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_58))
begin
fsquare_inner_0_122_reg <= fsquare_inner_0_122;
if (reset == 1'b0 && ^(fsquare_inner_0_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_122_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_123 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_58))
begin
fsquare_inner_0_123_reg <= fsquare_inner_0_123;
if (reset == 1'b0 && ^(fsquare_inner_0_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_123_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_124 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_58))
begin
fsquare_inner_0_124_reg <= fsquare_inner_0_124;
if (reset == 1'b0 && ^(fsquare_inner_0_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_124_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_125 = fsquare_inner_0_125_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %125 = mul nsw i32 %124, %123*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_59))
begin
fsquare_inner_0_125_reg <= fsquare_inner_0_125;
if (reset == 1'b0 && ^(fsquare_inner_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_125_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %125 = mul nsw i32 %124, %123*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_59))
begin
fsquare_inner_0_125_reg <= fsquare_inner_0_125;
if (reset == 1'b0 && ^(fsquare_inner_0_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_125_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
begin
fsquare_inner_0_126 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_59))
begin
fsquare_inner_0_126_reg <= fsquare_inner_0_126;
if (reset == 1'b0 && ^(fsquare_inner_0_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_126_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %127 = getelementptr inbounds i32* %in, i32 9*/
begin
fsquare_inner_0_127 = (arg_in + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %127 = getelementptr inbounds i32* %in, i32 9*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_127_reg <= fsquare_inner_0_127;
if (reset == 1'b0 && ^(fsquare_inner_0_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_127_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_128 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_59))
begin
fsquare_inner_0_128_reg <= fsquare_inner_0_128;
if (reset == 1'b0 && ^(fsquare_inner_0_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_128_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_129 = fsquare_inner_0_129_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %129 = mul nsw i32 %128, %126*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
fsquare_inner_0_129_reg <= fsquare_inner_0_129;
if (reset == 1'b0 && ^(fsquare_inner_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_129_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %129 = mul nsw i32 %128, %126*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
fsquare_inner_0_129_reg <= fsquare_inner_0_129;
if (reset == 1'b0 && ^(fsquare_inner_0_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_129_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %130 = add i32 %119, %116*/
begin
fsquare_inner_0_130 = (fsquare_inner_0_119 + fsquare_inner_0_116_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %130 = add i32 %119, %116*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
fsquare_inner_0_130_reg <= fsquare_inner_0_130;
if (reset == 1'b0 && ^(fsquare_inner_0_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_130_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %131 = add i32 %130, %122*/
begin
fsquare_inner_0_131 = (fsquare_inner_0_130_reg + fsquare_inner_0_122);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %131 = add i32 %130, %122*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_58))
begin
fsquare_inner_0_131_reg <= fsquare_inner_0_131;
if (reset == 1'b0 && ^(fsquare_inner_0_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_131_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %132 = add i32 %131, %125*/
begin
fsquare_inner_0_132 = (fsquare_inner_0_131_reg + fsquare_inner_0_125);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %132 = add i32 %131, %125*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_59))
begin
fsquare_inner_0_132_reg <= fsquare_inner_0_132;
if (reset == 1'b0 && ^(fsquare_inner_0_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_132_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %133 = add i32 %132, %129*/
begin
fsquare_inner_0_133 = (fsquare_inner_0_132_reg + fsquare_inner_0_129);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %133 = add i32 %132, %129*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
fsquare_inner_0_133_reg <= fsquare_inner_0_133;
if (reset == 1'b0 && ^(fsquare_inner_0_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_133_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %134 = shl nsw i32 %133, 1*/
begin
fsquare_inner_0_134 = (fsquare_inner_0_133 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %134 = shl nsw i32 %133, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
fsquare_inner_0_134_reg <= fsquare_inner_0_134;
if (reset == 1'b0 && ^(fsquare_inner_0_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_134_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %135 = getelementptr inbounds i32* %output, i32 9*/
begin
fsquare_inner_0_135 = (arg_output + (4 * 32'd9));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %135 = getelementptr inbounds i32* %output, i32 9*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_135_reg <= fsquare_inner_0_135;
if (reset == 1'b0 && ^(fsquare_inner_0_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_135_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_136 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
fsquare_inner_0_136_reg <= fsquare_inner_0_136;
if (reset == 1'b0 && ^(fsquare_inner_0_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_136_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_137 = fsquare_inner_0_137_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %137 = mul nsw i32 %136, %136*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
fsquare_inner_0_137_reg <= fsquare_inner_0_137;
if (reset == 1'b0 && ^(fsquare_inner_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_137_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %137 = mul nsw i32 %136, %136*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
fsquare_inner_0_137_reg <= fsquare_inner_0_137;
if (reset == 1'b0 && ^(fsquare_inner_0_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_137_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_138 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
fsquare_inner_0_138_reg <= fsquare_inner_0_138;
if (reset == 1'b0 && ^(fsquare_inner_0_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_138_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_139 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
fsquare_inner_0_139_reg <= fsquare_inner_0_139;
if (reset == 1'b0 && ^(fsquare_inner_0_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_139_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_140 = fsquare_inner_0_140_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %140 = mul nsw i32 %139, %138*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
fsquare_inner_0_140_reg <= fsquare_inner_0_140;
if (reset == 1'b0 && ^(fsquare_inner_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_140_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %140 = mul nsw i32 %139, %138*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
fsquare_inner_0_140_reg <= fsquare_inner_0_140;
if (reset == 1'b0 && ^(fsquare_inner_0_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_140_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_141 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
fsquare_inner_0_141_reg <= fsquare_inner_0_141;
if (reset == 1'b0 && ^(fsquare_inner_0_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_141_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_142 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
fsquare_inner_0_142_reg <= fsquare_inner_0_142;
if (reset == 1'b0 && ^(fsquare_inner_0_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_142_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_143 = fsquare_inner_0_143_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %143 = mul nsw i32 %142, %141*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_66))
begin
fsquare_inner_0_143_reg <= fsquare_inner_0_143;
if (reset == 1'b0 && ^(fsquare_inner_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_143_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %143 = mul nsw i32 %142, %141*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_66))
begin
fsquare_inner_0_143_reg <= fsquare_inner_0_143;
if (reset == 1'b0 && ^(fsquare_inner_0_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_143_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_144 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
fsquare_inner_0_144_reg <= fsquare_inner_0_144;
if (reset == 1'b0 && ^(fsquare_inner_0_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_144_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_145 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_66))
begin
fsquare_inner_0_145_reg <= fsquare_inner_0_145;
if (reset == 1'b0 && ^(fsquare_inner_0_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_145_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_146 = fsquare_inner_0_146_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %146 = mul nsw i32 %145, %144*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_67))
begin
fsquare_inner_0_146_reg <= fsquare_inner_0_146;
if (reset == 1'b0 && ^(fsquare_inner_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_146_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %146 = mul nsw i32 %145, %144*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_67))
begin
fsquare_inner_0_146_reg <= fsquare_inner_0_146;
if (reset == 1'b0 && ^(fsquare_inner_0_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_146_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
begin
fsquare_inner_0_147 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_66))
begin
fsquare_inner_0_147_reg <= fsquare_inner_0_147;
if (reset == 1'b0 && ^(fsquare_inner_0_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_147_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_148 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_67))
begin
fsquare_inner_0_148_reg <= fsquare_inner_0_148;
if (reset == 1'b0 && ^(fsquare_inner_0_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_148_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_149 = fsquare_inner_0_149_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %149 = mul nsw i32 %148, %147*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_149_reg <= fsquare_inner_0_149;
if (reset == 1'b0 && ^(fsquare_inner_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_149_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %149 = mul nsw i32 %148, %147*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_149_reg <= fsquare_inner_0_149;
if (reset == 1'b0 && ^(fsquare_inner_0_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_149_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %150 = add nsw i32 %149, %146*/
begin
fsquare_inner_0_150 = (fsquare_inner_0_149 + fsquare_inner_0_146_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %150 = add nsw i32 %149, %146*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_150_reg <= fsquare_inner_0_150;
if (reset == 1'b0 && ^(fsquare_inner_0_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_150_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %151 = shl i32 %150, 1*/
begin
fsquare_inner_0_151 = (fsquare_inner_0_150 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %151 = shl i32 %150, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_151_reg <= fsquare_inner_0_151;
if (reset == 1'b0 && ^(fsquare_inner_0_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_151_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %152 = add i32 %140, %137*/
begin
fsquare_inner_0_152 = (fsquare_inner_0_140 + fsquare_inner_0_137_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %152 = add i32 %140, %137*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
fsquare_inner_0_152_reg <= fsquare_inner_0_152;
if (reset == 1'b0 && ^(fsquare_inner_0_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_152_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %153 = add i32 %152, %143*/
begin
fsquare_inner_0_153 = (fsquare_inner_0_152_reg + fsquare_inner_0_143);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %153 = add i32 %152, %143*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_66))
begin
fsquare_inner_0_153_reg <= fsquare_inner_0_153;
if (reset == 1'b0 && ^(fsquare_inner_0_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_153_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %154 = add i32 %153, %151*/
begin
fsquare_inner_0_154 = (fsquare_inner_0_153_reg + fsquare_inner_0_151);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %154 = add i32 %153, %151*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_154_reg <= fsquare_inner_0_154;
if (reset == 1'b0 && ^(fsquare_inner_0_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_154_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %155 = shl nsw i32 %154, 1*/
begin
fsquare_inner_0_155 = (fsquare_inner_0_154 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %155 = shl nsw i32 %154, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
fsquare_inner_0_155_reg <= fsquare_inner_0_155;
if (reset == 1'b0 && ^(fsquare_inner_0_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_155_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %156 = getelementptr inbounds i32* %output, i32 10*/
begin
fsquare_inner_0_156 = (arg_output + (4 * 32'd10));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %156 = getelementptr inbounds i32* %output, i32 10*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_156_reg <= fsquare_inner_0_156;
if (reset == 1'b0 && ^(fsquare_inner_0_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_156_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_157 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
fsquare_inner_0_157_reg <= fsquare_inner_0_157;
if (reset == 1'b0 && ^(fsquare_inner_0_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_157_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_158 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
fsquare_inner_0_158_reg <= fsquare_inner_0_158;
if (reset == 1'b0 && ^(fsquare_inner_0_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_158_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_159 = fsquare_inner_0_159_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %159 = mul nsw i32 %158, %157*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
fsquare_inner_0_159_reg <= fsquare_inner_0_159;
if (reset == 1'b0 && ^(fsquare_inner_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_159_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %159 = mul nsw i32 %158, %157*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
fsquare_inner_0_159_reg <= fsquare_inner_0_159;
if (reset == 1'b0 && ^(fsquare_inner_0_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_159_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_160 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
fsquare_inner_0_160_reg <= fsquare_inner_0_160;
if (reset == 1'b0 && ^(fsquare_inner_0_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_160_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_161 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
fsquare_inner_0_161_reg <= fsquare_inner_0_161;
if (reset == 1'b0 && ^(fsquare_inner_0_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_161_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_162 = fsquare_inner_0_162_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %162 = mul nsw i32 %161, %160*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_73))
begin
fsquare_inner_0_162_reg <= fsquare_inner_0_162;
if (reset == 1'b0 && ^(fsquare_inner_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_162_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %162 = mul nsw i32 %161, %160*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_73))
begin
fsquare_inner_0_162_reg <= fsquare_inner_0_162;
if (reset == 1'b0 && ^(fsquare_inner_0_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_162_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_163 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_73))
begin
fsquare_inner_0_163_reg <= fsquare_inner_0_163;
if (reset == 1'b0 && ^(fsquare_inner_0_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_163_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_164 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_73))
begin
fsquare_inner_0_164_reg <= fsquare_inner_0_164;
if (reset == 1'b0 && ^(fsquare_inner_0_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_164_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_165 = fsquare_inner_0_165_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %165 = mul nsw i32 %164, %163*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_74))
begin
fsquare_inner_0_165_reg <= fsquare_inner_0_165;
if (reset == 1'b0 && ^(fsquare_inner_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_165_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %165 = mul nsw i32 %164, %163*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_74))
begin
fsquare_inner_0_165_reg <= fsquare_inner_0_165;
if (reset == 1'b0 && ^(fsquare_inner_0_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_165_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
begin
fsquare_inner_0_166 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_74))
begin
fsquare_inner_0_166_reg <= fsquare_inner_0_166;
if (reset == 1'b0 && ^(fsquare_inner_0_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_166_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_167 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_74))
begin
fsquare_inner_0_167_reg <= fsquare_inner_0_167;
if (reset == 1'b0 && ^(fsquare_inner_0_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_167_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_168 = fsquare_inner_0_168_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %168 = mul nsw i32 %167, %166*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
fsquare_inner_0_168_reg <= fsquare_inner_0_168;
if (reset == 1'b0 && ^(fsquare_inner_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_168_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %168 = mul nsw i32 %167, %166*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
fsquare_inner_0_168_reg <= fsquare_inner_0_168;
if (reset == 1'b0 && ^(fsquare_inner_0_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_168_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %169 = add i32 %162, %159*/
begin
fsquare_inner_0_169 = (fsquare_inner_0_162 + fsquare_inner_0_159_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %169 = add i32 %162, %159*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_73))
begin
fsquare_inner_0_169_reg <= fsquare_inner_0_169;
if (reset == 1'b0 && ^(fsquare_inner_0_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_169_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %170 = add i32 %169, %165*/
begin
fsquare_inner_0_170 = (fsquare_inner_0_169_reg + fsquare_inner_0_165);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %170 = add i32 %169, %165*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_74))
begin
fsquare_inner_0_170_reg <= fsquare_inner_0_170;
if (reset == 1'b0 && ^(fsquare_inner_0_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_170_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %171 = add i32 %170, %168*/
begin
fsquare_inner_0_171 = (fsquare_inner_0_170_reg + fsquare_inner_0_168);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %171 = add i32 %170, %168*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
fsquare_inner_0_171_reg <= fsquare_inner_0_171;
if (reset == 1'b0 && ^(fsquare_inner_0_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_171_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %172 = shl nsw i32 %171, 1*/
begin
fsquare_inner_0_172 = (fsquare_inner_0_171 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %172 = shl nsw i32 %171, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
fsquare_inner_0_172_reg <= fsquare_inner_0_172;
if (reset == 1'b0 && ^(fsquare_inner_0_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_172_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %173 = getelementptr inbounds i32* %output, i32 11*/
begin
fsquare_inner_0_173 = (arg_output + (4 * 32'd11));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %173 = getelementptr inbounds i32* %output, i32 11*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_173_reg <= fsquare_inner_0_173;
if (reset == 1'b0 && ^(fsquare_inner_0_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_173_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_174 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
fsquare_inner_0_174_reg <= fsquare_inner_0_174;
if (reset == 1'b0 && ^(fsquare_inner_0_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_174_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_175 = fsquare_inner_0_175_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %175 = mul nsw i32 %174, %174*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
fsquare_inner_0_175_reg <= fsquare_inner_0_175;
if (reset == 1'b0 && ^(fsquare_inner_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_175_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %175 = mul nsw i32 %174, %174*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
fsquare_inner_0_175_reg <= fsquare_inner_0_175;
if (reset == 1'b0 && ^(fsquare_inner_0_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_175_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_176 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
fsquare_inner_0_176_reg <= fsquare_inner_0_176;
if (reset == 1'b0 && ^(fsquare_inner_0_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_176_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_177 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
fsquare_inner_0_177_reg <= fsquare_inner_0_177;
if (reset == 1'b0 && ^(fsquare_inner_0_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_177_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_178 = fsquare_inner_0_178_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %178 = mul nsw i32 %177, %176*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_80))
begin
fsquare_inner_0_178_reg <= fsquare_inner_0_178;
if (reset == 1'b0 && ^(fsquare_inner_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_178_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %178 = mul nsw i32 %177, %176*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_80))
begin
fsquare_inner_0_178_reg <= fsquare_inner_0_178;
if (reset == 1'b0 && ^(fsquare_inner_0_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_178_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_179 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
fsquare_inner_0_179_reg <= fsquare_inner_0_179;
if (reset == 1'b0 && ^(fsquare_inner_0_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_179_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_180 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_80))
begin
fsquare_inner_0_180_reg <= fsquare_inner_0_180;
if (reset == 1'b0 && ^(fsquare_inner_0_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_180_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_181 = fsquare_inner_0_181_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %181 = mul nsw i32 %180, %179*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_81))
begin
fsquare_inner_0_181_reg <= fsquare_inner_0_181;
if (reset == 1'b0 && ^(fsquare_inner_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_181_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %181 = mul nsw i32 %180, %179*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_81))
begin
fsquare_inner_0_181_reg <= fsquare_inner_0_181;
if (reset == 1'b0 && ^(fsquare_inner_0_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_181_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
begin
fsquare_inner_0_182 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_80))
begin
fsquare_inner_0_182_reg <= fsquare_inner_0_182;
if (reset == 1'b0 && ^(fsquare_inner_0_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_182_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_183 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_81))
begin
fsquare_inner_0_183_reg <= fsquare_inner_0_183;
if (reset == 1'b0 && ^(fsquare_inner_0_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_183_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_184 = fsquare_inner_0_184_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %184 = mul nsw i32 %183, %182*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_184_reg <= fsquare_inner_0_184;
if (reset == 1'b0 && ^(fsquare_inner_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_184_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %184 = mul nsw i32 %183, %182*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_184_reg <= fsquare_inner_0_184;
if (reset == 1'b0 && ^(fsquare_inner_0_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_184_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %185 = add nsw i32 %184, %181*/
begin
fsquare_inner_0_185 = (fsquare_inner_0_184 + fsquare_inner_0_181_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %185 = add nsw i32 %184, %181*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_185_reg <= fsquare_inner_0_185;
if (reset == 1'b0 && ^(fsquare_inner_0_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_185_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %186 = shl i32 %185, 1*/
begin
fsquare_inner_0_186 = (fsquare_inner_0_185 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %186 = shl i32 %185, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_186_reg <= fsquare_inner_0_186;
if (reset == 1'b0 && ^(fsquare_inner_0_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_186_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %187 = add nsw i32 %186, %178*/
begin
fsquare_inner_0_187 = (fsquare_inner_0_186 + fsquare_inner_0_178_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %187 = add nsw i32 %186, %178*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_187_reg <= fsquare_inner_0_187;
if (reset == 1'b0 && ^(fsquare_inner_0_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_187_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %188 = shl i32 %187, 1*/
begin
fsquare_inner_0_188 = (fsquare_inner_0_187 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %188 = shl i32 %187, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_188_reg <= fsquare_inner_0_188;
if (reset == 1'b0 && ^(fsquare_inner_0_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_188_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %189 = add nsw i32 %188, %175*/
begin
fsquare_inner_0_189 = (fsquare_inner_0_188 + fsquare_inner_0_175_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %189 = add nsw i32 %188, %175*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
fsquare_inner_0_189_reg <= fsquare_inner_0_189;
if (reset == 1'b0 && ^(fsquare_inner_0_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_189_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %190 = getelementptr inbounds i32* %output, i32 12*/
begin
fsquare_inner_0_190 = (arg_output + (4 * 32'd12));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %190 = getelementptr inbounds i32* %output, i32 12*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_190_reg <= fsquare_inner_0_190;
if (reset == 1'b0 && ^(fsquare_inner_0_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_190_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_191 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
fsquare_inner_0_191_reg <= fsquare_inner_0_191;
if (reset == 1'b0 && ^(fsquare_inner_0_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_191_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_192 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
fsquare_inner_0_192_reg <= fsquare_inner_0_192;
if (reset == 1'b0 && ^(fsquare_inner_0_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_192_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_193 = fsquare_inner_0_193_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_86))
begin
fsquare_inner_0_193_reg <= fsquare_inner_0_193;
if (reset == 1'b0 && ^(fsquare_inner_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_193_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_86))
begin
fsquare_inner_0_193_reg <= fsquare_inner_0_193;
if (reset == 1'b0 && ^(fsquare_inner_0_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_193_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_194 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_86))
begin
fsquare_inner_0_194_reg <= fsquare_inner_0_194;
if (reset == 1'b0 && ^(fsquare_inner_0_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_194_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_195 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_86))
begin
fsquare_inner_0_195_reg <= fsquare_inner_0_195;
if (reset == 1'b0 && ^(fsquare_inner_0_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_195_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_196 = fsquare_inner_0_196_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %196 = mul nsw i32 %195, %194*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_87))
begin
fsquare_inner_0_196_reg <= fsquare_inner_0_196;
if (reset == 1'b0 && ^(fsquare_inner_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_196_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %196 = mul nsw i32 %195, %194*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_87))
begin
fsquare_inner_0_196_reg <= fsquare_inner_0_196;
if (reset == 1'b0 && ^(fsquare_inner_0_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_196_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
begin
fsquare_inner_0_197 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_87))
begin
fsquare_inner_0_197_reg <= fsquare_inner_0_197;
if (reset == 1'b0 && ^(fsquare_inner_0_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_197_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_198 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_87))
begin
fsquare_inner_0_198_reg <= fsquare_inner_0_198;
if (reset == 1'b0 && ^(fsquare_inner_0_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_198_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_199 = fsquare_inner_0_199_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %199 = mul nsw i32 %198, %197*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
fsquare_inner_0_199_reg <= fsquare_inner_0_199;
if (reset == 1'b0 && ^(fsquare_inner_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_199_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %199 = mul nsw i32 %198, %197*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
fsquare_inner_0_199_reg <= fsquare_inner_0_199;
if (reset == 1'b0 && ^(fsquare_inner_0_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_199_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %200 = add i32 %196, %193*/
begin
fsquare_inner_0_200 = (fsquare_inner_0_196 + fsquare_inner_0_193_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %200 = add i32 %196, %193*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_87))
begin
fsquare_inner_0_200_reg <= fsquare_inner_0_200;
if (reset == 1'b0 && ^(fsquare_inner_0_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_200_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %201 = add i32 %200, %199*/
begin
fsquare_inner_0_201 = (fsquare_inner_0_200_reg + fsquare_inner_0_199);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %201 = add i32 %200, %199*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
fsquare_inner_0_201_reg <= fsquare_inner_0_201;
if (reset == 1'b0 && ^(fsquare_inner_0_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_201_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %202 = shl nsw i32 %201, 1*/
begin
fsquare_inner_0_202 = (fsquare_inner_0_201 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %202 = shl nsw i32 %201, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
fsquare_inner_0_202_reg <= fsquare_inner_0_202;
if (reset == 1'b0 && ^(fsquare_inner_0_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_202_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %203 = getelementptr inbounds i32* %output, i32 13*/
begin
fsquare_inner_0_203 = (arg_output + (4 * 32'd13));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %203 = getelementptr inbounds i32* %output, i32 13*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_203_reg <= fsquare_inner_0_203;
if (reset == 1'b0 && ^(fsquare_inner_0_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_203_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_204 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
fsquare_inner_0_204_reg <= fsquare_inner_0_204;
if (reset == 1'b0 && ^(fsquare_inner_0_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_204_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_205 = fsquare_inner_0_205_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %205 = mul nsw i32 %204, %204*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_92))
begin
fsquare_inner_0_205_reg <= fsquare_inner_0_205;
if (reset == 1'b0 && ^(fsquare_inner_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_205_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %205 = mul nsw i32 %204, %204*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_92))
begin
fsquare_inner_0_205_reg <= fsquare_inner_0_205;
if (reset == 1'b0 && ^(fsquare_inner_0_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_205_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_206 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
fsquare_inner_0_206_reg <= fsquare_inner_0_206;
if (reset == 1'b0 && ^(fsquare_inner_0_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_206_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_207 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_92))
begin
fsquare_inner_0_207_reg <= fsquare_inner_0_207;
if (reset == 1'b0 && ^(fsquare_inner_0_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_207_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_208 = fsquare_inner_0_208_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_93))
begin
fsquare_inner_0_208_reg <= fsquare_inner_0_208;
if (reset == 1'b0 && ^(fsquare_inner_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_208_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_93))
begin
fsquare_inner_0_208_reg <= fsquare_inner_0_208;
if (reset == 1'b0 && ^(fsquare_inner_0_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_208_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
begin
fsquare_inner_0_209 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_92))
begin
fsquare_inner_0_209_reg <= fsquare_inner_0_209;
if (reset == 1'b0 && ^(fsquare_inner_0_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_209_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_210 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_93))
begin
fsquare_inner_0_210_reg <= fsquare_inner_0_210;
if (reset == 1'b0 && ^(fsquare_inner_0_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_210_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %211 = shl i32 %209, 1*/
begin
fsquare_inner_0_211 = (fsquare_inner_0_209 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %211 = shl i32 %209, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_92))
begin
fsquare_inner_0_211_reg <= fsquare_inner_0_211;
if (reset == 1'b0 && ^(fsquare_inner_0_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_211_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_212 = fsquare_inner_0_212_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %212 = mul i32 %211, %210*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
fsquare_inner_0_212_reg <= fsquare_inner_0_212;
if (reset == 1'b0 && ^(fsquare_inner_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_212_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %212 = mul i32 %211, %210*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
fsquare_inner_0_212_reg <= fsquare_inner_0_212;
if (reset == 1'b0 && ^(fsquare_inner_0_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_212_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %213 = add i32 %208, %205*/
begin
fsquare_inner_0_213 = (fsquare_inner_0_208 + fsquare_inner_0_205_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %213 = add i32 %208, %205*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_93))
begin
fsquare_inner_0_213_reg <= fsquare_inner_0_213;
if (reset == 1'b0 && ^(fsquare_inner_0_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_213_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %214 = add i32 %213, %212*/
begin
fsquare_inner_0_214 = (fsquare_inner_0_213_reg + fsquare_inner_0_212);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %214 = add i32 %213, %212*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
fsquare_inner_0_214_reg <= fsquare_inner_0_214;
if (reset == 1'b0 && ^(fsquare_inner_0_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_214_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %215 = shl nsw i32 %214, 1*/
begin
fsquare_inner_0_215 = (fsquare_inner_0_214 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %215 = shl nsw i32 %214, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
fsquare_inner_0_215_reg <= fsquare_inner_0_215;
if (reset == 1'b0 && ^(fsquare_inner_0_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_215_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %216 = getelementptr inbounds i32* %output, i32 14*/
begin
fsquare_inner_0_216 = (arg_output + (4 * 32'd14));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %216 = getelementptr inbounds i32* %output, i32 14*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_216_reg <= fsquare_inner_0_216;
if (reset == 1'b0 && ^(fsquare_inner_0_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_216_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_217 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_97))
begin
fsquare_inner_0_217_reg <= fsquare_inner_0_217;
if (reset == 1'b0 && ^(fsquare_inner_0_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_217_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_218 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_97))
begin
fsquare_inner_0_218_reg <= fsquare_inner_0_218;
if (reset == 1'b0 && ^(fsquare_inner_0_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_218_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_219 = fsquare_inner_0_219_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %219 = mul nsw i32 %218, %217*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_98))
begin
fsquare_inner_0_219_reg <= fsquare_inner_0_219;
if (reset == 1'b0 && ^(fsquare_inner_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_219_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %219 = mul nsw i32 %218, %217*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_98))
begin
fsquare_inner_0_219_reg <= fsquare_inner_0_219;
if (reset == 1'b0 && ^(fsquare_inner_0_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_219_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
begin
fsquare_inner_0_220 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_98))
begin
fsquare_inner_0_220_reg <= fsquare_inner_0_220;
if (reset == 1'b0 && ^(fsquare_inner_0_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_220_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_221 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_98))
begin
fsquare_inner_0_221_reg <= fsquare_inner_0_221;
if (reset == 1'b0 && ^(fsquare_inner_0_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_221_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_222 = fsquare_inner_0_222_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %222 = mul nsw i32 %221, %220*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
fsquare_inner_0_222_reg <= fsquare_inner_0_222;
if (reset == 1'b0 && ^(fsquare_inner_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_222_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %222 = mul nsw i32 %221, %220*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
fsquare_inner_0_222_reg <= fsquare_inner_0_222;
if (reset == 1'b0 && ^(fsquare_inner_0_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_222_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %223 = add nsw i32 %222, %219*/
begin
fsquare_inner_0_223 = (fsquare_inner_0_222 + fsquare_inner_0_219_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %223 = add nsw i32 %222, %219*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
fsquare_inner_0_223_reg <= fsquare_inner_0_223;
if (reset == 1'b0 && ^(fsquare_inner_0_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_223_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %224 = shl nsw i32 %223, 1*/
begin
fsquare_inner_0_224 = (fsquare_inner_0_223 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %224 = shl nsw i32 %223, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
fsquare_inner_0_224_reg <= fsquare_inner_0_224;
if (reset == 1'b0 && ^(fsquare_inner_0_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_224_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %225 = getelementptr inbounds i32* %output, i32 15*/
begin
fsquare_inner_0_225 = (arg_output + (4 * 32'd15));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %225 = getelementptr inbounds i32* %output, i32 15*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_225_reg <= fsquare_inner_0_225;
if (reset == 1'b0 && ^(fsquare_inner_0_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_225_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_226 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_102))
begin
fsquare_inner_0_226_reg <= fsquare_inner_0_226;
if (reset == 1'b0 && ^(fsquare_inner_0_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_226_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_227 = fsquare_inner_0_227_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %227 = mul nsw i32 %226, %226*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_103))
begin
fsquare_inner_0_227_reg <= fsquare_inner_0_227;
if (reset == 1'b0 && ^(fsquare_inner_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_227_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %227 = mul nsw i32 %226, %226*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_103))
begin
fsquare_inner_0_227_reg <= fsquare_inner_0_227;
if (reset == 1'b0 && ^(fsquare_inner_0_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_227_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
begin
fsquare_inner_0_228 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_102))
begin
fsquare_inner_0_228_reg <= fsquare_inner_0_228;
if (reset == 1'b0 && ^(fsquare_inner_0_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_228_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_229 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_103))
begin
fsquare_inner_0_229_reg <= fsquare_inner_0_229;
if (reset == 1'b0 && ^(fsquare_inner_0_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_229_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %230 = shl i32 %228, 2*/
begin
fsquare_inner_0_230 = (fsquare_inner_0_228 <<< (32'd2 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %230 = shl i32 %228, 2*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_102))
begin
fsquare_inner_0_230_reg <= fsquare_inner_0_230;
if (reset == 1'b0 && ^(fsquare_inner_0_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_230_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_231 = fsquare_inner_0_231_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %231 = mul i32 %230, %229*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
fsquare_inner_0_231_reg <= fsquare_inner_0_231;
if (reset == 1'b0 && ^(fsquare_inner_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_231_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %231 = mul i32 %230, %229*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
fsquare_inner_0_231_reg <= fsquare_inner_0_231;
if (reset == 1'b0 && ^(fsquare_inner_0_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_231_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %232 = add nsw i32 %231, %227*/
begin
fsquare_inner_0_232 = (fsquare_inner_0_231 + fsquare_inner_0_227_reg);
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %232 = add nsw i32 %231, %227*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
fsquare_inner_0_232_reg <= fsquare_inner_0_232;
if (reset == 1'b0 && ^(fsquare_inner_0_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_232_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %233 = getelementptr inbounds i32* %output, i32 16*/
begin
fsquare_inner_0_233 = (arg_output + (4 * 32'd16));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %233 = getelementptr inbounds i32* %output, i32 16*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_233_reg <= fsquare_inner_0_233;
if (reset == 1'b0 && ^(fsquare_inner_0_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_233_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
begin
fsquare_inner_0_234 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_107))
begin
fsquare_inner_0_234_reg <= fsquare_inner_0_234;
if (reset == 1'b0 && ^(fsquare_inner_0_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_234_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_235 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_107))
begin
fsquare_inner_0_235_reg <= fsquare_inner_0_235;
if (reset == 1'b0 && ^(fsquare_inner_0_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_235_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %236 = shl i32 %234, 1*/
begin
fsquare_inner_0_236 = (fsquare_inner_0_234 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %236 = shl i32 %234, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_107))
begin
fsquare_inner_0_236_reg <= fsquare_inner_0_236;
if (reset == 1'b0 && ^(fsquare_inner_0_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_236_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_237 = fsquare_inner_0_237_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %237 = mul i32 %236, %235*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
fsquare_inner_0_237_reg <= fsquare_inner_0_237;
if (reset == 1'b0 && ^(fsquare_inner_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_237_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %237 = mul i32 %236, %235*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
fsquare_inner_0_237_reg <= fsquare_inner_0_237;
if (reset == 1'b0 && ^(fsquare_inner_0_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_237_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %238 = getelementptr inbounds i32* %output, i32 17*/
begin
fsquare_inner_0_238 = (arg_output + (4 * 32'd17));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %238 = getelementptr inbounds i32* %output, i32 17*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_238_reg <= fsquare_inner_0_238;
if (reset == 1'b0 && ^(fsquare_inner_0_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_238_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
begin
fsquare_inner_0_239 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_111))
begin
fsquare_inner_0_239_reg <= fsquare_inner_0_239;
if (reset == 1'b0 && ^(fsquare_inner_0_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_239_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %240 = shl i32 %239, 1*/
begin
fsquare_inner_0_240 = (fsquare_inner_0_239 <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %240 = shl i32 %239, 1*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_111))
begin
fsquare_inner_0_240_reg <= fsquare_inner_0_240;
if (reset == 1'b0 && ^(fsquare_inner_0_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_240_reg"); $finish; end
end
end
always @(*) begin
fsquare_inner_0_241 = fsquare_inner_0_241_stage0_reg;
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %241 = mul i32 %240, %239*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
fsquare_inner_0_241_reg <= fsquare_inner_0_241;
if (reset == 1'b0 && ^(fsquare_inner_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_241_reg"); $finish; end
end
/* fsquare_inner: %0*/
/*   %241 = mul i32 %240, %239*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
fsquare_inner_0_241_reg <= fsquare_inner_0_241;
if (reset == 1'b0 && ^(fsquare_inner_0_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_241_reg"); $finish; end
end
end
always @(*) begin
/* fsquare_inner: %0*/
/*   %242 = getelementptr inbounds i32* %output, i32 18*/
begin
fsquare_inner_0_242 = (arg_output + (4 * 32'd18));
end
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %242 = getelementptr inbounds i32* %output, i32 18*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
fsquare_inner_0_242_reg <= fsquare_inner_0_242;
if (reset == 1'b0 && ^(fsquare_inner_0_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_0_242_reg"); $finish; end
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %2 = mul nsw i32 %1, %1*/
if ((lpm_mult_fsquare_inner_0_2_en == 1'd1))
begin
fsquare_inner_0_2_stage0_reg <= (fsquare_inner_0_1 * fsquare_inner_0_1);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_7_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %7 = mul i32 %6, %5*/
if ((lpm_mult_fsquare_inner_0_7_en == 1'd1))
begin
fsquare_inner_0_7_stage0_reg <= (fsquare_inner_0_6 * fsquare_inner_0_5);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_10_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %10 = mul nsw i32 %9, %9*/
if ((lpm_mult_fsquare_inner_0_10_en == 1'd1))
begin
fsquare_inner_0_10_stage0_reg <= (fsquare_inner_0_9 * fsquare_inner_0_9);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_14_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %14 = mul nsw i32 %13, %11*/
if ((lpm_mult_fsquare_inner_0_14_en == 1'd1))
begin
fsquare_inner_0_14_stage0_reg <= (fsquare_inner_0_13 * fsquare_inner_0_11_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %20 = mul nsw i32 %19, %18*/
if ((lpm_mult_fsquare_inner_0_20_en == 1'd1))
begin
fsquare_inner_0_20_stage0_reg <= (fsquare_inner_0_19 * fsquare_inner_0_18);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %24 = mul nsw i32 %23, %21*/
if ((lpm_mult_fsquare_inner_0_24_en == 1'd1))
begin
fsquare_inner_0_24_stage0_reg <= (fsquare_inner_0_23 * fsquare_inner_0_21);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %29 = mul nsw i32 %28, %28*/
if ((lpm_mult_fsquare_inner_0_29_en == 1'd1))
begin
fsquare_inner_0_29_stage0_reg <= (fsquare_inner_0_28 * fsquare_inner_0_28);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %33 = mul i32 %32, %31*/
if ((lpm_mult_fsquare_inner_0_33_en == 1'd1))
begin
fsquare_inner_0_33_stage0_reg <= (fsquare_inner_0_32_reg * fsquare_inner_0_31);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_38_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %38 = mul i32 %37, %36*/
if ((lpm_mult_fsquare_inner_0_38_en == 1'd1))
begin
fsquare_inner_0_38_stage0_reg <= (fsquare_inner_0_37_reg * fsquare_inner_0_36);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_44_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %44 = mul nsw i32 %43, %42*/
if ((lpm_mult_fsquare_inner_0_44_en == 1'd1))
begin
fsquare_inner_0_44_stage0_reg <= (fsquare_inner_0_43 * fsquare_inner_0_42);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_47_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %47 = mul nsw i32 %46, %45*/
if ((lpm_mult_fsquare_inner_0_47_en == 1'd1))
begin
fsquare_inner_0_47_stage0_reg <= (fsquare_inner_0_46 * fsquare_inner_0_45);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %51 = mul nsw i32 %50, %48*/
if ((lpm_mult_fsquare_inner_0_51_en == 1'd1))
begin
fsquare_inner_0_51_stage0_reg <= (fsquare_inner_0_50 * fsquare_inner_0_48);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_57_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %57 = mul nsw i32 %56, %56*/
if ((lpm_mult_fsquare_inner_0_57_en == 1'd1))
begin
fsquare_inner_0_57_stage0_reg <= (fsquare_inner_0_56 * fsquare_inner_0_56);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_60_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %60 = mul nsw i32 %59, %58*/
if ((lpm_mult_fsquare_inner_0_60_en == 1'd1))
begin
fsquare_inner_0_60_stage0_reg <= (fsquare_inner_0_59 * fsquare_inner_0_58_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %64 = mul nsw i32 %63, %61*/
if ((lpm_mult_fsquare_inner_0_64_en == 1'd1))
begin
fsquare_inner_0_64_stage0_reg <= (fsquare_inner_0_63 * fsquare_inner_0_61_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_68_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %68 = mul i32 %67, %66*/
if ((lpm_mult_fsquare_inner_0_68_en == 1'd1))
begin
fsquare_inner_0_68_stage0_reg <= (fsquare_inner_0_67_reg * fsquare_inner_0_66);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_76_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %76 = mul nsw i32 %75, %74*/
if ((lpm_mult_fsquare_inner_0_76_en == 1'd1))
begin
fsquare_inner_0_76_stage0_reg <= (fsquare_inner_0_75 * fsquare_inner_0_74);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_79_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %79 = mul nsw i32 %78, %77*/
if ((lpm_mult_fsquare_inner_0_79_en == 1'd1))
begin
fsquare_inner_0_79_stage0_reg <= (fsquare_inner_0_78 * fsquare_inner_0_77);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_82_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %82 = mul nsw i32 %81, %80*/
if ((lpm_mult_fsquare_inner_0_82_en == 1'd1))
begin
fsquare_inner_0_82_stage0_reg <= (fsquare_inner_0_81 * fsquare_inner_0_80);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %86 = mul nsw i32 %85, %83*/
if ((lpm_mult_fsquare_inner_0_86_en == 1'd1))
begin
fsquare_inner_0_86_stage0_reg <= (fsquare_inner_0_85 * fsquare_inner_0_83);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_93_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %93 = mul nsw i32 %92, %92*/
if ((lpm_mult_fsquare_inner_0_93_en == 1'd1))
begin
fsquare_inner_0_93_stage0_reg <= (fsquare_inner_0_92 * fsquare_inner_0_92);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_96_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %96 = mul nsw i32 %95, %94*/
if ((lpm_mult_fsquare_inner_0_96_en == 1'd1))
begin
fsquare_inner_0_96_stage0_reg <= (fsquare_inner_0_95 * fsquare_inner_0_94_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_100_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %100 = mul nsw i32 %99, %97*/
if ((lpm_mult_fsquare_inner_0_100_en == 1'd1))
begin
fsquare_inner_0_100_stage0_reg <= (fsquare_inner_0_99 * fsquare_inner_0_97_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %103 = mul nsw i32 %102, %101*/
if ((lpm_mult_fsquare_inner_0_103_en == 1'd1))
begin
fsquare_inner_0_103_stage0_reg <= (fsquare_inner_0_102 * fsquare_inner_0_101_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_106_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %106 = mul nsw i32 %105, %104*/
if ((lpm_mult_fsquare_inner_0_106_en == 1'd1))
begin
fsquare_inner_0_106_stage0_reg <= (fsquare_inner_0_105 * fsquare_inner_0_104_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_116_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %116 = mul nsw i32 %115, %114*/
if ((lpm_mult_fsquare_inner_0_116_en == 1'd1))
begin
fsquare_inner_0_116_stage0_reg <= (fsquare_inner_0_115 * fsquare_inner_0_114);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_119_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %119 = mul nsw i32 %118, %117*/
if ((lpm_mult_fsquare_inner_0_119_en == 1'd1))
begin
fsquare_inner_0_119_stage0_reg <= (fsquare_inner_0_118 * fsquare_inner_0_117);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_122_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %122 = mul nsw i32 %121, %120*/
if ((lpm_mult_fsquare_inner_0_122_en == 1'd1))
begin
fsquare_inner_0_122_stage0_reg <= (fsquare_inner_0_121 * fsquare_inner_0_120);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_125_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %125 = mul nsw i32 %124, %123*/
if ((lpm_mult_fsquare_inner_0_125_en == 1'd1))
begin
fsquare_inner_0_125_stage0_reg <= (fsquare_inner_0_124 * fsquare_inner_0_123);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_129_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %129 = mul nsw i32 %128, %126*/
if ((lpm_mult_fsquare_inner_0_129_en == 1'd1))
begin
fsquare_inner_0_129_stage0_reg <= (fsquare_inner_0_128 * fsquare_inner_0_126);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_137_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %137 = mul nsw i32 %136, %136*/
if ((lpm_mult_fsquare_inner_0_137_en == 1'd1))
begin
fsquare_inner_0_137_stage0_reg <= (fsquare_inner_0_136 * fsquare_inner_0_136);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_140_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %140 = mul nsw i32 %139, %138*/
if ((lpm_mult_fsquare_inner_0_140_en == 1'd1))
begin
fsquare_inner_0_140_stage0_reg <= (fsquare_inner_0_139 * fsquare_inner_0_138_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %143 = mul nsw i32 %142, %141*/
if ((lpm_mult_fsquare_inner_0_143_en == 1'd1))
begin
fsquare_inner_0_143_stage0_reg <= (fsquare_inner_0_142 * fsquare_inner_0_141_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_146_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %146 = mul nsw i32 %145, %144*/
if ((lpm_mult_fsquare_inner_0_146_en == 1'd1))
begin
fsquare_inner_0_146_stage0_reg <= (fsquare_inner_0_145 * fsquare_inner_0_144_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %149 = mul nsw i32 %148, %147*/
if ((lpm_mult_fsquare_inner_0_149_en == 1'd1))
begin
fsquare_inner_0_149_stage0_reg <= (fsquare_inner_0_148 * fsquare_inner_0_147_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_159_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %159 = mul nsw i32 %158, %157*/
if ((lpm_mult_fsquare_inner_0_159_en == 1'd1))
begin
fsquare_inner_0_159_stage0_reg <= (fsquare_inner_0_158 * fsquare_inner_0_157);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_162_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %162 = mul nsw i32 %161, %160*/
if ((lpm_mult_fsquare_inner_0_162_en == 1'd1))
begin
fsquare_inner_0_162_stage0_reg <= (fsquare_inner_0_161 * fsquare_inner_0_160);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_165_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %165 = mul nsw i32 %164, %163*/
if ((lpm_mult_fsquare_inner_0_165_en == 1'd1))
begin
fsquare_inner_0_165_stage0_reg <= (fsquare_inner_0_164 * fsquare_inner_0_163);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_168_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %168 = mul nsw i32 %167, %166*/
if ((lpm_mult_fsquare_inner_0_168_en == 1'd1))
begin
fsquare_inner_0_168_stage0_reg <= (fsquare_inner_0_167 * fsquare_inner_0_166);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_175_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %175 = mul nsw i32 %174, %174*/
if ((lpm_mult_fsquare_inner_0_175_en == 1'd1))
begin
fsquare_inner_0_175_stage0_reg <= (fsquare_inner_0_174 * fsquare_inner_0_174);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_178_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %178 = mul nsw i32 %177, %176*/
if ((lpm_mult_fsquare_inner_0_178_en == 1'd1))
begin
fsquare_inner_0_178_stage0_reg <= (fsquare_inner_0_177 * fsquare_inner_0_176_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_181_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %181 = mul nsw i32 %180, %179*/
if ((lpm_mult_fsquare_inner_0_181_en == 1'd1))
begin
fsquare_inner_0_181_stage0_reg <= (fsquare_inner_0_180 * fsquare_inner_0_179_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_184_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %184 = mul nsw i32 %183, %182*/
if ((lpm_mult_fsquare_inner_0_184_en == 1'd1))
begin
fsquare_inner_0_184_stage0_reg <= (fsquare_inner_0_183 * fsquare_inner_0_182_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_193_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %193 = mul nsw i32 %192, %191*/
if ((lpm_mult_fsquare_inner_0_193_en == 1'd1))
begin
fsquare_inner_0_193_stage0_reg <= (fsquare_inner_0_192 * fsquare_inner_0_191);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_196_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %196 = mul nsw i32 %195, %194*/
if ((lpm_mult_fsquare_inner_0_196_en == 1'd1))
begin
fsquare_inner_0_196_stage0_reg <= (fsquare_inner_0_195 * fsquare_inner_0_194);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_199_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %199 = mul nsw i32 %198, %197*/
if ((lpm_mult_fsquare_inner_0_199_en == 1'd1))
begin
fsquare_inner_0_199_stage0_reg <= (fsquare_inner_0_198 * fsquare_inner_0_197);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_205_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %205 = mul nsw i32 %204, %204*/
if ((lpm_mult_fsquare_inner_0_205_en == 1'd1))
begin
fsquare_inner_0_205_stage0_reg <= (fsquare_inner_0_204 * fsquare_inner_0_204);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_208_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %208 = mul nsw i32 %207, %206*/
if ((lpm_mult_fsquare_inner_0_208_en == 1'd1))
begin
fsquare_inner_0_208_stage0_reg <= (fsquare_inner_0_207 * fsquare_inner_0_206_reg);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_212_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %212 = mul i32 %211, %210*/
if ((lpm_mult_fsquare_inner_0_212_en == 1'd1))
begin
fsquare_inner_0_212_stage0_reg <= (fsquare_inner_0_211_reg * fsquare_inner_0_210);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_219_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %219 = mul nsw i32 %218, %217*/
if ((lpm_mult_fsquare_inner_0_219_en == 1'd1))
begin
fsquare_inner_0_219_stage0_reg <= (fsquare_inner_0_218 * fsquare_inner_0_217);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_222_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %222 = mul nsw i32 %221, %220*/
if ((lpm_mult_fsquare_inner_0_222_en == 1'd1))
begin
fsquare_inner_0_222_stage0_reg <= (fsquare_inner_0_221 * fsquare_inner_0_220);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_227_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %227 = mul nsw i32 %226, %226*/
if ((lpm_mult_fsquare_inner_0_227_en == 1'd1))
begin
fsquare_inner_0_227_stage0_reg <= (fsquare_inner_0_226 * fsquare_inner_0_226);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_231_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %231 = mul i32 %230, %229*/
if ((lpm_mult_fsquare_inner_0_231_en == 1'd1))
begin
fsquare_inner_0_231_stage0_reg <= (fsquare_inner_0_230_reg * fsquare_inner_0_229);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_237_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %237 = mul i32 %236, %235*/
if ((lpm_mult_fsquare_inner_0_237_en == 1'd1))
begin
fsquare_inner_0_237_stage0_reg <= (fsquare_inner_0_236 * fsquare_inner_0_235);
end
end
always @(*) begin
lpm_mult_fsquare_inner_0_241_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
/* fsquare_inner: %0*/
/*   %241 = mul i32 %240, %239*/
if ((lpm_mult_fsquare_inner_0_241_en == 1'd1))
begin
fsquare_inner_0_241_stage0_reg <= (fsquare_inner_0_240 * fsquare_inner_0_239);
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* fsquare_inner: %0*/
/*   ret void*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_113))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %2, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %202, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %224, i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %237, i32* %238, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %2, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
memory_controller_address_a = arg_output;
end
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
memory_controller_address_a = fsquare_inner_0_8_reg;
end
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
memory_controller_address_a = fsquare_inner_0_17_reg;
end
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_address_a = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
memory_controller_address_a = fsquare_inner_0_27_reg;
end
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_address_a = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
memory_controller_address_a = fsquare_inner_0_41_reg;
end
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_address_a = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_address_a = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_address_a = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_address_a = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_address_a = arg_in;
end
/* fsquare_inner: %0*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
memory_controller_address_a = fsquare_inner_0_135_reg;
end
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_address_a = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_address_a = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_address_a = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_address_a = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
memory_controller_address_a = fsquare_inner_0_173_reg;
end
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_address_a = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_address_a = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %202, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
memory_controller_address_a = fsquare_inner_0_203_reg;
end
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_address_a = fsquare_inner_0_62_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %224, i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
memory_controller_address_a = fsquare_inner_0_225_reg;
end
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_address_a = fsquare_inner_0_98_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %237, i32* %238, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
memory_controller_address_a = fsquare_inner_0_238_reg;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %2, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %202, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %224, i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
memory_controller_write_enable_a = 1'd1;
end
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_write_enable_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %237, i32* %238, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %2, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
memory_controller_in_a = fsquare_inner_0_2;
end
/* fsquare_inner: %0*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
memory_controller_in_a = fsquare_inner_0_7;
end
/* fsquare_inner: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
memory_controller_in_a = fsquare_inner_0_16;
end
/* fsquare_inner: %0*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
memory_controller_in_a = fsquare_inner_0_26;
end
/* fsquare_inner: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
memory_controller_in_a = fsquare_inner_0_40;
end
/* fsquare_inner: %0*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
memory_controller_in_a = fsquare_inner_0_134;
end
/* fsquare_inner: %0*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
memory_controller_in_a = fsquare_inner_0_172;
end
/* fsquare_inner: %0*/
/*   store i32 %202, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
memory_controller_in_a = fsquare_inner_0_202;
end
/* fsquare_inner: %0*/
/*   store i32 %224, i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
memory_controller_in_a = fsquare_inner_0_224;
end
/* fsquare_inner: %0*/
/*   store i32 %237, i32* %238, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
memory_controller_in_a = fsquare_inner_0_237;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* fsquare_inner: %0*/
/*   %1 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %2, i32* %output, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_4))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %3 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %7, i32* %8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_8))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %11 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %16, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_13))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %18 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %21 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %26, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_18))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %30 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %34 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %40, i32* %41, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_24))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %42 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %45 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %48 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %58 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %61 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %63 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %74 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %77 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %81 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %83 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %94 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %95 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %99 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %104 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %114 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %118 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %120 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %124 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %126 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %134, i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_60))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %138 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %139 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %142 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %147 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %158 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %160 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %164 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %166 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %172, i32* %173, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_75))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %174 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %177 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %182 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %191 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %195 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %197 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %202, i32* %203, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_88))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %206 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %207 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %218 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %220 = load i32* %62, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %224, i32* %225, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_99))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %226 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   %234 = load i32* %98, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_size_a = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %237, i32* %238, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_108))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_10))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %112, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_101))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %232, i32* %233, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_109))
begin
memory_controller_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_10))
begin
memory_controller_address_b = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_address_b = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_address_b = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
memory_controller_address_b = fsquare_inner_0_55_reg;
end
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
memory_controller_address_b = fsquare_inner_0_73_reg;
end
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
memory_controller_address_b = fsquare_inner_0_91_reg;
end
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_address_b = arg_in;
end
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %112, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
memory_controller_address_b = fsquare_inner_0_113_reg;
end
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_address_b = fsquare_inner_0_4_reg;
end
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_address_b = fsquare_inner_0_12_reg;
end
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
memory_controller_address_b = fsquare_inner_0_156_reg;
end
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_address_b = fsquare_inner_0_22_reg;
end
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_address_b = fsquare_inner_0_35_reg;
end
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
memory_controller_address_b = fsquare_inner_0_190_reg;
end
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_address_b = fsquare_inner_0_49_reg;
end
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
memory_controller_address_b = fsquare_inner_0_216_reg;
end
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_address_b = fsquare_inner_0_84_reg;
end
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_101))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %232, i32* %233, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
memory_controller_address_b = fsquare_inner_0_233_reg;
end
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_109))
begin
memory_controller_address_b = fsquare_inner_0_127_reg;
end
/* fsquare_inner: %0*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
memory_controller_address_b = fsquare_inner_0_242_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_10))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %112, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_101))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %232, i32* %233, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
memory_controller_write_enable_b = 1'd1;
end
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_109))
begin
memory_controller_write_enable_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
memory_controller_in_b = fsquare_inner_0_54;
end
/* fsquare_inner: %0*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
memory_controller_in_b = fsquare_inner_0_72;
end
/* fsquare_inner: %0*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
memory_controller_in_b = fsquare_inner_0_90;
end
/* fsquare_inner: %0*/
/*   store i32 %112, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
memory_controller_in_b = fsquare_inner_0_112;
end
/* fsquare_inner: %0*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
memory_controller_in_b = fsquare_inner_0_155;
end
/* fsquare_inner: %0*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
memory_controller_in_b = fsquare_inner_0_189;
end
/* fsquare_inner: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
memory_controller_in_b = fsquare_inner_0_215;
end
/* fsquare_inner: %0*/
/*   store i32 %232, i32* %233, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
memory_controller_in_b = fsquare_inner_0_232;
end
/* fsquare_inner: %0*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
memory_controller_in_b = fsquare_inner_0_241;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* fsquare_inner: %0*/
/*   %5 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_5))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %9 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_9))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %13 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_10))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %19 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_14))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %23 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_15))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %28 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_19))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %31 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_20))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %36 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_21))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %43 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_25))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %46 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_26))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %50 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_27))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %54, i32* %55, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_30))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %56 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_31))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %59 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_32))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %65 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_33))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %66 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_34))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %72, i32* %73, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_37))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %75 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_38))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %78 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_39))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %80 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_40))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %85 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_41))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %90, i32* %91, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_44))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %92 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_45))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %97 = load i32* %in, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_46))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %101 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_47))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %102 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_48))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %105 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_49))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %112, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_52))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %115 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_53))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %117 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_54))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %121 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_55))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %123 = load i32* %4, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_56))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %128 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_57))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %136 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_61))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %141 = load i32* %12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_62))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %144 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_63))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %145 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_64))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %148 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_65))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %155, i32* %156, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_68))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %157 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_69))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %161 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_70))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %163 = load i32* %22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_71))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %167 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_72))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %176 = load i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_76))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %179 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_77))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %180 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_78))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %183 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_79))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %189, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_82))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %192 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_83))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %194 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_84))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %198 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_85))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %204 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_89))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %209 = load i32* %49, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_90))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %210 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_91))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %215, i32* %216, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_94))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %217 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_95))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %221 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_96))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %228 = load i32* %84, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_100))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %229 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_101))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %232, i32* %233, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_104))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %235 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_105))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   %239 = load i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_109))
begin
memory_controller_size_b = 2'd2;
end
/* fsquare_inner: %0*/
/*   store i32 %241, i32* %242, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_fsquare_inner_BB_0_112))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
reg  fsquare_inner_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_arg_output;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_arg_in;
wire  fsquare_inner_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_memory_controller_address_a;
wire  fsquare_inner_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fsquare_inner_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fsquare_inner_memory_controller_out_a;
wire [1:0] fsquare_inner_memory_controller_size_a;
wire  fsquare_inner_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] fsquare_inner_memory_controller_address_b;
wire  fsquare_inner_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fsquare_inner_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] fsquare_inner_memory_controller_out_b;
wire [1:0] fsquare_inner_memory_controller_size_b;
reg  fsquare_inner_memory_controller_waitrequest;
wire  fsquare_inner_finish;
reg  fsquare_inner_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


fsquare_inner fsquare_inner_inst (
	.memory_controller_enable_a (fsquare_inner_memory_controller_enable_a),
	.memory_controller_address_a (fsquare_inner_memory_controller_address_a),
	.memory_controller_write_enable_a (fsquare_inner_memory_controller_write_enable_a),
	.memory_controller_in_a (fsquare_inner_memory_controller_in_a),
	.memory_controller_size_a (fsquare_inner_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (fsquare_inner_memory_controller_enable_b),
	.memory_controller_address_b (fsquare_inner_memory_controller_address_b),
	.memory_controller_write_enable_b (fsquare_inner_memory_controller_write_enable_b),
	.memory_controller_in_b (fsquare_inner_memory_controller_in_b),
	.memory_controller_size_b (fsquare_inner_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (fsquare_inner_start),
	.finish (fsquare_inner_finish),
	.arg_output (fsquare_inner_arg_output),
	.arg_in (fsquare_inner_arg_in)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fsquare_inner_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (fsquare_inner_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fsquare_inner_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_start"); $finish; end
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
fsquare_inner_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fsquare_inner_arg_output <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_arg_output"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
fsquare_inner_arg_in <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to fsquare_inner_arg_in"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
begin
fsquare_inner_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
begin
fsquare_inner_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
fsquare_inner_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
fsquare_inner_finish_final = fsquare_inner_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fsquare_inner_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = fsquare_inner_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fsquare_inner_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fsquare_inner_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fsquare_inner_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = fsquare_inner_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fsquare_inner_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fsquare_inner_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fsquare_inner_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = fsquare_inner_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fsquare_inner_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = fsquare_inner_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fsquare_inner_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = fsquare_inner_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fsquare_inner_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = fsquare_inner_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fsquare_inner_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = fsquare_inner_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fsquare_inner_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @fsquare_inner(i32* undef, i32* undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = fsquare_inner_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
