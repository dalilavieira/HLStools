//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jul 15 15:43:09 2014
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Mar 10 07:56:06 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @.str = private unnamed_addr constant [8 x i8] c"default\00"

`define TAG_g__str `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g__str_a {`TAG_g__str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] _str_address_a;
reg [2:0] _str_address_b;
reg _str_write_enable_a;
reg _str_write_enable_b;
reg [7:0] _str_in_a;
reg [7:0] _str_in_b;
wire [7:0] _str_out_a;
wire [7:0] _str_out_b;

// @.str = private unnamed_addr constant [8 x i8] c"default\00"

rom_dual_port _str (
	.clk( clk ),
	.address_a( _str_address_a ),
	.address_b( _str_address_b ),
	.q_a( _str_out_a ),
	.q_b( _str_out_b)
);
defparam _str.width_a = 8;
defparam _str.width_b = 8;
defparam _str.widthad_a = 3;
defparam _str.widthad_b = 3;
defparam _str.numwords_a = 8;
defparam _str.numwords_b = 8;
defparam _str.latency = 1;
defparam _str.init_file = "_str.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select__str_a;
assign select__str_a = (tag_a == `TAG_g__str);
reg select__str_reg_a;
wire [7:0] memory_controller__str_out_a;
assign memory_controller__str_out_a = {8{ select__str_reg_a}} & _str_out_a;

always @(*)
begin
	_str_address_a = memory_controller_address_a [3-1+0:0] & {3{select__str_a}};
	_str_write_enable_a = memory_controller_write_enable_a & select__str_a;
	_str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0;
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller__str_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select__str_reg_a <= select__str_a;
end

reg [2:0] select_not_struct_b;

wire select__str_b;
assign select__str_b = (tag_b == `TAG_g__str);
reg select__str_reg_b;
wire [7:0] memory_controller__str_out_b;
assign memory_controller__str_out_b = {8{ select__str_reg_b}} & _str_out_b;

always @(*)
begin
	_str_address_b = memory_controller_address_b [3-1+0:0] & {3{select__str_b}};
	_str_write_enable_b = memory_controller_write_enable_b & select__str_b;
	_str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0;
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller__str_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select__str_reg_b <= select__str_b;
end

endmodule 

`timescale 1 ns / 1 ns
module ath_ant_div_conf_fast_divbias
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	arg_ant_conf,
	arg_antcomb,
	arg_alt_ratio
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1 = 8'd1;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2 = 8'd2;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3 = 8'd3;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4 = 8'd4;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5 = 8'd5;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6 = 8'd6;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7 = 8'd7;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8 = 8'd8;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9 = 8'd9;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10 = 8'd10;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11 = 8'd11;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12 = 8'd12;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13 = 8'd13;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14 = 8'd14;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15 = 8'd15;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16 = 8'd16;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17 = 8'd17;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18 = 8'd18;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19 = 8'd19;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20 = 8'd20;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21 = 8'd21;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22 = 8'd22;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23 = 8'd23;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24 = 8'd24;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25 = 8'd25;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26 = 8'd26;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27 = 8'd27;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28 = 8'd28;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29 = 8'd29;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30 = 8'd30;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31 = 8'd31;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32 = 8'd32;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33 = 8'd33;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34 = 8'd34;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35 = 8'd35;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36 = 8'd36;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37 = 8'd37;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38 = 8'd38;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39 = 8'd39;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40 = 8'd40;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41 = 8'd41;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42 = 8'd42;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43 = 8'd43;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44 = 8'd44;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45 = 8'd45;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46 = 8'd46;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47 = 8'd47;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48 = 8'd48;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49 = 8'd49;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50 = 8'd50;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51 = 8'd51;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52 = 8'd52;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53 = 8'd53;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54 = 8'd54;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55 = 8'd55;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56 = 8'd56;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57 = 8'd57;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58 = 8'd58;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59 = 8'd59;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60 = 8'd60;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61 = 8'd61;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62 = 8'd62;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63 = 8'd63;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64 = 8'd64;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65 = 8'd65;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66 = 8'd66;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67 = 8'd67;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68 = 8'd68;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69 = 8'd69;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70 = 8'd70;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71 = 8'd71;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72 = 8'd72;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73 = 8'd73;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74 = 8'd74;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75 = 8'd75;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76 = 8'd76;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77 = 8'd77;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78 = 8'd78;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79 = 8'd79;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80 = 8'd80;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81 = 8'd81;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82 = 8'd82;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83 = 8'd83;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84 = 8'd84;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85 = 8'd85;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86 = 8'd86;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87 = 8'd87;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88 = 8'd88;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89 = 8'd89;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90 = 8'd90;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91 = 8'd91;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92 = 8'd92;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93 = 8'd93;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94 = 8'd94;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95 = 8'd95;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96 = 8'd96;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97 = 8'd97;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98 = 8'd98;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99 = 8'd99;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100 = 8'd100;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101 = 8'd101;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102 = 8'd102;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103 = 8'd103;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104 = 8'd104;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105 = 8'd105;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106 = 8'd106;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107 = 8'd107;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108 = 8'd108;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109 = 8'd109;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110 = 8'd110;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111 = 8'd111;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112 = 8'd112;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113 = 8'd113;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114 = 8'd114;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115 = 8'd115;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116 = 8'd116;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117 = 8'd117;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118 = 8'd118;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119 = 8'd119;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120 = 8'd120;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121 = 8'd121;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122 = 8'd122;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123 = 8'd123;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124 = 8'd124;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125 = 8'd125;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126 = 8'd126;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127 = 8'd127;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128 = 8'd128;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129 = 8'd129;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130 = 8'd130;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131 = 8'd131;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132 = 8'd132;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133 = 8'd133;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134 = 8'd134;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135 = 8'd135;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136 = 8'd136;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137 = 8'd137;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138 = 8'd138;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139 = 8'd139;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140 = 8'd140;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141 = 8'd141;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142 = 8'd142;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143 = 8'd143;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144 = 8'd144;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145 = 8'd145;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146 = 8'd146;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147 = 8'd147;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148 = 8'd148;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149 = 8'd149;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150 = 8'd150;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151 = 8'd151;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152 = 8'd152;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153 = 8'd153;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154 = 8'd154;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155 = 8'd155;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156 = 8'd156;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157 = 8'd157;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158 = 8'd158;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159 = 8'd159;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160 = 8'd160;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161 = 8'd161;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162 = 8'd162;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163 = 8'd163;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164 = 8'd164;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165 = 8'd165;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166 = 8'd166;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167 = 8'd167;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168 = 8'd168;
parameter [7:0] LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169 = 8'd169;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_ant_conf;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_antcomb;
input [31:0] arg_alt_ratio;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_0_3_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_0_4;
reg [31:0] ath_ant_div_conf_fast_divbias_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_5_6_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_5_7;
reg [31:0] ath_ant_div_conf_fast_divbias_5_7_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_5_8;
reg [31:0] ath_ant_div_conf_fast_divbias_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_5_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_5_9_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_5_10;
reg [31:0] ath_ant_div_conf_fast_divbias_5_10_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_5_11;
reg [31:0] ath_ant_div_conf_fast_divbias_5_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_12_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_12_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_14_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_14_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_16_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_16_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_18_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_20_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_20_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_22_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_22_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_24_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_24_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_26_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_26_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_28_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_28_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_30_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_30_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_32_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_34_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_34_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_36_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_36_37_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_36_38;
reg [31:0] ath_ant_div_conf_fast_divbias_36_38_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_36_39;
reg [31:0] ath_ant_div_conf_fast_divbias_36_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_36_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_36_40_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_36_41;
reg [31:0] ath_ant_div_conf_fast_divbias_36_41_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_36_42;
reg [31:0] ath_ant_div_conf_fast_divbias_36_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_43_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_43_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_45_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_45_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_47_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_47_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_49_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_49_50_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_49_51;
reg [31:0] ath_ant_div_conf_fast_divbias_49_51_reg;
reg  ath_ant_div_conf_fast_divbias_49_52;
reg  ath_ant_div_conf_fast_divbias_49_52_reg;
reg  ath_ant_div_conf_fast_divbias_49_53;
reg  ath_ant_div_conf_fast_divbias_49_53_reg;
reg  ath_ant_div_conf_fast_divbias_49_or_cond;
reg  ath_ant_div_conf_fast_divbias_49_or_cond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_49_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_49_54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_57_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_57_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_59_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_59_60_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_59_61;
reg [31:0] ath_ant_div_conf_fast_divbias_59_61_reg;
reg  ath_ant_div_conf_fast_divbias_59_62;
reg  ath_ant_div_conf_fast_divbias_59_62_reg;
reg  ath_ant_div_conf_fast_divbias_59_63;
reg  ath_ant_div_conf_fast_divbias_59_63_reg;
reg  ath_ant_div_conf_fast_divbias_59_or_cond3;
reg  ath_ant_div_conf_fast_divbias_59_or_cond3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_59_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_59_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_67_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_67_68_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_67_69;
reg [31:0] ath_ant_div_conf_fast_divbias_67_69_reg;
reg  ath_ant_div_conf_fast_divbias_67_70;
reg  ath_ant_div_conf_fast_divbias_67_70_reg;
reg  ath_ant_div_conf_fast_divbias_67_71;
reg  ath_ant_div_conf_fast_divbias_67_71_reg;
reg  ath_ant_div_conf_fast_divbias_67_or_cond5;
reg  ath_ant_div_conf_fast_divbias_67_or_cond5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_67_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_67_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_75_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_75_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_77_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_77_78_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_77_79;
reg [31:0] ath_ant_div_conf_fast_divbias_77_79_reg;
reg  ath_ant_div_conf_fast_divbias_77_80;
reg  ath_ant_div_conf_fast_divbias_77_80_reg;
reg  ath_ant_div_conf_fast_divbias_77_81;
reg  ath_ant_div_conf_fast_divbias_77_81_reg;
reg  ath_ant_div_conf_fast_divbias_77_or_cond7;
reg  ath_ant_div_conf_fast_divbias_77_or_cond7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_77_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_77_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_85_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_85_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_87_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_87_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_89_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_89_90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_91_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_91_92_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_91_93;
reg [31:0] ath_ant_div_conf_fast_divbias_91_93_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_91_94;
reg [31:0] ath_ant_div_conf_fast_divbias_91_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_91_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_91_95_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_91_96;
reg [31:0] ath_ant_div_conf_fast_divbias_91_96_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_91_97;
reg [31:0] ath_ant_div_conf_fast_divbias_91_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_98_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_98_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_100_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_100_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_102_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_102_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_104_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_104_105_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_104_106;
reg [31:0] ath_ant_div_conf_fast_divbias_104_106_reg;
reg  ath_ant_div_conf_fast_divbias_104_107;
reg  ath_ant_div_conf_fast_divbias_104_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_108_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_108_109_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_108_110;
reg [31:0] ath_ant_div_conf_fast_divbias_108_110_reg;
reg  ath_ant_div_conf_fast_divbias_108_111;
reg  ath_ant_div_conf_fast_divbias_108_111_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_112_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_112_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_114_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_114_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_116_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_116_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_118_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_118_119_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_118_120;
reg [31:0] ath_ant_div_conf_fast_divbias_118_120_reg;
reg  ath_ant_div_conf_fast_divbias_118_121;
reg  ath_ant_div_conf_fast_divbias_118_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_122_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_122_123_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_122_124;
reg [31:0] ath_ant_div_conf_fast_divbias_122_124_reg;
reg  ath_ant_div_conf_fast_divbias_122_125;
reg  ath_ant_div_conf_fast_divbias_122_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_126_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_126_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_128_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_128_129_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_130_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_130_131_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_130_132;
reg [31:0] ath_ant_div_conf_fast_divbias_130_132_reg;
reg  ath_ant_div_conf_fast_divbias_130_133;
reg  ath_ant_div_conf_fast_divbias_130_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_134_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_134_135_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_134_136;
reg [31:0] ath_ant_div_conf_fast_divbias_134_136_reg;
reg  ath_ant_div_conf_fast_divbias_134_137;
reg  ath_ant_div_conf_fast_divbias_134_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_138_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_138_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_140_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_140_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_142_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_142_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_144_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_144_145_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_144_146;
reg [31:0] ath_ant_div_conf_fast_divbias_144_146_reg;
reg  ath_ant_div_conf_fast_divbias_144_147;
reg  ath_ant_div_conf_fast_divbias_144_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_148_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_148_149_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_148_150;
reg [31:0] ath_ant_div_conf_fast_divbias_148_150_reg;
reg  ath_ant_div_conf_fast_divbias_148_151;
reg  ath_ant_div_conf_fast_divbias_148_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_152_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_152_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_154_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_154_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_156_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_156_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_158_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_158_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_160_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_160_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_162_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_162_163_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_162_164;
reg [31:0] ath_ant_div_conf_fast_divbias_162_164_reg;
reg  ath_ant_div_conf_fast_divbias_162_165;
reg  ath_ant_div_conf_fast_divbias_162_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_166_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_166_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_168_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_168_169_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_168_170;
reg [31:0] ath_ant_div_conf_fast_divbias_168_170_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_168_171;
reg [31:0] ath_ant_div_conf_fast_divbias_168_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_168_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_168_172_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_168_173;
reg [31:0] ath_ant_div_conf_fast_divbias_168_173_reg;
reg [31:0] ath_ant_div_conf_fast_divbias_168_174;
reg [31:0] ath_ant_div_conf_fast_divbias_168_174_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_175_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_175_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_177_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_177_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_179_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_179_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_181_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_181_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_183_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_183_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_185_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_185_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_187_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_187_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_189_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_189_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_191_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_191_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_193_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_193_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_195_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_195_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_197_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_197_198_reg;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
wire [15:0] legup_pthreadpoll_threadID;

// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_0_4 == 32'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_0_4 == 32'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_0_4 == 32'd2)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_0_4 == 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_0_4 != 32'd0)) & (ath_ant_div_conf_fast_divbias_0_4 != 32'd1)) & (ath_ant_div_conf_fast_divbias_0_4 != 32'd2)) & (ath_ant_div_conf_fast_divbias_0_4 != 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd2)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd16)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd18)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd19)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd32)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd33)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd35)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd48)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd49)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 == 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd1)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd2)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd3)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd16)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd18)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd19)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd32)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd33)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd35)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd48)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd49)) & (ath_ant_div_conf_fast_divbias_5_11 != 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_24) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_26) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_28) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_30) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_32) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd2)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd16)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd18)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd19)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd32)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd33)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd35)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd48)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd49)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 == 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd1)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd2)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd3)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd16)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd18)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd19)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd32)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd33)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd35)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd48)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd49)) & (ath_ant_div_conf_fast_divbias_36_42 != 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_35) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_37) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_39) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_41) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_49_or_cond == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_49_or_cond == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_44) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_46) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_48) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_50) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_59_or_cond3 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_59_or_cond3 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_53) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_55) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_57) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_67_or_cond5 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_67_or_cond5 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_60) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_62) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_64) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_66) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_77_or_cond7 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_77_or_cond7 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_69) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_71) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_73) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_75) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_77) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_79) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd2)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd16)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd18)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd19)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd32)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd33)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd35)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd48)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd49)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 == 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd1)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd2)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd3)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd16)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd18)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd19)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd32)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd33)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd35)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd48)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd49)) & (ath_ant_div_conf_fast_divbias_91_97 != 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_82) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_84) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_86) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_88) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_104_107 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_104_107 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_91) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_108_111 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_108_111 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_94) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_96) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_98) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_100) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_118_121 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_118_121 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_103) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_122_125 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_122_125 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_106) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_108) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_110) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_130_133 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_130_133 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_113) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_134_137 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_134_137 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_116) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_118) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_120) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_122) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_144_147 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_144_147 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_125) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_148_151 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_148_151 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_128) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_130) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_132) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_134) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_136) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_138) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_162_165 == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_162_165 == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_141) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_143) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd2)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd3)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd16)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd18)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd19)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd32)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd33)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd35)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd48)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd49)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 == 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((((((((((((((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd1)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd2)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd3)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd16)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd18)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd19)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd32)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd33)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd35)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd48)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd49)) & (ath_ant_div_conf_fast_divbias_168_174 != 32'd50)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_146) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_148) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_150) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_152) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_154) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_156) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_158) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_160) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_162) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_164) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_166) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_168) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169;
if (reset == 1'b0 && ^(LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 8'd0;
if (reset == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %1 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 5*/
begin
ath_ant_div_conf_fast_divbias_0_1 = (arg_ant_conf + 20);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %1 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 5*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_0_1_reg <= ath_ant_div_conf_fast_divbias_0_1;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_0_1_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %2 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 4*/
begin
ath_ant_div_conf_fast_divbias_0_2 = (arg_ant_conf + 16);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %2 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 4*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_0_2_reg <= ath_ant_div_conf_fast_divbias_0_2;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_0_2_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %3 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 0*/
begin
ath_ant_div_conf_fast_divbias_0_3 = arg_ant_conf;
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %3 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_0_3_reg <= ath_ant_div_conf_fast_divbias_0_3;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_0_3_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_0_4 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_3))
begin
ath_ant_div_conf_fast_divbias_0_4_reg <= ath_ant_div_conf_fast_divbias_0_4;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_0_4_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %6 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
begin
ath_ant_div_conf_fast_divbias_5_6 = (arg_ant_conf + 4);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %6 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
ath_ant_div_conf_fast_divbias_5_6_reg <= ath_ant_div_conf_fast_divbias_5_6;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_6_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_5_7 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6))
begin
ath_ant_div_conf_fast_divbias_5_7_reg <= ath_ant_div_conf_fast_divbias_5_7;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_7_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %8 = shl i32 %7, 4*/
begin
ath_ant_div_conf_fast_divbias_5_8 = (ath_ant_div_conf_fast_divbias_5_7 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %8 = shl i32 %7, 4*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6))
begin
ath_ant_div_conf_fast_divbias_5_8_reg <= ath_ant_div_conf_fast_divbias_5_8;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_8_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %9 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_5_9 = (arg_ant_conf + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %9 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
ath_ant_div_conf_fast_divbias_5_9_reg <= ath_ant_div_conf_fast_divbias_5_9;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_9_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_5_10 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6))
begin
ath_ant_div_conf_fast_divbias_5_10_reg <= ath_ant_div_conf_fast_divbias_5_10;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_10_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %11 = or i32 %8, %10*/
begin
ath_ant_div_conf_fast_divbias_5_11 = (ath_ant_div_conf_fast_divbias_5_8 | ath_ant_div_conf_fast_divbias_5_10);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %11 = or i32 %8, %10*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_6))
begin
ath_ant_div_conf_fast_divbias_5_11_reg <= ath_ant_div_conf_fast_divbias_5_11;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_5_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_5_11_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %12*/
/*   %13 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_12_13 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %12*/
/*   %13 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
ath_ant_div_conf_fast_divbias_12_13_reg <= ath_ant_div_conf_fast_divbias_12_13;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_12_13_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %14*/
/*   %15 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_14_15 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %14*/
/*   %15 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
ath_ant_div_conf_fast_divbias_14_15_reg <= ath_ant_div_conf_fast_divbias_14_15;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_14_15_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %16*/
/*   %17 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_16_17 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %16*/
/*   %17 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
ath_ant_div_conf_fast_divbias_16_17_reg <= ath_ant_div_conf_fast_divbias_16_17;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_16_17_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %18*/
/*   %19 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_18_19 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %18*/
/*   %19 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
ath_ant_div_conf_fast_divbias_18_19_reg <= ath_ant_div_conf_fast_divbias_18_19;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_18_19_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %20*/
/*   %21 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_20_21 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %20*/
/*   %21 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
ath_ant_div_conf_fast_divbias_20_21_reg <= ath_ant_div_conf_fast_divbias_20_21;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_20_21_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %22*/
/*   %23 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_22_23 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %22*/
/*   %23 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
ath_ant_div_conf_fast_divbias_22_23_reg <= ath_ant_div_conf_fast_divbias_22_23;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_22_23_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %24*/
/*   %25 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_24_25 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %24*/
/*   %25 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
ath_ant_div_conf_fast_divbias_24_25_reg <= ath_ant_div_conf_fast_divbias_24_25;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_24_25_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %26*/
/*   %27 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_26_27 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %26*/
/*   %27 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
ath_ant_div_conf_fast_divbias_26_27_reg <= ath_ant_div_conf_fast_divbias_26_27;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_26_27_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %28*/
/*   %29 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_28_29 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %28*/
/*   %29 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
ath_ant_div_conf_fast_divbias_28_29_reg <= ath_ant_div_conf_fast_divbias_28_29;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_28_29_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %30*/
/*   %31 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_30_31 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %30*/
/*   %31 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
ath_ant_div_conf_fast_divbias_30_31_reg <= ath_ant_div_conf_fast_divbias_30_31;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_30_31_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %32*/
/*   %33 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_32_33 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %32*/
/*   %33 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
ath_ant_div_conf_fast_divbias_32_33_reg <= ath_ant_div_conf_fast_divbias_32_33;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_32_33_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %34*/
/*   %35 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_34_35 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %34*/
/*   %35 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
ath_ant_div_conf_fast_divbias_34_35_reg <= ath_ant_div_conf_fast_divbias_34_35;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_34_35_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %37 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
begin
ath_ant_div_conf_fast_divbias_36_37 = (arg_ant_conf + 4);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %37 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
ath_ant_div_conf_fast_divbias_36_37_reg <= ath_ant_div_conf_fast_divbias_36_37;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_37_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_36_38 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33))
begin
ath_ant_div_conf_fast_divbias_36_38_reg <= ath_ant_div_conf_fast_divbias_36_38;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_38_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %39 = shl i32 %38, 4*/
begin
ath_ant_div_conf_fast_divbias_36_39 = (ath_ant_div_conf_fast_divbias_36_38 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %39 = shl i32 %38, 4*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33))
begin
ath_ant_div_conf_fast_divbias_36_39_reg <= ath_ant_div_conf_fast_divbias_36_39;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_39_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %40 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_36_40 = (arg_ant_conf + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %40 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
ath_ant_div_conf_fast_divbias_36_40_reg <= ath_ant_div_conf_fast_divbias_36_40;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_40_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_36_41 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33))
begin
ath_ant_div_conf_fast_divbias_36_41_reg <= ath_ant_div_conf_fast_divbias_36_41;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_41_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %42 = or i32 %39, %41*/
begin
ath_ant_div_conf_fast_divbias_36_42 = (ath_ant_div_conf_fast_divbias_36_39 | ath_ant_div_conf_fast_divbias_36_41);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %42 = or i32 %39, %41*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_33))
begin
ath_ant_div_conf_fast_divbias_36_42_reg <= ath_ant_div_conf_fast_divbias_36_42;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_36_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_36_42_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %43*/
/*   %44 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_43_44 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %43*/
/*   %44 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
ath_ant_div_conf_fast_divbias_43_44_reg <= ath_ant_div_conf_fast_divbias_43_44;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_43_44_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %45*/
/*   %46 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_45_46 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %45*/
/*   %46 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
ath_ant_div_conf_fast_divbias_45_46_reg <= ath_ant_div_conf_fast_divbias_45_46;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_45_46_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %47*/
/*   %48 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_47_48 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %47*/
/*   %48 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
ath_ant_div_conf_fast_divbias_47_48_reg <= ath_ant_div_conf_fast_divbias_47_48;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_47_48_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %50 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_49_50 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %50 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
ath_ant_div_conf_fast_divbias_49_50_reg <= ath_ant_div_conf_fast_divbias_49_50;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_50_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_49_51 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42))
begin
ath_ant_div_conf_fast_divbias_49_51_reg <= ath_ant_div_conf_fast_divbias_49_51;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_51_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %52 = icmp eq i32 %51, 0*/
begin
ath_ant_div_conf_fast_divbias_49_52 = (ath_ant_div_conf_fast_divbias_49_51 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %52 = icmp eq i32 %51, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42))
begin
ath_ant_div_conf_fast_divbias_49_52_reg <= ath_ant_div_conf_fast_divbias_49_52;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_52_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %53 = icmp sgt i32 %alt_ratio, 0*/
begin
ath_ant_div_conf_fast_divbias_49_53 = ($signed(arg_alt_ratio) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %53 = icmp sgt i32 %alt_ratio, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
ath_ant_div_conf_fast_divbias_49_53_reg <= ath_ant_div_conf_fast_divbias_49_53;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_53_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %or.cond = and i1 %52, %53*/
begin
ath_ant_div_conf_fast_divbias_49_or_cond = (ath_ant_div_conf_fast_divbias_49_52 & ath_ant_div_conf_fast_divbias_49_53_reg);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %or.cond = and i1 %52, %53*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_42))
begin
ath_ant_div_conf_fast_divbias_49_or_cond_reg <= ath_ant_div_conf_fast_divbias_49_or_cond;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_or_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_or_cond_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %54 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_49_54 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %54 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
ath_ant_div_conf_fast_divbias_49_54_reg <= ath_ant_div_conf_fast_divbias_49_54;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_49_54_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %57*/
/*   %58 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_57_58 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %57*/
/*   %58 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
ath_ant_div_conf_fast_divbias_57_58_reg <= ath_ant_div_conf_fast_divbias_57_58;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_57_58_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %60 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_59_60 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %60 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
ath_ant_div_conf_fast_divbias_59_60_reg <= ath_ant_div_conf_fast_divbias_59_60;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_60_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_59_61 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51))
begin
ath_ant_div_conf_fast_divbias_59_61_reg <= ath_ant_div_conf_fast_divbias_59_61;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_61_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %62 = icmp eq i32 %61, 0*/
begin
ath_ant_div_conf_fast_divbias_59_62 = (ath_ant_div_conf_fast_divbias_59_61 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %62 = icmp eq i32 %61, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51))
begin
ath_ant_div_conf_fast_divbias_59_62_reg <= ath_ant_div_conf_fast_divbias_59_62;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_62_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %63 = icmp sgt i32 %alt_ratio, 0*/
begin
ath_ant_div_conf_fast_divbias_59_63 = ($signed(arg_alt_ratio) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %63 = icmp sgt i32 %alt_ratio, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
ath_ant_div_conf_fast_divbias_59_63_reg <= ath_ant_div_conf_fast_divbias_59_63;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_63_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %or.cond3 = and i1 %62, %63*/
begin
ath_ant_div_conf_fast_divbias_59_or_cond3 = (ath_ant_div_conf_fast_divbias_59_62 & ath_ant_div_conf_fast_divbias_59_63_reg);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %or.cond3 = and i1 %62, %63*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_51))
begin
ath_ant_div_conf_fast_divbias_59_or_cond3_reg <= ath_ant_div_conf_fast_divbias_59_or_cond3;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_or_cond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_or_cond3_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %64 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_59_64 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %64 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
ath_ant_div_conf_fast_divbias_59_64_reg <= ath_ant_div_conf_fast_divbias_59_64;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_59_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_59_64_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %68 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_67_68 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %68 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
ath_ant_div_conf_fast_divbias_67_68_reg <= ath_ant_div_conf_fast_divbias_67_68;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_68_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_67_69 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58))
begin
ath_ant_div_conf_fast_divbias_67_69_reg <= ath_ant_div_conf_fast_divbias_67_69;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_69_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %70 = icmp eq i32 %69, 0*/
begin
ath_ant_div_conf_fast_divbias_67_70 = (ath_ant_div_conf_fast_divbias_67_69 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %70 = icmp eq i32 %69, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58))
begin
ath_ant_div_conf_fast_divbias_67_70_reg <= ath_ant_div_conf_fast_divbias_67_70;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_70_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %71 = icmp sgt i32 %alt_ratio, 0*/
begin
ath_ant_div_conf_fast_divbias_67_71 = ($signed(arg_alt_ratio) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %71 = icmp sgt i32 %alt_ratio, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
ath_ant_div_conf_fast_divbias_67_71_reg <= ath_ant_div_conf_fast_divbias_67_71;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_71_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %or.cond5 = and i1 %70, %71*/
begin
ath_ant_div_conf_fast_divbias_67_or_cond5 = (ath_ant_div_conf_fast_divbias_67_70 & ath_ant_div_conf_fast_divbias_67_71_reg);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %or.cond5 = and i1 %70, %71*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_58))
begin
ath_ant_div_conf_fast_divbias_67_or_cond5_reg <= ath_ant_div_conf_fast_divbias_67_or_cond5;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_or_cond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_or_cond5_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %72 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_67_72 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %72 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
ath_ant_div_conf_fast_divbias_67_72_reg <= ath_ant_div_conf_fast_divbias_67_72;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_67_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_67_72_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %75*/
/*   %76 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_75_76 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %75*/
/*   %76 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
ath_ant_div_conf_fast_divbias_75_76_reg <= ath_ant_div_conf_fast_divbias_75_76;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_75_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_75_76_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %78 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_77_78 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %78 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
ath_ant_div_conf_fast_divbias_77_78_reg <= ath_ant_div_conf_fast_divbias_77_78;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_78_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_77_79 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67))
begin
ath_ant_div_conf_fast_divbias_77_79_reg <= ath_ant_div_conf_fast_divbias_77_79;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_79_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %80 = icmp eq i32 %79, 0*/
begin
ath_ant_div_conf_fast_divbias_77_80 = (ath_ant_div_conf_fast_divbias_77_79 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %80 = icmp eq i32 %79, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67))
begin
ath_ant_div_conf_fast_divbias_77_80_reg <= ath_ant_div_conf_fast_divbias_77_80;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_80_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %81 = icmp sgt i32 %alt_ratio, 0*/
begin
ath_ant_div_conf_fast_divbias_77_81 = ($signed(arg_alt_ratio) > $signed(32'd0));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %81 = icmp sgt i32 %alt_ratio, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
ath_ant_div_conf_fast_divbias_77_81_reg <= ath_ant_div_conf_fast_divbias_77_81;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_81_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %or.cond7 = and i1 %80, %81*/
begin
ath_ant_div_conf_fast_divbias_77_or_cond7 = (ath_ant_div_conf_fast_divbias_77_80 & ath_ant_div_conf_fast_divbias_77_81_reg);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %or.cond7 = and i1 %80, %81*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_67))
begin
ath_ant_div_conf_fast_divbias_77_or_cond7_reg <= ath_ant_div_conf_fast_divbias_77_or_cond7;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_or_cond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_or_cond7_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %82 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_77_82 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %82 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
ath_ant_div_conf_fast_divbias_77_82_reg <= ath_ant_div_conf_fast_divbias_77_82;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_77_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_77_82_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %85*/
/*   %86 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_85_86 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %85*/
/*   %86 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
ath_ant_div_conf_fast_divbias_85_86_reg <= ath_ant_div_conf_fast_divbias_85_86;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_85_86_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %87*/
/*   %88 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_87_88 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %87*/
/*   %88 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
ath_ant_div_conf_fast_divbias_87_88_reg <= ath_ant_div_conf_fast_divbias_87_88;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_87_88_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %89*/
/*   %90 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_89_90 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %89*/
/*   %90 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
ath_ant_div_conf_fast_divbias_89_90_reg <= ath_ant_div_conf_fast_divbias_89_90;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_89_90_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %92 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
begin
ath_ant_div_conf_fast_divbias_91_92 = (arg_ant_conf + 4);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %92 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
ath_ant_div_conf_fast_divbias_91_92_reg <= ath_ant_div_conf_fast_divbias_91_92;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_92_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_91_93 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80))
begin
ath_ant_div_conf_fast_divbias_91_93_reg <= ath_ant_div_conf_fast_divbias_91_93;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_93_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %94 = shl i32 %93, 4*/
begin
ath_ant_div_conf_fast_divbias_91_94 = (ath_ant_div_conf_fast_divbias_91_93 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %94 = shl i32 %93, 4*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80))
begin
ath_ant_div_conf_fast_divbias_91_94_reg <= ath_ant_div_conf_fast_divbias_91_94;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_94_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %95 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_91_95 = (arg_ant_conf + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %95 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
ath_ant_div_conf_fast_divbias_91_95_reg <= ath_ant_div_conf_fast_divbias_91_95;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_95_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_91_96 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80))
begin
ath_ant_div_conf_fast_divbias_91_96_reg <= ath_ant_div_conf_fast_divbias_91_96;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_96_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %97 = or i32 %94, %96*/
begin
ath_ant_div_conf_fast_divbias_91_97 = (ath_ant_div_conf_fast_divbias_91_94 | ath_ant_div_conf_fast_divbias_91_96);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %97 = or i32 %94, %96*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_80))
begin
ath_ant_div_conf_fast_divbias_91_97_reg <= ath_ant_div_conf_fast_divbias_91_97;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_91_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_91_97_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %98*/
/*   %99 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_98_99 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %98*/
/*   %99 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
ath_ant_div_conf_fast_divbias_98_99_reg <= ath_ant_div_conf_fast_divbias_98_99;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_98_99_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %100*/
/*   %101 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_100_101 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %100*/
/*   %101 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
ath_ant_div_conf_fast_divbias_100_101_reg <= ath_ant_div_conf_fast_divbias_100_101;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_100_101_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %102*/
/*   %103 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_102_103 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %102*/
/*   %103 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
ath_ant_div_conf_fast_divbias_102_103_reg <= ath_ant_div_conf_fast_divbias_102_103;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_102_103_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %105 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_104_105 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %105 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87))
begin
ath_ant_div_conf_fast_divbias_104_105_reg <= ath_ant_div_conf_fast_divbias_104_105;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_104_105_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_104_106 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89))
begin
ath_ant_div_conf_fast_divbias_104_106_reg <= ath_ant_div_conf_fast_divbias_104_106;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_104_106_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %107 = icmp eq i32 %106, 0*/
begin
ath_ant_div_conf_fast_divbias_104_107 = (ath_ant_div_conf_fast_divbias_104_106 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %107 = icmp eq i32 %106, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_89))
begin
ath_ant_div_conf_fast_divbias_104_107_reg <= ath_ant_div_conf_fast_divbias_104_107;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_104_107_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %109 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
begin
ath_ant_div_conf_fast_divbias_108_109 = arg_antcomb;
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %109 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90))
begin
ath_ant_div_conf_fast_divbias_108_109_reg <= ath_ant_div_conf_fast_divbias_108_109;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_108_109_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_108_110 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92))
begin
ath_ant_div_conf_fast_divbias_108_110_reg <= ath_ant_div_conf_fast_divbias_108_110;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_108_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_108_110_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %111 = icmp slt i32 %110, %alt_ratio*/
begin
ath_ant_div_conf_fast_divbias_108_111 = ($signed(ath_ant_div_conf_fast_divbias_108_110) < $signed(arg_alt_ratio));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %111 = icmp slt i32 %110, %alt_ratio*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_92))
begin
ath_ant_div_conf_fast_divbias_108_111_reg <= ath_ant_div_conf_fast_divbias_108_111;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_108_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_108_111_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %112*/
/*   %113 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_112_113 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %112*/
/*   %113 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
ath_ant_div_conf_fast_divbias_112_113_reg <= ath_ant_div_conf_fast_divbias_112_113;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_112_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_112_113_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %114*/
/*   %115 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_114_115 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %114*/
/*   %115 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
ath_ant_div_conf_fast_divbias_114_115_reg <= ath_ant_div_conf_fast_divbias_114_115;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_114_115_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %116*/
/*   %117 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_116_117 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %116*/
/*   %117 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
ath_ant_div_conf_fast_divbias_116_117_reg <= ath_ant_div_conf_fast_divbias_116_117;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_116_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_116_117_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %119 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_118_119 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %119 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99))
begin
ath_ant_div_conf_fast_divbias_118_119_reg <= ath_ant_div_conf_fast_divbias_118_119;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_118_119_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_118_120 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101))
begin
ath_ant_div_conf_fast_divbias_118_120_reg <= ath_ant_div_conf_fast_divbias_118_120;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_118_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_118_120_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %121 = icmp eq i32 %120, 0*/
begin
ath_ant_div_conf_fast_divbias_118_121 = (ath_ant_div_conf_fast_divbias_118_120 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %121 = icmp eq i32 %120, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_101))
begin
ath_ant_div_conf_fast_divbias_118_121_reg <= ath_ant_div_conf_fast_divbias_118_121;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_118_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_118_121_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %123 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
begin
ath_ant_div_conf_fast_divbias_122_123 = arg_antcomb;
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %123 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102))
begin
ath_ant_div_conf_fast_divbias_122_123_reg <= ath_ant_div_conf_fast_divbias_122_123;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_122_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_122_123_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_122_124 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104))
begin
ath_ant_div_conf_fast_divbias_122_124_reg <= ath_ant_div_conf_fast_divbias_122_124;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_122_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_122_124_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %125 = icmp slt i32 %124, %alt_ratio*/
begin
ath_ant_div_conf_fast_divbias_122_125 = ($signed(ath_ant_div_conf_fast_divbias_122_124) < $signed(arg_alt_ratio));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %125 = icmp slt i32 %124, %alt_ratio*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_104))
begin
ath_ant_div_conf_fast_divbias_122_125_reg <= ath_ant_div_conf_fast_divbias_122_125;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_122_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_122_125_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %126*/
/*   %127 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_126_127 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %126*/
/*   %127 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
ath_ant_div_conf_fast_divbias_126_127_reg <= ath_ant_div_conf_fast_divbias_126_127;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_126_127_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %128*/
/*   %129 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_128_129 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %128*/
/*   %129 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
ath_ant_div_conf_fast_divbias_128_129_reg <= ath_ant_div_conf_fast_divbias_128_129;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_128_129_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %131 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_130_131 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %131 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109))
begin
ath_ant_div_conf_fast_divbias_130_131_reg <= ath_ant_div_conf_fast_divbias_130_131;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_130_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_130_131_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_130_132 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111))
begin
ath_ant_div_conf_fast_divbias_130_132_reg <= ath_ant_div_conf_fast_divbias_130_132;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_130_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_130_132_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %133 = icmp eq i32 %132, 0*/
begin
ath_ant_div_conf_fast_divbias_130_133 = (ath_ant_div_conf_fast_divbias_130_132 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %133 = icmp eq i32 %132, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_111))
begin
ath_ant_div_conf_fast_divbias_130_133_reg <= ath_ant_div_conf_fast_divbias_130_133;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_130_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_130_133_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %135 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
begin
ath_ant_div_conf_fast_divbias_134_135 = arg_antcomb;
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %135 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112))
begin
ath_ant_div_conf_fast_divbias_134_135_reg <= ath_ant_div_conf_fast_divbias_134_135;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_134_135_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_134_136 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114))
begin
ath_ant_div_conf_fast_divbias_134_136_reg <= ath_ant_div_conf_fast_divbias_134_136;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_134_136_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %137 = icmp slt i32 %136, %alt_ratio*/
begin
ath_ant_div_conf_fast_divbias_134_137 = ($signed(ath_ant_div_conf_fast_divbias_134_136) < $signed(arg_alt_ratio));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %137 = icmp slt i32 %136, %alt_ratio*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_114))
begin
ath_ant_div_conf_fast_divbias_134_137_reg <= ath_ant_div_conf_fast_divbias_134_137;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_134_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_134_137_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %138*/
/*   %139 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_138_139 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %138*/
/*   %139 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
ath_ant_div_conf_fast_divbias_138_139_reg <= ath_ant_div_conf_fast_divbias_138_139;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_138_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_138_139_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %140*/
/*   %141 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_140_141 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %140*/
/*   %141 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
ath_ant_div_conf_fast_divbias_140_141_reg <= ath_ant_div_conf_fast_divbias_140_141;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_140_141_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %142*/
/*   %143 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_142_143 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %142*/
/*   %143 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
ath_ant_div_conf_fast_divbias_142_143_reg <= ath_ant_div_conf_fast_divbias_142_143;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_142_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_142_143_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %145 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_144_145 = (arg_antcomb + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %145 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121))
begin
ath_ant_div_conf_fast_divbias_144_145_reg <= ath_ant_div_conf_fast_divbias_144_145;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_144_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_144_145_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_144_146 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123))
begin
ath_ant_div_conf_fast_divbias_144_146_reg <= ath_ant_div_conf_fast_divbias_144_146;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_144_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_144_146_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %147 = icmp eq i32 %146, 0*/
begin
ath_ant_div_conf_fast_divbias_144_147 = (ath_ant_div_conf_fast_divbias_144_146 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %147 = icmp eq i32 %146, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_123))
begin
ath_ant_div_conf_fast_divbias_144_147_reg <= ath_ant_div_conf_fast_divbias_144_147;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_144_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_144_147_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %149 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
begin
ath_ant_div_conf_fast_divbias_148_149 = arg_antcomb;
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %149 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124))
begin
ath_ant_div_conf_fast_divbias_148_149_reg <= ath_ant_div_conf_fast_divbias_148_149;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_148_149_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_148_150 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126))
begin
ath_ant_div_conf_fast_divbias_148_150_reg <= ath_ant_div_conf_fast_divbias_148_150;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_148_150_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %151 = icmp slt i32 %150, %alt_ratio*/
begin
ath_ant_div_conf_fast_divbias_148_151 = ($signed(ath_ant_div_conf_fast_divbias_148_150) < $signed(arg_alt_ratio));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %151 = icmp slt i32 %150, %alt_ratio*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_126))
begin
ath_ant_div_conf_fast_divbias_148_151_reg <= ath_ant_div_conf_fast_divbias_148_151;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_148_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_148_151_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %152*/
/*   %153 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_152_153 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %152*/
/*   %153 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
ath_ant_div_conf_fast_divbias_152_153_reg <= ath_ant_div_conf_fast_divbias_152_153;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_152_153_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %154*/
/*   %155 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_154_155 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %154*/
/*   %155 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
ath_ant_div_conf_fast_divbias_154_155_reg <= ath_ant_div_conf_fast_divbias_154_155;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_154_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_154_155_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %156*/
/*   %157 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_156_157 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %156*/
/*   %157 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
ath_ant_div_conf_fast_divbias_156_157_reg <= ath_ant_div_conf_fast_divbias_156_157;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_156_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_156_157_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %158*/
/*   %159 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_158_159 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %158*/
/*   %159 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
ath_ant_div_conf_fast_divbias_158_159_reg <= ath_ant_div_conf_fast_divbias_158_159;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_158_159_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %160*/
/*   %161 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_160_161 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %160*/
/*   %161 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
ath_ant_div_conf_fast_divbias_160_161_reg <= ath_ant_div_conf_fast_divbias_160_161;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_160_161_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %163 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 1*/
begin
ath_ant_div_conf_fast_divbias_162_163 = (arg_antcomb + 4);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %163 = getelementptr inbounds %struct.ath_ant_comb* %antcomb, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137))
begin
ath_ant_div_conf_fast_divbias_162_163_reg <= ath_ant_div_conf_fast_divbias_162_163;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_162_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_162_163_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_162_164 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139))
begin
ath_ant_div_conf_fast_divbias_162_164_reg <= ath_ant_div_conf_fast_divbias_162_164;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_162_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_162_164_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %165 = icmp eq i32 %164, 0*/
begin
ath_ant_div_conf_fast_divbias_162_165 = (ath_ant_div_conf_fast_divbias_162_164 == 32'd0);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %165 = icmp eq i32 %164, 0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_139))
begin
ath_ant_div_conf_fast_divbias_162_165_reg <= ath_ant_div_conf_fast_divbias_162_165;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_162_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_162_165_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %166*/
/*   %167 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_166_167 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %166*/
/*   %167 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
ath_ant_div_conf_fast_divbias_166_167_reg <= ath_ant_div_conf_fast_divbias_166_167;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_166_167_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %169 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
begin
ath_ant_div_conf_fast_divbias_168_169 = (arg_ant_conf + 4);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %169 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 1*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
ath_ant_div_conf_fast_divbias_168_169_reg <= ath_ant_div_conf_fast_divbias_168_169;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_169_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_168_170 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144))
begin
ath_ant_div_conf_fast_divbias_168_170_reg <= ath_ant_div_conf_fast_divbias_168_170;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_170_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %171 = shl i32 %170, 4*/
begin
ath_ant_div_conf_fast_divbias_168_171 = (ath_ant_div_conf_fast_divbias_168_170 <<< (32'd4 % 32));
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %171 = shl i32 %170, 4*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144))
begin
ath_ant_div_conf_fast_divbias_168_171_reg <= ath_ant_div_conf_fast_divbias_168_171;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_171_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %172 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
begin
ath_ant_div_conf_fast_divbias_168_172 = (arg_ant_conf + 8);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %172 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 2*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
ath_ant_div_conf_fast_divbias_168_172_reg <= ath_ant_div_conf_fast_divbias_168_172;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_172_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
begin
ath_ant_div_conf_fast_divbias_168_173 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144))
begin
ath_ant_div_conf_fast_divbias_168_173_reg <= ath_ant_div_conf_fast_divbias_168_173;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_173_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %174 = or i32 %171, %173*/
begin
ath_ant_div_conf_fast_divbias_168_174 = (ath_ant_div_conf_fast_divbias_168_171 | ath_ant_div_conf_fast_divbias_168_173);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %174 = or i32 %171, %173*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_144))
begin
ath_ant_div_conf_fast_divbias_168_174_reg <= ath_ant_div_conf_fast_divbias_168_174;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_168_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_168_174_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %175*/
/*   %176 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_175_176 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %175*/
/*   %176 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
ath_ant_div_conf_fast_divbias_175_176_reg <= ath_ant_div_conf_fast_divbias_175_176;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_175_176_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %177*/
/*   %178 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_177_178 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %177*/
/*   %178 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
ath_ant_div_conf_fast_divbias_177_178_reg <= ath_ant_div_conf_fast_divbias_177_178;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_177_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_177_178_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %179*/
/*   %180 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_179_180 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %179*/
/*   %180 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
ath_ant_div_conf_fast_divbias_179_180_reg <= ath_ant_div_conf_fast_divbias_179_180;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_179_180_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %181*/
/*   %182 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_181_182 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %181*/
/*   %182 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
ath_ant_div_conf_fast_divbias_181_182_reg <= ath_ant_div_conf_fast_divbias_181_182;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_181_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_181_182_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %183*/
/*   %184 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_183_184 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %183*/
/*   %184 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
ath_ant_div_conf_fast_divbias_183_184_reg <= ath_ant_div_conf_fast_divbias_183_184;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_183_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_183_184_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %185*/
/*   %186 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_185_186 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %185*/
/*   %186 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
ath_ant_div_conf_fast_divbias_185_186_reg <= ath_ant_div_conf_fast_divbias_185_186;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_185_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_185_186_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %187*/
/*   %188 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_187_188 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %187*/
/*   %188 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
ath_ant_div_conf_fast_divbias_187_188_reg <= ath_ant_div_conf_fast_divbias_187_188;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_187_188_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %189*/
/*   %190 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_189_190 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %189*/
/*   %190 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
ath_ant_div_conf_fast_divbias_189_190_reg <= ath_ant_div_conf_fast_divbias_189_190;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_189_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_189_190_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %191*/
/*   %192 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_191_192 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %191*/
/*   %192 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
ath_ant_div_conf_fast_divbias_191_192_reg <= ath_ant_div_conf_fast_divbias_191_192;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_191_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_191_192_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %193*/
/*   %194 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_193_194 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %193*/
/*   %194 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
ath_ant_div_conf_fast_divbias_193_194_reg <= ath_ant_div_conf_fast_divbias_193_194;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_193_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_193_194_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %195*/
/*   %196 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_195_196 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %195*/
/*   %196 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
ath_ant_div_conf_fast_divbias_195_196_reg <= ath_ant_div_conf_fast_divbias_195_196;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_195_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_195_196_reg"); $finish; end
end
end
always @(*) begin
/* ath_ant_div_conf_fast_divbias: %197*/
/*   %198 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
begin
ath_ant_div_conf_fast_divbias_197_198 = (arg_ant_conf + 12);
end
end
always @(posedge clk) begin
/* ath_ant_div_conf_fast_divbias: %197*/
/*   %198 = getelementptr inbounds %struct.ath_hw_antcomb_conf* %ant_conf, i32 0, i32 3*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
ath_ant_div_conf_fast_divbias_197_198_reg <= ath_ant_div_conf_fast_divbias_197_198;
if (reset == 1'b0 && ^(ath_ant_div_conf_fast_divbias_197_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_197_198_reg"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* ath_ant_div_conf_fast_divbias: %199*/
/*   ret void*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_199_169))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %14*/
/*   store i32 61, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %18*/
/*   store i32 7, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %22*/
/*   store i32 7, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %30*/
/*   store i32 1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %34*/
/*   store i32 61, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %45*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %57*/
/*   store i32 1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %65*/
/*   store i32 63, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %66*/
/*   store i32 1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %73*/
/*   store i32 63, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %74*/
/*   store i32 1, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %85*/
/*   store i32 1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %89*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %100*/
/*   store i32 1, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %116*/
/*   store i32 1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %128*/
/*   store i32 2, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %140*/
/*   store i32 2, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %156*/
/*   store i32 1, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %160*/
/*   store i32 1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %166*/
/*   store i32 %164, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %179*/
/*   store i32 1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %183*/
/*   store i32 63, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %187*/
/*   store i32 3, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %191*/
/*   store i32 3, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
memory_controller_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %195*/
/*   store i32 6, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_0_1;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_0_2_reg;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_5_6;
end
/* ath_ant_div_conf_fast_divbias: %14*/
/*   store i32 61, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_14_15;
end
/* ath_ant_div_conf_fast_divbias: %18*/
/*   store i32 7, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_18_19;
end
/* ath_ant_div_conf_fast_divbias: %22*/
/*   store i32 7, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_22_23;
end
/* ath_ant_div_conf_fast_divbias: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_26_27;
end
/* ath_ant_div_conf_fast_divbias: %30*/
/*   store i32 1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_30_31;
end
/* ath_ant_div_conf_fast_divbias: %34*/
/*   store i32 61, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_34_35;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_36_37;
end
/* ath_ant_div_conf_fast_divbias: %45*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_45_46;
end
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_49_50;
end
/* ath_ant_div_conf_fast_divbias: %57*/
/*   store i32 1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_57_58;
end
/* ath_ant_div_conf_fast_divbias: %65*/
/*   store i32 63, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_59_64_reg;
end
/* ath_ant_div_conf_fast_divbias: %66*/
/*   store i32 1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_59_64_reg;
end
/* ath_ant_div_conf_fast_divbias: %73*/
/*   store i32 63, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_67_72_reg;
end
/* ath_ant_div_conf_fast_divbias: %74*/
/*   store i32 1, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_67_72_reg;
end
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_77_78;
end
/* ath_ant_div_conf_fast_divbias: %85*/
/*   store i32 1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_85_86;
end
/* ath_ant_div_conf_fast_divbias: %89*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_89_90;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_91_92;
end
/* ath_ant_div_conf_fast_divbias: %100*/
/*   store i32 1, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_100_101;
end
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_104_105;
end
/* ath_ant_div_conf_fast_divbias: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_112_113;
end
/* ath_ant_div_conf_fast_divbias: %116*/
/*   store i32 1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_116_117;
end
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_122_123;
end
/* ath_ant_div_conf_fast_divbias: %128*/
/*   store i32 2, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_128_129;
end
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_134_135;
end
/* ath_ant_div_conf_fast_divbias: %140*/
/*   store i32 2, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_140_141;
end
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_144_145;
end
/* ath_ant_div_conf_fast_divbias: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_152_153;
end
/* ath_ant_div_conf_fast_divbias: %156*/
/*   store i32 1, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_156_157;
end
/* ath_ant_div_conf_fast_divbias: %160*/
/*   store i32 1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_160_161;
end
/* ath_ant_div_conf_fast_divbias: %166*/
/*   store i32 %164, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_166_167;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_168_169;
end
/* ath_ant_div_conf_fast_divbias: %179*/
/*   store i32 1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_179_180;
end
/* ath_ant_div_conf_fast_divbias: %183*/
/*   store i32 63, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_183_184;
end
/* ath_ant_div_conf_fast_divbias: %187*/
/*   store i32 3, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_187_188;
end
/* ath_ant_div_conf_fast_divbias: %191*/
/*   store i32 3, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_191_192;
end
/* ath_ant_div_conf_fast_divbias: %195*/
/*   store i32 6, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
memory_controller_address_a = ath_ant_div_conf_fast_divbias_195_196;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %14*/
/*   store i32 61, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %18*/
/*   store i32 7, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %22*/
/*   store i32 7, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %30*/
/*   store i32 1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %34*/
/*   store i32 61, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %45*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %57*/
/*   store i32 1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %65*/
/*   store i32 63, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %66*/
/*   store i32 1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %73*/
/*   store i32 63, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %74*/
/*   store i32 1, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %85*/
/*   store i32 1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %89*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %100*/
/*   store i32 1, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %116*/
/*   store i32 1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %128*/
/*   store i32 2, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %140*/
/*   store i32 2, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %156*/
/*   store i32 1, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %160*/
/*   store i32 1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %166*/
/*   store i32 %164, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_write_enable_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %179*/
/*   store i32 1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %183*/
/*   store i32 63, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %187*/
/*   store i32 3, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %191*/
/*   store i32 3, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
memory_controller_write_enable_a = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %195*/
/*   store i32 6, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
memory_controller_write_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_in_a = 32'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2))
begin
memory_controller_in_a = 32'd0;
end
/* ath_ant_div_conf_fast_divbias: %14*/
/*   store i32 61, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
memory_controller_in_a = 32'd61;
end
/* ath_ant_div_conf_fast_divbias: %18*/
/*   store i32 7, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
memory_controller_in_a = 32'd7;
end
/* ath_ant_div_conf_fast_divbias: %22*/
/*   store i32 7, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
memory_controller_in_a = 32'd7;
end
/* ath_ant_div_conf_fast_divbias: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
memory_controller_in_a = 32'd0;
end
/* ath_ant_div_conf_fast_divbias: %30*/
/*   store i32 1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %34*/
/*   store i32 61, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
memory_controller_in_a = 32'd61;
end
/* ath_ant_div_conf_fast_divbias: %45*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %57*/
/*   store i32 1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %65*/
/*   store i32 63, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52))
begin
memory_controller_in_a = 32'd63;
end
/* ath_ant_div_conf_fast_divbias: %66*/
/*   store i32 1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %73*/
/*   store i32 63, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59))
begin
memory_controller_in_a = 32'd63;
end
/* ath_ant_div_conf_fast_divbias: %74*/
/*   store i32 1, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %85*/
/*   store i32 1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %89*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %100*/
/*   store i32 1, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %116*/
/*   store i32 1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %128*/
/*   store i32 2, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
memory_controller_in_a = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %140*/
/*   store i32 2, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
memory_controller_in_a = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %156*/
/*   store i32 1, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %160*/
/*   store i32 1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %166*/
/*   store i32 %164, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
memory_controller_in_a = ath_ant_div_conf_fast_divbias_162_164_reg;
end
/* ath_ant_div_conf_fast_divbias: %179*/
/*   store i32 1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
memory_controller_in_a = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %183*/
/*   store i32 63, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
memory_controller_in_a = 32'd63;
end
/* ath_ant_div_conf_fast_divbias: %187*/
/*   store i32 3, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
memory_controller_in_a = 32'd3;
end
/* ath_ant_div_conf_fast_divbias: %191*/
/*   store i32 3, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
memory_controller_in_a = 32'd3;
end
/* ath_ant_div_conf_fast_divbias: %195*/
/*   store i32 6, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
memory_controller_in_a = 32'd6;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %1, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   store i32 0, i32* %2, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_2))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %7 = load i32* %6, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %14*/
/*   store i32 61, i32* %15, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_14_9))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %18*/
/*   store i32 7, i32* %19, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_18_13))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %22*/
/*   store i32 7, i32* %23, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_22_17))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %26*/
/*   store i32 0, i32* %27, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_26_21))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %30*/
/*   store i32 1, i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_30_25))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %34*/
/*   store i32 61, i32* %35, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_34_29))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %38 = load i32* %37, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %45*/
/*   store i32 1, i32* %46, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_45_36))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %49*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_49_40))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %57*/
/*   store i32 1, i32* %58, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_57_47))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %65*/
/*   store i32 63, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_65_52))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %66*/
/*   store i32 1, i32* %64, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_66_54))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %73*/
/*   store i32 63, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_73_59))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %74*/
/*   store i32 1, i32* %72, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_74_61))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %77*/
/*   %79 = load i32* %78, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_77_65))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %85*/
/*   store i32 1, i32* %86, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_85_72))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %89*/
/*   store i32 1, i32* %90, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_89_76))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %93 = load i32* %92, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %100*/
/*   store i32 1, i32* %101, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_100_83))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %104*/
/*   %106 = load i32* %105, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_104_87))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %112*/
/*   store i32 1, i32* %113, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_112_93))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %116*/
/*   store i32 1, i32* %117, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_116_97))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %122*/
/*   %124 = load i32* %123, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_122_102))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %128*/
/*   store i32 2, i32* %129, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_128_107))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %134*/
/*   %136 = load i32* %135, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_134_112))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %140*/
/*   store i32 2, i32* %141, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_140_117))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %144*/
/*   %146 = load i32* %145, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_144_121))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %152*/
/*   store i32 1, i32* %153, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_152_127))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %156*/
/*   store i32 1, i32* %157, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_156_131))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %160*/
/*   store i32 1, i32* %161, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_160_135))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %166*/
/*   store i32 %164, i32* %167, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_166_140))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %170 = load i32* %169, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %179*/
/*   store i32 1, i32* %180, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_179_149))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %183*/
/*   store i32 63, i32* %184, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_183_153))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %187*/
/*   store i32 3, i32* %188, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_187_157))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %191*/
/*   store i32 3, i32* %192, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_191_161))
begin
memory_controller_size_a = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %195*/
/*   store i32 6, i32* %196, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_195_165))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %12*/
/*   store i32 59, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %16*/
/*   store i32 1, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %20*/
/*   store i32 2, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %28*/
/*   store i32 6, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %32*/
/*   store i32 59, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %43*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %47*/
/*   store i32 1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %55*/
/*   store i32 63, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %56*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %83*/
/*   store i32 63, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %84*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %87*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %98*/
/*   store i32 1, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %102*/
/*   store i32 1, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %114*/
/*   store i32 2, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %126*/
/*   store i32 1, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %138*/
/*   store i32 1, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %142*/
/*   store i32 1, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %154*/
/*   store i32 2, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %158*/
/*   store i32 1, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %175*/
/*   store i32 1, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %177*/
/*   store i32 57, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %181*/
/*   store i32 2, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %185*/
/*   store i32 2, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %189*/
/*   store i32 3, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %193*/
/*   store i32 1, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
memory_controller_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %197*/
/*   store i32 1, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_0_3;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_5_9;
end
/* ath_ant_div_conf_fast_divbias: %12*/
/*   store i32 59, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_12_13;
end
/* ath_ant_div_conf_fast_divbias: %16*/
/*   store i32 1, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_16_17;
end
/* ath_ant_div_conf_fast_divbias: %20*/
/*   store i32 2, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_20_21;
end
/* ath_ant_div_conf_fast_divbias: %24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_24_25;
end
/* ath_ant_div_conf_fast_divbias: %28*/
/*   store i32 6, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_28_29;
end
/* ath_ant_div_conf_fast_divbias: %32*/
/*   store i32 59, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_32_33;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_36_40;
end
/* ath_ant_div_conf_fast_divbias: %43*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_43_44;
end
/* ath_ant_div_conf_fast_divbias: %47*/
/*   store i32 1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_47_48;
end
/* ath_ant_div_conf_fast_divbias: %55*/
/*   store i32 63, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_49_54_reg;
end
/* ath_ant_div_conf_fast_divbias: %56*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_49_54_reg;
end
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_59_60;
end
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_67_68;
end
/* ath_ant_div_conf_fast_divbias: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_75_76;
end
/* ath_ant_div_conf_fast_divbias: %83*/
/*   store i32 63, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_77_82_reg;
end
/* ath_ant_div_conf_fast_divbias: %84*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_77_82_reg;
end
/* ath_ant_div_conf_fast_divbias: %87*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_87_88;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_91_95;
end
/* ath_ant_div_conf_fast_divbias: %98*/
/*   store i32 1, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_98_99;
end
/* ath_ant_div_conf_fast_divbias: %102*/
/*   store i32 1, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_102_103;
end
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_108_109;
end
/* ath_ant_div_conf_fast_divbias: %114*/
/*   store i32 2, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_114_115;
end
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_118_119;
end
/* ath_ant_div_conf_fast_divbias: %126*/
/*   store i32 1, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_126_127;
end
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_130_131;
end
/* ath_ant_div_conf_fast_divbias: %138*/
/*   store i32 1, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_138_139;
end
/* ath_ant_div_conf_fast_divbias: %142*/
/*   store i32 1, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_142_143;
end
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_148_149;
end
/* ath_ant_div_conf_fast_divbias: %154*/
/*   store i32 2, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_154_155;
end
/* ath_ant_div_conf_fast_divbias: %158*/
/*   store i32 1, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_158_159;
end
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_162_163;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_168_172;
end
/* ath_ant_div_conf_fast_divbias: %175*/
/*   store i32 1, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_175_176;
end
/* ath_ant_div_conf_fast_divbias: %177*/
/*   store i32 57, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_177_178;
end
/* ath_ant_div_conf_fast_divbias: %181*/
/*   store i32 2, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_181_182;
end
/* ath_ant_div_conf_fast_divbias: %185*/
/*   store i32 2, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_185_186;
end
/* ath_ant_div_conf_fast_divbias: %189*/
/*   store i32 3, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_189_190;
end
/* ath_ant_div_conf_fast_divbias: %193*/
/*   store i32 1, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_193_194;
end
/* ath_ant_div_conf_fast_divbias: %197*/
/*   store i32 1, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
memory_controller_address_b = ath_ant_div_conf_fast_divbias_197_198;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %12*/
/*   store i32 59, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %16*/
/*   store i32 1, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %20*/
/*   store i32 2, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %28*/
/*   store i32 6, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %32*/
/*   store i32 59, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %43*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %47*/
/*   store i32 1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %55*/
/*   store i32 63, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %56*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %83*/
/*   store i32 63, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %84*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %87*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %98*/
/*   store i32 1, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %102*/
/*   store i32 1, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %114*/
/*   store i32 2, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %126*/
/*   store i32 1, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %138*/
/*   store i32 1, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %142*/
/*   store i32 1, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %154*/
/*   store i32 2, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %158*/
/*   store i32 1, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_write_enable_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %175*/
/*   store i32 1, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %177*/
/*   store i32 57, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %181*/
/*   store i32 2, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %185*/
/*   store i32 2, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %189*/
/*   store i32 3, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %193*/
/*   store i32 1, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
memory_controller_write_enable_b = 1'd1;
end
/* ath_ant_div_conf_fast_divbias: %197*/
/*   store i32 1, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
memory_controller_write_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %12*/
/*   store i32 59, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
memory_controller_in_b = 32'd59;
end
/* ath_ant_div_conf_fast_divbias: %16*/
/*   store i32 1, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %20*/
/*   store i32 2, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
memory_controller_in_b = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
memory_controller_in_b = 32'd6;
end
/* ath_ant_div_conf_fast_divbias: %28*/
/*   store i32 6, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
memory_controller_in_b = 32'd6;
end
/* ath_ant_div_conf_fast_divbias: %32*/
/*   store i32 59, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
memory_controller_in_b = 32'd59;
end
/* ath_ant_div_conf_fast_divbias: %43*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %47*/
/*   store i32 1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %55*/
/*   store i32 63, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43))
begin
memory_controller_in_b = 32'd63;
end
/* ath_ant_div_conf_fast_divbias: %56*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %83*/
/*   store i32 63, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68))
begin
memory_controller_in_b = 32'd63;
end
/* ath_ant_div_conf_fast_divbias: %84*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %87*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %98*/
/*   store i32 1, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %102*/
/*   store i32 1, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %114*/
/*   store i32 2, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
memory_controller_in_b = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %126*/
/*   store i32 1, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %138*/
/*   store i32 1, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %142*/
/*   store i32 1, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %154*/
/*   store i32 2, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
memory_controller_in_b = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %158*/
/*   store i32 1, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %175*/
/*   store i32 1, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %177*/
/*   store i32 57, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
memory_controller_in_b = 32'd57;
end
/* ath_ant_div_conf_fast_divbias: %181*/
/*   store i32 2, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
memory_controller_in_b = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %185*/
/*   store i32 2, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
memory_controller_in_b = 32'd2;
end
/* ath_ant_div_conf_fast_divbias: %189*/
/*   store i32 3, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
memory_controller_in_b = 32'd3;
end
/* ath_ant_div_conf_fast_divbias: %193*/
/*   store i32 1, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
memory_controller_in_b = 32'd1;
end
/* ath_ant_div_conf_fast_divbias: %197*/
/*   store i32 1, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
memory_controller_in_b = 32'd1;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 1'd0;
end
/* ath_ant_div_conf_fast_divbias: %0*/
/*   %4 = load i32* %3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_0_1))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %5*/
/*   %10 = load i32* %9, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_5_4))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %12*/
/*   store i32 59, i32* %13, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_12_7))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %16*/
/*   store i32 1, i32* %17, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_16_11))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %20*/
/*   store i32 2, i32* %21, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_20_15))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %24*/
/*   store i32 6, i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_24_19))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %28*/
/*   store i32 6, i32* %29, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_28_23))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %32*/
/*   store i32 59, i32* %33, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_32_27))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %36*/
/*   %41 = load i32* %40, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_36_31))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %43*/
/*   store i32 1, i32* %44, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_43_34))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %47*/
/*   store i32 1, i32* %48, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_47_38))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %55*/
/*   store i32 63, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_55_43))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %56*/
/*   store i32 1, i32* %54, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_56_45))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %59*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_59_49))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %67*/
/*   %69 = load i32* %68, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_67_56))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %75*/
/*   store i32 1, i32* %76, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_75_63))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %83*/
/*   store i32 63, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_83_68))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %84*/
/*   store i32 1, i32* %82, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_84_70))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %87*/
/*   store i32 1, i32* %88, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_87_74))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %91*/
/*   %96 = load i32* %95, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_91_78))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %98*/
/*   store i32 1, i32* %99, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_98_81))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %102*/
/*   store i32 1, i32* %103, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_102_85))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %108*/
/*   %110 = load i32* %109, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_108_90))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %114*/
/*   store i32 2, i32* %115, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_114_95))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %118*/
/*   %120 = load i32* %119, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_118_99))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %126*/
/*   store i32 1, i32* %127, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_126_105))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %130*/
/*   %132 = load i32* %131, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_130_109))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %138*/
/*   store i32 1, i32* %139, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_138_115))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %142*/
/*   store i32 1, i32* %143, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_142_119))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %148*/
/*   %150 = load i32* %149, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_148_124))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %154*/
/*   store i32 2, i32* %155, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_154_129))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %158*/
/*   store i32 1, i32* %159, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_158_133))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %162*/
/*   %164 = load i32* %163, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_162_137))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %168*/
/*   %173 = load i32* %172, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_168_142))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %175*/
/*   store i32 1, i32* %176, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_175_145))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %177*/
/*   store i32 57, i32* %178, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_177_147))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %181*/
/*   store i32 2, i32* %182, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_181_151))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %185*/
/*   store i32 2, i32* %186, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_185_155))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %189*/
/*   store i32 3, i32* %190, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_189_159))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %193*/
/*   store i32 1, i32* %194, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_193_163))
begin
memory_controller_size_b = 2'd2;
end
/* ath_ant_div_conf_fast_divbias: %197*/
/*   store i32 1, i32* %198, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_ath_ant_div_conf_fast_divbias_BB_197_167))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest,
	return_val
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_main_BB_0_1 = 2'd1;
parameter [1:0] LEGUP_F_main_BB_0_3 = 2'd3;
parameter [1:0] LEGUP_function_call_2 = 2'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [1:0] cur_state;
wire [2:0] _str_address_a;
wire  _str_write_enable_a;
wire [7:0] _str_in_a;
wire [7:0] _str_out_a;
wire [2:0] _str_address_b;
wire  _str_write_enable_b;
wire [7:0] _str_in_b;
wire [7:0] _str_out_b;
reg  ath_ant_div_conf_fast_divbias_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_arg_ant_conf;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_arg_antcomb;
reg [31:0] ath_ant_div_conf_fast_divbias_arg_alt_ratio;
wire  ath_ant_div_conf_fast_divbias_memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_address_a;
wire  ath_ant_div_conf_fast_divbias_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_out_a;
wire [1:0] ath_ant_div_conf_fast_divbias_memory_controller_size_a;
wire  ath_ant_div_conf_fast_divbias_memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_address_b;
wire  ath_ant_div_conf_fast_divbias_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ath_ant_div_conf_fast_divbias_memory_controller_out_b;
wire [1:0] ath_ant_div_conf_fast_divbias_memory_controller_size_b;
reg  ath_ant_div_conf_fast_divbias_memory_controller_waitrequest;
wire  ath_ant_div_conf_fast_divbias_finish;
reg  ath_ant_div_conf_fast_divbias_finish_final;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;


ath_ant_div_conf_fast_divbias ath_ant_div_conf_fast_divbias_inst (
	.memory_controller_enable_a (ath_ant_div_conf_fast_divbias_memory_controller_enable_a),
	.memory_controller_address_a (ath_ant_div_conf_fast_divbias_memory_controller_address_a),
	.memory_controller_write_enable_a (ath_ant_div_conf_fast_divbias_memory_controller_write_enable_a),
	.memory_controller_in_a (ath_ant_div_conf_fast_divbias_memory_controller_in_a),
	.memory_controller_size_a (ath_ant_div_conf_fast_divbias_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ath_ant_div_conf_fast_divbias_memory_controller_enable_b),
	.memory_controller_address_b (ath_ant_div_conf_fast_divbias_memory_controller_address_b),
	.memory_controller_write_enable_b (ath_ant_div_conf_fast_divbias_memory_controller_write_enable_b),
	.memory_controller_in_b (ath_ant_div_conf_fast_divbias_memory_controller_in_b),
	.memory_controller_size_b (ath_ant_div_conf_fast_divbias_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ath_ant_div_conf_fast_divbias_start),
	.finish (ath_ant_div_conf_fast_divbias_finish),
	.arg_ant_conf (ath_ant_div_conf_fast_divbias_arg_ant_conf),
	.arg_antcomb (ath_ant_div_conf_fast_divbias_arg_antcomb),
	.arg_alt_ratio (ath_ant_div_conf_fast_divbias_arg_alt_ratio)
);


// Local Rams


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_finish_final == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_function_call_2) & (memory_controller_waitrequest == 1'd0)) & (ath_ant_div_conf_fast_divbias_finish_final == 1'd0)))
begin
cur_state <= LEGUP_function_call_2;
if (reset == 1'b0 && ^(LEGUP_function_call_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_3;
if (reset == 1'b0 && ^(LEGUP_F_main_BB_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (reset == 1'b0 && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 2'd0;
if (reset == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_start <= 1'd1;
if (reset == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_start"); $finish; end
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
ath_ant_div_conf_fast_divbias_start <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_arg_ant_conf <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_arg_ant_conf"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_arg_antcomb <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_arg_antcomb"); $finish; end
end
end
always @(posedge clk) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
ath_ant_div_conf_fast_divbias_arg_alt_ratio <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ath_ant_div_conf_fast_divbias_arg_alt_ratio"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
begin
ath_ant_div_conf_fast_divbias_memory_controller_out_a = memory_controller_out_a;
end
end
always @(*) begin
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
begin
ath_ant_div_conf_fast_divbias_memory_controller_out_b = memory_controller_out_b;
end
end
always @(*) begin
ath_ant_div_conf_fast_divbias_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
ath_ant_div_conf_fast_divbias_finish_final = ath_ant_div_conf_fast_divbias_finish;
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (reset == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (reset == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ath_ant_div_conf_fast_divbias_memory_controller_enable_a;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_a = ath_ant_div_conf_fast_divbias_memory_controller_enable_a;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_address_a;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_address_a;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ath_ant_div_conf_fast_divbias_memory_controller_write_enable_a;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_a = ath_ant_div_conf_fast_divbias_memory_controller_write_enable_a;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_in_a;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_in_a;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ath_ant_div_conf_fast_divbias_memory_controller_size_a;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_a[1:0] = ath_ant_div_conf_fast_divbias_memory_controller_size_a;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ath_ant_div_conf_fast_divbias_memory_controller_enable_b;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_enable_b = ath_ant_div_conf_fast_divbias_memory_controller_enable_b;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_address_b;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_address_b;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ath_ant_div_conf_fast_divbias_memory_controller_write_enable_b;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_write_enable_b = ath_ant_div_conf_fast_divbias_memory_controller_write_enable_b;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_in_b;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ath_ant_div_conf_fast_divbias_memory_controller_in_b;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ath_ant_div_conf_fast_divbias_memory_controller_size_b;
end
/* main: %0*/
/*   tail call void @ath_ant_div_conf_fast_divbias(%struct.ath_hw_antcomb_conf* undef, %struct.ath_ant_comb* undef, i32 undef)*/
if ((cur_state == LEGUP_function_call_2))
begin
memory_controller_size_b[1:0] = ath_ant_div_conf_fast_divbias_memory_controller_size_b;
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (reset == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %0*/
/*   ret i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_3))
begin
return_val <= 32'd0;
if (reset == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end

endmodule 
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module rom_dual_port
(
	clk,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = q_a_reg[latency];
assign q_b = q_b_reg[latency];


endmodule
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [3:0] KEY;
    input [17:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire clk = CLOCK_50;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
	reg [3:0] hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end

    hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
    hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
    hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
    hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
    hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
    hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
    hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
    hex_digits h0( .x(hex0), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
